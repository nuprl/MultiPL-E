language: py
name: HumanEval_145_order_by_points
results:
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_points = []\n    for n in nums:\n        sum_points.append(sum([d\
    \ for d in str(n)]))\n    sum_points.sort()\n    return [n * -1 for n in sum_points]\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1wfpg1l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc1wfpg1l.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpc1wfpg1l.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpc1wfpg1l.py\", line 18, in order_by_points\n    sum_points.append(sum([d\
    \ for d in str(n)]))\nTypeError: unsupported operand type(s) for +: 'int' and\
    \ 'str'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # TODO\n    return nums\n\ndef check(candidate):\n  \
    \  assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplzhxmsy_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplzhxmsy_.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmplzhxmsy_.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    total = 0\n    for i in range(len(nums)):\n\
    \        total += nums[i]\n        if total < 0:\n            nums[i], nums[total]\
    \ = nums[total], nums[i]\n            total += i\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77ls11w7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp77ls11w7.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp77ls11w7.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp77ls11w7.py\", line 21, in order_by_points\n    nums[i],\
    \ nums[total] = nums[total], nums[i]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(num) / len(num))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnv9v1hwk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnv9v1hwk.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnv9v1hwk.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnv9v1hwk.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(num) / len(num))\n  File \"/tmp/tmpnv9v1hwk.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(num) / len(num))\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums_length = len(nums)\n    sum_nums = sum(nums)\n \
    \   ret_list = []\n    # get the sum of the digits in the first nums\n    first_nums_sum_num\
    \ = sum_nums - nums[0]\n    for i in range(nums_length):\n        # if the sum\
    \ of the digits of the current element is greater than the sum of the digits\n\
    \        # of the first element of the current sublist, add the element in the\
    \ sublist\n        # if not, remove the element in the current sublist\n     \
    \   if sum_nums - nums[i] > first_nums_sum_num:\n            ret_list.append(nums[i])\n\
    \        else:\n            ret_list.remove(nums[i])\n            \n    return\
    \ ret_list\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyycqi5tk.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyycqi5tk.py\", line 41,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyycqi5tk.py\", line\
    \ 33, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpyycqi5tk.py\", line 28, in order_by_points\n    ret_list.remove(nums[i])\n\
    ValueError: list.remove(x): x not in list\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    \n    import re\n\n    sums = {}\n    for n in nums:\n\
    \        if n in sums:\n            sums[n] += n\n        else:\n            sums[n]\
    \ = n\n    \n    sorted_sums = sorted(sums, key=sums.get, reverse=True)\n    return\
    \ [sums[v] for v in sorted_sums]\n</cell>\n<cell>\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5s_zp0o9.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa9t1eq1p.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpa9t1eq1p.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmpa9t1eq1p.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n\
    \    sorted_nums = sorted(nums, key=lambda num: total - num, reverse=True)\n \
    \   return sorted_nums\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnpv04x1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjnpv04x1.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpjnpv04x1.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    answer = []\n    for i in range(len(nums)):\n       \
    \ digit_sum = 0\n        digit = 0\n        for num in nums:\n            digit_sum\
    \ += num\n            digit += num\n        if digit_sum > 0:\n            answer.append(nums.index(nums)\
    \ + 1)\n            digit_sum -= nums[nums.index(nums) + 1]\n        answer.append(digit)\n\
    \    return answer\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzva02z3c.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzva02z3c.py\", line 38,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzva02z3c.py\", line\
    \ 30, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    sum_digits = nums[0]\n\
    \    res_sorted_nums = []\n    for num in nums:\n        sum_digits += num\n \
    \       res_sorted_nums.append(num)\n    res_sorted_nums.sort(key=lambda num:\
    \ sum_digits - num)\n    return res_sorted_nums\n\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5jx6_3v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj5jx6_3v.py\", line 35,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpj5jx6_3v.py\", line\
    \ 27, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: (sum([int(c) for c\
    \ in str(x)])), reverse=True)\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95c4uluy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp95c4uluy.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp95c4uluy.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp95c4uluy.py\", line 16, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: (sum([int(c) for c in str(x)])), reverse=True)\n\
    \  File \"/tmp/tmp95c4uluy.py\", line 16, in <lambda>\n    nums = sorted(nums,\
    \ key=lambda x: (sum([int(c) for c in str(x)])), reverse=True)\n  File \"/tmp/tmp95c4uluy.py\"\
    , line 16, in <listcomp>\n    nums = sorted(nums, key=lambda x: (sum([int(c) for\
    \ c in str(x)])), reverse=True)\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums_sum = [sum(i) for i in nums]\n    return [i[0] for\
    \ i in sorted(enumerate(nums_sum), key=lambda x:x[1])]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixrm9ybd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpixrm9ybd.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpixrm9ybd.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpixrm9ybd.py\", line 16, in order_by_points\n    nums_sum\
    \ = [sum(i) for i in nums]\n  File \"/tmp/tmpixrm9ybd.py\", line 16, in <listcomp>\n\
    \    nums_sum = [sum(i) for i in nums]\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums_sum = 0\n    for num in nums:\n        nums_sum\
    \ += num\n    nums_sum = sorted(nums_sum, key=lambda x: (nums.index(x), x))\n\
    \    return nums_sum\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58ki6hoa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp58ki6hoa.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp58ki6hoa.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp58ki6hoa.py\", line 19, in order_by_points\n    nums_sum\
    \ = sorted(nums_sum, key=lambda x: (nums.index(x), x))\nTypeError: 'int' object\
    \ is not iterable\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_nums = sum(nums)\n    nums_sorted = sorted(nums)\n\
    \    sorted_nums = sorted(nums_sorted, key=lambda x:sum_nums.index(x))\n    return\
    \ sorted_nums\n\nnums = [8, 2, -1, -4, 5]\nresult = order_by_points(nums)\nprint(result)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=python,sorting |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6_kidvdk.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n\n    sum_nums\
    \ = 0\n    sum_digits = 0\n    for num in nums:\n        sum_digits += num //\
    \ 10\n        sum_nums += num % 10\n\n    return nums[sum_nums].index(sum_digits)\
    \ + nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgez8hcrv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgez8hcrv.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpgez8hcrv.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpgez8hcrv.py\", line 25, in order_by_points\n    return\
    \ nums[sum_nums].index(sum_digits) + nums\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sorted_by_sum, original_list = 0, []\n    for i in nums:\n\
    \        sorted_by_sum += i\n        original_list.append(i)\n    sorted_by_sum\
    \ = sorted(nums, key=lambda x: sum(x), reverse=True)\n    sorted_by_sum = sum(sorted_by_sum)\n\
    \    return [i for i,j in enumerate(original_list) if j == sorted_by_sum]\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpck98i7nh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpck98i7nh.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpck98i7nh.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpck98i7nh.py\", line 20, in order_by_points\n    sorted_by_sum\
    \ = sorted(nums, key=lambda x: sum(x), reverse=True)\n  File \"/tmp/tmpck98i7nh.py\"\
    , line 20, in <lambda>\n    sorted_by_sum = sorted(nums, key=lambda x: sum(x),\
    \ reverse=True)\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: (sum(num), -nums.index(num)))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt27omt1i.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt27omt1i.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpt27omt1i.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpt27omt1i.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: (sum(num), -nums.index(num)))\n  File \"/tmp/tmpt27omt1i.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: (sum(num), -nums.index(num)))\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    nums = sorted(nums,\
    \ key=lambda x: sum(map(lambda y: y - x, x)))\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitwe44we.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpitwe44we.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpitwe44we.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpitwe44we.py\", line 18, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: sum(map(lambda y: y - x, x)))\n  File \"/tmp/tmpitwe44we.py\"\
    , line 18, in <lambda>\n    nums = sorted(nums, key=lambda x: sum(map(lambda y:\
    \ y - x, x)))\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    def helper(nums,\
    \ index, max_sum):\n        if index < len(nums):\n            digit_sum = 0\n\
    \            for d in nums[index]:\n                digit_sum += d\n         \
    \   max_sum = max(max_sum, digit_sum)\n            helper(nums, index + 1, max_sum)\n\
    \        else:\n            if max_sum == 0:\n                sorted_nums = [x\
    \ for x in nums if x != 0]\n                sorted_nums.sort()\n             \
    \   for i in reversed(range(len(nums))):\n                    if nums[i] != 0\
    \ and i != index:\n                        nums[i], nums[index] = nums[index],\
    \ nums[i]\n                        sorted_nums[i], sorted_nums[index] = sorted_nums[index],\
    \ sorted_nums[i]\n                        index += 1\n            return nums\n\
    \    max_sum = 0\n    nums = sorted(nums, key=lambda x: helper(nums, index=0,\
    \ max_sum=max_sum))\n    return nums\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpooou0jqm.py\", line 37\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda i: sum([int(d) for d in\
    \ str(i)]), reverse=True)\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuai1189f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuai1189f.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpuai1189f.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpuai1189f.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda i: sum([int(d) for d in str(i)]), reverse=True)\n  File\
    \ \"/tmp/tmpuai1189f.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ i: sum([int(d) for d in str(i)]), reverse=True)\n  File \"/tmp/tmpuai1189f.py\"\
    , line 16, in <listcomp>\n    return sorted(nums, key=lambda i: sum([int(d) for\
    \ d in str(i)]), reverse=True)\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if nums:\n        sum_of_nums = 0\n        for i, num\
    \ in enumerate(nums):\n            sum_of_nums += num\n            if sum_of_nums\
    \ == 0:\n                break\n            else:\n                nums[i] = num\n\
    \n        sorted_nums = nums[:]\n        sorted_nums.sort()\n        sorted_nums.reverse()\n\
    \        return sorted_nums\n\n    else:\n        return []\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwn9_d9wq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpwn9_d9wq.py\", line 43,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwn9_d9wq.py\", line\
    \ 35, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_so_far = 0\n    for num in nums:\n        sum_so_far\
    \ += num\n        nums.remove(num)\n    return nums + [sum_so_far]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm309xc9i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpm309xc9i.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpm309xc9i.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: (sum(str(x).split(\"\
    \")), x))\n    return nums\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5rjyhyt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd5rjyhyt.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpd5rjyhyt.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpd5rjyhyt.py\", line 16, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: (sum(str(x).split(\"\")), x))\n  File \"/tmp/tmpd5rjyhyt.py\"\
    , line 16, in <lambda>\n    nums = sorted(nums, key=lambda x: (sum(str(x).split(\"\
    \")), x))\nValueError: empty separator\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = sorted(nums, reverse = True) # Sort from greatest\
    \ to least\n    points = list(map(int, points))\n    points.sort(reverse = True)\
    \ # Sort from greatest to least\n    points = list(map(int, points))\n    points\
    \ = list(map(int, points))\n    return points\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccj7febx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpccj7febx.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpccj7febx.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    nums = sorted(nums,\
    \ key=lambda x: sum([int(x) for x in str(x)]))\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvkw2so2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbvkw2so2.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbvkw2so2.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbvkw2so2.py\", line 18, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\n  File \"/tmp/tmpbvkw2so2.py\"\
    , line 18, in <lambda>\n    nums = sorted(nums, key=lambda x: sum([int(x) for\
    \ x in str(x)]))\n  File \"/tmp/tmpbvkw2so2.py\", line 18, in <listcomp>\n   \
    \ nums = sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp865jd1ou.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp865jd1ou.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp865jd1ou.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp865jd1ou.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmp865jd1ou.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n       \
    \ sum = 0\n        for j in range(len(nums)):\n            sum += nums[j] if nums[j]\
    \ == 0 else nums[j]\n        if sum != 0:\n            if sum < 0 and nums[i]<0:\n\
    \                nums[i] = -1\n            elif sum > 0 and nums[i]>0:\n     \
    \           nums[i] = 1\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fple1a6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_fple1a6.py\", line 37,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp_fple1a6.py\", line\
    \ 29, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    sum_of_nums =\
    \ sum(nums)\n    nums = sorted(nums, key=lambda x: sum_of_nums - x)\n    return\
    \ nums\n</cell>\n<cell>\nassert order_by_points([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\nassert order_by_points([]) == []\n</cell>\n<text>\nTASK 3\n\
    Write a function which returns all unique numbers that are less than the given\
    \ number. For example:\n\nGiven list = [1, 5, 7, 11, 7, 5, 9, 11] the function\
    \ should return [1, 5, 7, 9, 11]\nGiven list = [1, 5, 7, 11] the function should\
    \ return [1, 5, 7, 11]\nGiven list = [5, 7, 11, 7, 5, 9, 11] the function should\
    \ return [5, 7, 9, 11]\nGiven list = [5, 7, 11, 7, 5, 9, 11, 1] function should\
    \ return []\nGiven list = [1, 5, 7, 5, 9, 11, 1] function should return [1, 5,\
    \ 7, 5, 9, 11, 1]\nGiven list = [11, 5, 7, 5, 9, 11, 1] function should return\
    \ []\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmmv5x8gy.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def sort_func(c):\n        return -sum(sorted(c)[0])\n\
    \    \n    sorted_nums = sorted(nums, key=sort_func)\n    \n    return sorted_nums\n\
    </cell>\n<cell>\ntests = [\n    ([], []),\n    ([0], [0]),\n    ([1], [1]),\n\
    \    ([1, 2], [1]),\n    ([1, 1, 1], [1]),\n    ([-1, 1, -1, 3, -4], [-1, 1, -3,\
    \ -1, 4]),\n]\n\nfor nums, expected in tests:\n    actual = order_by_points(nums)\n\
    \    assert actual == expected\n</cell>\n<text>\nPalindrome Numbers\nNow let's\
    \ talk about palindrome numbers. We've seen strings being used in a lot of problems\
    \ as an easy way to compare numbers. But what if you wanted to check if a given\
    \ number was a palindrome? To do that, we can just convert the number into a string,\
    \ then reverse the string, and compare the original and reversed strings. This\
    \ can be done using the following function, which takes an integer and returns\
    \ the string representation of that number:\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp40ffif90.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    import collections\n    counts = collections.Counter(nums)\n\
    \    counts_list = list(counts.items())\n    counts_list.sort(key=lambda x: x[1])\n\
    \    sorted_nums = []\n    sorted_indexs = []\n    for i in range(len(counts_list)):\n\
    \        sorted_nums.append(counts_list[i][0])\n        sorted_indexs.append(i)\n\
    \    return sorted_nums[::-1][sorted_indexs]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1hrinpvd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1hrinpvd.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1hrinpvd.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1hrinpvd.py\", line 25, in order_by_points\n    return\
    \ sorted_nums[::-1][sorted_indexs]\nTypeError: list indices must be integers or\
    \ slices, not list\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    for index, num in enumerate(nums):\n\
    \        while index > 0 and nums[index] - nums[index-1] > 10:\n            nums[index],\
    \ nums[index-1] = nums[index-1], nums[index]\n            index -= 1\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl224yi6k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl224yi6k.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpl224yi6k.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    import collections\n    nums_sum = collections.defaultdict(int)\n\
    \    sorted_nums = []\n    original_nums = list(nums)\n    for num in nums:\n\
    \        nums_sum[num] += 1\n    \n    # sort according to sum\n    sorted_nums\
    \ = sorted(nums_sum.items(), key=lambda x: sum(x[1]), reverse=True)\n\n    # sort\
    \ according to index in original list\n    sorted_nums = sorted(sorted_nums, key=lambda\
    \ x: original_nums.index(x[0]))\n\n    return sorted_nums\n</cell>\n<cell>\nprint(order_by_points([1,\
    \ 11, -1, -11, -12]))\n</cell>\n<cell>\nprint(order_by_points([]))\n</cell>\n\
    <text>\nTask 3\nWrite a function that calculates the maximum number from a list\
    \ that contains only positive and negative integers.\n\nExamples:\n\n>>> max([1,\
    \ -2, 4, 0, 5])\n5\n>>> max([-1, -2, -3, -4, 0])\n0\n>>> max([2, 1, 2, 4, 1])\n\
    4\n>>> max([])\nTraceback (most recent call last):\n    ...\nValueError: max()\
    \ arg is an empty sequence\n>>> max([], key=lambda x: -x)\nTraceback (most recent\
    \ call last):\n    ...\nValueError: max() arg is an empty sequence\n>>> max([10,\
    \ 0, 2, 0])\n0\n>>> max([10, 2, 0], key=lambda x: -x)\n2\n>>> max([-10, 2, 0],\
    \ key=lambda x: -x)\n0\n>>> max([-10, 0, 2, 0], key=lambda x: -x)\n-2\n>>> max([-10,\
    \ -2, 0], key=lambda x: -x)\n10\n>>> max([0, 10, 2, 0], key=lambda x: -x)\n2\n\
    >>> max([0, 10, -2, 0], key=lambda x: -x)\n0\n>>> max([-10, 0, 2, 0], key=lambda\
    \ x: -x)\n0\n>>> max([-10, -2, 0], key=lambda x: -x)\n-10\n>>> max([0, -2, 10,\
    \ 0], key=lambda x: -x)\n0\n>>> max([-2, 10, 0, 0], key=lambda x: -x)\n-10\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0a9pwx2s.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n\n    digit_sums =\
    \ [sum(int(d) for d in str(n)) for n in nums]\n\n    sorted_indices = sorted(range(len(nums)),\
    \ key=lambda i: digit_sums[i])\n\n    return nums[sorted_indices]\n</code>\nAnd,\
    \ here is a recursive version of it.\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7dngjp8z.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    return [num for num in nums if nums.index(num)\
    \ == 0]\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke9hqvw0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpke9hqvw0.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpke9hqvw0.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976324
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    s = 0\n    nums = sorted(nums, key=lambda x: (s, x))\n\
    \    nums = sorted(nums, key=lambda x: (s, x))\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptynh1zfe.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptynh1zfe.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptynh1zfe.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpjsb5al.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphpjsb5al.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphpjsb5al.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    else:\n      \
    \  nums = sorted(nums)\n        # Use lambda to sort nums while adding their digits\
    \ together\n        return sorted(nums, key=lambda n: sum(map(int, str(n))))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxovtr4k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvxovtr4k.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvxovtr4k.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvxovtr4k.py\", line 21, in order_by_points\n    return\
    \ sorted(nums, key=lambda n: sum(map(int, str(n))))\n  File \"/tmp/tmpvxovtr4k.py\"\
    , line 21, in <lambda>\n    return sorted(nums, key=lambda n: sum(map(int, str(n))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    length = len(nums)\n    index = sorted(range(len(nums)),\
    \ key=lambda i:nums[i], reverse=True)\n    res = [nums[i] for i in index]\n  \
    \  return res\n\nprint(order_by_points([]))\nprint(order_by_points([1, 2, 3, 4,\
    \ 5]))\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([1,\
    \ 11]))\nprint(order_by_points([10, 2, 3, 5]))\nprint(order_by_points([1, 2, 3,\
    \ 5]))\nprint(order_by_points([1, 10, 11, 12, 13]))\nprint(order_by_points([5,\
    \ 6, 7, 8, 9]))\nprint(order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(order_by_points([1,\
    \ 2, 3, 8, 9, 5, 6, 7, 4]))\nprint(order_by_points([1, 2, 3, 8, 9, 5, 6, 4, 7]))\n\
    print(order_by_points([5, 6, 7, 8, 9, 1, 2, 3, 4, 0]))\nprint(order_by_points([5,\
    \ 6, 7, 8, 9, 1, 2, 3, 4, 0]))\nprint(order_by_points([1, 2, 3, 8, 9, 5, 6, 4,\
    \ 7, 0]))\nprint(order_by_points([5, 6, 7, 8, 9, 1, 2, 3, 4, 0]))\nprint(order_by_points([1,\
    \ 2, 3, 8, 9, 5, 6, 4, 7, 0]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkahwwxvk.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpkahwwxvk.py\", line 47,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpkahwwxvk.py\", line\
    \ 39, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: '[]

    [5, 4, 3, 2, 1]

    [11, 1, -1, -11, -12]

    [11, 1]

    [10, 5, 3, 2]

    [5, 3, 2, 1]

    [13, 12, 11, 10, 1]

    [9, 8, 7, 6, 5]

    [9, 8, 7, 6, 5, 4, 3, 2, 1]

    [9, 8, 7, 6, 5, 4, 3, 2, 1]

    [9, 8, 7, 6, 5, 4, 3, 2, 1]

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

    '
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = []\n    nums = list(set(nums))\n    for num\
    \ in nums:\n        total = 0\n        for n in nums:\n            total += int(n)\
    \ // num\n        points.append(total)\n    points = sorted(points)\n    return\
    \ [nums.index(i) for i in points]\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqn8ale0n.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqn8ale0n.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqn8ale0n.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqn8ale0n.py\", line 24, in order_by_points\n    return\
    \ [nums.index(i) for i in points]\n  File \"/tmp/tmpqn8ale0n.py\", line 24, in\
    \ <listcomp>\n    return [nums.index(i) for i in points]\nValueError: -3 is not\
    \ in list\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # Initialize result\n    result = []\n\n    # Sort by\
    \ sum of digits in descending order\n    sum_digits = list(map(lambda x: sum([int(digit)\
    \ for digit in str(x)]), nums))\n    sum_digits.sort(reverse=True)\n\n    # Sort\
    \ by order of original list\n    for idx, sum_digit in enumerate(sum_digits):\n\
    \        result.insert(idx, nums[sum_digits.index(sum_digit)])\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65cyi2xk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp65cyi2xk.py\", line 38,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp65cyi2xk.py\", line\
    \ 30, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp65cyi2xk.py\", line 20, in order_by_points\n    sum_digits\
    \ = list(map(lambda x: sum([int(digit) for digit in str(x)]), nums))\n  File \"\
    /tmp/tmp65cyi2xk.py\", line 20, in <lambda>\n    sum_digits = list(map(lambda\
    \ x: sum([int(digit) for digit in str(x)]), nums))\n  File \"/tmp/tmp65cyi2xk.py\"\
    , line 20, in <listcomp>\n    sum_digits = list(map(lambda x: sum([int(digit)\
    \ for digit in str(x)]), nums))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    digits = [0] * 10\n    for i, num in enumerate(nums):\n\
    \        digits[i] = num % 10\n    return sorted(nums, key=lambda num: sum(digits))\
    \ if digits else nums\n</code>\n<|/ a dscore=1 tags=python,list,sorting |>\n<|\
    \ a tags=python,list,sorting dscore=0 |>\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqlj4nw5d.py\", line 20\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    res=[]\n    sum_of_digits=0\n    for i in nums:\n   \
    \     sum_of_digits+=i\n        res.append(i)\n    return sorted(res,key=lambda\
    \ x:sum_of_digits)\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmrhpwad.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbmrhpwad.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbmrhpwad.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda point: (sum(point), point.index(point[0])))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4hf1zi7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx4hf1zi7.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpx4hf1zi7.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpx4hf1zi7.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda point: (sum(point), point.index(point[0])))\n  File\
    \ \"/tmp/tmpx4hf1zi7.py\", line 16, in <lambda>\n    return sorted(nums, key=lambda\
    \ point: (sum(point), point.index(point[0])))\nTypeError: 'int' object is not\
    \ iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum = 0\n    # Write your code here\n    sums = sorted(nums)\n\
    \    return sums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfm3iruq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyfm3iruq.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyfm3iruq.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = [int(x) for x in nums]\n    nums.sort(key=lambda\
    \ x:sum(map(int, str(x))), reverse=True)\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5wskyxq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr5wskyxq.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpr5wskyxq.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpr5wskyxq.py\", line 17, in order_by_points\n    nums.sort(key=lambda\
    \ x:sum(map(int, str(x))), reverse=True)\n  File \"/tmp/tmpr5wskyxq.py\", line\
    \ 17, in <lambda>\n    nums.sort(key=lambda x:sum(map(int, str(x))), reverse=True)\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    digit_sums: List[int] = []\n    for num in nums:\n  \
    \      digit_sums.append(sum(num))\n\n    sorted_nums = sorted(nums, key=lambda\
    \ x: digit_sums.index(x) + 1)\n    return sorted_nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcf8p3bv4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpcf8p3bv4.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpcf8p3bv4.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpcf8p3bv4.py\", line 18, in order_by_points\n    digit_sums.append(sum(num))\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sorted_by_points = sorted(nums, key=lambda num: (sum(num),\
    \ num))\n    return [x[1] for x in sorted_by_points]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_l9efvn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpm_l9efvn.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpm_l9efvn.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpm_l9efvn.py\", line 16, in order_by_points\n    sorted_by_points\
    \ = sorted(nums, key=lambda num: (sum(num), num))\n  File \"/tmp/tmpm_l9efvn.py\"\
    , line 16, in <lambda>\n    sorted_by_points = sorted(nums, key=lambda num: (sum(num),\
    \ num))\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    # nums is a tuple\
    \ of integers\n    sorted_nums = sorted(nums)\n    sum_nums = [sum(sorted_nums[:i\
    \ + 1]) for i in range(len(sorted_nums))]\n    # nums is a list now\n    sorted_nums\
    \ = [num for num, sum in zip(sorted_nums, sum_nums) if sum != 0]\n    return sorted_nums\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznndussa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpznndussa.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpznndussa.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    nums = sorted(nums, key=lambda x:sum([int(x)\
    \ for x in str(x)]), reverse=True)\n    return nums\n</code>\n<|/ a tags=python,sorting,list\
    \ |>\n<| c |>\nThis has better time complexity than the accepted answer.\n<|/\
    \ c |>\n<| a dscore=2 |>\nUsing Python's sorted function with a key function:\n\
    <code>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0fw0sh_m.py\", line 25\n    Using Python's sorted function\
    \ with a key function:\n                ^\nSyntaxError: unterminated string literal\
    \ (detected at line 25)\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # todo write your code here\n    dic = {}\n    for i\
    \ in nums:\n        if i in dic:\n            dic[i]+=1\n        else:\n     \
    \       dic[i] = 1\n    dic.keys()\n    return [i[0] for i in sorted(dic.items(),\
    \ key=lambda x:x[1], reverse=True)]\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ is O(n), but OP's solution is O(n^2) (because of the sort).\n<|/ c |>\n<| c\
    \ |>\nI actually think it's worse. `O(N + M) + O(N^2)` -> `O(N + M)`. It's a minor\
    \ detail, but I'd argue that it makes the problem easier to reason about.\n<|/\
    \ c |>\n<| a dscore=1 tags=list,python,sorting |>\n<code>\nlst=[12,2,3,6,7,11,5]\
    \ \nlst1 = []\nlst2 = []\nlst3 = []\nfor i in lst:\n    lst1.append(int(i))\n\
    for i in lst1:\n    if i in lst2:\n        lst2.append(i)\n    else:\n       \
    \ lst2.append(i)\nfor i in lst2:\n    lst3.append(i)\nlst3\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\n<code>\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmple_hxq3_.py\", line 28\n    This solution is O(n), but\
    \ OP's solution is O(n^2) (because of the sort).\n                           \
    \      ^\nSyntaxError: unterminated string literal (detected at line 28)\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    \n    return sorted(nums, key=lambda num: sum(map(int,\
    \ str(num))))\n    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb189m_y_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb189m_y_.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpb189m_y_.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpb189m_y_.py\", line 17, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(map(int, str(num))))\n  File \"/tmp/tmpb189m_y_.py\"\
    , line 17, in <lambda>\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    soln = []\n    for i, num in enumerate(nums):\n     \
    \   summ = sum(list(map(int, str(num))))\n        soln.append([num, summ])\n \
    \   soln.sort(key=lambda x: x[1], reverse=True)\n    return [x[0] for x in soln]\n\
    </code>\n<|/ a tags=python,sorting,python-3.x,arrays,algorithm dscore=2 |>\n<|\
    \ c |>\nI appreciate your answer, but this is not what I'm looking for. Your solution\
    \ sorts the list by the digits and then by their indices. I'm looking for the\
    \ opposite: firstly, order the list by digits, and then by their indices in the\
    \ original list.\n<|/ c |>\n<| c |>\nI misread the question. I thought you wanted\
    \ to sort by sum of the digits, and then by their position in the original list.\
    \ I updated my answer, and tested it using your example data.\n<|/ c |>\n<| a\
    \ dscore=1 |>\nA simple way is to split the list into digits and rebuild it with\
    \ the new list that contains the order.\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7frbtvq7.py\", line 23\n    <|/ a tags=python,sorting,python-3.x,arrays,algorithm\
    \ dscore=2 |>\n                                      ^\nSyntaxError: invalid decimal\
    \ literal\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    res = []\n    nums\
    \ = sorted(nums, reverse=True)\n    sum = 0\n    for i in nums:\n        sum +=\
    \ i\n        res.append(i)\n        res.append(sum)\n    return res\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8ahw7lz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv8ahw7lz.py\", line 37,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpv8ahw7lz.py\", line\
    \ 29, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_points = 0\n    sum_point_list = [0]\n    for i in\
    \ nums:\n        sum_points += i\n        sum_point_list.append(sum_points)\n\n\
    \    point_list = [0] + sum_point_list\n\n    point_list.sort(key=lambda x: point_list.index(x))\n\
    \    nums = [ii for ii in point_list if ii != sum_points]\n    nums.sort()\n \
    \   return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1z6kj7l.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph1z6kj7l.py\", line 38,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmph1z6kj7l.py\", line\
    \ 30, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmph1z6kj7l.py\", line 24, in order_by_points\n    point_list.sort(key=lambda\
    \ x: point_list.index(x))\n  File \"/tmp/tmph1z6kj7l.py\", line 24, in <lambda>\n\
    \    point_list.sort(key=lambda x: point_list.index(x))\nValueError: 0 is not\
    \ in list\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # your code here\n    sums = [0] * len(nums)\n    for\
    \ i, num in enumerate(nums):\n        sums[i] += num\n    ans = sorted(list(zip(sums,\
    \ nums)), key=lambda x: x[0])\n    return ans\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt374ygax.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt374ygax.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpt374ygax.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    digits = []\n\
    \    sum = 0\n    for i in range(len(nums)):\n        digits.append(nums[i] //\
    \ 10)\n        sum += nums[i] % 10\n    digits = list(set(digits))\n    digits.sort()\n\
    \    idx = 0\n    for i in range(len(digits)):\n        if sum - digits[i] >=\
    \ 0:\n            nums[idx] = digits[i]\n            idx += 1\n            sum\
    \ -= digits[i]\n    ordered_nums = nums[idx:] + nums[:idx]\n    return ordered_nums\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkpz84_x.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnkpz84_x.py\", line 43,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnkpz84_x.py\", line\
    \ 35, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # write your code here\n    \n    return sorted(nums,\
    \ key=lambda x: sum(str(x)))\n\n</cell>\n<text>\n5.3 Reverse Sorting\n\n</text>\n\
    <text>\nWrite a function that accepts a list and returns a new list that is a\
    \ copy of the list but in reverse order\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvkzjh_d3.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    res: List[int]\
    \ = []\n    while nums:\n        num1 = nums[0]\n        sum1 = sum(num1)\n  \
    \      if sum1 == sum1[0]:\n            sum1 = -sum1\n            res.append(num1)\n\
    \            nums.remove(num1)\n            continue\n        num2 = nums[0]\n\
    \        sum2 = sum(num2)\n        if sum2 == sum2[0]:\n            sum2 = -sum2\n\
    \            res.append(num2)\n            nums.remove(num2)\n            continue\n\
    \        if sum1 != sum2:\n            sum3 = sum(num1)\n            sum4 = sum(num2)\n\
    \            if sum3 == sum3:\n                sum3 = -sum3\n                res.append(num1)\n\
    \            else:\n                res.append(num2)\n                res.extend(num1)\n\
    \                res.extend(num2)\n                nums.remove(num1)\n       \
    \         nums.remove(num2)\n                continue\n        if sum1 == sum3:\n\
    \            res.append(num1)\n            nums.remove(num1)\n            continue\n\
    \        if sum2 == sum3:\n            res.append(num2)\n            nums.remove(num2)\n\
    \            continue\n        nums.remove(num1)\n        nums.remove(num2)\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_tqrngq.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpc_tqrngq.py\", line 68,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpc_tqrngq.py\", line\
    \ 60, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpc_tqrngq.py\", line 21, in order_by_points\n    sum1 =\
    \ sum(num1)\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if nums:\n        nums = sorted(nums, key=lambda item:\
    \ sum_of_digits(item))\n        ordered_nums = []\n        for i in nums:\n  \
    \          if sum_of_digits(i) not in ordered_nums:\n                ordered_nums.append(sum_of_digits(i))\n\
    \        return ordered_nums\n    else:\n        return nums\n</code>\n<|/ a tags=python,list\
    \ |>\n<| a dscore=0 tags=python,list |>\nYou can do like this\n<code>\nnums =\
    \ [1, 11, -1, -11, -12]\nfinal_nums = sorted(nums, key=lambda x:sum([int(i) for\
    \ i in str(x)]))\nprint(final_nums)\n</code>\nOutput\n<code>\n[-1, -11, 1, -12,\
    \ 11]\n</code>\n<|/ a |>\n<| a tags=python,list |>\nThe question has already been\
    \ answered here: How to sort a python list of integers correctly?\nAs per the\
    \ accepted answer, you can use key argument, which, as the name suggests, sorts\
    \ the list according to a key given.\n<code>\n>>> nums = [1, 11, -1, -11, -12]\n\
    >>> nums.sort(key=lambda x:sum([int(i) for i in str(x)]))\n>>> nums\n[-1, -11,\
    \ 1, -12, 11]\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,list |>\nYou can use\
    \ built-in function sorted function.\n<code>\n>>> my_list = [1, 11, -1, -11, -12]\n\
    >>> sorted(my_list)\n[-1, -11, 1, -12, 11]\n>>> \n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\nUsing lambda and sorted:\n<code>\nnums = [1, 11, -1, -11, -12]\nnew_list\
    \ = sorted(nums, key=lambda num: sum([int(i) for i in str(num)]))\nprint(new_list)\n\
    </code>\nOutput:\n<code>\n[-1, -11, 1, -12, 11]\n</code>\n<|/ a tags=python,list\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nnums = [1, 11, -1, -11, -12]\nfinal_nums\
    \ = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\nprint(final_nums)\n\
    </code>\nOutput\n<code>\n[-1, -11, 1, -12, 11]\n</code>\n<|/ a tags=python,list\
    \ |>\n<| c |>\nWhile this code may solve the question, [including an explanation](https://meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what \ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdpki6a5u.py\", line 25\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_digit = 0\n    sum_index = 0\n    sorted_nums = []\n\
    \    for num in nums:\n        sum_digit = sum_digit + num\n        sum_index\
    \ += 1\n        if sum_digit >= 10:\n            sum_digit = 0\n            sum_index\
    \ = 0\n            sorted_nums.append(sum_index)\n    sorted_nums.append(sum_index)\n\
    \    return sorted_nums\n\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v4lt7jv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4v4lt7jv.py\", line 39,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4v4lt7jv.py\", line\
    \ 31, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    res=[]\n    for i in range(len(nums)):\n        sum_of_digits=sum(nums)\n\
    \        if sum_of_digits == i:\n            res.extend([nums[i]])\n        else:\n\
    \            res.extend([nums[i]]*sum_of_digits)\n    return res\n</code>\n<|/\
    \ a dscore=0 tags=sorting,python,list |>\n<| c |>\nIt's not working with negative\
    \ numbers.  For example, `[1, 11, -1, -11, -12]` should be `[-1, -11, 1, -12,\
    \ 11]`.\n<|/ c |>\n<| a tags=sorting,python,list |>\nHere is my simple recursive\
    \ solution:\n<code>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfgouhl6x.py\", line 27\n    It's not working with negative\
    \ numbers.  For example, `[1, 11, -1, -11, -12]` should be `[-1, -11, 1, -12,\
    \ 11]`.\n      ^\nSyntaxError: unterminated string literal (detected at line 27)\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n\n    sum_of_digits\
    \ = sum(nums)\n\n    sorted_nums = []\n    sorted_indices = []\n    for i in range(len(nums)):\n\
    \        if sum_of_digits > nums[i]:\n            sorted_nums.append(nums[i])\n\
    \            sorted_indices.append(i)\n            sum_of_digits -= nums[i]\n\
    \    sorted_nums.append(sum_of_digits)\n\n    return [nums[i] for i in sorted_indices]\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnflj4kgi.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnflj4kgi.py\", line 41,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnflj4kgi.py\", line\
    \ 33, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    sorted_nums = [0 for _ in range(len(nums))]\n\
    \    for i in range(len(nums)):\n        sorted_nums[i] = nums[i]\n        for\
    \ j in reversed(range(i + 1, len(nums))):\n            if nums[j] > nums[i]:\n\
    \                sorted_nums[j + 1] = nums[j] - nums[i]\n                break\n\
    \    return sorted_nums\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdnf8ltt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgdnf8ltt.py\", line 35,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpgdnf8ltt.py\", line\
    \ 27, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpgdnf8ltt.py\", line 22, in order_by_points\n    sorted_nums[j\
    \ + 1] = nums[j] - nums[i]\nIndexError: list assignment index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    from collections import defaultdict\n    sorted_nums\
    \ = defaultdict(list)\n    for n in nums:\n        sorted_nums[sum(n)].append(n)\n\
    \    return list(sorted(nums, key=lambda n: sorted_nums[sum(n)][0]))\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdi9onngv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdi9onngv.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdi9onngv.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdi9onngv.py\", line 19, in order_by_points\n    sorted_nums[sum(n)].append(n)\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # Solution 1: Using Counter\n    return sorted(nums,\
    \ key=lambda x: (sum([int(x) for x in str(x)]), x))\n\n    # Solution 2: Using\
    \ Sort\n    # return sorted(nums, key=sum)\n\n    # Solution 3: Using Sort\n \
    \   return sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\n\n    #\
    \ Solution 4: Using Sort\n    return sorted(nums, key=lambda x: sum([int(x)]),\
    \ reverse=True)\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lza8pnd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5lza8pnd.py\", line 38,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5lza8pnd.py\", line\
    \ 30, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp5lza8pnd.py\", line 17, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum([int(x) for x in str(x)]), x))\n  File \"/tmp/tmp5lza8pnd.py\"\
    , line 17, in <lambda>\n    return sorted(nums, key=lambda x: (sum([int(x) for\
    \ x in str(x)]), x))\n  File \"/tmp/tmp5lza8pnd.py\", line 17, in <listcomp>\n\
    \    return sorted(nums, key=lambda x: (sum([int(x) for x in str(x)]), x))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if nums is None or nums == []:\n        return []\n \
    \   res = []\n    for n in nums:\n        digits = [int(i) for i in str(n)]\n\
    \        res.append(digits)\n    res = sorted(res, key=lambda x: sum(x), reverse=False)\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yrsy6e6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4yrsy6e6.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4yrsy6e6.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4yrsy6e6.py\", line 20, in order_by_points\n    digits\
    \ = [int(i) for i in str(n)]\n  File \"/tmp/tmp4yrsy6e6.py\", line 20, in <listcomp>\n\
    \    digits = [int(i) for i in str(n)]\nValueError: invalid literal for int()\
    \ with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_of_digits = []\n    for i in nums:\n        sum_of_digits.append(int(i)\
    \ + sum(sum_of_digits))\n\n    return nums[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3pym0dlg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3pym0dlg.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3pym0dlg.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # TODO\n    sorted_nums = sorted(nums, key = lambda num:\
    \ sum(num))\n    return sorted_nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpenk828ld.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpenk828ld.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpenk828ld.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpenk828ld.py\", line 17, in order_by_points\n    sorted_nums\
    \ = sorted(nums, key = lambda num: sum(num))\n  File \"/tmp/tmpenk828ld.py\",\
    \ line 17, in <lambda>\n    sorted_nums = sorted(nums, key = lambda num: sum(num))\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0poj17i9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0poj17i9.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0poj17i9.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    sum_dig = sum(map(int, str(nums)))\n\
    \    return [i for i, num in enumerate(nums) if num == sum_dig]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zdu7bqd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5zdu7bqd.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5zdu7bqd.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp5zdu7bqd.py\", line 17, in order_by_points\n    sum_dig\
    \ = sum(map(int, str(nums)))\nValueError: invalid literal for int() with base\
    \ 10: '['\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    res=[]\n    for i in nums:\n        res.append(i)\n \
    \   sorted_indices=sorted(range(len(res)),key=lambda x:sum(res[x:x+1]),reverse=True)\n\
    \    for i in sorted_indices:\n        res.insert(i,res[i])\n    return res\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2g4ssyc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz2g4ssyc.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpz2g4ssyc.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = nums[:]\n    nums.sort(key=lambda num: sum(int(x)\
    \ for x in str(num)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo8_5rgrd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpo8_5rgrd.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo8_5rgrd.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo8_5rgrd.py\", line 17, in order_by_points\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\n  File \"/tmp/tmpo8_5rgrd.py\", line 17,\
    \ in <lambda>\n    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n\
    \  File \"/tmp/tmpo8_5rgrd.py\", line 17, in <genexpr>\n    nums.sort(key=lambda\
    \ num: sum(int(x) for x in str(num)))\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    int_list = [n for n in nums if n > 0]\n    sorted_list\
    \ = sorted(int_list, key=lambda x: sum(x), reverse=True)\n    return sorted_list\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm040lin2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm040lin2.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpm040lin2.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpm040lin2.py\", line 17, in order_by_points\n    sorted_list\
    \ = sorted(int_list, key=lambda x: sum(x), reverse=True)\n  File \"/tmp/tmpm040lin2.py\"\
    , line 17, in <lambda>\n    sorted_list = sorted(int_list, key=lambda x: sum(x),\
    \ reverse=True)\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = [sum(map(int, list(str(num)))) for num in nums]\n\
    \    return sorted(points, key=lambda point: points.index(point), reverse=False)\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4htrl0wf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4htrl0wf.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4htrl0wf.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4htrl0wf.py\", line 16, in order_by_points\n    points\
    \ = [sum(map(int, list(str(num)))) for num in nums]\n  File \"/tmp/tmp4htrl0wf.py\"\
    , line 16, in <listcomp>\n    points = [sum(map(int, list(str(num)))) for num\
    \ in nums]\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # \u601D\u8DEF\u662F\u627E\u5230\u6BCF\u4E00\u4F4D\u7684\
    \u6700\u5927\u503C\uFF0C\u4ECE\u800C\u80FD\u591F\u627E\u5230\u6240\u6709\u4F4D\
    \u76F8\u7B49\u7684\u6700\u5927\u503C\u3002\n    # \u540C\u65F6\u4FDD\u8BC1\u6240\
    \u6709\u4F4D\u90FD\u5927\u4E8E\u6700\u5927\u503C\u3002\u56E0\u6B64\u6211\u4EEC\
    \u53EA\u9700\u8981\u627E\u5230\u6BCF\u4E00\u4F4D\u5BF9\u5E94\u7684\u6700\u5927\
    \u503C\u5373\u53EF\u3002\n    largest = 0\n    count = 0\n    for num in nums:\n\
    \        count += num\n        if count > largest:\n            largest = count\n\
    \    return nums[nums.index(largest)]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3u1gsozo.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3u1gsozo.py\", line 35,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3u1gsozo.py\", line\
    \ 27, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp3u1gsozo.py\", line 24, in order_by_points\n    return\
    \ nums[nums.index(largest)]\nValueError: 12 is not in list\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums, i = list(nums), 0\n    while i < len(nums):\n \
    \       j = i + 1\n        while j < len(nums):\n            if nums[j] - nums[i]\
    \ > 0:\n                break\n            j += 1\n        nums[i: j] = sorted(nums[i:\
    \ j])\n        i += j\n    return nums\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjjg3ze9r.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    ans = []\n    sum = 0\n\n    for i in range(len(nums)):\n\
    \        sum += nums[i]\n        if sum < 0:\n            ans.append(i)\n    \
    \        sum = 0\n    return ans\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzr08t8u.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzzr08t8u.py\", line 35,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzzr08t8u.py\", line\
    \ 27, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<text>\nSolution:\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnyejqztj.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: (sum([int(digit)\
    \ for digit in str(num)]), num))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19zixehd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp19zixehd.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp19zixehd.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp19zixehd.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: (sum([int(digit) for digit in str(num)]), num))\n\
    \  File \"/tmp/tmp19zixehd.py\", line 16, in <lambda>\n    return sorted(nums,\
    \ key=lambda num: (sum([int(digit) for digit in str(num)]), num))\n  File \"/tmp/tmp19zixehd.py\"\
    , line 16, in <listcomp>\n    return sorted(nums, key=lambda num: (sum([int(digit)\
    \ for digit in str(num)]), num))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=sum)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpzcpkgq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnpzcpkgq.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnpzcpkgq.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnpzcpkgq.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=sum)\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = {}\n    sum = 0\n    lst = list(nums)\n    length\
    \ = len(lst)\n    for index in range(length):\n        digit = lst[index]\n  \
    \      sum += digit\n        points[sum] = index\n    lst = sorted(lst, key=lambda\
    \ num: points[num])\n    return lst\n</code>\n<|/ a dscore=1 tags=sorting,algorithm,python\
    \ |>\n<| a tags=sorting,algorithm,python |>\nYou could use an insert sort (insertion\
    \ sort) where you only compare the digit of the elements that come before them\
    \ and put them at the end. You could do this with the built-in sort function using\
    \ the key parameter as shown below\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_ud_5t58.py\", line 26\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    res=[]\n    sum_=collections.defaultdict(int)\n    for\
    \ num in nums:\n        sum_[num%10]+=num//10\n    res.append(sum_[max(sum_)]\
    \ if (len(sum_)>0) else 0)\n    for idx,num in enumerate(nums):\n        if sum_[num%10]>sum_[sum_[num%10]]:\n\
    \            res.append(nums[idx])\n            sum_[num%10]-=num//10\n      \
    \  else:\n            sum_[num%10]-=num//10\n            res.append(nums[idx])\n\
    \            res.append(sum_[num%10])\n    res.reverse()\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b4yku9j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2b4yku9j.py\", line 41,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2b4yku9j.py\", line\
    \ 33, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2b4yku9j.py\", line 17, in order_by_points\n    sum_=collections.defaultdict(int)\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    index_map = {}\n    for i, x in enumerate(nums):\n\
    \        sum = 0\n        pos = 0\n        while x > 0:\n            sum += x\
    \ % 10\n            x /= 10\n            pos += 1\n        if sum in index_map:\n\
    \            index_map[sum].append(i)\n        else:\n            index_map[sum]\
    \ = [i]\n    sorted_index = []\n    for x in index_map.values():\n        sorted_index\
    \ += x\n    return sorted_index\n    \ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdq4mfy09.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpdq4mfy09.py\", line 43,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdq4mfy09.py\", line\
    \ 35, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_dig = sum(nums)\n\n    def compare(first, second):\n\
    \        return sum_dig - first - second\n\n    return sorted(nums, key=compare)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo0xzfbey.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo0xzfbey.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo0xzfbey.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo0xzfbey.py\", line 21, in order_by_points\n    return\
    \ sorted(nums, key=compare)\nTypeError: order_by_points.<locals>.compare() missing\
    \ 1 required positional argument: 'second'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    \n    res = []\n    \n    cur_sum\
    \ = 0\n    for i, num in enumerate(nums):\n        cur_sum += num\n        res.append(i)\n\
    \    \n    nums[:] = [i for i in nums if i == i]\n    \n    return nums[:] + res\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvcs03ho.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmppvcs03ho.py\", line 38,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmppvcs03ho.py\", line\
    \ 30, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    for index, num in enumerate(nums):\n\
    \        if num in nums and nums[index] > num:\n            nums[index], nums[nums.index(num)]\
    \ = num, nums[index]\n    return nums\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4szydlog.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    length = len(nums)\n    if length <\
    \ 2:\n        return nums\n    elif length == 2:\n        if nums[0] < nums[1]:\n\
    \            return nums\n        else:\n            return [nums[1], nums[0]]\n\
    \    else:\n        for i in range(length-2):\n            if nums[i] == nums[i+1]:\n\
    \                nums[i], nums[i+1] = nums[i+1], nums[i]\n                nums[i+1],\
    \ nums[i+2] = nums[i+2], nums[i+1]\n                nums[i+2], nums[i+3] = nums[i+3],\
    \ nums[i+2]\n                nums[i+3], nums[i+4] = nums[i+4], nums[i+3]\n   \
    \             nums[i+4], nums[i+5] = nums[i+5], nums[i+4]\n                nums[i+5],\
    \ nums[i+6] = nums[i+6], nums[i+5]\n                nums[i+6], nums[i+7] = nums[i+7],\
    \ nums[i+6]\n            elif nums[i] < nums[i+1]:\n                nums[i], nums[i+1]\
    \ = nums[i+1], nums[i]\n                nums[i+1], nums[i+2] = nums[i+2], nums[i+1]\n\
    \                nums[i+2], nums[i+3] = nums[i+3], nums[i+2]\n               \
    \ nums[i+3], nums[i+4] = nums[i+4], nums[i+3]\n                nums[i+4], nums[i+5]\
    \ = nums[i+5], nums[i+4]\n                nums[i+5], nums[i+6] = nums[i+6], nums[i+5]\n\
    \                nums[i+6], nums[i+7] = nums[i+7], nums[i+6]\n            else:\n\
    \                nums[i+1], nums[i+1] = nums[i+1], nums[i]\n                nums[i+2],\
    \ nums[i+2] = nums[i+2], nums[i+2]\n                nums[i+3], nums[i+3] = nums[i+3],\
    \ nums[i+3]\n                nums[i+4], nums[i+4] = nums[i+4], nums[i+4]\n   \
    \             nums[i+5], nums[i+5] = nums[i+5], nums[i+5]\n                nums[i+6],\
    \ nums[i+6] = nums[i+6], nums[i+6]\n                nums[i+7], nums[i+7] = nums[i+7],\
    \ nums[i+7]\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9p1svsa.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpj9p1svsa.py\", line 62,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpj9p1svsa.py\", line\
    \ 54, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpj9p1svsa.py\", line 40, in order_by_points\n    nums[i+4],\
    \ nums[i+5] = nums[i+5], nums[i+4]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = sorted(nums, reverse=True)\n    points = sorted(points)\n\
    \    points = [i for i in nums if i % 10 == points[nums.index(i, 10)]]\n    return\
    \ points\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwjypldy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcwjypldy.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpcwjypldy.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpcwjypldy.py\", line 18, in order_by_points\n    points\
    \ = [i for i in nums if i % 10 == points[nums.index(i, 10)]]\n  File \"/tmp/tmpcwjypldy.py\"\
    , line 18, in <listcomp>\n    points = [i for i in nums if i % 10 == points[nums.index(i,\
    \ 10)]]\nValueError: 1 is not in list\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # Write your code here\n    \n    if len(nums) == 0:\n\
    \        return nums\n\n    sum_of_nums = 0\n    sum_of_nums = sum(nums)\n\n \
    \   sorted_nums = nums\n    if sum_of_nums == 0:\n        return sorted_nums\n\
    \    else:\n        for n in nums:\n            digit = n % 10\n            sum_of_nums\
    \ = sum_of_nums - digit\n            sorted_nums.insert(0, sorted_nums.pop(sum_of_nums))\n\
    \            \n    return sorted_nums\n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9crdvweb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp9crdvweb.py\", line 45,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp9crdvweb.py\", line\
    \ 37, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp9crdvweb.py\", line 31, in order_by_points\n    sorted_nums.insert(0,\
    \ sorted_nums.pop(sum_of_nums))\nIndexError: pop index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    nums.sort()\n\
    \    digits = [0]\n    for i in range(1, len(nums)):\n        digits.append(digits[-1]\
    \ + nums[i] % 10)\n    # sort the digits by decreasing order\n    digits.sort(reverse=True)\n\
    \    # return the list with original indices and the sorted digits\n    return\
    \ [nums.index(i, nums) for i, nums in enumerate(digits)]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7b232o7m.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7b232o7m.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7b232o7m.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7b232o7m.py\", line 25, in order_by_points\n    return\
    \ [nums.index(i, nums) for i, nums in enumerate(digits)]\n  File \"/tmp/tmp7b232o7m.py\"\
    , line 25, in <listcomp>\n    return [nums.index(i, nums) for i, nums in enumerate(digits)]\n\
    AttributeError: 'int' object has no attribute 'index'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # Your code here\n    return sorted(nums, key=lambda\
    \ x: sum(list(map(int, str(x)))), reverse=True)\n\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0g3wriyr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0g3wriyr.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0g3wriyr.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0g3wriyr.py\", line 17, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(list(map(int, str(x)))), reverse=True)\n  File\
    \ \"/tmp/tmp0g3wriyr.py\", line 17, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: sum(list(map(int, str(x)))), reverse=True)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum = 0\n    length = len(nums)\n    sorted_list = []\n\
    \    for i in range(length):\n        sum += nums[i]\n        sorted_list.append(nums[i])\n\
    \n    # sort\n    for i in range(length - 1):\n        if sum > 0 and sum < 10:\n\
    \            sum -= sorted_list[length - i - 1]\n            sorted_list[length\
    \ - i - 1] = nums[i]\n            sum += nums[i]\n\n    sorted_list.extend(nums[length\
    \ - 1:])\n    return sorted_list\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp627l0avx.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp627l0avx.py\", line 42,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp627l0avx.py\", line\
    \ 34, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums, key=lambda num: sum_digits(num))\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvl75tvjc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvl75tvjc.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvl75tvjc.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvl75tvjc.py\", line 16, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda num: sum_digits(num))\n  File \"/tmp/tmpvl75tvjc.py\"\
    , line 16, in <lambda>\n    nums = sorted(nums, key=lambda num: sum_digits(num))\n\
    NameError: name 'sum_digits' is not defined\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = [None] * len(nums)\n    sums = []\n\n    for\
    \ i, x in enumerate(nums):\n        sums.append(sum(int(digit) for digit in str(x)))\n\
    \        points[i] = x\n\n    return points[sums.index(max(sums))]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue3fect_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpue3fect_.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpue3fect_.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpue3fect_.py\", line 20, in order_by_points\n    sums.append(sum(int(digit)\
    \ for digit in str(x)))\n  File \"/tmp/tmpue3fect_.py\", line 20, in <genexpr>\n\
    \    sums.append(sum(int(digit) for digit in str(x)))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n       \
    \ total = sum(nums[:i] + nums[i + 1:])\n        if total >= 10:\n            nums[i],\
    \ nums[total] = nums[total], nums[i]\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvx0jxjj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmvx0jxjj.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmvx0jxjj.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def helper(nums, ans, i, start):\n        if start ==\
    \ len(nums):\n            return\n        if nums[start] < 0 or (nums[start] !=\
    \ 0 and nums[start] not in ans):\n            ans.append(nums[start])\n      \
    \      helper(nums, ans, i+1, start+1)\n            ans.pop()\n            helper(nums,\
    \ ans, i, start+1)\n            ans.pop()\n        else:\n            helper(nums,\
    \ ans, i+1, start+1)\n            helper(nums, ans, i, start+1)\n\n    nums.sort()\n\
    \    return ans\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hd1urp3.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9hd1urp3.py\", line 42,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp9hd1urp3.py\", line\
    \ 34, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp9hd1urp3.py\", line 30, in order_by_points\n    return\
    \ ans\nNameError: name 'ans' is not defined. Did you mean: 'abs'?\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda i: sum(str(i)))\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=python,sorting,list |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcnon1lek.py\", line 17\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key = sum_of_digits)\n</cell>\n<cell>\n\
    print(order_by_points([]))\nprint(order_by_points([1, -1, 2]))\nprint(order_by_points([-1,\
    \ -10, 2, -20, 3]))\nprint(order_by_points([-1, -10, 2, -20, 3, -10]))\n</cell>\n\
    <text>\nNotice that all the items in the list have the same value of the sum of\
    \ their digits. Because of this, Python will sort them in ascending order by the\
    \ index of the items in the original list. To demonstrate, here is an example:\n\
    \n\n</text>\n<cell>\nprint(order_by_points([1, -1, 2, -2, 3]))\n</cell>\n<text>\n\
    In the previous example, the elements of the list were sorted in ascending order\
    \ (using the index values of the items). We can change this behavior by specifying\
    \ the key parameter to the sorted() function, which is a function that accepts\
    \ an item in the list and returns the value that item should be sorted by. In\
    \ this way, we get the opposite result, but sort by their values (the sum of the\
    \ digits).\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgkr0aowv.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: (sum(x) // len(x) or\
    \ float('inf'), x))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y2iv4op.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_y2iv4op.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp_y2iv4op.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp_y2iv4op.py\", line 16, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: (sum(x) // len(x) or float('inf'), x))\n  File \"\
    /tmp/tmp_y2iv4op.py\", line 16, in <lambda>\n    nums = sorted(nums, key=lambda\
    \ x: (sum(x) // len(x) or float('inf'), x))\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_of_digits = [sum(num//10**(len(str(num))+1)) for\
    \ num in nums]\n    order = [i for i, _ in enumerate(sum_of_digits) if sum_of_digits[i]\
    \ != 0]\n    return [nums[i] for i in order]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj4wn9qi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbj4wn9qi.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbj4wn9qi.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbj4wn9qi.py\", line 16, in order_by_points\n    sum_of_digits\
    \ = [sum(num//10**(len(str(num))+1)) for num in nums]\n  File \"/tmp/tmpbj4wn9qi.py\"\
    , line 16, in <listcomp>\n    sum_of_digits = [sum(num//10**(len(str(num))+1))\
    \ for num in nums]\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    if len(nums)\
    \ == 1:\n        return nums\n    sum_of_digits = sum(nums)\n    rest_of_nums\
    \ = [num for num in nums if sum_of_digits % num != 0]\n    rest_of_nums.sort()\n\
    \    return sum([num for num in rest_of_nums]) \n\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_uo3oj4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr_uo3oj4.py\", line 34,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpr_uo3oj4.py\", line\
    \ 26, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # start with a copy of the given list\n    nums_copy\
    \ = list(nums)\n    # sort based on sum of their digits\n    nums_copy.sort(key=lambda\
    \ num: (sum(map(int, str(num)))))\n    return nums_copy\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqya890l9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqya890l9.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqya890l9.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqya890l9.py\", line 19, in order_by_points\n    nums_copy.sort(key=lambda\
    \ num: (sum(map(int, str(num)))))\n  File \"/tmp/tmpqya890l9.py\", line 19, in\
    \ <lambda>\n    nums_copy.sort(key=lambda num: (sum(map(int, str(num)))))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    sum_points=[]\n    point_index=[]\n\
    \    for i in range(len(nums)):\n        sum_points.append(nums[i]//10*10)\n \
    \       point_index.append(i)\n    sum_points.sort()\n    for k in range(len(sum_points)):\n\
    \        sum_points[k]=sum_points[k]+k\n    for i in range(len(sum_points)):\n\
    \        nums[point_index[i]]=sum_points[i]\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08jihe10.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp08jihe10.py\", line 39,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp08jihe10.py\", line\
    \ 31, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # todo write your code here\n\n    return sorted(nums,\
    \ key=lambda n: sum(map(int, str(n))))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpg6fmoq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxpg6fmoq.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpxpg6fmoq.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpxpg6fmoq.py\", line 18, in order_by_points\n    return\
    \ sorted(nums, key=lambda n: sum(map(int, str(n))))\n  File \"/tmp/tmpxpg6fmoq.py\"\
    , line 18, in <lambda>\n    return sorted(nums, key=lambda n: sum(map(int, str(n))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum([int(x) for x in\
    \ str(x)]))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8s01i8p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx8s01i8p.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpx8s01i8p.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpx8s01i8p.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\n  File \"/tmp/tmpx8s01i8p.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum([int(x) for\
    \ x in str(x)]))\n  File \"/tmp/tmpx8s01i8p.py\", line 16, in <listcomp>\n   \
    \ return sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n    nums_sum = sum(nums)\n\
    \    if nums_sum == 0:\n        return nums[:]\n    sorted_nums = []\n    for\
    \ num in nums:\n        if nums_sum != 0:\n            digit_sum = nums_sum %\
    \ 10\n            digit_idx = digit_sum // 10\n            sum_idx = digit_idx\
    \ * 10 + num\n            sorted_nums.append(sum_idx)\n            nums_sum -=\
    \ num\n    if nums_sum != 0:\n        digit_sum = nums_sum % 10\n        digit_idx\
    \ = digit_sum // 10\n        sum_idx = digit_idx * 10 + nums[len(nums) - 1]\n\
    \        sorted_nums.append(sum_idx)\n    return sorted_nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9e6ziyop.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp9e6ziyop.py\", line 45,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp9e6ziyop.py\", line\
    \ 37, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    sums = []\n    for i, n in enumerate(nums):\n\
    \        sums.append(sum(int(d) for d in str(n)))\n    \n    return nums[sums.index(max(sums))]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupgjb7y8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpupgjb7y8.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpupgjb7y8.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpupgjb7y8.py\", line 19, in order_by_points\n    sums.append(sum(int(d)\
    \ for d in str(n)))\n  File \"/tmp/tmpupgjb7y8.py\", line 19, in <genexpr>\n \
    \   sums.append(sum(int(d) for d in str(n)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    digits = {int(digit)\
    \ for digit in nums}\n    sum_of_digits = sum(digits)\n    sort = sorted(nums,\
    \ key=lambda k: digits[k]) # sort descending by digits\n    sorted_with_first_index\
    \ = sort + (list(range(len(nums))) if sum_of_digits != 0 else [])\n    return\
    \ sorted_with_first_index\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde09_oo9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpde09_oo9.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpde09_oo9.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpde09_oo9.py\", line 20, in order_by_points\n    sort =\
    \ sorted(nums, key=lambda k: digits[k]) # sort descending by digits\n  File \"\
    /tmp/tmpde09_oo9.py\", line 20, in <lambda>\n    sort = sorted(nums, key=lambda\
    \ k: digits[k]) # sort descending by digits\nTypeError: 'set' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: (sum(num), nums.index(num)))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowr5qvez.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpowr5qvez.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpowr5qvez.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpowr5qvez.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: (sum(num), nums.index(num)))\n  File \"/tmp/tmpowr5qvez.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: (sum(num), nums.index(num)))\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sorted_nums = []\n    i = 0\n    while i < len(nums):\n\
    \        sum_of_digits = 0\n        while nums[i] > 0:\n            sum_of_digits\
    \ += nums[i] % 10\n            nums[i] //= 10\n\n        sorted_nums.append(sum_of_digits)\n\
    \        i += 1\n\n    return sorted_nums\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4np64po.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw4np64po.py\", line 39,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpw4np64po.py\", line\
    \ 31, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5czfoba.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn5czfoba.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpn5czfoba.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpn5czfoba.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: sum(map(int, str(num))))\n  File \"/tmp/tmpn5czfoba.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n\n    nums_len = len(nums)\n\
    \    points = [0 for _ in range(nums_len)]\n\n    for i in range(nums_len):\n\
    \        points[i] = sum([x for x, y in zip(nums[0: i], nums[i:])])\n\n    points.sort()\n\
    \n    reversed_points = [points[i] for i in range(nums_len)]\n\n    return reversed_points\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2gyvltr.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmps2gyvltr.py\", line 41,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmps2gyvltr.py\", line\
    \ 33, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    ans: List[int] = []\n    sum_of_digits: int = sum(nums)\n\
    \    for index, num in enumerate(nums):\n        if sum_of_digits == sum(str(num)):\n\
    \            ans.append(num)\n    return ans\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2wrv7kv1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2wrv7kv1.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2wrv7kv1.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2wrv7kv1.py\", line 19, in order_by_points\n    if sum_of_digits\
    \ == sum(str(num)):\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    sums = [sum(x) for x in nums]\n\
    \    indexes = [i for i, x in enumerate(sums) if x == 0]\n    res = [nums[idx]\
    \ for idx in indexes]\n    res.sort()\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiou6cgno.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpiou6cgno.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpiou6cgno.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpiou6cgno.py\", line 17, in order_by_points\n    sums =\
    \ [sum(x) for x in nums]\n  File \"/tmp/tmpiou6cgno.py\", line 17, in <listcomp>\n\
    \    sums = [sum(x) for x in nums]\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    sorted_sums = []\n    sorted_sums.append(nums[0])\n\
    \    for index in range(1, len(nums)):\n        curr_num = nums[index]\n     \
    \   prev_num = nums[index-1]\n        curr_sum = sum(int(c) for c in str(curr_num))\n\
    \        prev_sum = sum(int(c) for c in str(prev_num))\n        if curr_sum >\
    \ prev_sum:\n            sorted_sums.insert(0, curr_num)\n        else:\n    \
    \        sorted_sums.append(curr_num)\n    return sorted_sums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx32rd0uz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpx32rd0uz.py\", line 39,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpx32rd0uz.py\", line\
    \ 31, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpx32rd0uz.py\", line 22, in order_by_points\n    curr_sum\
    \ = sum(int(c) for c in str(curr_num))\n  File \"/tmp/tmpx32rd0uz.py\", line 22,\
    \ in <genexpr>\n    curr_sum = sum(int(c) for c in str(curr_num))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sum_so_far = 0\n    lst = sorted(nums, key=lambda x:sum_so_far\
    \ + x)\n    return lst\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpylj96v8r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpylj96v8r.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpylj96v8r.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # return sorted(nums, key=lambda x: sum(x), reverse =\
    \ True)\n    \n    # try using lambda and map\n    # return sorted(nums, key =\
    \ lambda x: sum(x), reverse = True)\n\n    # try using sum, filter and sort\n\
    \    return sorted(list(filter(lambda x: (sum(map(int, str(x))) == x[0]), nums))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpag4wuouy.py\", line 22\n    return sorted(list(filter(lambda\
    \ x: (sum(map(int, str(x))) == x[0]), nums))\n                 ^\nSyntaxError:\
    \ '(' was never closed\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    digits = [0 for _ in range(10)]\n    for i in nums:\n\
    \        digits[i] += 1\n    points = sorted(nums, key=lambda i: digits[i])\n\
    \    return points\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0lbwr8x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc0lbwr8x.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpc0lbwr8x.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpc0lbwr8x.py\", line 18, in order_by_points\n    digits[i]\
    \ += 1\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    sorted_index = []\n    for index, num in enumerate(nums):\n\
    \        sorted_index.append(num)\n    sorted_index.sort()\n    sorted_nums =\
    \ [nums[index] for index in sorted_index]\n    return sorted_nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4h7rt3og.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4h7rt3og.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4h7rt3og.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4h7rt3og.py\", line 20, in order_by_points\n    sorted_nums\
    \ = [nums[index] for index in sorted_index]\n  File \"/tmp/tmp4h7rt3og.py\", line\
    \ 20, in <listcomp>\n    sorted_nums = [nums[index] for index in sorted_index]\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda n: sum([int(i) for i in\
    \ str(n)]))\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0tnoquo8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0tnoquo8.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0tnoquo8.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0tnoquo8.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda n: sum([int(i) for i in str(n)]))\n  File \"/tmp/tmp0tnoquo8.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda n: sum([int(i) for\
    \ i in str(n)]))\n  File \"/tmp/tmp0tnoquo8.py\", line 16, in <listcomp>\n   \
    \ return sorted(nums, key=lambda n: sum([int(i) for i in str(n)]))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    def sort_func(nums):\n        dig = [0]\n        for\
    \ num in nums:\n            while num > 0:\n                dig[-1] += 1\n   \
    \             num //= 10\n        dig[-1] -= 1\n        dig.append(0)\n      \
    \  res = []\n        while dig:\n            dig.pop()\n            res.append(nums.pop(0))\
    \ if nums else res.pop()\n        return res\n\n    return sorted(nums, key =\
    \ sort_func) if nums else []\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplr4q76ve.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    summed_nums = []\n    sum_num = 0\n    for num in nums:\n\
    \        sum_num += num\n        summed_nums.append(sum_num)\n    sum_num = 0\n\
    \    for num in summed_nums:\n        sum_num += num\n    return sorted(nums,\
    \ key=lambda num: sum_num-num)\n        \n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyyk6wuxz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpyyk6wuxz.py\", line 36,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyyk6wuxz.py\", line\
    \ 28, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum([int(x) for x in\
    \ str(x)]))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8r9a45i.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_8r9a45i.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp_8r9a45i.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp_8r9a45i.py\", line 16, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\n  File \"/tmp/tmp_8r9a45i.py\"\
    , line 16, in <lambda>\n    nums = sorted(nums, key=lambda x: sum([int(x) for\
    \ x in str(x)]))\n  File \"/tmp/tmp_8r9a45i.py\", line 16, in <listcomp>\n   \
    \ nums = sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    sum_of_digits\
    \ = sum(nums)\n    point_nums = []\n    sum_of_points_of_digits = 0\n    for i,\
    \ num in enumerate(nums):\n        sum_of_points_of_digits += num * pow(10, sum_of_digits)\n\
    \        point_nums.append(i)\n    point_nums = sorted(point_nums, key=lambda\
    \ x:sum_of_points_of_digits-nums[x])\n    return list(map(lambda x: nums[x], point_nums))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqt9d44pm.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqt9d44pm.py\", line 37,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqt9d44pm.py\", line\
    \ 29, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = []\n    for i in nums:\n        points = points\
    \ + [str(i)]\n    points = sorted(points, key=lambda x: sum(int(x[j:j+i]) for\
    \ j in range(len(x))))\n    points = [int(x[:i]) for x in points for i in range(1,\
    \ len(x))]\n    return points\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwuoihyls.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwuoihyls.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwuoihyls.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwuoihyls.py\", line 19, in order_by_points\n    points\
    \ = sorted(points, key=lambda x: sum(int(x[j:j+i]) for j in range(len(x))))\n\
    \  File \"/tmp/tmpwuoihyls.py\", line 19, in <lambda>\n    points = sorted(points,\
    \ key=lambda x: sum(int(x[j:j+i]) for j in range(len(x))))\n  File \"/tmp/tmpwuoihyls.py\"\
    , line 19, in <genexpr>\n    points = sorted(points, key=lambda x: sum(int(x[j:j+i])\
    \ for j in range(len(x))))\nValueError: invalid literal for int() with base 10:\
    \ ''\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    digit_sums = {num:0 for num in nums}\n    sorted_nums\
    \ = []\n\n    for num in nums:\n        digit_sums[num] += num\n    for num in\
    \ nums:\n        sorted_nums.append(num)\n        sorted_nums.sort()\n       \
    \ \n        # remove duplicated values\n        while sorted_nums.count(num) >\
    \ 0 and sorted_nums[-1] == num:\n            sorted_nums.pop()\n        \n   \
    \ return sorted_nums\n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvcfh6xg.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzvcfh6xg.py\", line 41,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzvcfh6xg.py\", line\
    \ 33, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # write your function here\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbt4las6c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbt4las6c.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbt4las6c.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(str(x)), reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprc56qu1y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprc56qu1y.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmprc56qu1y.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmprc56qu1y.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(str(x)), reverse=True)\n  File \"/tmp/tmprc56qu1y.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(str(x)), reverse=True)\n\
    TypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa9t1eq1p.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpa9t1eq1p.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmpa9t1eq1p.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # write your code here\n    sums=[]\n    for i in range(len(nums)):\n\
    \        sums.append(nums[i]*(i+1))\n    res=sorted(nums)\n    res.sort()\n  \
    \  return res+sums\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymxijbld.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpymxijbld.py\", line 33,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpymxijbld.py\", line\
    \ 25, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpezdk7e58.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpezdk7e58.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    numbers = list(map(int, nums))\n    return sorted(numbers,\
    \ key=lambda x: sum(map(int, str(x))))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71fru9d7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp71fru9d7.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp71fru9d7.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp71fru9d7.py\", line 17, in order_by_points\n    return\
    \ sorted(numbers, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmp71fru9d7.py\"\
    , line 17, in <lambda>\n    return sorted(numbers, key=lambda x: sum(map(int,\
    \ str(x))))\nValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    numbers = list(nums)\n    numbers.sort(key=lambda x:sum(map(int,\
    \ str(x))))\n    return numbers\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdarmerfv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdarmerfv.py\", line 30,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdarmerfv.py\", line\
    \ 22, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdarmerfv.py\", line 17, in order_by_points\n    numbers.sort(key=lambda\
    \ x:sum(map(int, str(x))))\n  File \"/tmp/tmpdarmerfv.py\", line 17, in <lambda>\n\
    \    numbers.sort(key=lambda x:sum(map(int, str(x))))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    points = 0\n    sum_points = 0\n    len_nums = len(nums)\n\
    \    numbers_map = {}\n    for i in range(len_nums):\n        points += nums[i]\n\
    \        sum_points += nums[i]\n        numbers_map.update({nums[i] : i})\n\n\
    \    if sum_points == -1 * points:\n        return nums\n\n    sorted_indices\
    \ = sorted(\n        range(len_nums), key=lambda x: sum(nums[x:]), reverse=True)\n\
    \n    sorted_numbers = [nums[sorted_indices[i]]\n                      for i in\
    \ range(len_nums)]\n\n    return sorted_numbers\n\n\ndef check(candidate):\n \
    \   assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvub_6ylx.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpvub_6ylx.py\", line 46,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvub_6ylx.py\", line\
    \ 38, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    return sorted(nums, key=lambda\
    \ x:sum([int(c) for c in str(x)]))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7t2czg4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk7t2czg4.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk7t2czg4.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpk7t2czg4.py\", line 17, in order_by_points\n    return\
    \ sorted(nums, key=lambda x:sum([int(c) for c in str(x)]))\n  File \"/tmp/tmpk7t2czg4.py\"\
    , line 17, in <lambda>\n    return sorted(nums, key=lambda x:sum([int(c) for c\
    \ in str(x)]))\n  File \"/tmp/tmpk7t2czg4.py\", line 17, in <listcomp>\n    return\
    \ sorted(nums, key=lambda x:sum([int(c) for c in str(x)]))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if len(nums) == 0:\n        return nums\n    nums_dict\
    \ = dict()\n    rev_nums_dict = dict()\n    for i in range(len(nums)):\n     \
    \   if nums_dict == {}:\n            nums_dict[nums[i]] = i\n            rev_nums_dict[nums[i]]\
    \ = i\n        else:\n            sum_of_digits = sum(nums_dict.values())\n  \
    \          if sum_of_digits > nums[i]:\n                nums_dict[nums[i]] = i\n\
    \                rev_nums_dict[nums[i]] = i\n    return list(rev_nums_dict.values())\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5l0zm6jg.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5l0zm6jg.py\", line 40,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5l0zm6jg.py\", line\
    \ 32, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    # Write your solution here\n    if len(nums) == 0:\n\
    \        return []\n    dic = {}\n    for idx, num in enumerate(nums):\n     \
    \   digits = [int(i) for i in str(num)]\n        total = 0\n        for di in\
    \ digits:\n            total += di\n        if total not in dic:\n           \
    \ dic[total] = [num]\n        else:\n            dic[total].append(idx)\n    sums\
    \ = [v for k, v in sorted(dic.items(), key=lambda x:x[0])]\n    sums.sort()\n\
    \    result = [dic[x] for x in sums]\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuf_y50p2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpuf_y50p2.py\", line 43,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpuf_y50p2.py\", line\
    \ 35, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpuf_y50p2.py\", line 21, in order_by_points\n    digits\
    \ = [int(i) for i in str(num)]\n  File \"/tmp/tmpuf_y50p2.py\", line 21, in <listcomp>\n\
    \    digits = [int(i) for i in str(num)]\nValueError: invalid literal for int()\
    \ with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    res = []\n    for i in range(len(nums)):\n        res.append(nums[i])\n\
    \        for j in nums[:i]:\n            res.append(j + nums[j])\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke4pwurf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpke4pwurf.py\", line 32,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpke4pwurf.py\", line\
    \ 24, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpke4pwurf.py\", line 20, in order_by_points\n    res.append(j\
    \ + nums[j])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnk3_7gl3.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823405
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    \n    nums = sorted(nums, key=lambda x: sum(int(x) for\
    \ x in str(x)))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cje6y9j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0cje6y9j.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0cje6y9j.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0cje6y9j.py\", line 17, in order_by_points\n    nums =\
    \ sorted(nums, key=lambda x: sum(int(x) for x in str(x)))\n  File \"/tmp/tmp0cje6y9j.py\"\
    , line 17, in <lambda>\n    nums = sorted(nums, key=lambda x: sum(int(x) for x\
    \ in str(x)))\n  File \"/tmp/tmp0cje6y9j.py\", line 17, in <genexpr>\n    nums\
    \ = sorted(nums, key=lambda x: sum(int(x) for x in str(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums = sorted(nums)\n    return [nums[nums.index(int(i))]\
    \ for i in nums]\n    \ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8jyvb0j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv8jyvb0j.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpv8jyvb0j.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    answer=[]\n    sums=[]\n    for i in nums:\n        sums.append(sum(list(str(i))))\n\
    \    sums=sorted(sums)\n    for index, s in enumerate(sums):\n        answer.append(nums[index])\n\
    \        answer.append(s)\n    return answer\n</code>\n<|/ a tags=python,sorting\
    \ dscore=0 |>\n<| a |>\nThis can be done by creating an extra array that contains\
    \ the sum of the digits. Using numpy, this can be done with the following code:\n\
    <code>\nimport numpy as np\na=np.array(['-34', '123', '0', '-9'])\nb=np.array(['0',\
    \ '-34', '123', '0'])\nc=np.concatenate([a,b])\nprint(np.sort(c))\n</code>\n<|/\
    \ a tags=python,sorting dscore=0 |>\n<| a tags=python,sorting |>\nI used lambda\
    \ to solve this.\n\n<code>\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp445wzyoi.py\", line 25\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return nums\n    sum_of_digits\
    \ = [sum(nums_digits) for nums_digits in nums]\n    sorted_nums = sorted(range(len(sum_of_digits)),\
    \ key=lambda k: sum_of_digits[k])\n    return nums[sorted_nums]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9sfs2qr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpl9sfs2qr.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpl9sfs2qr.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpl9sfs2qr.py\", line 18, in order_by_points\n    sum_of_digits\
    \ = [sum(nums_digits) for nums_digits in nums]\n  File \"/tmp/tmpl9sfs2qr.py\"\
    , line 18, in <listcomp>\n    sum_of_digits = [sum(nums_digits) for nums_digits\
    \ in nums]\nTypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    total = 0\n    for i, e in enumerate(nums):\n\
    \        total += e\n        idx = i + 1\n        while idx < len(nums) and nums[idx]\
    \ == e:\n            idx += 1\n        nums[idx], nums[total] = nums[total], nums[idx]\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7fl5sn4_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7fl5sn4_.py\", line 35,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7fl5sn4_.py\", line\
    \ 27, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7fl5sn4_.py\", line 23, in order_by_points\n    nums[idx],\
    \ nums[total] = nums[total], nums[idx]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    nums.sort()\n    return sorted(nums, key=lambda x: sum(x),\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkzff8rv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnkzff8rv.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnkzff8rv.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnkzff8rv.py\", line 17, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(x), reverse=True)\n  File \"/tmp/tmpnkzff8rv.py\"\
    , line 17, in <lambda>\n    return sorted(nums, key=lambda x: sum(x), reverse=True)\n\
    TypeError: 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa5351gzp.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa5351gzp.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823362
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    if not nums:\n        return []\n\n    cur_sum = 0\n\
    \    sorted_nums = []\n\n    for i, num in enumerate(nums):\n        cur_sum +=\
    \ num\n        sorted_nums.append(num)\n\n    if cur_sum > 0:\n        sorted_nums.insert(0,\
    \ cur_sum)\n\n    return sorted_nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9mw11ru.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpk9mw11ru.py\", line 40,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpk9mw11ru.py\", line\
    \ 32, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(str(x)))\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptftlckdg.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976325
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n\
    \    []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa9t1eq1p.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa9t1eq1p.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpa9t1eq1p.py\", line 16, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmpa9t1eq1p.py\"\
    , line 16, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  stdout: ''
  timestamp: 1659823405
