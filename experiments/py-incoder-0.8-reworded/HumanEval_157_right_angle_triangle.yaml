name: HumanEval_157_right_angle_triangle
language: py
prompt: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n \
  \   Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle\
  \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
  \    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
  \ 2, 3)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
  \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
  \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
  \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
  \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
  \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
  \    check(right_angle_triangle)\n\ntest_check()\n"
completions: ["    return abs(b - a) == abs(c - b)\n\n", "    ab = abs(a - b)\n  \
    \  if ab < c or b >= c:\n        return False\n    ac = abs(a - c)\n    if ac\
    \ < a or c >= a:\n        return False\n    \n    return True\n\n", "    \n  \
    \  if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n\
    \        return False\n", "    left_side = abs(a) + abs(b) + abs(c)\n    right_side\
    \ = abs(b) + abs(c) + abs(a)\n    \n    if abs(left_side) > abs(right_side):\n\
    \        return False\n    else:\n        if a == b and b == c and c == a:\n \
    \           return True\n        else:\n            return False\n", "    return\
    \ a + b > c and a + c > b and b + c > a\n", "    return (a + b > c and a + c >\
    \ b and b + c > a)\n", "    \n    ", "    if b ** 2 + c ** 2 > a * c:\n      \
    \  return False\n    else:\n        return True\n\n", "    # code here\n    return\
    \ True if abs(b - c) <= a and abs(a - b) <= b else False\n", "    d = abs(b -\
    \ c)\n    if d > max(a, b, c):\n        return False\n    elif a > b:\n      \
    \  if d >= max(a, d):\n            return True\n        else:\n            return\
    \ False\n    else:\n        if d >= max(a, b, c):\n            return True\n \
    \       else:\n            return False\n", "    \n    if a + b > c and a + c\
    \ > b and b + c > a:\n        return True\n    return False\n\n", "    if a ==\
    \ b == c: return True\n    elif a == b: return True\n    elif a == c: return True\n\
    \    elif b == c: return False\n    elif b < c and b > a: return False\n    elif\
    \ c < a and c > b: return False\n    else: return True\n", "    if a + b > c or\
    \ b + c > a or c + a > b:\n        return False\n    return True\n\n", "    length_a\
    \ = abs((a ** 2) + (b ** 2))\n    length_b = abs((a ** 2) + (c ** 2))\n    length_total\
    \ = length_a + length_b\n    return (length_b * length_c) / length_total > 0 or\
    \ ((a - c) * length_b) / length_total > 0 or ((b - a) * length_c) / length_total\
    \ > 0\n\n", "    d = ((b**2) - (4*a*c)) / (2 * a)\n    if (d > 0):\n        d\
    \ = math.degrees(math.acos(d))\n        if ((d > 90) or (d < -90)):\n        \
    \    return True\n    return False\n\n", "    \n    if a == b and b == c and c\
    \ == a:\n        return True\n    elif a == b or a == c or b == c or b == a:\n\
    \        return False\n    else:\n        if b <= c:\n            if a + b > c:\n\
    \                return True\n            else:\n                return False\n\
    \        else:\n            if a + c > b:\n                return True\n     \
    \       else:\n                return False\n    ", "    return right_triangle(a,\
    \ b, c) and right_triangle(b, a, c)\n\n", "    return abs(a * b - c) <= a * b\
    \ * 0.95 and abs(a * c - b) <= a * c * 0.95\n", "    return abs(a * b - b * c\
    \ - a * c) < 1e-9\n", "    return ((b - a) ** (0.5)) > ((c - b) ** (0.5))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
