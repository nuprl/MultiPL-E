name: HumanEval_157_right_angle_triangle
language: py
prompt: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n \
  \   Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle\
  \ is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n\
  \    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
  \ 2, 3)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
  \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
  \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
  \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
  \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
  \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
  \    check(right_angle_triangle)\n\ntest_check()\n"
completions: ["    return abs(b - a) == abs(c - b)\n\n", "    ab = abs(a - b)\n  \
    \  if ab < c or b >= c:\n        return False\n    ac = abs(a - c)\n    if ac\
    \ < a or c >= a:\n        return False\n    \n    return True\n\n", "    \n  \
    \  if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n\
    \        return False\n", "    left_side = abs(a) + abs(b) + abs(c)\n    right_side\
    \ = abs(b) + abs(c) + abs(a)\n    \n    if abs(left_side) > abs(right_side):\n\
    \        return False\n    else:\n        if a == b and b == c and c == a:\n \
    \           return True\n        else:\n            return False\n", "    return\
    \ a + b > c and a + c > b and b + c > a\n", "    return (a + b > c and a + c >\
    \ b and b + c > a)\n", "    \n    ", "    if b ** 2 + c ** 2 > a * c:\n      \
    \  return False\n    else:\n        return True\n\n", "    # code here\n    return\
    \ True if abs(b - c) <= a and abs(a - b) <= b else False\n", "    d = abs(b -\
    \ c)\n    if d > max(a, b, c):\n        return False\n    elif a > b:\n      \
    \  if d >= max(a, d):\n            return True\n        else:\n            return\
    \ False\n    else:\n        if d >= max(a, b, c):\n            return True\n \
    \       else:\n            return False\n", "    \n    if a + b > c and a + c\
    \ > b and b + c > a:\n        return True\n    return False\n\n", "    if a ==\
    \ b == c: return True\n    elif a == b: return True\n    elif a == c: return True\n\
    \    elif b == c: return False\n    elif b < c and b > a: return False\n    elif\
    \ c < a and c > b: return False\n    else: return True\n", "    if a + b > c or\
    \ b + c > a or c + a > b:\n        return False\n    return True\n\n", "    length_a\
    \ = abs((a ** 2) + (b ** 2))\n    length_b = abs((a ** 2) + (c ** 2))\n    length_total\
    \ = length_a + length_b\n    return (length_b * length_c) / length_total > 0 or\
    \ ((a - c) * length_b) / length_total > 0 or ((b - a) * length_c) / length_total\
    \ > 0\n\n", "    d = ((b**2) - (4*a*c)) / (2 * a)\n    if (d > 0):\n        d\
    \ = math.degrees(math.acos(d))\n        if ((d > 90) or (d < -90)):\n        \
    \    return True\n    return False\n\n", "    \n    if a == b and b == c and c\
    \ == a:\n        return True\n    elif a == b or a == c or b == c or b == a:\n\
    \        return False\n    else:\n        if b <= c:\n            if a + b > c:\n\
    \                return True\n            else:\n                return False\n\
    \        else:\n            if a + c > b:\n                return True\n     \
    \       else:\n                return False\n    ", "    return right_triangle(a,\
    \ b, c) and right_triangle(b, a, c)\n\n", "    return abs(a * b - c) <= a * b\
    \ * 0.95 and abs(a * c - b) <= a * c * 0.95\n", "    return abs(a * b - b * c\
    \ - a * c) < 1e-9\n", "    return ((b - a) ** (0.5)) > ((c - b) ** (0.5))\n\n",
  "    # Return False if any of these conditions are met\n    if a <= 0 or b <= 0\
    \ or c <= 0:\n        return False\n    if a + b <= c:\n        return False\n\
    \    if a + c <= b:\n        return False\n    return True\n</cell>\n<text>\n\
    Implement is_right_angled_triangle below in such a way that it accepts an integer\
    \ argument, and returns True or False depending on whether the integer is a right-angled\
    \ triangle or not.\n\n</text>\n<cell>", "    # YOUR CODE HERE\n    return (a+b+c)\
    \ >= (a+b) and (a+b+c) >= (c+b) and (a+b+c) >= (b+a)\n\n", "    if a + b > c and\
    \ b + c > a and a + c > b:\n        return True\n    else:\n        return False\n",
  "    if a + b > c:\n        return False\n    if b > c:\n        return False\n\
    \    if a == b:\n        return True\n    if a < b:\n        if c % b == 0:\n\
    \            return True\n    else:\n        if c % a == 0:\n            return\
    \ True\n    return False\n</cell>\n<cell>\nright_angle_triangle(3, 4, 5)\n</cell>\n\
    <cell>\nright_angle_triangle(1, 2, 3)\n</cell>\n<cell>", "    if a >= b + c:\n\
    \        return False\n    if b >= c + a:\n        return False\n    if c >= b\
    \ + a:\n        return False\n    return True\n\n", "    if b < a or b < c:\n\
    \        return False\n    elif a < c:\n        return True\n    elif c * a *\
    \ c <= b ** 2:\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>", "    # YOUR CODE HERE\n    if a >= b and a >= c:\n        return a ==\
    \ b or a == c\n    else:\n        return False", "    return ((a + b > c) and\
    \ (c + b > a) and (a + c > b) and (c + a > b))\n</cell>\n<text>\nLet's find all\
    \ right-angled triangles in a list:\n\n\n</text>\n<cell>\nnumbers = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "    a, b, c\
    \ = sorted([a, b, c])\n    if a * a + b * b == c * c:\n        return True\n \
    \   else:\n        return False\n\n", "    return ((b - a) * (c + b) * (b - c))\
    \ <= 0\n\n", "    \n    # Write your code here\n    \n    return (a+b+c) == (a\
    \ == b or a == c or b == c)\n</cell>\n<cell>", "    return (b - a) * (c - b) <=\
    \ 0\n", "    if a + b > c:\n        return right_angle_triangle(b, a, c)\n   \
    \ elif b + c > a:\n        return right_angle_triangle(c, a, b)\n    elif c +\
    \ a > b:\n        return right_angle_triangle(a, b, c)\n    else:\n        return\
    \ True\n\n", "    if abs(b - c) < abs(a - b) or abs(a - c) < abs(b - a):\n   \
    \     return True\n    else:\n        return False\n", "    \n    if a + b > c\
    \ and a + c > b and b + c > a:\n        return True\n    else:\n        return\
    \ False\n    ", "    \n    # write your code here\n    \n    return True\n</cell>\n\
    <cell>", "    return b * b - 4 * a * c >= 0\n\n", "    return True if a + b >\
    \ c and a + c > b and b + c > a else False\n\n", "    \n    if a == b == c:\n\
    \        return True\n\n    if a == b or a == c or b == c:\n        return False\n\
    \n    # Find if b - a > c - b\n    abc = a - b > c - a\n\n    # Find if b - a\
    \ == c - b\n    ab = a - b == c - b\n\n    # Find if b - b == a -c - b\n    bb\
    \ = a - b == c - b\n\n    if abc or ab or bb:\n        return True\n    \n   \
    \ return False\n\n", "    return ((a**2 + b**2 == c**2)\n            and abs((math.degrees(math.atan2(a,\
    \ b))) -\n                     math.degrees(math.atan2(c,b)))) <= 90 )\n    ",
  "    # Write your code here\n    return ((a + b > c) and (a + c > b) and (a + c\
    \ > b)) or ((a + b > c) and (a + c > b) and (a + b > b)) or ((a + c > b) and (a\
    \ + b > c) and (a + c > c))\n\n", "    if (a == 0 and b == c) or (a == c and b\
    \ == 0) or (a == b and c == 0):\n        return True\n    if a >= b >= c:\n  \
    \      return True\n    if a == b and a == c:\n        return True\n    if a ==\
    \ b or b == c or c == a:\n        return False\n    else:\n        return right_angle_triangle(a\
    \ - b, b, c - a)\n", "    if a < b + c and b < c + a:\n        return True\n \
    \   return False\n</cell>\n<text>\nTesting the function\n\n</text>\n<cell>", " \
    \   \n    return ((a + b) <= c or (c + b) <= a or (a + c) <= b) or ((a + b) <=\
    \ b or (c + b) <= c or (a + c) <= c)\n", "    if a == b == c:\n        return\
    \ True\n    elif a == b or a == c or b == c:\n        return False\n    else:\n\
    \        x_1 = (a + b) // 2\n        x_2 = (b + c) // 2\n        y_1 = (a + c)\
    \ // 2\n        y_2 = (b + a) // 2\n        if y_1 == y_2:\n            return\
    \ right_angle_triangle(x_1, y_1, x_2)\n        elif x_1 == x_2:\n            return\
    \ right_angle_triangle(y_1, x_1, y_2)\n        else:\n            return right_angle_triangle(x_1,\
    \ y_1, x_2) or right_angle_triangle(y_1, x_1, y_2)\n        \n    ", "    if a\
    \ < b:\n        if b < c:\n            return True\n        else:\n          \
    \  return False\n    else:\n        if a < c:\n            return True\n     \
    \   else:\n            return False\n", "    return a + b > c and c + b > a\n",
  "    \n    # Write your code here.\n    a_sum = a + b + c\n    if a_sum >= 0:\n\
    \        b_sum = a * b\n        c_sum = a * c\n        \n        b_sum = abs(b_sum)\n\
    \        c_sum = abs(c_sum)\n        \n        b_sum -= b_sum % 2\n        c_sum\
    \ -= c_sum % 2\n        \n        b_sum = b_sum % 2\n        c_sum = c_sum % 2\n\
    \        \n        if (b_sum == c_sum) and (b_sum >= 0):\n            return True\n\
    \        \n    return False\n    ", "    \n    if a + b <= c:\n        return\
    \ False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n  \
    \      return False\n    elif a + b <= c + c:\n        return True\n    else:\n\
    \        return False\n", "    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n\n    # Equilateral\n    if a == b:\n        return c == (a+b)/2\n\n\
    \    # Scalene\n    if a == 0 or b == 0:\n        return c == 0\n    elif a ==\
    \ 0:\n        return b == c\n    elif b == 0:\n        return c == (a+b)/2\n\n\
    \    # Isosceles\n    elif a == c:\n        return (b+c)/2 == a\n\n    # Obtuse\
    \ triangles\n    elif a == b and b == c:\n        return True\n\n    # Not right-angled\
    \ triangle\n    return False\n\n", "    return ((a + b > c) and (a - b > c) and\
    \ (a + c > b) and (a - c > b))\n", "    \n    if a == b and a == c:\n        return\
    \ True\n    elif a == c and a != b:\n        return True\n    elif b == c and\
    \ b != a:\n        return True\n    else:\n        return False\n", "    if b\
    \ < c and c < a:\n        return True\n    return False\n\n", "    if a == b:\n\
    \        # Triangle with one side\n        if a <= c:\n            return True\n\
    \        else:\n            return False\n    elif b == c:\n        # Triangle\
    \ with two sides\n        if a > c:\n            return True\n        else:\n\
    \            return False\n    elif a == c:\n        # Triangle with two sides\n\
    \        if a > b:\n            return True\n        else:\n            return\
    \ False\n    else:\n        # Triangle with three sides\n        if b > c:\n \
    \           return True\n        else:\n            return False\n\n", "    \n\
    \    angle1 = right_angle(a)\n    angle2 = right_angle(b)\n    angle3 = right_angle(c)\n\
    \    if angle1 == angle2 == angle3:\n        return True\n    else:\n        return\
    \ False\n", "    ac = a-b\n    bc = b-c\n    ab = a-b\n    return ab == ac or\
    \ ab == bc\n", "    \n    # Your code here\n    if a >= b + c:\n        return\
    \ True\n    elif b >= a + c:\n        return True\n    elif c >= a + b:\n    \
    \    return True\n    elif c >= b + a:\n        return True\n    else:\n     \
    \   return False\n\n", "    return ((a - c) * (b - c)) - ((a - b) * (c - b))\n\
    \n", "    if a < b and a < c and c < a:\n        return True\n    return False\n\
    \    ", "    # check a, b and c\n    if not a >= b or not b >= c:\n        return\
    \ False\n    \n    angle_diff = (b * b - 4 * a * c) / (b * b)\n    if angle_diff\
    \ >= 0 and angle_diff <= 180:\n        return True\n    elif angle_diff < 0 and\
    \ angle_diff > -180:\n        return True\n    else:\n        return False\n\n",
  "    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n\
    \        return False\n", "    a, b, c = sorted([a, b, c])\n    return (b - c)\
    \ <= ((a < b and a < c) or abs(a - b) <= abs(a - c))\n\n", "    if abs(a ** 2\
    \ + b ** 2 - c ** 2) < 1:\n        return True\n    elif a == 0 and b == 0 and\
    \ c == 0:\n        return True\n    else:\n        return False\n\n", "    if\
    \ b**2 - 4*a*c < 0:\n        return False\n    elif a == b:\n        if a == 0:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        if b == 0:\n            return True\n        else:\n            return\
    \ b**2 - 4*a*c > 0\n\n", "    a, _, b = sorted([a, b, c])\n    if b > a:\n   \
    \     a, b = b, a\n    if c > a:\n        c, a = a, b\n    return a == b or a\
    \ == c or b == c\n\n", "    (a, b, c) = sorted([a, b, c])\n\n    if a + b > c\
    \ or a + c > b or b + c > a:\n        return False\n\n    return True\n\n", " \
    \   return not ((b - a) * (c - b) * (a - c) >= 0)\n", "    if a == 0 \\\n    \
    \    or b == 0 \\\n        or c == 0 \\\n        or a + b > c \\\n        or a\
    \ + c > b \\\n        or b + c > a \\\n        or a - b > c \\\n        or a -\
    \ c > b \\\n        or b - c > a \\\n        or a + b == c \\\n        or a +\
    \ c == b \\\n        or b + c == a \\\n        or b == c \\\n        or c == a\
    \ \\\n        or a + b == c \\\n        or b + c == a \\\n        or a + c ==\
    \ b \\\n        or c == b:\n        return True\n    else:\n        return False\n",
  "    return (c-a) * (c-b) >= (b-a) * (b - c)\n\n", "    return is_triangle(a, b,\
    \ c) or is_triangle(b, c, a)\n\n", "    a, b, c = sorted([a, b, c])\n    \n  \
    \  if a == b == c:\n        return True\n    elif a == b or a == c or b == c:\n\
    \        return False\n    elif a == b and a == c:\n        return False\n   \
    \ elif a == b and b == c:\n        return True\n    else:\n        return False\n\
    \n", "    d = b * b - 4 * a * c\n    if d < 0:\n        return False\n    if d\
    \ > 0:\n        a = a if abs(a) > abs(d) else d\n        b = b if abs(b) > abs(d)\
    \ else d\n        c = c if abs(c) > abs(d) else d\n    else:\n        a = a if\
    \ abs(a) == abs(d) else None\n        b = b if abs(b) == abs(d) else None\n  \
    \      c = c if abs(c) == abs(d) else None\n\n    if a != None and b != None and\
    \ c != None:\n        ab = abs(b)\n        ac = abs(c)\n        ad = abs(a)\n\
    \        if b > 0 and c > 0:\n            if a < 0:\n                return abs(b\
    \ + c - a) < (b - a + c + ab + ac)\n            else:\n                return\
    \ abs(a - c - b) < (c - b + a + ab + ac)\n        else:\n            if a < 0:\n\
    \                return abs(b + c - a) < (ac - b + ab + ad)\n            else:\n\
    \                return abs(a - c - b) < (ad - a + ab + ac)\n    else:\n     \
    \   return True\n\n", "    \n    a, b, c = sorted([a, b, c])\n    \n    ab = abs(b\
    \ - a)\n    bc = abs(c - b)\n    ac = abs(c - a)\n    \n    return ((ab < bc)\
    \ and (ac > ab))\n", "    sum1 = a + b + c\n    sum2 = a + b - c\n    sum3 = a\
    \ + b + c\n    sum4 = a - b - c\n\n    return (\n        (sum1 <= sum2 <= sum3\
    \ and sum3 <= sum4 <= sum1) or\n        (sum1 <= sum2 <= sum3 and sum3 <= sum4\
    \ >= sum1) or\n        (sum1 <= sum2 <= sum3 and sum4 <= sum1 >= sum1) or\n  \
    \      (sum1 <= sum2 <= sum3 and sum4 >= sum1 >= sum1)\n    )\n\n", "    a, b,\
    \ c = sorted([a, b, c])\n\n    if (a + b > c) and (b + c > a) and (c+a > b) :\n\
    \        return True\n    else:\n        return False\n", "    triangle_sides\
    \ = [a, b, c]\n    sum_of_sides = sum(triangle_sides)\n    is_right_angle = False\n\
    \    if sum_of_sides < 0:\n        is_right_angle = True\n    elif sum_of_sides\
    \ > 0:\n        is_right_angle = (a == b or b == c or c == a)\n\n    return is_right_angle\n\
    \n", "    a, b, c = sorted([a, b, c])\n    if a == b and a == c:\n        return\
    \ True\n    if a > b and b > c:\n        return False\n    if a > b and c > b:\n\
    \        return False\n    if a > c:\n        return True\n    if b > c:\n   \
    \     return True\n    if b > a:\n        return True\n    if c > a:\n       \
    \ return True\n    return False\n\n", "    \n    # Compute length of each side\n\
    \    side1 = abs(b - a) + abs(c - b)\n    side2 = abs(a - c) + abs(b - c)\n  \
    \  \n    # If side1, side2, and both are equal\n    if side1 == side2 and side1\
    \ != 0:\n        return True\n    \n    else:\n        return False\n\n", "  \
    \  # write your code here\n    sum_ab = a + b\n    sum_c = c + sum_ab\n    sum_ab_plus_c\
    \ = sum_ab + sum_c\n    sum_b_plus_c = b + sum_c\n    if sum_ab_plus_c == 0:\n\
    \        return False\n    if sum_ab_plus_c < a or sum_b_plus_c < b:\n       \
    \ return False\n    else:\n        if sum_b_plus_c > c or sum_ab_plus_c > b:\n\
    \            return False\n        else:\n            if sum_ab_plus_c > c:\n\
    \                return True\n            else:\n                return False\n",
  "    \n    a_is_zero = a <= 0\n    b_is_zero = b <= 0\n    c_is_zero = c <= 0\n\
    \    \n    if (a_is_zero or b_is_zero or c_is_zero):\n        return False\n \
    \   \n    if (a == b and b == c):\n        return True\n    if (a == c and c ==\
    \ b):\n        return True\n    if (a == b or a == c or b == c):\n        return\
    \ False\n", "    triangle = a * b * c\n    sum_of_sides = a + b + c\n    return\
    \ triangle == sum_of_sides or triangle == (sum_of_sides - 90)\n", "    if a <\
    \ b and b < c:\n        return True\n    else:\n        return False\n\n", " \
    \   \n    sum_of_angles = a + b + c\n    if sum_of_angles % 2 == 0:\n        return\
    \ False\n    elif (a >= b and a >= c) or (a >= c and b >= c) or (a >= b and c\
    \ >= b):\n        return True\n    else:\n        return False\n", "    if a ==\
    \ 0 and b == 0 and c == 0:\n        return True\n    elif a == 0 and b == 0 and\
    \ c != 0:\n        return False\n    elif a != 0 and b != 0 and c != 0:\n    \
    \    if b * b > a * c:\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n", "    \n    if a == 0 and b == 0 and\
    \ c == 0:\n        return True\n    elif a == 0 and b == 0 or b == 0 and c ==\
    \ 0:\n        return False\n    elif a == 0 and c > 0 and b == 0:\n        return\
    \ False\n    elif a == 0 and c < 0 and b == 0:\n        return False\n    elif\
    \ b == 0 and c > 0 and a == 0:\n        return False\n    elif b == 0 and c <\
    \ 0 and a == 0:\n        return False\n    elif b == 0 and c == 0 and a > 0:\n\
    \        return True\n    elif b == 0 and c == 0 and a < 0:\n        return True\n\
    \    elif b > 0 and a > 0 and c > 0:\n        return True\n    elif b > 0 and\
    \ a > 0 and c < 0:\n        return False\n    elif b > 0 and a < 0 and c > 0:\n\
    \        return True\n    elif b > 0 and a < 0 and c < 0:\n        return False\n\
    \    elif b < 0 and a > 0 and c > 0:\n        return False\n    elif b < 0 and\
    \ a > 0 and c < 0:\n        return True\n    elif b < 0 and a < 0 and c > 0:\n\
    \        return True\n    elif b < 0 and a < 0 and c < 0:\n        return False\n\
    \n", "    (a, b, c), (b, c, a) = rotate_point(a, c, b), rotate_point(b, c, a)\n\
    \    if a + b > c or a + c > b or b + c > a:\n        return False\n    return\
    \ True\n\n", "    if a == b == c: return True\n    elif a > b > c: return False\n\
    \    elif a == b: return False\n    elif a > b: return False\n    else: return\
    \ True\n\n", "    return a * b == c * c\n\n", "    \n    if a + b > c and b +\
    \ c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    </cell>\n<cell>\n\"\"\"\nUnit tests\n\"\"\"\n\nfrom nose.tools import assert_equal\n\
    \n", "    a, b, c = [abs(i) for i in (a, b, c)]\n    return (b == c and a + b\
    \ > c) or b < c and a + b > c\n\n", "    triangle = [a, b, c]\n    a, b, c = triangle\n\
    \    angle1 = 180 - acos(b/c)\n    angle2 = 180 - acos(c/b)\n    if angle1 ==\
    \ 0:\n        return True\n    else:\n        return abs(angle1 - angle2) > 90\n\
    </cell>\n<cell>", "    \n    if a*a + b*b > c*c:\n        return False\n    else:\n\
    \        return True\n", "    if a + b <= c or c <= b or b >= a:\n        return\
    \ False\n    else:\n        return True\n\n", "    \n    # get the side lengths\
    \ \n    side_a = abs(a-b)\n    side_b = abs(b-c)\n    side_c = abs(c-a)\n\n  \
    \  # if the side lengths are equal, return True \n    if side_a == side_b == side_c:\n\
    \        return True\n    \n    # else return False \n    else:\n        return\
    \ False\n", "    if a == b and b == c:\n        return True\n    elif a == b or\
    \ a == c or b == c:\n        return False\n    elif a + b > c and b > c:\n   \
    \     return True\n    elif a + c > b and c > b:\n        return True\n    elif\
    \ b + c > a and c > a:\n        return True\n    else:\n        return False\n",
  "    # Write your code here\n    return a > b > c or a**2 + b**2 == c**2\n", " \
    \   \n    # assert is_right_triangle(a, b, c)\n    \n    ab = abs(b - a) # length\
    \ of segment ab\n    ac = abs(c - a) # length of segment ac\n    \n    # check\
    \ for right triangles\n    if (ac >= ab and ab >= ac): \n        return True\n\
    \    \n    # check for right angle triangles\n    if (ab >= ac and ac >= ab):\
    \ \n        return True\n    \n    return False\n", "    return (a + b > c) and\
    \ (a + c > b) and (a + b > c)\n\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    return ((b * b) - (a * a)) == (-(b * c) - (a * a))\n\n",
  "    len_a = _angle_to_length(a, c, b)\n    len_b = _angle_to_length(b, c, a)\n\
    \    len_c = _angle_to_length(c, a, b)\n    return len_c > len_b and len_c > len_a\n",
  "    a, b, c = sorted([a, b, c])\n    count = 0\n    \n    if a * a + b * b > c\
    \ * c:\n        return True\n    else:\n        return False\n</cell>\n<text>\n\
    Question 12: Write a function called perimeter() which takes as input the length\
    \ of a triangle as a tuple with 3 elements, and returns the perimeter for the\
    \ triangle. Use this function in your implementation of the function right_angle_triangle().\n\
    \n\n</text>\n<cell>", "    return (a + b >= c and c + b <= a) or (a + c >= b and\
    \ b + c <= a)\n", "    a, b, c = sorted([a, b, c])\n    if a + b > c:\n      \
    \  b, c, a = c, a, b\n    if a + c > b:\n        a, b, c = c, b, a\n    angle\
    \ = (b ** 2 + c ** 2 - a ** 2) ** (1/2)\n    return angle >= 0\n", "    if b <\
    \ a or c < a:\n        return False\n\n    if b == c and b == a:\n        return\
    \ True\n\n    if b + c >= 2 * a:\n        return True\n\n    return False\n\n",
  "    \n    if a + b > c:\n        return False\n    if b + c > a:\n        return\
    \ False\n    if a + c > b:\n        return False\n    return True\n</cell>\n<text>\n\
    Problem 7\nUsing your code from the previous problem, write an algorithm that\
    \ will tell you whether or not you can split a rectangle into two parts such that\
    \ the area of the resulting parts is the same as the area of the input rectangle.\
    \ Here are some examples:\n\nGiven the rectangle (4, 6), (2, 3), (5, 1) return\
    \ True\nGiven the rectangle (2, 2), (5, 2), (4, 5) return True\nGiven the rectangle\
    \ (5, 5), (5, 5), (5, 5) return False\n\n\n</text>\n<cell>", "    ab = a*b\n \
    \   ac = a*c\n    bc = b*c\n    return ab + ac == bc\n", "    if a < b+c or a\
    \ < c or b < c or a < b+c:\n        return False\n    else:\n        return True\n\
    \n", "    length_of_side = abs(b - c)\n    angle = float(a + b + c) / 2\n    angle\
    \ = abs(math.degrees(angle)) % 180\n    if length_of_side * 2 < a:\n        angle\
    \ += 180\n    return angle < 90\n", "    if a == b and a == c:\n        return\
    \ True\n    else:\n        return False\n\n", "    return abs(a * b - c * c) <=\
    \ a * a + b * b\n    ", "    return abs(\n        ((a + b + c) % (b * b))\n  \
    \      - ((b * b - a * a) % (b * b))\n    ) == 0\n\n", "    if a + b < c or a\
    \ + c < b or b + c < a:\n        return False\n    else:\n        return True\n\
    </cell>\n<text>\nUnit Test\n\n</text>\n<cell>\nimport unittest", "    length =\
    \ [a, b, c]\n    length = len(length)\n    for i in range(0, length - 1):\n  \
    \      length_i = length[i]\n        for j in range(i + 1, length):\n        \
    \    length_j = length[j]\n            if length_i + length_j == length_j and\
    \ length_j > length_i:\n                return True\n    return False\n\n", " \
    \   if a * a + b * b == c * c:\n        return True\n    return False\n", "  \
    \  return ((b - a)*(c-a) >= 0 and (b - c)*(a-c) >= 0)\n", "    # Write your code\
    \ here\n    return a * b > c and b * c > a\n    ", "    if a + b > c and c + a\
    \ > b:\n        return True\n    else:\n        return False\n", "    if a + b\
    \ > c and a + c > b and b + c > a:\n        answer = True\n    else:\n       \
    \ answer = False\n\n    return answer\n\n", "    return a + b > c and b + c >\
    \ a and a + c > b\n\n", "    a, b, c = sorted([a, b, c])\n    if a + b > c and\
    \ b + c > a and c + a > b:\n        return True\n    else:\n        return False\n\
    \n", "    length = a + b + c\n    return length == get_sides(a, b, c) or length\
    \ == get_sides(b, c, a) or length == get_sides(c, a, b)\n\n", "    if a == b ==\
    \ c:\n        return True\n    if b == 0 and c == a:\n        return True\n  \
    \  if a == 0 and b == c:\n        return True\n    if a == b or a == c or b ==\
    \ c:\n        return False\n    \n    # Find angle using Heron's formula\n   \
    \ angle = (b**2 - 4*a*c)**0.5\n    \n    # Check for right-angled triangle\n \
    \   if angle < -math.pi / 2.0:\n        return True\n    if angle > math.pi /\
    \ 2.0:\n        return False\n    \n    # Check for 90-degree angle\n    if angle\
    \ < math.pi / 2.0:\n        return True\n    if angle > math.pi * 2.0 / 3.0:\n\
    \        return False\n    \n    return False\n\n", "    if a + b > c and b +\
    \ c > a and a + c > b:\n        return True\n    else:\n        return False\n\
    \n", "    if a + b <= c or c <= a + b:\n        return False\n\n    if a >= c\
    \ and b >= c:\n        return True\n\n    if b >= c and c >= a:\n        return\
    \ True\n\n    return False\n\n", "    return ((a + b >= c and b >= a) or (a +\
    \ c >= b and c >= a) or (b + c >= a and c >= b))\n", "    return b*b - 4*a*c ==\
    \ a\n", "    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a +\
    \ b <= c:\n        return False\n    if a + c <= b:\n        return False\n  \
    \  if b + c <= a:\n        return False\n    return True\n\n", "    a, b, c =\
    \ sorted([a, b, c])\n    ab = abs(b - a)\n    bc = abs(c - b)\n    return ab ==\
    \ bc and bc >= ab\n", "    if a + b > c or a + c > b or b + c > a:\n        return\
    \ False\n    else:\n        return True\n", "    length = math.sqrt(a ** 2 + b\
    \ ** 2 + c ** 2)\n    angle = (180 / math.pi) * math.acos((a / length) + (b /\
    \ length) + (c / length))\n    return math.degrees(angle) == 90\n", "    # Write\
    \ your code here\n    return ((a + b >= c) or (b + c >= a))\n", "    # write your\
    \ code here\n    return (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n\n", " \
    \   \n    return (c > 0 and (b ** 2 - 4 * a * c) > 0) or (c < 0 and (b ** 2 -\
    \ 4 * a * c) < 0)\n\n", "    # write your logic here\n    if a > b and b > c:\n\
    \        if a == c and b != a:\n            return True\n        else:\n     \
    \       return False\n    else:\n        if a < b and b < c:\n            return\
    \ True\n        else:\n            return False\n\n", "    ab = abs(b - a)\n \
    \   cb = abs(c - b)\n    if cb > ab:\n        return False\n    else:\n      \
    \  return True\n</cell>\n<text>\nThe same function can be used for the other two\
    \ triangles.\n\nExercise 18\nWrite the function right_angle_triangle that returns\
    \ True if triangle is right angled triangle, False otherwise.\n\n\n</text>\n<cell>",
  "    \n    if a*a + b*b == c*c:\n        return True\n    else:\n        return\
    \ False\n\n", "    return is_right_angle(a, b, c) and is_right_angle(b, c, a)\n\
    \n", "    \n    if a >= b >= c:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>", "    # Your code here\n    if a + b > c or a + c >\
    \ b or b + c > a:\n        return True\n    else:\n        return False\n", " \
    \   if a >= b >= c:\n        return False\n    \n    if a == b == c:\n       \
    \ return True\n    if a > c > b and b > a > c:\n        return True\n    if a\
    \ == b and c > a:\n        return True\n    if a == c and b > a:\n        return\
    \ True\n    if a == b and c > b:\n        return True\n    return False\n    ",
  "    \n    return b * b - 4 * a * c == 0 \n", "    return ((b ** 2) + (a ** 2) <\
    \ (c ** 2))\n\n", "    if a + b > c and c + b > a:\n        # triangle is right\
    \ angle\n        return True\n    else:\n        return False\n</cell>\n<cell>",
  "    if a >= b >= c:\n        return True\n    return False\n", "    a, b, c = sorted([a,\
    \ b, c])\n    return ((a+b+c) == (a + b + c))\n\n", "    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c or b > c:\n        return False\n    else:\n      \
    \  return a + b == c or b + c == a\n", "    return ((b**2 - 4*a*c) < (b**2 - 4*a*b))\
    \ and ((b**2 - 4*a*c) > (b**2 - 4*a*a))\n", "    if abs(a * b - c) < 1e-15:\n\
    \        return True\n    else:\n        return False\n", "    return ((b**2 -\
    \ c**2) - (a**2 - c**2)) > 0 \n\n", "    return True if a * b > c * a and a *\
    \ b < c * c else False\n", "    a, b, c = sorted([a, b, c])\n\n    # Case: Triangle\
    \ is equilateral\n    if a == b == c:\n        return True\n\n    # Case: Triangle\
    \ is right or 90 degree\n    elif (a == b) or (a == c) or (b == c):\n        return\
    \ True\n\n    # Case: Triangle is scalene\n    elif abs(a - b) == abs(b - c):\n\
    \        return True\n\n    # Case: Triangle is isosceles\n    else:\n       \
    \ return False\n", "    \n    \n    return ((a + b) <= (c * .5)) and (abs(a -\
    \ b) <= abs(a - c)) and (abs(a - c) <= abs(b - c))\n    ", "    if a + b > c and\
    \ b + c > a and a + c > b:\n        return True\n    else:\n        return False\n",
  "    \n    left_angle_triangle_a = right_triangle(a, b, c)\n    left_angle_triangle_b\
    \ = right_triangle(a, c, b)\n    left_angle_triangle_c = right_triangle(b, a,\
    \ c)\n    \n    if left_angle_triangle_a and left_angle_triangle_b and left_angle_triangle_c:\n\
    \        return True\n    else:\n        return False\n\n", "    # write your\
    \ code here\n    a, b, c = map(int, (a, b, c))\n    \n    if a + b > c:\n    \
    \    return False\n    elif a + c > b:\n        return False\n    elif b + c >\
    \ a:\n        return False\n    else:\n        return True\n</cell>\n<cell>",
  "    return (-b + c).is_integer()\n\n", "    a, b, c = map(int, (a, b, c,))\n  \
    \  return (b - a) * (c - a) / 2 == (b - c) * (c - a) / 2 + a * b\n", "    \n \
    \   # Your code here\n    if a**2+b**2+c**2>=4*(a*b*c):\n        return False\n\
    \    else:\n        return True\n", "    a, b, c = sorted([a, b, c])\n    delta\
    \ = abs(b-a)\n    delta2 = abs(b-c)\n    if delta > delta2:\n        if b > c:\n\
    \            return True\n        elif b < c:\n            return False\n    else:\n\
    \        if a > c:\n            return True\n        elif a < c:\n           \
    \ return False\n    return True\n</code>\n<|/ a tags=python,python-3.x dscore=1\
    \ |>\n<| c |>\nPlease add an explanation to your answer so that future readers\
    \ can understand what you've done.\n<|/ c |>\n<| a |>\nI haven't been able to\
    \ find a library for this, so I wrote this one myself.\n<code>", "    d = b *\
    \ b - 4 * a * c\n    return True if d == 0 else False\n\n", "    a, b, c = sorted([a,\
    \ b, c])\n    if a == b and c == a:\n        return True\n    elif a == b and\
    \ c > a:\n        return False\n    elif a > b and b == c or a > b and c > a:\n\
    \        return True\n    else:\n        return False\n\n", "    if a == b and\
    \ a == c:\n        return True\n    if a != b and a != c and b != c:\n       \
    \ return False\n    if a == b or a == c or b == c:\n        return True\n    return\
    \ False\n\n", "    a, b, c = sorted([a, b, c])\n    return (a + b > c) and (a\
    \ + c > b) and (a + c > b)\n", "    if (b ** 2) - (4 * a * c) == 0:\n        return\
    \ True\n    else:\n        return False\n\n", "    return (a + b > c) and (a +\
    \ c > b) and (a + b > c)\n\n", "    # Calculate area of the triangle\n    area_triangle\
    \ = a + b + c\n    # Calculate area of the right angled triangle\n    area_right_angled_triangle\
    \ = area_triangle - a * b - c\n    return abs(area_right_angled_triangle) <= area_triangle\n\
    \n", "    \n    # assert a <= b and b <= c\n    return abs((math.sqrt(a**2 + b**2\
    \ - c**2))-(math.sqrt(a**2 + c**2 - b**2)))<1e-6\n</cell>\n<cell>", "    if a\
    \ + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n   \
    \     return True\n\n", "    a, b, c = sorted([a, b, c])\n    if b - a <= c and\
    \ a - c <= b or b - c <= a and a - b <= c:\n        return True\n    else:\n \
    \       return False\n", "    \n    a, b, c = map(int, (a, b, c))\n    \n    if\
    \ b == 0 or c == 0 or b == c:\n        return True\n    \n    if a == b and a\
    \ == c:\n        return True\n    \n    # Now find the hypotenuse and divide all\
    \ others\n    h = abs(b) + abs(c)\n    \n    # Triangle is valid if:\n    # (1)\
    \ a, b, c are all equal\n    # (2) a, b, c are both non-zero\n    # (3) a is less\
    \ than b and a is less than c\n    # (4) a is greater than b and a is greater\
    \ than c\n    \n    if a == b and a == c:\n        return True\n    if a > b and\
    \ a > c:\n        return False\n    if b > a and b > c:\n        return False\n\
    \    \n    # Now check whether the hypotenuse is greater than the sum of its sides\n\
    \    if h > a + b + c:\n        return True\n    else:\n        return False\n\
    \n", "    if a == b and a == c:\n        return True\n    elif b == c and abs(a\
    \ - b) == abs(b - a):\n        return True\n    else:\n        return False\n",
  "    if a == b and b == c:\n        return True\n    else:\n        return False\n",
  "    if a == b == c:\n        return True\n    else:\n        if c > a > b or a\
    \ > b > c:\n            return False\n        else:\n            return True\n\
    \n", "    ans = 0\n    if (b**2 - (4*a*c))//2 < 0:\n        ans = 1\n    elif\
    \ (b**2 - (4*a*c))//2 == 1:\n        ans = -1\n    if ans == 0 or ans == 1:\n\
    \        return True\n    return False\n    ", "    return (b - a) * (c > 0) -\
    \ (c > a) * (b > 0)\n", "    if a == b:\n        return False\n    elif a == c:\n\
    \        return True\n    elif b == c:\n        return True\n    else:\n     \
    \   return False\n\n", "    sum_b = a + b\n    sum_ab = sum_b + c\n    if sum_ab\
    \ <= c:\n        return False\n    else:\n        return True\n\n", "    \n  \
    \  # write your code here\n\n    #return False\n\n", "    return (b ** 2 + c **\
    \ 2) ** 0.5 > a ** 2 + (b - c) ** 2\n", "    return b**2 - 4*a*c >= 0\n", "  \
    \  a, b, c = sorted([a, b, c])\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\n", "    a, b, c = sorted([a,\
    \ b, c])\n\n    if (b <= a <= c) or (a <= b <= c):\n        return True\n    else:\n\
    \        return False\n\n", "    if b < c and a < b:\n        return True\n  \
    \  elif b > c and a > b:\n        return True\n    else:\n        return False\n\
    \n", "    a, b, c = max(a, b, c)\n    sa, sb, sc = sum(a), sum(b), sum(c)\n  \
    \  if abs(a) < abs(b) and abs(a) < abs(c):\n        if b > c and a > c:\n    \
    \        return True\n    else:\n        if c > b and a > b:\n            return\
    \ True\n    return False\n", "    if a == 0 and b == 0 and c == 0:\n        return\
    \ False\n    if a + b > c:\n        return False\n    if a + c > b:\n        return\
    \ False\n    if b + c > a:\n        return False\n    return True\n\n", "    a,\
    \ b, c = map(int, (a, b, c))\n    if (a + b > c) and (c+b > a):\n        return\
    \ c == (a*a + b*b == c*c)\n    return False\n\n", "    # return True if b is greater\
    \ than c or c is greater than a\n    return (b > c) or (c > a)\n", "    \n   \
    \ if a + b >= c and c + a >= b and a + c >= b:\n        return True\n    return\
    \ False\n", "    return is_right_angle(a, b, c) and is_right_angle(b, a, c)\n",
  "    a_b = abs(a - b)\n    b_c = abs(b - c)\n    c_a = abs(c - a)\n    abc = (a\
    \ + b + c) / 2\n    acb = (a + c + b) / 2\n    bca = (b + c + a) / 2\n    aba\
    \ = (a + b + a) / 2\n    \n    if a_b > b_c and a_b > c_a and c_a > aba:\n   \
    \     return True\n    elif b_c > c_a and b_c > aba:\n        return True\n  \
    \  else:\n        return False\n\n", "    if b < c and a < c:\n        if b >\
    \ c:\n            return (b + c) % (a == b) == c\n        elif a > b:\n      \
    \      return (b + c) % (a == b) == c\n        else:\n            return (b +\
    \ c) % (a == b) == c\n    elif a == b and b > c:\n        return True\n    elif\
    \ b == c and c > a:\n        return True\n    else:\n        return False\n\n",
  "    \n    # check if the three sides are equal\n    if a == b == c: \n        return\
    \ True\n    elif abs(a-b) > abs(c-b):\n        # check if the two middle sides\
    \ are equal\n        if a == c:\n            return True\n        else:\n    \
    \        return False\n    elif abs(a-b) < abs(c-b):\n        # check if the two\
    \ middle sides are equal\n        if b == c:\n            return True\n      \
    \  else:\n            return False\n    else:\n        return False\n", "    \n\
    \    a_length = math.sqrt(a**2 + b**2)\n    b_length = math.sqrt(c**2 + b**2)\n\
    \    c_length = math.sqrt(a**2 + c**2)\n    \n    \n    if a_length == b_length\
    \ and a_length == c_length:\n        return True\n    elif b_length == c_length:\n\
    \        return True\n    else:\n        return False\n\n", "    a_length = abs(a\
    \ - b)\n    b_length = abs(b - c)\n    c_length = abs(c - a)\n    if b_length\
    \ == a_length and c_length == a_length:\n        return True\n    elif b_length\
    \ >= a_length and c_length >= a_length:\n        return True\n    else:\n    \
    \    return False\n    \n", "    \n    # Calculate the hypotenuse.\n    hypotenuse\
    \ = math.sqrt(a**2 + b**2 + c**2)\n\n    # Calculate the area of the triangle\
    \ using the hypotenuse.\n    trianglearea = hypotenuse * 0.5\n\n    # Calculate\
    \ the circumference of the triangle.\n    trianglecircumference = 2 * math.pi\
    \ * hypotenuse\n    \n    # Calculate the area of the triangle.\n    trianglearea\
    \ = trianglecircumference / 2\n\n    # Calculate the right angle of the triangle\n\
    \    triangleangle = trianglearea * math.tan(math.radians(45 - 45 * acos((b *\
    \ b + c * c) / (a * a)))) * 0.5\n\n    # Calculate the hypotenuse\n    hypotenuse\
    \ = math.sqrt(a**2 + b**2 + c**2)\n\n    # Check if triangle is a right-angle\n\
    \    if triangleangle < hypotenuse:\n        return True\n    else:\n        return\
    \ False\n", "    if a + b > c and a + c > b and b + c > a:\n        return True\n\
    \    return False\n", "    return (c-a) * c + (b-a) * (b-a) + (c-a) * (c-a) ==\
    \ 0\n\n", "    dis = math.sqrt(math.pow(b,2)-math.pow(a,2))\n    return dis >=\
    \ math.pow(c, 2)\n", "    ab = abs(b - a)\n    cb = abs(c - b)\n    return (ab\
    \ == cb) or (ab == (ab * cb) / abs(a - c))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
