name: HumanEval_104_unique_digits
language: py
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    digits = [int(x) for x in str(x)]\n    unique_digits_set = set(digits)\n\
    \    return [x for x, y in sorted(zip(digits, digits)) if y % 2 == 0 and x not\
    \ in unique_digits_set]\n\n", "    x = sorted(x)\n    even_list = []\n    odd_list\
    \ = []\n    for elem in x:\n        if elem % 2 == 0:\n            even_list.append(elem)\n\
    \        else:\n            odd_list.append(elem)\n    \n    return even_list+odd_list\n",
  "    digit_dict = defaultdict(int)\n    for num in x:\n        digit_dict[num] +=\
    \ 1\n    return sorted(list(filter(lambda x: x[0]%2 != 0, digit_dict.items())))\n",
  "    digit_count = {i: 0 for i in x}\n    for num in x:\n        digit_count[num]\
    \ += 1\n    sorted_digit_counts = sorted(digit_count.items(), key=lambda x:x[0])\n\
    \    return [item for item in sorted_digit_counts if item[1] % 2 == 0]\n", " \
    \   digits = defaultdict(int)\n    for num in x:\n        digits[num] += 1\n \
    \   \n    return [k for k, v in sorted(digits.items(), key = lambda x: -x[1])\
    \ if v % 2 == 0]\n</cell>\n<text>\nSolution:\nWe use Python's OrderedDict to help\
    \ us solve the problem.\n\nWe use it to store the counts of the numbers. Then\
    \ we sort the numbers by the value of counts, so that we can easily get the unique\
    \ numbers by taking the key of the OrderedDict. Finally, we filter the numbers\
    \ that have even number of digits and return them.\n\nThe function takes advantage\
    \ of Python's dictionary comprehension to help us write this succinctly.\n\n\n\
    </text>\n<cell>\nfrom collections import OrderedDict # type: ignore\n", "    \n\
    \    n = len(x)\n    ans = []\n    for i in range(n):\n        digit = x[i]\n\
    \        found = False\n        for j in range(n): \n            if x[j] == digit:\n\
    \                found = True\n                break\n        if not found:\n\
    \            ans.append(digit)\n    \n    ans.sort()\n    return ans\n", "   \
    \ digits: Set[int] = set()\n    return [x for x in x if x not in digits or x %\
    \ 2 == 0]\n\n", "    x.sort(reverse=True)\n    \n    digits = []\n    \n    for\
    \ x in x:\n        if x % 2 == 0:\n            continue\n        for y in digits:\n\
    \            if y % 2 == 0 and y == x:\n                continue\n           \
    \ if y % 2 != 0 and y == x*x:\n                break\n            else:\n    \
    \            digits.append(x)\n                break\n    return digits\n    ",
  "    \n    nums = [i for i in x]\n    sorted_nums = sorted(nums)\n    \n    # Remove\
    \ all even digit\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n\
    \            nums.remove(nums[i])\n\n    nums = [x for x in nums if x]\n\n   \
    \ return nums\n", "    if len(x) == 0:\n        return []\n\n    dig_list = []\n\
    \    for x in x:\n        if x % 2 == 0 and x != 0:\n            dig_list.append(x)\n\
    \    \n    dig_list = sorted(dig_list)\n\n    if len(dig_list) <= 1:\n       \
    \ return []\n    \n    return dig_list\n", "    return sorted(filter(lambda y:\
    \ sum(map(int, str(y))) % 2 != 0, x))\n\n", "    digits_set = set(x) # use set\
    \ to get rid of repeated digits\n    digits_set.remove(0)\n    digits_set.remove(min(digits_set))\n\
    \n    return sorted(list(digits_set))\n</cell>\n<cell>\n\"\"\"\nDifficulty Level\
    \ 2\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\"\"\"\n", "    \n    \n\
    \    odd_list = []\n    even_digit_list = []\n    \n    for i in x:\n        if\
    \ i % 2 == 0:\n            even_digit_list.append(i)\n        else:\n        \
    \    odd_list.append(i)\n    \n    odd_list.sort()\n    even_digit_list.sort()\n\
    \    \n    return odd_list + even_digit_list\n    \n    ", "    digits = set()\n\
    \    for y in x:\n        if y % 2 == 0 and y not in digits:\n            digits.add(y)\n\
    \    return list(digits)\n", "    digit_dict = {}\n    for i in x:\n        if\
    \ i not in digit_dict:\n            digit_dict[i] = 1\n        else:\n       \
    \     digit_dict[i] += 1\n\n    res_arr = []\n    for k,v in digit_dict.items():\n\
    \        if v % 2 == 0:\n            res_arr.append(k)\n\n    return sorted(res_arr)\n",
  "    ans = []\n    for n in x:\n        while n % 2 == 0:\n            n //= 2\n\
    \        if n not in ans:\n            ans.append(n)\n    return ans\n", "   \
    \ \n    result = []\n    for i in x:\n        digit_counter = 0\n        \n  \
    \      while int(str(i)) % 2 == 0:\n            i = i // 2\n            digit_counter\
    \ += 1\n            \n        if digit_counter != 0:\n            result.append(i)\n\
    \    \n    result.sort()\n    \n    return result\n</cell>\n<cell>\nassert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<cell>", "    digits = [x for x in x if x % 2 == 0]\n    digits_set\
    \ = set()\n    digits_list = []\n    \n    for digit in digits:\n        if digit\
    \ in digits_set:\n            continue\n        digits_list.append(digit)\n  \
    \      digits_set.add(digit)\n    \n    return sorted(digits_list)\n", "    digits\
    \ = [x for x in x if x % 2 == 0]\n    if len(digits) == 0:\n        return []\n\
    \    else:\n        sorted_digits = sorted(digits)\n        unique = []\n    \
    \    \n        for digit in sorted_digits:\n            if digit not in unique:\n\
    \                unique.append(digit)\n        return unique\n", "    \n    #\
    \ Your code here\n    \n    s = set()\n    for i in x:\n        while i in s:\n\
    \            i = (i*10) + 100\n        s.add(i)\n    return sorted(list(s))\n",
  "    # Your code here\n    \n    return sorted(list(set(x)))\n    \n", "    result\
    \ = []\n    for x in x:\n        if x % 2 != 0:\n            result.append(x)\n\
    \n    return sorted(result)\n", "    \n    return sorted(x for x in x if not x.isdigit()\
    \ and len(str(x)%2)==0)\n", "    digits = set(map(int, str(x)))\n    digits =\
    \ map(lambda x: int(str(x)), digits)\n    digits.sort()\n    return [i for i in\
    \ x if str(i) not in digits]\n", "    # write your code here\n    return sorted(list(set(x)\
    \ - {d for d in x if str(d).isdigit() and d % 2 == 0}))\n", "    return sorted(filter(lambda\
    \ z: not z%2, x)) \n\n", "    res = []\n    for i in x:\n        q = set()\n \
    \       while i != 0:\n            q.add(i // 10)\n            i = i%10\n    \
    \    if q != set():\n            res.append(sorted(q))\n    return res\n     \
    \       \n</cell>\n<cell>\n%timeit unique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\n%timeit unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nGreat, now\
    \ we can use unique_digits function to implement the fibonacci number:\n\n\n</text>\n\
    <cell>", "    # Your code here\n    ans = list()\n    \n    for i, v in enumerate(x):\n\
    \        if i%2 == 0:\n            continue\n        \n        while(len(ans)>0\
    \ and ans[-1]>v): ans.pop()\n        \n        ans.append(v)\n        \n    return\
    \ ans\n\nassert unique_digits([1, 3, 5]) == [1, 3, 5]\nassert unique_digits([10,\
    \ 23, 100]) == []\n", "    if not x:\n        return []\n    else:\n        return\
    \ [i for i in x if not i%2 and i%5==0]\n\n", "    if not x:\n        return []\n\
    \    \n    digit_set = set()\n    sorted_x = sorted(x)\n    \n    for ele in sorted_x:\n\
    \        while ele > 0:\n            rem = ele % 10\n            if rem == 0:\n\
    \                digit_set.add(ele)\n                ele = ele // 10\n       \
    \         break\n            else:\n                ele = ele // 10\n    \n  \
    \  return list(digit_set)\n\n", "    \n    digits = [int(n) for n in x]\n    unique_digits\
    \ = [n for n in x if int(n) not in digits]\n    return sorted(unique_digits)\n",
  "    \n    sorted_set = sorted(set(x))\n    return [i for i in sorted_set if sum(i)\
    \ % 2 == 0]\n\n", "    if not x:\n        return []\n    \n    digits = set()\n\
    \    for i in x:\n        digit = i // 10\n        if not digit in digits:\n \
    \           digits.add(digit)\n        else:\n            continue\n    \n   \
    \ return [i for i in x if not i // 10 in digits]\n", "    res = []\n    count\
    \ = 1\n    for num in x:\n        if num not in res:\n            res.append(num)\n\
    \        elif num not in res:\n            res.append(num)\n        elif count\
    \ > 1:\n            res.append(num)\n        count += 1\n    return res\n", " \
    \   x = sorted(x)\n    out = []\n    for i in range(1, len(x)):\n        if x[i]\
    \ > x[i-1]:\n            out.append(x[i-1])\n    return out\n", "    even = []\n\
    \    for item in x:\n        if item % 2 == 0:\n            even.append(item)\n\
    \    even = sorted(even)\n    return even\n", "    digits = set()\n    result\
    \ = []\n    \n    for item in x:\n        if item in digits:\n            result.append(item)\n\
    \        else:\n            digits.add(item)\n    \n    return result\n", "  \
    \  \n    even = []\n    odd = []\n    for num in x:\n        if num % 2 == 0:\n\
    \            even.append(num)\n        else:\n            odd.append(num)\n  \
    \  \n    if even:\n        return sorted(even)\n    \n    else:\n        return\
    \ sorted(odd)\n\n", "    \n    even = []\n    odd = []\n    \n    for num in x:\n\
    \        if (num % 2 == 0):\n            even.append(num)\n        else:\n   \
    \         odd.append(num)\n\n    return [x for x in even if x not in odd]\n  \
    \  ", "    seen = set()\n    seen_add = seen.add\n    seen_discard = seen.discard\n\
    \    sorted_list = []\n    for num in x:\n        if num not in seen and any(str(num).count(digit)\
    \ % 2 == 0 for digit in str(num)[1:]):\n            sorted_list.append(num)\n\
    \            seen_add(num)\n    return sorted_list\n", "    answer = []\n    for\
    \ n in x:\n        if len(str(n))==1:\n            answer.append(n)\n        else:\n\
    \            n = str(n)\n            if len(n) < len(str(int(n))):\n         \
    \       digits = [int(digit) for digit in n] \n            else:\n           \
    \     digits = [int(digit) for digit in str(int(n))]\n            digits_set =\
    \ set(digits)\n            if len(digits_set) == 0:\n                answer.append(n)\n\
    \    return sorted(answer)\n", "    return sorted(list(set(filter (lambda x: not\
    \ x.isdigit() and x % 2 == 0, x))))\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>", "    \n    even = [i for i in x if i % 2 == 0]\n    res\
    \ = []\n    for i in even:\n        if i not in res:\n            res.append(i)\n\
    \    return res\n\n", "    digits = [0] * len(x)\n    odd_digit_index = []\n \
    \   \n    for i in range(len(x)):\n        if x[i] % 2 != 0:\n            digits[i]\
    \ = x[i]\n        else:\n            odd_digit_index.append(i)\n            \n\
    \    odd_digit_index.sort()\n    \n    return [x for i, x in enumerate(x) if i\
    \ not in odd_digit_index]\n</cell>\n<cell>", "    # write your code here\n   \
    \ \n    return sorted(set(x))\n", "    x = [i for i in x if not i%2]\n    x.sort()\n\
    \    return x\n", "    digit_set = set()\n    res = []\n    for n in x:\n    \
    \    if n % 2 != 0:\n            continue\n        while n in digit_set:\n   \
    \         n = int(n * (len(digit_set) + 1)) // len(digit_set) + 1\n        digit_set.add(n)\n\
    \        res.append(n)\n    return res\n", "    if not x:\n        return []\n\
    \    \n    hash_set = set()\n    sorted_list = sorted(x)\n    \n    return [x\
    \ for x in sorted_list if not (x % 2 and hash_set.add(x // 10))]\n\n", "    if\
    \ not x:\n        return []\n    \n    even_digits = []\n    for num in x:\n \
    \       if num % 2 == 0:\n            even_digits.append(num)\n        \n    return\
    \ sorted(set(even_digits))\n", "    \n    \n    \n    # Write your code here\n\
    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    return sorted(set(x for x in x if x % 2 ==\
    \ 0), key=lambda i: x.count(i), reverse=True)\n\n", "    \n    unique_set = set()\n\
    \    unique_result = []\n    for i in x:\n        if i not in unique_set:\n  \
    \          unique_result.append(i)\n            unique_set.add(i)\n    \n    return\
    \ unique_result\n</cell>\n<cell>", "    \n    even_digits = []\n    for num in\
    \ x:\n        digits = str(num)\n        even_digits.extend(list(filter(lambda\
    \ x: not x.isdigit(), digits)))\n    \n    even_digits = list(set(even_digits))\n\
    \    even_digits.sort()\n    return even_digits\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>\nunique_digits([2, 12, 5, 34, 67])\n</cell>\n<cell>\nunique_digits([2,\
    \ 12, 5, 34, 67, 123, 345, 234, 2345])\n</cell>\n<cell>", "    l = len(x)\n  \
    \  unique_dic = {}\n    for i in range(l):\n        if x[i]%2 != 0:\n        \
    \    unique_dic[x[i]] = x[i]\n        else:\n            unique_dic[x[i]] = None\n\
    \n    unique_dic = sorted(unique_dic.values())\n\n    return unique_dic\n", " \
    \   \n    \n    count = {}\n    for num in x:\n        if num in count:\n    \
    \        count[num] += 1\n        else:\n            count[num] = 1\n    return\
    \ [x[0] for x in sorted(count.items(), key=lambda x:x[1])]\n\n", "    \n    s\
    \ = set(list(filter(lambda i : i%2==0, x)))\n    \n    return [i for i in x if\
    \ i not in s]\n</cell>\n<cell>\nunique_digits([-5, -1, 0, 1, 6, 2, 11, 13, 14])\n\
    </cell>\n<cell>", "    from collections import Counter\n    sorted_x = sorted(x)\n\
    \    unique_x = list(set(sorted_x))\n    unique_x = sorted(unique_x)\n    count\
    \ = Counter(unique_x)\n    unique_x = []\n    for v in unique_x:\n        if count[v]\
    \ > 0:\n            unique_x.append(v)\n    return unique_x\n", "    seen = {}\n\
    \    res = []\n    for e in x:\n        if e in seen:\n            seen[e] +=\
    \ 1\n            if seen[e] % 2 == 0:\n                continue\n        else:\n\
    \            seen[e] = 0\n            res.append(e)\n    return res\n", "    answer=[]\n\
    \    ans=[]\n    for i in x:\n        if int(i%10)==0:\n            answer.append(i)\n\
    \        else:\n            ans.append(i)\n    answer.sort()\n    ans.sort()\n\
    \    answer=set(answer)\n    ans=set(ans)\n    answer-ans\n    return sorted(list(answer))\n\
    </cell>\n<cell>", "    for i in range(len(x) - 1):\n        for k in range(i,\
    \ len(x)):\n            if x[k] % 2 == 0 and x[k + 1] % 2 == 0:\n            \
    \    x.remove(k)\n                x.remove(k + 1)\n                break\n   \
    \ return sorted(x)\n\n", "    if not x:\n        return []\n\n    res = []\n \
    \   dig = x[0]\n    for x in x[1:]:\n        if x % dig == 0:\n            res.append(x)\n\
    \        else:\n            dig = x\n    return res\n", "    if len(x) <= 0:\n\
    \        return []\n    dic = {}\n    for i in x:\n        if dic.get(i) is None:\n\
    \            dic[i] = 1\n        else:\n            dic[i] += 1\n\n    sorted_list\
    \ = []\n    for i in sorted(dic.keys()):\n        if dic[i] > 1 and len(sorted_list)\
    \ == 0 or dic[i] < 1:\n            sorted_list.append(i)\n    return sorted_list\n\
    \n", "    digit_dict = {}\n    digits = []\n    for x in x:\n        if x not\
    \ in digit_dict:\n            digit_dict[x] = 1\n        else:\n            digit_dict[x]\
    \ += 1\n    for x in sorted(digit_dict, key=lambda k: digit_dict[k]):\n      \
    \  if x % 2 == 0:\n            digits.append(x)\n    return digits\n", "    res\
    \ = []\n    for i, n in enumerate(sorted(x)):\n        if not n % 2:\n       \
    \     res.append(n)\n    return res\n</cell>\n<text>\nLet's test unique_digits\
    \ to make sure it works.\n\n\n</text>\n<cell>\nx = [15, 33, 1422, 1]\nunique_digits(x)\n\
    </cell>\n<text>\nQuestion 13\nImplement get_digits to get the first n digits of\
    \ a number.\n\n\n</text>\n<cell>", "    dig = set()\n    for i in x:\n       \
    \ if int(i) not in dig:\n            dig.add(int(i))\n    return sorted(list(dig))\n",
  "    digit_set = set()\n    for n in x:\n        digit = n % 10\n        if digit\
    \ in digit_set:\n            continue\n        digit_set.add(digit)\n        yield\
    \ digit\n\n", "    from collections import Counter\n    from functools import\
    \ reduce\n    from operator import ior\n\n    def _unique_digits(x: List[int])\
    \ -> List[int]:\n        digit_counter = Counter(x)\n        return sorted(x for\
    \ x in digit_counter if digit_counter[x] == 1)\n\n    def _unique_digits_2(x:\
    \ List[int]) -> List[int]:\n        counts = reduce(ior, x)\n        return [x\
    \ for x, count in sorted(zip(counts, x), reverse=True) if count == 1]\n    \n\
    \    return _unique_digits(x) or _unique_digits_2(x)\n\n", "    import copy\n\
    \    digits = set(range(10)) # set stores all unique digits of a number\n    xcopy\
    \ = copy.copy(x)\n    \n    for i in xcopy:\n        if i not in digits and i.is_even:\n\
    \            digits.add(i)\n\n    return [x for x in x if x not in digits]\n",
  "    import collections\n    cnt = collections.Counter(x)\n    return [x for x in\
    \ x if cnt[x[0]] >= 2]\n</cell>\n<text>\nPart 2\nImplement unique_digits_with_out_duplicates(xs)\
    \ for all unique elements in xs sorted in increasing order.\nDo not use collections.\n\
    Example: xs = [1, 2, 2, 3].\nexpected output = [1, 2]\n\n\n</text>\n<cell>", " \
    \   return list(sorted(set(x)) | set(filter(lambda y: not str(y).startswith('0'),\
    \ x)))\n", "    if not x:\n        return []\n    digits, counter = collections.Counter(map(str,\
    \ x)), collections.Counter()\n    for x in x:\n        digits[str(x)] += 1\n \
    \   return [x for x in x if digits[str(x)] % 2 == 0]\n\n", "    # write your code\
    \ here\n    res = []\n    res_dic = {}\n    for i in x:\n        if int(str(i)[0])\
    \ % 2 == 0:\n            if i not in res_dic:\n                res_dic[i] = 1\n\
    \            else:\n                res_dic[i] += 1\n    res_dic = sorted(res_dic.items(),\
    \ key=lambda kv:kv[1])\n    \n    for i in res_dic:\n        if len(i[0]) <= 1:\n\
    \            res.append(i[0])\n    \n    return res\n", "    digits_set = set()\n\
    \    for num in x:\n        digits_set.add(str(num))\n    digits_list = []\n \
    \   for num in x:\n        if str(num) not in digits_set:\n            digits_list.append(num)\n\
    \    return sorted(digits_list)\n", "    if not x or not x[0]:\n        return\
    \ x\n    digit_list = []\n    for num in x:\n        if num % 2 == 0:\n      \
    \      digit_list.append(num)\n    return sorted(digit_list)\n", "    return sorted(list(set(sorted(x))))\
    \ \n", "    unique = set()\n    for num in x:\n        if num % 2 == 0 and num\
    \ not in unique:\n            unique.add(num)\n    return sorted(unique)\n\n",
  "    digit_count = {}\n    for item in x:\n        digit = int(str(item)[0])\n \
    \       if digit in digit_count:\n            digit_count[digit] += 1\n      \
    \  else:\n            digit_count[digit] = 1\n    unique_digits = []\n    for\
    \ digit, count in digit_count.items():\n        if count == 1:\n            unique_digits.append(digit)\n\
    \        elif count > 1:\n            break\n    return unique_digits\n", "  \
    \  dic = {}\n    for i in x:\n        dic[i] = dic.get(i, 0) + 1\n    \n    ans\
    \ = []\n    dic = sorted(dic.items(), key = lambda i: i[0])\n    for i in dic:\n\
    \        if i[0] % 2 == 0:\n            ans.append(i[0])\n    return ans\n", " \
    \   \n    digits = [list(str(x)) for x in x] # convert int to str\n    digits.sort(key=lambda\
    \ x:int(\"\".join(x.split())),reverse=True) # sort by int\n    \n    return [i\
    \ for i in x if not int(\"\".join(i.split())) % 2] # return all int that haven't\
    \ even digit\n", "    return sorted([n for n in x if n % 2 == 0])\n</cell>\n<cell>",
  "    odd_index = 0\n    even_index = 1\n    while odd_index < len(x) and even_index\
    \ < len(x):\n        if x[odd_index] % 2 != 0 and x[even_index] % 2 == 0:\n  \
    \          x[even_index] /= 2\n            x[odd_index] /= 2\n            odd_index\
    \ += 1\n            even_index += 1\n        elif x[odd_index] % 2 == 0 and x[even_index]\
    \ % 2 == 0:\n            x[even_index] /= 2\n            x[odd_index] /= 2\n \
    \           odd_index += 1\n        else:\n            x[even_index] += 1\n  \
    \          x[odd_index] += 1\n            odd_index += 1\n            even_index\
    \ += 1\n    return x\n\n", "    if not x or x == []:\n        return []\n    \n\
    \    digits = set()\n    ans = []\n    for num in x:\n        if num%2 == 0:\n\
    \            digits.add(num)\n        \n    for d in digits:\n        if d not\
    \ in ans:\n            ans.append(d)\n    \n    return ans\n", "    if not x:\n\
    \        return list()\n    res = []\n    \n    digit_set = set()\n    for d in\
    \ x:\n        if d not in digit_set:\n            res.append(d)\n            digit_set.add(d)\n\
    \n    return sorted(res, key=lambda x: x % 2)\n", "    # Write your code here.\n\
    \    \n    unique = []\n    for i in range(0,len(x)):\n        if x[i]%2 == 0\
    \ and x[i] not in unique:\n            unique.append(x[i])\n    unique.sort()\n\
    \    return unique\n", "    \n    # code here\n    unique_digits = []\n    i =\
    \ 0\n    while i < len(x):\n        \n        digit = x[i]\n        \n       \
    \ if digit % 2 == 0:\n            unique_digits.append(digit)\n            \n\
    \        elif unique_digits:\n            \n            if len(unique_digits)\
    \ > (len(x)-i-1):\n                return []\n            \n            elif len(unique_digits)\
    \ == len(x):\n                i += 1\n                \n            else:\n  \
    \              unique_digits.sort()\n                i += 1\n                \n\
    \        else:\n            i += 1\n            \n    unique_digits.sort()\n \
    \   return unique_digits\n</cell>\n<cell>\nunique_digits([-15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([-152, 323, 1422, 10])\n</cell>\n<text>\n2.2 Digit\
    \ Permutation\n\n</text>\n<cell>", "    \n    return sorted(list(set(filter(lambda\
    \ x: x % 2 == 0, x))))\n", "    # Write your code here.\n    return sorted(list(set(x)))\n\
    \n", "    digits = {}\n    for d in x:\n        while d not in digits:\n     \
    \       digits[d] = 0\n        digits[d] += 1\n    \n    return [d for d in x\
    \ if digits[d] == 1]\n\n", "    \n    return sorted(list(set(x)), key=lambda x\
    \ : len(str(x)), reverse=True)\n", "    \n    if not x:\n        return []\n \
    \       \n    digit_counts = {}\n    \n    for num in x:\n        digit_counts[num]\
    \ = digit_counts.get(num, 0) + 1\n        \n    odd_numbers = [i for i in digit_counts\
    \ if digit_counts[i] > 0]\n    \n    # sort by key\n    odd_numbers.sort(key=lambda\
    \ num: digit_counts[num])\n    \n    # find all number that has even digit with\
    \ odd_numbers list\n    return [i for i in x if i in odd_numbers]\n</cell>\n<cell>\n\
    assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nTask 4.2\nGiven a string and a substring\
    \ s, return a string consisting of the substring in brackets \nfollowed by the\
    \ string formed by removing all occurrences of s in string order.\n\n >>> s =\
    \ \"hi, how are you\"\n >>> remove_substring_from('hello', s)\n 'hello how are'\n\
    \n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi, how are you',\
    \ s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n >>> remove_substring_from('hi,\
    \ how are you', s)\n 'hello you'\n\n >>> s = \"hi, how are you\"\n ", "    even_list\
    \ = [i for i in x if not i%2]\n    return sorted(list(set(list(even_list))))\n\
    </code>\n<|/ a tags=python,list,unique |>\n<| c |>\nThank you, this solution was\
    \ perfect.\n<|/ c |>\n<| a tags=python,list,unique |>\nJust another possible solution:\n\
    <code>", "    sorted_x = sorted(x)\n    unique_x = list(set(x))\n    return list(filter(lambda\
    \ d: d not in unique_x, sorted_x))\n    ", "    digit_set = set()\n    digits\
    \ = []\n    for i in x:\n        digit_set.add(i)\n    for i in x:\n        if\
    \ i not in digit_set:\n            digits.append(i)\n    return sorted(digits)\n",
  "    digits = []\n    for i in x:\n        if i not in digits:\n            digits.append(i)\n\
    \    digits.sort(reverse=True)\n    return [i for i in x if i not in digits]\n",
  "    # write your code here\n    \n    pass\n</cell>\n<cell>", "    return list(filter(lambda\
    \ e: not any(map(lambda x: x % 2 == 0, e)), x))\n", "    \n    res = []\n    for\
    \ i in x:\n        if not is_even(i):\n            res.append(i)\n    \n    return\
    \ sorted(res)\n    ", "    def helper(x: List[int]) -> List[int]:\n        # do\
    \ something\n        return x\n\n    sorted_list = helper(x)\n    \n    for i\
    \ in range(len(sorted_list) - 1):\n        count = 0\n        for j in range(len(sorted_list)):\n\
    \            if sorted_list[j] == sorted_list[j + 1]:\n                count +=\
    \ 1\n            else:\n                break\n        if count % 2 == 0:\n  \
    \          sorted_list.remove(sorted_list[i])\n    return sorted_list\n</cell>\n\
    <cell>", "    \n    sorted_list = sorted(x)\n    \n    return [i for i in sorted_list\
    \ if not str(i).isdigit()]\n", "    seen = set()\n    seen_add = seen.add\n  \
    \  return [x for x in x if not (x in seen or seen_add(x))]\n", "    pass\n</cell>\n\
    <cell>\nassert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<cell>", "    ret: List[int] = []\n    for el\
    \ in x:\n        found_digit = False\n        for i in range(10):\n          \
    \  if el % i == 0:\n                found_digit = True\n                break\n\
    \        if not found_digit:\n            ret.append(el)\n    return ret\n", " \
    \   \n    digits = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n\
    \        else:\n            digits.append(n)\n\n    return sorted(set(digits))\n\
    \n", "    sorted_x = sorted(x)\n    unique_digit = sorted_x[-1]\n    \n    unique_x\
    \ = sorted_x[:-1]\n    \n    unique = []\n    \n    for num in unique_x[::-1]:\n\
    \        if num % 2 != 0:\n            break\n        unique.append(num)\n   \
    \ \n    unique.reverse()\n    \n    return unique\n", "    \n    seen = set()\n\
    \    seen_add = seen.add\n    \n    unique = []\n    \n    for i, num in enumerate(x):\n\
    \        if num in seen:\n            continue\n        else:\n            unique.append(num)\n\
    \            seen_add(num)\n    \n    return unique\n</cell>\n<cell>\n%time unique_digits(range(1000000))\n\
    </cell>\n<cell>\n%%timeit -n1 -r1\n\nunique_digits(range(1000000))\n</cell>\n\
    <cell>\nassert unique_digits(list(range(1000001))) == sorted(unique_digits(list(range(1000002))))\
    \ == sorted(unique_digits(list(range(1000003))))\n</cell>\n<text>\nProblem 8\n\
    \n</text>\n<cell>", "    digits = set()\n    for y in x:\n        digits.add(y\
    \ % 10)\n    return sorted(list(digits)) if digits else []\n</cell>\n<cell>",
  "    pass\n", "    digit_map = {}\n    for n in x:\n        if n in digit_map:\n\
    \            digit_map[n] += 1\n        else:\n            digit_map[n] = 1\n\
    \    return [n for n in x if digit_map[n] == 1]\n", "    \n    seen = set()\n\
    \    seen_add = seen.add\n    return [x for x in x if x not in seen and not seen_add(x)]\n",
  "    \n    n = len(x)\n    \n    for i in range(n):\n        \n        if i == 0:\n\
    \            continue\n        \n        if x[i] % 2 == 0:\n            \n   \
    \         # found an even digit\n            \n            j = i\n           \
    \ \n            # find the next odd digit\n            while j <= n and x[j] %\
    \ 2 != 0:\n                j += 1\n            \n            # swap the found\
    \ odd digit with the first odd digit\n            x[i], x[j] = x[j], x[i]\n  \
    \          \n    return list(x)\n</cell>\n<text>\nExercise 1\n\n</text>\n<cell>",
  "    \n    unique_digits_set = set()\n    \n    for i in x:\n        if i not in\
    \ unique_digits_set:\n            unique_digits_set.add(i)\n            \n   \
    \ return [i for i in unique_digits_set if not i%2]\n", "    \n    return [i for\
    \ i in x if i%2 == 0]\n", "    digit_set = {item for item in x if len(str(item))\
    \ % 2 == 0}\n    return sorted(digit_set)\n\n", "    \n    # YOUR CODE HERE\n\
    \    x2 = list(filter(lambda x: x%2 != 0, x))\n    x3 = list(filter(lambda x:\
    \ x%2 ==0, x))\n    return sorted(set(x2) | set(x3))\n    \n</cell>\n<cell>\n\
    print(unique_digits([0, 3, 11, 2, 31, 5]))\n</cell>\n<text>\nProblem 9\nWrite\
    \ a function to check whether an integer x is a power of 2. \n\nYou have to remember\
    \ that integer x (power of 2) is defined as: \nx is x to the power of 2.\n\nFor\
    \ example, 5 is a power of 2. (5 is 2^2.)\n\nWrite a Python program to check whether\
    \ an integer x is a power of 2.\n\nFor example,\nis_power2(5) \u2192 True\nis_power2(10)\
    \ \u2192 True\nis_power2(2) \u2192 False\nis_power2(0) \u2192 False\nis_power2(-50)\
    \ \u2192 True\nis_power2(-20) \u2192 False\nis_power2(15) \u2192 False\n\n</text>\n\
    <cell>", "    \n    if not x: return []\n    \n    digits = [i for i in range(1,\
    \ 10) if (i not in x) and (i%2==0)]\n    return sorted(list(set(digits)-set([0])))\n",
  "    def odd_digit_list(nums: List[int]) -> List[int]:\n        \"\"\"\n       \
    \ Recursive function which return a list of odd digits of x\n        \"\"\"\n\
    \        odd_digit_list = []\n        if x != []:\n            odd_digit_list.append(x[0])\n\
    \            if odd_digit_list[-1] % 2 == 0:\n                return odd_digit_list\n\
    \            else:\n                odd_digit_list.append(x[1])\n            \
    \    return odd_digit_list(odd_digit_list[1:])\n        else:\n            return\
    \ odd_digit_list\n\n    return sorted(odd_digit_list(nums))\n\n", "    x = sorted(x)\n\
    \    digit_dict = {}\n    for i in range(len(x)):\n        if x[i] not in digit_dict:\n\
    \            digit_dict[x[i]] = 1\n        else:\n            digit_dict[x[i]]\
    \ += 1\n    unique_digit_list = [i for i in x if digit_dict[i] > 1]\n    return\
    \ unique_digit_list\n    ", "    ans = []\n    for n in x:\n        ans += list(x\
    \ for x in range(1, n) if n % x == 0)\n    return sorted(set(ans))\n", "    seen\
    \ = set()\n    seen_add = seen.add\n    return [x for x in x if not (x in seen\
    \ or seen_add(x))]\n", "    return sorted(set(x))\n\n", "    if len(x) == 0:\n\
    \        return []\n\n    dic_digit = {i: i for i in range(10)}\n\n    digits\
    \ = []\n    for i in x:\n        if i not in dic_digit:\n            digits.append(i)\n\
    \            dic_digit[i] = i\n\n    return sorted(digits)\n", "    ans = []\n\
    \    for item in x:\n        if item % 2 == 0:\n            ans.append(item)\n\
    \            \n    ans.sort()\n    return ans\n", "    \n    from collections\
    \ import Counter\n    \n    counters = Counter(x)\n    \n    unique_x = []\n \
    \   \n    for x in counters.values():\n        if x > 1:\n            unique_x.append(x)\n\
    \            \n    return sorted(unique_x)\n", "    # Write your code here\n \
    \   odd_count = 0\n    even_count = 0\n    for num in x:\n        if num % 2 ==\
    \ 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\
    \    nums_odd = x[:odd_count]\n    nums_even = x[odd_count:]\n    return nums_odd\
    \ + nums_even\n", "    digits_dict = {x: True for x in range(1, 101)}\n    sorted_list\
    \ = []\n    for item in x:\n        if item in digits_dict:\n            digits_dict[item]\
    \ = False\n        else:\n            sorted_list.append(item)\n    return sorted_list\n\
    </cell>\n<cell>", "    res= []\n    for i in x:\n        digit = i % 10\n    \
    \    res.append(digit)\n    \n    sorted_x = sorted(set(res))\n    \n    \n  \
    \  \n    return sorted_x\n", "    if len(x) == 0:\n        return []\n    \n \
    \   digits = set()\n    to_remove = set()\n    for digit in x:\n        if digit\
    \ in digits:\n            to_remove.add(digit)\n        else:\n            digits.add(digit)\n\
    \    \n    return [d for d in x if d not in to_remove]\n", "    # code here\n\
    \    numbers = sorted(x)\n    unique = []\n    for item in numbers:\n        sum\
    \ = 0\n        for num in numbers:\n            if num != item:\n            \
    \    sum += num\n            else:\n                break\n        if sum % 2\
    \ == 0:\n            unique.append(item)\n    unique.sort()\n    return unique\n",
  "    \n    # Create a set for digits\n    digits = set()\n    for num in x:\n  \
    \      # Iterate all elements from x while adding them to set\n        digits.add(num)\n\
    \n    # Convert to list to be able to sort it (order in Python is random)\n  \
    \  digits = list(digits)\n\n    # Remove all even digits and sort\n    digits\
    \ = digits[:1] + sorted(digits[1:])\n\n    # Return result in a sorted list\n\
    \    return digits\n", "    \n    if len(x) == 0:\n        return []\n    \n \
    \   # sort them in increasing order\n    x = sorted(x)\n    \n    res = []\n \
    \   for each in x:\n        if len(str(each)) == 1 and str(each)[0] == '0':\n\
    \            continue\n        else:\n            res.append(each)\n    return\
    \ res\n", "    sorted_list = sorted(x)\n    \n    unique_digits = []\n    \n \
    \   for i in range(0, len(sorted_list)):\n        if sorted_list[i] % 2 == 0:\
    \ #even\n            unique_digits.append(sorted_list[i])\n    \n    return unique_digits\n",
  "    \n    answer = []\n    for num in x:\n        temp_set = set(str(num))\n  \
    \      temp_set = list(temp_set)\n        temp_set = sorted(list(temp_set))\n\
    \        if not temp_set[::2]:\n            answer.append(num)\n    return answer\n\
    \    ", "    \n    x = list(sorted(x))\n    \n    ans = []\n    for i in x:\n\
    \        if i // 10 == 2:\n            ans.append(i)\n            \n    return\
    \ ans\n", "    def find(x):\n        digits = []\n        for i in range(len(x)):\n\
    \            while len(x) > 0 and x[-1] == 0:\n                x.pop()\n     \
    \       if x[-1] % 2 == 0:\n                digits.append(x[-1])\n           \
    \     x = x[:-1]\n            else:\n                x = x[:-1]\n        return\
    \ digits\n    return sorted(find(x))\n", "    \n    even_digit_elements = []\n\
    \    for i in x:\n        \n        if i % 2 == 0:\n            even_digit_elements.append(i)\n\
    \            \n    even_digit_elements = sorted(even_digit_elements)\n    \n \
    \   return even_digit_elements\n", "    \n    # your code here\n    ans = []\n\
    \    for i in x:\n        count = 0\n        for j in ans:\n            if j %\
    \ i == 0:\n                count += 1\n        if count == 0: \n            ans.append(i)\n\
    \            \n    return ans\n", "    def unique(x, y):\n        # first we need\
    \ to sort them\n        if x > y:\n            return unique(x, y - 1)\n    \n\
    \        digits_set = set()\n        result = []\n\n        for i, _x in enumerate(x):\n\
    \            if _x in digits_set:\n                continue\n            else:\n\
    \                digits_set.add(_x)\n                result.append(_x)\n     \
    \   return sorted(result)\n\n    return sorted(unique(x, len(x) - 1), reverse=True)\n",
  "    digit_set = set()\n    sorted_x = sorted(x)\n    for i in range(len(sorted_x)):\n\
    \        if sorted_x[i]%2 == 0:\n            digit_set.add(sorted_x[i])\n    return\
    \ list(digit_set)\n", "    \n    uniqued = []\n    i = 0\n    while i < len(x):\n\
    \        if x[i] % 2 == 0 and x[i] not in uniqued:\n            uniqued.append(x[i])\n\
    \        i += 1\n        \n    return sorted(uniqued)\n", "    return sorted(list(set(x)))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<text>\nProblem 4.3\n\
    \n</text>\n<cell>", "    even_list = []\n    for i in range(len(x)):\n       \
    \ if len(str(x[i])) < 2:\n            continue\n        if str(i).isdigit():\n\
    \            continue\n        else:\n            even_list.append(x[i])\n   \
    \ even_list.sort()\n    return even_list\n", "    result = []\n    temp = []\n\
    \    for i in x:\n        if not temp:\n            temp.append(i)\n        else:\n\
    \            if i not in temp:\n                temp.append(i)\n             \
    \   result.extend(temp)\n                temp = []\n    if len(temp) > 0:\n  \
    \      result.extend(temp)\n        \n    return result\n    \n    ", "    \n\
    \    sorted_list = sorted(x)\n    \n    unique_digits = []\n    for digit in sorted_list:\n\
    \        if not any(x % 10 == digit for x in sorted_list):\n            unique_digits.append(digit)\n\
    \n    return unique_digits\n", "    unique_digit = []\n    for elem in x:\n  \
    \      if elem % 2 == 0 and elem in unique_digit:\n            pass\n        else:\n\
    \            unique_digit.append(elem)\n    return sorted(unique_digit)\n\n",
  "    \n    number_set = set()\n    for num in x:\n        number_set.add(num)\n\
    \    return [i for i in x if i not in number_set]\n", "    unique_digits = []\n\
    \    seen = set()\n    seen_add = seen.add\n    for x in x:\n        if x in seen:\n\
    \            continue\n        seen_add(x)\n        if x % 2 != 0:\n         \
    \   unique_digits.append(x)\n    return sorted(unique_digits)\n\n", "    # write\
    \ your code here\n    digit_list = list(map(int, str(x)))\n    digit_set = set(digit_list)\n\
    \    \n    return sorted(list(digit_list - digit_set))\n", "    result = []\n\
    \    for n in x:\n        if not is_unique_digit(n):\n            result.append(n)\n\
    \    return result\n\n", "    digit_set = set()\n    \n    for n in x:\n     \
    \   if n not in digit_set:\n            digit_set.add(n)\n        else:\n    \
    \        break\n    return sorted(list(digit_set))\n", "    pass\n", "    if not\
    \ x:\n        return []\n\n    digit_set = set()\n    digits = []\n    for i in\
    \ x:\n        if int(str(i)[0]) % 2 == 1:\n            digit_set.add(i)\n    \
    \        digits.append(i)\n    return sorted(list(digit_set))\n", "    \n    def\
    \ digits(numbers: List[int]) -> List[int]:\n        numbers = map(int, numbers)\n\
    \        return [x for x in range(10) if x not in numbers and any(map(lambda x:\
    \ x == x, [x % i for i in range(10)]))]\n\n    digits = digits(x)\n    return\
    \ sorted(filter(lambda x: int(x) not in digits, x))\n", "    \n    ans = [x for\
    \ x in x if x % 2 == 0]\n    \n    return sorted(ans)\n", "    # Your code here\n\
    \    if len(x) == 0:\n        return []\n    res = []\n    for n in x:\n     \
    \   while n % 2 == 0 and n not in res:\n            res.append(n)\n          \
    \  n = int(n / 2)\n    res.sort()\n    return res\n", "    s = set()\n    for\
    \ n in x:\n        for c in str(n):\n            if c not in s:\n            \
    \    s.add(c)\n    return sorted(list(s))\n", "    return list(filter(lambda y:\
    \ y % 2 == 0, sorted(x)))\n\n", "    # Your code goes here\n    pass\n", "   \
    \ \n    # return sorted list\n    if len(x) == 0:\n        return []\n    return\
    \ sorted(set(x))\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>", "    \n    digits\
    \ = set(x)\n    return [x for x in x if not (x % 10) in digits]\n    \n</cell>\n\
    <cell>\n%timeit unique_digits([15, 33, 1422, 1])\n%timeit unique_digits([152,\
    \ 323, 1422, 10])\n%timeit unique_digits([15, 33, 1422, 1])\n%timeit unique_digits([152,\
    \ 323, 1422, 10])\n%timeit unique_digits([152, 323, 1422, 10])\n%timeit unique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nWe see that our algorithm is very efficient\
    \ in terms of computational time $\\mathcal{O}(n)$, where $n$ is the number of\
    \ elements in the input list.\n\nWe also see that if we sort the list before applying\
    \ unique_digits, we get a $\\mathcal{O}(n)$ computational time algorithm as well.\n\
    \n\n</text>\n<cell>", "    if not x:\n        return []\n    \n    sorted_list\
    \ = sorted(x)\n    \n    dig = set()\n    \n    for item in sorted_list:\n   \
    \     if item % 2 != 0:\n            if item in dig:\n                sorted_list.remove(item)\n\
    \            else:\n                dig.add(item)\n    \n    return sorted_list\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\nThis approach is a bit different from others\
    \ here in that it will avoid creating additional sets or lists - it only uses\
    \ list slicing and is probably a bit faster, albeit this was only tested on smaller\
    \ lists:\n<code>", "    digits = {}\n    for i in x:\n        if i not in digits:\n\
    \            digits[i] = 1\n        else:\n            digits[i] += 1\n    \n\
    \    result = []\n    for i in x:\n        if digits[i] != 1:\n            result.append(i)\n\
    \n    return result\n\n", "    unique, count = [], {}\n    for i in x:\n     \
    \   if i not in count:  # If not in the count\n            unique.append(i)\n\
    \            count[i] = 1\n        else:\n            count[i] += 1  # Increment\
    \ the count\n    return sorted(unique, key=lambda x : str(x)[0])\n", "    even\
    \ = []\n    for num in x:\n        if not num % 2:\n            even.append(num)\n\
    \    return sorted(list(set(x for x in x if x not in even)))\n", "    \n    return\
    \ sorted(list(set([x for x in x if x%2==0])))\n", "    \n    digits = []\n   \
    \ for i in x:\n        digits.append(str(i).zfill(2))\n    return list(sorted(set(digits)))\n\
    \    ", "    res = []\n    \n    for x in x:\n        found = False\n        for\
    \ y in res:\n            if x == y:\n                found = True\n          \
    \      break\n        if not found:\n            res.append(x)\n            \n\
    \    return sorted(res)\n", "    digit_set: Set[int] = set()\n    result: List[int]\
    \ = []\n    for i in x:\n        if i not in digit_set:\n            result.append(i)\n\
    \            digit_set.add(i)\n    result.sort()\n    return result\n", "    digit_count\
    \ = {}\n    digit_count_set = set()\n    sorted_list = []\n    for num in x:\n\
    \        digit = num % 10\n        if digit in digit_count:\n            digit_count[digit]\
    \ += 1\n        else:\n            digit_count[digit] = 1\n        digit_count_set.add(digit)\n\
    \    \n    for num, count in digit_count.items():\n        if count > 1:\n   \
    \         sorted_list.append(num)\n    \n    return sorted_list\n</cell>\n<cell>",
  "    from math import log\n    \n    if len(x) == 1:\n        return x \n\n    #\
    \ find minimum digit of x\n    idx = x[0] \n    \n    while idx != 1: \n     \
    \   idx //= 10 \n    \n    m = log(x, 10) * 10 \n    \n    # find minimum digit\
    \ x without its first digit\n    idx = x[0] \n    \n    while idx != 1:\n    \
    \    idx //= 10 \n    \n    m = m * 10 + idx \n    \n    # remove x's first digit\
    \ and find x's second digit\n    idx = x \n    \n    while idx != 1:\n       \
    \ idx //= 10 \n    \n    m = m * 10 + idx \n    \n    return list(filter(lambda\
    \ c: c % m != 0, x))\n    ", "    ans = []\n    for x in x:\n        digit = x%10\n\
    \        if digit == 0 :\n            continue\n        if digit in ans:\n   \
    \         continue\n        ans.append(digit)\n    ans.sort()\n    return ans\n\
    \n", "    seen = set()\n    seen_add = seen.add\n    return [x for x in x if x\
    \ not in seen and not seen_add(x)]\n</cell>\n<cell>", "    return sorted(list(set(x)\
    \ - set(filter(lambda x: x % 2 == 0, x))))\n", "    digits = set(map(int, str(x)))\n\
    \    digits_set = set(map(int, str(digits)))\n    ans = []\n    for n in x:\n\
    \        if n not in digits_set:\n            ans.append(n)\n            digits_set.remove(int(n))\n\
    \    return ans\n", "    # your code here\n    len_x = len(x)\n    if len_x ==\
    \ 0:\n        return []\n    elif len_x == 1:\n        return x\n    else:\n \
    \       d = collections.Counter(x)\n        return [x for x in d if not d[x]%2]\n",
  "    \n    # Initialize a empty list.\n    digits = []\n\n    # Loop x list to check\
    \ all digits' index.\n    for i in range(len(x)):\n        # Use list index to\
    \ check if any even digit.\n        if x[i] % 2 == 0:\n            digits.append(x[i])\n\
    \    return digits\n</cell>\n<cell>", "    # your implementation\n    \n    pass\n\
    \n", "    \n    digits = list(set(x for i in x if int(str(i))%2 == 0))\n    digits.sort()\n\
    \    return digits\n", "    numbers = list(set(map(int, str(x))))\n    for number\
    \ in numbers:\n        if number % 2 == 0:\n            numbers.remove(number)\n\
    \    return sorted(numbers)\n", "    answers = []\n    \n    for i in x:\n   \
    \     if i%2 == 0:\n            answers.append(i)\n    \n    return sorted(answers)\n",
  "    \n    numbers = [n for n in x]\n    numbers = sorted(numbers)\n    numbers_set\
    \ = set(numbers)\n    unique_numbers = numbers[:]\n    unique_numbers.remove(*numbers_set)\n\
    \    unique_numbers.sort()\n    return unique_numbers\n</cell>\n<text>\nLet's\
    \ check it:\n\n\n</text>\n<cell>\nassert unique_digits([15, 33, 1422, 1]) == [1,\
    \ 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    As a more fun problem, let's consider a case where we cannot use sets to find\
    \ unique numbers.\n\nGiven a list of numbers, return a new list that only contains\
    \ unique elements from the original list. \nIf the original list contains duplicates,\
    \ only the first occurence of each unique element is kept.\n\nExample:\n>>> unique([-1,\
    \ 1, -1, 2, 2])\n[-1, 1, 2]\n>>> unique([-1, 1, -1, 2, 2])\n[-1, 1, 2]\n>>> unique([1,\
    \ 1, 2, 2])\n[1, 2]\n>>> unique([1, 1, 2, 2])\n[1, 2]\n>>> unique([-1, -1, -1,\
    \ 2])\n[-1, -1, 2]\n>>> unique([-1, -1, -1, 2])\n[-1, -1, 2]\n>>> unique([-1,\
    \ 2, 2])\n[-1, 2]\n\n</text>\n<cell>", "    # write your code here\n    \n   \
    \ even = []\n    odd = []\n    for i in range(len(x)):\n        if x[i] % 2 ==\
    \ 0:\n            even.append(x[i])\n        else:\n            odd.append(x[i])\n\
    \n    even.sort()\n    odd.sort()\n    \n    if len(odd) == 0:\n        return\
    \ even\n    else:\n        return odd\n", "    \n    digit_list = []\n    for\
    \ num in x:\n        digits = [int(i) for i in str(num)]\n        if 0 not in\
    \ digits:\n            digit_list.extend(sorted(digits))\n            \n    return\
    \ sorted(set(digit_list))\n\n", "    if not x:\n        return []\n    \n    sorted_list\
    \ = sorted(x)\n    unique_digits = []\n    \n    for i in sorted_list:\n     \
    \   if i % 2 == 0:\n            continue\n        unique_digits.append(i)\n\n\
    \    return unique_digits\n", "    # write your code here\n    pass\n</cell>\n\
    <cell>", "    return sorted(set(filter(lambda y: not is_even(y), x)))\n", "  \
    \  answer: List[int] = []\n    seen: List[int] = [x]\n    while len(seen) != 0:\n\
    \        seen = seen[1:]\n        answer.append(seen[0])\n    return answer\n",
  "    import functools\n    def digit_filter(digits: List[int], value: int) -> bool:\n\
    \        # filter out all those which has even digit except one\n        return\
    \ len(digits) >= 2 and digits[0] % 2 == value % 2\n    digits = list(map(int,\
    \ functools.reduce(lambda x,y:x+y,x)))\n    return sorted(filter(digit_filter,\
    \ digits), key=lambda x: x)\n", "    n = len(x)\n    digits_map = {i: 1 for i\
    \ in range(n)}\n    digits_map[1] = x[0] % 2 == 0\n    digits_map[2] = x[1] %\
    \ 2 == 0\n    digits_map[3] = x[2] % 2 == 0\n    digits_map[4] = x[3] % 2 == 0\n\
    \    digits_map[5] = x[4] % 2 == 0\n    digits_map[6] = x[5] % 2 == 0\n    digits_map[7]\
    \ = x[6] % 2 == 0\n    digits_map[8] = x[7] % 2 == 0\n    digits_map[9] = x[8]\
    \ % 2 == 0\n    digits_map[10] = x[9] % 2 == 0\n    digits_map[11] = x[10] % 2\
    \ == 0\n    digits_map[12] = x[11] % 2 == 0\n    digits_map[13] = x[12] % 2 ==\
    \ 0\n    digits_map[14] = x[13] % 2 == 0\n    digits_map[15] = x[14] % 2 == 0\n\
    \    digits_map[16] = x[15] % 2 == 0\n    digits_map[17] = x[16] % 2 == 0\n  \
    \  digits_map[18] = x[17] % 2 == 0\n    digits_map[19] = x[18] % 2 == 0\n    digits_map[20]\
    \ = x[19] % 2 == 0\n    digits_map[21] = x[20] % 2 == 0\n    digits_map[22] =\
    \ x[21] % 2 == 0\n    digits_map[23] = x[22] % 2 == 0\n    digits_map[24] = x[23]\
    \ % 2 == 0\n    digits_map[25] = x[24] % 2 == 0\n    digits_map[26] = x[25] %\
    \ 2 == 0\n    digits_map[27] = x[26] % 2 == 0\n    digits_map[28] = x[27] % 2\
    \ == 0\n    digits_map[29] = x[28] % 2 == 0\n    digits_map[30] = x[29] % 2 ==\
    \ 0\n    digits_map[31] = x[28] % 2 == 0\n    digits_map[32] = x[30] % 2 == 0\n\
    \    digits_map[33] = x[31] % 2 == 0\n    digits_map[34] = x[32] % 2 == 0\n  \
    \  digits_map[35] = x[33] % 2 == 0\n    digits_map[36] = x[34] % 2 == 0\n    digits_map[37]\
    \ = x[35] % 2 == 0\n    digits_map[38] = x[36] % 2 == 0\n    digits_map[39] =\
    \ x[37] % 2 == 0\n", "    \n    digit_set = set()\n    unique = []\n    for num\
    \ in x:\n        digit = int(num % 10)\n        if digit in digit_set:\n     \
    \       unique.append(num)\n        else:\n            digit_set.add(digit)\n\
    \            unique.append(num)\n    \n    return unique\n", "    answers = []\n\
    \    for n in x:\n        answers.append(n)\n        answers += [n for n in answers\
    \ if not n % 2]\n    return sorted(list(set(answers)))\n", "    if len(x) == 0:\n\
    \        return []\n    if len(x) == 1:\n        return x\n    digits = dict()\n\
    \    for n in x:\n        if n % 2 == 0:\n            continue\n        else:\n\
    \            digits[n] = True\n    result = []\n    for key in sorted(digits.keys()):\n\
    \        result.append(key)\n    return result\n", "    if x in [None]:\n    \
    \    return [None]\n    if len(x) == 1:\n        return x\n    if x[0] & 1:\n\
    \        return unique_digits(x[1:])\n    unique = []\n    for y in x:\n     \
    \   if y % 2 == 0:\n            unique.append(y)\n    return unique_digits(unique)\n\
    \    \n", "    digits = set()\n    for x in x:\n        digits.add(x)\n    uniques\
    \ = []\n    for d in digits:\n        if d%2 == 0:\n            uniques.append(d)\n\
    \    return sorted(uniques)\n", "    \n    # Initialize a list to store the unique\
    \ elements.\n    unique_digits = []\n    \n    # Loop over all items in the list.\n\
    \    for x_i in x:\n        \n        # If the item has no even digit, add it\
    \ to the list.\n        if x_i // 10 != 0: \n            unique_digits.append(x_i)\n\
    \            \n    # Return the unique elements.\n    return unique_digits\n",
  "    \n    sorted_list = []\n    \n    for num in sorted(x):\n        digits = []\n\
    \        for num2 in x:\n            digits.append(num2 % 10)\n        digits\
    \ = list(set(digits))\n        \n        if digits[0] == 2:\n            sorted_list.append(num)\n\
    \    \n    return sorted_list\n\n", "    \n    sorted_x = sorted(x)\n    \n  \
    \  even = []\n    odd = []\n    \n    for i in sorted_x:\n        if (i % 2) ==\
    \ 0:\n            even.append(i)\n        else:\n            odd.append(i)\n \
    \   \n    return even+odd\n", "    digit_lst = []\n    for i in x:\n        if\
    \ not(i // 10) % 2 != 0:\n            digit_lst.append(i)\n    return sorted(digit_lst)\n\
    </cell>\n<cell>", "    result = []\n    temp = []\n    for x in x:\n        if\
    \ x % 2 == 0:\n            temp = x + temp\n        else:\n            result.append(temp)\n\
    \            temp = x\n    result.append(temp)\n    return sorted(list(set(result)),\
    \ reverse=True)\n", "    \n    # write your code here\n    \n    answer = []\n\
    \    \n    for num in x:\n        \n        if num % 2 == 0 and num not in answer:\n\
    \            answer.append(num)\n            \n    answer.sort()\n    \n    return\
    \ answer\n\n", "    digits = [i for i in x if i % 2 == 0]\n    return sorted(digits)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
