name: HumanEval_88_sort_array
language: py
prompt: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Given an array of non-negative integers, return a copy of the given\
  \ array after sorting,\n    you will sort the given array in ascending order if\
  \ the sum( first index value, last index value) is odd,\n    or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n\n    Note:\n\
  \    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
  \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1, 5])\n\
  \    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n    [6, 5, 4,\
  \ 3, 2, 1, 0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
  \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert\
  \ candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2,\
  \ 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32,\
  \ 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
  \    check(sort_array)\n\ntest_check()\n"
completions: ["    array_copy = array.copy()\n    \n    # Sort array in ascending\
    \ order if the sum( first index value, last index value) is odd.\n    # Otherwise,\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n    for i in range(1, len(array)):\n        if ((array[i-1] + array[i])\
    \ % 2 != 0):\n            array_copy[i], array_copy[i-1] = array_copy[i-1], array_copy[i]\n\
    \    return array_copy\n", "    return sorted(array)\n", "    return sorted(array,\
    \ key = lambda x:x-array[-1] if x%2==0 else -x-array[-1])\n", "    array_sum =\
    \ sum(array)\n    if array_sum % 2 == 0:\n        return sorted(array)\n    else:\n\
    \        return sorted(array, reverse=True)\n", "    array.sort()\n    return\
    \ array\n\n", "    sum_of_first_and_last_element = sum(array[0], array[-1])\n\
    \    if sum_of_first_and_last_element % 2 == 1:\n        array.sort()\n    else:\n\
    \        array.reverse()\n    return array\n\n", "    sum_first, sum_last = sum(array[0]),\
    \ sum(array[-1])\n    if sum_first % 2 == 0:\n        sorted_array = [item for\
    \ item in array if item < sum_last]\n    else:\n        sorted_array = [item for\
    \ item in array if item > sum_first]\n    return sorted_array\n", "    return\
    \ sorted(array)\n", "    sum_first, sum_last = array[0], array[-1]\n    if sum_first\
    \ + sum_last == 0:\n        return array\n    if sum_first + sum_last < 0:\n \
    \       return array\n    if sum_first + sum_last % 2 == 0:\n        return sorted(array)\n\
    \    return sorted(array, key = lambda x: x - array[array.index(x)])\n", "   \
    \ if not array or len(array) < 2:\n        return array\n    sum = 0\n    for\
    \ i in range(len(array) - 1):\n        sum += array[i]\n    sum_even = sum & 0x1\n\
    \    sum_odd = (sum + 1) % 2\n    if sum_even < sum_odd:\n        array = list(reversed(array))\n\
    \    return array\n", "    if len(array) <= 1:\n        return array\n    if sum(\
    \ array[ 0 : -1 ] ) % 2 != 0:\n        array.append( array.pop( -1 ) )\n    return\
    \ array\n\n", "    array_copy = array.copy()\n    array_copy[0], array_copy[-1]\
    \ = array_copy[-1], array_copy[0]\n    return array_copy\n\n", "    temp = array.copy()\n\
    \    temp[0], temp[-1] = temp[-1], temp[0]\n    return temp\n</cell>\n<cell>",
  "    if not array or not array[0]:\n        return array\n    if not len(array):\n\
    \        return array\n\n    res_array = [0] * len(array)\n    sum_first_value\
    \ = array[0]\n\n    i = 0\n    while i < len(array):\n        if array[i] + sum_first_value\
    \ > 0:\n            sum_first_value += array[i]\n            res_array[i] = array[i]\n\
    \        else:\n            sum_first_value -= array[i]\n            res_array[i]\
    \ = array[i] - 1\n        i += 1\n\n    return res_array\n", "    # write your\
    \ code here\n    array.sort()\n    return array\n", "    return sorted(array)\n\
    \n", "    return sorted(array)\n", "    sum_ = 0\n    temp_ = 0\n    for i in\
    \ array:\n        sum_ += i\n        temp_ += i\n    if sum_ % 2:\n        temp_,\
    \ sum_ = sum_ - temp_, sum_ - sum_\n        array.sort()\n        array.extend([0]\
    \ * (sum_ - len(array) + 1))\n        return array\n    else:\n        temp_,\
    \ sum_ = temp_ - sum_, temp_ - temp_\n        array.sort()\n        array.extend([0]\
    \ * (sum_ - len(array) + 1))\n        return array\n", "    return sorted(array)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nthank you so much for your solution, but\
    \ can you please explain to me the recursive call (i.e. sort_array_helper)?\n\
    <|/ c |>\n<| c |>\nI added some explanation to the answer. Hope this helps :)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    sum = 0\n    for i in array:\n     \
    \   sum += i\n    if sum % 2 == 0:\n        return sorted(array)\n    else:\n\
    \        return sorted(array, reverse = True)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
