language: py
name: HumanEval_139_special_factorial
results:
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwid_2m4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphwid_2m4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphwid_2m4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    return factorial(n) * special_factorial(n\
    \ - 1)\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert\
    \ candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1)\
    \ == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qb75h1h.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1qb75h1h.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp1qb75h1h.py\"\
    , line 17, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp1qb75h1h.py\"\
    , line 13, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    fac = 1\n    for i in range(1, n + 1):\n        fac *= i\n    return fac\n\
    \n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rgmfqx7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7rgmfqx7.py\", line 28,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp7rgmfqx7.py\"\
    , line 22, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    return factorial(n) * (n - 1)\
    \ * (n - 2) * ... * (n - 2)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dcka0qm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9dcka0qm.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp9dcka0qm.py\"\
    , line 17, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp9dcka0qm.py\"\
    , line 13, in special_factorial\n    return factorial(n) * (n - 1) * (n - 2) *\
    \ ... * (n - 2)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    elif n < 0:\n        return -1\n    else:\n        factor = 1\n        for\
    \ k in range(n - 1):\n            factor *= k + 1\n        return factor\n\n\n\
    def check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudguqbr4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpudguqbr4.py\", line 31,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpudguqbr4.py\"\
    , line 25, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    return factorial(n) * (n - 1)\
    \ * special_factorial(n - 2)\n\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdawgivc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvdawgivc.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpvdawgivc.py\"\
    , line 17, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpvdawgivc.py\"\
    , line 13, in special_factorial\n    return factorial(n) * (n - 1) * special_factorial(n\
    \ - 2)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    assert n > 0\n    if n == 1:\n\
    \        return 1\n    else:\n        return n * (special_factorial(n - 1))\n\n\
    \ndef check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5)\
    \ == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) ==\
    \ 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq45crbj7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq45crbj7.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpq45crbj7.py\"\
    , line 21, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwid_2m4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphwid_2m4.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmphwid_2m4.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 1:\n        return 0\n\
    \    return factorial(n) * (n - 1) * (n - 2)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9l4iytk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmps9l4iytk.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmps9l4iytk.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmps9l4iytk.py\"\
    , line 15, in special_factorial\n    return factorial(n) * (n - 1) * (n - 2)\n\
    NameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return n * (special_factorial(n-1))\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppws_hdum.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppws_hdum.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmppws_hdum.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    return factorial(n) * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz47qx2ka.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz47qx2ka.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpz47qx2ka.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpz47qx2ka.py\"\
    , line 15, in special_factorial\n    return factorial(n) * special_factorial(n\
    \ - 1)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 1:\n        return 1\n\
    \    return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n    assert\
    \ candidate(4) == 288\n    assert candidate(5) == 34560\n    assert candidate(7)\
    \ == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhx8y_56.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxhx8y_56.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpxhx8y_56.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    The factorial can only be computed for a non-negative integer\")\n    if n ==\
    \ 0:\n        return 1\n    return factorial(n) * (n - 1) * special_factorial(n\
    \ - 2)\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n    assert\
    \ candidate(5) == 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1)\
    \ == 1\n\ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_0d57k6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp_0d57k6.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpp_0d57k6.py\"\
    , line 21, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpp_0d57k6.py\"\
    , line 17, in special_factorial\n    return factorial(n) * (n - 1) * special_factorial(n\
    \ - 2)\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    return factorial(n) // (factorial(n-1)\
    \ * factorial(n-2))\n\n\ndef check(candidate):\n    assert candidate(4) == 288\n\
    \    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n \
    \   assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57ppyuzi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp57ppyuzi.py\", line 23,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp57ppyuzi.py\"\
    , line 17, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp57ppyuzi.py\"\
    , line 13, in special_factorial\n    return factorial(n) // (factorial(n-1) *\
    \ factorial(n-2))\nNameError: name 'factorial' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n > 0:\n        return n*special_factorial(n-1)\n\
    \    else:\n        return 1\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yrz7aoo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3yrz7aoo.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp3yrz7aoo.py\"\
    , line 19, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgmmiycbe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgmmiycbe.py\", line 26,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpgmmiycbe.py\"\
    , line 20, in check\n    assert candidate(4) == 288\nAssertionError\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 1\n\
    \    return factorial(n)\n\n\ndef check(candidate):\n    assert candidate(4) ==\
    \ 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgnyyjrn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqgnyyjrn.py\", line 25,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmpqgnyyjrn.py\"\
    , line 19, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmpqgnyyjrn.py\"\
    , line 15, in special_factorial\n    return factorial(n)\nNameError: name 'factorial'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n\
    \    else:\n        return n * special_factorial(n - 1)\n\n@curry\ndef check(candidate):\n\
    \    assert candidate(4) == 288\n    assert candidate(5) == 34560\n    assert\
    \ candidate(7) == 125411328000\n    assert candidate(1) == 1\n\ndef test_check():\n\
    \    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggwux_z7.py\", line\
    \ 18, in <module>\n    @curry\nNameError: name 'curry' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 0\n\
    \    elif n < 0:\n        return -1 * special_factorial(abs(n))\n    else:\n \
    \       return math.factorial(n)\n\ndef check(candidate):\n    assert candidate(4)\
    \ == 288\n    assert candidate(5) == 34560\n    assert candidate(7) == 125411328000\n\
    \    assert candidate(1) == 1\n\ndef test_check():\n    check(special_factorial)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11ip6zop.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp11ip6zop.py\", line 27,\
    \ in test_check\n    check(special_factorial)\n  File \"/tmp/tmp11ip6zop.py\"\
    , line 21, in check\n    assert candidate(4) == 288\n  File \"/tmp/tmp11ip6zop.py\"\
    , line 18, in special_factorial\n    return math.factorial(n)\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
  timestamp: 1659821039
- exit_code: -1
  program: "def special_factorial(n: int) -> int:\n    \"\"\"The Brazilian factorial\
    \ is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n\
    \    The function will receive an integer as input and should return the special\n\
    \    factorial of this integer.\n    \"\"\"\n    return factorial(n) // (n - factorial(n))\n\
    \n\n@time_function(\n    \"special_factorial\",\n    [\n        (\n          \
    \  1,\n            2,\n        ),\n        (\n            2,\n            3,\n\
    \        ),\n        (\n            4,\n            6,\n        ),\n        (\n\
    \            6,\n            8,\n        ),\n        (\n            8,\n     \
    \       12,\n        ),\n        (\n            12,\n            14,\n       \
    \ ),\n        (\n            14,\n            15,\n        ),\n    ],\n)\ndef\
    \ check(candidate):\n    assert candidate(4) == 288\n    assert candidate(5) ==\
    \ 34560\n    assert candidate(7) == 125411328000\n    assert candidate(1) == 1\n\
    \ndef test_check():\n    check(special_factorial)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tfn556u.py\", line\
    \ 16, in <module>\n    @time_function(\nNameError: name 'time_function' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659821039
