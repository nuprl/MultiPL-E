name: HumanEval_27_flip_case
language: py
prompt: "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase\
  \ characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n\
  \    'hELLO'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!')\
  \ == 'hELLO!'\n    assert candidate('These violent delights have violent ends')\
  \ == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n\ndef test_check():\n    check(flip_case)\n\
  \ntest_check()\n"
completions: ["    return string.upper().replace(' ', '').replace('_', '')\n\n", " \
    \   flipped_case = ''\n    for char in string:\n        if char.islower():\n \
    \           flipped_case += char.upper()\n        else:\n            flipped_case\
    \ += char.lower()\n    return flipped_case\n", "    return string.swapcase()\n\
    \n", "    return string[0].upper() + string[1:].lower()\n\n", "    return string[0].upper()\
    \ + string[1:].lower()\n", "    return string.lower() + string.upper()\n\n", " \
    \   return string.lower()[::-1] + string.upper()\n\n", "    return \"\".join(map(lambda\
    \ x: x.upper(), list(string)))\n\n", "    return string.swapcase()\n\n", "   \
    \ return \"\".join(x if x==x.lower() else x.upper() for x in string)\n", "   \
    \ return \"\".join(\n        char.upper() if char.islower() else char.lower()\
    \ for char in string\n    )\n\n", "    return ''.join([(char.upper() if char.islower()\
    \ else char.lower()) for char in string])\n\n", "    # Convert every character\
    \ into lowercase.\n    string = string.lower()\n    # Make every other character\
    \ uppercase.\n    return ''.join([ \n        (string.upper() if index%2 == 0 else\
    \ string.lower())\n        for index in range(len(string))\n    ])\n", "    return\
    \ string.upper().replace(' ', '')\n", "    return ''.join([x.upper() if x.islower()\
    \ else x.lower() for x in string])\n", "    return \"\".join(\n        string.upper()\n\
    \        if i == 0 or string[i - 1] == \" \" else string.lower()\n        for\
    \ i in range(len(string))\n    )\n\n", "    chars = list(string)\n    for i, char\
    \ in enumerate(chars):\n        if char.islower():\n            chars[i] = char.upper()\n\
    \        elif char.isupper():\n            chars[i] = char.lower()\n    return\
    \ \"\".join(chars)\n\n", "    return string.upper() if isinstance(string, str)\
    \ else string\n\n", "    return string[0].upper() + string[1:]\n", "    return\
    \ \"\".join(reversed(list(string)))\n", "    return ''.join([i.lower() if i.islower()\
    \ else i.upper() for i in string])\n\n", "    s = list(string)\n    for i in range(len(s)):\n\
    \        s[i] = s[i].lower()\n        s[i] = s[i].upper()\n    return \"\".join(s)\n",
  "    string = string.lower()\n    return string[0].upper() + string[1:]\n\n", " \
    \   return \"\".join(sorted(string.lower(), reverse=True))+\"\".join(sorted(string.upper()))\n\
    </cell>\n<cell>", "    return string.swapcase()\n\n", "    return string.upper().replace('.',\
    \ str.title())\n\n", "    return string.swapcase()\n", "    return ''.join([i.upper()\
    \ if i == i.lower() else i for i in string])\n\n", "    lowercase_to_uppercase\
    \ = string.lower()\n    uppercase_to_lowercase = string.upper()\n    return uppercase_to_lowercase\
    \ + lowercase_to_uppercase\n", "    mapping = {ord(ch): ord(ch).upper() for ch\
    \ in string.lower()}\n    return \"\".join(mapping.values())\n\n", "    string\
    \ = string[0].upper() + string[1:]\n    return string.lower()\n\n", "    return\
    \ ''.join(\n        char.upper() if idx % 2 == 0 else char.lower()\n        for\
    \ idx, char in enumerate(string)\n    )\n\n", "    mapping = {\n        'a': 'A',\n\
    \        'b': 'B',\n        'c': 'C',\n        'd': 'D',\n        'e': 'E',\n\
    \        'f': 'F',\n        'g': 'G',\n        'h': 'H',\n        'i': 'I',\n\
    \        'j': 'J',\n        'k': 'K',\n        'l': 'L',\n        'm': 'M',\n\
    \        'n': 'N',\n        'o': 'O',\n        'p': 'P',\n        'q': 'Q',\n\
    \        'r': 'R',\n        's': 'S',\n        't': 'T',\n        'u': 'U',\n\
    \        'v': 'V',\n        'w': 'W',\n        'x': 'X',\n        'y': 'Y',\n\
    \        'z': 'Z',\n    }\n    return ''.join(mapping[char.lower()] if char in\
    \ mapping else char for char in string)\n\n", "    return string.swapcase()\n\n",
  "    flipped = string.lower()\n    for idx, char in enumerate(reversed(string)):\n\
    \        if char.isupper():\n            flipped = flipped.replace(char, char.upper())\n\
    \        else:\n            flipped = flipped.replace(char, char.lower())\n  \
    \  return flipped\n\n", "    return string.upper().replace('T', 't').replace('S',\
    \ 's')\n\n</cell>\n<text>\nThis transformation can be applied before or after\
    \ the tokenize. The default transformation is before the tokenize.\n\n\n</text>\n\
    <cell>\nfrom nltk.stem.snowball import SnowballStemmer\nstemmer = SnowballStemmer(\"\
    english\")\n", "    return string.upper() if string != string.lower() else string.lower()\n\
    \n", "    return ''.join(\n        [x.lower() if x.isupper() else x.upper() for\
    \ x in string])\n\n", "    uppercase_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    lowercase_letters = \"abcdefghijklmnopqrstuvwxyz\"\n    letters_to_flip =\
    \ uppercase_letters.find(string.lower()) + len(lowercase_letters)\n    return\
    \ string[:letters_to_flip] + string[letters_to_flip:].upper()\n\n", "    return\
    \ \"\".join( [ x.upper() if x not in \"abcdefghijklmnopqrstuvwxyz\" else x.lower()\
    \ for x in string ] )\n", "    return string.lower() + string.upper()\n", "  \
    \  return string.lower()+string.upper() #first add them all to lower case, then\
    \ upper it\n\n", "    string = str(string).lower()\n    string = string.replace(string.upper(),\
    \ string.lower())\n    string = string.replace(string.lower(), string.upper())\n\
    \    return string\n\n", "    string = string.lower()\n    string = string.upper()\n\
    \    string = string.swapcase()\n    return string\n\n", "    return string.lower()\
    \ + string.upper()\n\n", "    return string.upper().replace(' ', '').replace('-',\
    \ '').lower()\n\n", "    return string.upper() if string.istitle() else string.lower()\n\
    \n", "    string = string.upper()\n    string = string.lower()\n    return string\n",
  "    return string.swapcase()\n\n", "    return string.upper().replace(' ', '').replace('\
    \ ', '').replace(' ', '')\n", "    return string.upper() if string.islower() else\
    \ string.lower()\n", "    # return string.replace('a', 'A').replace('b', 'B')\n\
    \    return string.swapcase()\n\n", "    return string.upper()[0] + string.lower()[1:]\
    \ if len(string) > 1 else string[0]\n", "    lower_string = \"\".join(string.lower())\n\
    \    upper_string = \"\".join(string.upper())\n    return lower_string + upper_string\n\
    </cell>\n<cell>", "    return string.upper() \\\n           .translate(_UPPER2LOWER,\
    \ string=string.lower(), keep_blank_chars=True)\\\n           .lower()\n\n", " \
    \   return string.swapcase()\n\n", "    return string.upper().replace('.', '').replace('\
    \ ', '').replace('-', '').replace('_', '')\n\n", "    return string.upper() if\
    \ string.istitle() else string.lower()\n\n", "    return string.upper() + string.lower()\n",
  "    return string[0].upper() + string[1:].lower()\n", "    return string.upper()\
    \ if string.islower() else string.lower()\n\n", "    flipped = string.lower()\n\
    \    chars = []\n    for char in string.lower():\n        if char.islower():\n\
    \            chars.append(char.upper())\n        else:\n            chars.append(char.lower())\n\
    \    return ''.join(flipped) + ''.join([x for x in chars if x.islower()])\n\n",
  "    string = string.lower()\n    string = string[::-1]\n    string = string[:len(string)\
    \ - 1:-1]\n    return string\n\n", "    return string.upper() if string.istitle()\
    \ else string.lower()\n\n", "    return ''.join(reversed([x.upper() if x.isupper()\
    \ else x.lower() for x in string]))\n\n", "    return string.swapcase()\n\n",
  "    return string.swapcase()\n\n", "    return string.swapcase()\n\n", "    return\
    \ string.upper().replace(' ', '_').lower()\n\n", "    return string.upper() if\
    \ string else string.lower()\n\n", "    def uppercase_first(match):\n        return\
    \ match.group(1) + match.group(2).upper()\n    return re.sub(r'[a-z]', uppercase_first,\
    \ string.lower())\n", "    string_lower = string.lower()\n    string_upper = string.upper()\n\
    \    return string_lower + string_upper.swapcase()\n", "    return string.swapcase()\n\
    \n", "    return string.swapcase()\n\n", "    return ''.join(x.upper() if i else\
    \ x.lower() for i in string)\n", "    return string.upper()\n\n", "    return\
    \ string[0].upper() + string[1:].lower()\n", "    return string.upper().replace(\"\
    _\", \"\").lower()\n\n", "    return ''.join(_LOWER_CHARS.sub(_UPPER_CHARS, char)\
    \ for char in string)\n\n", "    return string.swapcase()\n", "    return string[0].upper()\
    \ + string[1:]\n\n", "    return string.upper().replace(' ', '_')\n\n", "    return\
    \ string.swapcase()\n\n", "    return \"\".join(\n        map(\n            str.upper,\n\
    \            \"\".join(\n                map(\n                    str.lower,\n\
    \                    string.lower(),\n                )\n            ),\n    \
    \    )\n    )\n\n", "    return string.upper() if islower(string) else string.lower()\n",
  "    def convert_case(text: str) -> str:\n        return text.capitalize() if text.lower()\
    \ == text else text.upper()\n    return ''.join(map(convert_case, string))\n",
  "    return string.swapcase()\n\n", "    string = re.sub(\"[a-z]\", lambda x: x.group(0)[0].upper()\
    \ + x.group(0)[1:], string)\n    return re.sub(\"[A-Z]\", lambda x: x.group(0)[0].lower()\
    \ + x.group(0)[1:], string)\n\n", "    string = string.casefold()\n    string\
    \ = string.swapcase()\n    return string\n\n", "    return string.upper().replace('\
    \ ', '').replace('_', '').replace('-', '')\n\n", "    str_lower = string.lower()\n\
    \    str_upper = string.upper()\n    return str_upper.swapcase() + str_lower\n\
    </cell>\n<cell>", "    return \"\".join(i.upper() if i == string.lower() else\
    \ i.lower() for i in string)\n", "    return \"\".join(\n        map(\n      \
    \      lambda c: c.lower() if c.islower() else c.upper(),\n            string.lower(),\n\
    \        )\n    )\n\n", "    return string[0].upper() + string[1:].lower()\n\n",
  "    string = str(string).lower()\n    string_list = list(string)\n    for index,\
    \ char in enumerate(string_list):\n        if char.isupper():\n            string_list[index]\
    \ = char.lower()\n    return ''.join(string_list)\n\n", "    return string.upper()\
    \ if 'a' <= string[0] <= 'z' else string.lower()\n\n", "    return string.swapcase()\n\
    \n", "    string = re.sub('[a-z]+', lambda char: char.upper(), string)\n    string\
    \ = re.sub('[A-Z]+', lambda char: char.lower(), string)\n    return string\n",
  "    return string.lower()+string.upper()\n</cell>\n<cell>\nflip_case('Hello')\n\
    </cell>\n<text>\nThe map function works very similar to the Python built-in map\
    \ function, except it takes a lambda function as its argument. lambda functions\
    \ are anonymous -- you can name them anything you want. They are most useful when\
    \ you want to quickly define a function that does one thing but doesn't have to\
    \ be named or memorized. They are also used in a way that is pretty much the same\
    \ as the list comprehension we saw in SICP earlier.\n\n\n</text>\n<cell>\nmap(lambda\
    \ x: x * 2, range(1,11))\n</cell>\n<text>\nThe lambda function is pretty much\
    \ like a regular def function. It takes a single argument (the argument to pass\
    \ into the lambda function) and returns the value of the argument after passing\
    \ through some expression or code. For example, if we wanted to multiply every\
    \ number from one list by 2, we could do the following:\n\n\n</text>\n<cell>\n\
    map(lambda x: int(x) * 2, [1, 3, 5, 7, 9])\n</cell>\n<text>\nWe can also pass\
    \ in two lists into the map function and it will return a new list with the values\
    \ we want.\n\n\n</text>\n<cell>\nlst1=[1,2,3]\nlst2=[4,5,6]\n\nlist(map(lambda\
    \ x,y: x*y, lst1, lst2))\n</cell>\n<text>\nWe can also use lambda functions to\
    \ make our code easier to read:\n\n\n</text>\n<cell>\nlst1=[1,2,3]\nlst2=[4,5,6]\n\
    \nlist(map(lambda x,y: x+y, lst1, lst2))\n</cell>\n<text>\nList Comprehensions\n\
    List comprehensions are a fairly new feature in Python. They allow us to create\
    \ a new list based on some other list. We will go over list comprehensions more\
    \ in depth later on in the course, but for now we can explain the syntax below\n\
    \n\n</text>\n<cell>\n[x*2 for x in range(1,11)]\n</cell>\n<text>\nHere we create\
    \ a list called x with numbers from 1 to 10. Then we use a list comprehension\
    \ to multiply every number in x by 2. We could also use map to do the same thing\
    \ as below:\n\n\n</text>\n<cell>\nlist(map(lambda x: x * 2, range(1,11)))\n</cell>\n\
    <text>\nList comprehensions can also contain conditional statements inside them:\n\
    \n\n</text>\n<cell>\n[num for num in range(1,11) if num % 2 == 0]\n</cell>\n<text>\n\
    We can also use nested list comprehensions to create multidimensional lists:\n\
    \n\n</text>\n<cell>\n[[num for num in range(1,11)] for num in range(1,11)]\n</cell>\n\
    <text>\nDictionary Comp", "    return string.swapcase()\n</cell>\n<cell>", " \
    \   return ''.join([i.lower() if i.isupper() else i.upper() for i in string])\n",
  "    return string.swapcase()\n\n", "    return string[0].upper() + string[1:].lower()\n",
  "    return string.swapcase()\n\n", "    def flip(c):\n        return c.islower()\
    \ and c.isupper() or c.isupper() and c.islower()\n    return ''.join([flip(c)\
    \ for c in string])\n\n@cached_function", "    return \"\".join(string.lower()\
    \ + string.upper())\n\n", "    string_lower = string.lower()\n    string_upper\
    \ = string_lower.upper()\n    return string_upper + string_lower\n", "    return\
    \ ''.join( [ x.lower() if x.islower() else x.upper() for x in string ] )\n", " \
    \   return string.swapcase()\n\n", "    return \"\".join(\n        {\n       \
    \     c.lower(): c.upper()\n            if c.islower()\n            else c.upper()\n\
    \            if c.isupper()\n            else c\n            for c in string\n\
    \        }\n    )\n\n", "    return ''.join([ c if c.islower() else c.upper()\
    \ for c in string ])\n", "    mapping = {\n        'A': 'a',\n        'B': 'b',\n\
    \        'C': 'c',\n        'D': 'd',\n        'E': 'e',\n        'F': 'f',\n\
    \        'G': 'g',\n        'H': 'h',\n        'I': 'i',\n        'J': 'j',\n\
    \        'K': 'k',\n        'L': 'l',\n        'M': 'm',\n        'N': 'n',\n\
    \        'O': 'o',\n        'P': 'p',\n        'Q': 'q',\n        'R': 'r',\n\
    \        'S': 's',\n        'T': 't',\n        'U': 'u',\n        'V': 'v',\n\
    \        'W': 'w',\n        'X': 'x',\n        'Y': 'y',\n        'Z': 'z',\n\
    \    }\n\n    return ''.join(mapping.get(c, c) for c in string)\n\n", "    def\
    \ case_transform(char: str) -> str:\n        if char.islower():\n            return\
    \ char.upper()\n        else:\n            return char.lower()\n\n    return \"\
    \".join(case_transform(c) for c in string)\n\n", "    flipped_string = string.lower()\n\
    \    for char in string[::-1]:\n        flipped_string = flipped_string + char.upper()\n\
    \    return flipped_string\n", "    return string.swapcase()\n</cell>\n<text>\n\
    Now we can create a new function titled tokenize_sentence that takes in one parameter\
    \ called text. This function will take in a string and tokenize it. We do this\
    \ by first splitting the string by whitespace (\" \"), then mapping each word\
    \ in the resulting list to it's corresponding id. For the mapping between word\
    \ id and word itself, see Vocabulary.\n\n\n</text>\n<cell>", "    chars = list(string)\n\
    \    for i, char in enumerate(chars):\n        if char.islower():\n          \
    \  chars[i] = char.upper()\n        elif char.isupper():\n            chars[i]\
    \ = char.lower()\n    return \"\".join(chars)\n\n", "    return ''.join( ch.upper()\
    \ if ch.islower() else ch.lower() for ch in string )\n", "    return string.swapcase()\n",
  "    chars = []\n    for c in string:\n        if c.isupper():\n            chars.append(c.lower())\n\
    \        else:\n            chars.append(c)\n    return ''.join(chars)\n", " \
    \   return string.upper().replace('L', 'e').replace('E', 'l')\n", "    return\
    \ string.swapcase()\n\n", "    return string.swapcase()\n\n", "    return ''.join(\
    \ i.lower() if i.isupper() else i.upper() for i in string )\n\n", "    def upper(match):\n\
    \        return match.group(0)[0].upper() + match.group(0)[1:]\n    def lower(match):\n\
    \        return match.group(0)[0].lower() + match.group(0)[1:]\n    return re.sub(\"\
    (\\w)([A-Z])\", upper, string).lower()\n", "    return string.swapcase()\n", " \
    \   chars = string.lower()\n    return chars.upper() if chars in string.upper()\
    \ else chars.lower()\n", "    return string[::-1].lower()\n\n", "    return string.swapcase()\n\
    </cell>\n<cell>", "    return ''.join([\n        i.upper() if i.islower() else\
    \ i.lower()\n        for i in string\n    ])\n", "    return string.upper().replace(string.lower(),\
    \ '')\n\n", "    return string.lower() + string.upper() \\\n           if string.istitle()\
    \ else string.upper() + string.lower()\n\n", "    return string.lower() + string.upper()\n\
    \n", "    return \"\".join(\n        [\n            s.upper()\n            if\
    \ s.islower()\n            else s.lower()\n            if s.isupper()\n      \
    \      else s\n            for s in string\n        ]\n    )\n\n", "    return\
    \ string.upper().replace('_', '') + string.lower()\n\n", "    return string.upper().replace('\
    \ ', '').replace('_', '')\n", "    return string[0].upper() + string[1:].lower()\n\
    \n", "    return string.upper() if string.islower() else string.lower()\n\n",
  "    return string.swapcase()\n\n", "    return string.upper() + string.lower()\n",
  "    return ''.join(x.lower() if x.isupper() else x.upper() for x in string)\n\n",
  "    return string.upper() if string.islower() else string.lower()\n\n", "    return\
    \ string.upper() if string.lower() == string else string.lower()\n\n", "    l\
    \ = list(string)\n    l[0] = l[0].upper()\n    l[-1] = l[-1].lower()\n    return\
    \ ''.join(l)\n\n", "    return \"\".join(sorted(string.lower(), key=lambda c:\
    \ c.upper()))\n\n", "    return ''.join(sorted(string.lower(), key=string.index))\n\
    \n", "    return ''.join(x.lower() if x.islower() else x.upper() for x in string)\n\
    \n", "    return ''.join( c for c in string if c.islower() ).upper() + \\\n  \
    \         ''.join( c.upper() if c.isupper() else c for c in string ).lower()\n",
  "    return string.title()\n", "    return string.swapcase()\n\n\n@memoize", " \
    \   return string.upper() if string.islower() else string.lower()\n\n", "    string\
    \ = string.lower()\n    string = string.upper()\n    string = string.swapcase()\n\
    \    return string\n</cell>\n<cell>", "    string = string.lower()\n    return\
    \ string.upper()\n", "    return string.lower() + string.upper()\n\n", "    return\
    \ ''.join([x.upper() if x.islower() else x.lower() for x in string])\n\n", " \
    \   return ''.join([i.lower() if i.isupper() else i.upper() for i in string])\n",
  "    return string.swapcase()\n", "    return ''.join([ x.upper() if x.islower()\
    \ else x.lower() for x in string ])\n\n", "    return string.lower() + string.upper()\n\
    \n", "    return string.upper().replace(''.join(e for e in string.lower() if e.isupper()),\
    \ string.upper())\n\n", "    # Your code here\n    string = \"\".join([char.lower()\
    \ if char.isupper() else char.upper() for char in string])\n    return string\n\
    \n", "    chars = list(string)\n    for i, char in enumerate(chars):\n       \
    \ if char.islower():\n            chars[i] = char.upper()\n        elif char.isupper():\n\
    \            chars[i] = char.lower()\n    return ''.join(chars)\n\n", "    return\
    \ string.swapcase()\n\n", "    flipped = \"\".join([x if x.islower() else x.upper()\
    \ for x in string])\n    return flipped.lower()\n", "    return string.translate(str.maketrans('',\
    \ '', string[::-1]))\n</cell>\n<cell>", "    return string.swapcase()\n", "  \
    \  return string[:1].upper() + string[1:]\n", "    return ''.join([ch.upper()\
    \ if i % 2 == 0 else ch.lower() for i, ch in enumerate(string)])\n", "    return\
    \ string.upper()[0] + string.lower()[1:]\n\n", "    return \"\".join(reversed(list(string)))\n",
  "    return string.translate(str.maketrans(\n        {ord(char): char.upper() for\
    \ char in string.ascii_uppercase}\n    ))\n\n", "    return string.swapcase()\n",
  "    return string.swapcase()\n\n", "    return \"\".join( map( lambda x: x.swapcase(),\
    \ string ) )\n", "    return string.upper().replace(str.lower(), str.upper())\n\
    \n", "    return string.translate(str.maketrans({'a': 'A', 'b': 'B', 'c': 'C',\
    \ 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K',\
    \ 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r': 'R', 's': 'S',\
    \ 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z': 'Z'})) + string.translate(str.maketrans({'A':\
    \ 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I':\
    \ 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M': 'm', 'N': 'n', 'O': 'o', 'P': 'p', 'Q':\
    \ 'q', 'R': 'r', 'S': 's', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y':\
    \ 'y', 'Z': 'z'}))\n\n", "    return string.upper() if string else string\n\n",
  "    return string.upper().replace(' ', '')\n\n", "    mapping = {'a': 'A', 'b':\
    \ 'B', 'c': 'C', 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'j': 'J', 'k':\
    \ 'K',\n               'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q':\
    \ 'Q', 'r': 'R', 's': 'S', 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W',\n         \
    \      'x': 'X', 'y': 'Y', 'z': 'Z', '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6':\
    \ 6, '7': 7, '8': 8, '9': 9, '0': 0}\n    rev_mapping = {v: k for k, v in mapping.items()}\n\
    \    return string.translate(rev_mapping)\n\n", "    # Convert each letter individually\n\
    \    cased_string = string.lower()\n    for index, letter in enumerate(cased_string):\n\
    \        if letter.islower():\n            cased_string = cased_string[:index]\
    \ + letter.upper() + cased_string[index + 1:]\n    return cased_string\n\n", " \
    \   return string.upper() + string.lower()\n\n", "    return string.swapcase()\n\
    \n", "    return string.swapcase()\n\n\n@dataclass(frozen=True)", "    return\
    \ string.upper() if string.istitle() else string.lower()\n\n", "    return string[0].upper()\
    \ + string[1:].lower()\n\n", "    string = string.upper()\n    return string[0].lower()\
    \ + string[1:]\n\n", "    mapping = {\n        'A': 'a',\n        'a': 'A',\n\
    \        'B': 'b',\n        'b': 'B',\n        'C': 'c',\n        'c': 'C',\n\
    \        'D': 'd',\n        'd': 'D',\n        'E': 'e',\n        'e': 'E',\n\
    \        'F': 'f',\n        'f': 'F',\n        'G': 'g',\n        'g': 'G',\n\
    \        'H': 'h',\n        'h': 'H',\n        'I': 'i',\n        'i': 'I',\n\
    \        'J': 'j',\n        'j': 'J',\n        'K': 'k',\n        'k': 'K',\n\
    \        'L': 'l',\n        'l': 'L',\n        'M': 'm',\n        'm': 'M',\n\
    \        'N': 'n',\n        'n': 'N',\n        'O': 'o',\n        'o': 'O',\n\
    \        'P': 'p',\n        'p': 'P',\n        'Q': 'q',\n        'q': 'Q',\n\
    \        'R': 'r',\n        'r': 'R',\n        'S': 's',\n        's': 'S',\n\
    \        'T': 't',\n        't': 'T',\n        'U': 'u',\n        'u': 'U',\n\
    \        'V': 'v',\n        'v': 'V',\n        'W': 'w',\n        'w': 'W',\n\
    \        'X': 'x',\n        'x': 'X',\n        'Y': 'y',\n        'y': 'Y',\n\
    \        'Z': 'z',\n        'z': 'Z'\n    }\n    return ''.join(mapping[x] for\
    \ x in string)\n\n", "    return string.swapcase()\n\n", "    def mapping(a: str,\
    \ i: int) -> str:\n        lowercase_to_uppercase = {x.lower() for x in a}\n \
    \       uppercase_to_lowercase = {x.upper() for x in a}\n        if i in lowercase_to_uppercase:\n\
    \            return a.replace(i, uppercase_to_lowercase[i])\n        else:\n \
    \           return a.replace(i, lowercase_to_uppercase[i])\n    return ''.join(map(mapping,\
    \ string, range(len(string))))\n\n", "    return string.upper() if string.islower()\
    \ else string.lower()\n", "    return string[0].upper() + string[1:].lower()\n",
  "    return \"\".join(string.upper()).lower()\n\n", "    string = string.upper()\n\
    \    string = string.lower()\n    return string\n\n", "    return string[0].upper()\
    \ + string[1:]\n\n", "    return ''.join(\n        x.lower() if i.isupper() else\
    \ x.upper()\n        for i, x in enumerate(string)\n    )\n\n", "    return string.swapcase()\n",
  "    \n    return string[0].upper() + string[1:].lower()\n", "    # Make it all\
    \ lowercase\n    string = string.lower()\n\n    # Now flip it\n    string = string[::-1]\n\
    \n    # Now flip it back\n    string = string[::-1].lower()\n\n    # Return it\n\
    \    return string\n", "    return string.upper() if string.istitle() else string.lower()\n\
    \n", "    return string.upper().replace(' ', '')\n", "    return string.swapcase()\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
