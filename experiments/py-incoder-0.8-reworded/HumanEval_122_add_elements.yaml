name: HumanEval_122_add_elements
language: py
prompt: "from typing import List\n\ndef add_elements(arr: List[int], k: int) -> int:\n\
  \    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n\
  \    the sum of the elements with at most two digits from the first k elements of\
  \ arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
  \ 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1\
  \ <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88,\
  \ 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
  \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef\
  \ test_check():\n    check(add_elements)\n\ntest_check()\n"
completions: ["    digitSums = [0] * 10\n    for num in arr:\n        digitSums[num\
    \ % 10] += num // 10\n    for idx in range(k):\n        digitSums[digitSums[idx]]\
    \ += 1\n    return sum(digitSums)\n\nprint(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4))\n</code>\n<|/ a |>\n<| c |>\nThis is very close to what I had\
    \ in mind but I was wondering how to do it using just one line. I appreciate your\
    \ input though!\n<|/ c |>\n<| c |>\nNo problem!\n<|/ c |>\n<| c |>\nHi again :)\
    \ This works great for the problem that I'm solving, but it doesn't work for the\
    \ problem that I am working on. I'll post the exact question and the problem that\
    \ I'm working on right now.\n<|/ c |>\n<| c |>\nHi again! I added the problem\
    \ that I'm working on and updated the original question with the code that I wrote.\n\
    <|/ c |>\n<| c |>\nHey I added the code that I wrote to the original question\
    \ but still have no luck\n<|/ c |>\n<| a dscore=0 |>\nIf you can get away with\
    \ using some library functions then you can make use of the map function and reduce:\n\
    <code>\nfrom functools import reduce\nfrom operator import add\n", "    # Write\
    \ your code here.\n    count = 0\n    for n in arr:\n        n = str(n)\n    \
    \    if len(n) <= k:\n            count += int(n)\n        else:\n           \
    \ count += int(n[:k])\n    return count\n\nadd_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 2)\n</cell>\n<text>\n12. Given an integer, write a function to\
    \ determine if it is a power of two.\n\n</text>\n<cell>", "    sum_arr = 0\n \
    \   sum_arr_2 = 0\n    for i in range(len(arr)-k+1):\n        sum_arr = sum_arr\
    \ + arr[i:i+k]\n        sum_arr_2 = sum_arr_2 + arr[i]\n    return sum_arr + sum_arr_2\n\
    </cell>\n<cell>", "    # O(m * k) algorithm\n    m = len(arr)\n    sum = 0\n \
    \   two_digit_index = len(arr) - k\n    for i in range(two_digit_index - 1, m\
    \ - 2, -1):\n        if arr[i] % 10 + arr[i + 1] % 10 == arr[i + 2] % 10:\n  \
    \          sum += 1\n    return sum\n", "    # todo implement here\n\n    return\
    \ 0\n</cell>\n<cell>", "    res = arr[0]\n    for val in arr[1:]:\n        res\
    \ += k - val // (10 ** (len(arr) - 1))\n    return res\n</cell>\n<cell>", "  \
    \  if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return\
    \ arr[0]\n    ans = sum(arr[k - i - 1] for i in xrange(min(k, len(arr))))\n  \
    \  return ans if len(ans) <= 1 else ans - 10\n</cell>\n<cell>", "    result =\
    \ arr[0]\n    for num in arr[1:]:\n        result += num // 10\n        result\
    \ %= 10\n        if result >= k:\n            return arr[0] + k\n    return result\n\
    \n", "    if not arr or not k:\n        return 0\n    result = arr[0] + arr[1]\n\
    \n    arr_len = len(arr)\n    for index in range(2, arr_len):\n        if arr[index]\
    \ + arr[index - 1] == 2 * result:\n            result += arr[index]\n        else:\n\
    \            break\n    else:\n        return result\n\n    # Find the first index\
    \ k+1 such that arr[k] + arr[k-1] == 2 * result\n    k_idx = 0\n    prev_result\
    \ = 0\n    while k_idx < arr_len - 1 and arr[k_idx] + arr[k_idx - 1] == 2 * result:\n\
    \        if arr[k_idx] + arr[k_idx - 1] > prev_result:\n            break\n  \
    \      prev_result = arr[k_idx] + arr[k_idx - 1]\n        k_idx += 1\n\n    return\
    \ result + arr[k_idx]\n\n", "    # Fill this in.\n    # ...\n    return sum\n\n",
  "    sum = 0\n    for elem in arr[:k]:\n        if elem % 10 < 6:\n            sum\
    \ += elem\n    return sum\n", "    arr = sorted(arr)\n    res = arr[k-1] + arr[k]\n\
    \    for i in range(len(arr)-k+1):\n        res += arr[i+k]\n    return res\n",
  "    # Add up all the elements including k\n    sum = 0\n    for num in arr[:k]:\n\
    \        sum += num\n\n    # Add up all the elements from k onwards\n    sum +=\
    \ sum(arr[x + k + 1 :] for x in range(k))\n\n    # Return the sum\n    return\
    \ sum\n", "    # write your code here\n    res = 0\n    i = k\n    while i  <\
    \ len(arr):\n        if i >= len(arr):\n            break\n        elif arr[i]\
    \ > 9:\n            i += 1\n        else:\n            arr[i] += res\n       \
    \     res += arr[i]\n            i += 1\n    return res\n\n", "    sum_arr = 0\n\
    \    for i in range(len(arr)):\n        sum_arr += arr[i]\n        if k >= sum_arr:\n\
    \            return k\n    return sum_arr\n\n", "    answer = 0\n    for num in\
    \ arr[:k]:\n        answer += num // 10\n        answer += (num % 10) + num //\
    \ 10\n    return answer\n\n", "    # write your code here\n    if k > len(arr):\n\
    \        return 0\n    elif k <= 0:\n        return 0\n    sum = 0\n    for i\
    \ in range(len(arr) - k):\n        sum += arr[i + k]\n    return sum\n\n", " \
    \   return sum(arr[:k])\n\n", "    sum = 0\n    for i in range(k):\n        sum\
    \ += arr[i]\n\n    return sum\n\n", "    sum = 0\n    for el in arr[:k]:\n   \
    \     sum += el % 10\n    return sum\n\n", "    # write your code in Python 3.6\n\
    \    return sum([x for x in arr[:k] if len(str(x)) <= 2])\n</cell>\n<text>\nProblem\
    \ 3\nA triangle is a right angle triangle with equal sides length and height.\n\
    For example, given the height of a triangle T = 3, and its side lengths L1 = 2,\
    \ L2 = 4, and L3 = 3, the following values are possible:\n\nT 1 2 3\nT 1 2 4\n\
    T 1 3 4\nT 2 3 4\nT 2 4 3\n\nWrite a function that takes in two integers, L1 and\
    \ L2, and returns True if a triangle can be built with the height given by L1\
    \ and the side lengths given by L2 and L3. Otherwise, return the height given\
    \ by L3, and the side lengths given by L1 and L2.\n\nExample\nFor L1 = 2, L2 =\
    \ 4, and L3 = 3, the output should be\n\nis_triangle(2, 4, 3)\nTrue\n\nFor L1\
    \ = 4, L2 = 4, and L3 = 2, the output should be\n\nis_triangle(4, 4, 2)\nFalse\n\
    \nFor L1 = 2, L2 = 5, and L3 = 5, the output should be\n\nis_triangle(2, 5, 5)\n\
    True\n\nFor L1 = 5, L2 = 5, and L3 = 5, the output should be\n\nis_triangle(5,\
    \ 5, 5)\nTrue\n\nFor L1 = 10, L2 = 10, L3 = 5, the output should be\n\nis_triangle(10,\
    \ 10, 5)\nTrue\n\n</text>\n<cell>", "    arr.sort()\n    res = arr[0]\n    for\
    \ i in range(1, len(arr)):\n        digit1 = int(str(arr[i])[0])\n        if digit1\
    \ + k <= len(str(arr[i])):\n            res += int(str(arr[i])[digit1 + k])\n\
    \    return res\n", "    # Your code here\n    ans = 0\n    for i in range(len(arr)):\n\
    \        ans += arr[i]\n        if ans % 10 == 0 and len(arr) - i >= 2:\n    \
    \        ans -= arr[i + k]\n            ans += arr[i]\n    return ans\n\n", " \
    \   # Your code here\n    return sum(arr[:k])\n\nadd_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n</cell>\n<cell>", "    if k > len(arr):\n        return\
    \ 0\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n        sum +=\
    \ arr[i]\n        sum += arr[i]\n        sum += arr[i]\n        sum += arr[i]\n\
    \        sum += arr[i]\n        sum += arr[i]\n        sum += arr[i]\n       \
    \ sum += arr[i]\n        sum += arr[i]\n        sum += arr[i]\n    return sum\n",
  "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n\n    return sum\n",
  "    # Write your code here.\n    \n    return sum(sum(arr[:k], arr[k+1:])//2)\n\
    \n", "    # BEGIN Question 2\n    if len(arr) == 0 or len(arr) < k:\n        return\
    \ 0\n    sum = 0\n    digits = arr[0:k]\n    for num in digits:\n        sum +=\
    \ int(num)\n    return sum\n\n    # END Question 2\n", "    sum_arr = [0] * len(arr)\n\
    \    for i in range(k):\n        sum_arr[i%len(sum_arr)] += arr[i]\n    return\
    \ sum(sum_arr)\n\n", "    return sum(arr[:k])\n\n", "    answer = 0\n    for i\
    \ in range(k, len(arr)):\n        answer += arr[i] - 2*(arr[i-k] - arr[i])\n \
    \   return answer\n", "    arr.sort()\n    count = 0\n    for i, j in zip(arr[:k],\
    \ arr[k:]): \n        count += j - i\n    return count\n", "    # Your code here\n\
    \    sum = 0\n    i = k\n    while i < len(arr):\n        if arr[i] % 10 == 0\
    \ and arr[i] % 100 != 0:\n            sum += arr[i]\n            i += 2\n    \
    \    else:\n            i += 1\n    return sum\n", "    sum = 0\n    if len(arr)\
    \ == 0:\n        return sum\n    if len(arr) < k:\n        return sum\n    if\
    \ len(arr) == k:\n        return sum(arr[arr.index(i)] for i in arr[:k])\n   \
    \ \n    arr.sort()\n    \n    arr.insert(k - 1, sum(arr[:k]))\n    \n    arr.insert(k\
    \ - 1, sum(arr[:k]))\n    \n    for i in arr:\n        if sum(i) > 9:\n      \
    \      sum += i // 10\n        else:\n            sum += i\n    return sum\n</cell>\n\
    <cell>", "    sum = 0\n\n    # Using a while loop to iterate through the array.\n\
    \    for i in arr[0:k]:\n        # Add the digital sum of i to the sum\n     \
    \   sum += i\n\n        # Add the digital sum of i to the sum if it has a greater\
    \ digit.\n        if sum > 9:\n            sum += int(str(sum)[1])\n\n    return\
    \ sum\n\n\n\"\"\"", "    # Write your code here.\n    length = len(arr)\n    return\
    \ sum([arr[j] for j in range(0, length) if int(str(arr[j])[0]) <= k])\n", "  \
    \  # Your code here\n    sum = 0\n    for x in arr[:k]:\n        if x%10 < 2:\n\
    \            sum += x\n    return sum\n", "    return sum([sum([a*b for a,b in\
    \ zip(a[:i], a[i:]+[a])]) for i in map(int, str(arr))[:k]])\n\n", "    # O(n^2)\n\
    \    answer = 0\n    for i in arr[:k]:\n        answer += i\n    return answer\n",
  "    sum_ = 0\n    for x in arr[:k]:\n        sum_ += x\n    return sum_\n\n", " \
    \   # Your code here\n    return sum(int(i) for i in arr[:k]) + (arr[0] * (k -\
    \ 1))\n\n", "    # Time limit exceeded\n    if k > len(arr):\n        return 0\n\
    \n    sum_arr = 0\n    # Find the first k elements with at most two digits\n \
    \   for i in range(k):\n        for j in range(len(arr) - i, k - i + 1):\n   \
    \         sum_arr += arr[j]\n    return sum_arr\n", "    # Initialize sum\n  \
    \  sum = 0\n    sum_temp = 0\n    sum_temp += arr[0]\n    # Add first k elements\n\
    \    for idx in range(1, k):\n        sum += arr[idx]\n    # Add element at position\
    \ k-1\n    sum += arr[k]\n    # Add remaining elements\n    for idx in range(k\
    \ + 1, len(arr)):\n        sum_temp += arr[idx]\n        sum += arr[idx] // 10\
    \ * (sum_temp % 10)\n        sum_temp = (sum_temp // 10 + 1) * (sum_temp % 10)\n\
    \    return sum\n\n", "    # Your code here\n    arr.sort()\n    carry = 0\n \
    \   s = 0\n    for i in range(len(arr)):\n        while carry+arr[i] >= 10:\n\
    \            s += carry + arr[i] // 10\n            carry %= 10\n            i\
    \ += 1\n        s += carry+arr[i]\n        carry %= 10\n    return s\n", "   \
    \ sum = 0\n    for e in arr[:k]:\n        if int(e) > 9:\n            sum += (10\
    \ - int(e))\n        else:\n            sum += int(e)\n    return sum\n", "  \
    \  return sum(arr[i: i + k] for i in range(0, len(arr), k))\n\n", "    return\
    \ sum([arr[i] for i in range(k) if i < len(arr) and arr[i] % 10 == 0])\n\n", " \
    \   result = arr[0] + arr[1]\n    if k > len(arr) - 2:\n        return int(result)\n\
    \    \n    sums_left = [0] * len(arr)\n    sums_right = [0] * len(arr)\n    for\
    \ i in range(2, k + 1):\n        sums_left[i - 2] += arr[i]\n        sums_right[i\
    \ - 2] += arr[i-2]\n        \n    sums_left[k] = 0\n    sums_right[k] = 0\n  \
    \  \n    for i in range(3, k):\n        sums_left[i] += arr[i]\n        sums_right[i]\
    \ += arr[i-1]\n    \n    return int(result + sums_left + sums_right)\n</cell>\n\
    <cell>\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n</cell>\n<cell>",
  "    sol = 0\n    arr1 = arr[0:k]\n    arr2 = arr[k+1:len(arr)]\n    arr2 = list(filter(lambda\
    \ x: len(str(x)) == 1, arr2))\n    arr1 = list(filter(lambda x: len(str(x)) ==\
    \ 2, arr1))\n\n    for i in range(len(arr1)):\n        if arr1[i] + arr2[i] >\
    \ 9:\n            sol += arr1[i] + arr2[i]\n        else:\n            sol +=\
    \ arr1[i] * 10 + arr2[i]\n\n    return sol\n", "    ans = 0\n    for i in range(len(arr)):\n\
    \        ans += arr[i] // 10 + arr[i] % 10\n        ans += arr[i] // 100 + arr[i]\
    \ % 100\n        ans += arr[i] // 1000 + arr[i] % 1000\n        if i >= k-1:\n\
    \            break\n    return ans\n\n", "    # YOUR CODE HERE\n    arr.sort(reverse=True)\n\
    \    sum=0\n    i=0\n    for j in range(k):\n        while i<len(arr) and arr[i]+j<100:\n\
    \            sum+=arr[i]+j\n            i+=1\n    return sum\n\nadd_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n</cell>\n<text>\nLet's do a few more tests\
    \ with different test cases:\n\n</text>\n<cell>", "    return sum((arr[i] for\
    \ i in arr[:k]))\n", "    len_arr = len(arr)\n    if k > len_arr:\n        return\
    \ 0\n    digit = arr[k]\n    sum_digit = digit + digit\n    temp_arr = [digit\
    \ + digit for _ in range(k)]\n    for index in range(len_arr):\n        temp_arr[index]\
    \ = temp_arr[index] + arr[index]\n        if (temp_arr[index] == temp_arr[index\
    \ + 1]):\n            sum_digit += temp_arr[index]\n    sum_digit = sum_digit\
    \ % 10\n    return sum_digit + temp_arr[0]\n", "    # your code here\n    sum\
    \ = 0\n    for i in range(len(arr) - k):\n        sum += arr[i]\n        if sum\
    \ % 10 == 0:\n            sum += 1\n    return sum\n", "    def helper(arr: List[int],\
    \ k: int) -> int:\n        if k == 0:\n            return sum(arr)\n\n       \
    \ left = sorted(arr)[:k]\n        right = sorted(arr)[k:]\n        return helper(left,\
    \ k-1) + helper(right, k-1)\n    \n    return helper(arr, k)\n", "    # Your code\
    \ here\n    sum = 0\n    i = k\n    while i >= 1:\n        if arr[i] % 2 == 0:\n\
    \            sum += arr[i]\n        else:\n            sum -= arr[i]\n       \
    \ i -= 1\n    return sum\n</cell>\n<cell>", "    sum = 0\n    for idx in range(1,\
    \ len(arr) + 1):\n        if (idx < k) and (arr[idx - 1] < arr[idx]):\n      \
    \      sum += arr[idx - 1]\n    return sum\n\n", "    # O(k)\n    \n    # init\
    \ sum with first k values\n    sum_arr = 0\n    \n    # add first k values to\
    \ sum\n    for i in range(k):\n        sum_arr += arr[i]\n    \n    # start loop\
    \ for finding elements with 2 digits difference from first k values\n    for i\
    \ in range(k, len(arr)):\n        \n        # if sum has more than 2 digits add\
    \ next value from arr to sum\n        if sum_arr + arr[i] > 100:\n           \
    \ \n            # add remaining values from arr to sum\n            sum_arr +=\
    \ arr[i] - 100\n            \n            # start loop for finding elements with\
    \ 2 digits difference from next k values\n            for j in range(i, len(arr)):\n\
    \                sum_arr += arr[j]\n                \n            # add remaining\
    \ values from arr to sum\n            sum_arr += arr[i] - 100\n            \n\
    \        # otherwise add next value from arr to sum\n        else:\n         \
    \   sum_arr += arr[i]\n            \n    return sum_arr\n", "    i, j = 0, 0\n\
    \    s = sum((int(n) for n in arr[:k]))\n    while i < k:\n        if int(arr[i])\
    \ > 9:\n            s += int(arr[i]) - 10\n            i += 1\n        else:\n\
    \            s += int(arr[i])\n            i += 1\n    return s\n", "    arr =\
    \ sorted(arr[:k])\n    total = 0\n    for num in arr:\n        total += num\n\
    \        if len(str(total)) > 2:\n            break\n    return total\n", "  \
    \  return sum(arr[k + i] - arr[i] for i in range(k))\n\n", "    total = 0\n  \
    \  for val in arr:\n        if val < 100:\n            total += val\n        else:\n\
    \            total += val - 100\n            if total > k:\n                break\n\
    \    return total\n\n</cell>\n<text>\nLet's see some results:\n\n\n</text>\n<cell>\n\
    add_elements([11, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n</cell>\n<cell>\nadd_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 3)\n</cell>\n<cell>\nadd_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 6)\n</cell>\n<text>\nSo we can see that the result 24\
    \ is the result you expected.\n\n\n</text>\n<text>\nQuestion 2\nBased on the above,\
    \ find the sum of all possible numbers whose digits in the array are:\n\n[7, 2,\
    \ 0, -4, -3, -2, -1]\n\n</text>\n<text>\nSolution\nLet's first implement the function\
    \ num_sums(num_arr) that will generate the number of different sums of a given\
    \ array (including the empty array).\n\nHint: The recursive version of this problem\
    \ is num_sums_rec(num_arr) which has the same call signature but uses recursion.\n\
    \n\n</text>\n<cell>", "    sum_ = 0\n    for i in range(k, len(arr)):\n      \
    \  sum_ += arr[i] - arr[i-k]\n\n    return sum_ % 10\n", "    # write your code\
    \ here\n    arr2 = arr[:k]\n    arr2 = sorted(arr2)\n    sum = 0\n    for ele\
    \ in arr2:\n        if ele % 2 != 0:\n            sum += ele\n    return sum\n\
    \n</cell>\n<text>\n4. Subsequences\nA subsequence is a sequence of values that\
    \ includes a given value/element.\n\nFor eaxmple:\n\nLet arr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]\nLet k = 3\nThen\n\nA = [1, 2, 3, 4]\nB = [5, 6, 7]\nC = [8, 9]\n\
    \n</text>\n<cell>\nfrom typing import List\n", "    return sum(map(lambda x: x\
    \ % 10 + int(x) // 10 % 10, arr[:k]))\n\n", "    if k == 0:\n        return 0\n\
    \    if k == 1:\n        return arr[0]\n    length = len(arr)\n    sum = 0\n \
    \   if k >= length:\n        return sum(arr[:k])\n    ans = arr[0]\n    for idx\
    \ in range(1, k):\n        ans += arr[idx]\n    return ans\n</cell>\n<cell>\n\
    %timeit add_elements(arr, 4)\n</cell>\n<cell>\nfrom fractions import Fraction",
  "    # Your code here\n    return sum(arr[max(i, k - 2): k] for i in arr[:k])\n\n",
  "    carry = 0\n    for x in arr[:k]:\n        carry += x\n        carry += carry\n\
    \    return carry % 10\n\n", "    sum = 0\n    i = k\n    while i <= len(arr):\n\
    \        if arr[i] % 10 == 0:\n            sum += arr[i]\n        i += 1\n   \
    \ return sum\n\n", "    return sum(arr[:k]) + sum(arr[k:])\n", "    if k > len(arr):\n\
    \        return 0\n\n    ans = 0\n    arr = sorted(arr)\n    for i in range(k,\
    \ len(arr)):\n        ans += arr[i-k]\n    return ans\n</cell>\n<cell>", "   \
    \ k = max(k, 2)\n    res = arr[0] + arr[1]\n    for _ in range(2, k):\n      \
    \  res += arr[_]\n    return res\n", "    # Add arr[0] and arr[k - 1] and return\
    \ the sum of the rest\n    return arr[0] + arr[k-1] + add_elements(arr[1:k], k-1)\n\
    \n", "    return sum(arr[:k]) + sum(arr[k:])\n", "    sum = 0\n    pos = 0\n \
    \   arr_size = arr.__len__()\n    while pos < arr_size:\n        if arr[pos] >=\
    \ 10 ** (k - 1):\n            sum += arr[pos]\n            pos += 1\n        else:\n\
    \            pos += 1\n    return sum\n\n", "    result = arr[k - 1] + arr[k]\n\
    \    if result < 10:\n        return result \n    else:\n        return add_elements(arr,\
    \ k - 2)\n", "    # Your code here\n    sum = 0\n    for num in arr:\n       \
    \ if num < 10:\n            sum += num\n        else:\n            sum += num\
    \ // 10 + num % 10\n    return sum\n\n\nadd_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4)\n</cell>\n<text>\n4. Using the Sieve of Eratosthenes\nThe Sieve\
    \ of Eratosthenes (Wikipedia) is a well-known algorithm for finding all the prime\
    \ numbers. In fact, all modern languages support it.\n\nThe basic idea of the\
    \ Sieve of Eratosthenes is that we keep only those numbers which are multiples\
    \ of other primes, for instance 3, 5, 7, 11, 13, etc. \nFor instance, to find\
    \ the prime numbers less than a given number n, we only need to check up to the\
    \ square root of n (the floor of the square root is the only factor we consider\
    \ in this case).\n\nThe Sieve of Eratosthenes works as follows:\n\n1) Let S[i]\
    \ be an array of Boolean values, initially all set to False.\n2) Let P[i] be the\
    \ prime number we are considering, initially 2.\n3) While S[i] is False do:\n\
    \    a) For each number j where S[j] was False do:\n        i) Set S[j] = True\n\
    \           Set P[j] = i\n        b) If P[j] is equal to n or greater then:\n\
    \           Set S[j] = False\n4) Print P[n]\n\n\n</text>\n<cell>", "    # Add\
    \ sum to 0\n    s = 0\n    for i in range(k):\n        s += arr[i]\n\n    # Divide\
    \ sum by k\n    k = k % len(arr)\n\n    # Add k to every element\n    for i in\
    \ range(k):\n        s += arr[i]\n\n    return s\n", "    res: List[int] = []\n\
    \    for v in arr[:k]:\n        res.append(v + arr[k - v])\n    return sum(res)\n",
  "    if k == 0:\n        return 0\n    elif k == 1:\n        return arr[0]\n   \
    \ elif len(arr) < k:\n        raise IndexError(\"k must be < len(arr)\")\n   \
    \ else:\n        # k <= len(arr)\n        if len(arr) == k:\n            return\
    \ arr[0]\n        \n        result = 0\n        for i in range(k - 1):\n     \
    \       result += arr[i]\n        \n        result += arr[k]\n        \n     \
    \   return result\n    ", "    arr.sort(reverse=True)\n    sum = 0\n    for val\
    \ in arr[:k]:\n        sum += val\n    return sum\n\n", "    sum_arr = 0\n   \
    \ for i in range(k):\n        sum_arr += arr[i]\n    for i in range(len(arr),\
    \ 0, -1):\n        if sum_arr - arr[i] > 9:\n            sum_arr -= arr[i]\n \
    \       else:\n            sum_arr += arr[i]\n    return sum_arr\n\n", "    return\
    \ sum(arr[:k]) + sum(arr[k:])\n", "    sum = 0\n    length = len(arr)\n    i =\
    \ 0\n\n    while i < length:\n        if i % k == 0:\n            sum += arr[i]\n\
    \        i += 1\n\n    return sum\n", "    return sum(sorted(arr[1: k + 1])[:\
    \ 2])\n\n", "    sum = 0\n    for i in arr[:k]:\n        sum += i\n    return\
    \ sum\n</cell>\n<cell>", "    sum: int = 0\n    length = len(arr)\n    if k >=\
    \ length:\n        return sum\n    elif k <= 0:\n        return sum + arr[k]\n\
    \n    sum_from_first = 0\n    for i in range(length - k):\n        sum_from_first\
    \ += arr[i + k]\n    return sum + sum_from_first\n", "    \n    # Your code here\n\
    \    \n    return sum([arr[-i-1] for i in list(range(0, k))]) if len(arr) > k\
    \ else sum(arr)\n\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n</cell>\n\
    <text>\nSubmission\nMake sure you submit this notebook before due date. Once you\
    \ submit, simply press the \"Submit Assignment\" button in the lower right corner\
    \ of this notebook.\n\nWhen 95% of your team has submitted a solution, they will\
    \ receive an extra $2^{rd}/$3^{rd}$ bonus point for that team member. On the other\
    \ hand, no team member will receive more than one $2^{th}$ if they submit a solution.\
    \ Thus, we recommend that you submit your solutions prior to the due date.\n\n\
    To submit your solutions, visit the following pages:\n\nFront Page - \nDocumentation\n\
    Solution Notebook - \n\n\n</text>\n<text>\n\n\n</text>\n<text>\nPart 2: Debugging\n\
    \n</text>\n<text>\nPhilosophy\nDebugging is a critical aspect of software development.\
    \ By using print() and other output statements to track program progress, you\
    \ help you to discover and fix bugs. When you write a program, you write a program\
    \ in a form that other people can read and use without understanding the code.\
    \ Debugging is an integral part of the process of developing a program. You must\
    \ be prepared for debugging before you ship your code to production.\n\n\n</text>\n\
    <text>\nTypes of Debugging\nErrors and Exceptions\nSyntax Errors\nRuntime Errors\n\
    Debugging Techniques\n\n\n</text>\n<text>\nErrors and Exceptions\nAn error or\
    \ exception may occur anytime a program is unable to perform its intended function.\
    \ Usually, this includes errors caused by input data that does not conform with\
    \ the type of data expected (integer, string, etc.) or a program logic error.\n\
    \nErrors are typically indicated by a unique identifier (such as syntax errors\
    \ and out-of-bounds array indices) and include a description of the problem that\
    \ occured. They are typically indicated in the form of an \"error message\" or\
    \ \"error text\" that describes the error in more detail.\n\nExceptions are used\
    \ to indicate that an error occurred outside of any specific piece of code (like\
    \ syntax errors and array out of bounds errors). Some types of exceptions include\
    \ invalid inputs (e.g., a negative number), division by zero, and index errors\
    \ (e.g., accessing an array element that does not exist). In these cases, an exception\
    \ usually indicates a programming logic error, usually by giving the programmer\
    \ a reason for the error.\n\n\n</text>\n<text>\nSyntax Errors\nSyntax errors are\
    \ indicated when the code doesn't conform to certain syntax rule", "    answer\
    \ = 0\n\n    for index in range(k):\n        answer += arr[index]\n\n    return\
    \ answer\n</cell>\n<cell>\nassert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\n12. Given an integer, arr, return True if its\
    \ digits are in non-decreasing order.\n\nExample 1:\n\nInput: arr = [9,9,87]\n\
    Output: True\n\nExample 2:\n\nInput: arr = [99,99,99]\nOutput: False\n\n</text>\n\
    <cell>", "    # Your code here\n    s = 0\n    for i in range(k):\n        s +=\
    \ arr[i]\n    return s\n", "    sum = 0\n    for j in range(k):\n        sum +=\
    \ arr[j]\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe second one\
    \ is definitely slower than the first. On the other hand, it is easier to understand\
    \ and follow. Can you explain how does the second one work?\n<|/ c |>\n<| c |>\n\
    , you are correct. The second is slower than the first one. I have reworked the\
    \ solution as well based on your feedback. Thanks.\n<|/ c |>\n<| a |>\nWe can\
    \ use list comprehension, filter and lambda. List comprehension generates a list\
    \ from the input list. Filter removes any items from the list that don't satisfy\
    \ the criteria specified. We then use lambda to apply a function to each element\
    \ in the list, in this case, sum the items.\n<code>", "    from functools import\
    \ reduce\n    k = min(k, len(arr))\n    return reduce(lambda x, y: x + arr[y]\
    \ if y < k else x, range(k), 0)\n", "    def recursion(arr, k):\n        if k\
    \ == 0:\n            return arr[0]\n\n        left = k - 1\n        right = k\n\
    \        sum = 0\n\n        while left < right:\n            sum = sum + arr[left]\
    \ + arr[right]\n            left += 1\n            right -= 1\n\n        return\
    \ sum\n\n    return recursion(arr, k)\n", "    arr_len = len(arr)\n    cur_sum\
    \ = 0\n    for idx, val in enumerate(arr):\n        if idx < k:\n            cur_sum\
    \ += val\n        else:\n            cur_sum += val + cur_sum // 10\n        \
    \    cur_sum = cur_sum % 10\n    return cur_sum\n", "    arr1, arr2 = arr[:k],\
    \ arr[k:]\n    s = 0\n    for c in arr1 + arr2:\n        s += c\n    return s\n",
  "    # Add one to arr to handle k when len(arr) == 1\n    if len(arr) == 1:\n  \
    \      arr.append(1)\n        k += 1\n    return sum(arr[:k]) + sum(arr[k:])\n\
    \n", "    sum = 0\n    for i in range(k - 1):\n        sum += arr[i]\n    return\
    \ sum\n", "    n = len(arr)\n    if n <= 2:\n        return arr\n\n    if k >\
    \ n:\n        k = n - 1\n\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n\n    for\
    \ index in range(1, k + 1):\n        sum1 += arr[index - 1]\n        sum2 += arr[index\
    \ - 2]\n        sum3 += arr[index - 3]\n\n    if sum1 > sum2:\n        sum3 =\
    \ sum1 - sum2\n    else:\n        sum3 = sum2 - sum1\n\n    return sum3\n", " \
    \   arr = sorted(arr)\n    return sum([arr[i] for i in range(k) if arr[i] <= 9])\n\
    \n", "    if k < 1 or k > len(arr):\n        return 0\n\n    total = 0\n    for\
    \ i in range(k):\n        total += arr[i]\n    return total\n\n", "    return\
    \ sum(arr[i] for i in\n               range(min(k, len(arr)), len(arr)))\n", " \
    \   sum = 0\n\n    for elem in arr[:k]:\n        sum += elem\n\n    return sum\n\
    </cell>\n<text>\nNext problem: Find the sum of the first k positive integers that\
    \ satisfy the equation a^2 + b^2 = c^2 where a,b,c are integers. You may not use\
    \ the % and ** operators. Here are some examples:\n\nInput: a = 3, b = 2, c =\
    \ 6\nOutput: 25\nExplanation: The sum of the first three positive integers whose\
    \ product\n    is the integer c is 3 + 3 + 6 = 15.\n\nInput: a = 4, b = 2, c =\
    \ 3\nOutput: 23\nExplanation: The sum of the first four positive integers whose\
    \ product\n    is the integer c is 4 + 4 + 3 = 9.\n\nInput: a = 2, b = 2, c =\
    \ 3\nOutput: 9\n\n</text>\n<cell>\nfrom typing import List\n", "    # Write your\
    \ code here.\n    \n    arr=sorted(arr)\n    return sum(arr[k:2*k])\n", "    sum\
    \ = 0\n    for idx, num in enumerate(arr):\n        if idx >= k:\n           \
    \ break\n        sum += num // 10\n        sum += num % 10\n\n    return sum\n\
    \n", "    # Your code here\n    sum = 0\n    arr_length = len(arr)\n    for i\
    \ in range(k):\n        sum += arr[i]\n        sum += arr[i]\n    return sum\n",
  "    result = sum(arr[:k])\n    return result + sum(arr[k:])\n", "    # add element\
    \ to array\n    # calculate sum using formula from question\n    return sum(arr[:k])\n\
    </code>\n<|/ a tags=python |>\n<| a tags=python |>\n<code>", "    i = 0\n    while\
    \ i + 1 < len(arr):\n        j = i + 2\n        if arr[i] > arr[j]:\n        \
    \    break\n        i += 2\n    return sum(arr[i:k])\n\n", "    sum = 0\n    for\
    \ index in range(k):\n        sum += arr[index]\n    return sum\n\n", "    arr\
    \ = sorted(arr)\n    sums = 0\n    sum_digit = 0\n    sum_digit_k = 0\n    for\
    \ i in range(len(arr)):\n        sum_digit = sum_digit + arr[i]\n        sum_digit_k\
    \ = sum_digit_k + arr[i] - arr[i-k-1]\n        if sum_digit_k > 9:\n         \
    \   sums = sums + sum_digit_k - 9\n            sum_digit_k = 9\n    \n    return\
    \ sums\n", "    sum = 0\n    for ele in arr[:k]:\n        sum += ele\n    return\
    \ sum\n\n", "    sum = 0\n    k = max(2, k)\n\n    for idx in range(k):\n    \
    \    sum += arr[idx]\n\n    return sum\n", "    # BEGIN Question 3\n    if len(arr)\
    \ < k:\n        return 0\n    sum = 0\n    # BEGIN Question 3\n    for i in range(k):\n\
    \        sum += arr[i]\n    return sum\n    # END Question 3\n", "    sum = 0\n\
    \    for idx in range(k): # use only the first k elements\n        sum += arr[idx]\n\
    \n    return sum\n\n", "    sum = 0\n    for i in arr[:k]:\n        if i % 10\
    \ == 0: sum += i\n    return sum\n", "    s = sum(arr[:k])\n    for el in arr[k:]:\n\
    \        s += el\n        if s >= 1000000000:\n            break\n    return s\n",
  "    answer = 0\n    sum_of_first_k = 0\n\n    for index in range(k):\n        sum_of_first_k\
    \ += arr[index]\n\n    for index in range(k, len(arr)):\n        answer += sum_of_first_k\
    \ - arr[index]\n        sum_of_first_k -= arr[index]\n\n    return answer\n",
  "    sum_ = 0\n    for i in range(k):\n        sum_ += arr[i]\n    for i in range(k,\
    \ len(arr)):\n        sum_ += arr[i] - 9*arr[i-1]\n    return sum_\n", "    return\
    \ sum(sorted(arr[k:k+2])[-2:])\n\n", "    arr = sorted(arr)\n    total = 0\n \
    \   i = 0\n    while i < k:\n        if arr[i] > 9:\n            total += 10\n\
    \            i += 1\n        else:\n            total += arr[i]\n            i\
    \ += 1\n    return total\n", "    ans = 0\n    for i in arr:\n        if i < k:\n\
    \            continue\n        if i%10 == 0:\n            ans += i\n        else:\n\
    \            ans += i-k\n    return ans\n\n", "    s = arr[0]\n    for x in arr:\n\
    \        if x > s:\n            s += k\n        else:\n            s += x\n  \
    \  return s\n", "    s = 0\n    for i in range(k):\n        s += arr[i]\n    s\
    \ += 1\n    return s\n\nadd_elements(arr=[111, 21, 3, 4000, 5, 6, 7, 8, 9], k=4)\n\
    </cell>\n<text>\nNotice how similar this problem is to one in which we were given\
    \ the first five elements of arr and the number k, and asked to find the sum of\
    \ the elements with the first k digits. Now imagine that this is implemented by\
    \ finding which elements of arr have the top k digits (starting from the end),\
    \ and then, for each element, the sum of the first k digits starting from that\
    \ element. Since there are only a small number of elements in the array, the runtime\
    \ complexity of this algorithm is $\\mathcal{O}(kn)$.\n\n\n</text>\n<text>\nProblem\
    \ 15\nLet arr be an array of positive integers.\n\nWrite a program to find the\
    \ sum of all odd numbers in arr. For example, given arr = [5, 7, 11, 13, 17],\
    \ return 17.\n\nHINT: You can use slicing to solve this problem.\n\n\n</text>\n\
    <cell>\nfrom typing import List\n", "    \n    return sum([i for i in arr if len(str(i))<k])\n\
    \n", "    sum = 0\n    # Find first k elements that are divisible by k\n    for\
    \ i in range(k):\n        if arr[i] % k == 0:\n            break\n    # Find the\
    \ sum of all elements with at most two digits\n    for i in range(k, len(arr)):\n\
    \        sum += arr[i-k]\n    return sum\n", "    sum = 0\n    k = len(arr)\n\
    \    sum -= arr[0]\n    sum = sum * (10 ** k - 10 ** -k + 1) + arr[k]\n    return\
    \ sum\n\n", "    # Solution 1: Straightforward O(n) solution\n    # Solution 2:\
    \ Extremely naive O(n^2) solution\n    # Solution 3: Best O(n) solution with time\
    \ complexity O(n log n)\n    # Solution 4: Optimization using prefix sums\n\n\
    \    if len(arr) < 2:\n        return 0\n\n    sum_pre = 0\n    digits_pre = set()\n\
    \n    # Step 1: Add all digits in the arr\n    for i in range(k):\n        sum_pre\
    \ = sum_pre + arr[i]\n        digits_pre.add(arr[i])\n\n    # Step 2: Add all\
    \ digits not in arr\n    for i in range(k, len(arr)):\n        if arr[i] not in\
    \ digits_pre:\n            sum_pre = sum_pre + arr[i]\n            digits_pre.add(arr[i])\n\
    \n    # Step 3: Add all digits not in arr in reverse order\n    for i in range(len(arr)\
    \ - k):\n        if arr[i] not in digits_pre:\n            sum_pre = sum_pre +\
    \ arr[i]\n            digits_pre.add(arr[i])\n\n    return sum_pre\n", "    #\
    \ Your code here\n    # raise NotImplementedError\n    if len(arr) <= 1:\n   \
    \     return arr\n    if len(arr) < k:\n        return arr\n    sum = 0\n    for\
    \ x in range(1, k):\n        sum = sum + arr[x - 1]\n    sum = sum + arr[k]\n\
    \    return sum\n\n", "    if k >= len(arr):\n        return sum(arr[:k])\n\n\
    \    total = 0\n    carry = 0\n\n    for i in range(k):\n        total += arr[i]\
    \ * 10 + carry\n        carry = total // 10\n\n    return total + carry if carry\
    \ else total\n\n", "    # Your code here\n    # arr = [int(x) for x in arr]\n\
    \    # return sum([int(x) for x in arr[:k]])\n    arr = [int(x) for x in arr]\n\
    \    k = min(k, len(arr))\n    return sum([int(x) for x in arr[:k]])\n", "   \
    \ sum = 0\n    for _ in range(k):\n        sum += arr[random.randint(0, len(arr)\
    \ - 1)]\n    return sum\n\n", "    if k >= len(arr):\n        return 0\n\n   \
    \ total = 0\n    elements = arr[k:]\n    if len(elements) > 0:\n        for e\
    \ in elements:\n            total += e % 10\n        total += elements[0] % 10\n\
    \    return total + arr[0] + arr[1] + arr[2] + arr[3]\n", "    from collections\
    \ import deque\n\n    stack = deque(maxlen=k)\n    ans = 0\n\n    while stack:\n\
    \        elem = stack.popleft()\n        ans += elem\n        if elem % 10 ==\
    \ 0:\n            stack.append(elem // 10)\n        else:\n            stack.append(elem)\n\
    \n    return ans\n\n", "    if not arr or not k:\n        return 0\n\n    arr.sort()\n\
    \n    count = 0\n    sum_count = 0\n\n    for i in range(k - 1, -1, -1):\n   \
    \     if arr[i] % 10 == 0:\n            count += 1\n            sum_count += count\n\
    \            count = 0\n\n    if count > 0:\n        sum_count += count\n\n  \
    \  return sum_count\n\n", "    # Your code here\n    sum = 0\n    for n in range(1,\
    \ k + 1):\n        if arr[n] % 10 == 0:\n            sum += arr[n]\n    return\
    \ sum\n\n", "    sum_ = 0\n    pos = 0\n\n    while pos < len(arr) - k:\n    \
    \    sum_ += arr[pos]\n        pos += 1\n\n    while pos > 0:\n        sum_ -=\
    \ arr[pos - 1]\n        pos -= 1\n\n    return sum_\n\n", "    if not arr or k\
    \ > len(arr):\n        return 0\n\n    two_digits = 0\n    pos = 0\n    while\
    \ pos < k and arr[pos] < 100:\n        two_digits += arr[pos]\n        pos +=\
    \ 1\n\n    pos = 0\n    while pos < k and arr[pos] >= 100:\n        two_digits\
    \ += arr[pos] * 10\n        pos += 1\n\n    return two_digits\n\n", "    def helper(arr:\
    \ List[int], k: int) -> int:\n        ans = 0\n        l = len(arr)\n        if\
    \ k < l and arr[k] < 11:\n            ans += arr[k]\n        elif k >= l and arr[k]\
    \ % 10 >= 5:\n            ans += arr[k]\n        else:\n            for i in range(k,\
    \ l - 1):\n                if arr[i] < 11:\n                    ans += arr[i]\n\
    \                    break\n                else:\n                    ans +=\
    \ arr[i] + arr[k] - 10*(k-i)\n                    break\n        return ans\n\n\
    \    return helper(arr, k)\n</cell>\n<cell>", "    sum = 0\n    i = 0\n    while\
    \ i < len(arr) and sum < k and arr[i] < 10:\n        sum += arr[i]\n        i\
    \ += 1\n    return sum + arr[i] if i < len(arr) else sum\n", "    s = 0\n    l\
    \ = len(arr)\n    for _ in range(k):\n        if l <= 2:\n            s += arr[0]\n\
    \            break\n        s += arr.pop(0)\n        l -= 1\n    return s\n",
  "    # Brute-force solution\n    ans = 0\n    for x in range(len(arr)):\n      \
    \  if x >= k:\n            ans += arr[x] - arr[k-1]\n        else:\n         \
    \   ans += arr[x]\n\n    return ans\n\n", "    def helper(arr: List[int], k: int)\
    \ -> int:\n        if k > len(arr):\n            return 0\n        if k == 1:\n\
    \            return arr[0] + arr[1]\n        return helper(arr[k-1:2], k-2) +\
    \ arr[k]\n    return helper(arr, k)\n\n\n\"\"\"", "    # O(n + klogn)\n    n =\
    \ len(arr)\n    sum_so_far = 0\n    sum_of_two_digits = 0\n\n    for i in range(n\
    \ - k):\n        sum_of_two_digits += arr[i]\n\n        if sum_of_two_digits >\
    \ 9:\n            sum_of_two_digits -= 10\n            sum_so_far += sum_of_two_digits\n\
    \n    return sum_so_far + sum_of_two_digits\n\n", "    # Your code here\n    return\
    \ sum(arr[i: i+2] for i in range(0, len(arr), 2))\n", "    import math\n\n   \
    \ def helper(arr: List[int], k: int) -> int:\n        n = len(arr)\n        result\
    \ = 0\n        for i in range(k):\n            result = result + arr[i]\n    \
    \    ans = math.factorial(n)//(math.factorial(i)*math.factorial(k-n+1))\n    \
    \    return result + ans\n    return helper(arr, k)\n", "    if len(arr) == 0:\n\
    \        return 0\n    sum_arr = 0\n    sum_arr += arr[0]\n    sum_arr += arr[1]\n\
    \    sum_arr += arr[2]\n    for i in range(3, len(arr), 1):\n        sum_arr +=\
    \ arr[i]\n        sum_arr += arr[i-1]\n        if sum_arr >= k:\n            sum_arr\
    \ -= arr[i-2]\n            sum_arr -= arr[i-1]\n            sum_arr -= arr[i-2]\n\
    \    sum_arr += arr[len(arr)-1]\n    return sum_arr\n", "    \n    # your code\
    \ here\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # set first k\
    \ elements to 0, as we need only two digits in first k elements\n    for num in\
    \ arr[:k]:\n        sum += num\n    \n    # iterate through the remaining elements\
    \ and add them up\n    for num in arr[k:]:\n        sum += num\n    \n    # return\
    \ the sum\n    return sum\n", "    # M1. \u8D2A\u5FC3\u6A21\u5F0F\n    arr = list(arr)\n\
    \    ans = arr[0] + arr[1]\n    for i in range(2, len(arr)):\n        ans += arr[i]\n\
    \        if ans >= k:\n            break\n    return ans\n", "    result = arr[k\
    \ - 1] + arr[k - 2]\n    i = k - 1\n    while i > 0 and arr[i] % 10 > 0 and arr[i]\
    \ % 10 < 10:\n        i -= 1\n    if i == 0:\n        result += arr[i]\n    return\
    \ result\n\n", "    s = 0\n    k = min(len(arr), k)\n    for i in arr[:k]:\n \
    \       s += i\n    return s\n", "    return sum([sum([arr[i-k] for i in range(k+1)]),\
    \ sum(arr)])\n\n", "    res: int = 0\n    res2: int = 0\n\n    for i in range(k):\n\
    \        res += arr[i]\n\n    for i in range(len(arr) - k):\n        res2 += arr[i\
    \ + k]\n\n    return res + res2\n", "    if not arr:\n        return 0\n    \n\
    \    if k >= len(arr) or len(arr) < 2:\n        return arr[0]\n\n    k = k - k%len(arr)\n\
    \n    if k % 2 == 1:\n        arr[0], arr[1] = arr[1], arr[0]\n\n    sum = 0\n\
    \n    for i, v in enumerate(arr):\n        if i >= k and i > 0:\n            sum\
    \ += v\n\n    return sum\n", "    ans = 0\n    sum = 0\n\n    # sum two digits\
    \ from first k numbers\n    for n in arr[:k]:\n        sum += n\n\n    # add remaining\
    \ numbers\n    for n in arr[k+1:]:\n        ans += n\n\n    return ans\n", " \
    \   # write your code here\n    return sum(sum(int(element) for element in arr[i:\
    \ i+k]) for i in range(min(k, len(arr))))\n\nadd_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4)\n</cell>\n<text>\nSubmission\nPlease name your submission with\
    \ the following naming convention: submission_[your name].ipynb, where [your name]\
    \ is your GitHub username.\n\nIf you're not submitting for multiple teams, please\
    \ set the second cell below to 0\n\n\n</text>\n<cell>", "    # Initialize sum\n\
    \    sum = 0\n    # Initialize counter\n    counter = 0\n\n    # Check for empty\
    \ array\n    if len(arr) == 0:\n        return 0\n\n    # Check for k value greater\
    \ than or equal to length of array\n    if k > len(arr):\n        return 0\n\n\
    \    # Initialize max and min values\n    max_val = 0\n    min_val = 100000\n\n\
    \    # Keep on adding elements while adding them does not exceed\n    # k and\
    \ if they are less than k add them with k digit\n    while (counter < k) and (counter\
    \ <= len(arr)):\n        # Add element with current number of digits to sum\n\
    \        sum += arr[counter]\n        # Update min value\n        if arr[counter]\
    \ > max_val:\n            max_val = arr[counter]\n        # Update max value\n\
    \        if arr[counter] < min_val:\n            min_val = arr[counter]\n    \
    \    # Increment counter\n        counter += 1\n\n    # If the sum is less than\
    \ k add k digit\n    if sum < k:\n        sum += k - sum\n    # Else return sum\n\
    \    return sum\n", "    if k >= len(arr):\n        return 0\n\n    digits_to_sum:\
    \ List[int] = [arr[0]]\n    sum: int = 0\n    for i in arr[1:]:\n        sum +=\
    \ int(digits_to_sum[-1])\n        sum += i\n        digits_to_sum.append(i)\n\n\
    \    return sum % 10\n\n", "    # Method 1:\n    # Using a dictionary to store\
    \ and check duplicates\n    # O(nlogn)\n    dict_arr = dict(arr[:k])\n    for\
    \ element in arr[k:]:\n        if element not in dict_arr:\n            dict_arr[element]\
    \ = 0\n        dict_arr[element] += 1\n    sum = 0\n    for key in dict_arr:\n\
    \        sum += dict_arr[key]\n    return sum\n", "    s = sum(arr[:k])\n    s\
    \ += sum(map(int, str(arr[k])))\n    return s\n\n", "    if k >= len(arr):\n \
    \       return 0\n    else:\n        res = arr[0] + arr[-1]\n        for i in\
    \ range(2, k + 1):\n            res += arr[i]\n        return res\n    \n", " \
    \   # Your code here\n    sum = 0\n    count = 0\n    for i in arr:\n        if\
    \ count >= k-1:\n            sum += i\n            count = 0\n        else:\n\
    \            count += 1\n    return sum\n", "    sum_ = sum(arr[:k])\n    return\
    \ sum_ if arr[k] > sum_ else arr[k]\n", "    \n    sum = 0\n    if len(arr)-k+1\
    \ > len(arr):\n        return 0\n    for num in arr:\n        if num // 10 <=\
    \ k:\n            sum += num\n        else:\n            sum -= num\n    return\
    \ sum\n", "    return sum([arr[i] for i in arr[:k]])\n\n", "    sum_elements =\
    \ 0\n    for _ in range(k):\n        sum_elements += arr[sum_elements]\n     \
    \   sum_elements += arr[sum_elements]\n    return sum_elements\n", "    from functools\
    \ import reduce\n    return reduce(lambda x, y: x + y, [arr[i] for i in sorted(set(range(1,\
    \ len(arr)) - k))])\n", "    # Your code here\n    return sum(arr[:k])\n", " \
    \   sum = 0\n    for index in range(len(arr) - k):\n        sum += arr[index]\n\
    \    return sum\n", "    sum = 0\n    for idx in range(k-1, -1, -1):\n       \
    \ if idx < len(arr) and idx >= 1:\n            sum += arr[idx]\n    return sum\n",
  "    # Your code here\n    ans = arr[0]\n    i = 0\n    while i < k and arr[i] >\
    \ ans:\n        ans += arr[i]\n        i += 1\n    return ans\n\n", "    sum =\
    \ 0\n    k = k - 1\n    for idx in range(k):\n        sum += arr[idx]\n    return\
    \ sum\n\n", "    def recur(arr, i):\n        if i >= len(arr):\n            return\
    \ arr[i]\n        if k >= len(arr) - i:\n            return arr[i] + recur(arr,\
    \ i + 1)\n        if arr[i] > arr[i + k]:\n            return arr[i] + recur(arr,\
    \ i)\n        return arr[i] + recur(arr, i + 1)\n\n    return recur(arr, 0)\n",
  "    # Write your code here\n    sum = 0\n    i = 0\n    while i < k:\n        if\
    \ arr[i] <= 9:\n            sum += arr[i]\n        i += 1\n    return sum\n\n\
    print(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n</cell>\n<text>\nProblem\
    \ 18\nGiven an array of integers, swap every two adjacent elements so that each\
    \ two\nadjacent positions have the same value.\n\nTest case:\n\ninput array ->\
    \ [1,2,3]\noutput array -> [3,1,2]\n\n</text>\n<cell>\nfrom typing import List\n",
  "    sum = 0\n    left_index = 0\n    right_index = 0\n\n    while left_index <\
    \ len(arr) and right_index < len(arr):\n        if abs(arr[left_index] - arr[right_index])\
    \ <= k:\n            sum += arr[left_index]\n            left_index += 1\n   \
    \     else:\n            sum += arr[right_index]\n            right_index += 1\n\
    \n    return sum\n", "    sum = 0\n    for x in arr[:k]:\n        sum += x\n \
    \   return sum\n", "    # Your code here\n    if len(arr) < k:\n        return\
    \ 0\n    if len(arr) == k:\n        return arr[0]\n    if arr[0] < 10 and arr[0]\
    \ > 0 and arr[1] < 10 and arr[1] > 0:\n        return arr[0] + arr[1]\n    return\
    \ sum(arr[:k])\n", "    # Your code here\n    arr1 = arr[:k]\n    arr2 = arr[k:]\n\
    \    return sum(arr1) + sum(arr2)\n</cell>\n<cell>", "    # Add all the elements\
    \ up\n    sum_of_elements = arr[:k]\n    for num in arr[k:]:\n        sum_of_elements\
    \ += num\n\n    return sum_of_elements\n\n\n\"\"\"\nAC - Although my current solution\
    \ is slow, it is an acceptable solution \nfor a problem. The time complexity for\
    \ the function add_elements() is linear.\n\"\"\"", "    from collections import\
    \ defaultdict\n\n    arr = sorted(arr)\n\n    two_digit_digit_sums = defaultdict(int)\n\
    \n    for idx in range(2, len(arr)):\n        two_digit_digit_sums[idx] = two_digit_digit_sums[idx-2]\
    \ + arr[idx-k]\n\n    return two_digit_digit_sums[1]\n\n", "    # Your code here\n\
    \    if len(arr) == 0 or len(arr) > len(set(arr)):\n        return 0\n\n    sum\
    \ = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n\n", " \
    \   if k > len(arr):\n        return 0\n    else:\n        arr.remove(k)\n   \
    \     arr.remove(k)\n        return sum(arr)\n\n", "    # write your code here\n\
    \    sum = 0\n    for elt in arr[:k]:\n        sum += elt\n    return sum\n",
  "    len_arr = len(arr)\n    if len_arr < 2:\n        return 0\n    return arr[0]\
    \ + arr[k] + arr[k + 1] + arr[k + 2] + arr[k + 3] + arr[k + 4] + arr[k + 5]\n\n",
  "    return sum([arr[i] for i in arr[:k]])\n\n", "    n = len(arr)\n    if k ==\
    \ 0 or n == 0:\n        return 0\n    sum = 0\n    for idx in range(1, n):\n \
    \       if arr[idx] % 10 == 0 and arr[idx] % 100 != 0:\n            sum += arr[idx]\n\
    \    return sum\n", "    sum = 0\n    for i in range(k):\n        sum += arr[i]\n\
    \    return sum\n", "    # Your code here\n    len_arr = len(arr)\n    if len_arr\
    \ == 0 or k > len_arr:\n        return 0\n\n    left_sum = 0\n    right_sum =\
    \ 0\n    for elem in arr[:k]:\n        if elem > 9:\n            left_sum += elem\
    \ - 9\n        else:\n            left_sum += elem\n    for elem in arr[k + 1:]:\n\
    \        if elem > 9:\n            right_sum += elem - 9\n        else:\n    \
    \        right_sum += elem\n    return left_sum + right_sum\n\n", "    # Your\
    \ code here\n    sum_k = 0\n    for num in arr[:k]:\n        sum_k += num // 10\
    \ + num % 10\n\n    return sum_k\n</cell>\n<cell>", "    ans = 0\n    for i in\
    \ range(k):\n        ans += arr[i]\n    return ans\n", "    return sum(arr[i]\
    \ for i in itertools.islice(arr, k, None))\n", "    n = len(arr)\n    answer =\
    \ 0\n    for idx in range(n):\n        if idx+1 < n and idx >= k and arr[idx]+arr[idx+1]\
    \ <= k:\n            answer += arr[idx]\n            arr[idx] = 0\n        arr[idx]\
    \ += 1\n    return answer\n", "    ans = 0\n    i = 0\n    while i < k:\n    \
    \    ans += arr[i]\n        i += 1\n    return ans\n", "    ans = arr[0]\n   \
    \ for i in range(1, len(arr)):\n        cur_sum = arr[i] + ans\n        if cur_sum\
    \ > 9:\n            ans = cur_sum - 10\n        else:\n            ans = cur_sum\n\
    \n    return ans\n\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))\n\
    </cell>\n<text>\n(3) Merge two sorted linked lists\nDefinition for singly-linked\
    \ list.\n\n\n</text>\n<cell>", "    if not arr or not k or k > len(arr):\n   \
    \     return 0\n    sum = 0\n    carry = True\n    for i in range(k):\n      \
    \  if arr[i] + carry:\n            sum += arr[i] + carry\n            carry =\
    \ True\n        else:\n            sum += arr[i] + carry\n            carry =\
    \ 0\n    if carry:\n        sum += arr[k]\n    return sum\n", "    from functools\
    \ import reduce\n    return reduce(lambda acc, val: acc + arr[:min(len(arr), k)\
    \ + 1], arr, 0)\n", "    # Your code here\n    sum_ = 0\n    l = len(arr)\n  \
    \  # Iterate through each element of arr\n    for i in range(l):\n        if i-k\
    \ >= 0 and i-k < l:\n            sum_ += arr[i-k]\n\n    return sum_\n", "   \
    \ arr = [int(i) for i in arr]\n    digits = [arr[i] for i, c in enumerate(arr)\
    \ if c > 0]\n    two_digit_sum = 0\n\n    for i, v in enumerate(digits):\n   \
    \     if v > 2:\n            two_digit_sum += v - digits[i - 1] - 2\n\n    return\
    \ two_digit_sum + arr[k - 1]\n\n", "    # Write your code here.\n    count = 0\n\
    \    sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > sum:\n\
    \            sum = arr[i]\n        count += 1\n        if count >= k:\n      \
    \      break\n    return sum\n\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nprint(add_elements(arr,\
    \ 4))\n\n\"\"\"\nSPECS:\nTIME COMPLEXITY: O(n)\nSPACE COMPLEXITY: O(n)\n\"\"\"\
    \n</cell>\n<text>\n2. Sum Pairs\n\n</text>\n<cell>", "    from collections import\
    \ deque\n\n    if len(arr) < k:\n        return 0\n    # create a deque of size\
    \ k, with initial deque of size k\n    # but with the first k elements from arr\n\
    \    deq = deque(arr[:k])\n    curr_sum = 0\n    # this while loop will run until\
    \ deq is empty\n    # meaning all the elements with at most 2 digits from\n  \
    \  # arr will be added\n    while len(deq) > 0:\n        curr_sum += deq.pop()\n\
    \        # add the current sum to curr_sum\n        # only if the sum is less\
    \ than or equal to 1000\n        if curr_sum < 1000:\n            curr_sum +=\
    \ sum(deq)\n    return curr_sum\n", "    return sum([x % 10 + x // 10 for x in\
    \ arr[:k]])\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
