language: py
name: HumanEval_61_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 2 and all(bracket.endswith(')') for bracket in brackets)\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mbureob.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_mbureob.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_mbureob.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for index, value in enumerate(brackets):\n        if value == '(':\n\
    \            stack.append(value)\n        elif value == ')':\n            if not\
    \ stack:\n                return False\n            if stack.pop() != value:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zzr82_9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6zzr82_9.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6zzr82_9.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')' and stack.pop() != '(':\n            return False\n   \
    \ return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4xywlwp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpg4xywlwp.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg4xywlwp.py\"\
    , line 27, in check\n    assert candidate('((()())))') == False\n  File \"/tmp/tmpg4xywlwp.py\"\
    , line 18, in correct_bracketing\n    elif c == ')' and stack.pop() != '(':\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '(':\n                return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                last_item = stack.pop()\n        \
    \        if last_item != '(':\n                    return False\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    counts\
    \ = collections.Counter(brackets)\n    has_correct_bracketing = not all([value\
    \ == 0 for value in counts.values()])\n    return has_correct_bracketing\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprsdfdh9y.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprsdfdh9y.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprsdfdh9y.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmprsdfdh9y.py\"\
    , line 14, in correct_bracketing\n    counts = collections.Counter(brackets)\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                if stack.pop() != ')':\n\
    \                    return False\n            else:\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6631jaz5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6631jaz5.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6631jaz5.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[Tuple[bool, str, str]]\n    for c in brackets:\n        if\
    \ c == \"(\":\n            stack.append((False, \"(\", \"\"))\n        elif c\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                (_, s, res) = stack.pop()\n               \
    \ if not s:\n                    return False\n                else:\n       \
    \             stack.append((True, res, \"\"))\n        else:\n            stack[-1][-1]\
    \ += c\n\n    if len(stack) != 1:\n        return False\n\n    _, is_opening,\
    \ s = stack.pop()\n    return not is_opening\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovm66zb_.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpovm66zb_.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpovm66zb_.py\"\
    , line 39, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_open_brackets\
    \ = 0\n    for c in brackets:\n        if c == '(':\n            num_open_brackets\
    \ += 1\n        elif c == ')':\n            if not num_open_brackets:\n      \
    \          return False\n            num_open_brackets -= 1\n        else:\n \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5x9h9of_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5x9h9of_.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5x9h9of_.py\"\
    , line 34, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {'(':')', '[':']', '{':'}'}\n    brackets_set = set(brackets)\n    return\
    \ not (len(brackets_dict) - len(brackets_set))\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngkcx2_i.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpngkcx2_i.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpngkcx2_i.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '()':\n        return True\n    if brackets == '[]':\n        return True\n\
    \    if brackets == '{}':\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ez_ksnm.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2ez_ksnm.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2ez_ksnm.py\"\
    , line 25, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        return False\n\n    stack = []\n    for c in\
    \ brackets:\n        if c == '(':\n            if stack:\n                return\
    \ False\n            stack.append(c)\n        elif c == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            open_bracket = stack.pop()\n\
    \            if open_bracket != '(':\n                return False\n        else:\n\
    \            return False\n\n    if stack:\n        return False\n\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8kbz6t2.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpt8kbz6t2.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpt8kbz6t2.py\"\
    , line 40, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == ')':\n        return True\n    if brackets == '(' or brackets == ')(' or\
    \ brackets == '((' or brackets == ')(' or brackets == '(' or brackets == '):)':\n\
    \        return False\n    \ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp145hgbup.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp145hgbup.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp145hgbup.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \"()\":\n        return True\n    if brackets == '()':\n        return True\n\
    \    if brackets == '[]':\n        return True\n    if brackets == '{}':\n   \
    \     return True\n    if brackets == '<>':\n        return True\n    if brackets\
    \ == '<>=':\n        return True\n    if brackets == '===':\n        return True\n\
    \    if brackets == '==':\n        return True\n    if brackets == '!=':\n   \
    \     return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxbzid63.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpzxbzid63.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzxbzid63.py\"\
    , line 37, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque([-1])\n    opening = set(brackets)\n    for index, symbol\
    \ in enumerate(brackets):\n        if symbol in opening:\n            stack.append(index)\n\
    \        if symbol == '(':\n            opening.remove(symbol)\n            if\
    \ len(stack) == 1:\n                return False\n            else:\n        \
    \        top = stack.pop()\n                if top - 1 == index:\n           \
    \         return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0990fcp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpz0990fcp.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz0990fcp.py\"\
    , line 31, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpz0990fcp.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque([-1])\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque()\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if not\
    \ stack:\n                return False\n            opening = stack.popleft()\n\
    \            if opening != ')':\n                return False\n        else:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplf2wsk52.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplf2wsk52.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplf2wsk52.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmplf2wsk52.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque()\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    if len(brackets) <= 1:\n        return False\n    brackets_open\
    \ = brackets.count('(')\n    brackets_closed = brackets.count(')')\n    if brackets_open\
    \ != brackets_closed:\n        return False\n    return brackets_open >= 1\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijnncd_m.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpijnncd_m.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpijnncd_m.py\"\
    , line 30, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = [False] * len(brackets)\n    stack[0] = True\n    openings = 0\n    i = 0\n\
    \n    while i < len(brackets):\n        if brackets[i] == \")\":\n           \
    \ stack.pop()\n        elif brackets[i] == \"(\":\n            stack.append(False)\n\
    \            openings += 1\n        elif brackets[i] == \")\" and stack.pop():\n\
    \            openings -= 1\n        i += 1\n    return openings == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0b4oohw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpk0b4oohw.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk0b4oohw.py\"\
    , line 32, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in \"([{\":\n            stack.append(char)\n\
    \        elif char in \")]}\":\n            if not stack:\n                return\
    \ False\n            else:\n                top = stack.pop()\n              \
    \  if top != \")\":\n                    return False\n    return not stack\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw42b0uw5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpw42b0uw5.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw42b0uw5.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
