language: py
name: HumanEval_61_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 2 and all(bracket.endswith(')') for bracket in brackets)\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mbureob.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_mbureob.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_mbureob.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for index, value in enumerate(brackets):\n        if value == '(':\n\
    \            stack.append(value)\n        elif value == ')':\n            if not\
    \ stack:\n                return False\n            if stack.pop() != value:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zzr82_9.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6zzr82_9.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6zzr82_9.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')' and stack.pop() != '(':\n            return False\n   \
    \ return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4xywlwp.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpg4xywlwp.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg4xywlwp.py\"\
    , line 27, in check\n    assert candidate('((()())))') == False\n  File \"/tmp/tmpg4xywlwp.py\"\
    , line 18, in correct_bracketing\n    elif c == ')' and stack.pop() != '(':\n\
    IndexError: pop from empty list\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '(':\n                return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                last_item = stack.pop()\n        \
    \        if last_item != '(':\n                    return False\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    counts\
    \ = collections.Counter(brackets)\n    has_correct_bracketing = not all([value\
    \ == 0 for value in counts.values()])\n    return has_correct_bracketing\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprsdfdh9y.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprsdfdh9y.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprsdfdh9y.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmprsdfdh9y.py\"\
    , line 14, in correct_bracketing\n    counts = collections.Counter(brackets)\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        else:\n            if stack:\n                if stack.pop() != ')':\n\
    \                    return False\n            else:\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6631jaz5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6631jaz5.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6631jaz5.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[Tuple[bool, str, str]]\n    for c in brackets:\n        if\
    \ c == \"(\":\n            stack.append((False, \"(\", \"\"))\n        elif c\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                (_, s, res) = stack.pop()\n               \
    \ if not s:\n                    return False\n                else:\n       \
    \             stack.append((True, res, \"\"))\n        else:\n            stack[-1][-1]\
    \ += c\n\n    if len(stack) != 1:\n        return False\n\n    _, is_opening,\
    \ s = stack.pop()\n    return not is_opening\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpovm66zb_.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpovm66zb_.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpovm66zb_.py\"\
    , line 39, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_open_brackets\
    \ = 0\n    for c in brackets:\n        if c == '(':\n            num_open_brackets\
    \ += 1\n        elif c == ')':\n            if not num_open_brackets:\n      \
    \          return False\n            num_open_brackets -= 1\n        else:\n \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5x9h9of_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5x9h9of_.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5x9h9of_.py\"\
    , line 34, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {'(':')', '[':']', '{':'}'}\n    brackets_set = set(brackets)\n    return\
    \ not (len(brackets_dict) - len(brackets_set))\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngkcx2_i.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpngkcx2_i.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpngkcx2_i.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '()':\n        return True\n    if brackets == '[]':\n        return True\n\
    \    if brackets == '{}':\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ez_ksnm.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2ez_ksnm.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2ez_ksnm.py\"\
    , line 25, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        return False\n\n    stack = []\n    for c in\
    \ brackets:\n        if c == '(':\n            if stack:\n                return\
    \ False\n            stack.append(c)\n        elif c == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            open_bracket = stack.pop()\n\
    \            if open_bracket != '(':\n                return False\n        else:\n\
    \            return False\n\n    if stack:\n        return False\n\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8kbz6t2.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpt8kbz6t2.py\", line 53,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpt8kbz6t2.py\"\
    , line 40, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == ')':\n        return True\n    if brackets == '(' or brackets == ')(' or\
    \ brackets == '((' or brackets == ')(' or brackets == '(' or brackets == '):)':\n\
    \        return False\n    \ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp145hgbup.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp145hgbup.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp145hgbup.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \"()\":\n        return True\n    if brackets == '()':\n        return True\n\
    \    if brackets == '[]':\n        return True\n    if brackets == '{}':\n   \
    \     return True\n    if brackets == '<>':\n        return True\n    if brackets\
    \ == '<>=':\n        return True\n    if brackets == '===':\n        return True\n\
    \    if brackets == '==':\n        return True\n    if brackets == '!=':\n   \
    \     return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxbzid63.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpzxbzid63.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzxbzid63.py\"\
    , line 37, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque([-1])\n    opening = set(brackets)\n    for index, symbol\
    \ in enumerate(brackets):\n        if symbol in opening:\n            stack.append(index)\n\
    \        if symbol == '(':\n            opening.remove(symbol)\n            if\
    \ len(stack) == 1:\n                return False\n            else:\n        \
    \        top = stack.pop()\n                if top - 1 == index:\n           \
    \         return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0990fcp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpz0990fcp.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz0990fcp.py\"\
    , line 31, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpz0990fcp.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque([-1])\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque()\n    for char in brackets:\n        if char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if not\
    \ stack:\n                return False\n            opening = stack.popleft()\n\
    \            if opening != ')':\n                return False\n        else:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplf2wsk52.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmplf2wsk52.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplf2wsk52.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmplf2wsk52.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque()\nNameError:\
    \ name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    if len(brackets) <= 1:\n        return False\n    brackets_open\
    \ = brackets.count('(')\n    brackets_closed = brackets.count(')')\n    if brackets_open\
    \ != brackets_closed:\n        return False\n    return brackets_open >= 1\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijnncd_m.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpijnncd_m.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpijnncd_m.py\"\
    , line 30, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = [False] * len(brackets)\n    stack[0] = True\n    openings = 0\n    i = 0\n\
    \n    while i < len(brackets):\n        if brackets[i] == \")\":\n           \
    \ stack.pop()\n        elif brackets[i] == \"(\":\n            stack.append(False)\n\
    \            openings += 1\n        elif brackets[i] == \")\" and stack.pop():\n\
    \            openings -= 1\n        i += 1\n    return openings == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0b4oohw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpk0b4oohw.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk0b4oohw.py\"\
    , line 32, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in \"([{\":\n            stack.append(char)\n\
    \        elif char in \")]}\":\n            if not stack:\n                return\
    \ False\n            else:\n                top = stack.pop()\n              \
    \  if top != \")\":\n                    return False\n    return not stack\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw42b0uw5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpw42b0uw5.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpw42b0uw5.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    def\
    \ match(s: str, i: int) -> bool:\n        return s[i] == '(' and s[i-1] == ')'\
    \ or s[i] == '[' and s[i-1] == ']' or s[i] == '{' and s[i-1] == '}'\n    stack\
    \ = []\n    for c in brackets:\n        if c not in ')}]':\n            stack.append(c)\n\
    \        elif stack and (not match(stack[-1], len(brackets))):\n            return\
    \ False\n        elif not stack and c == '(':\n            stack.append(c)\n \
    \       else:\n            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubupd7md.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpubupd7md.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpubupd7md.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpubupd7md.py\"\
    , line 20, in correct_bracketing\n    elif stack and (not match(stack[-1], len(brackets))):\n\
    \  File \"/tmp/tmpubupd7md.py\", line 15, in match\n    return s[i] == '(' and\
    \ s[i-1] == ')' or s[i] == '[' and s[i-1] == ']' or s[i] == '{' and s[i-1] ==\
    \ '}'\nIndexError: string index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ any(c in brackets for c in ')')\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mh52fxm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_mh52fxm.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_mh52fxm.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # initialize\
    \ counts\n    num_opening = 0\n    num_closing = 0\n\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            num_opening += 1\n        elif bracket\
    \ == \")\":\n            num_closing += 1\n\n    if num_opening != num_closing:\n\
    \        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72go73sk.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp72go73sk.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp72go73sk.py\"\
    , line 36, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # handle\
    \ easy cases:\n    if brackets not in ['()', '[]', '{}']:\n        return False\n\
    \    # corner case:\n    elif brackets == '{}':\n        return True\n    # handle\
    \ cases with \"(\" not following another \")\":\n    # or \")\" not following\
    \ a \")\"\n    if brackets.count('(') != brackets.count(')'):\n        return\
    \ False\n    # handle cases with \"(\" not following a \")\":\n    elif brackets.count('(')\
    \ != brackets.count(')') and brackets.count('(') > 0:\n        return True\n \
    \   # handle cases with \"(\" following a \")\":\n    elif brackets.count('(')\
    \ == brackets.count(')') and brackets.count(')') > 0:\n        return False\n\
    \    # handle \"(\" not following another \")\"\n    elif brackets.count('(')\
    \ != brackets.count(')') and brackets.count('(') == 0:\n        return True\n\
    \    # everything is fine:\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj_tj88c.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpbj_tj88c.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbj_tj88c.py\"\
    , line 38, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if not stack:\n                return\
    \ False\n            if stack.pop() != char:\n                return False\n \
    \   return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk_g2izo.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphk_g2izo.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphk_g2izo.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace('(', '').replace(')', '')\n    open_brackets = ['(', ')']\n\
    \    closed_brackets = []\n    for bracket in brackets:\n        if bracket in\
    \ open_brackets:\n            closed_brackets.append(bracket)\n        elif bracket\
    \ not in closed_brackets:\n            return False\n    return len(closed_brackets)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupc23e_e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpupc23e_e.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpupc23e_e.py\"\
    , line 29, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return False\n    if len(brackets) < 2:\n        return True\n\
    \    counts = { '(': 0, '[': 0, '{': 0 }\n    for char in brackets:\n        if\
    \ char not in brackets:\n            counts[char] = 0\n        if char in brackets:\n\
    \            counts[char] += 1\n            counts[brackets[brackets.index(char)]]\
    \ -= 1\n    return counts['('] == 0 and counts['['] == 0 and counts['{'] == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy77ffx0x.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpy77ffx0x.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy77ffx0x.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpy77ffx0x.py\"\
    , line 23, in correct_bracketing\n    counts[char] += 1\nKeyError: ')'\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ != '()' and brackets != '[]' and brackets != '{}':\n        return False\n \
    \   stack = []\n    for c in brackets:\n        if c == '(':\n            if not\
    \ stack:\n                return False\n            if stack[-1] != '(':\n   \
    \             return False\n        elif c == ')':\n            if not stack:\n\
    \                return False\n            if stack[-1] != '(':\n            \
    \    return False\n            stack.pop()\n        elif c == '[':\n         \
    \   if not stack:\n                return False\n            if stack[-1] != '[':\n\
    \                return False\n        elif c == ']':\n            if not stack:\n\
    \                return False\n            if stack[-1] != '[':\n            \
    \    return False\n            stack.pop()\n        elif c == '{':\n         \
    \   if not stack:\n                return False\n            if stack[-1] != '{':\n\
    \                return False\n        elif c == '}':\n            if not stack:\n\
    \                return False\n            if stack[-1] != '{':\n            \
    \    return False\n            stack.pop()\n        elif c == ',':\n         \
    \   if not stack:\n                return False\n            if stack[-1] != ',':\n\
    \                return False\n        elif c == ' ':\n            if not stack:\n\
    \                return False\n            if stack[-1] != ' ':\n            \
    \    return False\n        else:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp980xdx83.py\", line\
    \ 83, in <module>\n    test_check()\n  File \"/tmp/tmp980xdx83.py\", line 81,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp980xdx83.py\"\
    , line 67, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\" and stack:\n            stack.pop()\n        else:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    brackets_count = 0\n    stack.append(brackets)\n    while stack:\n\
    \        brackets = stack.pop()\n        brackets_count -= 1\n        if brackets\
    \ == '(':\n            brackets_count += 1\n        if brackets == ')':\n    \
    \        brackets_count -= 1\n        if brackets_count == 0:\n            if\
    \ brackets == '(' or brackets == '[' or brackets == '{':\n                return\
    \ True\n            elif brackets == ')' or brackets == ']' or brackets == '}':\n\
    \                return False\n            else:\n                stack.append(brackets)\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzk7ua8xu.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpzk7ua8xu.py\", line 49,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzk7ua8xu.py\"\
    , line 35, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ (brackets.count('(') == brackets.count(')')\n            and brackets.count('(')\
    \ > brackets.count(')'))\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftudhpx_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpftudhpx_.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpftudhpx_.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = [0]\n    opens = [index for index, char in enumerate(brackets) if char ==\
    \ '(']\n    for index, char in enumerate(brackets):\n        if char == '(':\n\
    \            stack.append(index)\n        elif char == ')':\n            if not\
    \ stack:\n                return False\n            if index != stack.pop() -\
    \ 1:\n                return False\n    opens = [0] if opens == [] else opens\n\
    \    return len(set(opens)) == len(opens)\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpotv95z.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzpotv95z.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzpotv95z.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    pos = 0\n    for i in range(len(brackets)):\n        if brackets[i]\
    \ == '(':\n            stack.append(brackets[i])\n        elif brackets[i] ==\
    \ ')':\n            if not stack or stack.pop() != '(':\n                return\
    \ False\n        elif brackets[i] != stack[-1]:\n            return False\n  \
    \  return not stack\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = {'(': ')', '[': ']', '{': '}'}\n    return all(map(lambda x: brackets[x] ==\
    \ brackets[brackets[x]], brackets))\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7346ni0c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7346ni0c.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7346ni0c.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp7346ni0c.py\"\
    , line 15, in correct_bracketing\n    return all(map(lambda x: brackets[x] ==\
    \ brackets[brackets[x]], brackets))\n  File \"/tmp/tmp7346ni0c.py\", line 15,\
    \ in <lambda>\n    return all(map(lambda x: brackets[x] == brackets[brackets[x]],\
    \ brackets))\nKeyError: ')'\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            if not\
    \ stack:\n                return False\n            stack.append(char)\n     \
    \   elif char == \")\":\n            if not stack:\n                return False\n\
    \            else:\n                last_char = stack.pop()\n                if\
    \ last_char != \"(\":\n                    return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hig9eq4.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp5hig9eq4.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5hig9eq4.py\"\
    , line 31, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    stack = []\n    for char in brackets:\n        if char == '(':\n  \
    \          count += 1\n            stack.append(char)\n        elif char == ')':\n\
    \            if count > 0:\n                count -= 1\n                stack.pop()\n\
    \            else:\n                return False\n        elif char == '[' or\
    \ char == ']' or char == '{' or char == '}':\n            while len(stack) > 0\
    \ and stack[-1] != char:\n                stack.pop()\n            if len(stack)\
    \ > 0:\n                stack.pop()\n            else:\n                return\
    \ False\n        elif char == ')(':\n            if count == 0:\n            \
    \    return False\n            count -= 1\n            stack.pop()\n    if len(stack)\
    \ > 0:\n        return False\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate('()') == True\n    assert candidate('(()())') == True\n   \
    \ assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ (\n            len(brackets) == 1 and\n            brackets[0] in '()' and\n\
    \            brackets[len(brackets) - 1] in '()')\n\n</cell>\n<text>\nExercise\
    \ 2: Implement the function fix_bracketing. Be careful not to reuse variables\
    \ named brackets!\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplocy3keb.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ not len([c for c in brackets if c != ')']) % 2\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyjctnoe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphyjctnoe.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphyjctnoe.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # a\
    \ stack of closing brackets\n    stack = []\n    # a stack of brackets\n    in_brackets\
    \ = []\n    i = 0\n    while i < len(brackets):\n        if brackets[i] == '(':\n\
    \            # push the previous bracket\n            if stack:\n            \
    \    in_brackets.pop()\n            stack.append(brackets[i])\n        elif brackets[i]\
    \ == ')':\n            # if the stack is empty\n            if not stack:\n  \
    \              return False\n            else:\n                # pop the top\
    \ bracket from the stack\n                top = stack.pop()\n                #\
    \ if the top bracket is the same as the closing bracket\n                # then\
    \ we have a match\n                if top == brackets[i]:\n                  \
    \  in_brackets.pop()\n                else:\n                    # otherwise we\
    \ have a mis-match\n                    return False\n        elif brackets[i]\
    \ == '[':\n            # push a bracket\n            in_brackets.append(brackets[i])\n\
    \        elif brackets[i] == ']':\n            # if the stack is empty\n     \
    \       if not stack:\n                return False\n            else:\n     \
    \           # pop a bracket from the stack\n                top = stack.pop()\n\
    \                # if the top bracket is the same as the closing bracket\n   \
    \             # then we have a match\n                if top == brackets[i]:\n\
    \                    in_brackets.pop()\n                else:\n              \
    \      # otherwise we have a mis-match\n                    return False\n   \
    \     # otherwise push the current bracket\n        i += 1\n\n    # if nothing\
    \ remains in the stack\n    if not stack:\n        return True\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11z_prm9.py\", line\
    \ 82, in <module>\n    test_check()\n  File \"/tmp/tmp11z_prm9.py\", line 80,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp11z_prm9.py\"\
    , line 66, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for idx, char in enumerate(brackets):\n        if char == '(':\n \
    \           stack.append(idx)\n        if char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            if stack.pop() >= 0:\n    \
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xq1mz9l.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1xq1mz9l.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1xq1mz9l.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack:\
    \ Queue = deque()\n    for char in brackets:\n        if char == '(':\n      \
    \      stack.append(char)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.popleft()\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7yr2h5s.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpl7yr2h5s.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl7yr2h5s.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpl7yr2h5s.py\"\
    , line 14, in correct_bracketing\n    stack: Queue = deque()\nNameError: name\
    \ 'deque' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ (brackets[0] == brackets[1] and brackets in '()[]')\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0l22r03.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpx0l22r03.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpx0l22r03.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                if stack.pop() != '(':\n         \
    \           return False\n        else:\n            return False\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count(\"\
    (\") != brackets.count(\")\"):\n        return False\n    if brackets.count(\"\
    (\") != brackets.count(\")\"):\n        return False\n    for i in range(brackets.count(\"\
    (\")):\n        if brackets[i - 1] != \"(\":\n            return False\n     \
    \   if brackets[i + 1 : i + 2] != \"(\":\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjtoox9e.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphjtoox9e.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphjtoox9e.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # create\
    \ stack\n    stack = []\n    # create list of opened brackets\n    brackets_opened\
    \ = []\n    # scan brackets\n    for b in brackets:\n        if b == '(':\n  \
    \          stack.append(b)\n        elif b == ')':\n            if not stack:\n\
    \                return False\n            top = stack.pop()\n            if top\
    \ != b:\n                return False\n            brackets_opened.append(b)\n\
    \        else:\n            return False\n    # check that every opened bracket\
    \ has a corresponding closing bracket\n    if not brackets_opened:\n        return\
    \ True\n    for b in brackets_opened:\n        if not brackets_opened[b + 1:]:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ybkf8xi.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp8ybkf8xi.py\", line 55,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8ybkf8xi.py\"\
    , line 41, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opening_brackets\
    \ = 0\n    closing_brackets = 0\n    for c in brackets:\n        if c == \"(\"\
    :\n            opening_brackets += 1\n        else:\n            if c == \")\"\
    :\n                closing_brackets -= 1\n            else:\n                return\
    \ False\n    return opening_brackets == closing_brackets\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8lezpq4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpa8lezpq4.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpa8lezpq4.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ (\n        '(' not in brackets\n        and ')' not in brackets\n        and\
    \ ')(' not in brackets\n    )\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprm_otyqq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmprm_otyqq.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprm_otyqq.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_j0g4uz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo_j0g4uz.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpo_j0g4uz.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {'(':')', '[':']', '{':'}'}\n    for bracket, bracket_replacement in brackets_dict.items():\n\
    \        open_bracket = bracket\n        close_bracket = bracket\n        open_bracket_replacement\
    \ = bracket\n        close_bracket_replacement = bracket\n        if bracket not\
    \ in brackets:\n            return False\n        if brackets[bracket] == open_bracket:\n\
    \            open_bracket_replacement = open_bracket\n        if brackets[bracket]\
    \ == close_bracket:\n            close_bracket_replacement = close_bracket\n \
    \       if open_bracket_replacement == close_bracket_replacement:\n          \
    \  return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9zhe6ncs.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp9zhe6ncs.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9zhe6ncs.py\"\
    , line 32, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp9zhe6ncs.py\"\
    , line 22, in correct_bracketing\n    if brackets[bracket] == open_bracket:\n\
    TypeError: string indices must be integers\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_list\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    if brackets_list.count(\"\
    (\") != brackets_list.count(\")\"):\n        return False\n    if brackets_list[0]\
    \ == \"(\" and brackets_list[-1] == \")\":\n        return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeb2xdqfq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpeb2xdqfq.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpeb2xdqfq.py\"\
    , line 23, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpeb2xdqfq.py\"\
    , line 17, in correct_bracketing\n    if brackets_list[0] == \"(\" and brackets_list[-1]\
    \ == \")\":\nIndexError: string index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \")\":\n        return False\n    stack = []\n    for b in brackets:\n  \
    \      if b == \"(\":\n            stack.append(b)\n        elif b == \")\" and\
    \ stack:\n            if len(stack) == 1:\n                return False\n    \
    \        else:\n                stack.pop()\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoycsajxo.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpoycsajxo.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoycsajxo.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return False\n    if brackets[0] != brackets[-1]:\n        return\
    \ False\n    brackets = brackets[1:]\n    for c in brackets:\n        if c !=\
    \ '(':\n            return False\n    return True\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjy1446o.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgjy1446o.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgjy1446o.py\"\
    , line 25, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    for\
    \ char in brackets:\n        if char == '(':\n            level = 1\n        elif\
    \ char == ')':\n            level = 0\n        elif level > 0 and char != ')':\n\
    \            return False\n        level += 1\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc0e0tg3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwc0e0tg3.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwc0e0tg3.py\"\
    , line 29, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {')': '(', '(': '('}\n    stack = deque()\n    for char in brackets:\n   \
    \     if char in brackets_dict:\n            stack.append(char)\n        else:\n\
    \            top = stack.pop()\n            if top != brackets_dict[char]:\n \
    \               return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiryegckf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpiryegckf.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiryegckf.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpiryegckf.py\"\
    , line 15, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            elif stack.pop() != \"(\":\n                return\
    \ False\n    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[int]\n    brackets = {c for c in brackets}\n    for x in\
    \ brackets:\n        if x == '(':\n            stack.append(x)\n        elif x\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n        else:\n            if len(stack)\
    \ == 0:\n                return False\n            elif x != stack[-1]:\n    \
    \            return False\n            else:\n                stack.pop()\n  \
    \  return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpany1wyiq.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpany1wyiq.py\", line 49,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpany1wyiq.py\"\
    , line 39, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n    return\
    \ all(closing in brackets_dict.keys() for opening in brackets_dict.values())\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsw8qk0ef.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpsw8qk0ef.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsw8qk0ef.py\"\
    , line 23, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpsw8qk0ef.py\"\
    , line 19, in correct_bracketing\n    return all(closing in brackets_dict.keys()\
    \ for opening in brackets_dict.values())\n  File \"/tmp/tmpsw8qk0ef.py\", line\
    \ 19, in <genexpr>\n    return all(closing in brackets_dict.keys() for opening\
    \ in brackets_dict.values())\nNameError: name 'closing' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Your\
    \ code here\n    regex = '[(]'\n    \n    open_brackets = [s for s in brackets\
    \ if s in '([{']\n    close_brackets = [s for s in brackets if s in ')]}']\n \
    \   \n    i = 0\n    while i < len(brackets):\n        if brackets[i] == '(':\n\
    \            if i < len(brackets) - 1 and brackets[i + 1] == ')':\n          \
    \      if close_brackets:\n                    return True\n                else:\n\
    \                    return False\n            else:\n                if open_brackets:\n\
    \                    i += 1\n                else:\n                    return\
    \ False\n        elif brackets[i] == '{':\n            if i < len(brackets) -\
    \ 1 and brackets[i + 1] == '}':\n                if close_brackets:\n        \
    \            return True\n                else:\n                    return False\n\
    \            else:\n                if open_brackets:\n                    i +=\
    \ 1\n                else:\n                    return False\n        elif brackets[i]\
    \ == '[':\n            if i < len(brackets) - 1 and brackets[i + 1] == ']':\n\
    \                if close_brackets:\n                    return True\n       \
    \         else:\n                    return False\n            else:\n       \
    \         if open_brackets:\n                    i += 1\n                else:\n\
    \                    return False\n        i += 1\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaohd_pd.py\", line\
    \ 76, in <module>\n    test_check()\n  File \"/tmp/tmpkaohd_pd.py\", line 74,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkaohd_pd.py\"\
    , line 64, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in ')(':\n            if stack:\n\
    \                stack.pop()\n        elif char in '({':\n            stack.append(char)\n\
    \        elif stack:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3da3kih.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl3da3kih.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl3da3kih.py\"\
    , line 31, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opposite_brackets\
    \ = {\"'\": \")\", \"\\\"\": \")\", \"]\": \"[\", \"}\": \"{\", \"(\": \")\",\
    \ \"[\": \"]\", \"{\": \"}\", \"<\": \">\"}\n    stack = []\n    for char in brackets:\n\
    \        if char in \"[{\\()\":\n            stack.append(char)\n        elif\
    \ char in \"}\\]\":\n            if len(stack) < 1:\n                return False\n\
    \            else:\n                cur_bracket = stack.pop()\n              \
    \  if cur_bracket == opposite_brackets[char]:\n                    stack.append(cur_bracket)\n\
    \                else:\n                    return False\n        else:\n    \
    \        return False\n    if len(stack) < 1:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnoitrim.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpfnoitrim.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfnoitrim.py\"\
    , line 37, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == ')':\n        return True\n    count = 0\n    for char in brackets:\n   \
    \     if char == '(':\n            count += 1\n        else:\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlep9g1o.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpnlep9g1o.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnlep9g1o.py\"\
    , line 34, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = {'(', '[', '{', '(': ')', ']', '}', '[': ']', '{': '}'}\n    position = 0\n\
    \    for character in brackets:\n        if character in brackets:\n         \
    \   if brackets[character] != brackets[brackets[character]]:\n               \
    \ position += 1\n            else:\n                position = 0\n        else:\n\
    \            position = 0\n        if position == len(brackets) - 1:\n       \
    \     return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn5cluz4l.py\", line 14\n    brackets = {'(', '[', '{',\
    \ '(': ')', ']', '}', '[': ']', '{': '}'}\n                                  ^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    if len(stack) != 0:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = [brackets[0]]\n    for char in brackets[1:]:\n        if char == '(':\n  \
    \          if not stack:\n                return False\n        elif char == ')'\
    \ and stack[-1] == '(':\n            stack.pop()\n        elif char == '(':\n\
    \            stack.append(char)\n        elif char == ')':\n            if not\
    \ stack:\n                return False\n            stack.pop()\n    return not\
    \ stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugm3jgm5.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpugm3jgm5.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpugm3jgm5.py\"\
    , line 32, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    i =\
    \ 0\n    for c in brackets:\n        if c != brackets[i]:\n            return\
    \ False\n        i += 1\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdr0zubc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmprdr0zubc.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprdr0zubc.py\"\
    , line 27, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \"\":\n        return True\n\n    brackets_set = brackets.replace(\")\",\
    \ \"\")\n    brackets_set = brackets_set.replace(\"(\", \"\")\n    brackets_set\
    \ = brackets_set.replace(\")\", \"\")\n    brackets_set = brackets_set.replace(\"\
    (\", \"\")\n    brackets_set = brackets_set.strip()\n\n    if len(brackets_set)\
    \ == 0:\n        return True\n\n    if \"(\" not in brackets_set:\n        return\
    \ False\n\n    if brackets_set == \"()\":\n        return True\n    elif brackets_set\
    \ == \"[]\":\n        return True\n    elif brackets_set == \"{}\":\n        return\
    \ True\n\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1qqyjjp.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpb1qqyjjp.py\", line 54,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpb1qqyjjp.py\"\
    , line 44, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']',\
    \ '}']\n    for c in brackets:\n        if c in opening_brackets:\n          \
    \  if stack:\n                if not stack[-1] == closing_brackets[opening_brackets.index(c)]:\n\
    \                    return False\n            else:\n                stack.append(c)\n\
    \        elif c in closing_brackets:\n            if len(stack) == 0:\n      \
    \          return False\n            else:\n                stack.pop()\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n \
    \   assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzzjl0ff.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmptzzjl0ff.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptzzjl0ff.py\"\
    , line 34, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(brackets.split(',')) == len(set(brackets.split()))\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q64psv6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3q64psv6.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3q64psv6.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 2 and all(pair in brackets for pair in set(brackets) ^\
    \ set('()'))\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9ed91wk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_9ed91wk.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_9ed91wk.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for char in brackets:\n        if char == \"(\"\
    :\n            stack.append(char)\n        elif char == \")\":\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n        else:\n            return False\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(brackets) == len(set(brackets))\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvyz9ygtx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvyz9ygtx.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvyz9ygtx.py\"\
    , line 19, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_opening_brackets\
    \ = 0\n    num_closing_brackets = 0\n    for char in brackets:\n        if char\
    \ == \"(\":\n            num_opening_brackets += 1\n        else:\n          \
    \  num_closing_brackets += 1\n\n    return num_opening_brackets == num_closing_brackets\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajv4gd45.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpajv4gd45.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpajv4gd45.py\"\
    , line 31, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    i = 0\n    while i < len(brackets):\n        if brackets[i] == '(':\n\
    \            if not stack:\n                return False\n            stack.pop()\n\
    \        elif brackets[i] == ')':\n            if stack:\n                return\
    \ False\n            else:\n                stack.append(brackets[i])\n      \
    \  i += 1\n    if not stack:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4vjyr7r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmph4vjyr7r.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph4vjyr7r.py\"\
    , line 33, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    i =\
    \ 0\n    while i < len(brackets) and brackets[i] == \"(\":\n        if brackets[i\
    \ - 1] == \"(\":\n            brackets = brackets[:i - 1] + brackets[i + 1:]\n\
    \        else:\n            brackets = brackets[:i] + brackets[i + 1:] + (\")\"\
    \ + brackets[i:])\n        i += 1\n    return brackets[-1] == \")\"\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cl9pah5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1cl9pah5.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1cl9pah5.py\"\
    , line 29, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for open_bracket in brackets:\n        if open_bracket == \"(\":\n\
    \            stack.append(open_bracket)\n        if open_bracket == \")\":\n \
    \           try:\n                stack.pop()\n            except IndexError:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            top_of_stack = stack.pop()\n            if top_of_stack !=\
    \ char:\n                return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1nr3ewt.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_1nr3ewt.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_1nr3ewt.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {c: b for c, b in zip((\"(\", \")\"), (brackets))}\n    stack_of_open_brackets\
    \ = []\n    has_error = False\n    for char in brackets:\n        if char in brackets_dict:\n\
    \            if not has_error and stack_to_dict(stack_of_open_brackets):\n   \
    \             has_error = True\n            elif not has_error:\n            \
    \    has_error = stack_to_dict(stack_of_open_brackets) != brackets_dict[char]\n\
    \        else:\n            has_error = True\n        stack_of_open_brackets.append(char)\n\
    \    return has_error\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0qfao31.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpc0qfao31.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc0qfao31.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpc0qfao31.py\"\
    , line 19, in correct_bracketing\n    if not has_error and stack_to_dict(stack_of_open_brackets):\n\
    NameError: name 'stack_to_dict' is not defined. Did you mean: 'brackets_dict'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_open_brackets\
    \ = brackets.count('(')\n    num_closed_brackets = brackets.count(')')\n    if\
    \ num_open_brackets != num_closed_brackets:\n        return False\n    if num_closed_brackets\
    \ <= 0:\n        return True\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh0okdsc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxh0okdsc.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxh0okdsc.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = Stack()\n    for char in brackets:\n        if char == '(':\n            stack.push(0)\n\
    \        elif char == ')':\n            if not stack.pop():\n                return\
    \ False\n        else:\n            stack.push(char)\n    return not stack.empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkh97fvui.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkh97fvui.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkh97fvui.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpkh97fvui.py\"\
    , line 14, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return False\n    for left, right in zip(brackets[:-1], brackets[1:]):\n\
    \        if left != right and left != '(':\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo84ihxnf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo84ihxnf.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpo84ihxnf.py\"\
    , line 24, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets.count('(') == len(brackets) and brackets.count(')') == len(brackets)\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnaw0j3kt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnaw0j3kt.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnaw0j3kt.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ set(brackets) == set(brackets.lower())\n\n@lru_cache(maxsize=None)\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphaoo1q8s.py\", line\
    \ 16, in <module>\n    @lru_cache(maxsize=None)\nNameError: name 'lru_cache' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opening_brackets\
    \ = [c for c in brackets if c == '(']\n    closing_brackets = [c for c in brackets\
    \ if c == ')']\n    equals = [c for c in brackets if c == ']']\n    invalids =\
    \ opening_brackets + closing_brackets\n    return not (set(brackets) - set(opening_brackets)\
    \ - set(closing_brackets) - set(equals))\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6rtx8aa.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpd6rtx8aa.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd6rtx8aa.py\"\
    , line 26, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            if bracket != stack[-1]:\n                return False\n        \
    \    stack.pop()\n    if len(stack) != 0:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsu5nfa03.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsu5nfa03.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsu5nfa03.py\"\
    , line 35, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ True if brackets == correct_brackets(brackets) else False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh7i2ztq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuh7i2ztq.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuh7i2ztq.py\"\
    , line 17, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpuh7i2ztq.py\"\
    , line 14, in correct_bracketing\n    return True if brackets == correct_brackets(brackets)\
    \ else False\nNameError: name 'correct_brackets' is not defined. Did you mean:\
    \ 'correct_bracketing'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            if stack and\
    \ stack[-1] != '(':\n                return False\n            stack.append(c)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n            if len(stack) == 0:\n                return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1b9nc4xc.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp1b9nc4xc.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1b9nc4xc.py\"\
    , line 34, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    stack = []\n    for char in brackets:\n   \
    \     if char == '(':\n            stack.append(char)\n        elif char == ')':\n\
    \            if len(stack) == 0:\n                return False\n            elif\
    \ stack.pop() != '(':\n                return False\n    return len(stack) ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    open_brackets = {char: 0 for char in brackets}\n    for char in brackets:\n\
    \        if char in open_brackets:\n            stack.append(char)\n         \
    \   open_brackets[char] += 1\n        else:\n            if open_brackets[char]\
    \ == 0:\n                return False\n            elif stack and stack[-1] ==\
    \ char:\n                stack.pop()\n                open_brackets[char] -= 1\n\
    \            else:\n                return False\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja8jfiw6.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpja8jfiw6.py\", line 46,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpja8jfiw6.py\"\
    , line 32, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')' and stack:\n            if not stack.pop() == '(':\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2p66hrt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpe2p66hrt.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpe2p66hrt.py\"\
    , line 29, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            stack.pop()\n    return not len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupetzpj1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpupetzpj1.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpupetzpj1.py\"\
    , line 26, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Make\
    \ sure brackets is a string\n    if not isinstance(brackets, str):\n        raise\
    \ TypeError(\"brackets must be a string\")\n    # Count how many times a bracket\
    \ is used\n    brackets = dict(zip(brackets, range(1, 1 + len(brackets))))\n \
    \   # Keep track of which brackets are missing\n    missing_brackets = {key: False\
    \ for key in brackets}\n    # count how many times each bracket is in the text\n\
    \    bcounts = brackets.copy()\n    for bracket in brackets:\n        bcounts[bracket]\
    \ = 0\n    # go through each character in the text\n    for i, char in enumerate(text):\n\
    \        # if the opening bracket is missing, set missing brackets to True\n \
    \       if not missing_brackets[text[i]]:\n            missing_brackets[text[i]]\
    \ = True\n        # if it is an opening bracket, increase the count for it\n \
    \       if text[i] in brackets:\n            bcounts[text[i]] += 1\n        #\
    \ If the closing bracket is missing, decrease the count for it\n        if missing\
    \ and text[i+1] in brackets:\n            bcounts[text[i+1]] -= 1\n        # If\
    \ the count for any of the brackets is zero, that means the\n        # bracket\
    \ is missing and should be added to brackets\n        if bcounts[text[i]] == 0:\n\
    \            brackets[text[i]] = len(brackets)\n        missing = False\n    #\
    \ check to make sure every bracket has a corresponding closing bracket\n    return\
    \ all([\n        missing_brackets[key] or\n        brackets[key] == 0 or\n   \
    \     brackets[key] == len(brackets)\n        for key in brackets\n    ])\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh74kks4.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpgh74kks4.py\", line 65,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgh74kks4.py\"\
    , line 51, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpgh74kks4.py\"\
    , line 26, in correct_bracketing\n    for i, char in enumerate(text):\nNameError:\
    \ name 'text' is not defined. Did you mean: 'next'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = 0\n    for ch in brackets:\n        if ch == '(':\n            stack += 1\n\
    \        elif ch == ')':\n            stack -= 1\n        else:\n            return\
    \ False\n    return stack == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc82nawy3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpc82nawy3.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc82nawy3.py\"\
    , line 31, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    stack = []\n    for c in brackets:\n      \
    \  if c == '(':\n            stack.append(c)\n        elif c == ')':\n       \
    \     if len(stack) == 0:\n                return False\n            else:\n \
    \               top = stack.pop()\n                if top != c:\n            \
    \        return False\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0qir9nz.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpl0qir9nz.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl0qir9nz.py\"\
    , line 33, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    stack = deque([])\n    for char in brackets:\n     \
    \   if char == \"(\":\n            stack.append(char)\n        elif char == \"\
    )\":\n            if len(stack) == 0:\n                return False\n        \
    \    stack.pop()\n        else:\n            return False\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lqbl16_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp9lqbl16_.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9lqbl16_.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp9lqbl16_.py\"\
    , line 15, in correct_bracketing\n    stack = deque([])\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == \"(\":\n         \
    \   stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            elif stack.pop() != \"(\":\n\
    \                return False\n        else:\n            return False\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            else:\n                stack.pop()\n        else:\n\
    \            if len(stack) > 0:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoznc25f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcoznc25f.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcoznc25f.py\"\
    , line 35, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack:\
    \ DefaultDict[Tuple[str, ...], Tuple[int, ...]] = {(): ()}\n    for opening, closing\
    \ in brackets:\n        if opening not in stack:\n            return False\n \
    \       stack, cur = stack[opening], stack[opening]\n        if closing not in\
    \ cur:\n            return False\n        stack, cur = cur[closing], stack[closing]\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgv76x0y1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgv76x0y1.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgv76x0y1.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpgv76x0y1.py\"\
    , line 15, in correct_bracketing\n    for opening, closing in brackets:\nValueError:\
    \ not enough values to unpack (expected 2, got 1)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if len(brackets)\
    \ < 2:\n        return True\n\n    for x in brackets:\n        if x != ')':\n\
    \            continue\n        if brackets[brackets.index(x)-1] == '(':\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mxuv42x.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp2mxuv42x.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2mxuv42x.py\"\
    , line 26, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                first = stack.pop()\n            \
    \    if first != '(':\n                    return False\n        else:\n     \
    \       return False\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        return False\n    if brackets.count('(') <\
    \ brackets.count(')'):\n        return False\n    opening = brackets.count('(')\n\
    \    closing = brackets.count(')')\n    diff = 0\n    found = False\n    for x\
    \ in range(0, opening):\n        diff += 1 if brackets[x:x+1] == '(' else -1\n\
    \    if diff == closing:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26cv6d7f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp26cv6d7f.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp26cv6d7f.py\"\
    , line 30, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets == '(' and ')' in brackets\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjvvqyvs.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphjvvqyvs.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphjvvqyvs.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\"\
    )\n    return brackets.count(\"(\") == brackets.count(\")\")\n\n\n@given(brackets=text())\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx23n1twa.py\", line\
    \ 19, in <module>\n    @given(brackets=text())\nNameError: name 'given' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(brackets.replace('(', '').replace(')', '')) == len(brackets)\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_ymg_18.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3_ymg_18.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3_ymg_18.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count(\"\
    (\") != brackets.count(\")\"):\n        return False\n    stack = brackets\n \
    \   bracketCount = 0\n    while bracketCount < len(stack):\n        if stack[bracketCount]\
    \ == \")\":\n            bracketCount -= 1\n        if bracketCount < len(stack)\
    \ and stack[bracketCount] == \"(\":\n            bracketCount += 1\n        if\
    \ not bracketCount:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976028
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        if char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if stack:\n     \
    \   return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == ')' or brackets == '':\n        return True\n    if brackets == '(' and brackets.count('(')\
    \ == brackets.count(')'):\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxxq7e3r.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppxxq7e3r.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppxxq7e3r.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = [brackets[0]]\n    for c in brackets[1:]:\n        if c not in stack:\n  \
    \          return False\n        stack.append(c)\n    if len(stack) != 1:\n  \
    \      return False\n    if stack[0] != brackets[0]:\n        return False\n \
    \   return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9gcae40t.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9gcae40t.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9gcae40t.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    opening_brackets = [c for c in brackets if\
    \ c == '(']\n    closing_brackets = [c for c in brackets if c == ')']\n    opening_found\
    \ = False\n    closing_found = False\n    for opne in opening_brackets:\n    \
    \    if opne == '(':\n            opening_found = True\n        else:\n      \
    \      closing_found = True\n    if not opening_found and closing_found:\n   \
    \     opening_found = True\n    for clos in closing_brackets:\n        if clos\
    \ == '(':\n            closing_found = True\n        else:\n            opening_found\
    \ = True\n    if not opening_found and not closing_found:\n        return False\n\
    \    return opening_found and closing_found\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mnl5490.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp4mnl5490.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4mnl5490.py\"\
    , line 38, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_stack\
    \ = []\n    brackets_set = set()\n    for c in brackets:\n        if c == '(':\n\
    \            brackets_stack.append(c)\n            brackets_set.add('(')\n   \
    \     elif c == ')':\n            if not brackets_stack:\n                return\
    \ False\n            open_bracket = brackets_stack.pop()\n            brackets_set.remove(open_bracket)\n\
    \            if not brackets_set:\n                return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96ch8ynl.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp96ch8ynl.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp96ch8ynl.py\"\
    , line 35, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(brackets) - len(brackets.translate(SEQUENCES)) == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeziwn35r.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpeziwn35r.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpeziwn35r.py\"\
    , line 17, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpeziwn35r.py\"\
    , line 14, in correct_bracketing\n    return len(brackets) - len(brackets.translate(SEQUENCES))\
    \ == 0\nNameError: name 'SEQUENCES' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[int]\n    for index, char in enumerate(brackets):\n     \
    \   if char == '(':\n            stack.append(index)\n        if char == ')':\n\
    \            if len(stack) == 0:\n                return False\n            top\
    \ = stack.pop()\n            if top < index:\n                return False\n \
    \   return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0eruad7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpi0eruad7.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi0eruad7.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '()':\n        return True\n    if brackets == '[]':\n        return True\n\
    \    if brackets == '{}':\n        return True\n    if brackets == '<>':\n   \
    \     return True\n    if brackets == '!':\n        return True\n    if brackets\
    \ == '<>()[]{}!':\n        return True\n    if brackets == '<>()!':\n        return\
    \ True\n    if brackets == '<>()':\n        return True\n    return False\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxzi78ev.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnxzi78ev.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnxzi78ev.py\"\
    , line 34, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = deque()\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack.pop() != ')':\n                return False\n\
    \            else:\n                continue\n        else:\n            return\
    \ False\n    if len(stack) > 0:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxebz3wt.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmprxebz3wt.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprxebz3wt.py\"\
    , line 33, in check\n    assert candidate('()') == True\n  File \"/tmp/tmprxebz3wt.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_openings\
    \ = 0\n    stack = []\n    for c in brackets:\n        if c == '(':\n        \
    \    num_openings += 1\n            stack.append(c)\n        elif c == ')':\n\
    \            if num_openings == 0:\n                return False\n           \
    \ else:\n                num_openings -= 1\n                if len(stack) == 0:\n\
    \                    return False\n                stack.pop()\n        else:\n\
    \            return False\n    return True if num_openings == 0 else False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_\
    \ = brackets.replace('(', '').replace(')', '').replace('  ', ' ')\n    opening\
    \ = brackets_.count('(')\n    closing = brackets_.count(')')\n    if opening !=\
    \ closing:\n        print(\"ERROR: brackets do not match on \", brackets, closing)\n\
    \        print(\"    \", brackets_, opening, closing)\n        return False\n\
    \    if opening == 0:\n        print(\"ERROR: brackets do not match on \", brackets,\
    \ closing)\n        print(\"    \", brackets_, opening, closing)\n        return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgrkdc3i.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplgrkdc3i.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplgrkdc3i.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: "ERROR: brackets do not match on  () 0\n      0 0\n"
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')' and stack:\n            stack.pop()\n        else:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets.count('(') == brackets.count(')')\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom_j03bp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpom_j03bp.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpom_j03bp.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_opening\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            num_opening\
    \ += 1\n        if char == ')':\n            if num_opening > 0:\n           \
    \     num_opening -= 1\n            else:\n                return False\n    return\
    \ num_opening == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    for\
    \ bracket1, bracket2 in itertools.product(brackets, repeat=2):\n        if bracket1\
    \ != bracket2 and bracket1 in brackets:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbjsenuw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxbjsenuw.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxbjsenuw.py\"\
    , line 21, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpxbjsenuw.py\"\
    , line 14, in correct_bracketing\n    for bracket1, bracket2 in itertools.product(brackets,\
    \ repeat=2):\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets == brackets[0]\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvxug6m9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptvxug6m9.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptvxug6m9.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for x in brackets:\n        if x == '(':\n            stack.append(x)\n\
    \        elif x == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == \"(\":\n        return True\n    elif brackets == \")\":\n        return\
    \ True\n    elif brackets == '()':\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw2uxafs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxw2uxafs.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxw2uxafs.py\"\
    , line 26, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = list()\n    for char in brackets:\n        if char in stack:\n           \
    \ return False\n        stack.append(char)\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6851hk_o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6851hk_o.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6851hk_o.py\"\
    , line 23, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket[0] == \"(\":\n      \
    \      if not bracket in stack:\n                return False\n            else:\n\
    \                stack.pop()\n        elif bracket[-1] == \")\":\n           \
    \ if not stack or bracket[:-1] != stack.pop():\n                return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd8as9fp.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmptd8as9fp.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptd8as9fp.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in \"()\":\n            stack.append(char)\n\
    \        elif stack:\n            if stack[-1] != char:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5z723zn9.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5z723zn9.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5z723zn9.py\"\
    , line 26, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count(\"\
    (\") != brackets.count(\")\"):\n        return False\n    stack = []\n    for\
    \ pos in range(0,len(brackets)):\n        if brackets[pos] == \"(\":\n       \
    \     stack.append(pos)\n        if brackets[pos] == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            opening = stack.pop()\n   \
    \         if len(stack) != 0:\n                closing = stack.pop()\n       \
    \         if opening != closing:\n                    return False\n         \
    \   else:\n                return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaz2pzr7.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmplaz2pzr7.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplaz2pzr7.py\"\
    , line 35, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        if char == \")\":\n            if not stack or stack.pop() != \"(\":\n\
    \                return False\n    if stack:\n        return False\n    return\
    \ True\n\n@contextmanager\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyejplalx.py\", line\
    \ 25, in <module>\n    @contextmanager\nNameError: name 'contextmanager' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            top = stack.pop()\n            if top != ')':\n         \
    \       return False\n        else:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i1pj4rw.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp2i1pj4rw.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2i1pj4rw.py\"\
    , line 30, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    brackets = brackets.replace('(', '').replace(')',\
    \ '')\n    count = 0\n    for bracket in brackets:\n        if bracket != brackets[count:count\
    \ + 1]:\n            return False\n        count += 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwlh_wv5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjwlh_wv5.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjwlh_wv5.py\"\
    , line 29, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for pos in brackets:\n        if pos == '(':\n            stack.append(pos)\n\
    \        elif pos == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != '(':\n                return False\n  \
    \  return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.replace(' ', '').replace('\\n', '')\n    if len(brackets) % 2 !=\
    \ 0:\n        return False\n    for i in range(len(brackets) - 1, -1, -2):\n \
    \       if brackets[i + 1] != '(':\n            return False\n        if brackets[i\
    \ - 2] != ')':\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5n8joh0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmph5n8joh0.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph5n8joh0.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmph5n8joh0.py\"\
    , line 18, in correct_bracketing\n    if brackets[i + 1] != '(':\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    for\
    \ char in brackets:\n        if char == \")\":\n            correct_brackets(brackets[1:])\n\
    \            return True\n        if char != \"(\":\n            return False\n\
    \        correct_brackets(brackets[1:])\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae_vf_5q.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpae_vf_5q.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpae_vf_5q.py\"\
    , line 25, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpae_vf_5q.py\"\
    , line 20, in correct_bracketing\n    correct_brackets(brackets[1:])\nNameError:\
    \ name 'correct_brackets' is not defined. Did you mean: 'correct_bracketing'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            if stack.pop() != char:\n                return False\n \
    \   return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cib52k1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1cib52k1.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1cib52k1.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    stack = deque([brackets])\n    open_brackets\
    \ = set(\"()\")\n    while stack:\n        top = stack.popleft()\n        if top\
    \ in open_brackets:\n            open_brackets.remove(top)\n            if len(open_brackets)\
    \ == 0:\n                return True\n        else:\n            return False\n\
    \    return False\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlcyyd6d.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpjlcyyd6d.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjlcyyd6d.py\"\
    , line 29, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpjlcyyd6d.py\"\
    , line 16, in correct_bracketing\n    stack = deque([brackets])\nNameError: name\
    \ 'deque' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n\n    if brackets[0] == '(' and brackets[1] ==\
    \ ')':\n        return True\n\n    if brackets[0] == '[' and brackets[1] == ']':\n\
    \        return True\n\n    if brackets[0] == '{' and brackets[1] == '}':\n  \
    \      return True\n\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwoojq0za.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpwoojq0za.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwoojq0za.py\"\
    , line 31, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(brackets) % 2\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmga6ne7k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmga6ne7k.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmga6ne7k.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_open_brackets,\
    \ num_brackets = brackets.count('('), brackets.count(')')\n    if num_open_brackets\
    \ == num_brackets:\n        return True\n    elif num_open_brackets < num_brackets:\n\
    \        return False\n    else:\n        for x in range(num_open_brackets, num_brackets):\n\
    \            if brackets[brackets.find('(', x, 1)] == '(' and brackets[brackets.find(')',\
    \ x + 1, -1)] == ')':\n                return False\n        return True\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamfamm1c.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpamfamm1c.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpamfamm1c.py\"\
    , line 32, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    if brackets.count('(') == brackets.count(')'):\n        brackets =\
    \ brackets[brackets.index('('):brackets.index(')')]\n    while brackets:\n   \
    \     if brackets[0] == '(':\n            count += 1\n            if count >=\
    \ 2:\n                return False\n            brackets = brackets[1:]\n    \
    \    elif brackets[-1] == ')':\n            count -= 1\n            if count ==\
    \ 0:\n                return False\n            brackets = brackets[:-1]\n   \
    \     else:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6a5rrfk.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpp6a5rrfk.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp6a5rrfk.py\"\
    , line 35, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # Your\
    \ code here\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaqrxg654.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaqrxg654.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpaqrxg654.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_stack\
    \ = []\n    found_bracket = False\n    for char in brackets:\n        if char\
    \ == '(':\n            if found_bracket:\n                return False\n     \
    \       brackets_stack.append(char)\n        elif char == ')':\n            if\
    \ not brackets_stack:\n                return False\n            elif brackets_stack[-1]\
    \ != '(':\n                return False\n            brackets_stack.pop()\n  \
    \          found_bracket = False\n        elif not found_bracket:\n          \
    \  found_bracket = char == brackets_stack[-1]\n    return not brackets_stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opposites\
    \ = {\n        \"(\": \")\",\n        \")\": \"(\",\n    }\n    return len(brackets)\
    \ % 2 == 0 and all(brackets[i] != brackets[j] for i, j in zip(range(0, len(brackets)),\
    \ range(1, len(brackets))))\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxi5jpxrf.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxi5jpxrf.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxi5jpxrf.py\"\
    , line 23, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    stack = []\n    for c in brackets:\n        if c in\
    \ '([{':\n            stack.append(c)\n        elif c in ')]}':\n            if\
    \ not stack or c != stack[-1]:\n                return False\n            stack.pop()\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxs6fjvfm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpxs6fjvfm.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxs6fjvfm.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return False\n    if brackets[0] == '(':\n        if brackets[-1]\
    \ == ')':\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzq_scczb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzq_scczb.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzq_scczb.py\"\
    , line 26, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for char in brackets:\n        if char == '(':\n\
    \            if not stack or stack[-1] != '(':\n                return False\n\
    \            stack.pop()\n        elif char == ')':\n            if stack:\n \
    \               return False\n            else:\n                stack.append(char)\n\
    \        elif char in (')', '('):\n            if not stack:\n               \
    \ return False\n            if char not in stack:\n                return False\n\
    \            stack.pop()\n            stack.append(char)\n        else:\n    \
    \        assert char == ''\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lngruuu.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp9lngruuu.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9lngruuu.py\"\
    , line 38, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '':\n        return True\n    if brackets[0] == '':\n        return False\n\
    \    for i in range(len(brackets) - 1, -1, -1):\n        if brackets[i] != brackets[i\
    \ + 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcg6alwfb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcg6alwfb.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcg6alwfb.py\"\
    , line 25, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpcg6alwfb.py\"\
    , line 19, in correct_bracketing\n    if brackets[i] != brackets[i + 1]:\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets.count('(') == brackets.count(')')\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh711iqw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdh711iqw.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdh711iqw.py\"\
    , line 22, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in \"(,\":\n            stack.append(char)\n\
    \        else:\n            if not stack:\n                return False\n    \
    \        top = stack.pop()\n            if top != char:\n                return\
    \ False\n    return not stack\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ona2o5v.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3ona2o5v.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3ona2o5v.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '([{':\n            stack.append(char)\n\
    \        elif char in ')]}':\n            if len(stack) == 0:\n              \
    \  return False\n            top = stack.pop()\n            if top != char:\n\
    \                return False\n        else:\n            return False\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83v4j48d.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp83v4j48d.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp83v4j48d.py\"\
    , line 30, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = collections.deque()  # type: collections.deque\n    brackets = brackets.replace(\"\
    (\", \"-LRB-\")\n    brackets = brackets.replace(\")\", \"-RRB-\")\n    for char\
    \ in brackets:\n        if char == \"-LRB-\":\n            while not stack or\
    \ stack[-1] != \"-LRB-\":\n                stack.append(char)\n        elif char\
    \ == \"-RRB-\":\n            while not stack or stack[-1] != \"-RRB-\":\n    \
    \            stack.pop()\n        else:\n            stack.append(char)\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphklzzr75.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmphklzzr75.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphklzzr75.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmphklzzr75.py\"\
    , line 14, in correct_bracketing\n    stack = collections.deque()  # type: collections.deque\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == '()':\n        return True\n    if brackets == '{}':\n        return True\n\
    \    if brackets == '[]':\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6clixg3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe6clixg3.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpe6clixg3.py\"\
    , line 24, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_set\
    \ = set('()')\n    return set(brackets).issubset(brackets_set)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j3fc5va.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0j3fc5va.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0j3fc5va.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    open_brackets = 0\n    for c in brackets:\n        if c == '(':\n\
    \            stack.append(c)\n            open_brackets += 1\n        elif c ==\
    \ ')':\n            if len(stack) == 0:\n                return False\n      \
    \      stack.pop()\n            open_brackets -= 1\n        elif c == '[' or c\
    \ == ']':\n            # count '[' and ']' as opening brackets because brackets\
    \ are not\n            # correct in this case\n            stack.append(c)\n \
    \       elif c == '{' or c == '}':\n            # count '{' and '}' as opening\
    \ brackets because brackets are not\n            # correct in this case\n    \
    \        stack.append(c)\n    if open_brackets != 0:\n        return False\n \
    \   return len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    for\
    \ c in brackets:\n        if c not in '()':\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfaerma_f.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfaerma_f.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfaerma_f.py\"\
    , line 25, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            elif stack.pop() != '(':\n                return False\n\
    \    return len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict\
    \ = {\n        '(': ')',\n        ')': '(',\n    }\n    return all(map(lambda\
    \ x: x == brackets_dict.get(brackets), brackets))\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6b8dq7k.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmph6b8dq7k.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph6b8dq7k.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = brackets.strip()\n    brackets = brackets.replace(\"(\", \"( \")\n    brackets\
    \ = brackets.replace(\")\", \" )\")\n    brackets = brackets.replace(\"{\", \"\
    { \")\n    brackets = brackets.replace(\"}\", \"} \")\n    brackets = brackets.replace(\"\
    [\", \"[ \")\n    brackets = brackets.replace(\"]\", \" ]\")\n    brackets = brackets.replace(\"\
    '\", \"\").strip()\n    brackets = brackets.replace(\",\", \"\")\n    brackets\
    \ = brackets.replace('\"', '')\n    brackets = brackets.replace('[', '')\n   \
    \ brackets = brackets.replace(']', '')\n    brackets = brackets.replace(\"\\n\"\
    , \"\")\n    brackets = brackets.replace(' ', '').strip()\n    brackets = brackets.replace(\"\
    (\" + \")\", \")(\")\n    brackets = brackets.replace(\"(\" + \"]\", \"](\")\n\
    \    brackets = brackets.replace(\"(\" + \", \", \", \")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")}\")\n    brackets = brackets.replace(\"(\" + \"]\", \"]}\")\n\
    \    brackets = brackets.replace(\"(\" + \"{\", \"){\")\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4swttxo4.py\", line 55\n    brackets = brackets.replace(\"\
    (\" + \"}\", \")\n                                           ^\nSyntaxError: unterminated\
    \ string literal (detected at line 55)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ len(set(brackets)) == 1\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsdhj_bv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppsdhj_bv.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppsdhj_bv.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    bracketing_states\
    \ = []\n    # go through each bracket in the brackets string\n    for bracket\
    \ in brackets:\n        # if the bracket is a left bracket, then flip the\n  \
    \      # corresponding element in the bracketing state list\n        if bracket\
    \ == \"(\":\n            bracketing_states.append(True)\n        # if the bracket\
    \ is a right bracket, then flip the\n        # corresponding element in the bracketing\
    \ state list\n        elif bracket == \")\":\n            bracketing_states.append(False)\n\
    \        # if neither the left nor right bracket were seen yet,\n        # then\
    \ just flip the corresponding element\n        else:\n            bracketing_states.append(not\
    \ bracketing_states[-1])\n    return bracketing_states and sum(bracketing_states)\
    \ == 2\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2uwm5mn.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpr2uwm5mn.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr2uwm5mn.py\"\
    , line 33, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets\
    \ == ')':\n        return True\n    if brackets == '(' or brackets == ')':\n \
    \       return False\n    stack = []\n    for char in brackets:\n        if char\
    \ == '(':\n            stack.append(char)\n        elif char == ')':\n       \
    \     if not stack:\n                return False\n            if stack.pop()\
    \ != char:\n                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7vvf__4.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpo7vvf__4.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpo7vvf__4.py\"\
    , line 31, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\" and stack.pop() == \"(\":\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjijq04y1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjijq04y1.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjijq04y1.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # a\
    \ stack of (opening, closing) pairs.\n    # if the closing bracket matches the\
    \ most recent opening bracket,\n    # remove that pair.\n    stack = []  # type:\
    \ List[Tuple[Optional[str], Optional[str]]]\n    # tuple of (opening bracket,\
    \ closing bracket)\n    last_bracket = ()  # type: Tuple[Optional[str], Optional[str]]\n\
    \    for opening in brackets:\n        if opening == '(':\n            # if we\
    \ previously encountered an opening bracket,\n            # pop the previous pair\
    \ from stack\n            while stack and stack[-1][0] is not None:\n        \
    \        last_bracket = stack.pop()\n            if last_bracket[1] is not None:\n\
    \                return False\n            # add the current pair to stack\n \
    \           stack.append(last_bracket)\n            last_bracket = (opening, None)\n\
    \        elif opening in ')}':\n            # if we previously encountered a closing\
    \ bracket,\n            # and current pair is different from previous,\n     \
    \       # then we have a correct bracket\n            if last_bracket[1] is None:\n\
    \                return False\n            # else we have an incorrect bracket\n\
    \            # add the current pair to stack\n            stack.append(last_bracket)\n\
    \            last_bracket = (None, closing)\n        else:\n            last_bracket\
    \ = (opening, closing)\n    # add the last pair to stack\n    if last_bracket[1]\
    \ is not None:\n        stack.append(last_bracket)\n    return not bool(stack)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b3n9j6l.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmp2b3n9j6l.py\", line 64,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2b3n9j6l.py\"\
    , line 50, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp2b3n9j6l.py\"\
    , line 26, in correct_bracketing\n    if last_bracket[1] is not None:\nIndexError:\
    \ tuple index out of range\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opening_brackets\
    \ = ['(', '<', '[', '{']\n    closing_brackets = [')', '>', ']', '}']\n    for\
    \ character in brackets:\n        if character not in opening_brackets:\n    \
    \        return False\n    return True if brackets == ')>' else False\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gwqne78.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5gwqne78.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5gwqne78.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ not ((brackets != '(') and (not brackets.isalnum()))\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlczh5gu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprlczh5gu.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprlczh5gu.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    bracket\
    \ = brackets[0]\n    if bracket != brackets[1:]:\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wj1vq1h.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1wj1vq1h.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1wj1vq1h.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    for char in brackets:\n        if char == '(':\n            count +=\
    \ 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ set(brackets) == set(['(', ')'])\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgg3s2k8j.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgg3s2k8j.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgg3s2k8j.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets not in ('()', '[]', '{}', '<>')\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplpb06tx_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplpb06tx_.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplpb06tx_.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = {char: char for char in brackets}\n    opening_brackets = [char for char in\
    \ brackets if brackets[char] == '(']\n    closing_brackets = [char for char in\
    \ brackets if brackets[char] == ')']\n    return len(opening_brackets) == len(closing_brackets)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnq1gwlwk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnq1gwlwk.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnq1gwlwk.py\"\
    , line 25, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    count\
    \ = 0\n    open_brackets = brackets.count('(')\n    close_brackets = brackets.count(')')\n\
    \    open_brackets *= 2 # open brackets are doubled because they have to be balanced\n\
    \    return count == open_brackets # every opening bracket is balanced\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1ivh6x1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq1ivh6x1.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq1ivh6x1.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ re.search('\\(\\)', brackets) is not None\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxns6ds9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxxns6ds9.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxxns6ds9.py\"\
    , line 17, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpxxns6ds9.py\"\
    , line 14, in correct_bracketing\n    return re.search('\\(\\)', brackets) is\
    \ not None\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets == '()' or brackets == '[]'\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2v249a0d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2v249a0d.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2v249a0d.py\"\
    , line 19, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []  # type: List[str]\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_stack\
    \ = []\n    brackets_stack.append(brackets)\n    next_brackets = brackets\n  \
    \  while brackets_stack:\n        opening = brackets_stack.pop()\n        if next_brackets\
    \ == '()':\n            if opening == '(':\n                next_brackets = ')'\n\
    \            else:\n                next_brackets = '()'\n        if next_brackets\
    \ == '()':\n            if opening == '[' or opening == '{':\n               \
    \ next_brackets = ']'\n            else:\n                next_brackets = '{}'\n\
    \        if next_brackets == '{}':\n            if opening == '[' or opening ==\
    \ '(':\n                next_brackets = ']'\n            else:\n             \
    \   next_brackets = '{}'\n        if next_brackets == '[]':\n            if opening\
    \ == '{' or opening == '(':\n                next_brackets = ']'\n           \
    \ else:\n                next_brackets = '[]'\n        if next_brackets == '()[]':\n\
    \            if opening == '[':\n                next_brackets = ']'\n       \
    \     else:\n                next_brackets = '{}[]'\n        if next_brackets\
    \ == '{}[]':\n            if opening == '{':\n                next_brackets =\
    \ ']'\n            else:\n                next_brackets = '{}[]'\n        if next_brackets\
    \ == '[]{}':\n            if opening == '[':\n                next_brackets =\
    \ ']'\n            else:\n                next_brackets = '{}[]'\n        if next_brackets\
    \ == '(){}[]':\n            if opening == '(':\n                next_brackets\
    \ = ')'\n            else:\n                next_brackets = '{}[]'\n        if\
    \ next_brackets == '{}()[]':\n            if opening == '{':\n               \
    \ next_brackets = ')'\n            else:\n                next_brackets = '{}[]'\n\
    \        if next_brackets == '[](){}':\n            if opening == '[':\n     \
    \           next_brackets = ']'\n            else:\n                next_brackets\
    \ = '[]'\n        if next_brackets == '()[]{}':\n            if opening == '(':\n\
    \                next_brackets = ')'\n            else:\n                next_brackets\
    \ = '[]'\n        if next_brackets == '{}[]()':\n            if opening == '{':\n\
    \                next_brackets = ')'\n            else:\n                next_brackets\
    \ = '{}[]'\n        if next_brackets == '[]{}()':\n            if opening == '[':\n\
    \                next_brackets = ']'\n            else:\n                next_brackets\
    \ = '[]'\n        if next_brackets == '(){}[]()':\n            if opening == '(':\n\
    \                next_brackets = ')'\n            else:\n                next_brackets\
    \ = '{}[]'\n        if next_brackets == '[](){}()':\n            if opening ==\
    \ '[':\n                next_brackets = ']'\n            else:\n             \
    \   next_brackets = '[]'\n        if next_brackets == '()[]{}()':\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2ccxeq3v.py\", line 96\n    def check(candidate):\nIndentationError:\
    \ expected an indented block after 'if' statement on line 94\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        return False\n    opposite_brackets = {'(',\
    \ ')'}\n    return all(opposite_brackets.contains(bracket) for bracket in brackets)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_gsnheh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpu_gsnheh.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu_gsnheh.py\"\
    , line 21, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpu_gsnheh.py\"\
    , line 17, in correct_bracketing\n    return all(opposite_brackets.contains(bracket)\
    \ for bracket in brackets)\n  File \"/tmp/tmpu_gsnheh.py\", line 17, in <genexpr>\n\
    \    return all(opposite_brackets.contains(bracket) for bracket in brackets)\n\
    AttributeError: 'set' object has no attribute 'contains'\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = deque()\n    open_brackets = 0\n    closed_brackets = 0\n    for character\
    \ in brackets:\n        if character == '(':\n            if stack and stack[-1]\
    \ != '(':\n                return False\n            else:\n                open_brackets\
    \ += 1\n                stack.append(character)\n        elif character == ')':\n\
    \            if stack and stack[-1] != '(':\n                return False\n  \
    \          else:\n                closed_brackets += 1\n                open_brackets\
    \ -= 1\n                stack.pop()\n    if not stack:\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps13k1lg0.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmps13k1lg0.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps13k1lg0.py\"\
    , line 37, in check\n    assert candidate('()') == True\n  File \"/tmp/tmps13k1lg0.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opening_brackets\
    \ = {'(':')', '[':']', '{':'}'}\n    for char in brackets:\n        if char not\
    \ in opening_brackets:\n            return False\n        opening, closing = opening_brackets[char]\n\
    \        if char == opening:\n            if char == opening[:-1]:\n         \
    \       return True\n            else:\n                return False\n       \
    \ elif char == closing:\n            if char == closing[:-1]:\n              \
    \  return False\n            else:\n                return True\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv646bjnm.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpv646bjnm.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv646bjnm.py\"\
    , line 33, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpv646bjnm.py\"\
    , line 18, in correct_bracketing\n    opening, closing = opening_brackets[char]\n\
    ValueError: not enough values to unpack (expected 2, got 1)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    # go\
    \ through brackets and make sure all brackets are matched\n    brackets = brackets.replace(\"\
    (\", \"|\")  # make |( become the pattern for a matching closing bracket\n   \
    \ brackets = brackets.replace(\")\", \"|\")  # make |) become the pattern for\
    \ a matching opening bracket\n    brackets = brackets.replace(\"|(\", \"(\") \
    \ # make (| become the pattern for a matching closing bracket\n    brackets =\
    \ brackets.replace(\"|)\", \")\")  # make ) become the pattern for a matching\
    \ opening bracket\n\n    # check if there is a missing closing bracket\n    close_brackets\
    \ = [x for x in brackets if brackets.count(x) == 1]\n    if close_brackets:\n\
    \        print(close_brackets)\n        return False\n\n    brackets = brackets.replace(\"\
    |\", \"\")  # remove the |\n    brackets = brackets.replace(\"()\", \"\")  # remove\
    \ () -- it's part of the pattern\n    brackets = brackets.replace(\"|()\", \"\"\
    )  # remove (| -- it's part of the pattern\n    brackets = brackets.replace(\"\
    |\", \"\")  # remove |\n    brackets = brackets.replace(\")\", \"\")  # remove\
    \ ) -- it's part of the pattern\n    brackets = brackets.replace(\"()\", \"\"\
    )  # remove () -- it's part of the pattern\n    brackets = brackets.replace(\"\
    ()\", \"\")  # remove () -- it's part of the pattern\n\n    brackets = brackets.replace(\"\
    ||\", \"\")  # remove | |\n    brackets = brackets.replace(\"||\", \"\")  # remove\
    \ | |\n    brackets = brackets.replace(\"||\", \"\")  # remove | |\n    brackets\
    \ = brackets.replace(\"||\", \"\")  # remove | |\n\n    brackets = brackets.replace(\"\
    ||\", \"\")  # remove | |\n    brackets = brackets.replace(\"||\", \"\")  # remove\
    \ | |\n    brackets = brackets.replace(\"||\", \"\")  # remove | |\n    brackets\
    \ = brackets.replace(\"||\", \"\")  # remove | |\n    brackets = brackets.replace(\"\
    ||\", \"\")  # remove | |\n\n    brackets = brackets.replace(\"||\", \"\")  #\
    \ remove | |\n    brackets = brackets.replace(\"||\", \"\")  # remove | |\n  \
    \  brackets = brackets.replace(\"||\", \"\")  # remove | |\n    brackets = brackets.replace(\"\
    ||\", \"\")  # remove | |\n    brackets = brackets.replace(\"||\", \"\")  # remove\
    \ | |\n\n    brackets = brackets.replace(\"||\", \"\")  # remove | |\n    brackets\
    \ = brackets.replace(\"||\", \"\")  # remove | |\n    brackets = brackets.replace(\"\
    ||\", \"\")  # remove | |\n    brackets = brackets.replace(\"||\", \"\")  # remove\
    \ | |\n    brackets = brackets.replace(\"||\", \"\")  # remove | |\n\n    brackets\
    \ = brackets.replace(\"||\", \"\")  # remove | |\n    brackets = bracket\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20kx4bll.py\", line\
    \ 76, in <module>\n    test_check()\n  File \"/tmp/tmp20kx4bll.py\", line 74,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp20kx4bll.py\"\
    , line 60, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp20kx4bll.py\"\
    , line 58, in correct_bracketing\n    brackets = bracket\nNameError: name 'bracket'\
    \ is not defined. Did you mean: 'brackets'?\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    opposite_brackets\
    \ = {\")\": \"(\", \")\": \"(\", \")\": \")\"}\n    i = 0\n    length = len(brackets)\n\
    \    while i < length:\n        if brackets[i] == '(':\n            if i+1 < length:\n\
    \                if brackets[i+1] == ')':\n                    i += 2\n      \
    \          else:\n                    return False\n            else:\n      \
    \          if i+2 < length:\n                    if brackets[i+2] == ')':\n  \
    \                      i += 3\n                    else:\n                   \
    \     return False\n        else:\n            if i+1 < length:\n            \
    \    if brackets[i+1] == opposite_brackets[brackets[i]]:\n                   \
    \ i += 2\n                else:\n                    return False\n          \
    \  else:\n                if i+2 < length:\n                    if brackets[i+2]\
    \ == opposite_brackets[brackets[i]]:\n                        i += 3\n       \
    \             else:\n                        return False\n        i += 1\n  \
    \  return True\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp78duzr0.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpp78duzr0.py\", line 60,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp78duzr0.py\"\
    , line 47, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for character in brackets:\n        if character == '(':\n       \
    \     stack.append(character)\n        elif character == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        opening = stack.pop()\n                if opening != '(':\n         \
    \           return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if not stack or stack.pop() != '(':\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = list(brackets)\n    if not brackets or len(brackets) % 2 != 0:\n        return\
    \ False\n    if brackets[0] == '[' and brackets[len(brackets) - 1] == ']':\n \
    \       brackets = brackets[1:-1]\n    stack = []\n    for index, char in enumerate(brackets):\n\
    \        if char == '(':\n            stack.append(char)\n        else:\n    \
    \        if stack:\n                if char == ')':\n                    stack.pop()\n\
    \                elif stack.pop() != char:\n                    return False\n\
    \            else:\n                return False\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets\
    \ = {'(': ')', '[': ']'}\n    return all(brackets.get(b,b) == brackets[c] for\
    \ c in brackets)\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp949qwkay.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp949qwkay.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp949qwkay.py\"\
    , line 18, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp949qwkay.py\"\
    , line 15, in correct_bracketing\n    return all(brackets.get(b,b) == brackets[c]\
    \ for c in brackets)\n  File \"/tmp/tmp949qwkay.py\", line 15, in <genexpr>\n\
    \    return all(brackets.get(b,b) == brackets[c] for c in brackets)\nNameError:\
    \ name 'b' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if not stack:\n                return False\n\
    \            if stack.pop() != '(':\n                return False\n        else:\n\
    \            return False\n    return not stack\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    for\
    \ char in brackets:\n        if char not in '()':\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgkws698.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvgkws698.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvgkws698.py\"\
    , line 25, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if not stack or stack[-1] != '(':\n  \
    \              return False\n            stack.pop()\n        else:\n        \
    \    return False\n    return not stack\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char in '([{':\n            stack.append(char)\n\
    \        elif char in ')]}':\n            if not stack or stack.pop() != char:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjn6s1ch0.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjn6s1ch0.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjn6s1ch0.py\"\
    , line 25, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    if stack:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    num_open_brackets\
    \ = 0\n    num_close_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            num_open_brackets += 1\n        elif bracket == ')':\n\
    \            num_close_brackets += 1\n        else:\n            return False\n\
    \    return num_open_brackets == num_close_brackets\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxn842cn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpnxn842cn.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnxn842cn.py\"\
    , line 31, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = deque()\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0efuk6mr.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0efuk6mr.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0efuk6mr.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp0efuk6mr.py\"\
    , line 14, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    return\
    \ brackets == brackets.replace('(', '').replace(')', '')\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoi7n59s8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpoi7n59s8.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoi7n59s8.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n\
    \    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n\
    \    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '(':\n           \
    \ stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \    return not stack\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
