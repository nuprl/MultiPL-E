name: HumanEval_90_next_smallest
language: py
prompt: "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) ->\
  \ Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a\
  \ function next_smallest() that returns the 2nd smallest element of the list.\n\
  \    Return None if there is no such element.\n    >>> next_smallest([1, 2, 3, 4,\
  \ 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
  \    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert\
  \ candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([1, 1, 1, 1, 0]) == 1\n    assert\
  \ candidate([1, 1]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n\
  def test_check():\n    check(next_smallest)\n\ntest_check()\n"
completions: ["    if lst:\n        smallest = min(lst)\n    else:\n        smallest\
    \ = None\n    if smallest is None:\n        return None\n    next = [x for x in\
    \ lst if x < smallest]\n    if next:\n        return min(next)\n    else:\n  \
    \      return None\n", "    # Your code here\n    smallest = lst[0]\n    for i\
    \ in range(len(lst)-1):\n        if lst[i] < smallest:\n            smallest =\
    \ lst[i]\n\n    if smallest == lst[-1]:\n        return None\n    return smallest\n",
  "    \n    smallest = lst[0]\n    for x in lst[1:]:\n        if x < smallest:\n\
    \            smallest = x\n        elif x == smallest:\n            return x\n\
    \n    return None\n", "    smallest = lst[0]\n    for el in lst[1:]:\n       \
    \ if el < smallest:\n            smallest = el\n    return smallest\n", "    if\
    \ lst:\n        return lst[1]\n    return None\n", "    # complete the function\n\
    \    \n    return None\n", "    \n    return next(iter([x for x in lst if x <\
    \ lst[1]]))\n    \n    \n\n\"\"\"\n>>> next_smallest([1, 2, 3, 4, 5])\n2\n>>>\
    \ next_smallest([5, 1, 4, 3, 2])\n2\n>>> next_smallest([1, 2, 3, 2])\n2\n>>> next_smallest([3])\n\
    None\n>>> next_smallest([3, 2, 1])\nNone\n>>> next_smallest([3, 1, 2])\n2\n>>>\
    \ next_smallest([3, 2, 1])\n2\n\"\"\"\n", "    # write your function here\n  \
    \  if not lst:\n        return None\n    next_small = lst[0]\n    for item in\
    \ lst[1:]:\n        if item < next_small:\n            next_small = item\n   \
    \ return next_small\n", "    arr = sorted(lst)\n    if not arr:\n        return\
    \ None\n    return arr[arr.index(arr[1])+1]\n", "    if len(lst) == 0:\n     \
    \   return None\n    return lst[1]\n", "    if len(lst) <= 1:\n        return\
    \ None\n\n    smallest_element = lst[0]\n\n    for index in range(1, len(lst)):\n\
    \        if smallest_element < lst[index]:\n            smallest_element = lst[index]\n\
    \        else:\n            break\n\n    return smallest_element\n", "    return\
    \ min(lst) if lst else None\n", "    return min(lst)\n", "    smallest = lst[0]\n\
    \    pos = 0\n    for elem in lst[1:]:\n        if elem < smallest:\n        \
    \    smallest = elem\n            pos = -1\n        else:\n            pos +=\
    \ 1\n    if pos == len(lst):\n        return None\n    return smallest\n", " \
    \   if not lst:\n        return None\n\n    smallest = lst[0]\n\n    if len(lst)\
    \ == 2:\n        return lst[1]\n    for index in range(1, len(lst)):\n       \
    \ if lst[index] < smallest:\n            smallest = lst[index]\n\n    return smallest\n",
  "    pass\n", "    return next((x for x in lst if x < lst[1]), None)\n", "    pass\n",
  "    if not lst:\n        return None\n\n    if len(lst) == 1:\n        return lst[0]\n\
    \n    if lst[0] < lst[1]:\n        return lst[0]\n    else:\n        return lst[1]\n",
  "    lst = sorted(lst)\n    if lst:\n        return lst[1]\n    else:\n        return\
    \ None\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
