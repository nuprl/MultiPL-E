name: HumanEval_48_is_palindrome
language: py
prompt: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string\
  \ is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
  \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
  \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') ==\
  \ False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') ==\
  \ False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
  \ntest_check()\n"
completions: ["    text = text.lower()\n    return text == text[::-1]\n\n", "    return\
    \ is_palindrome_helper(text)\n\n", "    if len(text) < 2:\n        return True\n\
    \n    first = text[0]\n    last = text[-1]\n\n    return (first == last) and\\\
    \n           is_palindrome(text[1:-1]) and \\\n           is_palindrome(text[2:-2])\n",
  "    return text == text[::-1]\n\n", "    return text == text[::-1]\n\n", "    length\
    \ = len(text)\n    if length == 0 or length == 1:\n        return True\n    return\
    \ text[length // 2] != text[length // 2 - 1]\n\n", "    return text == text[::-1]\n",
  "    return text[::-1] == text\n\n", "    text = text.lower()\n    text = text.replace('\
    \ ', '')\n    return text == text[::-1]\n\n", "    return text == text[::-1]\n\
    \n", "    text = text.lower()\n    return text == text[::-1]\n\n\"\"\"", "   \
    \ if text == \"\":\n        return True\n    if text[0] != \"z\" and text[-1]\
    \ != \"z\":\n        return False\n    left = 1\n    right = len(text) - 1\n \
    \   while left < right:\n        if text[left] != text[right]:\n            return\
    \ False\n        left += 1\n        right -= 1\n    return True\n\n", "    return\
    \ text == text[::-1]\n\n", "    if not text:\n        return True\n    left =\
    \ 0\n    right = -1\n    while right < len(text) - 1:\n        if text[left] !=\
    \ text[right]:\n            return False\n        left += 1\n        right -=\
    \ 1\n    return True\n\n", "    text = text.lower()\n    return text[:len(text)\
    \ // 2] == text[-1:-len(text) // 2]\n\n", "    return text == \"\".join(reversed(text))\n",
  "    str_len = len(text)\n    return str_len > 0 and str_len == str_len // 2 and\
    \ text == text[::-1]\n\n", "    lower = text.lower()\n    lower2 = lower[::-1]\n\
    \    return lower == lower2\n\n", "    return text == _reverse(text)\n\n", " \
    \   return text == reverse(text)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
