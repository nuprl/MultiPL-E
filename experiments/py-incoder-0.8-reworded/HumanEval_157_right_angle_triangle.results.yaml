language: py
name: HumanEval_157_right_angle_triangle
results:
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(b - a) == abs(c - b)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8y_96j1s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8y_96j1s.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8y_96j1s.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ab = abs(a - b)\n    if ab < c or b >= c:\n\
    \        return False\n    ac = abs(a - c)\n    if ac < a or c >= a:\n       \
    \ return False\n    \n    return True\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmiop_98t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmiop_98t.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmiop_98t.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c\
    \ > a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi15iazph.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpi15iazph.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi15iazph.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    left_side = abs(a) + abs(b) + abs(c)\n   \
    \ right_side = abs(b) + abs(c) + abs(a)\n    \n    if abs(left_side) > abs(right_side):\n\
    \        return False\n    else:\n        if a == b and b == c and c == a:\n \
    \           return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpza96ybwl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpza96ybwl.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpza96ybwl.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a + b > c and a + c > b and b + c >\
    \ a\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5cyxd79.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp5cyxd79.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp5cyxd79.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a + b > c and a + c > b and b + c\
    \ > a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgdfvvur.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptgdfvvur.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptgdfvvur.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4jlwpeu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx4jlwpeu.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpx4jlwpeu.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b ** 2 + c ** 2 > a * c:\n        return\
    \ False\n    else:\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzc19rpy2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpzc19rpy2.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzc19rpy2.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # code here\n    return True if abs(b - c)\
    \ <= a and abs(a - b) <= b else False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0puo4gm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp0puo4gm.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp0puo4gm.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    d = abs(b - c)\n    if d > max(a, b, c):\n\
    \        return False\n    elif a > b:\n        if d >= max(a, d):\n         \
    \   return True\n        else:\n            return False\n    else:\n        if\
    \ d >= max(a, b, c):\n            return True\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dz8ys6n.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9dz8ys6n.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9dz8ys6n.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c\
    \ > a:\n        return True\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsav4w4iq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsav4w4iq.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsav4w4iq.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b == c: return True\n    elif a ==\
    \ b: return True\n    elif a == c: return True\n    elif b == c: return False\n\
    \    elif b < c and b > a: return False\n    elif c < a and c > b: return False\n\
    \    else: return True\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe54uygbg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpe54uygbg.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpe54uygbg.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c or b + c > a or c + a > b:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkj61qcv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzkj61qcv.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzkj61qcv.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length_a = abs((a ** 2) + (b ** 2))\n    length_b\
    \ = abs((a ** 2) + (c ** 2))\n    length_total = length_a + length_b\n    return\
    \ (length_b * length_c) / length_total > 0 or ((a - c) * length_b) / length_total\
    \ > 0 or ((b - a) * length_c) / length_total > 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw045gj54.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw045gj54.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw045gj54.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpw045gj54.py\"\
    , line 16, in right_angle_triangle\n    return (length_b * length_c) / length_total\
    \ > 0 or ((a - c) * length_b) / length_total > 0 or ((b - a) * length_c) / length_total\
    \ > 0\nNameError: name 'length_c' is not defined\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    d = ((b**2) - (4*a*c)) / (2 * a)\n    if (d\
    \ > 0):\n        d = math.degrees(math.acos(d))\n        if ((d > 90) or (d <\
    \ -90)):\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4v2tcho.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc4v2tcho.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc4v2tcho.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a == b and b == c and c == a:\n \
    \       return True\n    elif a == b or a == c or b == c or b == a:\n        return\
    \ False\n    else:\n        if b <= c:\n            if a + b > c:\n          \
    \      return True\n            else:\n                return False\n        else:\n\
    \            if a + c > b:\n                return True\n            else:\n \
    \               return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6c3pqul.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpn6c3pqul.py\", line 44,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn6c3pqul.py\"\
    , line 34, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return right_triangle(a, b, c) and right_triangle(b,\
    \ a, c)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkto3v62.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmkto3v62.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmkto3v62.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpmkto3v62.py\"\
    , line 13, in right_angle_triangle\n    return right_triangle(a, b, c) and right_triangle(b,\
    \ a, c)\nNameError: name 'right_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(a * b - c) <= a * b * 0.95 and\
    \ abs(a * c - b) <= a * c * 0.95\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpldnoh4va.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpldnoh4va.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpldnoh4va.py\"\
    , line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(a * b - b * c - a * c) < 1e-9\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0bnz830.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc0bnz830.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc0bnz830.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b - a) ** (0.5)) > ((c - b) ** (0.5))\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpna7swi5v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpna7swi5v.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpna7swi5v.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659820459
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Return False if any of these conditions\
    \ are met\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a\
    \ + b <= c:\n        return False\n    if a + c <= b:\n        return False\n\
    \    return True\n</cell>\n<text>\nImplement is_right_angled_triangle below in\
    \ such a way that it accepts an integer argument, and returns True or False depending\
    \ on whether the integer is a right-angled triangle or not.\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw_enst9x.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    return (a+b+c) >= (a+b)\
    \ and (a+b+c) >= (c+b) and (a+b+c) >= (b+a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwsvj13o.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxwsvj13o.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxwsvj13o.py\"\
    , line 19, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and b + c > a and a + c > b:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihjvrpmh.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpihjvrpmh.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpihjvrpmh.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c:\n        return False\n    if\
    \ b > c:\n        return False\n    if a == b:\n        return True\n    if a\
    \ < b:\n        if c % b == 0:\n            return True\n    else:\n        if\
    \ c % a == 0:\n            return True\n    return False\n</cell>\n<cell>\nright_angle_triangle(3,\
    \ 4, 5)\n</cell>\n<cell>\nright_angle_triangle(1, 2, 3)\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9pfpm3lm.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a >= b + c:\n        return False\n   \
    \ if b >= c + a:\n        return False\n    if c >= b + a:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdm034y_9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdm034y_9.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdm034y_9.py\"\
    , line 26, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b < a or b < c:\n        return False\n\
    \    elif a < c:\n        return True\n    elif c * a * c <= b ** 2:\n       \
    \ return True\n    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw9lpykgs.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # YOUR CODE HERE\n    if a >= b and a >= c:\n\
    \        return a == b or a == c\n    else:\n        return False\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8fsuwmz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp8fsuwmz.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp8fsuwmz.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((a + b > c) and (c + b > a) and (a\
    \ + c > b) and (c + a > b))\n</cell>\n<text>\nLet's find all right-angled triangles\
    \ in a list:\n\n\n</text>\n<cell>\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcv3qdrbp.py\", line 16\n    Let's find all right-angled\
    \ triangles in a list:\n       ^\nSyntaxError: unterminated string literal (detected\
    \ at line 16)\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 0
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a * a\
    \ + b * b == c * c:\n        return True\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b - a) * (c + b) * (b - c)) <= 0\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77pkjl4_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp77pkjl4_.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp77pkjl4_.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Write your code here\n    \n    return\
    \ (a+b+c) == (a == b or a == c or b == c)\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptt5xzlr7.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (b - a) * (c - b) <= 0\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3idd3rog.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3idd3rog.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3idd3rog.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c:\n        return right_angle_triangle(b,\
    \ a, c)\n    elif b + c > a:\n        return right_angle_triangle(c, a, b)\n \
    \   elif c + a > b:\n        return right_angle_triangle(a, b, c)\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp27f57rch.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp27f57rch.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp27f57rch.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp27f57rch.py\"\
    , line 14, in right_angle_triangle\n    return right_angle_triangle(b, a, c)\n\
    \  File \"/tmp/tmp27f57rch.py\", line 14, in right_angle_triangle\n    return\
    \ right_angle_triangle(b, a, c)\n  File \"/tmp/tmp27f57rch.py\", line 14, in right_angle_triangle\n\
    \    return right_angle_triangle(b, a, c)\n  [Previous line repeated 993 more\
    \ times]\n  File \"/tmp/tmp27f57rch.py\", line 13, in right_angle_triangle\n \
    \   if a + b > c:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if abs(b - c) < abs(a - b) or abs(a - c) <\
    \ abs(b - a):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd6u_qmy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnd6u_qmy.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnd6u_qmy.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b > c and a + c > b and b + c\
    \ > a:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdp93uay8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdp93uay8.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdp93uay8.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # write your code here\n    \n    return\
    \ True\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpc1bv4ofl.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return b * b - 4 * a * c >= 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4iiw16sb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4iiw16sb.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4iiw16sb.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return True if a + b > c and a + c > b and\
    \ b + c > a else False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa4u39k_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsa4u39k_.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsa4u39k_.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a == b == c:\n        return True\n\
    \n    if a == b or a == c or b == c:\n        return False\n\n    # Find if b\
    \ - a > c - b\n    abc = a - b > c - a\n\n    # Find if b - a == c - b\n    ab\
    \ = a - b == c - b\n\n    # Find if b - b == a -c - b\n    bb = a - b == c - b\n\
    \n    if abc or ab or bb:\n        return True\n    \n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj1x3krg.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpuj1x3krg.py\", line 49,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuj1x3krg.py\"\
    , line 36, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((a**2 + b**2 == c**2)\n          \
    \  and abs((math.degrees(math.atan2(a, b))) -\n                     math.degrees(math.atan2(c,b))))\
    \ <= 90 )\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg3tw624_.py\", line 15\n    math.degrees(math.atan2(c,b))))\
    \ <= 90 )\n                                          ^\nSyntaxError: unmatched\
    \ ')'\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    return ((a + b\
    \ > c) and (a + c > b) and (a + c > b)) or ((a + b > c) and (a + c > b) and (a\
    \ + b > b)) or ((a + c > b) and (a + b > c) and (a + c > c))\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjedllt9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprjedllt9.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprjedllt9.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (a == 0 and b == c) or (a == c and b ==\
    \ 0) or (a == b and c == 0):\n        return True\n    if a >= b >= c:\n     \
    \   return True\n    if a == b and a == c:\n        return True\n    if a == b\
    \ or b == c or c == a:\n        return False\n    else:\n        return right_angle_triangle(a\
    \ - b, b, c - a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9icgxc98.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp9icgxc98.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9icgxc98.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp9icgxc98.py\"\
    , line 22, in right_angle_triangle\n    return right_angle_triangle(a - b, b,\
    \ c - a)\n  File \"/tmp/tmp9icgxc98.py\", line 22, in right_angle_triangle\n \
    \   return right_angle_triangle(a - b, b, c - a)\n  File \"/tmp/tmp9icgxc98.py\"\
    , line 22, in right_angle_triangle\n    return right_angle_triangle(a - b, b,\
    \ c - a)\n  [Previous line repeated 993 more times]\n  File \"/tmp/tmp9icgxc98.py\"\
    , line 13, in right_angle_triangle\n    if (a == 0 and b == c) or (a == c and\
    \ b == 0) or (a == b and c == 0):\nRecursionError: maximum recursion depth exceeded\
    \ in comparison\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < b + c and b < c + a:\n        return\
    \ True\n    return False\n</cell>\n<text>\nTesting the function\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpe_q8__fs.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    return ((a + b) <= c or (c + b) <= a\
    \ or (a + c) <= b) or ((a + b) <= b or (c + b) <= c or (a + c) <= c)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q_6_96z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8q_6_96z.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8q_6_96z.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b == c:\n        return True\n   \
    \ elif a == b or a == c or b == c:\n        return False\n    else:\n        x_1\
    \ = (a + b) // 2\n        x_2 = (b + c) // 2\n        y_1 = (a + c) // 2\n   \
    \     y_2 = (b + a) // 2\n        if y_1 == y_2:\n            return right_angle_triangle(x_1,\
    \ y_1, x_2)\n        elif x_1 == x_2:\n            return right_angle_triangle(y_1,\
    \ x_1, y_2)\n        else:\n            return right_angle_triangle(x_1, y_1,\
    \ x_2) or right_angle_triangle(y_1, x_1, y_2)\n        \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpx5esv4.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvpx5esv4.py\", line 44,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvpx5esv4.py\"\
    , line 31, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < b:\n        if b < c:\n           \
    \ return True\n        else:\n            return False\n    else:\n        if\
    \ a < c:\n            return True\n        else:\n            return False\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwexrl5n9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwexrl5n9.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwexrl5n9.py\"\
    , line 26, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a + b > c and c + b > a\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp167pw8cr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp167pw8cr.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp167pw8cr.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Write your code here.\n    a_sum =\
    \ a + b + c\n    if a_sum >= 0:\n        b_sum = a * b\n        c_sum = a * c\n\
    \        \n        b_sum = abs(b_sum)\n        c_sum = abs(c_sum)\n        \n\
    \        b_sum -= b_sum % 2\n        c_sum -= c_sum % 2\n        \n        b_sum\
    \ = b_sum % 2\n        c_sum = c_sum % 2\n        \n        if (b_sum == c_sum)\
    \ and (b_sum >= 0):\n            return True\n        \n    return False\n   \
    \ \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkrtscv96.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpkrtscv96.py\", line 48,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkrtscv96.py\"\
    , line 36, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b <= c:\n        return False\n\
    \    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return\
    \ False\n    elif a + b <= c + c:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgme_5957.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgme_5957.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgme_5957.py\"\
    , line 29, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n\n    # Equilateral\n    if a == b:\n        return c == (a+b)/2\n\n\
    \    # Scalene\n    if a == 0 or b == 0:\n        return c == 0\n    elif a ==\
    \ 0:\n        return b == c\n    elif b == 0:\n        return c == (a+b)/2\n\n\
    \    # Isosceles\n    elif a == c:\n        return (b+c)/2 == a\n\n    # Obtuse\
    \ triangles\n    elif a == b and b == c:\n        return True\n\n    # Not right-angled\
    \ triangle\n    return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_v2mvh8.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmph_v2mvh8.py\", line 54,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmph_v2mvh8.py\"\
    , line 41, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((a + b > c) and (a - b > c) and (a\
    \ + c > b) and (a - c > b))\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8v17opt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_8v17opt.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_8v17opt.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a == b and a == c:\n        return\
    \ True\n    elif a == c and a != b:\n        return True\n    elif b == c and\
    \ b != a:\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtv_ivix.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphtv_ivix.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphtv_ivix.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b < c and c < a:\n        return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh3nfjv1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyh3nfjv1.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpyh3nfjv1.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b:\n        # Triangle with one side\n\
    \        if a <= c:\n            return True\n        else:\n            return\
    \ False\n    elif b == c:\n        # Triangle with two sides\n        if a > c:\n\
    \            return True\n        else:\n            return False\n    elif a\
    \ == c:\n        # Triangle with two sides\n        if a > b:\n            return\
    \ True\n        else:\n            return False\n    else:\n        # Triangle\
    \ with three sides\n        if b > c:\n            return True\n        else:\n\
    \            return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7d_ig7gw.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp7d_ig7gw.py\", line 53,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7d_ig7gw.py\"\
    , line 40, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    angle1 = right_angle(a)\n    angle2\
    \ = right_angle(b)\n    angle3 = right_angle(c)\n    if angle1 == angle2 == angle3:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrbpco2p.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplrbpco2p.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplrbpco2p.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmplrbpco2p.py\"\
    , line 14, in right_angle_triangle\n    angle1 = right_angle(a)\nNameError: name\
    \ 'right_angle' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ac = a-b\n    bc = b-c\n    ab = a-b\n   \
    \ return ab == ac or ab == bc\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8usn_6n.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg8usn_6n.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpg8usn_6n.py\"\
    , line 20, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Your code here\n    if a >= b + c:\n\
    \        return True\n    elif b >= a + c:\n        return True\n    elif c >=\
    \ a + b:\n        return True\n    elif c >= b + a:\n        return True\n   \
    \ else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0k3fplj.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_0k3fplj.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_0k3fplj.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((a - c) * (b - c)) - ((a - b) * (c\
    \ - b))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbbrjxuf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfbbrjxuf.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfbbrjxuf.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < b and a < c and c < a:\n        return\
    \ True\n    return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3frct8ld.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3frct8ld.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3frct8ld.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # check a, b and c\n    if not a >= b or not\
    \ b >= c:\n        return False\n    \n    angle_diff = (b * b - 4 * a * c) /\
    \ (b * b)\n    if angle_diff >= 0 and angle_diff <= 180:\n        return True\n\
    \    elif angle_diff < 0 and angle_diff > -180:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzt5ontk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqzt5ontk.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqzt5ontk.py\"\
    , line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnlcmtgk2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnlcmtgk2.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnlcmtgk2.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return (b\
    \ - c) <= ((a < b and a < c) or abs(a - b) <= abs(a - c))\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjif58kqp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjif58kqp.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjif58kqp.py\"\
    , line 19, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if abs(a ** 2 + b ** 2 - c ** 2) < 1:\n  \
    \      return True\n    elif a == 0 and b == 0 and c == 0:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppq27544a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmppq27544a.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppq27544a.py\"\
    , line 24, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b**2 - 4*a*c < 0:\n        return False\n\
    \    elif a == b:\n        if a == 0:\n            return True\n        else:\n\
    \            return False\n    else:\n        if b == 0:\n            return True\n\
    \        else:\n            return b**2 - 4*a*c > 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cc_le4e.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2cc_le4e.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp2cc_le4e.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, _, b = sorted([a, b, c])\n    if b > a:\n\
    \        a, b = b, a\n    if c > a:\n        c, a = a, b\n    return a == b or\
    \ a == c or b == c\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhffxhga.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfhffxhga.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfhffxhga.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    (a, b, c) = sorted([a, b, c])\n\n    if a\
    \ + b > c or a + c > b or b + c > a:\n        return False\n\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0n7h8bg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpp0n7h8bg.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp0n7h8bg.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return not ((b - a) * (c - b) * (a - c) >=\
    \ 0)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr7q5gru.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplr7q5gru.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplr7q5gru.py\"\
    , line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 \\\n        or b == 0 \\\n     \
    \   or c == 0 \\\n        or a + b > c \\\n        or a + c > b \\\n        or\
    \ b + c > a \\\n        or a - b > c \\\n        or a - c > b \\\n        or b\
    \ - c > a \\\n        or a + b == c \\\n        or a + c == b \\\n        or b\
    \ + c == a \\\n        or b == c \\\n        or c == a \\\n        or a + b ==\
    \ c \\\n        or b + c == a \\\n        or a + c == b \\\n        or c == b:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kx67o8_.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1kx67o8_.py\", line 49,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1kx67o8_.py\"\
    , line 37, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (c-a) * (c-b) >= (b-a) * (b - c)\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7s7ip_9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk7s7ip_9.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk7s7ip_9.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return is_triangle(a, b, c) or is_triangle(b,\
    \ c, a)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp865jgmyr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp865jgmyr.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp865jgmyr.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp865jgmyr.py\"\
    , line 13, in right_angle_triangle\n    return is_triangle(a, b, c) or is_triangle(b,\
    \ c, a)\nNameError: name 'is_triangle' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    \n    if\
    \ a == b == c:\n        return True\n    elif a == b or a == c or b == c:\n  \
    \      return False\n    elif a == b and a == c:\n        return False\n    elif\
    \ a == b and b == c:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0nl07we.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpy0nl07we.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy0nl07we.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    d = b * b - 4 * a * c\n    if d < 0:\n   \
    \     return False\n    if d > 0:\n        a = a if abs(a) > abs(d) else d\n \
    \       b = b if abs(b) > abs(d) else d\n        c = c if abs(c) > abs(d) else\
    \ d\n    else:\n        a = a if abs(a) == abs(d) else None\n        b = b if\
    \ abs(b) == abs(d) else None\n        c = c if abs(c) == abs(d) else None\n\n\
    \    if a != None and b != None and c != None:\n        ab = abs(b)\n        ac\
    \ = abs(c)\n        ad = abs(a)\n        if b > 0 and c > 0:\n            if a\
    \ < 0:\n                return abs(b + c - a) < (b - a + c + ab + ac)\n      \
    \      else:\n                return abs(a - c - b) < (c - b + a + ab + ac)\n\
    \        else:\n            if a < 0:\n                return abs(b + c - a) <\
    \ (ac - b + ab + ad)\n            else:\n                return abs(a - c - b)\
    \ < (ad - a + ab + ac)\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_dlaael.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmps_dlaael.py\", line 57,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps_dlaael.py\"\
    , line 44, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    a, b, c = sorted([a, b, c])\n    \n\
    \    ab = abs(b - a)\n    bc = abs(c - b)\n    ac = abs(c - a)\n    \n    return\
    \ ((ab < bc) and (ac > ab))\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5md1qgb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpf5md1qgb.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpf5md1qgb.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sum1 = a + b + c\n    sum2 = a + b - c\n \
    \   sum3 = a + b + c\n    sum4 = a - b - c\n\n    return (\n        (sum1 <= sum2\
    \ <= sum3 and sum3 <= sum4 <= sum1) or\n        (sum1 <= sum2 <= sum3 and sum3\
    \ <= sum4 >= sum1) or\n        (sum1 <= sum2 <= sum3 and sum4 <= sum1 >= sum1)\
    \ or\n        (sum1 <= sum2 <= sum3 and sum4 >= sum1 >= sum1)\n    )\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpts0hea52.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpts0hea52.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpts0hea52.py\"\
    , line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n\n    if (a +\
    \ b > c) and (b + c > a) and (c+a > b) :\n        return True\n    else:\n   \
    \     return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5vqfh55.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_5vqfh55.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_5vqfh55.py\"\
    , line 24, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    triangle_sides = [a, b, c]\n    sum_of_sides\
    \ = sum(triangle_sides)\n    is_right_angle = False\n    if sum_of_sides < 0:\n\
    \        is_right_angle = True\n    elif sum_of_sides > 0:\n        is_right_angle\
    \ = (a == b or b == c or c == a)\n\n    return is_right_angle\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_o4i8m2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpv_o4i8m2.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv_o4i8m2.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b\
    \ and a == c:\n        return True\n    if a > b and b > c:\n        return False\n\
    \    if a > b and c > b:\n        return False\n    if a > c:\n        return\
    \ True\n    if b > c:\n        return True\n    if b > a:\n        return True\n\
    \    if c > a:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm0myp56e.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpm0myp56e.py\", line 45,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpm0myp56e.py\"\
    , line 33, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Compute length of each side\n    side1\
    \ = abs(b - a) + abs(c - b)\n    side2 = abs(a - c) + abs(b - c)\n    \n    #\
    \ If side1, side2, and both are equal\n    if side1 == side2 and side1 != 0:\n\
    \        return True\n    \n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitdfxkar.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpitdfxkar.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpitdfxkar.py\"\
    , line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # write your code here\n    sum_ab = a + b\n\
    \    sum_c = c + sum_ab\n    sum_ab_plus_c = sum_ab + sum_c\n    sum_b_plus_c\
    \ = b + sum_c\n    if sum_ab_plus_c == 0:\n        return False\n    if sum_ab_plus_c\
    \ < a or sum_b_plus_c < b:\n        return False\n    else:\n        if sum_b_plus_c\
    \ > c or sum_ab_plus_c > b:\n            return False\n        else:\n       \
    \     if sum_ab_plus_c > c:\n                return True\n            else:\n\
    \                return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp080lh0p_.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp080lh0p_.py\", line 45,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp080lh0p_.py\"\
    , line 32, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    a_is_zero = a <= 0\n    b_is_zero =\
    \ b <= 0\n    c_is_zero = c <= 0\n    \n    if (a_is_zero or b_is_zero or c_is_zero):\n\
    \        return False\n    \n    if (a == b and b == c):\n        return True\n\
    \    if (a == c and c == b):\n        return True\n    if (a == b or a == c or\
    \ b == c):\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v50p3_m.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9v50p3_m.py\", line 42,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9v50p3_m.py\"\
    , line 29, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    triangle = a * b * c\n    sum_of_sides = a\
    \ + b + c\n    return triangle == sum_of_sides or triangle == (sum_of_sides -\
    \ 90)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx03pedq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzx03pedq.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzx03pedq.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < b and b < c:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxtwnee8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxxtwnee8.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxxtwnee8.py\"\
    , line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    sum_of_angles = a + b + c\n    if sum_of_angles\
    \ % 2 == 0:\n        return False\n    elif (a >= b and a >= c) or (a >= c and\
    \ b >= c) or (a >= b and c >= b):\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1js8fa0m.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1js8fa0m.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1js8fa0m.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 and b == 0 and c == 0:\n       \
    \ return True\n    elif a == 0 and b == 0 and c != 0:\n        return False\n\
    \    elif a != 0 and b != 0 and c != 0:\n        if b * b > a * c:\n         \
    \   return True\n        else:\n            return False\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqv1syubb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqv1syubb.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqv1syubb.py\"\
    , line 27, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a == 0 and b == 0 and c == 0:\n \
    \       return True\n    elif a == 0 and b == 0 or b == 0 and c == 0:\n      \
    \  return False\n    elif a == 0 and c > 0 and b == 0:\n        return False\n\
    \    elif a == 0 and c < 0 and b == 0:\n        return False\n    elif b == 0\
    \ and c > 0 and a == 0:\n        return False\n    elif b == 0 and c < 0 and a\
    \ == 0:\n        return False\n    elif b == 0 and c == 0 and a > 0:\n       \
    \ return True\n    elif b == 0 and c == 0 and a < 0:\n        return True\n  \
    \  elif b > 0 and a > 0 and c > 0:\n        return True\n    elif b > 0 and a\
    \ > 0 and c < 0:\n        return False\n    elif b > 0 and a < 0 and c > 0:\n\
    \        return True\n    elif b > 0 and a < 0 and c < 0:\n        return False\n\
    \    elif b < 0 and a > 0 and c > 0:\n        return False\n    elif b < 0 and\
    \ a > 0 and c < 0:\n        return True\n    elif b < 0 and a < 0 and c > 0:\n\
    \        return True\n    elif b < 0 and a < 0 and c < 0:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8yhjzb8.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpp8yhjzb8.py\", line 62,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp8yhjzb8.py\"\
    , line 50, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    (a, b, c), (b, c, a) = rotate_point(a, c,\
    \ b), rotate_point(b, c, a)\n    if a + b > c or a + c > b or b + c > a:\n   \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidnf9_h5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpidnf9_h5.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpidnf9_h5.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpidnf9_h5.py\"\
    , line 13, in right_angle_triangle\n    (a, b, c), (b, c, a) = rotate_point(a,\
    \ c, b), rotate_point(b, c, a)\nNameError: name 'rotate_point' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b == c: return True\n    elif a >\
    \ b > c: return False\n    elif a == b: return False\n    elif a > b: return False\n\
    \    else: return True\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh4g6zm0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsh4g6zm0.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsh4g6zm0.py\"\
    , line 22, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a * b == c * c\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0d3zc_x0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0d3zc_x0.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0d3zc_x0.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b > c and b + c > a and c + a\
    \ > b:\n        return True\n    else:\n        return False\n</cell>\n<cell>\n\
    \"\"\"\nUnit tests\n\"\"\"\n\nfrom nose.tools import assert_equal\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphefk7xlm.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = [abs(i) for i in (a, b, c)]\n  \
    \  return (b == c and a + b > c) or b < c and a + b > c\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptczrhiq0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptczrhiq0.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptczrhiq0.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    triangle = [a, b, c]\n    a, b, c = triangle\n\
    \    angle1 = 180 - acos(b/c)\n    angle2 = 180 - acos(c/b)\n    if angle1 ==\
    \ 0:\n        return True\n    else:\n        return abs(angle1 - angle2) > 90\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyfhdlt27.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a*a + b*b > c*c:\n        return\
    \ False\n    else:\n        return True\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupffne1j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpupffne1j.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpupffne1j.py\"\
    , line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b <= c or c <= b or b >= a:\n     \
    \   return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1268vtzk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1268vtzk.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1268vtzk.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # get the side lengths \n    side_a\
    \ = abs(a-b)\n    side_b = abs(b-c)\n    side_c = abs(c-a)\n\n    # if the side\
    \ lengths are equal, return True \n    if side_a == side_b == side_c:\n      \
    \  return True\n    \n    # else return False \n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5yclu8zp.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5yclu8zp.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5yclu8zp.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    elif a == b or a == c or b == c:\n        return False\n    elif a + b >\
    \ c and b > c:\n        return True\n    elif a + c > b and c > b:\n        return\
    \ True\n    elif b + c > a and c > a:\n        return True\n    else:\n      \
    \  return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpysufr22o.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpysufr22o.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpysufr22o.py\"\
    , line 28, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    return a > b >\
    \ c or a**2 + b**2 == c**2\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwolyr6wl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwolyr6wl.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwolyr6wl.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # assert is_right_triangle(a, b, c)\n\
    \    \n    ab = abs(b - a) # length of segment ab\n    ac = abs(c - a) # length\
    \ of segment ac\n    \n    # check for right triangles\n    if (ac >= ab and ab\
    \ >= ac): \n        return True\n    \n    # check for right angle triangles\n\
    \    if (ab >= ac and ac >= ab): \n        return True\n    \n    return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidsdnm3b.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpidsdnm3b.py\", line 43,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpidsdnm3b.py\"\
    , line 30, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (a\
    \ + b > c)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkoni8dx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxkoni8dx.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxkoni8dx.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zvohhzy.py\", line\
    \ 286, in <module>\n    test_check()\n  File \"/tmp/tmp3zvohhzy.py\", line 284,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3zvohhzy.py\"\
    , line 271, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b * b) - (a * a)) == (-(b * c) -\
    \ (a * a))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0oyjbu_8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0oyjbu_8.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0oyjbu_8.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    len_a = _angle_to_length(a, c, b)\n    len_b\
    \ = _angle_to_length(b, c, a)\n    len_c = _angle_to_length(c, a, b)\n    return\
    \ len_c > len_b and len_c > len_a\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju_ihm9e.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpju_ihm9e.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpju_ihm9e.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpju_ihm9e.py\"\
    , line 13, in right_angle_triangle\n    len_a = _angle_to_length(a, c, b)\nNameError:\
    \ name '_angle_to_length' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    count = 0\n\
    \    \n    if a * a + b * b > c * c:\n        return True\n    else:\n       \
    \ return False\n</cell>\n<text>\nQuestion 12: Write a function called perimeter()\
    \ which takes as input the length of a triangle as a tuple with 3 elements, and\
    \ returns the perimeter for the triangle. Use this function in your implementation\
    \ of the function right_angle_triangle().\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp84pru6cj.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a + b >= c and c + b <= a) or (a +\
    \ c >= b and b + c <= a)\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnv75y8v.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmnv75y8v.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmnv75y8v.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c:\n        b, c, a = c, a, b\n    if a + c > b:\n        a, b, c = c, b,\
    \ a\n    angle = (b ** 2 + c ** 2 - a ** 2) ** (1/2)\n    return angle >= 0\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7jplcyx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv7jplcyx.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv7jplcyx.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\n  File \"/tmp/tmpv7jplcyx.py\"\
    , line 19, in right_angle_triangle\n    return angle >= 0\nTypeError: '>=' not\
    \ supported between instances of 'complex' and 'int'\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b < a or c < a:\n        return False\n\
    \n    if b == c and b == a:\n        return True\n\n    if b + c >= 2 * a:\n \
    \       return True\n\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_upa983l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_upa983l.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_upa983l.py\"\
    , line 27, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b > c:\n        return False\n\
    \    if b + c > a:\n        return False\n    if a + c > b:\n        return False\n\
    \    return True\n</cell>\n<text>\nProblem 7\nUsing your code from the previous\
    \ problem, write an algorithm that will tell you whether or not you can split\
    \ a rectangle into two parts such that the area of the resulting parts is the\
    \ same as the area of the input rectangle. Here are some examples:\n\nGiven the\
    \ rectangle (4, 6), (2, 3), (5, 1) return True\nGiven the rectangle (2, 2), (5,\
    \ 2), (4, 5) return True\nGiven the rectangle (5, 5), (5, 5), (5, 5) return False\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkqgcmvd4.py\", line 21\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ab = a*b\n    ac = a*c\n    bc = b*c\n   \
    \ return ab + ac == bc\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1_ug1l3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_1_ug1l3.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_1_ug1l3.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a < b+c or a < c or b < c or a < b+c:\n\
    \        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuohj79p9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuohj79p9.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuohj79p9.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length_of_side = abs(b - c)\n    angle = float(a\
    \ + b + c) / 2\n    angle = abs(math.degrees(angle)) % 180\n    if length_of_side\
    \ * 2 < a:\n        angle += 180\n    return angle < 90\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxr1zvul.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvxr1zvul.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvxr1zvul.py\"\
    , line 21, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpvxr1zvul.py\"\
    , line 15, in right_angle_triangle\n    angle = abs(math.degrees(angle)) % 180\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaygqwrwo.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaygqwrwo.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpaygqwrwo.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(a * b - c * c) <= a * a + b * b\n\
    \    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_nvxl88.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8_nvxl88.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8_nvxl88.py\"\
    , line 19, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return abs(\n        ((a + b + c) % (b * b))\n\
    \        - ((b * b - a * a) % (b * b))\n    ) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5vmhe_z.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw5vmhe_z.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw5vmhe_z.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b < c or a + c < b or b + c < a:\n\
    \        return False\n    else:\n        return True\n</cell>\n<text>\nUnit Test\n\
    \n</text>\n<cell>\nimport unittest\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf5_lq5ul.py\", line 17\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length = [a, b, c]\n    length = len(length)\n\
    \    for i in range(0, length - 1):\n        length_i = length[i]\n        for\
    \ j in range(i + 1, length):\n            length_j = length[j]\n            if\
    \ length_i + length_j == length_j and length_j > length_i:\n                return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a5ut7ot.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8a5ut7ot.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8a5ut7ot.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp8a5ut7ot.py\"\
    , line 16, in right_angle_triangle\n    length_i = length[i]\nTypeError: 'int'\
    \ object is not subscriptable\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a * a + b * b == c * c:\n        return\
    \ True\n    return False\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd77u45da.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpd77u45da.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpd77u45da.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b - a)*(c-a) >= 0 and (b - c)*(a-c)\
    \ >= 0)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwm49st3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphwm49st3.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphwm49st3.py\"\
    , line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    return a * b >\
    \ c and b * c > a\n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpenk30ft3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpenk30ft3.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpenk30ft3.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and c + a > b:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03vc28gb.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp03vc28gb.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp03vc28gb.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        answer = True\n    else:\n        answer = False\n\n    return answer\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_32tn5dc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_32tn5dc.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_32tn5dc.py\"\
    , line 25, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return a + b > c and b + c > a and a + c >\
    \ b\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru4qj7q_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpru4qj7q_.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpru4qj7q_.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and b + c > a and c + a > b:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbohjwl1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmbohjwl1.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmbohjwl1.py\"\
    , line 24, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length = a + b + c\n    return length == get_sides(a,\
    \ b, c) or length == get_sides(b, c, a) or length == get_sides(c, a, b)\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2wi5r5g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn2wi5r5g.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn2wi5r5g.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpn2wi5r5g.py\"\
    , line 14, in right_angle_triangle\n    return length == get_sides(a, b, c) or\
    \ length == get_sides(b, c, a) or length == get_sides(c, a, b)\nNameError: name\
    \ 'get_sides' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b == c:\n        return True\n   \
    \ if b == 0 and c == a:\n        return True\n    if a == 0 and b == c:\n    \
    \    return True\n    if a == b or a == c or b == c:\n        return False\n \
    \   \n    # Find angle using Heron's formula\n    angle = (b**2 - 4*a*c)**0.5\n\
    \    \n    # Check for right-angled triangle\n    if angle < -math.pi / 2.0:\n\
    \        return True\n    if angle > math.pi / 2.0:\n        return False\n  \
    \  \n    # Check for 90-degree angle\n    if angle < math.pi / 2.0:\n        return\
    \ True\n    if angle > math.pi * 2.0 / 3.0:\n        return False\n    \n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83ustgpe.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp83ustgpe.py\", line 54,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp83ustgpe.py\"\
    , line 41, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp83ustgpe.py\"\
    , line 26, in right_angle_triangle\n    if angle < -math.pi / 2.0:\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and b + c > a and a + c > b:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8duthc4f.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8duthc4f.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8duthc4f.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b <= c or c <= a + b:\n        return\
    \ False\n\n    if a >= c and b >= c:\n        return True\n\n    if b >= c and\
    \ c >= a:\n        return True\n\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4ar24zs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd4ar24zs.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpd4ar24zs.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((a + b >= c and b >= a) or (a + c\
    \ >= b and c >= a) or (b + c >= a and c >= b))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx1h1251y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx1h1251y.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpx1h1251y.py\"\
    , line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return b*b - 4*a*c == a\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjioy9q_4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjioy9q_4.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjioy9q_4.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    if a + b <= c:\n        return False\n    if a + c <= b:\n      \
    \  return False\n    if b + c <= a:\n        return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3ce2t00.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpq3ce2t00.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpq3ce2t00.py\"\
    , line 28, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    ab = abs(b\
    \ - a)\n    bc = abs(c - b)\n    return ab == bc and bc >= ab\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq85802wj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq85802wj.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpq85802wj.py\"\
    , line 20, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c or a + c > b or b + c > a:\n\
    \        return False\n    else:\n        return True\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58j5q3u3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp58j5q3u3.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp58j5q3u3.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    length = math.sqrt(a ** 2 + b ** 2 + c **\
    \ 2)\n    angle = (180 / math.pi) * math.acos((a / length) + (b / length) + (c\
    \ / length))\n    return math.degrees(angle) == 90\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgi44itoo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgi44itoo.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgi44itoo.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpgi44itoo.py\"\
    , line 13, in right_angle_triangle\n    length = math.sqrt(a ** 2 + b ** 2 + c\
    \ ** 2)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Write your code here\n    return ((a + b\
    \ >= c) or (b + c >= a))\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr_xi75bz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpr_xi75bz.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr_xi75bz.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # write your code here\n    return (-b + math.sqrt(b**2\
    \ - 4 * a * c)) / (2 * a)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijmftae4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpijmftae4.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpijmftae4.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpijmftae4.py\"\
    , line 14, in right_angle_triangle\n    return (-b + math.sqrt(b**2 - 4 * a *\
    \ c)) / (2 * a)\nNameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    return (c > 0 and (b ** 2 - 4 * a *\
    \ c) > 0) or (c < 0 and (b ** 2 - 4 * a * c) < 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwn5asd2k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwn5asd2k.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwn5asd2k.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # write your logic here\n    if a > b and\
    \ b > c:\n        if a == c and b != a:\n            return True\n        else:\n\
    \            return False\n    else:\n        if a < b and b < c:\n          \
    \  return True\n        else:\n            return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb22r2k6u.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpb22r2k6u.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb22r2k6u.py\"\
    , line 28, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ab = abs(b - a)\n    cb = abs(c - b)\n   \
    \ if cb > ab:\n        return False\n    else:\n        return True\n</cell>\n\
    <text>\nThe same function can be used for the other two triangles.\n\nExercise\
    \ 18\nWrite the function right_angle_triangle that returns True if triangle is\
    \ right angled triangle, False otherwise.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqy8nhwof.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a*a + b*b == c*c:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0ea8xx0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpn0ea8xx0.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn0ea8xx0.py\"\
    , line 23, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return is_right_angle(a, b, c) and is_right_angle(b,\
    \ c, a)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1gz340o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp1gz340o.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpp1gz340o.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpp1gz340o.py\"\
    , line 13, in right_angle_triangle\n    return is_right_angle(a, b, c) and is_right_angle(b,\
    \ c, a)\nNameError: name 'is_right_angle' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a >= b >= c:\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpx48kn7zn.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Your code here\n    if a + b > c or a +\
    \ c > b or b + c > a:\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8dcyssnh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8dcyssnh.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8dcyssnh.py\"\
    , line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a >= b >= c:\n        return False\n  \
    \  \n    if a == b == c:\n        return True\n    if a > c > b and b > a > c:\n\
    \        return True\n    if a == b and c > a:\n        return True\n    if a\
    \ == c and b > a:\n        return True\n    if a == b and c > b:\n        return\
    \ True\n    return False\n    \ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmoc446r.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxmoc446r.py\", line 42,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxmoc446r.py\"\
    , line 29, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    return b * b - 4 * a * c == 0 \n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgg6wg464.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgg6wg464.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgg6wg464.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b ** 2) + (a ** 2) < (c ** 2))\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplubv7cfo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplubv7cfo.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmplubv7cfo.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and c + b > a:\n        # triangle\
    \ is right angle\n        return True\n    else:\n        return False\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk_eug2mr.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a >= b >= c:\n        return True\n   \
    \ return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwyi9obpk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwyi9obpk.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwyi9obpk.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return ((a+b+c)\
    \ == (a + b + c))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuc9nlxhu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuc9nlxhu.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuc9nlxhu.py\"\
    , line 19, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c or b > c:\n        return False\n    else:\n        return a + b == c or\
    \ b + c == a\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpen56n0ee.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpen56n0ee.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpen56n0ee.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b**2 - 4*a*c) < (b**2 - 4*a*b)) and\
    \ ((b**2 - 4*a*c) > (b**2 - 4*a*a))\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh1a9m4y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwh1a9m4y.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwh1a9m4y.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if abs(a * b - c) < 1e-15:\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdf79ggsf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdf79ggsf.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdf79ggsf.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return ((b**2 - c**2) - (a**2 - c**2)) > 0\
    \ \n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8b0zatu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpv8b0zatu.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv8b0zatu.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return True if a * b > c * a and a * b < c\
    \ * c else False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi200i27t.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi200i27t.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi200i27t.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n\n    # Case:\
    \ Triangle is equilateral\n    if a == b == c:\n        return True\n\n    # Case:\
    \ Triangle is right or 90 degree\n    elif (a == b) or (a == c) or (b == c):\n\
    \        return True\n\n    # Case: Triangle is scalene\n    elif abs(a - b) ==\
    \ abs(b - c):\n        return True\n\n    # Case: Triangle is isosceles\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbq9gilv.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdbq9gilv.py\", line 45,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdbq9gilv.py\"\
    , line 33, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    \n    return ((a + b) <= (c * .5)) and\
    \ (abs(a - b) <= abs(a - c)) and (abs(a - c) <= abs(b - c))\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0ljv1y_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpb0ljv1y_.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb0ljv1y_.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and b + c > a and a + c > b:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihjvrpmh.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpihjvrpmh.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpihjvrpmh.py\"\
    , line 22, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    left_angle_triangle_a = right_triangle(a,\
    \ b, c)\n    left_angle_triangle_b = right_triangle(a, c, b)\n    left_angle_triangle_c\
    \ = right_triangle(b, a, c)\n    \n    if left_angle_triangle_a and left_angle_triangle_b\
    \ and left_angle_triangle_c:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpxap28f.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpgpxap28f.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgpxap28f.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpgpxap28f.py\"\
    , line 14, in right_angle_triangle\n    left_angle_triangle_a = right_triangle(a,\
    \ b, c)\nNameError: name 'right_triangle' is not defined. Did you mean: 'right_angle_triangle'?\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # write your code here\n    a, b, c = map(int,\
    \ (a, b, c))\n    \n    if a + b > c:\n        return False\n    elif a + c >\
    \ b:\n        return False\n    elif b + c > a:\n        return False\n    else:\n\
    \        return True\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpe_g8pphp.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (-b + c).is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqwi65w0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnqwi65w0.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnqwi65w0.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpnqwi65w0.py\"\
    , line 13, in right_angle_triangle\n    return (-b + c).is_integer()\nAttributeError:\
    \ 'int' object has no attribute 'is_integer'\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = map(int, (a, b, c,))\n    return\
    \ (b - a) * (c - a) / 2 == (b - c) * (c - a) / 2 + a * b\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxamjrqo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgxamjrqo.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpgxamjrqo.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Your code here\n    if a**2+b**2+c**2>=4*(a*b*c):\n\
    \        return False\n    else:\n        return True\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdc26fw_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsdc26fw_.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsdc26fw_.py\"\
    , line 22, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    delta = abs(b-a)\n\
    \    delta2 = abs(b-c)\n    if delta > delta2:\n        if b > c:\n          \
    \  return True\n        elif b < c:\n            return False\n    else:\n   \
    \     if a > c:\n            return True\n        elif a < c:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=python,python-3.x dscore=1 |>\n\
    <| c |>\nPlease add an explanation to your answer so that future readers can understand\
    \ what you've done.\n<|/ c |>\n<| a |>\nI haven't been able to find a library\
    \ for this, so I wrote this one myself.\n<code>\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbx0is4f8.py\", line 28\n    <|/ a tags=python,python-3.x\
    \ dscore=1 |>\n                              ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    d = b * b - 4 * a * c\n    return True if\
    \ d == 0 else False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuczvo6h8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuczvo6h8.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpuczvo6h8.py\"\
    , line 18, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a == b\
    \ and c == a:\n        return True\n    elif a == b and c > a:\n        return\
    \ False\n    elif a > b and b == c or a > b and c > a:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzyk7oa3v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzyk7oa3v.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzyk7oa3v.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return True\n\
    \    if a != b and a != c and b != c:\n        return False\n    if a == b or\
    \ a == c or b == c:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11xeg36c.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp11xeg36c.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp11xeg36c.py\"\
    , line 23, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return (a\
    \ + b > c) and (a + c > b) and (a + c > b)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzmw_zxd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvzmw_zxd.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvzmw_zxd.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if (b ** 2) - (4 * a * c) == 0:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn19s_u9i.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpn19s_u9i.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn19s_u9i.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (a\
    \ + b > c)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkoni8dx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxkoni8dx.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxkoni8dx.py\"\
    , line 20, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # Calculate area of the triangle\n    area_triangle\
    \ = a + b + c\n    # Calculate area of the right angled triangle\n    area_right_angled_triangle\
    \ = area_triangle - a * b - c\n    return abs(area_right_angled_triangle) <= area_triangle\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fkg5xbn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0fkg5xbn.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0fkg5xbn.py\"\
    , line 22, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: 1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # assert a <= b and b <= c\n    return\
    \ abs((math.sqrt(a**2 + b**2 - c**2))-(math.sqrt(a**2 + c**2 - b**2)))<1e-6\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7w0jzzj1.py\", line 16\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n\
    \        return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfuz0w0pl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfuz0w0pl.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfuz0w0pl.py\"\
    , line 23, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if b - a\
    \ <= c and a - c <= b or b - c <= a and a - b <= c:\n        return True\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9wew201.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpn9wew201.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn9wew201.py\"\
    , line 21, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    a, b, c = map(int, (a, b, c))\n    \n\
    \    if b == 0 or c == 0 or b == c:\n        return True\n    \n    if a == b\
    \ and a == c:\n        return True\n    \n    # Now find the hypotenuse and divide\
    \ all others\n    h = abs(b) + abs(c)\n    \n    # Triangle is valid if:\n   \
    \ # (1) a, b, c are all equal\n    # (2) a, b, c are both non-zero\n    # (3)\
    \ a is less than b and a is less than c\n    # (4) a is greater than b and a is\
    \ greater than c\n    \n    if a == b and a == c:\n        return True\n    if\
    \ a > b and a > c:\n        return False\n    if b > a and b > c:\n        return\
    \ False\n    \n    # Now check whether the hypotenuse is greater than the sum\
    \ of its sides\n    if h > a + b + c:\n        return True\n    else:\n      \
    \  return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntt3ts87.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpntt3ts87.py\", line 59,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpntt3ts87.py\"\
    , line 46, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return True\n\
    \    elif b == c and abs(a - b) == abs(b - a):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp295w8ge5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp295w8ge5.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp295w8ge5.py\"\
    , line 21, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b and b == c:\n        return True\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdjj0rpa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzdjj0rpa.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzdjj0rpa.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b == c:\n        return True\n   \
    \ else:\n        if c > a > b or a > b > c:\n            return False\n      \
    \  else:\n            return True\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptczr3bsz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmptczr3bsz.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptczr3bsz.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ans = 0\n    if (b**2 - (4*a*c))//2 < 0:\n\
    \        ans = 1\n    elif (b**2 - (4*a*c))//2 == 1:\n        ans = -1\n    if\
    \ ans == 0 or ans == 1:\n        return True\n    return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0uo8jfby.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0uo8jfby.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0uo8jfby.py\"\
    , line 24, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (b - a) * (c > 0) - (c > a) * (b >\
    \ 0)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparzdgjf1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmparzdgjf1.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmparzdgjf1.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == b:\n        return False\n    elif\
    \ a == c:\n        return True\n    elif b == c:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphekx_6bo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphekx_6bo.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphekx_6bo.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    sum_b = a + b\n    sum_ab = sum_b + c\n  \
    \  if sum_ab <= c:\n        return False\n    else:\n        return True\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq14dfzl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphq14dfzl.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmphq14dfzl.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # write your code here\n\n    #return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t8vzaq2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5t8vzaq2.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5t8vzaq2.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (b ** 2 + c ** 2) ** 0.5 > a ** 2 +\
    \ (b - c) ** 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzou54i9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnzou54i9.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpnzou54i9.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return b**2 - 4*a*c >= 0\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga3pipht.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpga3pipht.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpga3pipht.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    if a + b\
    \ > c and a + c > b and b + c > a:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_6t_57v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy_6t_57v.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpy_6t_57v.py\"\
    , line 24, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n\n    if (b <=\
    \ a <= c) or (a <= b <= c):\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbllh4gtc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbllh4gtc.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbllh4gtc.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b < c and a < b:\n        return True\n\
    \    elif b > c and a > b:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cnlit5r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5cnlit5r.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5cnlit5r.py\"\
    , line 23, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = max(a, b, c)\n    sa, sb, sc = sum(a),\
    \ sum(b), sum(c)\n    if abs(a) < abs(b) and abs(a) < abs(c):\n        if b >\
    \ c and a > c:\n            return True\n    else:\n        if c > b and a > b:\n\
    \            return True\n    return False\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjric08a.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbjric08a.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbjric08a.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpbjric08a.py\"\
    , line 13, in right_angle_triangle\n    a, b, c = max(a, b, c)\nTypeError: cannot\
    \ unpack non-iterable int object\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a == 0 and b == 0 and c == 0:\n       \
    \ return False\n    if a + b > c:\n        return False\n    if a + c > b:\n \
    \       return False\n    if b + c > a:\n        return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7b3aia_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpr7b3aia_.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpr7b3aia_.py\"\
    , line 25, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a, b, c = map(int, (a, b, c))\n    if (a +\
    \ b > c) and (c+b > a):\n        return c == (a*a + b*b == c*c)\n    return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv246__57.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpv246__57.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpv246__57.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    # return True if b is greater than c or c\
    \ is greater than a\n    return (b > c) or (c > a)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ekyejuq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_ekyejuq.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_ekyejuq.py\"\
    , line 18, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    if a + b >= c and c + a >= b and a +\
    \ c >= b:\n        return True\n    return False\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnht1f1r.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptnht1f1r.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptnht1f1r.py\"\
    , line 20, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return is_right_angle(a, b, c) and is_right_angle(b,\
    \ a, c)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21xpblk9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp21xpblk9.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp21xpblk9.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp21xpblk9.py\"\
    , line 13, in right_angle_triangle\n    return is_right_angle(a, b, c) and is_right_angle(b,\
    \ a, c)\nNameError: name 'is_right_angle' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a_b = abs(a - b)\n    b_c = abs(b - c)\n \
    \   c_a = abs(c - a)\n    abc = (a + b + c) / 2\n    acb = (a + c + b) / 2\n \
    \   bca = (b + c + a) / 2\n    aba = (a + b + a) / 2\n    \n    if a_b > b_c and\
    \ a_b > c_a and c_a > aba:\n        return True\n    elif b_c > c_a and b_c >\
    \ aba:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvyuz8mbf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpvyuz8mbf.py\", line 43,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvyuz8mbf.py\"\
    , line 30, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if b < c and a < c:\n        if b > c:\n \
    \           return (b + c) % (a == b) == c\n        elif a > b:\n            return\
    \ (b + c) % (a == b) == c\n        else:\n            return (b + c) % (a == b)\
    \ == c\n    elif a == b and b > c:\n        return True\n    elif b == c and c\
    \ > a:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp74cia_9s.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp74cia_9s.py\", line 42,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp74cia_9s.py\"\
    , line 29, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmp74cia_9s.py\"\
    , line 19, in right_angle_triangle\n    return (b + c) % (a == b) == c\nZeroDivisionError:\
    \ integer division or modulo by zero\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # check if the three sides are equal\n\
    \    if a == b == c: \n        return True\n    elif abs(a-b) > abs(c-b):\n  \
    \      # check if the two middle sides are equal\n        if a == c:\n       \
    \     return True\n        else:\n            return False\n    elif abs(a-b)\
    \ < abs(c-b):\n        # check if the two middle sides are equal\n        if b\
    \ == c:\n            return True\n        else:\n            return False\n  \
    \  else:\n        return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05svbgfa.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp05svbgfa.py\", line 46,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp05svbgfa.py\"\
    , line 33, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    a_length = math.sqrt(a**2 + b**2)\n\
    \    b_length = math.sqrt(c**2 + b**2)\n    c_length = math.sqrt(a**2 + c**2)\n\
    \    \n    \n    if a_length == b_length and a_length == c_length:\n        return\
    \ True\n    elif b_length == c_length:\n        return True\n    else:\n     \
    \   return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9r49ka3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmps9r49ka3.py\", line 41,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmps9r49ka3.py\"\
    , line 28, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmps9r49ka3.py\"\
    , line 14, in right_angle_triangle\n    a_length = math.sqrt(a**2 + b**2)\nNameError:\
    \ name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    a_length = abs(a - b)\n    b_length = abs(b\
    \ - c)\n    c_length = abs(c - a)\n    if b_length == a_length and c_length ==\
    \ a_length:\n        return True\n    elif b_length >= a_length and c_length >=\
    \ a_length:\n        return True\n    else:\n        return False\n    \n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeas8kwym.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpeas8kwym.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpeas8kwym.py\"\
    , line 26, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    \n    # Calculate the hypotenuse.\n    hypotenuse\
    \ = math.sqrt(a**2 + b**2 + c**2)\n\n    # Calculate the area of the triangle\
    \ using the hypotenuse.\n    trianglearea = hypotenuse * 0.5\n\n    # Calculate\
    \ the circumference of the triangle.\n    trianglecircumference = 2 * math.pi\
    \ * hypotenuse\n    \n    # Calculate the area of the triangle.\n    trianglearea\
    \ = trianglecircumference / 2\n\n    # Calculate the right angle of the triangle\n\
    \    triangleangle = trianglearea * math.tan(math.radians(45 - 45 * acos((b *\
    \ b + c * c) / (a * a)))) * 0.5\n\n    # Calculate the hypotenuse\n    hypotenuse\
    \ = math.sqrt(a**2 + b**2 + c**2)\n\n    # Check if triangle is a right-angle\n\
    \    if triangleangle < hypotenuse:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoxc5t_c2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpoxc5t_c2.py\", line 52,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpoxc5t_c2.py\"\
    , line 39, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpoxc5t_c2.py\"\
    , line 15, in right_angle_triangle\n    hypotenuse = math.sqrt(a**2 + b**2 + c**2)\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        return True\n    return False\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzg8mnftn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzg8mnftn.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzg8mnftn.py\"\
    , line 21, in check\n    assert candidate(2, 2, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    return (c-a) * c + (b-a) * (b-a) + (c-a) *\
    \ (c-a) == 0\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k1rngy8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8k1rngy8.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8k1rngy8.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    dis = math.sqrt(math.pow(b,2)-math.pow(a,2))\n\
    \    return dis >= math.pow(c, 2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprda447ne.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprda447ne.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprda447ne.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmprda447ne.py\"\
    , line 13, in right_angle_triangle\n    dis = math.sqrt(math.pow(b,2)-math.pow(a,2))\n\
    NameError: name 'math' is not defined\n"
  stdout: ''
  timestamp: 1659976916
- exit_code: -1
  program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1,\
    \ 2, 3)\n    False\n    \"\"\"\n    ab = abs(b - a)\n    cb = abs(c - b)\n   \
    \ return (ab == cb) or (ab == (ab * cb) / abs(a - c))\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpf_1nsm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptpf_1nsm.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptpf_1nsm.py\"\
    , line 20, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659976916
