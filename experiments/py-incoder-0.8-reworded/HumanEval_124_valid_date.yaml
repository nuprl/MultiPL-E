name: HumanEval_124_valid_date
language: py
prompt: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
  \ which validates a given date string and\n    returns True if the date is valid\
  \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n\
  \    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n\
  \    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
  \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
  \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
  \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
  \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
  \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
  \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
  \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
  \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\
  \ntest_check()\n"
completions: ["    \n    # 1. Check if the string is empty\n    if date == '':\n \
    \       return False\n    \n    # 2. Check if the number of days in month is less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    if len(date) ==\
    \ 4:\n        if int(date[0]) > 11 or int(date[0]) < 1:\n            return False\n\
    \        if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n\
    \        if int(date[2]) > 30 or int(date[2]) < 1:\n            return False\n\
    \        if int(date[0]) == 2 and int(date[1]) > 29:\n            return False\n\
    \    elif len(date) == 6:\n        if int(date[0]) > 11 or int(date[0]) < 1:\n\
    \            return False\n        if int(date[1]) > 31 or int(date[1]) < 1:\n\
    \            return False\n        if int(date[2]) > 30 or int(date[2]) < 1:\n\
    \            return False\n        if int(date[3]) > 30 or int(date[3]) < 1:\n\
    \            return False\n        if int(date[4]) > 30 or int(date[4]) < 1:\n\
    \            return False\n        if int(date[5]) > 30 or int(date[5]) < 1:\n\
    \            return False\n        if int(date[0]) == 2 and int(date[1]) > 29:\n\
    \            return False\n    else:\n        return False\n    \n    # 3. Check\
    \ if the month is less than 1 or higher than 12\n    if len(date) == 4:\n    \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n            return False\n   \
    \     if int(date[1]) > 12 or int(date[1]) < 1:\n            return False\n  \
    \      if int(date[2]) > 12 or int(date[2]) < 1:\n            return False\n \
    \       if int(date[0]) == 2 and int(date[1]) > 12:\n            return False\n\
    \    elif len(date) == 6:\n        if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \            return False\n        if int(date[1]) > 12 or int(date[1]) < 1:\n\
    \            return False\n        if int(date[2]) > 12 or int(date[2]) < 1:\n\
    \            return False\n        if int(date[3]) > 12 or int(date[3]) < 1:\n\
    \            return False\n        if int(date[4]) > 12 or int(date[4]) < 1:\n\
    \            return False\n        if int(date[5]) > 12 or int(date[5]) < 1:\n\
    \            return False\n        if int(date[0]) == 2 and int(date[1]) > 12:\n\
    \            return False\n    else:\n        return False\n    \n    # 4. Check\
    \ if the year is less than 1 or higher than current year\n    if len(date) ==\
    \ 4:\n        if int(date[0]) > int(datetime.datetime.now().year) or int(date[0])\
    \ < 1:\n            return False\n        if int(date[1]) > int(datetime.datetime.now().year)\
    \ or int(date[1]) < 1:\n            return False\n        if int(date[2]) > int(datetime.datetime.now().year)\
    \ or int(date[2]) < 1:\n            return False\n        if int(date[0]) == 2\
    \ and int(date[1]) > int(datetime.datetime.now().year) - 1:\n            return\
    \ False\n    elif len(date) == 6:\n        if int(", "    day, month, year = date[0:2],\
    \ date[2:4], date[4:6]\n    if len(date) < 1:\n        return False\n    if month\
    \ in [1, 2, 3, 4, 5, 6, 9, 10] and day in [1, 3, 5] and len(day) == 1:\n     \
    \   return True\n    if month in [1, 3, 5, 7, 8, 10, 12] and day in [1, 3, 5]\
    \ and len(day) == 2:\n        return True\n    if month in [2, 4] and day in [1,\
    \ 3, 5] and len(day) == 1:\n        return True\n    if month in [4, 6, 9, 11]\
    \ and day in [1, 3, 5] and len(day) == 2:\n        return True\n    if month ==\
    \ 2:\n        if len(day) == 2:\n            if day in [1, 3]:\n             \
    \   return True\n    return False\n\n", "    if not date:\n        return False\n\
    \    else:\n        months = ['01', '03', '05', '07', '08', '10', '12']\n    \
    \    days = ['01', '03', '05', '07', '08', '10', '12', '29']\n        if len(date.split('-'))\
    \ != 3:\n            return False\n        year, month, day = date.split('-')\n\
    \        day = int(day)\n        month = int(month)\n        year = int(year)\n\
    \        if (month < 1 or month > 12):\n            return False\n        if (day\
    \ < 1 or day > 30):\n            return False\n        if (month == 2 and day\
    \ > 29):\n            return False\n        if month in months and day in days\
    \ and year in range(1901, 2021):\n            return True\n        else:\n   \
    \         return False\n\n", "    return not bool(date) and len(date) < 1 and\
    \ len(date) > 31 and date[2] == '-' and (date[3:] in MONTHS_DICT or date[3:] in\
    \ MONTH_OF_YEAR_DICT or date[3:] in MONTH_DICT_INV) and len(date) > 10\n\n", " \
    \   days = 0\n    months = 0\n\n    if not date:\n        return False\n\n   \
    \ date_split = date.split('/')\n    if date_split[0].isdigit():\n        days\
    \ += date_split[0]\n    else:\n        return False\n\n    if date_split[1].isdigit():\n\
    \        months += date_split[1]\n    else:\n        return False\n\n    if months\
    \ > 12:\n        return False\n\n    if months < 1:\n        return False\n\n\
    \    if days < 1 or days > 31:\n        return False\n\n    if days < 1 or days\
    \ > 30:\n        return False\n\n    if days < 1 or days > 29:\n        return\
    \ False\n\n    return True\n\n", "    if date == '':\n        return False\n \
    \   date = date.split('-')\n    if len(date) != 3:\n        return False\n   \
    \ for num in date:\n        num = num.strip()\n        if num.isnumeric():\n \
    \           return False\n    if len(date[1]) > 1 or len(date[1]) < 3:\n     \
    \   return False\n    if len(date[2]) > 2 or len(date[2]) < 5:\n        return\
    \ False\n    try:\n        datetime.datetime.strptime(date[0], \"%m-%d-%Y\")\n\
    \    except ValueError:\n        return False\n    return True\n\n\n@pydantic.validate_arguments",
  "    # Write your code here\n    return True\n\n", "    if date == \"\" or len(date)\
    \ < 2:\n        return False\n    try:\n        dt = datetime.datetime.strptime(date,\
    \ '%d-%m-%Y')\n        if dt.month < 1 or dt.month > 12:\n            return False\n\
    \        if dt.day < 1 or dt.day > 30:\n            return False\n        if dt.year\
    \ < 1900:\n            return False\n        return True\n    except ValueError:\n\
    \        return False\n\n", "    day = int(date[-2:])\n    month = int(date[:2])\n\
    \    year = date[2:4]\n\n    if day < 1 or day > 31:\n        return False\n\n\
    \    if month < 1 or month > 12:\n        return False\n\n    if month == 2 and\
    \ day < 1 or day > 29:\n        return False\n\n    if month in [4, 6, 9, 11]\
    \ and day < 1 or day > 30:\n        return False\n\n    return True\n\n", '    pass',
  "    pass\n\n", "    pass\n", "    pass\n", "    if not date:\n        return False\n\
    \n    if not date.strip():\n        return False\n\n    try:\n        days_no\
    \ = int(date[-3:-2])\n        if days_no < 1 or days_no > 31:\n            return\
    \ False\n\n        months_no = int(date[-2:])\n        if months_no < 1 or months_no\
    \ > 12:\n            return False\n\n        date = date[:-3]\n\n        if date[-2:].isdigit():\n\
    \            date = date[:-2]\n\n        return all(int(date[index:index + 3])\
    \ for index in range(0, 2, 3))\n    except Exception:\n        return False\n\n",
  "    if date == '':\n        return False\n    date_array = date.split('-')\n  \
    \  if len(date_array) != 3:\n        return False\n    if (int(date_array[0])\
    \ not in range(1, 13)\n            or int(date_array[1]) not in range(1, 32)\n\
    \            or int(date_array[2]) not in range(2000, 2050)):\n        return\
    \ False\n    return True\n\n", "    # Write code here\n\n    if not date:\n  \
    \      return False\n    if len(date) < 4 or len(date) > 7:\n        return False\n\
    \    if date[0] != '0':\n        return False\n    date = date.split('-')\n  \
    \  if len(date) != 3:\n        return False\n    if not date[1].isdigit() or not\
    \ date[2].isdigit():\n        return False\n    months = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', '10', '11', '12']\n    if date[1] in months and\
    \ date[2] in months:\n        if len(date[1]) == 1 and len(date[2]) == 1:\n  \
    \          return True\n        month_days = calendar.monthrange(int(date[0]),\
    \ int(date[1]))[1]\n        days = [int(date[1]), int(date[2])]\n        if month_days\
    \ == days:\n            return True\n    return False\n\n", "    # TODO Your code\
    \ here!\n    return True\n\n", "    valid_date_format = False\n    if not date:\n\
    \        return False\n    split_date = date.split('-')\n    if len(split_date)\
    \ != 3:\n        return False\n    try:\n        int(split_date[0])\n    except\
    \ ValueError:\n        return False\n    try:\n        int(split_date[1])\n  \
    \  except ValueError:\n        return False\n    try:\n        int(split_date[2])\n\
    \    except ValueError:\n        return False\n    months = ['1', '3', '5', '7',\
    \ '8', '10', '12']\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \    if split_date[1] not in months:\n        return False\n    if split_date[2]\
    \ not in days:\n        return False\n    split_date = split_date[0] + '-' + split_date[1]\
    \ + '-' + split_date[2]\n    try:\n        datetime.datetime.strptime(split_date,\
    \ '%m-%d-%Y')\n    except ValueError:\n        return False\n    valid_date_format\
    \ = True\n    return valid_date_format\n\n", "    date, *days_str = date.split()\n\
    \    days = 0\n    for day in days_str:\n        if day[-1] in \"0123456789\"\
    :\n            day = day[:-1]\n        days += day\n    if days < 1 or days >\
    \ 31:\n        return False\n    month = date[0:2]\n    if month in \"01\":\n\
    \        month = 1\n    elif month in \"04\":\n        month = 4\n    elif month\
    \ in \"06\":\n        month = 6\n    elif month in \"09\":\n        month = 9\n\
    \    elif month in \"11\":\n        month == 11\n    else:\n        return False\n\
    \    if len(days_str) > 0 and len(days_str[0]) > 1:\n        if days_str[0].count(\"\
    -\") != 1:\n            return False\n        date_parts = date.split(\"-\")\n\
    \        days += int(date_parts[1]) + int(date_parts[2])\n    if days > 30 or\
    \ month > 12:\n        return False\n    return True\n\n", "    if not len(date):\n\
    \        return False\n\n    date_components = date.split(\"/\")\n    if len(date_components)\
    \ != 3:\n        return False\n\n    day, month, year = date_components\n    if\
    \ not year.isdigit():\n        return False\n\n    if month.isdigit():\n     \
    \   if year.isdigit():\n            if not 1 <= int(month) <= 12:\n          \
    \      return False\n        else:\n            return False\n    else:\n    \
    \    return False\n\n    months = [12, 1, 4, 6, 7, 10, 11]\n    if int(month)\
    \ not in months:\n        return False\n\n    days = [31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31]\n    if int(day) < 1 or int(day) > days[month - 1]:\n\
    \        return False\n\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
