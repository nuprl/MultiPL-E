language: py
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ n: isinstance(n, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if type(i) == int]\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821031
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ i: isinstance(i, int), values))\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821031
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(lambda\
    \ value: isinstance(value, int), values))\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821031
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered = []\n    for\
    \ value in values:\n        try:\n            filtered.append(int(value))\n  \
    \      except ValueError:\n            pass\n    return filtered\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt5df0xm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppt5df0xm.py\", line 24,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmppt5df0xm.py\", line\
    \ 20, in check\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n\
    \  File \"/tmp/tmppt5df0xm.py\", line 13, in filter_integers\n    filtered.append(int(value))\n\
    TypeError: int() argument must be a string, a bytes-like object or a real number,\
    \ not 'dict'\n"
  stdout: ''
  timestamp: 1659821031
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: -1
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) if\
    \ isinstance(value, str) and value.isdigit() else value for value in values]\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptouiz2gw.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmptouiz2gw.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmptouiz2gw.py\", line\
    \ 14, in check\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659821031
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {  }, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
