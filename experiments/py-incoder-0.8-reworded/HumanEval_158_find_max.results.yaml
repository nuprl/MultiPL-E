name: HumanEval_158_find_max
language: py
results:
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    return max(set(words), key=lambda word: len(word))\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif96d1n3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpif96d1n3.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpif96d1n3.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    pass\n\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbj0l1nw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfbj0l1nw.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfbj0l1nw.py\", line 21,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    word_count = {}\n    for word in words:\n        if word not in word_count:\n\
    \            word_count[word] = 1\n        else:\n            word_count[word]\
    \ += 1\n\n    if max(word_count.values()) == 1 and min(word_count.keys()) == len(words):\n\
    \        return min(word_count.keys())\n    else:\n        return find_max(sorted(words,\
    \ key=lambda x:word_count[x], reverse=True))\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgh1j357q.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgh1j357q.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgh1j357q.py\", line 29,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpgh1j357q.py\", line 26, in find_max\n    return find_max(sorted(words,\
    \ key=lambda x:word_count[x], reverse=True))\n  File \"/tmp/tmpgh1j357q.py\",\
    \ line 26, in find_max\n    return find_max(sorted(words, key=lambda x:word_count[x],\
    \ reverse=True))\n  File \"/tmp/tmpgh1j357q.py\", line 26, in find_max\n    return\
    \ find_max(sorted(words, key=lambda x:word_count[x], reverse=True))\n  [Previous\
    \ line repeated 991 more times]\n  File \"/tmp/tmpgh1j357q.py\", line 23, in find_max\n\
    \    if max(word_count.values()) == 1 and min(word_count.keys()) == len(words):\n\
    RecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    if len(words) < 2:\n        return ''\n    unique_chars = {}\n    unique_chars_idx\
    \ = 0\n    unique_chars_max = -1\n    unique_chars_idx = 0\n    for word in words:\n\
    \        if len(word) >= unique_chars_max:\n            unique_chars_max = len(word)\n\
    \        unique_chars[word] = unique_chars.get(word, 0) + 1\n    unique_chars_keys\
    \ = list(unique_chars.keys())\n    unique_chars_keys.sort(key=lambda x: unique_chars[x],\
    \ reverse=True)\n    unique_chars_keys.sort(key=lambda x: len(x), reverse=True)\n\
    \    for word in unique_chars_keys:\n        if len(word) == unique_chars_max:\n\
    \            return word\n        unique_chars_idx += 1\n        if unique_chars_idx\
    \ >= len(unique_chars_keys):\n            break\n    if unique_chars_idx == len(unique_chars_keys):\n\
    \        return words[0]\n    return ''\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4yazu_xe.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp4yazu_xe.py\", line 52,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp4yazu_xe.py\", line 41,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    # start coding here\n    unique_chars = []\n    unique_words = {}\n  \
    \  words_with_char = []\n    for word in words:\n        word = word.lower()\n\
    \        unique_chars.append(len(word))\n        for letter in word:\n       \
    \     if letter not in unique_words:\n                unique_words[letter] = [word]\n\
    \            else:\n                unique_words[letter].append(word)\n      \
    \          \n    for letter in unique_chars:\n        if letter in words_with_char:\n\
    \            words_with_char[unique_chars.index(letter)].sort()\n        else:\n\
    \            words_with_char.append(unique_words[letter])\n    \n    if words_with_char.count(words_with_char[0])\
    \ == len(words_with_char):\n        return words_with_char[0]\n    \n    max_length\
    \ = 0\n    words_with_char.sort()\n    for word in words_with_char:\n        max_length\
    \ = max_length if len(word) > max_length else len(word)\n        if word == words_with_char[-1]:\n\
    \            break\n    \n    return words_with_char[words_with_char.index(words_with_char[-1])\
    \ - max_length]\n            \n            \n            \n            \n    \
    \        \n            \n            \n            \n            \n          \
    \  \n            \n            \n            \n            \n            \n  \
    \          \n            \n            \n            \n            \n        \
    \    \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3p3077y.py\", line\
    \ 217, in <module>\n    test_check()\n  File \"/tmp/tmpu3p3077y.py\", line 215,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu3p3077y.py\", line 203,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpu3p3077y.py\", line 33, in find_max\n    words_with_char.append(unique_words[letter])\n\
    KeyError: 4\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu96ljeic.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu96ljeic.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu96ljeic.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    dic = {}\n    for word in words:\n        num = dic[word]\n        if\
    \ num:\n            if num > len(word):\n                return word\n       \
    \ else:\n            dic[word] = 1\n    return words[0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz1wm8mv.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphz1wm8mv.py\", line 39,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphz1wm8mv.py\", line 27,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmphz1wm8mv.py\", line 18, in find_max\n    num = dic[word]\nKeyError:\
    \ 'name'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    # Fill this in.\n    return ''\n\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjj1swsq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgjj1swsq.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgjj1swsq.py\", line 21,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    # TODO your solution here\n\n    return \"\"\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx01e2xl5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx01e2xl5.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpx01e2xl5.py\", line 21,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    # to_store is list\n    to_store = dict()\n    # loop through list\n \
    \   for word in words:\n        # find word as key\n        if word not in to_store:\n\
    \            # increment count\n            to_store[word] = 1\n        else:\n\
    \            # add count to value\n            to_store[word] += 1\n    # sort\
    \ by count in descending order\n    return sorted(to_store, key = lambda k: to_store[k],\
    \ reverse=True)[0]\n\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8oheegxr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8oheegxr.py\", line 44,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8oheegxr.py\", line 32,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    words_list = []\n    for word in words:\n        words_list.append(word.lower())\n\
    \    unique_set = set(words_list)\n    max_count = 0\n    count_list = {}\n  \
    \  for word in unique_set:\n        count = count_list.get(word)\n        if count\
    \ is None:\n            count = 0\n        count_list[word] = count + 1\n    \
    \    if count > max_count:\n            max_count = count\n        if count <\
    \ len(unique_set):\n            break\n    if max_count < len(unique_set):\n \
    \       return words_list[0]\n    else:\n        return sorted(unique_set)[-1]\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xrlsy5t.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp3xrlsy5t.py\", line 50,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3xrlsy5t.py\", line 38,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhw9unb2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuhw9unb2.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpuhw9unb2.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm3cknot.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsm3cknot.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsm3cknot.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    count = {}\n    for word in words:\n        char_count = {}\n        for\
    \ char in word:\n            if char not in char_count:\n                char_count[char]\
    \ = 0\n            char_count[char] += 1\n        for char in char_count:\n  \
    \          if char_count[char] > count[char]:\n                count[char] = char_count[char]\n\
    \    return max(count, key=count.get)\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqg7h6znq.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqg7h6znq.py\", line 42,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqg7h6znq.py\", line 30,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpqg7h6znq.py\", line 24, in find_max\n    if char_count[char] > count[char]:\n\
    KeyError: 'n'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    return max((len(word), word) for word in words)[1]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nujh2xx.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9nujh2xx.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9nujh2xx.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskf531wl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskf531wl.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpskf531wl.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    return words[0]\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitmdiqpd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpitmdiqpd.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpitmdiqpd.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    counts = collections.Counter(char for word in words for char in word)\n\
    \    return counts.most_common()[0][0]\n\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72elpdei.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp72elpdei.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp72elpdei.py\", line 21,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmp72elpdei.py\", line 16, in find_max\n    counts = collections.Counter(char\
    \ for word in words for char in word)\nNameError: name 'collections' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    if len(words) == 0:\n        return ''\n    \n    characters = set()\n\
    \    \n    for word in words:\n        characters.update(word)\n        \n   \
    \ return sorted(characters, key=lambda x: (characters.count(x), x), reverse=True)[0]\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5nn4cmi.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpg5nn4cmi.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpg5nn4cmi.py\", line 29,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpg5nn4cmi.py\", line 25, in find_max\n    return sorted(characters,\
    \ key=lambda x: (characters.count(x), x), reverse=True)[0]\n  File \"/tmp/tmpg5nn4cmi.py\"\
    , line 25, in <lambda>\n    return sorted(characters, key=lambda x: (characters.count(x),\
    \ x), reverse=True)[0]\nAttributeError: 'set' object has no attribute 'count'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1fo04wj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo1fo04wj.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpo1fo04wj.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
