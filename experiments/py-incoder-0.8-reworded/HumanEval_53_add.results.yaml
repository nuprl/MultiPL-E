language: py
name: HumanEval_53_add
results:
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<cell>\n%timeit add(2, 3)\n%timeit add(5, 7)\n</cell>\n<text>\n\
    We can also annotate our functions with docstrings.\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2oaqvvyi.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823308
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@function\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnu1q5iv.py\", line\
    \ 11, in <module>\n    @function\nNameError: name 'function' is not defined\n"
  stdout: ''
  timestamp: 1659823308
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x > y:\n\
    \        return x + y\n    return y + x\n\n\ndef check(candidate):\n    assert\
    \ candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2,\
    \ 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\
    \ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823308
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x >= y:\n\
    \        return x + y\n    else:\n        return y + x\n\n\ndef check(candidate):\n\
    \    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert\
    \ candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7,\
    \ 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5khuh728.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@njit\ndef check(candidate):\n    assert candidate(0, 1) == 1\n   \
    \ assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpab973czu.py\", line\
    \ 11, in <module>\n    @njit\nNameError: name 'njit' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@dataclass(frozen=True)\ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg4vnb51.py\", line\
    \ 11, in <module>\n    @dataclass(frozen=True)\nNameError: name 'dataclass' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@curry2\ndef check(candidate):\n    assert candidate(0, 1) == 1\n \
    \   assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdiy82rh0.py\", line\
    \ 11, in <module>\n    @curry2\nNameError: name 'curry2' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n@njit\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsosm1ex.py\", line\
    \ 10, in <module>\n    @njit\nNameError: name 'njit' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@example\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphp2gdztf.py\", line\
    \ 11, in <module>\n    @example\nNameError: name 'example' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<cell>\nassert add(2, 3) == 5\nassert add(5, 7) == 12\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw_ed95bo.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<cell>\nadd(x=2, y=3)\n</cell>\n<text>\nWhat if we want to add\
    \ an additional parameter?\nJust define a new function with the same name as the\
    \ existing one, but with one extra parameter:\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert\
    \ candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7,\
    \ 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpowg2yzte.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5khuh728.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</code>\nThe only other way to do it would be to make the code global,\
    \ but this is often a bad idea due to security concerns.\n<|/ a |>\n<| c |>\n\
    That is true but doesn't answer the question at all.\n<|/ c |>\n<| c |>\nI didn't\
    \ answer because I thought it would only be an option in a very specific case\
    \ (as it is an example of how to do it, not how it should be done). I've edited\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nThat's still no answer to the question\
    \ at all. You should edit it to make it less \"theoretical\". People who are trying\
    \ to figure out how it works \"normally\" are trying to figure out how it works\
    \ in practice.\n<|/ c |>\n<| c |>\nMy intention is to make the answers more technically\
    \ correct. I've done it now. Thanks for your input.\n<|/ c |>\n<| a dscore=1 tags=python-3.x,python\
    \ |>\nPython is interpreted, so there is no direct way to get this working. What\
    \ you can do is create your function as a string and evaluate it.\n<code>\ndef\
    \ check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_suak6un.py\", line 13\n    That is true but doesn't answer\
    \ the question at all.\n                          ^\nSyntaxError: unterminated\
    \ string literal (detected at line 13)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@test_main\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph614pap7.py\", line\
    \ 11, in <module>\n    @test_main\nNameError: name 'test_main' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@register_decorator(add)\ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd0qz9w5.py\", line\
    \ 11, in <module>\n    @register_decorator(add)\nNameError: name 'register_decorator'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<text>\nWe can test our function using Jupyter's magic command.\n\
    \n\n</text>\n<cell>\n%run add.py\n</cell>\n<text>\nMagics get automatically loaded\
    \ when you run a cell, even if that cell hasn't been run before.\n\n\n</text>\n\
    <cell>\nadd(1, 3)\n</cell>\n<cell>\nadd(5, 7)\n</cell>\n<text>\nUsing imports\n\
    \n</text>\n<text>\nWe often want to use functions from other modules in our programs.\
    \ We can do this by adding the name of the module to the function call.\n\n\n\
    </text>\n<cell>\nfrom math import sqrt\n</cell>\n<cell>\nsqrt(4)\n</cell>\n<text>\n\
    We can import all the modules in our program using the wildcard import.\n\n\n\
    </text>\n<cell>\nfrom math import *\n</cell>\n<cell>\nsqrt(4)\n</cell>\n<text>\n\
    Notice that when we use import * the names from each module can be accessed using\
    \ dot notation.\n\n\n</text>\n<cell>\nsqrt(4).real\n</cell>\n<text>\nThe same\
    \ goes for functions from subpackages.\n\n\n</text>\n<cell>\nfrom numpy import\
    \ *\n</cell>\n<cell>\nlinspace\n</cell>\n<text>\nNotice that we can also do relative\
    \ imports. For example, we can use\n\nfrom . import foo\ninstead of\n\nfrom foo\
    \ import bar\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpihfnbcqp.py\", line 11\n    We can test our function using\
    \ Jupyter's magic command.\n                                          ^\nSyntaxError:\
    \ unterminated string literal (detected at line 11)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@doctest()\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_c0w_uq.py\", line\
    \ 11, in <module>\n    @doctest()\nNameError: name 'doctest' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@njit\ndef check(candidate):\n    assert candidate(0, 1) == 1\n   \
    \ assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpab973czu.py\", line\
    \ 11, in <module>\n    @njit\nNameError: name 'njit' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@curry\ndef check(candidate):\n    assert candidate(0, 1) == 1\n  \
    \  assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ryd0njt.py\", line\
    \ 11, in <module>\n    @curry\nNameError: name 'curry' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<text>\nFunctions return values\nIn Python, functions return values.\
    \ This means that they don't just do the computation for you, but instead return\
    \ a value that you can then use to do something else.\n\n\n</text>\n<text>\nFunctions\n\
    \n</text>\n<text>\nFunctions are a great way to organize your code and make it\
    \ reusable. The best way to see this is by example. Here we will define two functions.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(0, 1) == 1\n\
    \    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert\
    \ candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplot_7b_0.py\", line 12\n    In Python, functions return\
    \ values. This means that they don't just do the computation for you, but instead\
    \ return a value that you can then use to do something else.\n               \
    \                                                 ^\nSyntaxError: unterminated\
    \ string literal (detected at line 12)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x == 0:\n\
    \        return y\n    if y == 0:\n        return x\n    return x + add(x-1, y-1)\n\
    \ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wbahqlo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0wbahqlo.py\", line 22,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp0wbahqlo.py\", line 17, in check\n\
    \    assert candidate(2, 3) == 5\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@test\ndef check(candidate):\n    assert candidate(0, 1) == 1\n   \
    \ assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm8hofeol.py\", line\
    \ 11, in <module>\n    @test\nNameError: name 'test' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\nprint(add(2, 3))\nprint(add(5, 7))\n</cell>\n<text>\nFunctions in Python\
    \ work a little differently from functions in other languages.  A function definition\
    \ does not end with return like other language functions.  In addition to returning\
    \ an object, a return statement also exits a function.\n\nPython functions work\
    \ very differently from other languages.  The most important concept is variable\
    \ scope.\n\nA function has its own namespace for storing all the variables and\
    \ other objects.  When a function is called it operates on the local namespace\
    \ for that function.  Once the function returns, the namespace is destroyed.\n\
    \nPython uses dynamic scoping.  This means that a variable defined within a function\
    \ is different from variables defined in the global namespace.  This means that\
    \ the variable defined in the global namespace can be modified by other parts\
    \ of the program while the variable in the local namespace cannot.\n\nPython functions\
    \ return None implicitly if there is no return statement.  So you do not have\
    \ to explicitly return None in a function if you do not want to.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdh2uymxs.py\", line 12\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x != 0\
    \ and y != 0:\n        return x + y\n    if y != 0:\n        return 0\n    if\
    \ x != 0:\n        return x\n\ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpip320btt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpip320btt.py\", line 23,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpip320btt.py\", line 16, in check\n\
    \    assert candidate(0, 1) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@deco\ndef check(candidate):\n    assert candidate(0, 1) == 1\n   \
    \ assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6qeobd6.py\", line\
    \ 11, in <module>\n    @deco\nNameError: name 'deco' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@njit\ndef check(candidate):\n    assert candidate(0, 1) == 1\n   \
    \ assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpab973czu.py\", line\
    \ 11, in <module>\n    @njit\nNameError: name 'njit' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@doctest def subtract(x: int, y: int) -> int:\n    \"\"\"Subtract two\
    \ numbers x and y\n    >>> subtract(3, 5)\n    1\n    >>> subtract(7, 3)\n   \
    \ 5\n    \"\"\"\n    return x - y\n\n\n@doctest def multiply(x: int, y: int) ->\
    \ int:\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(3, 7)\n    21\n\
    \    \"\"\"\n    return x * y\n\n\n@doctest def divide(x: int, y: int) -> int:\n\
    \    \"\"\"Divide two numbers x and y\n    >>> divide(6, 4)\n    3\n    \"\"\"\
    \n    return x / y\n\n\n@doctest def power(x: int,\n             y: int) -> int:\n\
    \    \"\"\"Calculate x^y\n    >>> power(5, 3)\n    125\n    \"\"\"\n    return\
    \ pow(x, y)\n\n\n@doctest def modulus(x: int, y: int ) -> int:\n    \"\"\"Calculate\
    \ x % y\n    >>> modulus(2, 7)\n    1\n    \"\"\"\n    return x % y\n\n\n@doctest\
    \ def negative(x: int) -> None:\n    \"\"\"Calculate negative x\n    >>> negative(-1)\n\
    \    0\n    \"\"\"\n    return -x\n\n\n@doctest def positive(x: int) -> None:\n\
    \    \"\"\"Calculate positive x\n    >>> positive(1)\n    1\n    \"\"\"\n    return\
    \ +x\n\n\n@doctest def absolute(x: int) -> None:\n    \"\"\"Calculate absolute\
    \ x\n    >>> absolute(0)\n    0\n    >>> absolute(-4)\n    4\n    \"\"\"\n   \
    \ return abs(x)\n\n\n@doctest def float(x: float) -> None:\n    \"\"\"Calculate\
    \ floating point number x\n    >>> float(1)\n    1.0\n    \"\"\"\n    return x\n\
    \n\n@doctest def identity(x: Any) -> None:\n    \"\"\"Identity function\n    >>>\
    \ identity('a string')\n    'a string'\n    \"\"\"\n    return x\n\n\n@doctest\
    \ def addError(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y and\
    \ report error\n    >>> addError(2, 3)\n    Traceback (most recent call last):\n\
    \        ...\n    TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\
    \    \"\"\"\n    return x + y\n\n\n@doctest def addErrorStr(x: int, y: str) ->\
    \ int:\n    \"\"\"Add two numbers x and y and report error\n    >>> addErrorStr(2,\
    \ 3)\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported\
    \ operand type(s) for +: 'int' and 'str'\n    \"\"\"\n    return x + y\n\n\n@doctest\
    \ def addErrorInt(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y and\
    \ report error\n    >>> addErrorInt(2, 3)\n    Traceback (most recent call last):\n\
    \        ...\n    TypeError: unsupported operand type(s) for +: 'int' and 'int'\n\
    \    \"\"\"\n    return x + y\n\n\n@doctest def addErrorFloat(x: int, y: int)\
    \ -> float:\n    \"\"\"Add two \ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpksqcisr6.py\", line 127\n    \"\"\"Add two \n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 138)\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n</cell>\n<text>\nPart 2: Functional Programming\nWhy Functional Programming\
    \ is Good\nHigher order functions allow us to do many things, but are often more\
    \ difficult\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpq8x6n96j.py\", line 9\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: -1
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\n@dec.skip\n@dec.skip\ndef check(candidate):\n    assert candidate(0,\
    \ 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n\
    \    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6w6txja2.py\", line\
    \ 11, in <module>\n    @dec.skip\nNameError: name 'dec' is not defined\n"
  stdout: ''
  timestamp: 1659976023
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert\
    \ candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5,\
    \ 7) == 12\n    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
- exit_code: 0
  program: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n \
    \   >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x\
    \ + y\n\ndef check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
    \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n\
    \    assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823294
