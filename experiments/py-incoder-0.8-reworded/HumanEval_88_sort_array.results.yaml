language: py
name: HumanEval_88_sort_array
results:
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array.copy()\n    \n   \
    \ # Sort array in ascending order if the sum( first index value, last index value)\
    \ is odd.\n    # Otherwise, sort it in descending order if the sum( first index\
    \ value, last index value) is even.\n    for i in range(1, len(array)):\n    \
    \    if ((array[i-1] + array[i]) % 2 != 0):\n            array_copy[i], array_copy[i-1]\
    \ = array_copy[i-1], array_copy[i]\n    return array_copy\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4joptee.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpc4joptee.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc4joptee.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array, key = lambda x:x-array[-1]\
    \ if x%2==0 else -x-array[-1])\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_z2l0ze.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpo_z2l0ze.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpo_z2l0ze.py\", line 27,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_sum = sum(array)\n    if array_sum\
    \ % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array,\
    \ reverse=True)\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9blg8sl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpw9blg8sl.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw9blg8sl.py\", line 31,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    return array\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplow7q1gv.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplow7q1gv.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplow7q1gv.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_first_and_last_element = sum(array[0],\
    \ array[-1])\n    if sum_of_first_and_last_element % 2 == 1:\n        array.sort()\n\
    \    else:\n        array.reverse()\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qkxtma2.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6qkxtma2.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6qkxtma2.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6qkxtma2.py\", line\
    \ 22, in sort_array\n    sum_of_first_and_last_element = sum(array[0], array[-1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_first, sum_last = sum(array[0]),\
    \ sum(array[-1])\n    if sum_first % 2 == 0:\n        sorted_array = [item for\
    \ item in array if item < sum_last]\n    else:\n        sorted_array = [item for\
    \ item in array if item > sum_first]\n    return sorted_array\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuas8830i.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuas8830i.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpuas8830i.py\", line 30,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuas8830i.py\", line\
    \ 22, in sort_array\n    sum_first, sum_last = sum(array[0]), sum(array[-1])\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_first, sum_last = array[0], array[-1]\n\
    \    if sum_first + sum_last == 0:\n        return array\n    if sum_first + sum_last\
    \ < 0:\n        return array\n    if sum_first + sum_last % 2 == 0:\n        return\
    \ sorted(array)\n    return sorted(array, key = lambda x: x - array[array.index(x)])\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph45tliqg.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmph45tliqg.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph45tliqg.py\", line 32,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmph45tliqg.py\", line\
    \ 22, in sort_array\n    sum_first, sum_last = array[0], array[-1]\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or len(array) < 2:\n   \
    \     return array\n    sum = 0\n    for i in range(len(array) - 1):\n       \
    \ sum += array[i]\n    sum_even = sum & 0x1\n    sum_odd = (sum + 1) % 2\n   \
    \ if sum_even < sum_odd:\n        array = list(reversed(array))\n    return array\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjunszbh.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpzjunszbh.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzjunszbh.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\
    \    if sum( array[ 0 : -1 ] ) % 2 != 0:\n        array.append( array.pop( -1\
    \ ) )\n    return array\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvwq4_yt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxvwq4_yt.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxvwq4_yt.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array.copy()\n    array_copy[0],\
    \ array_copy[-1] = array_copy[-1], array_copy[0]\n    return array_copy\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12_ftcbt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp12_ftcbt.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp12_ftcbt.py\", line 28,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp12_ftcbt.py\", line\
    \ 23, in sort_array\n    array_copy[0], array_copy[-1] = array_copy[-1], array_copy[0]\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    temp = array.copy()\n    temp[0], temp[-1]\
    \ = temp[-1], temp[0]\n    return temp\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp23kdqyxc.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or not array[0]:\n     \
    \   return array\n    if not len(array):\n        return array\n\n    res_array\
    \ = [0] * len(array)\n    sum_first_value = array[0]\n\n    i = 0\n    while i\
    \ < len(array):\n        if array[i] + sum_first_value > 0:\n            sum_first_value\
    \ += array[i]\n            res_array[i] = array[i]\n        else:\n          \
    \  sum_first_value -= array[i]\n            res_array[i] = array[i] - 1\n    \
    \    i += 1\n\n    return res_array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o8e7fk2.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp1o8e7fk2.py\", line 52,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1o8e7fk2.py\", line 45,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    array.sort()\n\
    \    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclnqgu58.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpclnqgu58.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpclnqgu58.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_ = 0\n    temp_ = 0\n    for i in\
    \ array:\n        sum_ += i\n        temp_ += i\n    if sum_ % 2:\n        temp_,\
    \ sum_ = sum_ - temp_, sum_ - sum_\n        array.sort()\n        array.extend([0]\
    \ * (sum_ - len(array) + 1))\n        return array\n    else:\n        temp_,\
    \ sum_ = temp_ - sum_, temp_ - temp_\n        array.sort()\n        array.extend([0]\
    \ * (sum_ - len(array) + 1))\n        return array\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp382kxntq.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp382kxntq.py\", line 48,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp382kxntq.py\", line 39,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nthank you so much for your solution, but can you please\
    \ explain to me the recursive call (i.e. sort_array_helper)?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer. Hope this helps :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp04vxdamx.py\", line 29\n    I added some explanation to\
    \ the answer. Hope this helps :)\n                                           \
    \                  ^\nSyntaxError: unmatched ')'\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in array:\n      \
    \  sum += i\n    if sum % 2 == 0:\n        return sorted(array)\n    else:\n \
    \       return sorted(array, reverse = True)\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2q8xkpa.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpx2q8xkpa.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpx2q8xkpa.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    array_copy = array[:]\n\
    \    for i in array_copy:\n        sum += i\n        if sum % 2:\n           \
    \ array_copy.append(i)\n            array_copy.remove(i)\n            break\n\
    \    array_copy.sort()\n    return array_copy\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16sumyfk.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp16sumyfk.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp16sumyfk.py\", line 37,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    length = len(array)\n\
    \    if length < 2:\n        return array\n    if length%2 == 1:\n        first\
    \ = array.pop(0)\n        array.insert(0, first)\n        array[-2] += first\n\
    \        return array\n    else:\n        first = array.pop(0)\n        last =\
    \ array.pop(-1)\n        array.insert(0, first)\n        array.append(last)\n\
    \        array[-2] += first\n        array[-2] += last\n        return array\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsr7j1j69.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpsr7j1j69.py\", line 50,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpsr7j1j69.py\", line 43,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_array = []\n    for i in range(len(array)):\n\
    \        sum_array.append(sum(array[0:i]))\n    sum_array.sort()\n    if sum_array[-1]\
    \ % 2:\n        sum_array.reverse()\n    array = sum_array\n    return array\n\
    \    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_le2mmor.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_le2mmor.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_le2mmor.py\", line 33,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_le2mmor.py\", line\
    \ 26, in sort_array\n    if sum_array[-1] % 2:\nIndexError: list index out of\
    \ range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or len(array) <= 1:\n  \
    \      return array\n    sum_array = sum(array)\n    odd = sum_array % 2 != 0\n\
    \    array.sort()\n    if odd:\n        array.reverse()\n    return array\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5dtkdvyv.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp5dtkdvyv.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5dtkdvyv.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # copy array and sort copy\n    array_copy\
    \ = array.copy()\n    # sort copy\n    sort_copy(array_copy)\n    return array_copy\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgpqci0b.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjgpqci0b.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjgpqci0b.py\", line 29,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjgpqci0b.py\", line\
    \ 25, in sort_array\n    sort_copy(array_copy)\nNameError: name 'sort_copy' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    stack = []\n    left_sum, right_sum =\
    \ 0, 0\n    for i in range(len(array)):\n        stack.append(array[i])\n    \
    \    left_sum += array[i]\n        right_sum += stack[-1]\n        if left_sum\
    \ % 2 == 1:\n            stack.append(stack[-1] + stack[-2])\n            left_sum\
    \ -= stack[-1] + stack[-2]\n        if right_sum % 2 == 0:\n            stack.pop()\n\
    \            right_sum -= stack[-1]\n    return stack\n</code>\n<|/ a tags=python,arrays,sorting\
    \ |>\n<| c |>\nI think this solution has some problems.\n<|/ c |>\n<| c |>\ncan\
    \ you please explain why this solution has some problems ? Because the time complexity\
    \ is O(nlogn), right?\n<|/ c |>\n<| c |>\nMy solution has O(n^2) time complexity,\
    \ but that's because of the repeated sum operation. Your solution has O(nlogn)\
    \ time complexity, but I find it complicated. I hope somebody can give a better\
    \ explanation.\n<|/ c |>\n<| c |>\nI totally agree with you . Thanks for your\
    \ effort. :)\n<|/ c |>\n<| a |>\nYou can do it like this:\n<code>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvu7yoi0_.py\", line 44\n    My solution has O(n^2) time\
    \ complexity, but that's because of the repeated sum operation. Your solution\
    \ has O(nlogn) time complexity, but I find it complicated. I hope somebody can\
    \ give a better explanation.\n                                               \
    \     ^\nSyntaxError: unterminated string literal (detected at line 44)\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    sum = 0\n    for num\
    \ in array:\n        sum = sum + num\n        if sum % 2:\n            result.append(num)\n\
    \            sum = 0\n        else:\n            sum = 0\n            result.insert(len(result)\
    \ - 1, num)\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoq7ozku0.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpoq7ozku0.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpoq7ozku0.py\", line 37,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \    mid = len(array) // 2\n    sorted = []\n    swapped = False\n    # check\
    \ if the sum of the first half and the last half is odd\n    if array[mid] % 2\
    \ == 0:\n        swapped = True\n    while len(array) > 1:\n        for i in range(mid):\n\
    \            if swapped == True:\n                if array[i] > array[i + mid]:\n\
    \                    swapped = False\n                array[i], array[i + mid]\
    \ = array[i + mid], array[i]\n            else:\n                if array[i] <\
    \ array[i + mid]:\n                    swapped = True\n                array[i],\
    \ array[i + mid] = array[i + mid], array[i]\n        sorted.append(array[0])\n\
    \        array.remove(0)\n    return sorted\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbqjhev9.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpjbqjhev9.py\", line 54,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjbqjhev9.py\", line 46,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n\
    \n    sum = 0\n    i = 0\n    j = len(array) - 1\n\n    while i < j:\n       \
    \ while i < j and array[i] < array[j]:\n            i += 1\n        while i <\
    \ j and array[i] > array[j]:\n            j -= 1\n        if i == j:\n       \
    \     break\n        if sum % 2 == 0:\n            sum -= array[j]\n        else:\n\
    \            sum += array[j]\n    array[:] = array[i:] + array[:j]\n    return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgcj9y0h.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmplgcj9y0h.py\", line 53,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplgcj9y0h.py\", line 46,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzy08kfh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkzy08kfh.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkzy08kfh.py\", line 25,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    if array[0] + array[len(array)\
    \ - 1] % 2 > 0:\n        array = array[::-1]\n    return array\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7455v12.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpt7455v12.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpt7455v12.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    odd = array.index(0)\n    even = array.index(max(array))\n\
    \    if odd > even:\n        array[even], array[odd] = array[odd], array[even]\n\
    \    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxl8_kv_g.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxl8_kv_g.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxl8_kv_g.py\", line 29,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxl8_kv_g.py\", line\
    \ 22, in sort_array\n    odd = array.index(0)\nValueError: 0 is not in list\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8ezrlba.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmps8ezrlba.py\", line 33,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmps8ezrlba.py\", line 27,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # implement here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9b9k1k9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpg9b9k1k9.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpg9b9k1k9.py\", line 27,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    \n    \n\
    \    \n    return array\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3p867j_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl3p867j_.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpl3p867j_.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_ = sum(array)\n    if sum_ % 2:\n\
    \        array.sort()\n    else:\n        array.reverse()\n    return array\n\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zgk0iui.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp7zgk0iui.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7zgk0iui.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # your code here\n    if len(array) ==\
    \ 0:\n        return []\n    else:\n        length = len(array)\n        mid =\
    \ length // 2\n        left = array[0:mid]\n        right = array[mid:]\n    \
    \    if len(left) == 0 or len(right) == 0:\n            return array\n       \
    \ else:\n            left_sum = sum(left)\n            right_sum = sum(right)\n\
    \            left_even = False\n            right_even = False\n            left_odd\
    \ = False\n            right_odd = False\n            if (left_sum % 2 == 0) and\
    \ (right_sum % 2 == 0):\n                left_even = True\n                left_odd\
    \ = False\n            elif left_sum % 2 != 0:\n                left_even = True\n\
    \                left_odd = True\n            else:\n                left_odd\
    \ = True\n                left_even = False\n            if (right_sum % 2 ==\
    \ 0) and (left_sum % 2 == 0):\n                right_even = True\n           \
    \     right_odd = False\n            elif right_sum % 2 != 0:\n              \
    \  right_even = True\n                right_odd = True\n            else:\n  \
    \              right_odd = True\n                right_even = False\n        \
    \    if left_even == True and right_even == False:\n                return sort_array(left)\
    \ + sort_array(right)\n            elif left_even == True and right_even == True:\n\
    \                return sort_array(left) + sort_array(right) + right\n       \
    \     elif left_even == False and right_even == False:\n                return\
    \ left + sort_array(right)\n            elif left_even == False and right_even\
    \ == True:\n                return left + sort_array(right) + right\n        \
    \    elif left_even == True and right_even == True:\n                return sort_array(left)\
    \ + left + right\n            elif left_odd == False and right_odd == True:\n\
    \                return left + right\n            elif left_odd == True and right_odd\
    \ == False:\n                return left + sort_array(right)\n            elif\
    \ left_odd == False and right_odd == False:\n                return left + sort_array(right)\
    \ + left\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpveq5ex7b.py\", line\
    \ 87, in <module>\n    test_check()\n  File \"/tmp/tmpveq5ex7b.py\", line 85,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpveq5ex7b.py\", line 78,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_array = []\n    for i in array:\n\
    \        sum_array.append(i)\n    sum_array = sum_array[1:]\n    sum_array.append(0)\n\
    \    sum_array.append(0)\n    sum_array = sum(sum_array)\n    if sum_array % 2\
    \ == 0:\n        return sorted(array)\n    else:\n        return sorted(array,\
    \ reverse = True)\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbw02oly.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpmbw02oly.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmbw02oly.py\", line 37,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    pass\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ky5bcxy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1ky5bcxy.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1ky5bcxy.py\", line 27,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if array == []:\n        return []\n\
    \    if len(array) == 1:\n        return array\n    if len(array) % 2 == 0:\n\
    \        return sorted(array, reverse = True)\n    return sorted(array, key =\
    \ lambda x: -x)\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xqbv8kd.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp8xqbv8kd.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8xqbv8kd.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n\
    \    elif len(array) == 1:\n        return [array[0]]\n\n    sum_array = sum(array[0:-1])\n\
    \    if sum_array % 2 == 1:\n        array.sort(reverse=True)\n    else:\n   \
    \     array.sort()\n\n    return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_6w33vq.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph_6w33vq.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph_6w33vq.py\", line 41,\
    \ in check\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\
    \    if sum(array) % 2:\n        return sorted(array, key=lambda x: x - array[-1])\n\
    \    return sorted(array, key=lambda x: x + array[0])\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86nac85e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp86nac85e.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp86nac85e.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def sort(array: List[int]) -> List[int]:\n\
    \        array.sort()\n        return array\n    def odd(array: List[int]) ->\
    \ List[int]:\n        if sum((array[0], array[-1])) % 2 == 1:\n            return\
    \ -1\n        return 0\n    def even(array: List[int]) -> List[int]:\n       \
    \ if sum((array[0], array[-1])) % 2 == 0:\n            return 1\n        return\
    \ 0\n    sort_func = odd() if sum((array[0], array[-1])) % 2 == 1 else even()\n\
    \    return sort_func(array)\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpomwlgk2k.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpomwlgk2k.py\", line 46,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpomwlgk2k.py\", line 37,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpomwlgk2k.py\", line\
    \ 33, in sort_array\n    sort_func = odd() if sum((array[0], array[-1])) % 2 ==\
    \ 1 else even()\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjt4tb4d.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprjt4tb4d.py\", line 33,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmprjt4tb4d.py\", line 24,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    copy_of_array = array.copy()\n    copy_from_beginning\
    \ = []\n    copy_from_end = []\n    copy_of_sum = 0\n    copy_of_length = len(array)\n\
    \    copy_of_length_after_sorting = 0\n\n    while copy_of_length_after_sorting\
    \ < copy_of_length:\n        copy_of_sum = sum(copy_of_array[copy_of_length_after_sorting:copy_of_length_after_sorting\
    \ + 2])\n        if copy_of_sum % 2 == 1:\n            copy_from_end.append(copy_of_array[copy_of_length_after_sorting\
    \ + 1])\n            copy_of_length_after_sorting += 1\n        else:\n      \
    \      copy_from_beginning.append(copy_of_array[copy_of_length_after_sorting])\n\
    \            copy_of_length_after_sorting += 1\n\n    copy_of_array[copy_of_length_after_sorting:]\
    \ = copy_from_end\n    copy_of_array[:copy_of_length_after_sorting] = copy_from_beginning\n\
    \    return copy_of_array\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmyd6dcz6.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpmyd6dcz6.py\", line 52,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmyd6dcz6.py\", line 44,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmpmyd6dcz6.py\",\
    \ line 32, in sort_array\n    copy_from_end.append(copy_of_array[copy_of_length_after_sorting\
    \ + 1])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \n    array_length = len(array)\n    array[:] = sorted(array)\n\n    # if the\
    \ first element and the last element sum are odd, then swap the two elements\n\
    \    if array[0] != array[-1]:\n        if array[0] > array[-1]:\n           \
    \ tmp = array[0]\n            array[0] = array[-1]\n            array[-1] = tmp\n\
    \        else:\n            tmp = array[-1]\n            array[-1] = array[0]\n\
    \            array[0] = tmp\n\n    # calculate the sum of the elements and determine\
    \ if it is even or odd\n    sum = 0\n    for i in array:\n        sum += i\n \
    \       if sum % 2 == 0:\n            return array\n        else:\n          \
    \  array.reverse()\n            return array\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gpqholm.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp2gpqholm.py\", line 60,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2gpqholm.py\", line 53,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  \n    sum_array_first_index_value: List[int] = []\n    sum_array_last_index_value:\
    \ List[int] = []\n    array_first_index_value: int = array[0]\n    array_last_index_value:\
    \ int = array[-1]\n    \n    if sum_array_first_index_value == []:\n        sum_array_first_index_value.append(array_first_index_value)\n\
    \        sum_array_last_index_value.append(array_last_index_value)\n    elif sum_array_first_index_value[0]\
    \ != array_first_index_value:\n        sum_array_first_index_value.append(array_first_index_value)\n\
    \        sum_array_last_index_value.append(array_last_index_value)\n    elif sum_array_first_index_value[-1]\
    \ == array_last_index_value:\n        sum_array_first_index_value.append(array_first_index_value)\n\
    \        sum_array_last_index_value.append(array_last_index_value)\n    else:\n\
    \        sum_array_first_index_value.append(array_first_index_value)\n       \
    \ sum_array_last_index_value.append(array_last_index_value)\n        sum_array_first_index_value.append(sum_array_last_index_value[-1])\n\
    \        sum_array_last_index_value.append(sum_array_first_index_value[0])\n \
    \   \n    sum_array_first_index_value = sum_array_first_index_value[1:]\n    sum_array_last_index_value\
    \ = sum_array_last_index_value[:-1]\n    \n    sum_array_first_index_value.append(array_last_index_value)\n\
    \    sum_array_last_index_value.append(array_first_index_value)\n    \n    sum_array_first_index_value\
    \ = sum_array_first_index_value[1:]\n    sum_array_last_index_value = sum_array_last_index_value[:-1]\n\
    \    \n    sum_array_first_index_value.append(array_last_index_value)\n    sum_array_last_index_value.append(array_first_index_value)\n\
    \    \n    sum_array_first_index_value = sum_array_first_index_value[1:]\n   \
    \ sum_array_last_index_value = sum_array_last_index_value[:-1]\n    \n    sum_array_first_index_value\
    \ = sum_array_first_index_value[1:]\n    sum_array_last_index_value = sum_array_last_index_value[:-1]\n\
    \    \n    sum_array_first_index_value = sum_array_first_index_value[1:]\n   \
    \ sum_array_last_index_value = sum_array_last_index_value[:-1]\n    \n    sum_array_first_index_value\
    \ = sum_array_first_index_value[1:]\n    sum_array_last_index_value = sum_array_last_index_value[:-1]\n\
    \    \n    sum_array_first_index_value = sum_array_first_index_value[1:]\n   \
    \ sum_array_last_index_value = sum_array_last_index_value[:-1]\n    \n    sum_array_first_index_value\
    \ = sum_array_first_index_value[1:]\n    sum_array_last_index_value = sum_array_last_index_value[:-1]\n\
    \    \n    sum_array_first_index_value = sum_array_first_index_value[1:]\n   \
    \ sum_array_last_index_value = sum_array_last_index_value[:-1]\n    \ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7a8jst3w.py\", line\
    \ 90, in <module>\n    test_check()\n  File \"/tmp/tmp7a8jst3w.py\", line 88,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7a8jst3w.py\", line 80,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    sum = 0\n    for\
    \ i in array:\n        sum += i\n    if sum % 2 == 0:\n        array.sort()\n\
    \    else:\n        array.reverse()\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs45c68s.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgs45c68s.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpgs45c68s.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = sum(array)\n    if sum_of_array\
    \ % 2:\n        array.reverse()\n    return array\n\ndef check(candidate):\n \
    \   assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz0qs4fo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpuz0qs4fo.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpuz0qs4fo.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = [0 for _ in range(len(array))]\n\
    \    sum = 0\n    for index, value in enumerate(array):\n        sum += value\n\
    \        if sum % 2:\n            sorted_array[index] = array[len(array) - 1 -\
    \ index]\n        else:\n            sorted_array[index] = array[len(array) -\
    \ index]\n    return sorted_array\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71q10ypg.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp71q10ypg.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp71q10ypg.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmp71q10ypg.py\", line 29, in sort_array\n    sorted_array[index]\
    \ = array[len(array) - index]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwregjcos.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwregjcos.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwregjcos.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def next_index(array: List[int], index:\
    \ int) -> int:\n        if index == len(array) - 1:\n            return index\n\
    \        left = index + 1\n        right = next_index(array, index + 1)\n    \
    \    return min(right, left) if array[left] > array[right] else right\n\n    def\
    \ odd_even_index(array: List[int], index: int) -> int:\n        if index == len(array)\
    \ - 1:\n            return index\n        left = index + 1\n        right = next_index(array,\
    \ index + 1)\n        left_sum = sum(array[left])\n        right_sum = sum(array[right])\n\
    \        return (left if left_sum % 2 else right) if left_sum % 2 == right_sum\
    \ % 2 else (right if right_sum % 2 else left)\n\n    def odd_odd_index(array:\
    \ List[int], index: int) -> int:\n        if index == len(array) - 1:\n      \
    \      return index\n        left = index + 1\n        right = next_index(array,\
    \ index + 1)\n        left_sum = sum(array[left])\n        right_sum = sum(array[right])\n\
    \        return (left if left_sum % 2 == right_sum % 2 else right) if left_sum\
    \ % 2 == right_sum % 2 else (right if right_sum % 2 == left_sum % 2 else left)\n\
    \n    if sum(array) % 2:\n        return sorted(array, key=odd_even_index)\n \
    \   else:\n        return sorted(array, key=odd_odd_index)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29thqxr9.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmp29thqxr9.py\", line 62,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp29thqxr9.py\", line 54,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmp29thqxr9.py\",\
    \ line 48, in sort_array\n    return sorted(array, key=odd_even_index)\nTypeError:\
    \ sort_array.<locals>.odd_even_index() missing 1 required positional argument:\
    \ 'index'\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or len(array) == 0:\n  \
    \      return []\n    sum_first = 0\n    sum_last = 0\n\n    for i in array:\n\
    \        sum_first += i\n    sum_first += 1\n\n    for j in reversed(array):\n\
    \        sum_last += j\n    sum_last -= 1\n\n    if sum_first % 2 != 0:\n    \
    \    return array[::-1]\n    if sum_last % 2 == 0:\n        return array[::-1]\n\
    \    else:\n        return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5md0y0tt.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp5md0y0tt.py\", line 52,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5md0y0tt.py\", line 45,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in array:\n      \
    \  sum += i\n    \n    if sum % 2 == 0:\n        array.sort()\n    else:\n   \
    \     array.reverse()\n\n    return array\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqhi5m74u.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2fyeu28.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc2fyeu28.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc2fyeu28.py\", line 26,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array.copy()\n    \n   \
    \ if len(array) == 0:\n        return array\n\n    length = len(array)\n\n   \
    \ if length == 1:\n        return array\n\n    if length == 2:\n        array_copy[0],\
    \ array_copy[1] = array_copy[1], array_copy[0]\n\n    if length > 2:\n       \
    \ array_copy = sort_array(array_copy[:length//2])\n        array_copy = sort_array(array_copy[:length//2])\n\
    \n    sum_first_index = sum(array_copy[:length//2])\n    sum_last_index = sum(array_copy[length//2:])\n\
    \n    if sum_first_index % 2 == 0:\n        return array_copy\n\n    else:\n \
    \       return array_copy[::-1]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp86qnoob.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpp86qnoob.py\", line 59,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpp86qnoob.py\", line 52,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sums = [sum(arr[:i]) for i, arr in enumerate(array)]\n\
    \    sorted_array = [arr for i, arr in enumerate(array) if sums[i] % 2 == 1] +\
    \ [arr for i, arr in enumerate(array) if sums[i] % 2 == 0]\n    return sorted_array\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeiw7dnqw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpeiw7dnqw.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpeiw7dnqw.py\", line 29,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmpeiw7dnqw.py\",\
    \ line 22, in sort_array\n    sums = [sum(arr[:i]) for i, arr in enumerate(array)]\n\
    \  File \"/tmp/tmpeiw7dnqw.py\", line 22, in <listcomp>\n    sums = [sum(arr[:i])\
    \ for i, arr in enumerate(array)]\nTypeError: 'int' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    reverse = not (sum(array) % 2)\n    return\
    \ sorted(array, reverse=reverse)\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw42ltgn4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw42ltgn4.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpw42ltgn4.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in range(len(array)\
    \ - 1):\n        sum = sum + array[i]\n    if sum % 2 != 0:\n        return sorted(array,\
    \ reverse=True)\n    return sorted(array)\n    \nprint(sort_array([5,3,2,4,1]))\
    \ # descending\nprint(sort_array([5,3,2,4,1])) # ascending\n</cell>\n<text>\n\
    Problem 4.3\n\n</text>\n<cell>\n\"\"\"\nImplement a function that returns a new\
    \ list where all the odd indexed elements of the given list has been replaced\
    \ \nwith the even indexed elements from the given list. For example, \n    >>>\
    \ odds_to_evens_list([])\n    []\n    >>> odds_to_evens_list([1])\n    [1]\n \
    \   >>> odds_to_evens_list([1])\n    [1]\n    >>> odds_to_evens_list([1])\n  \
    \  [1]\n    >>> odds_to_evens_list([0])\n    [0]\n    >>> odds_to_evens_list([0])\n\
    \    [0]\n    >>> odds_to_evens_list([0])\n    [0]\n    >>> odds_to_evens_list([1])\n\
    \    [2]\n    >>> odds_to_evens_list([1])\n    [2]\n    >>> odds_to_evens_list([1])\n\
    \    [2]\n    >>> odds_to_evens_list([0])\n    [1]\n    >>> odds_to_evens_list([0])\n\
    \    [1]\n    >>> odds_to_evens_list([0])\n    [1]\n    >>> odds_to_evens_list([1])\n\
    \    [3]\n    >>> odds_to_evens_list([1])\n    [3]\n    >>> odds_to_evens_list([1])\n\
    \    [3]\n    >>> odds_to_evens_list([0])\n    [0]\n    >>> odds_to_evens_list([0])\n\
    \    [0]\n    >>> odds_to_evens_list([0])\n    [0]\n    >>> odds_to_evens_list([1])\n\
    \    [2, 1]\n    >>> odds_to_evens_list([1])\n    [2, 1]\n    >>> odds_to_evens_list([1])\n\
    \    [2, 1]\n    >>> odds_to_evens_list([0])\n    [0, 2]\n    >>> odds_to_evens_list([0])\n\
    \    [0, 2]\n    >>> odds_to_evens_list([0])\n    [0, 2]\n    >>> odds_to_evens_list([1])\n\
    \    [2, 3]\n    >>> odds_to_evens_list([1])\n    [2, 3]\n    >>> odds_to_evens_list([1])\n\
    \    [2, 3]\n    >>> odds_to_evens_list([0])\n    [1, 0]\n    >>> odds_to_evens_list([0])\n\
    \    [1, 0]\n    >>> odds_to_evens_list([0])\n    [1, 0]\n    >>> odds_to_evens_list([1])\n\
    \    [3, 4]\n    >>> odds_to_evens_list([1])\n    [3, 4]\n    >>> odds_to_evens_list([1])\n\
    \    [3, 4]\n    >>> odds_to_evens_list([0])\n    [1, 0]\n    >>> odds_to_evens_list([0])\n\
    \    [1, 0]\n    >>> \ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphl_mhxdx.py\", line 37\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 125)\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n\
    \    sum_ = sum(array[0:-1])\n    if sum_ % 2:\n        array = array[::-1]\n\
    \    return array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5kpbu1k.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpe5kpbu1k.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe5kpbu1k.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    left, right = 0, len(array) - 1\n   \
    \ left_sum = 0\n    right_sum = 0\n    array_copy = array.copy()\n\n    while\
    \ left < right:\n        left_sum += array[left]\n        right_sum += array[right]\n\
    \        if left_sum % 2 == 1:\n            array_copy[left], array_copy[right]\
    \ = array_copy[right], array_copy[left]\n            left += 1\n            right\
    \ -= 1\n        elif right_sum % 2 == 0:\n            array_copy[left], array_copy[right]\
    \ = array_copy[right], array_copy[left]\n            left += 1\n            right\
    \ -= 1\n        else:\n            left += 1\n            right -= 1\n    return\
    \ array_copy\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpje43ry3f.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpje43ry3f.py\", line 53,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpje43ry3f.py\", line 46,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result: List[int] = []\n    if len(array)\
    \ == 0:\n        return result\n    sum: int = sum(array[0:-1])\n    if sum %\
    \ 2 == 1:\n        result.append(array[-1])\n        result.append(array[0])\n\
    \        result.sort(reverse=True)\n    else:\n        result.append(array[-1])\n\
    \        result.append(array[0])\n        result.sort()\n    return result\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshk_v9ie.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpshk_v9ie.py\", line 46,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpshk_v9ie.py\", line 38,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmpshk_v9ie.py\",\
    \ line 25, in sort_array\n    sum: int = sum(array[0:-1])\nUnboundLocalError:\
    \ local variable 'sum' referenced before assignment\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    s = 0\n    for x in array:\n        s\
    \ += x\n        if s % 2 == 0:\n            s += 1\n        else:\n          \
    \  s -= 1\n    return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmg7c8pc_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmg7c8pc_.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmg7c8pc_.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = deepcopy(array)\n    array.sort(reverse=True)\n\
    \    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_1688dm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4_1688dm.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp4_1688dm.py\", line 27,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4_1688dm.py\", line\
    \ 22, in sort_array\n    array = deepcopy(array)\nNameError: name 'deepcopy' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array.copy()\n    length\
    \ = len(array_copy)\n    if length == 1:\n        return array_copy\n    if length\
    \ > 2:\n        mid = int(length/2)\n        left_sum = array_copy[mid]\n    \
    \    right_sum = array_copy[mid-1]\n        if left_sum % 2 == 0:\n          \
    \  if right_sum % 2 == 1:\n                array_copy[mid], array_copy[mid-1]\
    \ = array_copy[mid-1], array_copy[mid]\n                sort_array(array_copy)\n\
    \            else:\n                array_copy[mid], array_copy[mid-1] = array_copy[mid-1],\
    \ array_copy[mid]\n                sort_array(array_copy)\n        elif left_sum\
    \ % 2 != 0:\n            if right_sum % 2 == 0:\n                array_copy[mid],\
    \ array_copy[mid-1] = array_copy[mid-1], array_copy[mid]\n                sort_array(array_copy)\n\
    \            else:\n                array_copy[mid], array_copy[mid-1] = array_copy[mid-1],\
    \ array_copy[mid]\n                sort_array(array_copy)\n        elif right_sum\
    \ % 2 == 0:\n            array_copy[mid], array_copy[mid-1] = array_copy[mid-1],\
    \ array_copy[mid]\n            sort_array(array_copy)\n        else:\n       \
    \     array_copy[mid], array_copy[mid-1] = array_copy[mid-1], array_copy[mid]\n\
    \            sort_array(array_copy)\n    return array_copy\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1c3j2adm.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp1c3j2adm.py\", line 63,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1c3j2adm.py\", line 56,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 33, in sort_array\n    sort_array(array_copy)\n\
    \  File \"/tmp/tmp1c3j2adm.py\", line 40, in sort_array\n    sort_array(array_copy)"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    my_sum = 0\n    for i in array:\n   \
    \     my_sum += i\n    if my_sum %2 == 0:\n        return sorted(array)\n    else:\n\
    \        return sorted(array, key=lambda x: -x)\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfstnpbe8.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfstnpbe8.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpfstnpbe8.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    sum_first =\
    \ array[0]\n    sum_last = array[length - 1]\n\n    if sum_first + sum_last %\
    \ 2 == 0:\n        return array[::-1]\n    else:\n        return array\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpwbdvwm.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpxpwbdvwm.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxpwbdvwm.py\", line 33,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxpwbdvwm.py\", line\
    \ 23, in sort_array\n    sum_first = array[0]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = sorted(array)\n    len_array\
    \ = len(array)\n    if len_array % 2 == 1:\n        return array[len_array - 1]\
    \ + array[len_array//2::-1]\n    else:\n        return array[len_array // 2] +\
    \ array[len_array//2 - 1:0:-1]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj44q1oh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkj44q1oh.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkj44q1oh.py\", line 30,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkj44q1oh.py\", line\
    \ 27, in sort_array\n    return array[len_array // 2] + array[len_array//2 - 1:0:-1]\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    if len(array)\
    \ == 0:\n        return []\n    # use recursion method here\n    # base case here\
    \ is the empty list\n    if len(array) == 1:\n        return array\n    \n   \
    \ mid = len(array) // 2\n    \n    left_sum = sum(array[:mid])\n    right_sum\
    \ = sum(array[mid:])\n    \n    if left_sum % 2:\n        right_sum = right_sum\
    \ * -1\n        \n    left_sum = left_sum // 2\n    \n    if right_sum % 2:\n\
    \        left_sum = left_sum * -1\n        \n    left_sum += array[mid]\n    right_sum\
    \ -= array[mid]\n    \n    array = mid + left_sum + array[mid + 1:] + right_sum\n\
    \    \n    array = sort_array(array)\n    \n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzc99j0k.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpzzc99j0k.py\", line 63,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzzc99j0k.py\", line 56,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmpzzc99j0k.py\", line 46, in sort_array\n    array = mid + left_sum\
    \ + array[mid + 1:] + right_sum\nTypeError: unsupported operand type(s) for +:\
    \ 'int' and 'list'\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n\
    \    sum_first_value = array[0]\n    sum_last_value = array[-1]\n    if sum_first_value\
    \ > sum_last_value:\n        array = sort_array_asc_desc(array)\n    else:\n \
    \       array = sort_array_asc(array)\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpu48npo.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmphpu48npo.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphpu48npo.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmphpu48npo.py\", line 29, in sort_array\n    array = sort_array_asc(array)\n\
    NameError: name 'sort_array_asc' is not defined. Did you mean: 'sort_array'?\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array = array.copy()\n    # calculate\
    \ the sum between the first and the last two value\n    sum_first_last = sum(\
    \ array[:2] )\n    # calculate the sum between the last two and the last value\n\
    \    sum_last_last = sum( array[-2:] )\n    # sort in descending order if the\
    \ sum is odd\n    if sum_first_last % 2 == 1:\n        array.sort()\n    else:\n\
    \        array.reverse()\n    return array\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskr281zl.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpskr281zl.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpskr281zl.py\", line 37,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    my_sum = sum(array[:-2])\n\
    \    if my_sum%2 != 0:\n        my_array = array[::-1]\n    else:\n        my_array\
    \ = array\n        my_array.reverse()\n    return my_array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_g9jae_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpa_g9jae_.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpa_g9jae_.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for num in array:\n    \
    \    sum += num\n    if sum % 2 == 0:\n        return array\n    else:\n     \
    \   length = len(array)\n        for i in range(length):\n            array[i],\
    \ array[length - i - 1] = array[length - i - 1], array[i]\n        return array\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qiwrry4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2qiwrry4.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2qiwrry4.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  elif sum(array) % 2:\n        return sorted(array, reverse=True)\n    else:\n\
    \        return sorted(array)\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffed6f99.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpffed6f99.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpffed6f99.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length ==\
    \ 0:\n        return []\n    if length % 2 == 0:\n        return array[length//2:]\n\
    \    return array[length//2:][::-1]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppne5t2nb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppne5t2nb.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmppne5t2nb.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result: List[int] = []\n    temp: int\
    \ = 0\n    for i in range(len(array)):\n        temp = array[i]\n        array[i]\
    \ = array[0]\n        array[0] = temp\n    for num in array:\n        if num %\
    \ 2 == 1:\n            result.insert(0, num)\n        else:\n            result.append(num)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xm2hf6n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp8xm2hf6n.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8xm2hf6n.py\", line 38,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    result = []\n    # write your code here\n\
    \    temp = array[0]\n    temp2 = array[-1]\n\n    array_sum = (temp + temp2)\n\
    \n    if array_sum % 2 == 0:\n        for index in range(1, len(array)):\n   \
    \         temp = temp + array[index]\n            if temp == temp2:\n        \
    \        result.append(array[index])\n        return result\n    elif array_sum\
    \ % 2 != 0:\n        for index in range(1, len(array)):\n            temp2 = temp2\
    \ + array[index]\n            if temp == temp2:\n                result.append(array[index])\n\
    \        return result[::-1]\n    else:\n        return None\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ickqmlt.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp8ickqmlt.py\", line 54,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8ickqmlt.py\", line 45,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8ickqmlt.py\", line\
    \ 24, in sort_array\n    temp = array[0]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = sum(array)\n    if sum_of_array\
    \ % 2:\n        return sorted(array)\n    else:\n        return sorted(array,\
    \ key=lambda x: -1 * x)\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe18xz4eb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpe18xz4eb.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe18xz4eb.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzy08kfh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkzy08kfh.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkzy08kfh.py\", line 25,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n\n    return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ne4s3zt.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7ne4s3zt.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7ne4s3zt.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n\
    \    array_len = len(array)\n    sorted_array = []\n\n    # sort array by descending\
    \ order\n    if array_len % 2 == 0:\n        for i in range(0, array_len / 2):\n\
    \            sorted_array.append(max(array[i:i + 2]))\n\n    # sort array by ascending\
    \ order\n    else:\n        for i in range(0, array_len / 2):\n            sorted_array.append(min(array[i:i\
    \ + 2]))\n\n    return sorted_array\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxxyl981.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpwxxyl981.py\", line 51,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwxxyl981.py\", line 43,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmpwxxyl981.py\",\
    \ line 35, in sort_array\n    for i in range(0, array_len / 2):\nTypeError: 'float'\
    \ object cannot be interpreted as an integer\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    array_copy = array.copy()\n\
    \    while len(array_copy) != 0:\n        sum = sum + array_copy[0]\n        del\
    \ array_copy[0]\n    if sum % 2 != 0:\n        array_copy.sort()\n        array_copy.reverse()\n\
    \    else:\n        array_copy.sort()\n    return array_copy\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvs5lvw39.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvs5lvw39.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvs5lvw39.py\", line 36,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    return sorted(array)\n\
    </code>\nTest cases:\n<code>\n>>> sort_array([10])\n[10]\n>>> sort_array([1, 3,\
    \ 2])\n[1, 2, 3]\n>>> sort_array([4, 9, 7, 6, 8])\n[8, 7, 6, 9, 4]\n>>> sort_array([10,\
    \ 9, 4, 3, 2])\n[2, 3, 4, 9, 10]\n</code>\n<|/ a tags=python,arrays,sorting |>\n\
    <| c |>\nThanks, this works for me, but I'm wondering if there is a way to do\
    \ this without importing `numpy`.\n<|/ c |>\n<| a |>\nI have used this solution\
    \ using python 3.x\n<code>\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1m51tjv8.py\", line 38\n    Thanks, this works for me,\
    \ but I'm wondering if there is a way to do this without importing `numpy`.\n\
    \                                    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 38)\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    odd_sum=sum(array[0:len(array)-1])%2==1\n\
    \    even_sum=sum(array[0:len(array)-1])%2==0\n    return array[odd_sum*-1+even_sum]\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17yxzttq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp17yxzttq.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp17yxzttq.py\", line 28,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp17yxzttq.py\", line\
    \ 25, in sort_array\n    return array[odd_sum*-1+even_sum]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # todo implement this function\n    array_copy\
    \ = array.copy()\n    # sort array in ascending order if sum of the first index\
    \ and last index is odd\n    if array_copy[0] != 0 and array_copy[-1] % 2 == 1:\n\
    \        array_copy.sort()\n    # sort array in descending order if sum of the\
    \ first index and last index is even\n    elif array_copy[0] != 0 and array_copy[-1]\
    \ % 2 == 0:\n        array_copy.reverse()\n    else:\n        pass\n    return\
    \ array_copy\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9ebm1e1.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmph9ebm1e1.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph9ebm1e1.py\", line 36,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmph9ebm1e1.py\", line\
    \ 25, in sort_array\n    if array_copy[0] != 0 and array_copy[-1] % 2 == 1:\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    sorted_array = []\n    sum_array\
    \ = [sum(array)]\n    \n    for i in range(1, len(array)):\n        sum_array.append(sum_array[-1]\
    \ + array[i])\n    \n    if sum_array[-1] % 2 == 0:\n        sorted_array.append(sum_array[-1]\
    \ / 2)\n        for i in range(1, len(sum_array)):\n            if sum_array[i]\
    \ < sum_array[i - 1]:\n                sorted_array.append(array[i])\n       \
    \     else:\n                sorted_array.append(sum_array[i - 1] + array[i])\n\
    \    else:\n        sorted_array.append(sum_array[-1] / 2)\n        for i in range(1,\
    \ len(sum_array)):\n            if sum_array[i] > sum_array[i - 1]:\n        \
    \        sorted_array.append(array[i])\n            else:\n                sorted_array.append(sum_array[i\
    \ - 1] + array[i])\n    \n    return sorted_array\n\n\n\"\"\"\nQuestion 8\n\"\"\
    \"\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnq5vdvyq.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpnq5vdvyq.py\", line 61,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpnq5vdvyq.py\", line 52,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if sum(array) % 2 == 0:\n        array.sort()\n\
    \    else:\n        array.reverse()\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gs58p0a.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2gs58p0a.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2gs58p0a.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyth786g1.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # your code here\n    if array:\n   \
    \     sum_value = sum(array[0], array[-1])\n        if sum_value % 2 == 0:\n \
    \           array.reverse()\n            return array\n        array.reverse()\n\
    \        return array\n    else:\n        return []\n    \n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56b_52t3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp56b_52t3.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp56b_52t3.py\", line 36,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmp56b_52t3.py\",\
    \ line 24, in sort_array\n    sum_value = sum(array[0], array[-1])\nTypeError:\
    \ 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_first_index = 0\n    sum_of_last_index\
    \ = 0\n    length = len(array)\n    for i in range(length):\n        sum_of_first_index\
    \ += array[i]\n        sum_of_last_index += array[length - i - 1]\n    if sum_of_first_index\
    \ % 2 == 0:\n        sorted_array = array\n    else:\n        sorted_array = array[::-1]\n\
    \    return sorted_array\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg3k_jgq7.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8am8fapm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8am8fapm.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8am8fapm.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    sum_ = 0\n\
    \    for i in array:\n        sum_ += i\n    if sum_ & 1:\n        array.reverse()\n\
    \    return array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2nxujpm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpn2nxujpm.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpn2nxujpm.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if array == []:\n        return []\n\
    \    else:\n        left_sum = 0\n        right_sum = 0\n        for index, item\
    \ in enumerate(array):\n            left_sum += item\n            right_sum +=\
    \ left_sum\n            array[index] = item\n            if left_sum % 2 != 0:\n\
    \                array[index], array[len(array) - index - 1] = array[len(array)\
    \ - index - 1], array[index]\n            if right_sum % 2 != 0:\n           \
    \     array[index], array[index - 1] = array[index - 1], array[index]\n      \
    \  return array\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrj58di7.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmphrj58di7.py\", line 47,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphrj58di7.py\", line 40,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ciyteqg.py\", line\
    \ 291, in <module>\n    test_check()\n  File \"/tmp/tmp6ciyteqg.py\", line 289,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6ciyteqg.py\", line 280,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \    sum_first = sum(array[:1])\n    sum_last = sum(array[-1:]) \n    if sum_first\
    \ % 2 == 1:\n        array = sorted(array, reverse = True)\n    else:\n      \
    \  array = sorted(array)\n    return array\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cmgf2mv.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp0cmgf2mv.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0cmgf2mv.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    res = []\n\
    \    if len(array) < 2:\n        return res\n    odd_even = 0\n    res.append(array[0])\n\
    \    sum_value = sum(res)\n    if sum_value%2 != 0:\n        odd_even = -1\n \
    \   elif sum_value%2 == 0:\n        odd_even = 1\n\n    for i in range(1, len(array)):\n\
    \        res.append(array[i])\n        sum_value = sum(res)\n        if sum_value%2\
    \ != odd_even:\n            odd_even = -1\n        elif sum_value%2 == odd_even:\n\
    \            odd_even = 1\n        res.pop()\n    res.sort()\n    return res\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzdlth6q.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpgzdlth6q.py\", line 55,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpgzdlth6q.py\", line 47,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # your code here\n    sum = 0\n    for\
    \ n in array:\n        sum += n\n    if sum % 2 == 0:\n        return sorted(array)\n\
    \    else:\n        return sorted(array, key = lambda x: -x)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1s_hfret.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1s_hfret.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp1s_hfret.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_len = len(array)\n    sorted_array\
    \ = array[: array_len//2]\n    if array_len % 2 != 0:\n        sorted_array.append(sorted_array[-1])\n\
    \    return sorted_array\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9t1zdm0.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph9t1zdm0.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmph9t1zdm0.py\", line 30,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmph9t1zdm0.py\",\
    \ line 25, in sort_array\n    sorted_array.append(sorted_array[-1])\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n == 0:\n    \
    \    return array\n    if n % 2:\n        array = sorted(array, key=lambda x:(-x,\
    \ x))\n    else:\n        array = sorted(array, key=lambda x:(x, x))\n    return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0w6mub8e.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0w6mub8e.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0w6mub8e.py\", line 38,\
    \ in check\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2fyeu28.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc2fyeu28.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc2fyeu28.py\", line 26,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) <= 1:\n        return array\n\
    \    if len(array) == 2:\n        if array[0] == array[1]:\n            return\
    \ array\n        else:\n            return [array[1], array[0]]\n    elif array[-1]\
    \ == array[-2]:\n        if array[-1] > array[-2]:\n            return array\n\
    \        else:\n            return [array[-2]] + array[:-2]\n    else:\n     \
    \   if array[-1] > array[-2]:\n            return [array[-1]] + sort_array([array[-2]]\
    \ + array[:-2])\n        else:\n            return sort_array([array[-1], array[-2]]\
    \ + array[:-2])\n\ndef check(candidate):\n    assert candidate([]) == []\n   \
    \ assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphku2zzlv.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmphku2zzlv.py\", line 50,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphku2zzlv.py\", line 43,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    total = 0\n    for x in array:\n    \
    \    total += x\n        if total % 2 == 0:\n            array.reverse()\n   \
    \         return array\n        else:\n            return sorted(array)\n</code>\n\
    <|/ a |>\n<| a |>\nThis code is using python 3.7 and python list comprehension\
    \ and it is working for me. May be it can help you.\n<code>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplv2w3ash.py\", line 30\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_arr: List[int] = []\n    sum_arr.append(array[0])\n\
    \    sum_arr.append(array[len(array) - 1])\n    sum: int\n    counter: int\n \
    \   for sum in range(len(array)):\n        counter = 0\n        for index in range(len(array)):\n\
    \            if index != sum and array[index] + array[sum] != 0:\n           \
    \     counter += 1\n        if counter % 2 == 0:\n            array.remove(array[sum])\n\
    \            sum -= 1\n        else:\n            array.remove(array[sum])\n \
    \           sum += 1 # if even\n            sum_arr.append(array[sum])\n     \
    \       sum -= 1\n    return sum_arr\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5602fkkz.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp5602fkkz.py\", line 53,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5602fkkz.py\", line 44,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5602fkkz.py\", line\
    \ 23, in sort_array\n    sum_arr.append(array[0])\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \    n = len(array)\n    if n % 2 == 1:\n        array.sort()\n    else:\n   \
    \     array.reverse()\n        array.sort()\n        array.reverse()\n    return\
    \ array\n    \ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpllxquy9c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpllxquy9c.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpllxquy9c.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_ = 0\n    for i in array:\n     \
    \   sum_ += i\n        if sum_ % 2 == 0:\n            array.append(i)\n      \
    \      array.sort()\n            array.reverse()\n            return array\n \
    \       else:\n            array.append(i)\n            array.sort()\n       \
    \     array.reverse()\n            return array\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclcfc63z.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpclcfc63z.py\", line 46,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpclcfc63z.py\", line 37,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return array\n\
    \    if len(array) == 1:\n        return array\n    sumArray = array[0]+array[-1]\n\
    \    odd = sumArray % 2 == 1\n    if odd:\n        array.reverse()\n    else:\n\
    \        sumArray = array[0] + array[-1]\n        even = sumArray % 2 == 0\n \
    \       array.reverse()\n        while even or sumArray % 2 == 1:\n          \
    \  array.pop()\n            sumArray = array[0] + array[-1]\n            even\
    \ = sumArray % 2 == 0\n            array.reverse()\n    return array\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom2utg4b.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpom2utg4b.py\", line 52,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpom2utg4b.py\", line 45,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # code here\n    \n    \n    return sorted(array)\n\
    \    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzaobbauq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpzaobbauq.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzaobbauq.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_first = array[0]\n    sum_of_last\
    \ = array[-1]\n    if sum_of_first<sum_of_last:\n        return [-i for i in array]\n\
    \    else:\n        return array\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpob6u2mr4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpob6u2mr4.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpob6u2mr4.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpob6u2mr4.py\", line\
    \ 22, in sort_array\n    sum_of_first = array[0]\nIndexError: list index out of\
    \ range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    total=0\n    for i in array:\n      \
    \  total+=i\n    if total%2==1:\n        array.sort()\n    else:\n        array.reverse()\n\
    \    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe12ni9v7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpe12ni9v7.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpe12ni9v7.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    res = []\n    count = 0\n    pos = 0\n\
    \    i = 0\n    end = len(array)-1\n    while i < end:\n        count = array[i]\
    \ + array[end]\n        if count > 0 :\n            res.append(array[i])\n   \
    \         pos = i\n        else:\n            pos += 1\n            res.append(array[end])\n\
    \            end = pos\n        i += 1\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpermrq4tc.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpermrq4tc.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpermrq4tc.py\", line 41,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = array[::-1]\n    if sum(sorted_array)\
    \ % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5_rw7j6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv5_rw7j6.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpv5_rw7j6.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = [i for i in array]\n   \
    \ array_copy.sort()\n    return array_copy\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp67j892iy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp67j892iy.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp67j892iy.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length <=\
    \ 0:\n        return None\n    if length == 1:\n        return array\n    elif\
    \ length % 2 == 0:\n        return sorted(array, key=lambda x: array[length//2])[::-1]\n\
    \    else:\n        return sorted(array, key=lambda x: array[length//2])\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_bz6sze.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpk_bz6sze.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpk_bz6sze.py\", line 33,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2fyeu28.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc2fyeu28.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc2fyeu28.py\", line 26,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_size = len(array)\n    sum_array\
    \ = [sum(array[:i]+array[i+1:])/2 for i in range(array_size)]\n    if sum_array[0]%2\
    \ == 0:\n        sum_array.reverse()\n    array = array[::-1]\n\n    sort_sum_index\
    \ = -1\n    sum_sum = sum_array[-1]\n    sum_index = 0\n    for i in range(array_size):\n\
    \        if sum_sum > sum_array[sum_index]:\n            sort_sum_index = sum_index\n\
    \            sum_sum = sum_array[sum_index]\n            sum_index += 1\n    \
    \    else:\n            sum_sum -= sum_array[sum_index]\n            sum_index\
    \ += 1\n    \n    if sum_index > 0 and sort_sum_index != 0:\n        for i in\
    \ range(array_size):\n            if sum_array[i] > sum_array[sort_sum_index]:\n\
    \                array[i] = array[i-1]\n            elif sum_array[i] < sum_array[sort_sum_index]:\n\
    \                array[i] = array[i+1]\n            else:\n                array[i]\
    \ = sum_array[i]\n    else:\n        for i in range(array_size):\n           \
    \ array[i] = sum_array[i]\n    return array\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpms4smf9r.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpms4smf9r.py\", line 63,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpms4smf9r.py\", line 54,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpms4smf9r.py\", line\
    \ 24, in sort_array\n    if sum_array[0]%2 == 0:\nIndexError: list index out of\
    \ range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if type(array) is not list:\n       \
    \ raise TypeError(f\"Array should be list, got {type(array).__name__}\")\n   \
    \ if type(array[0]) is not int:\n        raise TypeError(f\"Each array element\
    \ should be int, got {type(array[0]).__name__}\")\n    if len(array) <= 0:\n \
    \       raise ValueError(f\"Array size should be greater than 0, got {len(array)}\"\
    )\n\n    if sum(array) % 2:\n        array.sort()\n    else:\n        array.reverse()\n\
    \    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg1nmljt.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmphg1nmljt.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphg1nmljt.py\", line 36,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmphg1nmljt.py\", line\
    \ 24, in sort_array\n    if type(array[0]) is not int:\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    sorted_array\
    \ = list(array)\n    if length % 2 == 0:\n        middle_value = array[length//2-1]\n\
    \        sum_value = sum(sorted_array[:length//2])\n        if sum_value % 2 ==\
    \ 0:\n            temp_array = sorted_array[length//2:]\n            temp_array.insert(0,middle_value)\n\
    \            sorted_array = list(temp_array)\n        else:\n            sorted_array[length//2:]\
    \ = sorted_array[:length//2]\n    else:\n        middle_value = array[length//2]\n\
    \        sum_value = sum(sorted_array[:length//2-1])\n        if sum_value % 2\
    \ == 1:\n            sorted_array[length//2:] = sorted_array[:length//2-1]\n \
    \           temp_array = sorted_array[length//2+1:]\n            temp_array.insert(0,middle_value)\n\
    \            sorted_array = list(temp_array)\n        else:\n            sorted_array[length//2-1:]\
    \ = sorted_array[:length//2]\n    return sorted_array\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmefbpmj_.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpmefbpmj_.py\", line 55,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpmefbpmj_.py\", line 46,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpmefbpmj_.py\", line\
    \ 25, in sort_array\n    middle_value = array[length//2-1]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\
    \    array = list(array)\n    temp = [0] * len(array)\n    count = 0\n    sum\
    \ = 0\n    for i in range(len(array)):\n        sum += array[i]\n        temp[count]\
    \ = i\n        count += 1\n    if sum % 2 == 0:\n        temp = sorted(temp, key=lambda\
    \ x: -x)\n    else:\n        temp = sorted(temp, key=lambda x: x)\n    array =\
    \ [array[i] for i in range(len(array)) if i != temp[0]]\n    return array\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hltvekh.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp3hltvekh.py\", line 50,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3hltvekh.py\", line 42,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 0
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    if n <= 1:\n    \
    \    return array\n    \n    # create a variable to store the value of previous\
    \ index\n    previous = array[0]\n\n    # create another variable to store the\
    \ current sum\n    curr_sum = 0\n\n    # create another variable to store the\
    \ value of next index\n    next = 1\n\n    # loop to get the sum of the first\
    \ index value and the last index value\n    # to store in curr_sum\n    for i\
    \ in range(1, n - 1):\n        curr_sum += array[i]\n        \n    # get the sum\
    \ of first index value and the last index value\n    # to store in curr_sum\n\
    \    for i in range(n - 2):\n        curr_sum += array[next]\n\n    # check if\
    \ curr_sum is odd\n    if curr_sum & 1:\n        # sort it in descending order\n\
    \        array.sort(reverse=True)\n        return array\n    else:\n        #\
    \ sort it in ascending order\n        array.sort()\n        return array\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    return array\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvwzz3u9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkvwzz3u9.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkvwzz3u9.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if sum( array[:-1], array[-1] ) % 2 ==\
    \ 0:\n        return sorted(array)\n    else:\n        return sorted(array, reverse\
    \ = True)\n</cell>\n<cell>\nsort_array([]) # []\nsort_array([]) # []\nsort_array([5])\
    \ # [5]\nsort_array([2, 4, 3, 0, 1, 5]) # [0, 1, 2, 3, 4, 5]\nsort_array([2, 4,\
    \ 3, 0, 1, 5, 6]) # [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nQ. Write a Python\
    \ program to convert a list to a dictionary.\n\nNote: Only consecutive integers\
    \ can be used to index items in the list like 0, 1, 2, 3, ...\n\nNote: If the\
    \ list contains duplicate elements, only the first occurrence is stored in the\
    \ dictionary.\n\nExample 1:\nInput: [10, 20, 30, 40, 50, 40, 30]\nOutput: {'10':\
    \ 10, '20': 20, '30': 30, '40': 40, '50': 50, '30': 30}\n\nExample 2:\nInput:\
    \ [1, 2, 3, 4, 5]\nOutput: {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl9vofvah.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write code here\n    if len(array)\
    \ == 0:\n        return array\n    else:\n        result = [array[0]]\n      \
    \  for i in range(1, len(array)):\n            if result[len(result) - 1] + array[i]\
    \ > result[len(result) - 2] + array[i]:\n                result.append(array[i])\n\
    \            else:\n                result.append(array[i])\n        array[:]\
    \ = result\n        return array\n</cell>\n<cell>\nprint(sort_array([]))\nprint(sort_array([1]))\n\
    print(sort_array([5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]))\n</cell>\n<text>\n12. Merge Sort II\nGiven an array nums,\
    \ partition it into two parts nums1 and nums2 such that nums1 has all the numbers\
    \ which come before the pivot, and nums2 has all the numbers which come after\
    \ the pivot. Now sort nums2 with respect to pivot element and nums1 with respect\
    \ to remaining elements. After sorting nums2 with respect to pivot element, nums1\
    \ has all the elements which are greater than pivot and nums2 has all the elements\
    \ which are less than pivot.\n\nExample 1:\n\nInput:\nnums = [10,9,2,5,7]\npivot\
    \ = 7\nOutput:\n[2,5,7,9,10]\n\nExample 2:\n\nInput:\nnums = [5,7,2,9,1]\npivot\
    \ = 1\nOutput:\n[1,7,5,9,2]\n\nNote:\nAssume that all the elements in the input\
    \ array are unique.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpryptd6w5.py\", line 34\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_first_index_values = array[0]\n\
    \    sum_of_last_index_values = array[-1]\n    \n    if sum_of_first_index_values\
    \ + sum_of_last_index_values % 2:\n        return array[::-1]\n    else:\n   \
    \     return array\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwo3sxu30.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpwo3sxu30.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwo3sxu30.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwo3sxu30.py\", line\
    \ 22, in sort_array\n    sum_of_first_index_values = array[0]\nIndexError: list\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = sum(array)\n    if sum_of_array\
    \ % 2 == 0:\n        return sorted(array)\n    return sorted(array, key=lambda\
    \ x: -x)\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhr79o6z.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxhr79o6z.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxhr79o6z.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n   \
    \ assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2fyeu28.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc2fyeu28.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpc2fyeu28.py\", line 26,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    pass\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp032by4o4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp032by4o4.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp032by4o4.py\", line 26,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_first_last = 0\n    for element in\
    \ array:\n        sum_first_last += element\n    if sum_first_last % 2 == 0:\n\
    \        array.sort(reverse = True)\n    else:\n        array.sort()\n    return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qu9n3f0.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3qu9n3f0.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3qu9n3f0.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_array = sum(array)\n    if sum_odd\
    \ < sum_even:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\
    \    return array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrr84kou.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcrr84kou.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpcrr84kou.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpcrr84kou.py\", line\
    \ 23, in sort_array\n    if sum_odd < sum_even:\nNameError: name 'sum_odd' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_length = len(array)\n    if array_length\
    \ < 2:\n        return array\n    if array_length % 2 == 0:\n        sum_first_element\
    \ = sum(array[:array_length//2])\n        sum_last_element = sum(array[array_length//2:])\n\
    \        if sum_first_element % 2 == 0:\n            return sort_array( array[:array_length//2]\
    \ + array[array_length//2:] )\n        else:\n            return sort_array( array[:array_length//2]\
    \ + array[array_length//2:][::-1] )\n    else:\n        sum_first_element = sum(array[:array_length//2])\n\
    \        sum_last_element = sum(array[array_length//2:])\n        if sum_last_element\
    \ % 2 == 0:\n            return sort_array( array[:array_length//2] + array[array_length//2:]\
    \ )[::-1]\n        else:\n            return sort_array( array[:array_length//2]\
    \ + array[array_length//2:][::-1] )\n    \n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_vcbx9b.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp8_vcbx9b.py\", line 51,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8_vcbx9b.py\", line 44,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmp8_vcbx9b.py\", line 31, in sort_array\n    return sort_array(\
    \ array[:array_length//2] + array[array_length//2:][::-1] )\n  File \"/tmp/tmp8_vcbx9b.py\"\
    , line 31, in sort_array\n    return sort_array( array[:array_length//2] + array[array_length//2:][::-1]\
    \ )\n  File \"/tmp/tmp8_vcbx9b.py\", line 31, in sort_array\n    return sort_array(\
    \ array[:array_length//2] + array[array_length//2:][::-1] )\n  [Previous line\
    \ repeated 993 more times]\n  File \"/tmp/tmp8_vcbx9b.py\", line 22, in sort_array\n\
    \    array_length = len(array)\nRecursionError: maximum recursion depth exceeded\
    \ while calling a Python object\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzy08kfh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkzy08kfh.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkzy08kfh.py\", line 25,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\
    \    sums = []\n    for elem in array:\n        sums.append(elem + sums[-1])\n\
    \    sums = list(set(sums))\n    if len(sums) % 2 != 0:\n        sums.append(sums[-1])\n\
    \    sums.sort()\n    result = [elem for idx, elem in enumerate(array) if idx\
    \ in sums]\n    return result + [elem for idx, elem in enumerate(array) if idx\
    \ not in sums]\n\n\ndef check(candidate):\n    assert candidate([]) == []\n  \
    \  assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfv3ntgq.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdfv3ntgq.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdfv3ntgq.py\", line 37,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmpdfv3ntgq.py\",\
    \ line 26, in sort_array\n    sums.append(elem + sums[-1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n\
    \    else:\n        array_copy = array.copy()\n        sum_of_array = sum(array_copy)\n\
    \        if sum_of_array % 2 == 0:\n            array_copy = sorted(array_copy,\
    \ key=lambda x: x[0])\n        else:\n            array_copy = sorted(array_copy,\
    \ key=lambda x: x[0], reverse=True)\n        return array_copy\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddjrr156.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpddjrr156.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpddjrr156.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmpddjrr156.py\", line 30, in sort_array\n    array_copy = sorted(array_copy,\
    \ key=lambda x: x[0], reverse=True)\n  File \"/tmp/tmpddjrr156.py\", line 30,\
    \ in <lambda>\n    array_copy = sorted(array_copy, key=lambda x: x[0], reverse=True)\n\
    TypeError: 'int' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\
    \    sum_array = sum(array)\n    odd_sum = sum_array % 2 == 1\n    even_sum =\
    \ sum_array % 2 == 0\n    if odd_sum:\n        array.sort(reverse=True)\n    else:\n\
    \        array.sort()\n    return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudskjn20.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpudskjn20.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpudskjn20.py\", line 36,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  sum_first = array[0]\n    sum_last = array[-1]\n    if sum_last < sum_first:\n\
    \        array, sum_first, sum_last = sort_array(array[::-1]), sum_last, sum_first\n\
    \n    if sum_last % 2 == 0:\n        array = list(array)\n        array.sort(reverse=True)\n\
    \        array.reverse()\n        return array\n    else:\n        array = list(array)\n\
    \        array.sort()\n        return array\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv54bdbc0.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpv54bdbc0.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpv54bdbc0.py\", line 43,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    total = 0\n    for val in array:\n  \
    \      total += val\n    if total % 2 == 0:\n        return sorted(array)\n  \
    \  else:\n        return sorted(array, reverse=True)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_w77jjt.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpq_w77jjt.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpq_w77jjt.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    new_array = list(array)\n    new_array.sort()\n\
    \n    if sum((new_array[0], new_array[-1])) % 2 == 1:\n        new_array.reverse()\n\
    \n    return new_array\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkp7_ntq.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpkkp7_ntq.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkkp7_ntq.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkkp7_ntq.py\", line\
    \ 25, in sort_array\n    if sum((new_array[0], new_array[-1])) % 2 == 1:\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    return array.copy()\n\
    </code>\n<|/ a tags=sorting,arrays,python |>\n<| c |>\nThe question was about\
    \ sorting in **descending order** so `-1 * arr` should be enough\n<|/ c |>\n<|\
    \ a tags=sorting,arrays,python |>\nIn Python 3 you can do:\n<code>\narr = [0,\
    \ 2, 4, 5, 3, 1, 6]\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4kaptp0j.py\", line 24\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n\
    \    array = sorted(array, key=lambda x: sum(x[-2:]))\n    return array\n\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp690ftn6u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp690ftn6u.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp690ftn6u.py\", line 31,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmp690ftn6u.py\",\
    \ line 25, in sort_array\n    array = sorted(array, key=lambda x: sum(x[-2:]))\n\
    \  File \"/tmp/tmp690ftn6u.py\", line 25, in <lambda>\n    array = sorted(array,\
    \ key=lambda x: sum(x[-2:]))\nTypeError: 'int' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Your code here\n    \n    return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpraqoh889.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpraqoh889.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpraqoh889.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = array[0] + array[len(array)\
    \ - 1]\n\n    even = sum_of_array % 2 == 0\n    if even:\n        return sorted(array,\
    \ reverse=True)\n    return sorted(array)\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm93tfwym.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpm93tfwym.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpm93tfwym.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpm93tfwym.py\", line\
    \ 22, in sort_array\n    sum_of_array = array[0] + array[len(array) - 1]\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    temp_list = list(array)\n    temp_list.sort()\n\
    \    return temp_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmusgr1z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsmusgr1z.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpsmusgr1z.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort()\n    return array\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qzkpx7x.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5qzkpx7x.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5qzkpx7x.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if len(array) == 0:\n        return\
    \ []\n    \n    sorted_array = [0] * len(array)\n    \n    sum_array = 0\n   \
    \ for num in array:\n        sum_array += num\n    \n    if sum_array%2 == 1:\n\
    \        sorted_array = [num for num in array if num > 0]\n    else:\n       \
    \ sorted_array = [num for num in array if num < 0]\n    \n    return sorted_array\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcufjc_6.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpvcufjc_6.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpvcufjc_6.py\", line 42,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  array.sort()\n    if array[-1] % 2 == 1:\n        return array[::-1]\n    return\
    \ array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3zdrzif.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmps3zdrzif.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmps3zdrzif.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length ==\
    \ 0:\n        return []\n\n    sum1 = array[length - 1]\n    sum2 = array[0]\n\
    \n    if sum1 % 2 == 0:\n        return sorted(array, key=lambda x: sum2 - x)\n\
    \    return sorted(array, key=lambda x: sum1 - x)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_kvjhijg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_kvjhijg.py\", line 44,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_kvjhijg.py\", line 37,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length <\
    \ 2:\n        return array\n\n    # sum the first and last index values\n    sum_first\
    \ = array[0] + array[length - 1]\n    sum_last = array[0] + array[length - 1]\n\
    \n    # swap if the sum is odd\n    if sum_first % 2 == 0:\n        if sum_last\
    \ % 2 == 1:\n            array = array[:2] + [array[2], array[0]]\n          \
    \  array = array[:2] + [array[2], array[0]]\n            array = array[:2] + [array[2],\
    \ array[0]]\n            array = array[:2] + [array[2], array[0]]\n        else:\n\
    \            array = array[:1] + [array[2], array[0]]\n            array = array[:1]\
    \ + [array[2], array[0]]\n    else:\n        if sum_last % 2 == 0:\n         \
    \   array = array[:1] + [array[2], array[0]]\n            array = array[:1] +\
    \ [array[2], array[0]]\n            array = array[:1] + [array[2], array[0]]\n\
    \            array = array[:1] + [array[2], array[0]]\n        else:\n       \
    \     array = array[:2] + [array[2], array[0]]\n            array = array[:2]\
    \ + [array[2], array[0]]\n            array = array[:2] + [array[2], array[0]]\n\
    \n    return array\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyq1in6y5.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpyq1in6y5.py\", line 63,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpyq1in6y5.py\", line 56,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    sorted_list\
    \ = []\n    if sum(array) % 2 == 1:\n        sorted_list = list(reversed(array))\n\
    \    else:\n        sorted_list = list(array)\n    return sorted_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ch1xdg6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp7ch1xdg6.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7ch1xdg6.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    evensum = sum(array[0:\
    \ length//2]) + sum(array[length//2: ])\n    oddsum = sum(array[0:length//2])\
    \ + sum(array[(length//2) - 1: length])\n    if evensum % 2 == 1:\n        array.reverse()\n\
    \        return array\n    else:\n        return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6nv4e2k.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpy6nv4e2k.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpy6nv4e2k.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length ==\
    \ 0:\n        return []\n    first_index = 0\n    last_index = length - 1\n\n\
    \    while first_index < last_index:\n        sum_val = array[first_index] + array[last_index]\n\
    \n        if sum_val % 2 == 1:\n            array[first_index], array[last_index]\
    \ = array[last_index], array[first_index]\n            first_index += 1\n    \
    \        last_index -= 1\n        else:\n            array[first_index], array[last_index]\
    \ = array[last_index], array[first_index]\n            first_index += 1\n    \
    \        last_index -= 1\n\n    return array[first_index:]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xgnpvpl.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp_xgnpvpl.py\", line 53,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp_xgnpvpl.py\", line 46,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for i in array:\n      \
    \  sum += i\n    if sum % 2:\n        return array[::-1]\n    else:\n        return\
    \ array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7e5wsls.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpv7e5wsls.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpv7e5wsls.py\", line 34,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if array == []:\n        return []\n\
    \    else:\n        sum = 0\n        for i in array:\n            sum = sum +\
    \ i\n            if sum % 2 == 0:\n                array.reverse()\n        return\
    \ array\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7f24rw0a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp7f24rw0a.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7f24rw0a.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    def mergesort(array: List[int])\
    \ -> List[int]:\n        if len(array) <= 1:\n            return array\n     \
    \   middle = len(array) // 2\n        left_array = array[: middle]\n        right_array\
    \ = array[middle :]\n        left_result = mergesort(left_array)\n        right_result\
    \ = mergesort(right_array)\n        left_index = 0\n        right_index = 0\n\
    \        result = []\n        while left_index < len(left_result) and right_index\
    \ < len(right_result):\n            if left_result[left_index] + right_result[right_index]\
    \ % 2 != 0:\n                result.append(left_result[left_index])\n        \
    \        left_index += 1\n            else:\n                result.append(right_result[right_index])\n\
    \                right_index += 1\n        result.extend(left_result[left_index:])\n\
    \        result.extend(right_result[right_index:])\n        return result\n  \
    \  \n    if len(array) == 0:\n        return []\n    return mergesort(array)\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpy0x0k7.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpzpy0x0k7.py\", line 59,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzpy0x0k7.py\", line 52,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  total = len(array)\n    odd = total % 2\n    even = total // 2\n    if odd:\n\
    \        return sorted(array, key=lambda x: (x + array[even]))[::-1]\n    else:\n\
    \        return sorted(array, key=lambda x: (x - array[even]))\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqr9bdna.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxqr9bdna.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxqr9bdna.py\", line 40,\
    \ in check\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    stack = []\n    for i in array:\n   \
    \     stack.append(i)\n\n    array = []\n    while len(stack):\n        if stack[0]\
    \ % 2:\n            array.append(stack.pop(0))\n        else:\n            array.append(stack.pop())\n\
    \    return array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_t7902o.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpx_t7902o.py\", line 45,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpx_t7902o.py\", line 38,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # TODO: write your code here\n    n =\
    \ len(array)\n    sort_array = []\n    array_sum = 0\n    array_sum_list = []\n\
    \    for i in range(n):\n        array_sum = array[i] + array_sum\n        array_sum_list.append(array_sum)\n\
    \    array_sum_list_sorted = sorted(array_sum_list)\n    array_sum_list_sorted\
    \ = array_sum_list_sorted[::-1]\n    array_sum_list_sorted_reverse = array_sum_list[-1::-1]\n\
    \    for i in array_sum_list_sorted_reverse:\n        if i % 2 != 0:\n       \
    \     sort_array.append(i)\n        elif i == array_sum_list[-1::-1]:\n      \
    \      sort_array.append(array_sum)\n        else:\n            sort_array.append(array_sum_list[-1]\
    \ - i)\n    return sort_array\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cgunol6.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp8cgunol6.py\", line 51,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp8cgunol6.py\", line 44,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    sorted_array = []\n    for\
    \ x in array:\n        sum += x\n        sorted_array.append(x)\n\n    if sum\
    \ % 2 == 1:\n        sorted_array.reverse()\n    return sorted_array\n</code>\n\
    <|/ a tags=python,python-3.x |>\n<| a tags=python,python-3.x |>\nThe simplest\
    \ and most efficient way to do this would be to sort the array using sorted()\
    \ and then take slices of the sorted array.  In other words, just sort the array\
    \ in ascending order and then slice it into two halves based on the condition\
    \ that the sum of the two halves be odd.\n<code>\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpy5i9k7xq.py\", line 32\n    <|/ a tags=python,python-3.x\
    \ |>\n                              ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    left, right\
    \ = 0, length - 1\n    pivot_index = 0\n    sorted_index = 0\n    pivot = array[pivot_index]\n\
    \    right_sum = 0\n\n    while left <= right:\n        left_sum = array[left]\
    \ + array[pivot_index]\n        right_sum = array[right] + array[pivot_index]\n\
    \        if left_sum % 2 != 0:\n            if left_sum < pivot:\n           \
    \     pivot = left_sum\n                sorted_index = left\n                left\
    \ += 1\n            else:\n                sorted_index = right\n            \
    \    right -= 1\n        else:\n            if right_sum < pivot:\n          \
    \      pivot = right_sum\n                sorted_index = right\n             \
    \   right -= 1\n            else:\n                sorted_index = left\n     \
    \           left += 1\n\n    return array[sorted_index:pivot_index+1]\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffuk__.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmp18ffuk__.py\", line 62,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp18ffuk__.py\", line 53,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp18ffuk__.py\", line\
    \ 26, in sort_array\n    pivot = array[pivot_index]\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array_copy = array.copy()\n    array_copy.sort()\n\
    \    return array_copy\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mvvqy3d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3mvvqy3d.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp3mvvqy3d.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n    array = sorted(array)\n\
    \    if sum(array) % 2 != 0:\n        array = array[::-1]\n    return array\n\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4r8r07jb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4r8r07jb.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp4r8r07jb.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code goes here\n    sum_of_first_val\
    \ = array[0]\n    sum_of_last_val = array[-1]\n    odd_sum = 0\n    even_sum =\
    \ 0\n    for idx, val in enumerate(array):\n        if idx != 0:\n           \
    \ odd_sum += array[idx-1]\n            even_sum += array[idx-1]\n        if odd_sum\
    \ % 2 != 0:\n            array[idx], array[idx-1] = array[idx-1], array[idx]\n\
    \        if even_sum % 2 != 0:\n            array[idx], array[idx-1] = array[idx-1],\
    \ array[idx]\n    return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclyxiffr.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpclyxiffr.py\", line 47,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpclyxiffr.py\", line 38,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpclyxiffr.py\", line\
    \ 23, in sort_array\n    sum_of_first_val = array[0]\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # write your code here\n    # Hint: you\
    \ can solve this problem using Python's 'sorted' method\n    if sum( array[0],\
    \ array[-1] ) % 2:\n        return sorted(array)\n    else:\n        return sorted(array,\
    \ reverse = True)\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkozcwsxn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpkozcwsxn.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpkozcwsxn.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkozcwsxn.py\", line\
    \ 24, in sort_array\n    if sum( array[0], array[-1] ) % 2:\nIndexError: list\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if len(array) == 0:\n        return\
    \ []\n    \n    # Find the sum of first and last element.\n    sum_first = sum(array[0:-1])\n\
    \    sum_last = sum(array[1:])\n    \n    # Sort the array based on above conditions.\n\
    \    if sum_first % 2 == 0:\n        array.sort(reverse=True)\n    else:\n   \
    \     array.sort()\n    \n    return array\n    \n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprw7xnbfx.py\", line 38\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    new_array = []\n    sum = 0\n    for\
    \ num in array:\n        sum += num\n        new_array.append(num)\n    if sum\
    \ % 2 != 0:\n        return new_array[::-1]\n    return new_array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_98q01t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpl_98q01t.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpl_98q01t.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return array\n</cell>\n<text>\nQ1. Write\
    \ a program to find the sum of array elements\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpehomqa3_.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # init a result list\n    result\
    \ = []\n\n    # init first index\n    index_first_value = 0\n\n    # init last\
    \ index\n    index_last_value = len(array) - 1\n\n    # init a sum list\n    sum_list\
    \ = []\n\n    # init a sum list\n    sum_list_odd = 0\n    sum_list_even = 0\n\
    \n    # init a flag list\n    flag = 0\n\n    # sort loop\n    for value in array:\n\
    \        # sum up sum list\n        sum_list.append(value + sum_list[index_first_value])\n\
    \n        # sort odd sum\n        if sum_list[index_first_value] % 2 != 0:\n \
    \           flag = 1\n            sum_list_odd += sum_list[index_first_value]\n\
    \            sum_list[index_first_value] = 0\n        else:\n            sum_list_even\
    \ += sum_list[index_first_value]\n            sum_list[index_first_value] = 0\n\
    \n        # sort even sum\n        if sum_list[index_first_value] % 2 == 1:\n\
    \            flag = 0\n            sum_list_even += sum_list[index_first_value]\n\
    \            sum_list[index_first_value] = 0\n\n        # update first index\n\
    \        if flag == 0:\n            index_first_value += 1\n\n        # update\
    \ last index\n        if flag == 1:\n            index_last_value -= 1\n\n   \
    \ # sort odd sum\n    if sum_list_odd % 2 != 0:\n        flag = 1\n        sum_list_odd\
    \ += sum_list[index_first_value]\n        sum_list[index_first_value] = 0\n  \
    \  else:\n        sum_list_even += sum_list[index_first_value]\n        sum_list[index_first_value]\
    \ = 0\n\n    # sort even sum\n    if sum_list_even % 2 == 1:\n        flag = 0\n\
    \        sum_list_even += sum_list[index_first_value]\n        sum_list[index_first_value]\
    \ = 0\n\n    # sort loop\n    for value in sum_list:\n        if flag == 0:\n\
    \            result.append(value)\n            flag = 1\n        else:\n     \
    \       result.append(value - result[index_first_value])\n            result[index_first_value]\
    \ = value + result[index_first_value]\n            flag = 0\n\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvruanwo.py\", line\
    \ 110, in <module>\n    test_check()\n  File \"/tmp/tmpdvruanwo.py\", line 108,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdvruanwo.py\", line 99,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdvruanwo.py\", line\
    \ 76, in sort_array\n    sum_list_even += sum_list[index_first_value]\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # your code here\n    \n    return\
    \ array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lor7izq.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0lor7izq.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp0lor7izq.py\", line 31,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    array_copy = array.copy()\n   \
    \ sum_array = [array_copy[0]]\n    for i in range(1, len(array_copy)):\n     \
    \   sum_array.append(array_copy[i]+sum_array[-1])\n    sum_array.sort()\n    sum_array_copy\
    \ = []\n    for i in sum_array:\n        sum_array_copy.append(array_copy[sum_array.index(i)])\n\
    \    return sum_array_copy\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdjr6dlb3.py\", line 32\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if sum(array) % 2:\n        return sorted(array)\n\
    \    else:\n        return sorted(array, reverse=True)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdidxnavg.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdidxnavg.py\", line 38,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdidxnavg.py\", line 32,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array or not isinstance(array,\
    \ list) or len(array) < 2:\n        return array\n    \n    even = []\n    odd\
    \ = []\n    \n    if len(array) % 2 == 1:\n        even = array\n    else:\n \
    \       odd = array\n    \n    odd.sort(reverse=False)\n    even.sort(reverse=True)\n\
    \    \n    return even + odd\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzku9gwz2.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpzku9gwz2.py\", line 48,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpzku9gwz2.py\", line 45,\
    \ in check\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n\
    \    elif len(array) == 1:\n        return array\n    else:\n        pivot = sum(array[-2:])\
    \ % 2 # get the middle value\n        length = len(array) - 2 # get the length\
    \ of array\n        left = [0] * length # left array value\n        right = [0]\
    \ * length # right array value\n        left[0] = array[0] # set first value to\
    \ left\n        right[length - 1] = array[length - 1] # set last value to right\n\
    \        count = 0\n        for i in range(1, length + 1):\n            if left[i\
    \ - 1] <= pivot:\n                count += 1 # increase left value\n         \
    \       left[i] = left[i - 1] + array[i] # update left array\n            else:\n\
    \                count += -1 # decrease left value\n                left[i] =\
    \ left[i - 1] - array[i] # update left array\n            if right[i - 1] <= pivot:\n\
    \                count += 1 # increase right value\n                right[i] =\
    \ right[i - 1] + array[i] # update right array\n            else:\n          \
    \      count += -1 # decrease right value\n                right[i] = right[i\
    \ - 1] - array[i] # update right array\n        if count == 1: # ascending order\n\
    \            return left + [pivot] + right\n        elif count == -1: # descending\
    \ order\n            return right + [pivot] + left\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_8c9jtq.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmp7_8c9jtq.py\", line 62,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7_8c9jtq.py\", line 55,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmp7_8c9jtq.py\", line 40, in sort_array\n    left[i] = left[i -\
    \ 1] - array[i] # update left array\nIndexError: list assignment index out of\
    \ range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # your code here\n    if len(array) <\
    \ 2:\n        return array\n    summ = array[0] + array[-1]\n    if summ % 2 ==\
    \ 0:\n        return array[::-1]\n    else:\n        return array[:]\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzpww68_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpdzpww68_.py\", line 42,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpdzpww68_.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    arr_len = len(array)\n    if arr_len\
    \ == 0:\n        return array\n    if arr_len == 1:\n        return array\n  \
    \  if arr_len == 2:\n        if array[0] == array[1]:\n            array[0], array[1]\
    \ = array[1], array[0]\n        return array\n    if arr_len % 2 == 0:\n     \
    \   odd_sum = sum(array[:arr_len // 2])\n        even_sum = sum(array[arr_len\
    \ // 2:])\n        if odd_sum % 2 == 1:\n            array[arr_len // 2:] = array[arr_len\
    \ // 2:][::-1]\n            array.sort()\n            return array\n        elif\
    \ even_sum % 2 == 1:\n            array[:arr_len // 2] = array[:arr_len // 2][::-1]\n\
    \            array.sort()\n            return array\n        else:\n         \
    \   return array\n    else:\n        odd_sum = sum(array[:arr_len // 2])\n   \
    \     even_sum = sum(array[arr_len // 2:])\n        if odd_sum % 2 == 0:\n   \
    \         array[arr_len // 2:] = array[arr_len // 2:][::-1]\n            array.sort()\n\
    \            return array\n        elif even_sum % 2 == 0:\n            array[:arr_len\
    \ // 2] = array[:arr_len // 2][::-1]\n            array.sort()\n            return\
    \ array\n        else:\n            return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ou6xbxj.py\", line\
    \ 71, in <module>\n    test_check()\n  File \"/tmp/tmp5ou6xbxj.py\", line 69,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp5ou6xbxj.py\", line 63,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    stack = []\n    res = []\n    for num\
    \ in array:\n        stack.append(num)\n        if sum((stack[-1], stack[-2]))%2\
    \ == 1:\n            res.append(stack.pop())\n        else:\n            res.append(stack.pop())\n\
    \            stack.pop()\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperi8do4l.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmperi8do4l.py\", line 43,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmperi8do4l.py\", line 35,\
    \ in check\n    assert candidate([5]) == [5]\n  File \"/tmp/tmperi8do4l.py\",\
    \ line 26, in sort_array\n    if sum((stack[-1], stack[-2]))%2 == 1:\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return array\n\
    \    sum_val = 0\n    last_idx = None\n    count = 0\n    for idx in range(1,\
    \ len(array)):\n        sum_val += last_idx\n        if last_idx is None:\n  \
    \          last_idx = array[idx]\n        elif sum_val % 2:\n            array[idx]\
    \ = array[last_idx]\n        else:\n            array[idx] = array[last_idx] *\
    \ -1\n        last_idx = array[idx]\n        count += 1\n    return array\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26c0c6sg.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp26c0c6sg.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp26c0c6sg.py\", line 42,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmp26c0c6sg.py\", line 28, in sort_array\n    sum_val += last_idx\n\
    TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphk66melf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphk66melf.py\", line 34,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmphk66melf.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: 1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    def helper(arr: List[int]) -> List[int]:\n\
    \        if len(arr) == 1:\n            return arr\n        if len(arr) == 2:\n\
    \            return arr[::-1]\n        mid = arr[int((len(arr))/2)]\n        pivot\
    \ = arr[int((len(arr))/2 + 1)]\n        right_index = helper(arr[1:-1])\n    \
    \    left_index = helper([x for x in arr[1:-1] if x != mid])\n        if arr[0]\
    \ > pivot:\n            return right_index\n        else:\n            return\
    \ left_index\n    return helper(arr).copy()\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=sorting,python,mergesort |>\nThis answer is more pythonic than the others.\n\
    <code>\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2f8eecml.py\", line 36\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    res = []\n    for x in array:\n     \
    \   res.append(x)\n    res.sort()\n    res.reverse()\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7eyi7zjm.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp7eyi7zjm.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp7eyi7zjm.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # write your code here\n    return\
    \ array\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87,\
    \ 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11])\
    \ == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk893w4dy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpk893w4dy.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpk893w4dy.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbe64fys.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmplbe64fys.py\", line 36,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmplbe64fys.py\", line 27,\
    \ in check\n    assert candidate([]) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length <=\
    \ 1:\n        return array\n    sum_first = array[0]\n    sum_last = array[length\
    \ - 1]\n    if sum_first < sum_last:\n        pivot = sum_first\n        array[0]\
    \ = sum_last\n        array[length - 1] = pivot\n    else:\n        pivot = sum_last\n\
    \        array[0] = sum_first\n        array[length - 1] = pivot\n    left = length\
    \ - 2\n    right = length - 1\n    while left >= 0 and right >= 0:\n        left_sum\
    \ = array[left]\n        right_sum = array[right]\n        if left_sum + right_sum\
    \ == pivot:\n            array[left + right] = array[left]\n            array[left]\
    \ = pivot\n            left -= 1\n            right -= 1\n        elif left_sum\
    \ + right_sum > pivot:\n            left -= 1\n        else:\n            right\
    \ -= 1\n    return array\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvsschd8.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpnvsschd8.py\", line 61,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpnvsschd8.py\", line 54,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n \
    \ File \"/tmp/tmpnvsschd8.py\", line 41, in sort_array\n    array[left + right]\
    \ = array[left]\nIndexError: list assignment index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n  \
    \  sum_array = sum(array[0:-1]) + array[-1]\n    if sum_array % 2 == 0:\n    \
    \    return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpea1it8.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpjpea1it8.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpjpea1it8.py\", line 33,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    n = len(array)\n    # initialize min\
    \ and max to first and last values\n    min = array[0]\n    max = array[-1]\n\
    \    # initialize the left and right pointers\n    left = 0\n    right = n - 1\n\
    \    # initialize sum, max and min to 0\n    sum = 0\n    maxsum, minsum = sum,\
    \ sum\n    # loop through all values within our array\n    while left <= right:\n\
    \        # get the sum from the left and right pointers\n        sum = array[left]\
    \ + array[right]\n        # keep updating the min and max if the sum is greater\n\
    \        # than the min or less than the max\n        if sum > maxsum:\n     \
    \       maxsum = sum\n        if sum < minsum:\n            minsum = sum\n   \
    \     # determine if we should swap\n        if sum % 2 == 0:\n            # if\
    \ the sum is even, we should swap\n            array[left], array[right] = array[right],\
    \ array[left]\n            # increment the left and decrement the right pointers\n\
    \            left += 1\n            right -= 1\n        else:\n            # if\
    \ the sum is odd, we should swap\n            array[left], array[right] = array[right],\
    \ array[left]\n            # increment the left pointer and increment the right\
    \ pointers\n            left += 1\n            right -= 1\n    return array\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqu02rh5.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmpqqu02rh5.py\", line 67,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpqqu02rh5.py\", line 58,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqqu02rh5.py\", line\
    \ 24, in sort_array\n    min = array[0]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return sorted(array)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88tvn9f2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp88tvn9f2.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp88tvn9f2.py\", line 29,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823419
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    length = len(array)\n    if length ==\
    \ 1:\n        return array\n    if length % 2 == 0:\n        return array[length\
    \ // 2] + sort_array(array[length // 2 - 1:0:-1])\n    return array[length //\
    \ 2] + sort_array(array[length // 2 - 1:0:-1])[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08kjmer_.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp08kjmer_.py\", line 40,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp08kjmer_.py\", line 31,\
    \ in check\n    assert candidate([]) == []\n  File \"/tmp/tmp08kjmer_.py\", line\
    \ 26, in sort_array\n    return array[length // 2] + sort_array(array[length //\
    \ 2 - 1:0:-1])\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum = 0\n    for num in array:\n    \
    \    sum += num\n    if sum % 2 == 0:\n        temp = sorted(array, reverse=True)\n\
    \    else:\n        temp = sorted(array)\n    return temp\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5a_pgkj.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpg5a_pgkj.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpg5a_pgkj.py\", line 35,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) == 0:\n        return []\n\
    \    sum_list = [0] + array[:]\n    sum_list.sort()\n    if len(sum_list) % 2\
    \ == 0:\n        return sum_list\n    else:\n        return sum_list[1::2]\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([5])\
    \ == [5]\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   \
    \ assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert\
    \ candidate([2, 1]) == [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) ==\
    \ [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21,\
    \ 14, 11]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2txxiscy.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2txxiscy.py\", line 41,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2txxiscy.py\", line 33,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = sum(array[1:])\n    sort_array\
    \ = array[: len(array) - 1]\n    if sum_of_array % 2 != 0:\n        sort_array.append(sort_array.pop(0))\n\
    \    return sort_array\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5,\
    \ 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2m6az838.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2m6az838.py\", line 39,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp2m6az838.py\", line 31,\
    \ in check\n    assert candidate([5]) == [5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    count = len(array)\n    # init a max_sum\
    \ to calculate the sum of the first two elements\n    max_sum = 0\n    for i in\
    \ range(count - 1, -1, -1):\n        # calculate the sum of the first two elements\n\
    \        if i % 2 == 0:\n            max_sum += array[i]\n        else:\n    \
    \        max_sum -= array[i]\n        array[i], array[count - i - 1] = array[count\
    \ - i - 1], array[i]\n    # if the sum of the first two elements is odd, sort\
    \ the array\n    if max_sum & 1:\n        array.sort(reverse=True)\n    else:\n\
    \        array.sort()\n    return array\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([5]) == [5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6,\
    \ 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n    assert candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnk63lp6.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpxnk63lp6.py\", line 49,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpxnk63lp6.py\", line 43,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return array\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([5]) == [5]\n    assert\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) ==\
    \ [1, 2]\n    assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42,\
    \ 87]\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwregjcos.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwregjcos.py\", line 35,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpwregjcos.py\", line 28,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976625
- exit_code: -1
  program: "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Given an array of non-negative integers, return a copy of the\
    \ given array after sorting,\n    you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n    or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sum_of_array = 0\n    for i in array:\n\
    \        sum_of_array += i\n    return array\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([5]) == [5]\n    assert candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert candidate([2, 4, 3, 0, 1,\
    \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert candidate([2, 1]) == [1, 2]\n  \
    \  assert candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87]\n    assert\
    \ candidate([21, 14, 23, 11]) == [23, 21, 14, 11]\n\ndef test_check():\n    check(sort_array)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6scvpude.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6scvpude.py\", line 37,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmp6scvpude.py\", line 30,\
    \ in check\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976626
