name: HumanEval_146_specialFilter
language: py
prompt: "from typing import List\n\ndef specialFilter(nums: List[int]) -> int:\n \
  \   \"\"\"Write a function that takes an array of numbers as input and returns \n\
  \    the number of elements in the array that are greater than 10 and both \n  \
  \  first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n\
  \    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2,\
  \ -3, 45, 21, 109])\n    2\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5, -2, 1, -5]) == 0\n    assert\
  \ candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21,\
  \ 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert\
  \ candidate([71, -2, -33, 75, 21, 19]) == 3\n    assert candidate([1]) == 0\n  \
  \  assert candidate([]) == 0\n\ndef test_check():\n    check(specialFilter)\n\n\
  test_check()\n"
completions: ["    result = 0\n    nums.sort()\n    for num in nums:\n        if (num\
    \ > 10 and num%2 ==1 and num%9!=1) or (num > 10 and num%2 ==0 and num%9==1):\n\
    \            result+=1\n    return result\n", "    count = 0\n    for num in nums:\n\
    \        if num > 10 and num > nums[0]%2 and nums[-1]%2==1:\n            count\
    \ += 1\n    return count\n", "    \n    numsFilter = list(filter(lambda x: x >\
    \ 10 and x%2==1 and x%10%2==1, nums))\n    return len(numsFilter)\n</cell>\n<cell>",
  "    if len(nums) == 0:\n        return 0\n    else:\n        for i in nums:\n \
    \           if i > 10 and (i % 2 == 1 and i % 5 == 1):\n                return\
    \ 1\n        return 0\n", "    num_counter = 0\n    for num in nums:\n       \
    \ if (num > 10) and (num % 2 != 0) and ((num / 10) % 2 != 0):\n            num_counter\
    \ += 1\n    return num_counter\n\n", "    return len([x for x in nums if x > 10\
    \ and x%2==1 and x%4==1])\n\nprint(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33,\
    \ -2, -3, 45, 21, 109]))\n</cell>\n<text>\nList comprehensions, generators, map()\n\
    \n</text>\n<text>\nList comprehensions, generators, map()\n\n</text>\n<text>\n\
    List comprehension\n\n</text>\n<cell>\nmy_list = [1, 2, 3, 4, 5]\n[x for x in\
    \ my_list if x > 2]\n</cell>\n<text>\nGenerators\n\n</text>\n<cell>", "    for\
    \ i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 0:\n    \
    \        if nums[i] < 10:\n                return 0\n            else:\n     \
    \           l = nums[i] // 100\n                if nums[i - 1] % 2 == 0 and nums[i\
    \ - 1] > l:\n                    return 0\n                ", "    return len([num\
    \ for num in nums if num > 10 and num%2 == 1 and not num%4 == 0])\n", "    return\
    \ sum(num[i] > 10 and num[i] % 2 == 1 and num[i - 1] % 2 == 1 for i, num in enumerate(nums))\n\
    </code>\n<|/ a tags=python-3.x,python |>\n<| c |>\nA little bit of explanation\
    \ would be nice.\n<|/ c |>\n<| c |>\nThis doesn't work, at least not in my version\
    \ of python, at least not on that website. `SyntaxError: invalid syntax` for that\
    \ line. I've also tried in IDLE 3.6 and it doesn't work.\n<|/ c |>\n<| c |>\n\
    Yes, sorry! I fixed it. I should use single quotes instead of double quotes for\
    \ strings, and I didn't realize that you can't put a colon after a tuple like\
    \ that. I edited my answer.\n<|/ c |>\n<| c |>\nWow, this is amazing! I was able\
    \ to do just that. Thank you so much!\n<|/ c |>\n<| c |>\nIf you want it to count\
    \ positive integers instead of just odd-numbered ones, change `num[i] > 10` to\
    \ `num[i] > -10`. Also, change `and num[i] % 2 == 1` to `and num[i] % 2 == 0`.\
    \ You will also need to change `and num[i - 1] % 2 == 1` to `and num[i - 1] %\
    \ 2 == 0`. These changes will make it to count positive integers instead of just\
    \ odd-numbered ones.\n<|/ c |>\n<| a |>\nHere is an answer using NumPy and list\
    \ comprehension:\n<code>\nimport numpy as np\n", "    count = 0\n    for num in\
    \ nums:\n        if num > 10:\n            if num % 10 == 1 and num / 10 % 2 ==\
    \ 0:\n                count += 1\n            elif num % 10 == 3 and num / 10\
    \ % 2 == 1:\n                count += 1\n    return count\n", "    pass\n", " \
    \   count = 0\n    for num in nums:\n        if (num > 10) and (num > nums[0])\
    \ and (num > nums[-1]):\n            count += 1\n    return count\n        \n\
    print(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45,\
    \ 21, 109]))\n</cell>\n<text>\nLambda Expression\nWe can also use a lambda expression,\
    \ which is a short hand for defining small anonymous functions. The advantage\
    \ of lambda expressions is that they can be more concise and are generally considered\
    \ more readable. For example:\n\n\n</text>\n<cell>\nspecialFilter = lambda nums:\
    \ len([num for num in nums if num > 10 and num > nums[0] and num > nums[-1]])\n\
    print(specialFilter([15, -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45,\
    \ 21, 109]))\n</cell>\n<text>\nChallenge Problem 7\nWrite a function that takes\
    \ an array of numbers and returns the sum of the numbers in the array.\n\n\n</text>\n\
    <cell>", "    count = 0\n    for i in range(len(nums)):\n        if nums[i] >\
    \ 10:\n            count += 1\n            for j in range(i + 1, len(nums)):\n\
    \                if nums[j] % 2 != 0 and nums[j] % 2 != 1:\n                 \
    \   break\n                if j == len(nums) - 1 and nums[j] % 2 == 0:\n     \
    \               count += 1\n    return count\n", "    pass\n", "    pass\n</cell>\n\
    <cell>\nassert specialFilter(nums=[15, -73, 14, -15]) == 1\nassert specialFilter(nums=[33,\
    \ -2, -3, 45, 21, 109]) == 2\n</cell>\n<text>\nWrite a function that takes an\
    \ array of numbers as input and returns the sum of the elements in the array.\n\
    For example:\n>>> sumOfEvens([2, 4, 6, 8, 10, 12])\n18\n>>> sumOfEvens([1, 5,\
    \ 10, 15, 20])\n25\n>>> sumOfEvens([1, 2, 4, 8, 12])\n12\n>>> sumOfEvens([4, 1,\
    \ 3, 5])\n10\n\"\"\"\npass\n\n</cell>\n<cell>\nassert sumOfEvens([2, 4, 6, 8,\
    \ 10, 12]) == 18\nassert sumOfEvens([1, 5, 10, 15, 20]) == 25\nassert sumOfEvens([1,\
    \ 2, 4, 8, 12]) == 12\nassert sumOfEvens([4, 1, 3, 5]) == 10\n</cell>\n<text>\n\
    Write a function that takes an array of numbers and returns the sum of the squared\
    \ elements in the array.\nFor example:\n>>> sumOfSquares([4, -9, 9, 0, 3])\n23\n\
    >>> sumOfSquares([-4, -3, -2, 0, 3])\n-25\n>>> sumOfSquares([-4, -3, -2, 0, -3,\
    \ -4])\n-32\n>>> sumOfSquares([-4, -3, -2, 3, 4, -1, -5, -5])\n-25\n>>> sumOfSquares([-4,\
    \ -3, -2, 3, 4, -1, -5, -5, -4, -3, -2, 3, 4, -1, -5, -5])\n-60\n\"\"\"\npass\n\
    \n</cell>\n<cell>\nassert sumOfSquares([4, -9, 9, 0, 3]) == 23\nassert sumOfSquares([-4,\
    \ -3, -2, 0, 3]) == -25\nassert sumOfSquares([-4, -3, -2, 0, -3, -4]) == -32\n\
    assert sumOfSquares([-4, -3, -2, 3, 4, -1, -5, -5]) == -25\nassert sumOfSquares([-4,\
    \ -3, -2, 3, 4, -1, -5, -5, -4, -3, -2, 3, 4, -1, -5, -5]) == -60\n</cell>\n<text>\n\
    Write a function that takes an array of numbers as input and returns the product\
    \ of the elements in the array.\nFor example:\n>>> productOfEvens([2, 4, 6, 8,\
    \ 10, 12])\n720\n>>> productOfEvens([1, 5, 10, 15, 20])\n120\n>>> productOfEvens([1,\
    \ 2, 4, 8, 12])\n24\n>>> productOfEvens([4, 1, 3, 5])\n20\n\"\"\"\npass\n\n</cell>\n\
    <cell>\nassert productOfEvens([2, 4, 6, ", "    pass\n", "    nums.sort()\n  \
    \  evens = [i for i in nums if i%2==0]\n    odd = [i for i in nums if i%2!=0]\n\
    \    \n    return len(evens) * len(odd)\n", "    \n    count = 0\n    for i in\
    \ range(len(nums)):\n        if nums[i] > 10 and (nums[i]%2==1 or nums[i]%2==0):\n\
    \            count += 1\n    return count\n\nprint(specialFilter([15, -73, 14,\
    \ -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n</cell>\n<text>\nmap()\n\
    map() is a function that takes as its first argument a function and that can take\
    \ as many arguments as you like and returns a list containing the results of applying\
    \ the function to those arguments.\n\nYou can read about it here.\n\n\n</text>\n\
    <cell>", "    count = 0\n    for num in nums:\n        if num > 10 and num%10%2\
    \ != 1:\n            count += 1\n    return count\n", "    pass\n", "    nums.sort()\n\
    \    \n    count = 0\n    \n    # Loop over the array from the end to the start\n\
    \    for num in nums[::-1]:\n        \n        # If num is less than 10 and the\
    \ first and last digits are odd\n        if num < 10 and (num % 2 == 0) & (num\
    \ % 5 == 0):\n            count += 1\n        \n        # Stop searching after\
    \ checking first and last digits are even\n        if num < 10 and (num % 2 ==\
    \ 0) & (num % 2 == 0):\n            break\n        \n        # Stop searching\
    \ after checking first and last digits are odd\n        if num < 10 and (num %\
    \ 2 == 1) & (num % 5 == 0):\n            break\n            \n    return count\n",
  "    nums.sort()\n    count = 0\n    for num in nums:\n        if num > 10 and num\
    \ % 2 == 0:\n            count += 1\n        if num > 10 and num % 2 != 0:\n \
    \           count -= 1\n    return count\n", "    count = 0\n    for i in nums:\n\
    \        if i > 10 and nums[len(nums) - 1] % 2 != nums[0] % 2:\n            count\
    \ += 1\n    return count\n\n", "    count = 0\n    for i in nums:\n        if\
    \ i > 10:\n            if (i%10) % 2 == 0:\n                if (i%10) % 2 != 0:\n\
    \                    count += 1\n    return count\n", "    total = 0\n    for\
    \ i in nums:\n        if i > 10 and i%2 == 0 and i%2 != i//2:\n            total\
    \ += 1\n    return total\n", "    count = 0\n    for n in nums:\n        if n\
    \ > 10 and n//10%2==1:\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for n in nums:\n        if n > 10:\n            if n % 2 == 0 and nums.index(n\
    \ - 10) % 2 == 1:\n                count += 1\n    return count\n", "    pass\n",
  "    nums= [i for i in nums if i>10]\n    if len(nums)==0:\n        return 0\n \
    \   nums.sort()\n    first = nums[0]\n    last = nums[-1]\n    if first%2==0 and\
    \ last%2==1:\n        return 1\n    return 0\n", "    count = 0\n    for i in\
    \ range(len(nums)):\n        if i > 0 and nums[i] % 2 == 1:\n            count\
    \ = count + 1\n        if i > 0 and nums[i-1] % 2 == 0:\n            count = count\
    \ + 1\n        if i > 0 and nums[i-1] % 2 == 1:\n            count = count + 1\n\
    \        if i > 0 and nums[i] != nums[i - 1]:\n            count = count + 1\n\
    \    return count\n", "    nums.sort()\n    size = len(nums)\n    i = 0\n    count\
    \ = 0\n    while  i < size:\n        if nums[i] > 10 and nums[i - 1] % 2 == 1\
    \ and nums[i] % 2 == 1:\n            count += 1\n        i += 1\n    return count\n",
  "    count = 0\n    for i in nums:\n        if i > 10 and (nums[len(nums) - 1] %\
    \ 2 == 1) and nums[len(nums) - 2] % 2 == 0:\n            count += 1\n    return\
    \ count\n", "    numsCount = nums.count(nums)\n    if numsCount == 0:\n      \
    \  return 0\n    else:\n        numsCount = numsCount*numsCount\n    oddLastDigit\
    \ = nums[-1:].count(0)%2\n    oddFirstDigit = nums[0:1].count(0)%2\n    if oddFirstDigit\
    \ == 1 and oddLastDigit == 1:\n        return numsCount\n    else:\n        return\
    \ 0\n\n", "    \n    count = 0\n\n    for i in nums:\n        if i > 10 and (i\
    \ % 2 == 0 and (i//10%2 == 1)):\n            count += 1\n        \n    return\
    \ count\n    \n    ", "    count = 0\n    \n    for num in nums:\n        if num\
    \ > 10 and num%2 ==1 and num%10 %2 == 0:\n            count += 1\n           \
    \ \n    return count\n    \n</cell>\n<text>\nProblem 2: Define a function that\
    \ can filter a list of numbers, given the conditions described above. For example:\n",
  "    pass\n", "    pass\n", "    count = 0\n    for x in nums:\n        if x >=\
    \ 10 and (x // 10) % 2 == 0:\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=1 tags=python,arrays |>\n<| c |>\nYou have to import `operator` from\
    \ Python. [link](https://docs.python.org/2/library/operator.html)\n<|/ c |>\n\
    <| c |>\n: That's a very good point, I just copied the code from the question\
    \ without really thinking about it. I edited the answer to include that detail.\n\
    <|/ c |>\n<| a tags=python,arrays |>\n<code>", "    count = 0\n    for num in\
    \ nums:\n        if num > 10 and num[0] % 2 and num[-1] % 2:\n            count\
    \ += 1\n    return count\n</cell>\n<text>\nExercise 3\nThe previous exercise used\
    \ a for loop to iterate over the elements in the array nums. In a list comprehension\
    \ we can make this more concise by saying nums = [15, -73, 14, -15]. Your task\
    \ is to use the list comprehension to count the number of elements in nums that\
    \ are greater than 10 and both first and last digits are odd.\n\nWrite a list\
    \ comprehension that will count the elements in nums that satisfy the above conditions.\
    \ Test your list comprehension by printing its length.\n\n\n</text>\n<cell>",
  "    for i in range(len(nums)):\n        if nums[i] >= 10 and (nums[i]%2 == 1) &\
    \ (nums[i-1]%2 == 1):\n            return i+1\n    return 0\n\nprint(specialFilter([15,\
    \ -73, 14, -15]))\n</cell>\n<text>\nProblem 5\nImplement a function that finds\
    \ the unique elements of a list without using the in keyword. \nIf there are repeats,\
    \ you should only return the element once. \nYou may use any built-in method from\
    \ your list library to do this, but you should not use the in keyword. \nThe only\
    \ keyword you should use is append. \nYou may assume the list does not contain\
    \ duplicates.\n\n\n</text>\n<cell>\nnumList = [1, 4, 2, 6, 4, 4]\n</cell>\n<cell>",
  "    odd_count = 0\n    even_count = 0\n    for num in nums:\n        if num > 10:\n\
    \            if odd_count <= 0 and num%2 == 0:\n                odd_count += 1\n\
    \            elif odd_count >= 1 and num%2 == 0:\n                odd_count -=\
    \ 1\n            elif even_count <= 0 and num%2 != 0:\n                even_count\
    \ += 1\n            elif even_count >= 1 and num%2 != 0:\n                even_count\
    \ -= 1\n    return odd_count\n", "    nums_length = len(nums)\n    odd_nums =\
    \ 0\n    even_nums = 0\n    i = 0\n\n    while i < nums_length:\n        if nums[i]\
    \ > 10:\n            odd_nums += 1\n        elif nums[i] % 2 == 0:\n         \
    \   even_nums += 1\n        i += 1\n    \n    return even_nums * 2 +odd_nums\n",
  "    pass\n", "    nums.sort()\n    lower = nums[0]\n    upper = nums[-1]\n    return\
    \ lower + upper + 1\n", "    count = 0\n    for num in nums:\n        if num >\
    \ 10 and num % 2 and num % 2:\n            count += 1\n    return count\n</code>\n\
    <|/ a |>\n<| c |>\nThis is a great answer!  I especially like how you used the\
    \ \"and num%2\" to get around the \"if not num%2:\" statement.  I didn't realize\
    \ you could do that like that.\n<|/ c |>\n<| c |>\nYes, you could do that. I would\
    \ recommend not using it and instead using the `and` operator. In your case, it\
    \ makes a lot more sense to use `and`\n<|/ c |>\n<| a tags=python dscore=2 |>\n\
    Use a list comprehension:\n<code>", "    count = 0\n    for num in nums:\n   \
    \     if num > 10 and (num % 2 == 1) ^ (num % 2 == 0):\n            count += 1\n\
    \    return count\n    ", "    odd_first_digit = 0\n    odd_last_digit = 0\n \
    \   for num in nums:\n        if num > 10:\n            odd_first_digit += 1\n\
    \        if num > 9:\n            odd_last_digit += 1\n\n    return odd_first_digit\
    \ == 1 and odd_last_digit == 1 and (nums[0] % 2 != 0 or nums[-1] % 2 != 0)\n\n",
  "    nums.sort()\n    count = 0\n    \n    for i in range(len(nums)):\n        if\
    \ nums[i] < 10:\n            count = count+1\n        elif nums[i] == 10:\n  \
    \          pass\n        elif nums[i]%2 == 1 and nums[i]%2 ==1 and nums[i]%2 ==\
    \ 0:\n            pass\n        else:\n            count = count + 1\n    return\
    \ count\n", "    return len(filter(lambda x: (x>10 and (x%2)==1 and (x>9 and x<10\
    \ and (x%2)==1) or (x>9 and x<10 and (x%2)==0), nums))\n", "    return len([num\
    \ for num in nums if num > 10 and num%2 == 1 and num%4 ==1])\n", "    count =\
    \ 0\n    firstOdd = 0\n    lastOdd = 0\n    for num in nums:\n        if num >\
    \ 10:\n            count += 1\n            if num % 2 == 0:\n                firstOdd\
    \ += 1\n            else:\n                lastOdd += 1\n    return count if count\
    \ == 1 and firstOdd == lastOdd else 0\n", "    count = 0\n    for i in range(len(nums)):\n\
    \        if nums[i] > 10:\n            if nums[i-1] % 2 == 1 and nums[i+1] % 2\
    \ == 1:\n                count += 1\n    return count\n", "    return len(nums)\n\
    \n", "    count = 0\n    for n in nums:\n        if n > 10 and n % 2 == 1 and\
    \ n % 10 == 1 and n % 5 == 0:\n            count += 1\n    return count\n\n</cell>\n\
    <text>\nRun Your Program\n\n</text>\n<text>\nYou just saw how to use lists. We'll\
    \ now try it out on some examples.\n\n\n</text>\n<cell>\nprint(\"Numbers greater\
    \ than 10 and both first and last digits are odd (1, 3, 5, 7, 9):\")\nnums = [-15,\
    \ 33, 21, 10, -75, -73, 10, 3, 12, -5, -6, 18, 0]\nspecialFilter(nums)\n</cell>\n\
    <text>\nSo how about a more complex problem?\n\n\n</text>\n<text>\nProblem 9\n\
    For this problem, you will write a function that determines whether a number is\
    \ prime.\n\nA number is prime if it passes the following two tests:\n\nIt is not\
    \ divisible by any number between 2 and its squareroot (ie. between 2 and 9).\n\
    It is not divisible by 3 (ie. not evenly divisible by any number between 2 and\
    \ 3).\n\nWrite a function that takes in a number as input and that returns the\
    \ number of prime numbers less than or equal to that number.\n\nFor example, your\
    \ function should work like this:\n\n>>> is_prime(0)\nFalse\n\n>>> is_prime(1)\n\
    True\n\n>>> is_prime(42)\nTrue\n\n>>> is_prime(97)\nFalse\n\n>>> is_prime(100)\n\
    True\n\n>>> is_prime(101)\nFalse\n\n</text>\n<cell>", "    pass\n", "    filtered:\
    \ List[int] = []\n    for num in nums:\n        if num > 10 and num % 2 == 0 and\
    \ num % 5 != 0:\n            filtered.append(num)\n    return len(filtered)\n\n",
  "    numsFiltered = []\n    for i in nums:\n        if i >= 10 and i%2 != 1 and\
    \ i%2 != 3:\n            numsFiltered.append(i)\n    return len(numsFiltered)\n",
  "    \n    return len([num for num in nums if num > 10 and num % 2 != 0 and num\
    \ % 4 != 0])\n</cell>\n<cell>", "    count = 0\n    for num in nums:\n       \
    \ digit = num // 10\n        if num > 10 and (digit % 2 == 1 and (digit % 5 ==\
    \ 1 or digit % 7 == 1)):\n            count += 1\n    return count\n    \n", " \
    \   \n    count = 0\n    for num in nums:\n        if num > 10 and (num & 1) ==\
    \ 1 and (num & 3) == 3:\n            count += 1\n    return count\n", "    pass\n\
    </cell>\n<cell>", "    count = 0\n    for num in nums:\n        if num > 10 and\
    \ (num % 10 == 1 or num % 10 == 0):\n            if num % 100 == 0:\n        \
    \        count += 1\n            elif num % 100 == 1:\n                count +=\
    \ 2\n            elif num % 100 == 2:\n                count += 3\n          \
    \  elif num % 100 == 3:\n                count += 4\n            elif num % 100\
    \ == 4:\n                count += 5\n            elif num % 100 == 5:\n      \
    \          count += 6\n            elif num % 100 == 6:\n                count\
    \ += 7\n            elif num % 100 == 7:\n                count += 8\n       \
    \     elif num % 100 == 8:\n                count += 9\n            elif num %\
    \ 100 == 9:\n                count += 10\n            else:\n                count\
    \ += 1\n    return count\n\nassert specialFilter([15, -73, 14, -15]) == 1\nassert\
    \ specialFilter([33, -2, -3, 45, 21, 109]) == 2\n</cell>\n<text>\nProblem 10\n\
    Write a function that takes as input a list of digits and returns the number of\
    \ valid digits \nin the list. Since we're working with digits, it makes sense\
    \ to represent each number as an \narray of digits. For example:\n[1,2,3] is represented\
    \ as an array [1, 2, 3]. \n[1, 2, 3, 0] is represented as an array [1, 2, 3, 0].\
    \ \n[7, 4, 11] is represented as an array [7, 4, 11].\nFor the first problem,\
    \ use a hash table to store the count of each valid digit.\n\nFor the second problem,\
    \ use the fact that all digits are of the form $x \\times 10^y$\nwhere x and y\
    \ are positive integers, and count the number of entries in the list that \nmultiply\
    \ to the number $10^y$. For example:\n[1,2,3] is represented as an array [1, 2,\
    \ 3]. \n[1, 2, 3, 0] is represented as an array [1, 2, 3, 0]. \n[7, 4, 11] is\
    \ represented as an array [7, 4, 11].\nFor the first problem, use a hash table\
    \ to store the count of each valid digit.\n\nFor the second problem, use the fact\
    \ that all digits are of the form $x \\times 10^y$\nwhere x and y are positive\
    \ integers, and count the number of entries in the list that \nmultiply to the\
    \ number $10^y$. For example:\n[1,2,3] is represented as an array [1, 2, 3]. \n\
    [1, 2, 3, 0] is represented as an array [1, 2, 3, 0]. \n[7, 4, 11] is represented\
    \ as an array [7, 4, 11].\n\n\n</text>\n<cell>", "    \n    return len(nums)\n",
  "    pass\n", "    odd = 0\n    even = 0\n    for num in nums:\n        if num >\
    \ 10:\n            odd += 1 if num % 2 == 1 else 0\n        if num > 10:\n   \
    \         even += 1 if num % 2 == 0 else 0\n    if odd and even:\n        return\
    \ odd + (nums[-1] // 10 * (1 if even == 0 else even))\n    else:\n        return\
    \ 0\n", "    nums.sort()\n    odd = 0\n    even = 0\n    for num in nums:\n  \
    \      if num > 10 and num % 10 == 1 and num % 100 == 1 and num % 1000 == 1:\n\
    \            even += 1\n        if num > 10 and num % 10 == 1 and num % 100 !=\
    \ 1:\n            odd += 1\n    return even + odd\n", "    count = 0\n    for\
    \ num in nums:\n        if num > 10 and (num%2 == 1 and (num//10%2 == 1)):\n \
    \           count += 1\n    return count\n", "    pass\n", "    odd1 = 0\n   \
    \ odd2 = 0\n    odd3 = 1\n    odd4 = 1\n    for num in nums:\n        if num >\
    \ 10:\n            odd1 += num // 10\n            odd1 %= 10\n            odd2\
    \ += num % 10\n            odd2 %= 10\n            if odd1 == 1 and odd2 == 1:\n\
    \                odd3 += 1\n            if odd1 == 2 and odd2 == 2:\n        \
    \        odd4 += 1\n    return len(nums) - odd1 - odd3 - odd4\n\n", "    count\
    \ = 0\n    for num in nums:\n        if num > 10 and num%2 == 0:\n           \
    \ if num > 10 and num%2 == 1 and nums[len(nums)-1]%2 == 0:\n                count\
    \ += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    numbers:\
    \ List[int] = nums\n    answer: int = 0\n    for i in numbers:\n        if (i\
    \ > 10):\n            if (not (i % 2)) and (not (i%10)):\n                answer\
    \ += 1\n    return answer\n</code>\nAnd it works fine here\n<|/ a tags=python,filter\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou can do it this way :\n<code>", "    count\
    \ = 0\n    for num in nums:\n        if num > 10:\n            count += 1 \n \
    \       elif num < -10:\n            count += 1\n        elif num % 2 != 1:\n\
    \            count += 1 \n    return count\n</cell>\n<text>\nTesting with examples\n\
    \n</text>\n<cell>", "    count = 0\n    for i in nums:\n        if i > 10 and\
    \ (i%2 == 1 and i%5 == 1):\n            count = count + 1\n    return count\n",
  "    odd = 0\n    even = 0\n    \n    if len(nums) == 0:\n        return 0\n   \
    \ \n    for num in nums:\n        if num > 10:\n            odd += 1\n       \
    \ elif num % 2 == 1:\n            even += 1\n            \n    if even < 2 and\
    \ odd < 2:\n        return 1\n    else:\n        return 0\n", "    return sum([1\
    \ for x in nums if x > 10 and x%2 == 1 and x%3 != 1])\n\nprint(specialFilter([15,\
    \ -73, 14, -15]))\n</cell>\n<text>\nPractice Question\nHow would you write a function\
    \ that, for a given list of numbers, returns whether all or some of the elements\
    \ are even? Use the function specialFilter to test your function.\n\nNote: This\
    \ question is a variation of the classic \"Find if a set of numbers is even or\
    \ odd\" question, but here each number is being tested. It is also a good example\
    \ to follow when writing your own functions.\n\n\n</text>\n<cell>", "    filteredNumbers\
    \ = 0\n    firstOdd = False\n    lastOdd = False\n    for num in nums:\n     \
    \   if (num > 10) and (firstOdd and lastOdd):\n            filteredNumbers = filteredNumbers\
    \ + 1\n        if (num > 10) and (firstOdd != lastOdd):\n            filteredNumbers\
    \ = filteredNumbers + 1\n        if (num > 10) and (firstOdd == lastOdd):\n  \
    \          filteredNumbers = filteredNumbers + 1\n        if (num % 2) == 0:\n\
    \            firstOdd = True\n        else:\n            lastOdd = True\n    return\
    \ filteredNumbers\n", "    count=0\n    for num in nums:\n        if num>=10 and\
    \ num%2==1 and num%5==1:\n            count+=1\n    return count\n", "    count\
    \ = 0\n    for n in nums:\n        if n > 10 and n%2 != 0 and n%3 != 0:\n    \
    \        count += 1\n    return count\n</cell>\n<cell>\nspecialFilter([15, -73,\
    \ 14, -15])\n</cell>\n<cell>", "    pass\n", "    count=0\n    for i in range(len(nums)):\n\
    \        if nums[i]>10 and (nums[i]%2==0 or nums[i]%2==1):\n            count=count+1\n\
    \    return count\n</code>\n<|/ a tags=python-3.x,python,python-2.7,functional-programming\
    \ |>\n<| a dscore=0 |>\nIf you don't want your solution to be O(n) at all, you\
    \ can use a trick that can be used in other languages to solve this in O(1):\n\
    <code>", "    # your code here\n", "    count = 0\n    for num in nums:\n    \
    \    if num > 10 and (num & 1) and (num & 3) and (num & 7) and (num & 9):\n  \
    \          count += 1\n    return count\n", "    count=0\n    for x in nums:\n\
    \        if x > 10 and (x % 2 == 0 or x % 5 == 0):\n            count+=1\n   \
    \ return count\n</code>\n<|/ a tags=python,python-3.x |>\n<| a dscore=0 |>\n<code>",
  "    pass\n    # your answer here\n", "    count = 0\n    for i in range(len(nums)):\n\
    \        count = 0\n        if (nums[i] >= 10 and (nums[i] % 2 == 0 or nums[i]\
    \ % 2 == 1)):\n            count += 1\n            count += 1\n    return count\n\
    \n\nassert specialFilter([10, 1, 9, 6, 4, 7]) == 1\nassert specialFilter([-5,\
    \ -3, 8, 2, 12, 6, -4, 9, -7, 1]) == 3\nassert specialFilter([3, -5, 3, -4, 2,\
    \ -1]) == 0\nprint(\"OK!\")\n", "    # Solution goes here\n    return 0\n", " \
    \   nums.sort()\n    for x in nums:\n        if x >= 10 and x%2 == 1 and x%2 !=\
    \ nums[-1]%2:\n            return len(nums)\n    return 0\n", "    count = 0\n\
    \    for n in nums:\n        if n > 10 and n % 2 != 1:\n            count += 1\n\
    \    return count\n", "    return sum(1 for num in nums if num > 10 and num %\
    \ 2 == 0 and num >= 10 and num % 2 == 1)\n\n", "    nums = [num for num in nums\
    \ if num > 10 and num > -10 and num%2 == 1]\n    return len(nums)\n", "    return\
    \ len([num for num in nums if num > 10 and num%2 == 1 and num//2 % 2 ==1])\n",
  "    i=0\n    while i < len(nums):\n        if nums[i] > 10 and nums[i-1]%2 == 0\
    \ and nums[i-1]%2!=0:\n            i+=1\n        else:\n            i+=1\n   \
    \ return i\n", "    result = 0\n    for i in nums:\n        if i > 10:\n     \
    \       if i%2 and i%3:\n                result += i\n    return result\n", " \
    \   return sum(1 for num in nums if num > 10 and num[0]%2 and num[-1]%2)\n", " \
    \   \n    nums.sort()\n    count = 0\n    odd_nums = []\n    for num in nums:\n\
    \        if num > 10 and num % 2 != 0 and num % 2 != 1:\n            count +=\
    \ 1\n        else:\n            odd_nums.append(num)\n    return count\n    \n",
  "    pass\n", "    nums = list(nums)\n    odds = sum((num%2 for num in nums if num>10),\
    \ 1)\n    evens = sum((num%2 for num in nums if num<-10), 1)\n    return odds\
    \ + evens\n", "    \n    pass\n", "    evenDigits = 0\n    oddDigits = 0\n   \
    \ lastDigit = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] > 10\
    \ and evenDigits == 0 and oddDigits == 0:\n            evenDigits += 1\n     \
    \   if nums[i] > 10 and evenDigits > 0 and oddDigits == 0:\n            oddDigits\
    \ += 1\n        if nums[i] > 10 and evenDigits == 0 and oddDigits > 0:\n     \
    \       lastDigit = nums[i] % 10\n            if nums[i] % 10 == 1 and lastDigit\
    \ % 2 != 0:\n                oddDigits -= 1\n            elif nums[i] % 10 ==\
    \ 1 and lastDigit % 2 == 0:\n                evenDigits -= 1\n        i += 1\n\
    \    return evenDigits + oddDigits\n", "    return len([num for num in nums if\
    \ num > 10 and (firstLastOdd(num) == 1 or firstLastOdd(num) == 3)])\n", "    count\
    \ = 0\n    for num in nums:\n        if (num > 10 and (num[0] % 2 == 1 and num[-1]\
    \ % 2 == 1)):\n            count += 1\n    return count\n\nprint(specialFilter([15,\
    \ -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\nprint(specialFilter([10,\
    \ 0, -2, 0, -1, 9]))\n</cell>\n<text>\nExercise: Write a Python function to compute\
    \ square root of a number. \nThe input to the function will be a float number.\n\
    \n\n</text>\n<cell>", "    nums.sort()\n    return len(nums) - len(set(nums))\
    \ - 2\n", "    nums.sort()\n    for i in nums:\n        if i > 10 and (i%2 ==\
    \ 1 and (i/10) % 2 == 1) or i >= 10:\n            return 1\n    return 0\n\n",
  "    # Your code here!\n    return sum(num > 10 and num % 2 != 0 for num in nums)\n",
  "    count = 0\n    odd = 0\n    for num in nums:\n        if num > 10:\n      \
    \      count += 1\n        elif num > 0 and num % 2 == 0:\n            odd +=\
    \ 1\n    return count + odd\n", "    count = 0\n    for i in nums:\n        if\
    \ i > 10 and (i % 2 == 0 and (i[-2] % 2 == 1) or (i[-2] % 2 == 0)):\n        \
    \    count += 1\n    return count\n", "    \n    count = 0\n    for num in nums:\n\
    \        if num > 10:\n            count += 1\n            if num % 2 == 0:\n\
    \                if num % 4 != 0:\n                    count += 1\n    return\
    \ count\n</code>\n<|/ a |>\n<| a tags=python,arrays,loops dscore=0 |>\nYour code\
    \ does not work because you are counting the same element multiple times in the\
    \ if statements. So for example instead of adding 1 if the number is greater than\
    \ 10 and it is odd, you add 2 if the number is greater than 10 and even and 3\
    \ if it is odd and even.\nTry this:\n<code>", "    return sum(i > 10 and i % 2\
    \ == 1 and (abs(nums[i - 1]) % 2 == 1 and abs(nums[i + 1]) % 2 == 1)\n       \
    \ for i in range(0, len(nums) - 1))\n", "    count = 0\n    for item in nums:\n\
    \        if item > 10 and (item % 2 == 0) and (item % 2 == 0) and (item % 2 !=\
    \ 0):\n            count += 1\n    return count\n", "    i=0\n    while i<len(nums):\n\
    \        if nums[i] > 10 and nums[i]%2 == 0 and nums[i-1]%2 == 1 and nums[i+1]%2\
    \ == 1:\n            i+=1\n        else: i+=1\n    return i\n", "    count = 0\n\
    \    for i in nums:\n        if i>10:\n            count+=1\n        if (i%2==1)\
    \ and (nums[len(nums)-1]%2==1):\n            count+=1\n    return count\n", " \
    \   pass\n", "    count = 0\n    for i in nums:\n        if i > 10 and i & 1:\n\
    \            count += 1\n        elif i % 2:\n            count += 1\n    return\
    \ count\n", "    count = 0\n    for num in nums:\n        if num > 10 and num\
    \ % 2 == 0:\n            if num % 10 % 2 == 1 and num % 10 % 3 != 1 and num %\
    \ 10 % 4 != 1:\n                count += 1\n    return count\n", "    return len([num\
    \ for num in nums if num > 10 and num % 2 == 1 and num % 10 == 1])\n\n", "   \
    \ count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i]%2\
    \ == 1 and nums[i]%2 == 1 and nums[i-1]%2 == 1:\n            count = count + 1\n\
    \    return count\n</cell>\n<text>\nProblem 4\nWrite a function named oddNumber\
    \ that takes an array of numbers as input and\nreturns the number of elements\
    \ in the array that are odd numbers.\nFor example:\n>>> oddNumber([15, -73, 14,\
    \ -15])\n1\n>>> oddNumber([33, -2, -3, 45, 21, 109])\n3\n(Note in the above example\
    \ 21 is not an odd number.)\n\"\"\"\n</cell>\n<text>\nSolution\nTo get your first\
    \ program working, try this code:\n", "    # your code here\n    \n    return\
    \ sum(1 for n in nums if n > 10 and n % 2 == 1 and n % 10 not in [1, 7])\n   \
    \     \n</cell>\n<cell>", "    evenNumCount = 0\n    oddNumCount = 0\n    for\
    \ num in nums:\n        if num > 10:\n            if num % 2 == 1:\n         \
    \       oddNumCount += 1\n            else:\n                evenNumCount += 1\n\
    \        else:\n            if num % 2 != 0:\n                oddNumCount += 1\n\
    \            else:\n                evenNumCount += 1\n    return oddNumCount\
    \ * evenNumCount\n", "    pass\n", "    count = 0\n    for num in nums:\n    \
    \    if num > 10 and num[0] % 2 == 1 and num[-1] % 2 == 1:\n            count\
    \ += 1\n    return count\n</code>\n<|/ a |>\n<| c |>\n`if num > 10 and num[0]\
    \ % 2 == 1 and num[-1] % 2 == 1:` ... that would only return true for numbers\
    \ like `-23`.\n<|/ c |>\n<| c |>\nOh yes you are right. I had used `%` instead\
    \ of `//`. Thanks :)\n<|/ c |>\n<| a tags=python,python-3.x dscore=1 |>\nHere\
    \ is a solution using list comprehension and math. Also note that if the number\
    \ is odd, then the conditional statement will not work as intended since num[0]\
    \ % 2 == 1 will return False for even numbers.\n<code>", "    return len(list(filter(lambda\
    \ n: (n>10) and ((n%2==1) and (n%100!=0)), nums)))\n</cell>\n<cell>", "    count\
    \ = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 != 1\
    \ and num % 3 != 1:\n                count += 1\n    return count\n", "    count\
    \ = 0\n    for num in nums:\n        if num > 10 and (num%2 != 0 or num%10 ==\
    \ 1):\n            count += 1\n    return count\n", "    if len(nums) == 0:\n\
    \        return 0\n    \n    firstOdd = 0\n    lastOdd = 0\n    for i in range(len(nums)):\n\
    \        if (nums[i] >= 10 and nums[i] != 0):\n            firstOdd += 1\n   \
    \     if (nums[i] % 2 != 0 and nums[i] != 0):\n            lastOdd += 1\n    return\
    \ firstOdd + lastOdd + 1\n\n", "    count = 0\n    for num in nums:\n        if\
    \ num > 10 and num[0]%2 == 1 and num[-1]%2 == 0:\n            count += 1\n   \
    \ return count\n</cell>\n<text>\nProblem 12\nBy multiplying the output of the\
    \ previous function, we get the following matrix:\n\n[[5, 10, 15, 20],\n [6, 11,\
    \ 16, 21],\n [7, 12, 17, 22],\n [8, 13, 18, 23],\n [9, 14, 19, 24]]\n\nFind the\
    \ sum of all the numbers in the resulting matrix. Check to see that your answer\
    \ matches the output of the matrix multiplication function above.\n\nHint: You\
    \ might find it useful to use a for loop here.\n\nHint 2: Multiplying matrices\
    \ can be done using numpy: np.multiply(A,B)\n\n\n</text>\n<cell>", "    oddSum\
    \ = 0\n    evenSum = 0\n\n    for num in nums:\n        if num > 10:\n       \
    \     if num % 2 == 0:\n                evenSum += 1\n            elif num % 2\
    \ != 0:\n                oddSum += 1\n\n    if oddSum + evenSum > 1:\n       \
    \ return 1\n    else:\n        return 0\n", "    return len([num for num in nums\
    \ if num > 10 and num % 2 != 0 and num % 4 != 0])\n</cell>\n<text>\nQuestion 2\n\
    Use your function to count how many numbers in the array are between 10 and 99.\n\
    \n\n</text>\n<cell>", "    \n    count = 0\n    for num in nums:\n        if num\
    \ > 10:\n            count += num // 10\n        if num % 10 < 2 or (num % 10\
    \ > 9 and num % 10 < 5):\n            count += 1\n    return count\n</cell>\n\
    <cell>", "    nums.sort()\n    length = len(nums)\n    if length == 0:\n     \
    \   return 0\n    elif nums[0] > 10:\n        return 1\n    \n    for i in range(1,\
    \ length - 1):\n        if nums[i] > 10:\n            if nums[i] % 2 != 0 and\
    \ nums[i-1] % 2 == 1:\n                return 1\n            else:\n         \
    \       return 0\n    return 0\n\n", "    count = 0\n    for i in nums:\n    \
    \    if i>=10 and i%2==1 and i%5==1:\n            count+=1\n    return count\n\
    \    ", "    \n    return len(nums)\n<|/ file filename=lecture09.py source=github\
    \ |>\n<text>\nExercise 2\nWrite a function that counts the number of elements\
    \ in a list. \nFor example, nums = [2, 4, 6, 8, 10] returns 4 and nums = [1, 2,\
    \ 3] returns 3.\n\n\n</text>\n<cell>", "    count = 0\n    for i in nums:\n  \
    \      if (i%2==0) and (i % 2 != 0) and ((i%10==0) and (i % 10 != 0) and(i%100!=0)\
    \ and(i%100!=0)):\n            count += 1\n    return count\n", "    count = 0\n\
    \    for num in nums:\n        if (num > 10) and (num % 2 == 1) and (num / 2 %\
    \ 2 == 1):\n            count += 1\n    return count\n</code>\nIt works with any\
    \ type of number except negative numbers. If you have negative numbers, you just\
    \ have to change the < to > in the condition num < 10. This will handle negative\
    \ numbers too.\nHope this helps!\n<|/ a tags=python |>\n<| c |>\nThis doesn't\
    \ seem to work for me. Could you please check?\n<|/ c |>\n<| c |>\nThis would\
    \ work for positive numbers only as the question was asked for elements that are\
    \ greater than 10 and first and last digits are odd numbers only. Also, could\
    \ you provide an example of the output you are getting and why it is incorrect?\n\
    <|/ c |>\n<| c |>\nI agree with you\n<|/ c |>\n<| c |>\nMy apologies, I edited\
    \ the question to show the expected output.\n<|/ c |>\n<| c |>\nNo problem, I\
    \ updated my answer to address negative numbers.\n<|/ c |>\n<| a tags=python |>\n\
    This should work:\n<code>\n>>> nums = [15, -73, 14, -15]\n>>> def f(nums):\n...\
    \     return len([n for n in nums if n > 10 and n%2 != 0 and n//2 != 0])\n...\
    \ \n>>> f(nums)\n1\n>>> \n</code>\nEDIT: If you want to check even digits and\
    \ odd digits use this:\n<code>\n>>> nums = [15, -73, 14, -15]\n>>> def f(nums):\n\
    ...     return len([n for n in nums if n > 10 and n % 2 == 0 and n // 2 % 2 ==\
    \ 0])\n... \n>>> f(nums)\n2\n>>> \n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ seem to work for me. Could you please check?\n<|/ c |>\n<| c |>\nIt works for\
    \ me. Which python version are you using?\n<|/ c |>\n<| c |>\nPython version `3.9.1`\
    \ could this be the issue?\n<|/ c |>\n<| c |>\nTry removing the `[]` from around\
    \ the list comprehension. Maybe that's the issue. It works for me in python 2.7.\
    \ Does it work for you if you try `nums = [15, -73, 14, -15]`\n<|/ c |>\n<| c\
    \ |>\nIt works! Could you please explain why it does work? Thanks!\n<|/ c |>\n\
    <| a tags=python |>\nI would do something like ", "    # Your code here\n    pass\n",
  "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 and\
    \ num % 1 == 0):\n            count += 1\n    return count\n", "    firstDigit\
    \ = 0\n    lastDigit = 0\n\n    for i in nums:\n        if i >= 10:\n        \
    \    firstDigit = i // 10\n            lastDigit = i - (firstDigit * 10)\n   \
    \     elif i < -10:\n            firstDigit = i // 10\n            lastDigit =\
    \ i - (firstDigit * 10)\n\n        if firstDigit % 2 and lastDigit % 2:\n    \
    \        return 1\n\n    return 0\n", "    return sum(num>10 and (num[0]%2==0\
    \ or num[-1]%2==0) for num in nums)\n</code>\n<|/ a tags=python,python-3.x |>\n\
    <| c |>\nHey thanks for the response. I'm relatively new to coding, so I did not\
    \ even know about that site. I'll try my best to implement your solution and see\
    \ how it works.\n<|/ c |>\n<| c |>\nNo worries, good luck. Remember to [accept\
    \ answers](https://stackoverflow.com/help/accepted-answer) when you are able.\n\
    <|/ c |>\n<| c |>\nHey, thanks for the help. I got it to work. I know I am not\
    \ supposed to say \"thanks\", but thank you for sharing this with me since I definitely\
    \ need to get to know this site.\n<|/ c |>\n<| a |>\nYou can use a generator expression\
    \ to filter the elements according to the condition:\n<code>", "    nums.sort()\n\
    \    oddCount = 0\n    evenCount = 0\n    \n    for i, x in enumerate(nums):\n\
    \        if x > 10:\n            if i%2 == 1:\n                oddCount += 1\n\
    \            else:\n                evenCount += 1\n    if oddCount == 1 and evenCount\
    \ == 1:\n        return 1\n    else:\n        return 2\n", "    nums.sort()\n\
    \    count=0\n    for i in range(len(nums)):\n        if nums[i]>10 and (nums[i]%2==1\
    \ and nums[i]%4==1):\n            count+=1\n    return count\n", "    firstEvenCount\
    \ = 0\n    lastEvenCount = 0\n\n    for num in nums:\n        if num > 10 and\
    \ num % 2 != 0:\n            firstEvenCount += 1\n        if num > 10 and num\
    \ % 2 != 0:\n            lastEvenCount += 1\n\n    oddSum = firstEvenCount + lastEvenCount\n\
    \n    return oddSum\n", "    numsCounted = []\n    for i in nums:\n        if\
    \ i > 10 and i%2 == 0 and (i//10)%2 == 0:\n            numsCounted.append(i)\n\
    \    return len(numsCounted)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThat is what\
    \ `numsCounted` is for. Just put in some test cases and see what you get. Make\
    \ sure you test the edge cases (negative numbers, number that is less than 10,\
    \ number with fractional part)\n<|/ c |>\n<| c |>\nOh I see, thank you. I was\
    \ confused about the `numsCounted` bit. Thanks again.\n<|/ c |>\n<| c |>\nWhy\
    \ do you say that numsCounted is a list?\n<|/ c |>\n<| c |>\nIt's a variable that\
    \ stores only the numbers that are greater than 10 and both first and last digits\
    \ of a number are odd.\n<|/ c |>\n<| c |>\n`numsCounted` is a list because in\
    \ each loop we append a number to the list if we found a number greater than 10\
    \ and its first and last digits are odd.\n<|/ c |>\n<| a dscore=0 tags=python\
    \ |>\nYour function returns 1 because it does not return anything in the if-statement.\
    \ It only returns True or False.\nWhat you need is a function with an if-statement\
    \ and a return statement.\n<code>", "    # Your code here\n    return sum(num\
    \ > 10 and nums[0] % 2 == 1 and nums[-1] % 2 == 1 for num in nums)\n", "    #\
    \ Your code here\n    \n    return len([x for x in nums if x > 10 and (x.__mod__(10)\
    \ == 1) & (x.__mod__(10) == 9)])\n", "    result=0\n    for i in range(len(nums)):\n\
    \        if nums[i]>=10 and nums[i]%2!=0 and nums[i]%5!=0:\n            result+=1\n\
    \    return result\n", "    # To do: Complete this function\n\n    # pass\n  \
    \  # To do: Fill in the body of the function with code below:\n    return len(nums)\
    \ # return the length of the list\n", "    count = 0\n    \n    \n    \n    return\
    \ count\n</cell>\n<text>\nQuestion 3\nWrite a Python function called oddDigit\
    \ that takes a single number as an input and returns the first and last digits\
    \ of that number. If the number is negative, return -1.\n\nFor example:\n    >>>\
    \ oddDigit('10')\n    (1, 9)\n    >>> oddDigit('-10')\n    (-1, -1)\n    \"\"\"\
    \n    \n    \n\n    return -1\n</cell>\n<text>\nQuestion 4\nWrite a Python function\
    \ called filter which takes in a list of numbers and returns the number of elements\
    \ in the list that match your filter conditions above. For example:\n    >>> filter([10,\
    \ -20, 3, -5, 6, 5])\n    2\n    >>> filter([10, 20, 5, -3])\n    0\n    >>> filter([10,\
    \ -5, -3, 20])\n    1\n    >>> filter([10, 5, 20, 20])\n    0\n    >>> filter([])\n\
    \    0\n    \"\"\"\n    \n    \n\n    return -1\n</cell>\n<text>\nQuestion 5\n\
    Write a Python function called filterList which takes in a list of numbers and\
    \ a filter function, which it calls, and returns the number of elements in the\
    \ list that match the filter conditions above. For example:\n    >>> filterList([10,\
    \ -20, 3, -5, 6, 5], oddDigit)\n    1\n    >>> filterList([10, 20, 5, -3], oddDigit)\n\
    \    2\n    >>> filterList([10, 20, 5, -3], lambda x: x < 0)\n    1\n    >>> filterList([10,\
    \ 20, 5, -3], lambda x: x > 10)\n    0\n    >>> filterList([10, 20, 5, -3], lambda\
    \ x: x > 0 and x < 10)\n    1\n    >>> filterList([10, 20, 5, -3], lambda x: x\
    \ > 10)\n    0\n    >>> filterList([], oddDigit)\n    0\n    \"\"\"\n    \n  \
    \  \n\n    return -1\n</cell>\n<text>\nQuestion 6\nWrite a Python function called\
    \ findSmallest that takes in a list of numbers and a function that you write and\
    \ returns the smallest number in the list that matches the criteria. For example:\n\
    \    >>> findSmallest([10, -20, 3, -5, 6, 5], oddDigit)\n    -5\n    >>> findSmallest([10,\
    \ 20, 5, -3], oddDigit)\n    -10\n    >>> findSmallest([10, 20, 5, -3], lambda\
    \ x: x > 10)\n    -5\n    >>> findSmallest([10, 20, 5, -3], lambda x: x > 0 and\
    \ x < 10)\n    -10\n    >>> findSmallest([10, 20, 5, -3], lambda x: x > 10)\n\
    \    -10\n    >>> findSmallest([], oddDigit)\n    -10\n    \"\"\"\n    \n\n  \
    \  return -1\n</cell>\n<text>\nQuestion 7\nWrite a Python function called findLargest ",
  "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or\
    \ num % 10 == 3):\n            count += 1\n    return count\n        \n", "  \
    \  count = 0\n    for num in nums:\n        if num > 10 and num % 2 != 1 and num\
    \ % 2 != 3:\n            count += 1\n    return count\n", "    count = 0\n   \
    \ for num in nums:\n        if num > 10 and num % 2 != 0 and num % 7 == 0:\n \
    \           count += 1\n    return count\n", "    count = 0\n    for i in range(len(nums)):\n\
    \        if nums[i] > 10 and nums[i]%2!=0 and nums[i]%2==1:\n            count\
    \ += 1\n    return count\n\n", "    return len([num for num in nums if num > 10\
    \ and num % 2 != 0 and num % 5 == 0])\n\nassert specialFilter([15, -73, 14, -15])\
    \ == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n</cell>\n<text>\n\
    The function we wrote earlier can also take a list of strings (which are lists\
    \ themselves) and perform the same operation. Try it out below!\n\n\n</text>\n\
    <cell>", "    count = 0\n    for num in nums:\n        if num > 10 and num % 2\
    \ == 0:\n            count += 1\n    if count == 0 and nums[-1] % 2 == 0:\n  \
    \      count += 1\n    return count\n    ", "    count = 0\n    for i in nums:\n\
    \        if i>10:\n            if i%2 == 0:\n                if i%3 == 0:\n  \
    \                  if i%5 == 0:\n                        count += 1\n    else:\n\
    \        count += 1 \n    return count\n", "    return len([num for num in nums\
    \ if num > 10 and \n        ((num % 10) == 1 and (num % 100) != 11) \n       \
    \ and ((num % 10) == 0 and  (num % 100) != 0)])\n", "    count = 0\n    for i\
    \ in nums:\n        if i>10 and i%2==0 and i%7==0:\n            count += 1\n \
    \   return count\n", "    pass\n", "    count = 0\n    for num in nums:\n    \
    \    if num > 10:\n            if num % 2 == 0:\n                if num > 10:\n\
    \                    if num%10 == 1 and num%10 == 3:\n                       \
    \ count += 1\n                    elif num%10 == 1 and num%10 == 7:\n        \
    \                count += 1\n                    elif num%10 == 3 and num%10 ==\
    \ 7:\n                        count += 1\n    return count\n", "    numbers =\
    \ len(nums)\n    counter = 0\n    for i in nums:\n        if i >10:\n        \
    \    if i%2 == 0:\n                if i%10 == 1 and i%100 != 11:\n           \
    \         counter += 1\n                if i%10 == 1 and i%100 == 11:\n      \
    \              counter += 1 \n            else:\n                if i%10 == 1\
    \ and i%100 !=11:\n                    counter += 1 \n        if i == -10:\n \
    \           if i%10 == 1 and i%100 != 11:\n                counter += 1 \n   \
    \     if i == -9:\n            if i%10 == 1 and i%100 != 11:\n               \
    \ counter += 1 \n    return counter\n", "    count = 0\n    for num in nums:\n\
    \        num = abs(num)\n        if num > 10:\n            if num % 2 != 0 and\
    \ num % 7 == 0:\n                count += 1\n    return count\n\nassert specialFilter([15,\
    \ -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n\
    </cell>\n<cell>", "    count = 0\n    for num in nums:\n        if num > 10 and\
    \ num >= -10 and num % 2 != 0:\n            count += 1\n    return count\n</cell>\n\
    <text>\nExercise 9: Write a function that removes all duplicates from an array.\n\
    \n</text>\n<cell>", "    return len([num for num in nums if num > 10 and num %\
    \ 2 == 1 and num % 5 == 1])\n", "    num_sum = sum(nums)\n    odds = sum(nums[i]\
    \ for i in range(0, len(nums)) if nums[i] > 10 and (\n        nums[i]%2 != 0 or\
    \ nums[i-1]%2 != 0\n    ))\n    return num_sum - odds\n</code>\n<|/ a tags=python\
    \ |>\n<| c |>\nThe OP asked for better ways to do this\n<|/ c |>\n<| c |>\nYou\
    \ mean \"better\" as in \"more efficient\", or \"better\" as in \"more readable\"\
    ? Because the way I wrote this function is not very readable at all and I wanted\
    \ to provide at least some hints to the OP. Also, I just want to note that I don't\
    \ think this is inefficient. As far as I can tell, the time complexity of sum()\
    \ is O(1), and you are iterating through the list once, therefore it only needs\
    \ to iterate through it a total of n times.\n<|/ c |>\n<| c |>\nAs I said before,\
    \ the OP asked for better ways to do this, so I felt it would be better to help\
    \ him/her in the best possible way. However, I do agree with you in that your\
    \ code is very readable and efficient. I do however think that the OP is trying\
    \ to solve an interesting problem and your code is great if that's the case. I'm\
    \ just saying that your code doesn't actually solve the problem, just provides\
    \ a great way to get started. Sorry for the offtopic.\n<|/ c |>\n<| c |>\nSorry\
    \ if I offended, I thought I knew what StackOverflow was all about. I do understand\
    \ your point, and I do try to keep things interesting. However, I do think that,\
    \ as I said, it isn't what the OP is asking for. For example, how would you write\
    \ this function in Java if you wanted to? Also, I just wanted to point out that\
    \ it's *not* possible to do it more efficiently. As far as I can tell, it is O(n),\
    \ where n is the length of the list. I know this because I looked up the time\
    \ complexity of sum().\n<|/ c |>\n<| c |>\nThat is what I was trying to get at\
    \ in my comment in the question. I think the OP was hoping that there was a better\
    \ way to do it than iterating through the list twice, but I was not sure. Also,\
    \ thanks for letting me know, I will try to improve my answer.\n<|/ c |>\n<| a\
    \ tags=python dscore=2 |>\n<code>", "    return sum([num > 10 and num % 2 == 1\
    \ and num / 2 % 2 == 1 for num in nums])\n\nassert specialFilter([15, -73, 14,\
    \ -15]) == 1\nassert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n</code>\n\
    The return value of a lambda function can then be used just like a normal function.\
    \ \nYou used the sum function, which is useful for some situations. However, it\
    \ is not necessary to use it here. Instead, just add up the list elements and\
    \ use a conditional expression to decide whether you should count the number or\
    \ not. \n<code>", "    nums.sort()\n    return len([num for num in nums if num\
    \ > 10 and num%2==0 and (num[0]%2==0 and num[-1]%2==0)])\n</code>\n<|/ a tags=python-3.x\
    \ dscore=0 |>\n<| a dscore=0 |>\nIf you like more concise answers, use itertools.\n\
    <code>\nimport itertools\n", "    nums.sort()\n    odd_count = 0\n    even_count\
    \ = 0\n    for num in nums:\n        if num > 10:\n            if odd_count %\
    \ 2 == 0 and even_count % 2 == 0:\n                break\n            odd_count\
    \ += 1\n        else:\n            even_count += 1\n    return odd_count + even_count\n\
    \n", "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and\
    \ nums[i]%2 == 1 and nums[i-1]%2 == 1:\n            count += 1\n    return count\n\
    </cell>\n<text>\nAnd how does this work?\n\n\n</text>\n<cell>\nnums = [15, -73,\
    \ 14, -15]\nspecialFilter(nums)\n</cell>\n<text>\nTo get the last digit of a number\
    \ we can use math.floor().\n\n\n</text>\n<cell>\nimport math", "    count=0\n\
    \    for i in range(len(nums)):\n        if (nums[i] > 10 and (nums[i-1]%2==0\
    \ or nums[i]%2==0)):\n            count+=1\n    return count\n    \nprint(specialFilter([15,\
    \ -73, 14, -15]))\nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n</cell>\n\
    <text>\nExercise: Write a function that takes in an array of numbers and returns\
    \ how many numbers are less than 10 and their first and last digits are odd.\n\
    \n</text>\n<cell>", "    \n    if len(nums) <= 1:\n        return 0\n    else:\n\
    \        first = nums[0]\n        last = nums[-1]\n        \n        count = 1\n\
    \        \n        for i in range(len(nums)):\n            if nums[i] > 10:\n\
    \                count += count\n                \n            elif nums[i] >\
    \ 0 and (nums[i] % 2 == 1):\n                count += count\n                \n\
    \            elif nums[i] > 0 and (nums[i] % 2 == 0) and i == (len(nums) - 1):\n\
    \                count += count\n        \n        return count\n", "    \n  \
    \  return sum(1 for n in nums if n > 10 and n%2==1 and (n%100==0 or n%100==10)\
    \ and (n%1000==0 or n%1000==100))\n", "    count = 0\n    for num in nums:\n \
    \       if num > 10 and num % 2 != 0 and num % 2 != 1:\n            count += 1\n\
    \    return count\n", "    count = 0\n    for num in nums:\n        if num > 10\
    \ and num % 2 == 0 and num % 2 != num // 2:\n            count += 1\n    return\
    \ count\n", "    count = 0\n    for num in nums:\n        if num > 10 and num\
    \ > nums[-2]%2 and num > nums[-1]%2:\n            count += 1\n    return count\n",
  "    \n    count = 0\n    \n    for num in nums:\n        if num > 10:\n       \
    \     if num % 2 == 0:\n                if num > 9:\n                    if num\
    \ > 9:\n                        count += 2\n    return count\n    ", "    count\
    \ = 0\n    for num in nums:\n        if (num > 10) and (num % 2 == 0) and (num\
    \ % 2 == 1) and (num % 2 == 1):\n            count += 1\n    return count\n",
  "    sum = 0\n    i = 0\n    while i < len(nums):\n        if (nums[i] < 10):\n\
    \            if nums[i] > 10:\n                sum+=1\n        elif nums[i] >\
    \ 10:\n            if (nums[i] % 2 == 1) and (nums[i-1] % 2 == 1):\n         \
    \       sum+=1\n        i+=1\n    return sum\n", "    return len(nums)\n", " \
    \   count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or\
    \ num % 10 == 5):\n            count += 1\n    return count\n</cell>\n<cell>\n\
    assert specialFilter([15, -73, 14, -15]) == 1\nassert specialFilter([33, -2, -3,\
    \ 45, 21, 109]) == 2\n</cell>\n<cell>", "    return len([num for num in nums if\
    \ num > 10 and (num[0] == 1 and num[-1] == 1)])\n</code>\n<|/ a dscore=1 tags=python-3.x,python\
    \ |>\n<| a tags=python-3.x,python dscore=1 |>\nyou can try a list comprehension\
    \ as follows\n<code>\nlst=[15, -73, 14, -15]\nnum=[x for x in lst if x > 10 and(len(str(x))==len(str(abs(x))))]\n\
    print(num) # [15]\n</code>\n<|/ a |>\n<| a |>\nWe can use filter() and list comprehension\
    \ like this;\n<code>\nlst = [15, -73, 14, -15]\n", "    count = 0\n    for n in\
    \ nums:\n        if n > 10 and n % 2 and n % 5:\n            count += 1\n    return\
    \ count\n\n", "    count=0\n    for n in nums:\n        if n>10:\n           \
    \ if n%2==1:\n                count+=2\n            else:\n                count+=1\n\
    \        else:\n            count+=1\n    return count\n", "    # MY SOLUTION\n\
    \    # return len(nums)\n    count = 0\n    for i in range(len(nums)):\n     \
    \   if nums[i] > 10 and nums[i]%2 != 0 and nums[i] % 5 == 0:\n            count\
    \ += 1\n    return count\n", "    pass\n", "    # Your code here\n    return len(nums)\n\
    \nprint(specialFilter([15, -73, 14, -15]))\n</cell>\n<text>\nSolution\nClick below\
    \ for the solution.\n\n\n</text>\n<cell>", "    return len(nums) - (sum(nums[:3])\
    \ % 10 - sum(nums[-1:]) % 10 > 0)\n\nnums = [15, -73, 14, -15]\nprint(specialFilter(nums))\n\
    </cell>\n<text>\nWrite a function named firstLastOdd that takes a list as its\
    \ argument and returns the number of elements whose first and last digits have\
    \ odd value.\nFor example, for the list [4, -5, -6, -8, -10], the function should\
    \ return 3.\nFor example:\n    >>> firstLastOdd([4, -5, -6, -8, -10])\n    3\n\
    \    \nNotes:\n- Your function should have O(n) time complexity, where n is the\
    \ length of the list.\n- Your function should have a return type of:\n- an int\
    \ representing the number of elements in the array that have odd \n  values of\
    \ the first and last digits.\n- There may be more than one solution, and you may\
    \ return any of them.\n- Do not change the function name, and do not write any\
    \ other code in this file.\n\n</text>\n<cell>", "    count = 0\n    for num in\
    \ nums:\n        if num > 10 and (abs(num % 2) != 1 or num == 1):\n          \
    \  count += 1\n    return count\n", "    count = 0\n    for i in range(len(nums)):\n\
    \        first = int(nums[i]/10)%2\n        last = int(nums[i-1]/10)%2\n     \
    \   if first == 0 and last == 1:\n            count += 1\n    return count\n",
  "    count = 0\n    for i in nums:\n        if i > 10 and i%2 == 1 and i%2 ==1:\n\
    \            count += 1\n    return count\n", "    return sum([1 for num in nums\
    \ if num > 10 and num % 2 == 0 and num < 100])\n", "    nums.sort()\n    counter\
    \ = 0\n    for i in nums:\n        if i >= 10:\n            if i%2 != 0 and i%6\
    \ != 0:\n                counter += 1\n    return counter\n\n</cell>\n<cell>",
  "    # todo your code here\n    return sum(num > 10 and (num % 2 == 1) & (num %\
    \ 2 == 0) for num in nums)\n\nassert specialFilter([15, -73, 14, -15]) == 1\n\
    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\nassert specialFilter([33,\
    \ -2, -3, 45, 21, -109]) == 1\n</cell>\n<text>\nProblem 5\nImplement an is_palindrome\
    \ function that takes in a string as input and returns \nTrue if the word is a\
    \ palindrome, else False.\nFor example:\n>>> is_palindrome(\"A man, a plan, a\
    \ canal: Panama\")\nTrue\n>>> is_palindrome(\"A man, a plan, a canal: Panama\"\
    )\nFalse\n>>> is_palindrome(\"racecar\")\nFalse\n\"\"\"", "    \n    return len([num\
    \ for num in nums if num > 10 and num % 2 == 0 and num[0] % 2 == 0 and num[-1]\
    \ % 2 == 0])\n        ", "    pass\n</cell>\n<cell>", "    pass\n    ", "    count\
    \ = 0\n    for num in nums:\n        if (num > 10) and (num % 2 == 1) and (num\
    \ % 2 == 0):\n            count += 1\n    return count\n", "    \n    for num\
    \ in nums:\n        if num > 10 and num%2 == 1 and num%10%2 == 1:\n          \
    \  \n            return nums.index(num)\n\n    return 0\n    \n    ", "    i =\
    \ 0\n    j = 0\n    count = 0\n    while i < len(nums):\n        if nums[i] >\
    \ 10 and (nums[j] + 1) % 2 != 1:\n            count += 1\n        i += 1\n   \
    \     j += 1\n    return count\n", "    # Add your code here\n    return sum(1\
    \ for num in nums if num > 10 and (num[0]%2==1 and num[-1]%2==1))\n</code>\n<|/\
    \ a dscore=1 tags=python,list |>\n<| a |>\nYou could do something like:\n<code>",
  "    sum = 0\n    for n in nums:\n        sum = sum + n\n    return sum\n\nprint(specialFilter([15,\
    \ -73, 14, -15]))\n</code>\n<|/ a |>\n<| c |>\n`sum` isn't defined here, you'll\
    \ need to define it before calling `filter`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out! I've fixed it.\n<|/ c |>\n<| c |>\nThis doesn't count the numbers\
    \ greater than 10 but only numbers divisible by 10.\n<|/ c |>\n<| a |>\nUsing\
    \ list comprehensions:\n<code>", "    return len([num for num in nums if num >\
    \ 10 and (num % 2 == 1) and (num % 2 == 0 and num % 1 != 0)])\n</code>\n<|/ a\
    \ |>\n<| c |>\nThanks for the input. I am new to Python and I appreciate your\
    \ feedback. I've been struggling with this.\n<|/ c |>\n<| a tags=python,filter,list\
    \ |>\nYour code would look something like this. For each element in your list,\
    \ check if it meets your criteria. Then, for each element in your filtered list,\
    \ add one to your filtered list count if it passes.\n<code>", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
