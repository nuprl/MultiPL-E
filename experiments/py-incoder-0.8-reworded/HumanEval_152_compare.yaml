name: HumanEval_152_compare
language: py
prompt: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
  \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
  \ of some long-awaited\n    event is finally known. The feelings and thoughts you\
  \ have at that moment are\n    definitely worth noting down and comparing.\n   \
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    the value is\
  \ 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    \n    \n    example:\n\n    >>> compare([1, 2, 3, 4, 5, 1], [1, 2,\
  \ 3, 4, 2, -2])\n    [0, 0, 0, 0, 3, 3]\n    >>> compare([0, 5, 0, 0, 0, 4], [4,\
  \ 1, 1, 0, 0, -2])\n    [4, 4, 1, 0, 0, 6]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
  \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
  \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
  \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0,\
  \ 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
completions: ["    count = 0\n    for i in range(0,len(game)):\n        if game[i]\
    \ == guess[i]:\n            count += 1\n    if count == len(game):\n        return\
    \ [0]\n    else:\n        return [0]+[abs(game[i]-guess[i]) for i in range(0,len(game))]\n\
    \n", "    \n    #code goes here\n    res = [0 if game[i] == guess[i] else abs(game[i]\
    \ - guess[i]) for i in range(len(game))]\n    return res\n\n", "    \n    guesses\
    \ = [min(g, s) if len(g) < len(s) else max(g, s) for g, s in zip(guess, game)]\n\
    \    return [j - i for i, j in zip(guesses, game)]\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nThis would be my approach:\n<code>", "    return list(map(lambda\
    \ x, y: abs(x - y), guess, game))\n", "    diff: List[int] = []\n    for i, guess\
    \ in enumerate(guess):\n        score = int(game[i])\n        if guess == score:\n\
    \            diff.append(0)\n        else:\n            diff.append(abs(guess\
    \ - score))\n    return diff\n\n", "    \n    diff = []\n    for index in range(0,\
    \ len(guess)):\n        guess = guess[index]\n        score = game[index]\n  \
    \      \n        diff.append(abs(guess - score))\n    return diff\n\n\"\"\"",
  "    \n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n\
    \    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n\
    \    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n  \
    \  pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n\
    \    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n  \
    \  pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n\
    \    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n  \
    \  pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n\
    \    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n  \
    \  pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n\
    \    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n  \
    \  pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n    \n\
    \    \n    pass\n    \n    \n    \n    pass\n    \n    \n    \n    pass\n    \n\
    \    \n    \n", "    guess = [0] + guess\n    score = game\n    \n    for i in\
    \ range(1,len(guess)):\n        guess[i] += 1\n        score[i] += -1*guess[i]\n\
    \        \n    return [abs(score[i]-guess[i]) for i in range(len(score))]\n</cell>\n\
    <cell>", "    return [i + j for i, j in zip(game, guess)]\n", "    guesses = []\n\
    \    for g in guess:\n        guesses.append(abs(g - game[len(game) - 1]))\n \
    \   return guesses\n\n", "    return list(map(lambda i,j: abs(i - j), game, guess))\n\
    \n", "    \n    # your code goes here\n    score = 0\n    for i in range(len(guess)):\n\
    \        if guess[i] == game[i]:\n            score += abs(guess[i] - game[i])\n\
    \        else:\n            score += abs(guess[i] - game[i])\n    return score\n\
    </cell>\n<text>\nExercise 4\nCan you think of a more efficient way of computing\
    \ this function?\n\nHint: Use a list comprehension or another looping construct.\
    \ Also note that the order of the scores in both the test and guess arrays matters.\
    \ Make sure you return an array that has the same length as both arrays (in both\
    \ cases) to keep track of where you are in the array. \n\n\n</text>\n<cell>",
  "    return list(map(lambda guess, score: abs(guess - score), guess, game))\n</cell>\n\
    <cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    # your\
    \ code goes here\n    diff = [abs(x-y) for x, y in zip(game, guess)]\n    return\
    \ diff\n\n", "    score = 0\n    count = 0\n    for i in game:\n        if guess\
    \ == i:\n            count += 1;\n        else:\n            score = abs(guess\
    \ - i)\n    \n    return count\n", "    \n    if len(guesses) != len(scores):\n\
    \        raise RuntimeError(\"Invalid parameters\")\n    \n    differences = [0\
    \ for _ in scores]\n    \n    # TODO implement this function\n    return differences\n",
  "    # Your code here\n    return [ 0 if guess != score else abs(score-guess) for\
    \ score in game ]\n", "    # your code here\n    \n    length = len(guess)\n \
    \   \n    if length != len(game):\n        print(\"error\")\n        return []\n\
    \    \n    \n    \n    if guess[0] == game[0]:\n        diff = abs(guess[0]-game[0])\n\
    \        return [0]\n    elif guess[0] != game[0]:\n        diff = 1\n    \n \
    \   \n    for i in range(1,length):\n        if guess[i] == game[i]:\n       \
    \     diff += abs(guess[i]-game[i])\n            return [i]\n        elif guess[i]\
    \ != game[i]:\n            diff += 1\n            \n    return [0] * (length -\
    \ len(guess) + diff)\n        \n", "    diff = [abs(guess - score) for score,\
    \ guess in zip(game, guess)]\n    return diff\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
