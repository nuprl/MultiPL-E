name: HumanEval_66_digitSum
language: py
prompt: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes\
  \ a string as input and returns the sum of the upper characters only'\n    ASCII\
  \ codes.\n\n    Examples:\n    >>> digitSum('')\n    0\n    >>> digitSum('abAB')\n\
  \    131\n    >>> digitSum('abcCd')\n    67\n    >>> digitSum('helloE')\n    69\n\
  \    >>> digitSum('woArBld')\n    131\n    >>> digitSum('aAaaaXa')\n    153\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB')\
  \ == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') ==\
  \ 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') ==\
  \ 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE\
  \ Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n"
completions: ["    sum = 0\n    for c in s:\n        sum = sum + ord(c) - 64\n   \
    \ return sum\n\nassert digitSum('') == 0\nassert digitSum('abAB') == 131\nassert\
    \ digitSum('abcCd') == 67\nassert digitSum('helloE') == 69\nassert digitSum('woArBld')\
    \ == 131\nassert digitSum('aAaaaXa') == 153\n\n", "    return sum(int(c) for c\
    \ in s if c.isalpha())\n", "    s = 0\n    for c in s:\n        if c.isupper():\n\
    \            s = s + ord(c)\n    return s\n\n", "    if not s:\n        return\
    \ 0\n    return sum(ord(x) - ord('a') for x in s)\n\n", "    # Write your code\
    \ here\n    sum = 0\n    for char in s:\n        if char.isupper():\n        \
    \    sum += ord(char)\n    return sum\n", "    return sum(int(c) for c in s if\
    \ c.isupper())\n\n", "    sum = 0\n    for i in s:\n        sum += ord(i) - ord('a')\n\
    \    return sum\n\n\n@register(\"solution\")", "    return sum([ord(x) for x in\
    \ s])\n\n", "    # Convert string to ints\n    s = ''.join(str(int(c)) for c in\
    \ s)\n    # Add up ascii codes from ints\n    return sum(ord(c) for c in s)\n",
  "    # Your code here\n    total = 0\n    for char in s:\n        if char.isupper():\n\
    \            total += ord(char)\n\n    return total\n\n", "    s = s.replace('\
    \ ', '')\n    res = 0\n    for d in s:\n        res += d.upper() if d.isalpha()\
    \ else int(d)\n    return res\n\n", "    sum = 0\n    for char in s:\n       \
    \ if char.isalpha():\n            sum += ord(char)\n    return sum\n\n", "   \
    \ # your code here\n    count = 0\n    sum = 0\n    for char in s:\n        if\
    \ char.isupper():\n            sum += ord(char)\n        count += 1\n    return\
    \ sum\n\n", "    sum = 0\n    sum_uppers = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum_uppers += 1\n        sum += ord(char)\n    return sum + sum_uppers\n\
    \n", "    result = 0\n    s = s.strip()\n    for letter in s:\n        if letter.isupper():\n\
    \            result += ord(letter)\n    return result\n\n", "    s_sum = 0\n \
    \   for c in s:\n        if c.isupper():\n            s_sum += ord(c)\n    return\
    \ s_sum\n\n", "    sum = 0\n    for ch in s:\n        if ch >= ord('A') and ch\
    \ <= ord('Z'):\n            sum += ch - ord('a') + 1\n    return sum\n\n", " \
    \   return sum(int(a) for a in s)\n\n", "    result = 0\n    i = 0\n    while\
    \ i < len(s):\n        c = s[i]\n        if c.isupper():\n            result +=\
    \ ord(c)\n        i += 1\n    return result\n\n", "    return sum(int(char) for\
    \ char in s.upper() if char in string.ascii_uppercase )\n", "    s = ''.join([i\
    \ for i in s if i.isdigit()])\n    return int(s, 2)\n\n", "    sum = 0\n    for\
    \ x in s:\n        if x.isupper():\n            sum += ord(x)\n    return sum\n\
    \n", "    return sum(int(c) for c in s if c in \"0123456789\")\n\n", "    if len(s)\
    \ <= 1:\n        return len(s)\n    sum = 0\n    pos = 0\n    for c in s:\n  \
    \      if c == chr(64 + pos):\n            pos += 1\n        else:\n         \
    \   pos = 0\n        sum += ord(c)\n    return sum\n\n", "    upperSum = 0\n \
    \   for char in s:\n        if char.isupper():\n            upperSum += ord(char)\n\
    \    return upperSum\n\n", "    s = 0\n    for ch in s:\n        s += ord(ch)\
    \ - 64\n    return s\n\n", "    return sum(int(c) for i, c in enumerate(s) if\
    \ c.isupper())\n\n", "    if len(s) == 0:\n        return 0\n    sum_ = 0\n  \
    \  for i in s:\n        if i.isupper():\n            sum_ += ord(i)\n    return\
    \ sum_\n", "    total = 0\n    for character in s:\n        if character.isupper():\n\
    \            total += ord(character)\n    return total\n\n", "    sum = 0\n  \
    \  upperCount = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n \
    \           upperCount += 1\n        else:\n            sum += (ord(i) - ord('A')\
    \ + 1) * upperCount\n            upperCount = 0\n    return sum\n\n", "    return\
    \ sum(map(int, digits(s)))\n\n", "    sum = 0\n    for char in s:\n        if\
    \ char.isupper():\n            sum += ord(char)\n    return sum\n\n", "    sum\
    \ = 0\n    s_len = len(s)\n    s = 0\n    for i in range(s_len):\n        s +=\
    \ int(s[i])\n        sum += 1\n        if sum > 9:\n            break\n    return\
    \ s\n\n", "    return sum(map(int, filter(lambda x: x.isupper(), s)))\n\n", " \
    \   if not s:\n        return 0\n    if len(s) == 1:\n        return s\n    return\
    \ sum(map(ord, s))\n", "    return sum(ord(c) - ord('0') for c in s)\n\n", " \
    \   sum = 0\n    for ch in s:\n        if ch in '0' '1' '2' '3' '4' '5' '6' '7'\
    \ '8' '9':\n            sum += int(ch)\n    return sum\n", "    if s == \"\":\n\
    \        return 0\n    else:\n        s = 0\n        for c in s:\n           \
    \ s += ord(c)\n        return s\n\n", "    s = 0\n    for idx, char in enumerate(s,\
    \ 1):\n        if char.upper() in {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N',\n                            'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'}:\n            s += char.upper() - char.lower()\n\
    \    return s\n\n", "    sum = 0\n    for letter in s:\n        if letter.isalpha():\n\
    \            sum += ord(letter.upper()) - ord('A')\n    return sum\n", "    return\
    \ sum(ord(c) - ord('A') for c in s)\n\n", "    total = 0\n    for i in s:\n  \
    \      total += ord(i)\n    return total\n\n", "    total = 0\n    for letter\
    \ in s:\n        total += ord(letter) - ord('0')\n    return total\n", "    total\
    \ = 0\n    length = len(s)\n    for ind, char in enumerate(s):\n        if char.isalpha():\n\
    \            total += ord(char.upper()) - ord('a')\n    return total\n\n", " \
    \   # BEGIN Question 4\n    # Replace the ... below with your code\n    digitSum\
    \ = 0\n    string = \"\"\n    for c in s:\n        if c.isupper():\n         \
    \   string += c\n    return string\n\n", "    s = str(s)\n    sum = 0\n    for\
    \ i in range(0, len(s)):\n        sum += ord(s[i])\n    return sum\n\n", "   \
    \ def helper(s: str) -> int:\n        sum = 0\n        for char in s:\n      \
    \      if char.isupper():\n                sum += ord(char) - ord('a') + 1\n \
    \       return sum\n\n    return helper(s)\n\n", "    # write your code here\n\
    \    return sum([int(c) for c in s if c.isupper()])\n</cell>\n<text>\nProblem\
    \ 4\n\n</text>\n<cell>", "    total = 0\n    for char in s:\n        if char.isalpha():\n\
    \            total += ord(char) - 96\n    return total\n\n", "    sum = 0\n  \
    \  for c in s:\n        sum += ord(c)\n    return sum\n", "    total = 0\n   \
    \ for c in s:\n        total += ord(c)\n    return total\n\n", "    chars = set(s)\n\
    \    return sum([ord(char) - ord('a') for char in chars])\n\n", "    digits =\
    \ 0\n    for ch in s:\n        if ch.isupper():\n            digits += ord(ch.lower())\n\
    \    return digits\n\n", "    s = 0\n    for i in s:\n        if i.isupper():\n\
    \            s += i.encode(\"ascii\").decode()\n    return s\n\n", "    sum_ =\
    \ 0\n    s_len = len(s)\n    if s_len < 1:\n        return 0\n    for char in\
    \ s:\n        if char.isupper():\n            sum_ += ord(char)\n    return sum_\n\
    \n", "    ascii_sum = 0\n    for c in s:\n        ascii_sum += ord(c)\n    return\
    \ ascii_sum\n\n", "    return sum(ord(c) - ord('A') for c in s)\n\n", "    s =\
    \ 0\n    for i in s:\n        s += ord(i)\n    return s\n\n", "    return sum(ord(letter)\
    \ - 96 for letter in s)\n\n", "    sum = 0\n    for i in s:\n        if i.isupper():\n\
    \            sum += ord(i)\n    return sum\n\n\n@cached", "    if len(s) <= 1:\n\
    \        return 0\n    i = 0\n    total = 0\n    while i < len(s):\n        char\
    \ = s[i]\n        total += ord(char) - 65\n        i += 1\n    return total\n\n",
  "    s = s.lower()\n    res = 0\n    for char in s:\n        if char.isalpha():\n\
    \            res += ord(char)\n    return res\n\n", "    # Your code here\n  \
    \  sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i\
    \ - ord('A'))\n    return sum\n", "    s = 0\n    for c in s:\n        if c.isupper():\n\
    \            s += ord(c.upper())\n    return s\n", "    sum = 0\n    for ch in\
    \ s:\n        if ch in string.ascii_uppercase:\n            sum += ord(ch)\n \
    \   return sum\n\n", "    sum = 0\n    for i in range(len(s) - 1, -1, -1):\n \
    \       if s[i].isalpha():\n            sum += ord(s[i])\n    return sum\n\n",
  "    result = 0\n\n    for c in s:\n        if c.isalpha():\n            result\
    \ += ord(c)\n\n    return result\n\n", "    sum = 0\n    length = len(s)\n   \
    \ for i in range(length):\n        if s[i].isupper():\n            sum += ord(s[i])\n\
    \    return sum\n\n", "    if len(s) == 0:\n        return 0\n    return sum(map(int,\
    \ list(s))) + digitSum(s[len(s):])\n\n@timeit('digitSum')", "    return sum(sum(c.isupper()\
    \ for c in s) for s in s)\n", "    total = 0\n    for i in s:\n        total +=\
    \ ord(i)\n    return total\n\n", "    return sum(int(char) if char.isupper() else\
    \ 0 for char in s)\n\n", "    return sum([ord(i) for i in s])\n", "    total =\
    \ 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n \
    \   return total\n\n", "    s = 0\n    for i in s:\n        s += ord(i)\n    return\
    \ s\n\n", "    s = 0\n    for char in s:\n        s += ord(char) - ord('A')\n\
    \    return s\n\n", "    s = 0\n    for i in s:\n        s += ord(i)\n    return\
    \ s\n\n", "    sum = 0\n    for i in s:\n        if i.isupper():\n           \
    \ sum += ord(i)\n    return sum\n", "    def digits_sum(nums):\n        nums =\
    \ nums.upper()\n        res = 0\n        for n in nums:\n            res += int(n)\n\
    \        return res\n    return digits_sum(s)\n\n", "    sum = 0\n    for i in\
    \ range(len(s)):\n        sum += ord(s[i])\n    return sum\n\n", "    if len(s)\
    \ == 0:\n        return 0\n    sum = 0\n    l = len(s)\n    for idx in range(l\
    \ - 1):\n        if s[idx] > s[idx+1]:\n            sum += ord(s[idx])\n    return\
    \ sum\n\n", "    sum_ = 0\n    total = 0\n    for char in s:\n        if char.isupper():\n\
    \            total += ord(char) - ord('a')\n        else:\n            sum_ +=\
    \ total\n            total = 0\n    return sum_\n\n", "    return sum([ord(i)\
    \ for i in s]) + ord('a')\n\n", "    # Write your code here\n    return sum(int(c)\
    \ for c in s if c.isupper())\n\n", "    return sum(ord(letter) - ord('a') for\
    \ letter in s)\n\n", "    # Write your solution here\n    pass\n</cell>\n<cell>\n\
    digitSum('')\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nProblem 7\nThe given function is_palindrome\
    \ (that takes one integer argument) returns True if the argument is a palindrome\
    \ and False otherwise. The argument can be a string, or an integer.\n\n\n</text>\n\
    <text>\nSolution\n\n</text>\n<cell>", "    return sum(ord(x) for x in s)\n\n",
  "    if len(s) < 4:\n        return 0\n    if s[0] != s[-1]:\n        return 0\n\
    \n    return sum(map(ord, s[1:-1]))\n\n", "    sum = 0\n    for char in s:\n \
    \       if char.isupper():\n            sum += ord(char)\n    return sum\n\n",
  "    if not s:\n        return 0\n    return sum(map(int, s))\n", "    s = 0\n \
    \   for i in range(len(s)):\n        s += ord(s[i]) - 64\n    return s\n\n", " \
    \   # Solution\n    # noinspection PyShadowingNames\n    def sum_upper_character(string:\
    \ str) -> int:\n        \"\"\"\n        :type string: str\n        \"\"\"\n  \
    \      sum_ = 0\n        string = string.lower()\n        for index, c in enumerate(string):\n\
    \            if c.isupper():\n                sum_ += ord(c)\n            else:\n\
    \                sum_ += ord('A') + index\n        return sum_\n\n    return sum_upper_character(s)\n\
    \n", "    return sum([ord(x) - 48 for x in s if x != ' '])\n\n", "    return sum((ord(c.upper())\
    \ - ord('a')) for c in s)\n", "    chars = ''.join(sorted(s))\n    return sum([ord(char)\
    \ for char in chars])\n\n", "    sum = 0\n    for ch in s:\n        if ch.isupper():\n\
    \            sum += ch.lower()\n    return sum\n</cell>\n<cell>\ndigitSum(\"BALU\"\
    )\n</cell>\n<cell>\ndigitSum(\"ABB\")\n</cell>\n<cell>\ndigitSum(\"ABB\")\n</cell>\n\
    <cell>\ndigitSum(\"ABB\")\n</cell>\n<cell>\ndigitSum(\"ABB\")\n</cell>\n<text>\n\
    Write a function that takes a string as input and returns the sum of the ASCII\
    \ codes of the characters 'i', 'i', 'j' and 'j'. The function should work for\
    \ strings consisting of any number of lowercase letters and uppercase letters.\n\
    \nExamples:\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijIj\")\n24\n>>> asciiSum(\"\
    iJIj\")\n26\n>>> asciiSum(\"iJij\")\n26\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"ijij\")\n10\n>>> asciiSum(\"\
    ijij\")\n10\n>>> asciiSum", "    sum = 0\n    for c in s:\n        sum += ord(c)\n\
    \    return sum\n\n", "    return sum(ord(char) for char in s)\n\n", "    if len(s)\
    \ == 0:\n        return 0\n    digits = list(map(ord, s))\n    digits.sort()\n\
    \    sum = 0\n    previous = 0\n    first = digits[0]\n    for index, current\
    \ in enumerate(digits[1:], 1):\n        if current > previous:\n            sum\
    \ += current - previous\n        previous = current\n    return sum * 26 ** len(s)\n\
    \n", "    i = 0\n    sum = 0\n    while i < len(s):\n        if s[i].isalpha():\n\
    \            sum += ord(s[i])\n        i += 1\n    return sum\n\n", "    ascii_sum\
    \ = 0\n    for ch in s:\n        if ch in string.ascii_uppercase:\n          \
    \  ascii_sum += ord(ch)\n    return ascii_sum\n", "    result = 0\n    count =\
    \ 0\n    for c in s:\n        count += ord(c)\n        if count > 9:\n       \
    \     result += count - 10\n            count = 0\n    if count > 9:\n       \
    \ result += count - 10\n    return result\n\n", "    sum = 0\n    for char in\
    \ s:\n        if char.isalpha():\n            sum += ord(char)\n    return sum\n\
    \n", "    count = 0\n    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum = sum + ord(char)\n        count = count + 1\n    return sum\
    \ + count * 97\n\n", "    total = 0\n    for idx, char in enumerate(s):\n    \
    \    if char in '1234567890':\n            total += ord(char)\n    return total\n\
    \n", "    return sum(sum(int(c) for c in s) for s in zip(*[iter(s)] * len(s)))\n",
  "    sum = 0\n    for char in s:\n        sum += ord(char)\n    return sum\n\n",
  "    total = 0\n    for i in s:\n        total += ord(i)\n    return total\n", " \
    \   if not s:\n        return 0\n    s = 0\n    for c in s:\n        if c.isupper():\n\
    \            s += ord(c)\n    return s\n\n", "    # TODO implement me\n    pass\n\
    \n\n@checker_func_wrapper", "    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n", "    return sum(c in string.ascii_uppercase\
    \ for c in s)\n\n", "    s = 0\n    i = len(s)\n    while i > 0:\n        s +=\
    \ ord(s[i]) - ord('A')\n        i -= 1\n    return s\n\n", "    res = 0\n    s_len\
    \ = len(s)\n    for idx, char in enumerate(s):\n        char = int(char)\n   \
    \     if idx < s_len - 1:\n            next_char = int(s[idx + 1])\n        else:\n\
    \            next_char = 0\n        if char + next_char <= 90:\n            res\
    \ += char + next_char\n    return res\n\n", "    s = 0\n    i = 0\n    for x in\
    \ s:\n        if x.isupper():\n            s = s + ord(x)\n    return s\n\n",
  "    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c.upper())\n\
    \    return total\n\n", "    pass\n", "    return sum(ord(c) - ord('a') for c\
    \ in s)\n\n", "    return sum(int(c) for c in s)\n\n", "    return sum(int(s[i:i\
    \ + 1]) for i in range(len(s)) if s[i].isupper())\n\n", "    s = 0\n    for c\
    \ in s:\n        s += ord(c)\n    return s\n\n", "    return sum(int(c) for c\
    \ in s if c.isalpha())\n\n", "    return sum(map(int, re.findall(r'[A-Z]', s)))\n\
    \n", "    return sum(int(c) for c in s if c.isupper())\n\n", "    return sum(map(ord,\
    \ s)) - sum(s.upper())\n\n", "    sum = 0\n    for c in s:\n        sum += ord(c)\
    \ if c.isupper() else 0\n    return sum\n\n", "    sum = 0\n    for i in s:\n\
    \        if i.isupper():\n            sum += ord(i)\n    return sum\n", "    sum\
    \ = 0\n    count = 0\n    for letter in s:\n        if letter.isupper():\n   \
    \         sum = sum + ord(letter)\n            count += 1\n    return sum\n\n",
  "    s = 0\n    for c in s:\n        s += ord(c)\n    return s\n\n\n@task", "  \
    \  return sum(ord(c) - ord('a') for c in s)\n\n", "    return sum(int(c) for c\
    \ in s if c.isupper())\n\n", "    sum = 0\n    for n in s:\n        sum += int(n)\n\
    \    return sum\n\n", "    if len(s) == 0:\n        return 0\n    return sum(map(lambda\
    \ x: ord(x) - ord('A') + 1, s))\n", "    return sum(map(lambda x: ord(x)-ord('A')\
    \ + 1, s))\n\n", "    # todo your code here\n    sum = 0\n    for c in s:\n  \
    \      if c.isupper():\n            sum = sum + int(c)\n    return sum\n\n", " \
    \   sum = 0\n    for ch in s:\n        if ch.isupper():\n            sum += ord(ch)\n\
    \    return sum\n\n", "    return sum( ord(c) < 128 and ord(c) or 0 for c in s\
    \ )\n\n", "    sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) > 90:\n\
    \            sum += (ord(s[i]) - 90) * 10\n        else:\n            sum += ord(s[i])\n\
    \    return sum\n\n", "    return sum(ord(c) - ord('A') for c in s)\n\n", "  \
    \  total = 0\n    for c in s:\n        total += ord(c)\n    return total\n\n",
  "    sum = 0\n    for c in s:\n        sum += ord(c.upper())\n    return sum\n</cell>\n\
    <cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\n\
    digitSum('helloE')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\n4.4.1\
    \ Lambda expressions\n\n</text>\n<text>\nLambda expressions are very useful to\
    \ avoid typing the same code again and again. Lambda expressions allow us to make\
    \ an anonymous function which is basically a named function with the use of lambda.\n\
    \n\n</text>\n<text>\nThe syntax for a lambda function is\n\nlambda argument: expression\n\
    where the argument is an expression that returns a value that is then returned.\
    \ The function name can be anything we want.\n\n\n</text>\n<cell>\nf = lambda\
    \ s: sum(c.upper() for c in s)\n</cell>\n<cell>\nf('hello')\n</cell>\n<text>\n\
    The value returned by the function is now assigned to our variable f which we\
    \ can then use to perform an action on.\n\n\n</text>\n<cell>\nf('hello')\n</cell>\n\
    <text>\n4.4.2 map\n\n</text>\n<text>\nmap is an extremely useful function and\
    \ works like the map function in other programming languages. map is used to apply\
    \ a certain operation on a sequence and return the same sequence but with each\
    \ element transformed by a given function. Let's see how map works.\n\n\n</text>\n\
    <cell>", "    sum = 0\n    for ch in s:\n        sum += ord(ch)\n    return sum\n\
    \n", "    return sum(map(int, filter(lambda x: x >= 65, s)))\n\n", "    return\
    \ sum([int(i) for i in s\n                if i in string.ascii_letters and\n \
    \               i.isupper()])\n\n", "    total = 0\n    for c in s:\n        total\
    \ += ord(c)\n    return total\n\n", "    return sum(ord(ch) for ch in s if ch.isupper())\n\
    \n", "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum +=\
    \ ord(c)\n    return sum\n", "    pass\n    # return sum(int(s) for s in s)\n\n\
    \n@print_calls\n@profile", "    return sum(map(lambda x: ord(x) - ord('A') + 1,\
    \ s))\n\n", "    return sum(map(ord, s))\n\n", "    sum = 0\n    for char in s:\n\
    \        if char in UPPER:\n            sum += ord(char)\n    return sum\n\n",
  "    s = 0\n    for char in s:\n        s += ord(char.upper())\n    return s\n\n",
  "    return sum(ord(c) - ord('a') for c in s)\n\n", "    return sum([int(ch) for\
    \ ch in s if ord(ch) >= 48 and ord(ch) <= 57])\n\n", "    sum = 0\n    for i in\
    \ s:\n        sum += ord(i)\n    return sum\n\n", "    sum = 0\n    for x in s:\n\
    \        sum += ord(x)\n    return sum\n\n", "    # Your code here\n    sum =\
    \ 0\n    for c in s:\n        sum += ord(c) if c.isupper() else 0\n    return\
    \ sum\n\n", "    return sum(int(i) for i in s)\n\n", "    s = 0\n    for i in\
    \ range(len(s)):\n        s += ord(s[i])\n    return s\n\n", "    sum = 0\n  \
    \  length = len(s)\n    for i in s:\n        if i.isalpha():\n            sum\
    \ += ord(i) - 96\n    return sum\n", "    sum = 0\n    for i in s:\n        if\
    \ i.isupper():\n            sum += ord(i) - 64\n    return sum\n\n", "    sum\
    \ = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c.lower())\
    \ - ord(c.upper())\n    return sum\n\n", "    total = 0\n    for char in s:\n\
    \        total += ord(char) - 96\n    return total\n\n", "    count = 0\n    for\
    \ letter in s:\n        count += letter.upper()\n    return count\n\n", "    \n\
    \    sum = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n      \
    \      sum += ord(s[i])\n    return sum\n\n", "    return sum(ord(i) for i in\
    \ s if ord(i) >= ord('A'))\n\n", "    total = 0\n    for c in s:\n        total\
    \ += ord(c)\n    return total\n\n", "    total = 0\n    for i in s:\n        if\
    \ i.isupper():\n            total += ord(i)\n    return total\n\n", "    # write\
    \ your code in Python 3.6\n    return sum(int(i) for i in s.upper() if i.isdigit())\n\
    </cell>\n<cell>", "    return sum(ord(c) - ord('a') for c in s)\n\n", "    total\
    \ = 0\n    s = list(s)\n    for c in s:\n        total += ord(c)\n    return total\n\
    \n", "    sum = 0\n    if len(s) == 0:\n        return sum\n\n    l = s[0]\n \
    \   for i in s[1:]:\n        if i.upper() != l:\n            sum += int(l)\n \
    \       l = i\n\n    sum += int(l)\n\n    return sum\n\n", "    sum = 0\n    for\
    \ c in s:\n        sum += ord(c) - ord('a')\n    return sum\n\n", "    sum = 0\n\
    \    for i in range(len(s) - 1, -1, -1):\n        sum += ord(s[i])\n    return\
    \ sum\n\n", "    result = 0\n    for c in s:\n        if c.isupper():\n      \
    \      result = result + ord(c)\n    return result\n\n", "    return sum([ord(i)\
    \ for i in s if i.isupper()])\n", "    if len(s) <= 1:\n        return s\n   \
    \ sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n\
    \    return sum\n\n", "    return sum(int(c) for c in s if c.isupper())\n\n",
  "    s = 0\n    for character in s:\n        if character < \"A\" or character >\
    \ \"Z\":\n            s += ord(character) - 96\n    return s\n\n", "    return\
    \ sum(int(c) for c in s if c.isupper())\n\n", "    res = 0\n    chars = list(s)\n\
    \    for i in range(0, len(s)):\n        chars[i] = chr(chars[i]).upper()\n  \
    \  res += int(\"\".join(chars))\n    return res\n\n", "    return sum(map(int,\
    \ re.findall(r\"\\d\", s)))\n\n", "    digits = list(map(ord, s))\n    sum_of_digits\
    \ = 0\n    for digit in digits:\n        sum_of_digits += digit\n    return sum_of_digits\n\
    \n", "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum +=\
    \ ord(c.lower()) - ord('a')\n    return sum\n\n", "    # your code here\n    s\
    \ = 0\n    for i,x in enumerate(s):\n        if x.isalpha():\n            s +=\
    \ int(x.encode('ascii'))\n    return s\n", "    return sum(ord(c) for c in s)\n\
    \n", "    sum = 0\n    for char in s:\n        if char.isupper():\n          \
    \  sum += ord(char)\n    return sum\n\n", "    # your code here\n    sum = 0\n\
    \    for char in s:\n        sum += ord(char)\n    return sum\n    \nprint(digitSum('abcCd'))\n",
  "    return sum(ord(c) - ord('a') for c in s)\n\n", "    if len(s) == 0:\n     \
    \   return 0\n\n    sum_ = 0\n    for c in s:\n        if c.isalpha():\n     \
    \       sum_ += ord(c)\n    return sum_\n\n", "    return sum(ord(char) for char\
    \ in s)\n\n\n@timeit('digitSum')", "    return sum(ord(c) for c in s if c.isupper())\n\
    \n", "    ans = 0\n    for c in s:\n        if c.isupper():\n            ans +=\
    \ ord(c)\n    return ans\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum = sum + ord(c.upper())\n    return sum\n\n", "    return sum(map(ord,\
    \ s))\n\n", "    sum_ = 0\n    for i in s:\n        if i.isupper():\n        \
    \    sum_ += ord(i)\n    return sum_\n\n", "    return sum(ord(letter) for letter\
    \ in s)\n", "    sum = 0\n    for i in s:\n        sum += ord(i)\n    return sum\n\
    \n", "    sum_digits = 0\n    for c in s:\n        sum_digits += ord(c)\n    return\
    \ sum_digits\n\n", "    s = 0\n    for ch in s:\n        if ch.isupper():\n  \
    \          s += ord(ch)\n    return s\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
