name: HumanEval_98_count_upper
language: py
prompt: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
  \ the number of uppercase vowels in even indices.\n    \n    For example:\n    >>>\
  \ count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n\
  \    0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
  \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
  \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
  \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
completions: ["    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n\
    \            count += 1\n            if i % 2 == 0:\n                count -=\
    \ 1\n    return count\n\n", "    vowels = 'aeiouAEIOU'\n    uppers = 0\n    \n\
    \    for idx, char in enumerate(s):\n        if char in vowels:\n            uppers\
    \ += idx\n            \n    return uppers\n</cell>\n<cell>\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    </cell>\n<text>\nProblem 1\nHow many times are there a vowel \u2018i\u2019, \u2018\
    o\u2019, and \u2018u\u2019 in each word of a given string? \n\nTo do this, simply\
    \ use a for loop and count the number of times the letters i, o, and u occur in\
    \ the string.\n\n\n</text>\n<cell>", "    count = 0\n    \n    for i in range(len(s)\
    \ - 1, -1, -2):\n        if s[i:i+2].isupper():\n            count += 1\n    \
    \        \n    return count\n", "    count = 0\n    for ch in s:\n        if ch.isupper():\n\
    \            if count == 0 or ch == 'a':\n                count += 1\n       \
    \     elif ch == 'A':\n                count -= 1\n    return count\n\n", "  \
    \  uppers = 0\n    for i in range(len(s)):\n        if s[i:i+2] == 'AEIOU':\n\
    \            uppers += 2\n    return uppers\n\n", "    return sum(1 for char in\
    \ s if char.isupper() and ord(char) in range(65, 91))\n\n</cell>\n<text>\nChallenge\
    \ Problem 02\nImplement count_letters(s). Does it work?\n\n</text>\n<cell>", " \
    \   return sum(s[i:i+2].isupper() for i in range(len(s)) if i % 2 == 0)\n</cell>\n\
    <cell>", "    if not s:\n        return 0\n    count_upper = 0\n    i = 0\n  \
    \  while i < len(s):\n        if s[i].isupper():\n            if i % 2 == 0:\n\
    \                count_upper += 1\n        i += 1\n    return count_upper\n",
  "    return sum(1 for i, c in enumerate(s) if c > 'A' and c <= 'Z' and i % 2 ==\
    \ 0)\n\n", "    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'a'\
    \ and s[i] <= 'z':\n            if s[i] >= 'A' and s[i] <= 'Z':\n            \
    \    count += 1\n        else:\n            count += 2\n    return count\n\n",
  "    counts = 0\n    \n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n\
    \            counts += 1\n            if i & 1:\n                counts += 1\n\
    \                \n    return counts\n", "    count = 0\n    for i in range(len(s)):\n\
    \        if s[i] in 'AEIOU':\n            if i % 2 == 0:\n                count\
    \ += 1\n    return count\n\n", "    for i in range(len(s)):\n        if s[i:i+2]\
    \ in VOWELS:\n            return 1 if s[i:i+2] == UPPER else 0\n\n    return 0\n\
    \n", "    counter = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n\
    \            if char in 'AEIOU':\n                counter += 1\n    return counter\n",
  "    vowel_count = 0\n    for letter in s:\n        if letter in 'AEIOUaeiou':\n\
    \            if letter == 'e':\n                vowel_count += 1\n           \
    \ elif letter == 'i':\n                vowel_count += 1\n            elif letter\
    \ == 'o':\n                vowel_count += 1\n            elif letter == 'u':\n\
    \                vowel_count += 1\n    return vowel_count\n\n", "    vowels =\
    \ 'aeiou'\n    return sum(s[i:i+2].upper() == vowels[i] for i in range(len(s)\
    \ - 2))\n\n", "    return sum(c.isupper() and i // 2 <= int(i / 2) for c in s)\n\
    \n", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n   \
    \         if s[i].isupper():\n                count += 1\n    return count\n\n",
  "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n          \
    \  if s[i] == 'U':\n                count += 1\n    return count\n\n", "    count\
    \ = 0\n    for i in range(0,len(s)):\n        if s[i]=='A' or s[i]=='a':\n   \
    \         count += 1\n        elif s[i]=='E' or s[i]=='e':\n            count\
    \ += 1\n        elif s[i]=='I' or s[i]=='i':\n            count += 1\n       \
    \ elif s[i]=='O' or s[i]=='o':\n            count += 1\n        elif s[i]=='U'\
    \ or s[i]=='u':\n            count += 1\n        else:\n            pass\n   \
    \ return count\n</cell>\n<cell>\nassert count_upper('abEfghI') == 0\nassert count_upper('abEfghIijKkLlMm')\
    \ == 3\n</cell>\n<text>\nTask\nWrite a function that takes a string as input and\
    \ returns a list of all the uppercase vowels in it if the string has vowels and\
    \ a list of all the uppercase vowels in it if there is no vowels.\n\nFor example:\n\
    \n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>>\
    \ no_vowels_string = 'abcdefg'\n>>> count_upper(string_with_vowels)\n['A']\n\n\
    >>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string\
    \ = 'abcdef'\n>>> count_upper(string_with_vowels)\n[]\n\n>>> string_with_vowels\
    \ = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string = 'abcde'\n\
    >>> count_upper(string_with_vowels)\n['A', 'A', 'a']\nWe will discuss our next\
    \ function in Task 5.\n\n\n</text>\n<text>\nBonus\n\n</text>\n<cell>\nassert count_upper('abEfghIijKkLlMm')\
    \ == 3\n</cell>\n<cell>\nassert count_upper('abEfghIijKkLlMm') == 3\n</cell>\n\
    <text>\nTask\nWrite a function that takes a string as input and returns a list\
    \ of all the vowels in it if the string has vowels and a list of all the vowels\
    \ in it if there is no vowels.\n\nFor example:\n\n>>> string_with_vowels = 'AABcdE'\n\
    >>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string = 'abcdefg'\n>>> count_vowels(string_with_vowels)\n\
    ['A', 'A', 'a']\n\n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A',\
    \ 'A', 'a']\n>>> no_vowels_string = 'abcdef'\n>>> count_vowels(string_with_vowels)\n\
    []\n\n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n\
    >>> no_vowels_string = 'abc", "    vowels = 'AEIOU'\n    upper = 0\n    for idx,\
    \ val in enumerate(s):\n        if val in vowels:\n            upper += 1\n  \
    \          if idx%2 == 0:\n                upper -= 1\n    return upper\n", " \
    \   return sum(s[i : i + 2].upper() == 'BA' for i in range(0, len(s), 2))\n\n",
  "    vowels = 'AEIOU'\n    count = 0\n    for idx, char in enumerate(s):\n     \
    \   if idx % 2 == 0:\n            count += 1 if char in vowels else 0\n    return\
    \ count\n\n", "    vowels = 'AEIOUaeiou'\n    count = [0 for i in range(6)]\n\
    \    s[::2] = vowels\n    for i, x in enumerate(s):\n        count[vowels.find(x)]\
    \ += 1\n    return sum(count)\n\n", "    count = 0\n    for i, c in enumerate(s):\n\
    \        if c.isupper():\n            if i & 1:\n                count += 1\n\
    \    return count\n", "    return sum(s[i::2].isupper() for i in range(1, len(s)))\n\
    \n", "    result = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n\
    \            if c.isupper():\n                result += 1\n    return result\n\
    \n", "    c = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n     \
    \       if c.isupper():\n                c += 1\n    return c\n</cell>\n<cell>",
  "    return sum(s[i] in 'AEIOU' for i, c in enumerate(s) if i % 2 == 0)\n</code>\n\
    The generator expression produces a tuple; sum() adds up those values.\n<code>\n\
    >>> s = 'aBCdEf'\n>>> sum(s[i] in 'AEIOU' for i, c in enumerate(s) if i % 2 ==\
    \ 0)\n1\n</code>\nYour task requires you to find those indices of vowels where\
    \ the corresponding count of vowels in the string evenly divides the count of\
    \ uppercase vowels in the string.\n<code>", "    return sum(1 for x, y in zip(s,\
    \ s[1:])\n               if x.isupper() and y.isupper() and x != y)\n", "    count\
    \ = 0\n    for i in range(1, len(s)):\n        if s[i].upper() in 'AEIOUaeiou':\n\
    \            count += 1\n    return count\n</cell>\n<text>\nGiven a non-empty\
    \ string and an integer k, return a new string made from the first k characters\
    \ of the given string, followed by a period and then the number of\nuppercase\
    \ vowels within the first k characters. If the original string had less than k\
    \ characters, then the string should return an empty string. \nIf there are fewer\
    \ than k uppercase vowels in the original string, then the string should return\
    \ the input string itself as its first k characters. \n(Note that \"abA\" is a\
    \ valid answer here.)\n\n\n</text>\n<cell>", "    vowels = 'AEIOU'\n    count\
    \ = 0\n    for idx, char in enumerate(s):\n        if char.lower() in vowels and\
    \ idx % 2 == 0:\n            count += 1\n    return count\n", "    count = 0\n\
    \    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    return\
    \ count\n\n", "    \n    count = 0\n    \n    for i, char in enumerate(s):\n \
    \       if char.upper() == char:\n            count += 1\n            \n     \
    \       if i % 2 == 0:\n                count += 1\n            \n    return count\n\
    \n", "    count = 0\n    upper = s.upper()\n    for idx in range(1, len(upper)):\n\
    \        if upper[idx] == 'E':\n            count += 1\n        elif upper[idx]\
    \ == 'B':\n            count += 1\n    return count\n\n", "    vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    count = 0\n    for idx, ch in enumerate(s):\n     \
    \   if idx % 2 == 0 and ch in vowels:\n            count += 1\n    return count\n\
    \n", "    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper())\n\
    \n", "    counter = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and i % 2 == 0:\n            counter += 1\n    return counter\n\n", "    count\
    \ = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+2].isupper() and i %\
    \ 2 == 0:\n            count += 1\n        i += 1\n    return count\n    ", " \
    \   upper = 0\n    for i in range(len(s)//2):\n        if s[i] in 'AEIOUaeiou':\n\
    \            upper += 1\n    return upper\n</cell>\n<cell>\ncount_upper('abcdefg')\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes a list and returns the\
    \ index of the largest element in the list. For example, given\n\nL = ['this',\
    \ 'is', 'an', 'example', 'list']\n\nthe function should return 4, corresponding\
    \ to the index of the string 'an' in L.\n\n\n</text>\n<cell>", "    cnt = 0\n\
    \    for i in range(len(s)):\n        if s[i] in string.ascii_uppercase:\n   \
    \         if i%2 == 0:\n                cnt += 1\n    return cnt\n\n", "    return\
    \ sum((ord(ch) >= ord('A') and ord(ch) <= ord('Z')) for ch in s)\n\n", "    return\
    \ sum(a+b.upper() for a in s if a.isupper() for a in 'aeiou')\n", "    upperCount\
    \ = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n\
    \            upperCount += 1\n    return upperCount\n\n", "    count = 0\n   \
    \ for i in range(len(s)):\n        if s[i] in \"AEIOUaeiou\":\n            count\
    \ += 1 if i % 2 == 0 else 0\n    return count\n\n", "    vowels = [\n        'a',\
    \ 'e', 'i', 'o', 'u',\n        'A', 'E', 'I', 'O', 'U',\n    ]\n    count = 0\n\
    \    for i in range(len(s)):\n        if s[i:i+2] in vowels:\n            if i\
    \ % 2 == 1:\n                count += 1\n    return count\n\n", "    count = 0\n\
    \    pos = 0\n    while pos < len(s):\n        if s[pos].isupper():\n        \
    \    count += 1\n            pos += 1\n        elif s[pos].islower():\n      \
    \      count -= 1\n            pos += 1\n        else:\n            pos += 1\n\
    \    return count\n", "    count = 0\n    for i in range(len(s)):\n        if\
    \ i % 2 == 0:\n            if s[i] == 'A' or s[i] == 'a':\n                count\
    \ += 1\n            else:\n                count -= 1\n    return count\n\n",
  "    count = 0\n    for i in range(0, len(s) - 1, 2):\n        if s[i] in 'AEIOU':\n\
    \            count += 1\n    return count\n\n", "    uppers = 0\n    for i, c\
    \ in enumerate(s):\n        if i%2 == 0 and c.isupper():\n            uppers +=\
    \ 1\n    return uppers\n</cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n<text>\n\
    Counting a list\nLet's now apply count_upper to the list of strings that we created\
    \ earlier.\n\n\n</text>\n<cell>\nlist('dBBE')\n</cell>\n<cell>", "    counter\
    \ = 0\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'E' or s[i]\
    \ == 'I' or s[i] == 'O' or s[i] == 'U':\n            if i % 2 == 0:\n        \
    \        counter += 1\n    return counter\n\n", "    return s.lower().count('e',\
    \ s.lower().find('e') + 1)\n\n", "    vowels = {'a', 'A', 'e', 'E', 'i', 'I',\
    \ 'o', 'O', 'u', 'U', 'y'} # 'y' is a vowel\n    count=0\n    for c in s:\n  \
    \      if c=='y':\n            count+=1\n        elif c in vowels:\n         \
    \   if c=='i':\n                count+=1\n            else:\n                count-=1\n\
    \    return count\n\n", "    count = 0\n    for i, c in enumerate(s, 1):\n   \
    \     if c in 'aeiou':\n            if i % 2 == 1:\n                count += 1\n\
    \    return count\n", "    count = 0\n    for i in range(len(s)):\n        if\
    \ i % 2 == 0:\n            count += 1 if s[i] == 'A' or s[i] == 'E' or s[i] ==\
    \ 'I' or s[i] == 'O' or s[i] == 'U' else 0\n    return count\n\n", "    return\
    \ sum(0 if ord(c) % 2 == 0 else 1 for c in s)\n\n", "    vowels = \"AEIOU\"\n\
    \    count = 0\n    for i, c in enumerate(s):\n        if c.upper() in vowels\
    \ and i % 2 == 0:\n            count += 1\n    return count\n</cell>\n<cell>\n\
    count_upper('dBBE')\n</cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n<cell>", " \
    \   # Write your code here.\n    count = 0\n    for i in range(0,len(s)):\n  \
    \      if s[i] == 'B':\n            count += 1\n        elif s[i] == 'E':\n  \
    \          count += 1\n        elif (i % 2) == 0:\n            if s[i] == 'B':\n\
    \                count += 1\n            else:\n                count += 1\n \
    \   return count\n\n", "    count = 0\n    for i in range(0, len(s), 2):\n   \
    \     count += 1 if s[i].isupper() and s[i+1].islower() else 0\n    return count\n\
    \n", "    count = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i].isupper():\n\
    \            count += 1\n            i -= 1\n        elif s[i].islower():\n  \
    \          count -= 1\n            i -= 1\n    return count\n\n", "    if s[0].isupper():\n\
    \        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i]\
    \ == 'a' or s[i] == 'A':\n            count += 1\n        elif s[i] == 'b' or\
    \ s[i] == 'B':\n            count += 1\n        elif s[i] == 'c' or s[i] == 'C':\n\
    \            count += 1\n        elif s[i] == 'd' or s[i] == 'D':\n          \
    \  count += 1\n        elif s[i] == 'e' or s[i] == 'E':\n            count +=\
    \ 1\n        elif s[i] == 'f' or s[i] == 'F':\n            count += 1\n    return\
    \ count\n</cell>\n<cell>", "    s = s.upper()\n    count = 0\n    for i in range(len(s)):\n\
    \        if s[i] in 'AEIOUaeiou':\n            if i % 2 == 0 and s[i].isupper():\n\
    \                count += 1\n    return count\n\n", "    count = 0\n    for i\
    \ in range(len(s) - 1, -1, -1):\n        if s[i].upper() == s[i]:\n          \
    \  count += 1\n        else:\n            break\n    return count\n\n", "    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i:i + 2] in 'AEIOU':\n\
    \            count += 1\n    return count\n</cell>\n<text>\nProblem 3.2: What\
    \ is the total number of uppercase vowels in the words 'aba' and 'abracadabra'?\n\
    \n\n</text>\n<cell>", "    count = 0\n    for i in range(len(s) - 1):\n      \
    \  if s[i] in string.ascii_uppercase:\n            count += 1\n            if\
    \ i % 2 == 0:\n                count += s[i] in string.ascii_lowercase\n    return\
    \ count\n\n", "    vowels = 'AEIOUaeiou'\n    uppercount = 0\n    i = 0\n    while\
    \ i < len(s):\n        if s[i:i+len(vowels)].upper() in vowels:\n            uppercount\
    \ += 1\n        i += 2\n    return uppercount\n\n", "    return sum(s[i : i+2].isupper()\
    \ for i in range(0, len(s)) if i % 2 == 0)\n\n", "    return sum(s[i:i+2].upper()\
    \ == 'BB' for i in range(0, len(s)-2))\n</cell>\n<cell>\ncount_upper('dBBE')\n\
    </cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n<text>\nString formatting\nYou\
    \ learned how to use f-strings to format strings for printing values.\n\nString\
    \ formatting can also be used to control the formatting of numerical values. \n\
    One important use case is displaying variable types and ranges. \nFor example,\
    \ if you want to display the minimum and maximum values of x and y, \nyou can\
    \ use the following expression:\n\nf'Minimum x: {np.min(x)}, maximum x: {np.max(x)}'\n\
    \n\nHowever, you can also use string formatting options to control the spacing\
    \ and alignment\nof variables, with the syntax '{variable:>{width}.{precision}}'\n\
    \nLet's see a few examples.\n\n\n</text>\n<cell>", "    even_indexes = [i for\
    \ i in range(s.upper().__len__()) if i % 2 == 0]\n    return len(set(s[i : i+2].upper()\
    \ for i in even_indexes))\n\n", "    return s.lower().count('e') % 2\n", "   \
    \ count_upper = 0\n    for index, letter in enumerate(s):\n        if index %\
    \ 2 == 0:\n            if letter in 'AEIOU':\n                count_upper += 1\n\
    \    return count_upper\n\n", "    even = 0\n    for c in s:\n        if c ==\
    \ 'e':\n            even += 2\n        elif c == 'E':\n            even += 1\n\
    \    return even\n\n", "    return sum(int(s[i : i + 2].upper()) for i in range(len(s)\
    \ - 1))\n\n", "    return sum([1 for c in s if c.isupper()])\n\n", "    s = 0\n\
    \    for i in range(0, len(s), 2):\n        if s[i:i+2].upper() == 'AEIOU':\n\
    \            s += 1\n    return s\n", "    return sum(1 for c in s if c.isupper()\
    \ and c.islower() and int(c) % 2 == 0)\n\n", "    count_upper = 0\n    \n    if\
    \ s.endswith('e'):\n        count_upper += 1\n    \n    if len(s) & 1:\n     \
    \   count_upper += 1\n    \n    if s.endswith('E'):\n        count_upper += 1\n\
    \    \n    return count_upper\n\n", "    return sum(1 for char in s if char in\
    \ UPPERS)\n", "    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n\
    \        if s[i].lower() in vowels and (i%2==0):\n            count += 1\n   \
    \ return count\n", "    \n    count = 0\n    for idx, c in enumerate(s):\n   \
    \     if c.isupper():\n            if idx%2 == 0:\n                count += 1\n\
    \    return count\n</cell>\n<cell>\ncount_upper('aBCdEf')\n</cell>\n<text>\nBONUS\
    \ (50 pts)\nImplement a function to count the number of uppercase vowels in a\
    \ string. Don't count the vowels at the beginning and end of the string!\n\n\n\
    </text>\n<cell>", "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper()\
    \ and i % 2 == 0:\n            count += 1\n    return count\n\n", "    vowels\
    \ = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n\
    \            if i % 2 == 0:\n                count += 1\n            else:\n \
    \               count -= 1\n    return count\n", "    # Count the number of uppercase\
    \ vowels.\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper()\
    \ and s[i+1].isupper():\n            count += 1\n    return count\n\n", "    vowels\
    \ = 'aeiou'\n    count = 0\n    for idx, char in enumerate(s):\n        if idx\
    \ % 2 == 0:\n            if char in vowels:\n                if char.isupper():\n\
    \                    count += 1\n    return count\n\n", "    count = 0\n    for\
    \ i, c in enumerate(s):\n        if c.isupper() and i % 2 == 1:\n            count\
    \ += 1\n    return count\n\n", "    if not s:\n        return 0\n    even = s.count(\"\
    E\")\n    odd = s.count(\"O\")\n    return even + odd\n\n", "    count = 0\n \
    \   for i, c in enumerate(s, 1):\n        if c not in UPPER_CASE:\n          \
    \  continue\n        count += i % 2 == 0\n    return count\n\n", "    upper =\
    \ 0\n    prev_c = None\n    for c in s:\n        if c.isupper() and c!=prev_c:\n\
    \            upper += 1\n        prev_c = c\n    return upper\n", "    vowels\
    \ = 'aeiouy'\n    count = 0\n    for index, ch in enumerate(s):\n        if ch\
    \ in vowels and (index % 2 == 0):\n            count += 1\n    return count\n",
  "    upper = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n        \
    \    upper += ('A' <= c <= 'Z').count(c)\n    return upper\n\n", "    count =\
    \ 0\n    for c in s:\n        if c.isupper() and c not in 'AEIOU':\n         \
    \   count += 1\n    return count\n\n", "    count = 0\n    for i in range(len(s)):\n\
    \        if s[i:i+2] == 'aeiou':\n            count += 1\n        if i % 2 ==\
    \ 0 and s[i:i+2] not in 'aeiou':\n            count += 1\n    return count\n\n",
  "    for i in range(len(s)):\n        if s[i:i+2].isupper():\n            return\
    \ 1\n    return 0\n", "    return sum(s[i] == s[i].upper() and i % 2 == 0 for\
    \ i in range(len(s)))\n\n", "    even_indexes = [index for index, char in enumerate(s)\
    \ if char.isupper() and index % 2 == 0]\n    return len(even_indexes)\n</cell>\n\
    <cell>", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    num_upper = 0\n    for idx,\
    \ char in enumerate(s):\n        if char in vowels:\n            if idx % 2 ==\
    \ 0:\n                num_upper += 1\n    return num_upper\n\n", "    vowel =\
    \ 'AaEeIiOoUuYy'\n    count = 0\n    for i in range(len(s) - 1, -1, -1):\n   \
    \     if s[i:i + len(vowel)] == vowel:\n            if i % 2 == 0:\n         \
    \       count += 1\n    return count\n\n", "    count = 0\n    i = len(s)-1\n\
    \    while i >= 0:\n        if s[i] >= 'a' and s[i] <= 'z':\n            count\
    \ += 1\n        elif s[i] >= 'A' and s[i] <= 'Z':\n            count += 1\n  \
    \      i -= 1\n    return count\n</cell>\n<cell>", "    return sum(s.count(c)\
    \ for c in 'AEIOUaeiou')\n\n", "    vowels = 'aeiou'\n    count = 0\n    for i\
    \ in range(len(s)):\n        if s[i] not in vowels:\n            continue\n  \
    \      if i % 2 == 0:\n            count += 1\n    return count\n\n", "    count\
    \ = 0\n    for i in range(len(s)):\n        if s[i] in ('A', 'E', 'I', 'O', 'U'):\n\
    \            count += 1\n            if i % 2 == 0:\n                count -=\
    \ 1\n    return count\n</cell>\n<cell>", "    count = 0\n    for i, c in enumerate(s):\n\
    \        if i % 2 == 0:\n            if c == 'A':\n                count += 1\n\
    \            elif c == 'a':\n                count += 2\n            elif c ==\
    \ 'E':\n                count += 1\n            elif c == 'e':\n             \
    \   count += 2\n            elif c == 'I':\n                count += 1\n     \
    \       elif c == 'i':\n                count += 2\n            elif c == 'O':\n\
    \                count += 1\n            elif c == 'o':\n                count\
    \ += 2\n            elif c == 'U':\n                count += 1\n            elif\
    \ c == 'u':\n                count += 2\n            else:\n                count\
    \ += 1\n        else:\n            count += count_upper(c)\n    return count\n\
    \n", "    # Your code here\n    count = 0\n    for i in range(len(s)):\n     \
    \   if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n\
    \    return count\n</cell>\n<cell>", "    count = 0\n    for i, letter in enumerate(s):\n\
    \        if letter > 'z':\n            count += 1\n        if i % 2 == 0:\n  \
    \          count += ord(letter) - 64\n    return count\n\n", "    c = 0\n    for\
    \ c in s:\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n\
    \            c += 1\n        else:\n            return 0\n    return c\n\n", " \
    \   count = 0\n    for idx in range(0, len(s), 2):\n        if s[idx:idx + 2].isupper():\n\
    \            count += 1\n    return count\n\n", "    c = 0\n    for ind, c in\
    \ enumerate(s):\n        if ind % 2 == 0 and c == 'U':\n            c += 1\n \
    \   return c\n", "    count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in 'AEIOU':\n            count += 1\n    return count\n\n", "    return\
    \ sum(1 for i in range(0, len(s)) if s[i:i+2] == 'AEIOU')\n\n", "    return s.count(uppercase[1::2])\n",
  "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper()\
    \ and s[i+1].isupper():\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for index in range(len(s)):\n        if s[index].upper() == 'A':\n\
    \            count += 1\n        elif s[index].upper() == 'B':\n            count\
    \ += 1\n        elif s[index].upper() == 'C':\n            count += 1\n      \
    \  elif s[index].upper() == 'D':\n            count += 1\n        elif s[index].upper()\
    \ == 'E':\n            count += 1\n        elif s[index].upper() == 'F':\n   \
    \         count += 1\n        elif s[index].upper() == 'G':\n            count\
    \ += 1\n    return count\n", "    return sum(s[i:i+2].upper() == 'A' for i in\
    \ range(0, len(s), 2))\n\n", "    return sum(1 if s[i:i+2].upper() == 'AEIOU'\
    \ else 0 for i, _ in enumerate(s))\n\n", "    return len([True for i,c in enumerate(s)\
    \ if c in 'AEIOUaeiou']) / len(s)\n</cell>\n<cell>\ncount_upper('aBCdEf')\n</cell>\n\
    <cell>\ncount_upper('abcdefg')\n</cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n\
    <text>\nCount the number of all vowels in a string\nCount the number of vowels\
    \ in a string that only consist of lowercase letters. \nFor example, count_vowels('abcd')\
    \ should return 1.\nCount the number of vowels in a string that only consist of\
    \ uppercase letters. \nFor example, count_vowels('ABCd') should return 0.\n\n\
    </text>\n<cell>", "    counts = {\n        'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u':\
    \ 0,\n    }\n    for x in s:\n        if x == 'a' or x == 'A':\n            counts['a']\
    \ += 1\n        elif x == 'b' or x == 'B':\n            counts['b'] += 1\n   \
    \     elif x == 'c' or x == 'C':\n            counts['c'] += 1\n        elif x\
    \ == 'd' or x == 'D':\n            counts['d'] += 1\n        elif x == 'e' or\
    \ x == 'E':\n            counts['e'] += 1\n        elif x == 'f' or x == 'F':\n\
    \            counts['f'] += 1\n        elif x == 'g' or x == 'G':\n          \
    \  counts['g'] += 1\n        elif x == 'h' or x == 'H':\n            counts['h']\
    \ += 1\n        elif x == 'i' or x == 'I':\n            counts['i'] += 1\n   \
    \     elif x == 'j' or x == 'J':\n            counts['j'] += 1\n        elif x\
    \ == 'k' or x == 'K':\n            counts['k'] += 1\n        elif x == 'l' or\
    \ x == 'L':\n            counts['l'] += 1\n        elif x == 'm' or x == 'M':\n\
    \            counts['m'] += 1\n        elif x == 'n' or x == 'N':\n          \
    \  counts['n'] += 1\n        elif x == 'o' or x == 'O':\n            counts['o']\
    \ += 1\n        elif x == 'p' or x == 'P':\n            counts['p'] += 1\n   \
    \     elif x == 'q' or x == 'Q':\n            counts['q'] += 1\n        elif x\
    \ == 'r' or x == 'R':\n            counts['r'] += 1\n        elif x == 's' or\
    \ x == 'S':\n            counts['s'] += 1\n        elif x == 't' or x == 'T':\n\
    \            counts['t'] += 1\n        elif x == 'u' or x == 'U':\n          \
    \  counts['u'] += 1\n        elif x == 'v' or x == 'V':\n            counts['v']\
    \ += 1\n        elif x == 'w' or x == 'W':\n            counts['w'] += 1\n   \
    \     elif x == 'x' or x == 'X':\n            counts['x'] += 1\n        elif x\
    \ == 'y' or x == 'Y':\n            counts['y'] += 1\n        elif x == 'z' or\
    \ x == 'Z':\n            counts['z'] += 1\n    return counts['a'] or counts['e']\
    \ or counts['i'] or counts['o'] or counts['u'] or counts['b'] or counts['c'] or\
    \ counts['d'] or counts['f'] or counts['g']", "    count = 0\n    for i in range(len(s)//2):\n\
    \        if s[i].isupper():\n            count += 1\n            \n    return\
    \ count\n\n", "    return s.count(s[::2]) + s.count(s[1::2])\n", "    vowels =\
    \ 'aeiou'\n    evens = [i for i, c in enumerate(s) if c in vowels]\n    return\
    \ len([c for c in evens if c % 2 == 0])\n\n", "    count = 0\n    for i, c in\
    \ enumerate(s):\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c\
    \ == 'U':\n            count += 1\n            if i % 2 == 0:\n              \
    \  count += 1\n    return count\n", "    count: int = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0:\n            if s[i].isupper():\n                count\
    \ += 1\n    return count\n\n", "    return sum(0 if s[ind] in 'AEIOU' else 1 for\
    \ ind in range(0, len(s))\n               if s[ind].isupper())\n\n", "    return\
    \ len([v for i, v in enumerate(s) if i % 2 == 0 and v == 'U'])\n", "    if not\
    \ s:\n        return 0\n    \n    # Iterate over the string and increment count\
    \ by 2\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in UPPERCASE:\n\
    \            count += 1\n    return count\n</cell>\n<cell>", "    if s == \"\"\
    :\n        return 0\n    else:\n        num = 0\n        for i in range(len(s)):\n\
    \            if s[i:i + 2].isupper():\n                num += 1\n            if\
    \ i % 2 == 0:\n                return num\n    return 0\n\n", "    i, j = 0, 0\n\
    \    vowels = 'AEIOUYaeiou'\n    while j < len(s):\n        if s[i] in vowels\
    \ and j % 2 == 0:\n            i += 1\n        j += 1\n    return i\n", "    return\
    \ sum((ord(c) - ord('A') - 1) // 2 for c in s)\n\n", "    count = 0\n    for pos,\
    \ ch in enumerate(s):\n        if ch == 'a' or ch == 'e' or ch == 'i' or ch ==\
    \ 'o' or ch == 'u':\n            if pos & 1:\n                count += 1\n   \
    \ return count\n</cell>\n<cell>", "    cnt = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0:\n            if s[i] in 'aeiou':\n                cnt\
    \ += 1\n    return cnt\n</cell>\n<cell>", "    count: int = 0\n    for i, char\
    \ in enumerate(s):\n        if i % 2 == 0:\n            if char.upper() == 'A'\
    \ or char.upper() == 'E' or char.upper() == 'I' or char.upper() == 'O':\n    \
    \            count += 1\n    return count\n\n", "    count = 0\n    for i in range(len(s)):\n\
    \        if s[i:i+2].isupper():\n            count += i\n    return count\n  \
    \  \n", "    counter = 0\n    \n    for index, char in enumerate(s):\n       \
    \ \n        if index%2 == 0:\n            if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u':\n                counter += 1\n    return\
    \ counter\n", "    c = 0\n    for i,c in enumerate(s):\n        if i % 2 == 0:\n\
    \            if c.isupper():\n                c += 1\n            else:\n    \
    \            c += 0\n        else:\n            c += 0\n    return c\n</cell>\n\
    <cell>\ncount_upper('dBBE')\n</cell>\n<cell>\ncount_upper('dBBEf')\n</cell>\n\
    <cell>\ncount_upper('dBBEfg')\n</cell>\n<cell>\ncount_upper('dBBEfg')\n</cell>\n\
    <cell>", "    count = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i:i\
    \ + 2].upper() == 'BE':\n            count += 1\n    return count\n\n", "    #\
    \ M1. \u5B57\u6BCD\u7684\u5927\u5199\u5B57\u6BCD\u7684\u6570\u91CF\n    return\
    \ sum(map(str.isupper, s[::2]))\n    ", "    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0:\n            if s[i].isupper():\n                count\
    \ += 1\n    return count\n    ", "    vowels = ['a', 'e', 'i', 'o', 'u']\n   \
    \ return sum(1 if c in vowels[::2] else 0 for c in s)\n\n", "    return sum(s.upper()[i]\
    \ % 2 == 0 for i in range(len(s)))\n\n", "    return sum(1 for c in s if c.isupper()\
    \ and s.islower() \n               and (c != s[2:4]))\n\n", "    i, n = 0, len(s)\n\
    \    while i < n:\n        if s[i:i + 2] == \"AEIOUaeiou\":\n            i +=\
    \ 2\n        else:\n            i += 1\n    return i\n", "    return sum(s[i::2]\
    \ == s[i].upper() for i, v in enumerate(s) if i % 2 == 0)\n", "    vowels = set('aeiouAEIOU')\n\
    \    even = []\n    for i in range(len(s) - 1, -1, -1):\n        ch = s[i]\n \
    \       if ch in vowels and i % 2 == 0:\n            even.append(ch)\n    return\
    \ len(even)\n    \n", "    count = 0\n    for i, c in enumerate(s, start=1):\n\
    \        if c.isupper():\n            if i % 2 == 0:\n                count +=\
    \ 1\n    return count\n\n", "    vowels = {\n        'a': 'AEIOU',\n        'e':\
    \ 'AEIOU',\n        'i': 'AEIOU',\n        'o': 'AEIOU',\n        'u': 'AEIOU',\n\
    \        'B': 'B',\n        'C': 'C',\n        'D': 'D',\n        'E': 'E',\n\
    \        'F': 'F',\n        'G': 'G',\n        'H': 'H',\n        'I': 'I',\n\
    \        'J': 'J',\n        'K': 'K',\n        'L': 'L',\n        'M': 'M',\n\
    \        'N': 'N',\n        'O': 'O',\n        'P': 'P',\n        'Q': 'Q',\n\
    \        'R': 'R',\n        'S': 'S',\n        'T': 'T',\n        'U': 'U',\n\
    \        'V': 'V',\n        'W': 'W',\n        'X': 'X',\n        'Y': 'Y',\n\
    \        'Z': 'Z',\n    }\n    return sum((s[i : i + 2].lower() in vowels).count(True)\
    \ for i in range(len(s) - 1))\n\n", "    uppercase_count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i].isupper() and s[i+1].isupper():\n            uppercase_count\
    \ += 1\n    return uppercase_count\n</cell>\n<cell>\ncount_upper('bBCdEf')\n</cell>\n\
    <cell>\ncount_upper('BCdEf')\n</cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n\
    <text>\nProblem 2b\n\n</text>\n<text>\nGiven a list of strings, count how many\
    \ times each character appears in the list. \nFor example, given the list ['python',\
    \ 'java', 'javascript', 'python', 'python', 'javascript', 'javascript', 'python'],\
    \ the function should return the dictionary:\n{\n    \"p\": 2, \n    \"a\": 1,\
    \ \n    \"p\": 2, \n    \"j\": 1, \n    \"s\": 3, \n    \"c\": 2\n}\n\nNote that\
    \ Python counts lower case letters differently from Javascript, which also counts\
    \ upper case letters.\n\n\n</text>\n<cell>", "    if len(s) == 0:\n        return\
    \ 0\n    even_indexes = [i for i, c in enumerate(s) if c != 'B']\n    upper_count\
    \ = sum([1 if i % 2 == 0 else 0 for i in\n                        list(itertools.chain(*[[i,\
    \ i + 1] for i in\n                                             even_indexes]))])\n\
    \    return upper_count if upper_count < len(s) else 0\n\n", "    return sum(x\
    \ != 'e' and x != 'E' and x != 'B' and x != 'B' and x != 'B' and x != 'B' and\
    \ x != 'B'\n               for x in s[::2])\n\n", "    count = 0\n    for i, letter\
    \ in enumerate(s):\n        if i % 2 == 0:\n            if letter in VOWELS:\n\
    \                count += 1\n    return count\n\n", "    result = 0\n    \n  \
    \  for i, x in enumerate(s):\n        if i % 2 == 0:\n            result += 1\n\
    \            if x.upper() == x:\n                result -= 1\n    \n    return\
    \ result\n", "    count = 0\n    i = 0\n    while i < len(s):\n        if i %\
    \ 2 == 0:\n            if s[i] == 'A':\n                count += 1\n         \
    \   elif s[i] == 'E':\n                count += 1\n            elif s[i] == 'I':\n\
    \                count += 1\n            elif s[i] == 'O':\n                count\
    \ += 1\n            elif s[i] == 'U':\n                count += 1\n        elif\
    \ (i % 2 == 1) & (s[i] == 'A'):\n            count += 1\n        elif (i % 2 ==\
    \ 1) & (s[i] == 'E'):\n            count += 1\n        elif (i % 2 == 1) & (s[i]\
    \ == 'I'):\n            count += 1\n        elif (i % 2 == 1) & (s[i] == 'O'):\n\
    \            count += 1\n        elif (i % 2 == 1) & (s[i] == 'U'):\n        \
    \    count += 1\n        i += 1\n    return count\n</cell>\n<text>\nNow, write\
    \ a function that will count all the uppercase letters in a string.\n\nHINT: str.count()\
    \ might be helpful.\nCheck out this reference\n\n\n</text>\n<cell>", "    count:\
    \ int = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0:\n           \
    \ if c.isupper():\n                count += 1\n    return count\n\n", "    vowels\
    \ = 'aeiouAEIOU'\n    num_upper = 0\n    for i in s:\n        if i in vowels:\n\
    \            num_upper += 1\n        if i % 2 == 0:\n            num_upper +=\
    \ num_upper\n    return num_upper\n\n", "    count = 0\n    for i in range(len(s)\
    \ - 1, -1, -2):\n        if s[i] == 'e' and s[i + 1] == 'w' and s[i + 2] == 'e':\n\
    \            count += 1\n        elif s[i] == 'i' or s[i] == 'o':\n          \
    \  count -= 1\n    return count\n\n", "    vowels = set('aeiouAEIOU')\n    count\
    \ = sum(v == 'A' or v == 'E' or v == 'I' or v == 'O' or v == 'U' for v in s[::2])\n\
    \    return count if count % 2 == 0 else count + 1\n\n", "    count = 0\n    for\
    \ c in s:\n        if c.isupper() and c not in 'AEIOUaeiou':\n            count\
    \ += 1\n    return count\n\n", "    return sum(int(s[i] == 'e') for i, s in enumerate(s)\
    \ if i % 2)\n</cell>\n<cell>\ncount_upper(\"aBCdEf\")\n</cell>\n<cell>\ncount_upper(\"\
    abcdefg\")\n</cell>\n<cell>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nList comprehensions\n\
    You can use a list comprehension to create new lists. This is a powerful feature\
    \ of Python.\n\n\n</text>\n<cell>", "    count = 0\n    i = 0\n    while i < len(s):\n\
    \        if s[i] == 'A' or s[i] == 'a':\n            count += 1\n        elif\
    \ s[i] == 'B' or s[i] == 'b':\n            count += 1\n        elif s[i] == 'C'\
    \ or s[i] == 'c':\n            count += 1\n        elif s[i] == 'D' or s[i] ==\
    \ 'd':\n            count += 1\n        elif s[i] == 'E' or s[i] == 'e':\n   \
    \         count += 1\n        elif s[i] == 'F' or s[i] == 'f':\n            count\
    \ += 1\n        elif s[i] == 'G' or s[i] == 'g':\n            count += 1\n   \
    \     elif s[i] == 'H' or s[i] == 'h':\n            count += 1\n        elif s[i]\
    \ == 'I' or s[i] == 'i':\n            count += 1\n        elif s[i] == 'J' or\
    \ s[i] == 'j':\n            count += 1\n        elif s[i] == 'K' or s[i] == 'k':\n\
    \            count += 1\n        elif s[i] == 'L' or s[i] == 'l':\n          \
    \  count += 1\n        elif s[i] == 'M' or s[i] == 'm':\n            count +=\
    \ 1\n        elif s[i] == 'N' or s[i] == 'n':\n            count += 1\n      \
    \  elif s[i] == 'O' or s[i] == 'o':\n            count += 1\n        elif s[i]\
    \ == 'P' or s[i] == 'p':\n            count += 1\n        elif s[i] == 'Q' or\
    \ s[i] == 'q':\n            count += 1\n        elif s[i] == 'R' or s[i] == 'r':\n\
    \            count += 1\n        elif s[i] == 'S' or s[i] == 's':\n          \
    \  count += 1\n        elif s[i] == 'T' or s[i] == 't':\n            count +=\
    \ 1\n        elif s[i] == 'U' or s[i] == 'u':\n            count += 1\n      \
    \  elif s[i] == 'V' or s[i] == 'v':\n            count += 1\n        elif s[i]\
    \ == 'W' or s[i] == 'w':\n            count += 1\n        elif s[i] == 'X' or\
    \ s[i] == 'x':\n            count += 1\n        elif s[i] == 'Y' or s[i] == 'y':\n\
    \            count += 1\n        elif s[i] == 'Z' or s[i] == 'z':\n          \
    \  count += 1\n        i += 1\n    return count\n\n", "    vowels = set(Vowels)\n\
    \    even = [n for n, i in enumerate(s) if i % 2 == 0]\n    return len([n for\
    \ n in even if n in vowels])\n\n", "    vowels = ['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G']\n    count = 0\n    for v in vowels:\n        if s[::2] == v:\n       \
    \     count += 1\n    return count\n\n", "    vowels = [chr(i) for i in range(ord('a'),\
    \ ord('z') + 1)]\n    return sum(ord(s[j]) > 96 and ord(s[j]) in vowels for j\
    \ in range(len(s)))\n\n", "    count = 0\n    for i in range(len(s)):\n      \
    \  if s[i:i+2].upper() == s[i:i+2].upper() and i % 2 == 1:\n            count\
    \ += 1\n    return count\n\n", "    \n    vowels = set('aeiou')\n    upper = 0\n\
    \    for index,char in enumerate(s):\n        if index % 2 == 0:\n           \
    \ if char.lower() in vowels:\n                upper += 1\n    return upper\n",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_vowels = 0\n    for i, c in enumerate(s):\n\
    \        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n      \
    \      if i % 2 == 0:\n                count_vowels += 1\n    return count_vowels\n\
    \n", "    counter = 0\n    for i in range(len(s)):\n        if s[i] == 'e':\n\
    \            counter += 1\n        elif s[i] == 'u':\n            counter += 2\n\
    \        elif s[i] == 'i':\n            counter += 3\n        elif s[i] == 'o':\n\
    \            counter += 4\n    return counter\n\n", "    return sum(int(s[n:n+2]\
    \ in VOWELS) for n in range(0, len(s)-2, 2) if s[n:n+2] in VOWELS)\n", "    count\
    \ = 0\n    for i, x in enumerate(s):\n        if x.upper() == 'A':\n         \
    \   if i % 2 == 0:\n                count += 1\n    return count\n\n", "    count\
    \ = 0\n    for i, c in enumerate(s):\n        if c >= 'a' and c <= 'z':\n    \
    \        count += 1\n        if i % 2 == 0 and c >= 'a' and c <= 'z':\n      \
    \      count += 1\n    return count\n\n", "    \n    return sum(s.isupper() for\
    \ i in re.finditer('[a-z]', s, re.I))\n\n", "    return len([c for c in s if c.isupper()])\n",
  "    s = 0\n    prev = 0\n    for index, c in enumerate(s):\n        if c != 'A':\n\
    \            continue\n        elif index%2 == 0:\n            s += index-prev\n\
    \        else:\n            s += 0\n        prev = len(s)\n    return s\n", " \
    \   even_indices = even_indices(s)\n    count = 0\n    for idx, letter in enumerate(s):\n\
    \        if letter.isupper() and idx in even_indices:\n            count += 1\n\
    \    return count\n</cell>\n<cell>", "    upper_c = 0\n    for i in range(len(s)):\n\
    \        if s[i] == 'A' or s[i] == 'a':\n            upper_c += 1\n        elif\
    \ s[i] != 'E' and s[i] != 'e':\n            upper_c += 0\n    return upper_c\n\
    \n", "    return sum(s[n:n+2] for n in range(0, len(s), 2))\n", "    count = 0\n\
    \    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n    \
    \        count += 1\n    return count\n\n", "    return sum(s[i:i+2].upper() for\
    \ i in range(0, len(s) - 1, 2))\n\n", "    return sum(1 for i, c in enumerate(s)\
    \ if i % 2 == 0 and c.isupper())\n", "    count=0\n    for i in range(len(s)):\n\
    \        if s[i].isupper():\n            if i%2==0:\n                count+=1\n\
    \    return count\n", "    count = 0\n    for index, letter in enumerate(s):\n\
    \        if index % 2 == 0:\n            if letter.upper() in VOWELS:\n      \
    \          count += 1\n    return count\n\n", "    return sum(s.upper() == 'E'\
    \ for s in s)\n", "    count = 0\n    for i, c in enumerate(s):\n        if i\
    \ % 2 == 0:\n            if c.isupper():\n                count += 1\n    return\
    \ count\n\n", "    cnt = 0\n    for i, c in enumerate(s):\n        if i % 2 ==\
    \ 0:\n            if c.isupper():\n                cnt += 1\n    return cnt\n\n",
  "    vowels = set(\"AEIOUYaeiouy\")\n    return sum(1 for idx, c in enumerate(s)\
    \ if idx % 2 == 0 and c in vowels)\n", "    return sum(s.count(x) for x in 'AEIOU')\n",
  "    return sum(1 for c in s if c.isupper() and c.islower() and c != 'A')\n</cell>\n\
    <cell>\n%timeit count_upper('The quick brown fox jumps over the lazy dog')\n</cell>\n\
    <cell>\n%timeit count_upper('The quick brown fox jumps over the lazy dog.')\n\
    </cell>\n<cell>\n%timeit count_upper('The quick brown fox jumps over the lazy\
    \ dog.!')\n</cell>\n<text>\nQuestion 5.\nImplement a function count_words which\
    \ returns the number of occurrences of each word in s in a string. For example,\
    \ count_words('aaa bbb ccc aaa eee') should return the dictionary {\u2018aaa\u2019\
    : 3, \u2018bbb\u2019: 1, \u2018ccc\u2019: 1, \u2018eee\u2019: 1}.\nHint: You may\
    \ want to use collections.Counter for this exercise.\n\n</text>\n<cell>\nimport\
    \ collections\n", "    s = 0\n    for i in range(0, len(s), 2):\n        if s[i]\
    \ in 'aeiou':\n            s += 1\n    return s\n", "    count = 0\n    length\
    \ = len(s)\n    for i in range(0, length):\n        if s[i] >= 'A' and s[i] <=\
    \ 'Z':\n            count += 1\n        if s[i] >= 'a' and s[i] <= 'z':\n    \
    \        count += 1\n        if i % 2 == 0 and count > 0:\n            return\
    \ count\n    return 0\n\n", "    vowels = 'AEIOUaeiou'\n    count = 0\n    idx\
    \ = 0\n    \n    while idx < len(s):\n        if s[idx:idx+len(vowels)].upper()\
    \ in vowels:\n            count += s[idx] in vowels\n        idx += len(vowels)\n\
    \    return count\n\n", "    count = 0\n    for i in range(len(s)):\n        if\
    \ s[i:i+2].upper() == 'AEIOU':\n            count += 1\n    return count\n", " \
    \   return sum(1 for i, c in enumerate(s) if c >= 'A' and c <= 'E' and i % 2 ==\
    \ 0)\n\n", "    upper = 0\n    for i, ch in enumerate(s):\n        if i % 2 ==\
    \ 0 and ch.isupper():\n            upper += 1\n    return upper\n", "    return\
    \ len([1 for i, ch in enumerate(s) if i % 2 == 0 and\n                ch.isupper()])\n\
    \n", "    upper_count = 0\n    i, j = 0, 0\n    while j < len(s):\n        if\
    \ s[i] == s[i+j].upper():\n            if j % 2:\n                upper_count\
    \ += 1\n        j += 1\n    return upper_count\n</code>\n<|/ a dscore=0 tags=python,string,uppercase,count\
    \ |>\n<| a dscore=0 |>\n<code>", "    s = s.lower()\n    return len([c for c in\
    \ s if c.isupper()])\n\n</cell>\n<text>\nLet's test our implementations:\n\n\n\
    </text>\n<cell>\nfor s, expected_count in [('abBCdEf', 1),\n                 \
    \        ('abcdefg', 0),\n                         ('dBBE', 0),\n            \
    \             ('abbbBCcD', 2),\n                         ('abbbbBCcd', 2),\n \
    \                        ('abbbbBCcDdBBE', 6),\n                         ]:\n\
    \    result = count_upper(s)\n    \n    print('{:s} -> {:d}'.format(s, result))\n\
    \    assert result == expected_count\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that counts how many vowels are in strings with one or two vowels.\n\nFor example,\
    \ the following strings have one vowel:\nabaBcCaDaaaD\nabaBcC\naaaBcC\naaaBcCaDaaaD\n\
    \nAnd those with two vowels:\nabaBcC\naaaBcC\nabaBcCaDaaaD\nbbbBcCaDaaaD\n\nReturn\
    \ the total count as an integer.\n\nNote: you can just use str.count. Do not import\
    \ any new modules.\n\n\n</text>\n<cell>", "    n = 0\n    for i in range(len(s)):\n\
    \        if s[i] == 'A':\n            if i & 1 == 1:\n                n += 1\n\
    \        else:\n            if i & 1 == 1:\n                n += 0\n    return\
    \ n\n\n", "    return sum(s[i:i+2].isupper() for i in range(0, len(s), 2))\n\n",
  "    # Only even indices since we only care about upper case\n    return sum(map(lambda\
    \ x: 1 if x.isupper() and x % 2 == 0 else 0, s))\n\n", "    vowels = 'aeiou'\n\
    \    cnt = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i].lower()\
    \ not in vowels and s[i] != s[i + 1]:\n            cnt += 1\n    return cnt\n\n",
  "    return sum(1 for i, c in enumerate(s) if c >= 'A' and c <= 'Z' and i % 2 ==\
    \ 0)\n</code>\nOr use a more readable way using generator expression without using\
    \ enumerate:\n<code>", "    count = 0\n    for i, c in enumerate(s):\n       \
    \ if i % 2 == 0 and c.isupper():\n            count += 1\n    return count\n\n",
  "    count = 0\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i',\
    \ 'o', 'u']:\n            count += 1\n        elif s[i] != 'b':\n            break\n\
    \    return count\n</cell>\n<cell>\ncount_upper('dBBE')\n</cell>\n<text>\nUsing\
    \ itertools, we can count all uppercase vowels in a string:\n\n\n</text>\n<cell>\n\
    from itertools import count\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
