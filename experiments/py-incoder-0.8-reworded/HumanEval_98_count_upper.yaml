name: HumanEval_98_count_upper
language: py
prompt: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
  \ the number of uppercase vowels in even indices.\n    \n    For example:\n    >>>\
  \ count_upper('aBCdEf')\n    1\n    >>> count_upper('abcdefg')\n    0\n    >>> count_upper('dBBE')\n\
  \    0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
  \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
  \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
  \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
completions: ["    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n\
    \            count += 1\n            if i % 2 == 0:\n                count -=\
    \ 1\n    return count\n\n", "    vowels = 'aeiouAEIOU'\n    uppers = 0\n    \n\
    \    for idx, char in enumerate(s):\n        if char in vowels:\n            uppers\
    \ += idx\n            \n    return uppers\n</cell>\n<cell>\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    </cell>\n<text>\nProblem 1\nHow many times are there a vowel \u2018i\u2019, \u2018\
    o\u2019, and \u2018u\u2019 in each word of a given string? \n\nTo do this, simply\
    \ use a for loop and count the number of times the letters i, o, and u occur in\
    \ the string.\n\n\n</text>\n<cell>", "    count = 0\n    \n    for i in range(len(s)\
    \ - 1, -1, -2):\n        if s[i:i+2].isupper():\n            count += 1\n    \
    \        \n    return count\n", "    count = 0\n    for ch in s:\n        if ch.isupper():\n\
    \            if count == 0 or ch == 'a':\n                count += 1\n       \
    \     elif ch == 'A':\n                count -= 1\n    return count\n\n", "  \
    \  uppers = 0\n    for i in range(len(s)):\n        if s[i:i+2] == 'AEIOU':\n\
    \            uppers += 2\n    return uppers\n\n", "    return sum(1 for char in\
    \ s if char.isupper() and ord(char) in range(65, 91))\n\n</cell>\n<text>\nChallenge\
    \ Problem 02\nImplement count_letters(s). Does it work?\n\n</text>\n<cell>", " \
    \   return sum(s[i:i+2].isupper() for i in range(len(s)) if i % 2 == 0)\n</cell>\n\
    <cell>", "    if not s:\n        return 0\n    count_upper = 0\n    i = 0\n  \
    \  while i < len(s):\n        if s[i].isupper():\n            if i % 2 == 0:\n\
    \                count_upper += 1\n        i += 1\n    return count_upper\n",
  "    return sum(1 for i, c in enumerate(s) if c > 'A' and c <= 'Z' and i % 2 ==\
    \ 0)\n\n", "    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'a'\
    \ and s[i] <= 'z':\n            if s[i] >= 'A' and s[i] <= 'Z':\n            \
    \    count += 1\n        else:\n            count += 2\n    return count\n\n",
  "    counts = 0\n    \n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n\
    \            counts += 1\n            if i & 1:\n                counts += 1\n\
    \                \n    return counts\n", "    count = 0\n    for i in range(len(s)):\n\
    \        if s[i] in 'AEIOU':\n            if i % 2 == 0:\n                count\
    \ += 1\n    return count\n\n", "    for i in range(len(s)):\n        if s[i:i+2]\
    \ in VOWELS:\n            return 1 if s[i:i+2] == UPPER else 0\n\n    return 0\n\
    \n", "    counter = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n\
    \            if char in 'AEIOU':\n                counter += 1\n    return counter\n",
  "    vowel_count = 0\n    for letter in s:\n        if letter in 'AEIOUaeiou':\n\
    \            if letter == 'e':\n                vowel_count += 1\n           \
    \ elif letter == 'i':\n                vowel_count += 1\n            elif letter\
    \ == 'o':\n                vowel_count += 1\n            elif letter == 'u':\n\
    \                vowel_count += 1\n    return vowel_count\n\n", "    vowels =\
    \ 'aeiou'\n    return sum(s[i:i+2].upper() == vowels[i] for i in range(len(s)\
    \ - 2))\n\n", "    return sum(c.isupper() and i // 2 <= int(i / 2) for c in s)\n\
    \n", "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n   \
    \         if s[i].isupper():\n                count += 1\n    return count\n\n",
  "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n          \
    \  if s[i] == 'U':\n                count += 1\n    return count\n\n", "    count\
    \ = 0\n    for i in range(0,len(s)):\n        if s[i]=='A' or s[i]=='a':\n   \
    \         count += 1\n        elif s[i]=='E' or s[i]=='e':\n            count\
    \ += 1\n        elif s[i]=='I' or s[i]=='i':\n            count += 1\n       \
    \ elif s[i]=='O' or s[i]=='o':\n            count += 1\n        elif s[i]=='U'\
    \ or s[i]=='u':\n            count += 1\n        else:\n            pass\n   \
    \ return count\n</cell>\n<cell>\nassert count_upper('abEfghI') == 0\nassert count_upper('abEfghIijKkLlMm')\
    \ == 3\n</cell>\n<text>\nTask\nWrite a function that takes a string as input and\
    \ returns a list of all the uppercase vowels in it if the string has vowels and\
    \ a list of all the uppercase vowels in it if there is no vowels.\n\nFor example:\n\
    \n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>>\
    \ no_vowels_string = 'abcdefg'\n>>> count_upper(string_with_vowels)\n['A']\n\n\
    >>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string\
    \ = 'abcdef'\n>>> count_upper(string_with_vowels)\n[]\n\n>>> string_with_vowels\
    \ = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string = 'abcde'\n\
    >>> count_upper(string_with_vowels)\n['A', 'A', 'a']\nWe will discuss our next\
    \ function in Task 5.\n\n\n</text>\n<text>\nBonus\n\n</text>\n<cell>\nassert count_upper('abEfghIijKkLlMm')\
    \ == 3\n</cell>\n<cell>\nassert count_upper('abEfghIijKkLlMm') == 3\n</cell>\n\
    <text>\nTask\nWrite a function that takes a string as input and returns a list\
    \ of all the vowels in it if the string has vowels and a list of all the vowels\
    \ in it if there is no vowels.\n\nFor example:\n\n>>> string_with_vowels = 'AABcdE'\n\
    >>> list_of_vowels = ['A', 'A', 'a']\n>>> no_vowels_string = 'abcdefg'\n>>> count_vowels(string_with_vowels)\n\
    ['A', 'A', 'a']\n\n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A',\
    \ 'A', 'a']\n>>> no_vowels_string = 'abcdef'\n>>> count_vowels(string_with_vowels)\n\
    []\n\n>>> string_with_vowels = 'AABcdE'\n>>> list_of_vowels = ['A', 'A', 'a']\n\
    >>> no_vowels_string = 'abc"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
