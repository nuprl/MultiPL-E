name: HumanEval_140_fix_spaces
language: py
prompt: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces('\
  \ Example')\n    'Example'\n    >>> fix_spaces(' Example 1')\n    'Example_1'\n\
  \    >>> fix_spaces(' Example 2')\n    '_Example_2'\n    >>> fix_spaces(' Example\
  \ 3')\n    '_Example-3'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
  \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
  \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
  \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
  \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
completions: ["    # Add an underscore before any sequence of spaces\n    \n    return\
    \ re.sub(' +', '_', text)\n\n", "    \n    text = re.sub(' +',\"_\",text)\n  \
    \  text = re.sub('\\s{2,}', '_', text)\n    \n    return text\n</cell>\n<cell>\n\
    train_df['id'] = train_df['id'].apply(fix_ids)\ntrain_df['text_lemmatized'] =\
    \ train_df['text_lemmatized'].apply(fix_spaces)\ntrain_df['title_lemmatized']\
    \ = train_df['title_lemmatized'].apply(fix_spaces)\ntrain_df.head(4)\n</cell>\n\
    <text>\nSave the cleaned data\n\n\n</text>\n<cell>\ntrain_df.to_csv(path_or_buf='data/amazon_reviews_us_Digital_Software_v1_00_train.csv',\
    \ header=True, index=False, quoting=csv.QUOTE_NONNUMERIC)\n</cell>\n<text>\nPreparing\
    \ the Test Data\n\n</text>\n<cell>\ntest_df = pd.read_csv('./data/amazon_reviews_us_Digital_Software_v1_00_test_public.csv',\
    \ \n                      dtype=str, \n                      error_bad_lines=False,\
    \ \n                      warn_bad_lines=True)\n\ntest_df['id'] = test_df['id'].apply(fix_ids)\n\
    test_df['text_lemmatized'] = test_df['text_lemmatized'].apply(fix_spaces)\ntest_df['title_lemmatized']\
    \ = test_df['title_lemmatized'].apply(fix_spaces)\ntest_df.head()\n</cell>\n<cell>\n\
    test_df.to_csv(path_or_buf='data/amazon_reviews_us_Digital_Software_v1_00_test.csv',\
    \ header=True, index=False, quoting=csv.QUOTE_NONNUMERIC)\n</cell>\n<cell>\n!pip\
    \ install konlpy wordcloud\n</cell>\n<text>\nLoad in the cleaned Test data\n\n\
    \n</text>\n<cell>\ntest_df = pd.read_csv('./data/amazon_reviews_us_Digital_Software_v1_00_test.csv',\
    \ \n                      dtype=str, \n                      error_bad_lines=False,\
    \ \n                      warn_bad_lines=True)\n\ntest_df['id'] = test_df['id'].apply(fix_ids)\n\
    test_df['text_lemmatized'] = test_df['text_lemmatized'].apply(fix_spaces)\ntest_df['title_lemmatized']\
    \ = test_df['title_lemmatized'].apply(fix_spaces)\ntest_df.head()\n</cell>\n<cell>\n\
    from konlpy.tag import Okt\n\nokt = Okt()\n", "    return re.sub('\\s+', '_',\
    \ text)\n\n\n@lru_cache(maxsize=1024)", "    \n    tokens = text.split()\n   \
    \ \n    # replace spaces with underscores\n    for i in range(len(tokens)):\n\
    \        if tokens[i].isspace():\n            tokens[i] = tokens[i].replace('\
    \ ', '_')\n    \n    # replace double consecutive spaces with -\n    space_counter\
    \ = 0\n    \n    for i in range(len(tokens)):\n        if tokens[i].isspace():\n\
    \            if space_counter > 0:\n                tokens[i] = '-' + tokens[i]\n\
    \                space_counter = 0\n        else:\n            space_counter +=\
    \ 1\n    \n    return ' '.join(tokens)\n\n", "    return ' '.join(text.split())\n",
  "    if text.find(' ') >= 0:\n        spaces = re.sub(' +', ' ', text)\n       \
    \ consecutive = re.sub(' +', ' ', spaces)\n        no_space = re.sub(' +', '',\
    \ consecutive)\n        no_space = re.sub('-+', '-', no_space)\n        no_space\
    \ = re.sub(' +', '', no_space)\n        return no_space\n    else:\n        return\
    \ text\n\n", "    return re.sub(' +', ' ', text)\n\n", "    \n    spaces = [i\
    \ for i in text if i in ' ']\n    if len(spaces) >= 2:\n        return '_'.join(spaces)\n\
    \    else:\n        return text\n</cell>\n<text>\nTest your work\nWith this function,\
    \ you can (mostly) automate the process of fixing text data.\n\n\n</text>\n<cell>\n\
    fix_spaces(' Example')\n</cell>\n<cell>\nfix_spaces(' Example 1')\n</cell>\n<cell>\n\
    fix_spaces(' Example 2')\n</cell>\n<cell>\nfix_spaces(' Example 3')\n</cell>\n\
    <text>\nOptional: Removing punctuation\nSome text analysis tasks consider punctuation\
    \ to be an important aspect of a word. \nIf you're working with some text that\
    \ includes punctuation, like names, addresses, \nor phone numbers, you might want\
    \ to remove it.\n\nFor example, text that might be a\n\nname or email\naddress,\n\
    phone number,\nsocial security number\n\nmight contain punctuation like commas\
    \ and periods. \nOther tasks might want to remove all punctuation. \nIt's okay\
    \ to remove punctuation if and only if it doesn't hurt the semantics of the text.\
    \ \nFor this optional task, you are welcome to specify a list containing the specific\
    \ punctuation you want to remove. \n(Later on in this specialization, you'll learn\
    \ how to include other punctuation in your \nlist and how to handle text that\
    \ includes multiple consecutive punctuations. You'll see how to do that later.)\n\
    \nInstructions\n\nIn the list below, write a list of the punctuations that you\
    \ want to remove. \nNote that punctuations are like commas and periods, so be\
    \ sure to include them in the list.\n\n\n</text>\n<cell>", "    return re.sub('\\\
    s+', '_', text)\n</cell>\n<cell>\nprint(fix_spaces(' Example'))\nprint(fix_spaces('\
    \ Example 1'))\nprint(fix_spaces(' Example 2'))\nprint(fix_spaces(' Example 3'))\n\
    </cell>\n<cell>", "    text = re.sub(r'\\s+', '_', text).strip()\n    return re.sub(r'_{2,}',\
    \ '_', text)\n", "    return text.replace(' ', '-')\n\n", "    text = text.replace('\
    \ ', '_')\n    if len(text.split(' ')) > 1:\n        space_replacement = ''\n\
    \        for space in text.split(' '):\n            if space != text.replace(space,\
    \ '_'):\n                space_replacement += space + '_'\n        text = text.replace(space_replacement,\
    \ '')\n    return text\n\n", "    return text.replace(' ', '_').replace('  ',\
    \ '-')\n", "    # remove double spaces\n    text = re.sub(r'  +', ' ', text)\n\
    \    # replace consecutive spaces with a single -\n    text = re.sub(r'  +', '-',\
    \ text)\n    return text\n", "    return re.sub(' +', ' ', text)\n", "    pattern\
    \ = re.compile(r\"\\s(?=\\s|$)\", re.UNICODE)\n    return pattern.sub(lambda m:\
    \ \"_\", text)\n</cell>\n<text>\nLet's test this function on some examples:\n\n\
    \n</text>\n<cell>\nfor i in range(100):\n    print(fix_spaces(\"Example {}\".format(i)),\
    \ end=', ')\n</cell>\n<text>\nLet's also define some custom classes to play around\
    \ with:\n\n\n</text>\n<cell>", "    if text.find(' ') != -1:\n        spaces =\
    \ text.find(' ')\n        spaces_left = text.find(' ', spaces + 1)\n        spaces_right\
    \ = text.find(' ', spaces + 2)\n        text = text.replace(text[spaces:spaces_left],\
    \ '_')\n        text = text.replace(text[spaces_left:spaces_right], '-')\n   \
    \ return text\n\n", "    \n    if text == '':\n        return ''\n    \n    spaces\
    \ = text.count(' ')\n    \n    if spaces > 2:\n        new_spaces = '-' * spaces\n\
    \        text = ''.join([s.strip() for s in text.split(' ')]) + new_spaces\n \
    \   \n    return text\n\n", "    words = text.split()\n    for i in range(len(words)):\n\
    \        if words[i].endswith(' '):\n            words[i] = words[i][0:-1]\n \
    \   if len(words) == 1:\n        return text\n    elif len(words) == 2 and words[1]\
    \ == '':\n        return text\n    else:\n        return ' '.join(words[1:])\n\
    \n", "    \n    pattern = re.compile(r' +')\n    return pattern.sub('_', text)\n\
    \n", "    return re.sub('\\s+', '_', text.replace(' ', ''))\n", "    return text.replace('\
    \ ', '_')\n\n", "    \n    # Find consecutive spaces.\n    space_counts = Counter(text.split())\n\
    \    \n    for k in sorted(space_counts.keys()):\n        if space_counts[k] >\
    \ 2:\n            # Replace multiple spaces with underscore.\n            text\
    \ = text.replace(k, k + '_')\n        elif space_counts[k] == 2:\n           \
    \ # Replace single space with underscore.\n            text = text.replace(k,\
    \ k + '_')\n    \n    return text\n</cell>\n<cell>\nfix_spaces('Example')\n</cell>\n\
    <cell>\nfix_spaces('Example 1')\n</cell>\n<cell>\nfix_spaces('Example 2')\n</cell>\n\
    <cell>\nfix_spaces('Example 3')\n</cell>\n<cell>", "    \n    spaces = [i for\
    \ i,c in enumerate(text) if c == ' ']\n    if len(spaces) > 2:\n        spaces\
    \ = tuple(list(spaces)[:-1])\n    text = text.replace(\" \", \"_\")\n    return\
    \ text if len(spaces) == 1 else text.replace(\" \", \"-\")\n\n", "    if not text:\n\
    \        return text\n    \n    if text == ' ':\n        return text\n    \n \
    \   text_list = list(text)\n    text_list = [text.strip() for text in text_list]\n\
    \    text_list = [text.lower() for text in text_list]\n    text_list = [text.replace(\"\
    \ \", \"_\") for text in text_list]\n    text_list = [text.replace(\" \", \"-\"\
    ) for text in text_list]\n    return \"\".join(text_list)\n\n", "    \n    words\
    \ = text.split()\n    \n    if len(words) == 1:\n        return text\n    \n \
    \   if len(words) == 2:\n        if words[0] == ' ':\n            return words[1]\n\
    \        if words[1] == ' ':\n            return words[0]\n    \n    if len(words)\
    \ > 2:\n        i = 0\n        while i < len(words):\n            if words[i]\
    \ == ' ':\n                i += 1\n                words[i] = ''\n           \
    \     \n            i += 1\n            \n        return ' '.join(words)\n   \
    \ \n    return text\n\n", "    return re.sub('\\s+', '_', text).replace('  ',\
    \ '-')\n</cell>\n<cell>\nfix_spaces(' '.join(['Example', '1', '2']))\n</cell>\n\
    <cell>\nfix_spaces(' '.join(['Example', ' 1', ' 2']))\n</cell>\n<cell>", "   \
    \ text = text.replace(' ', '_')\n    spaces = text.count(' ')\n    if spaces >\
    \ 1:\n        text = '_' + text.replace(' ', '-')\n    return text\n\n", "   \
    \ return re.sub(' +', ' ', text).strip()\n", "    \n    return re.sub(\n     \
    \   ' {2,}',\n        lambda match: f'_{match.group()}',\n        text,\n    )\n",
  "    return re.sub(' {2,}', '_', text)\n\n", "    if not text:\n        return text\n\
    \    return ' '.join(text.strip().split())\n\n", "    for match in spaces_re.finditer(text):\n\
    \        text, n = re.subn(\"\\\\s+\", \"_\", text, count=1)\n        text +=\
    \ \" \" * (n - 1)\n    return text\n", "    \n    # Replace all spaces with underscores\n\
    \    fixed_text = text.replace(' ', '_')\n    \n    # Replace all consecutive\
    \ spaces with -\n    fixed_text = fixed_text.replace('  ', '-')\n    \n    return\
    \ fixed_text\n</cell>\n<cell>", "    return text.replace(' ', '_').replace(' \
    \ ', '-')\n\n", "    \n    replaced_text = text.replace(\" \", \"-\")\n    \n\
    \    if len(replaced_text.split()) > 1:\n        replaced_text = replaced_text.replace(\"\
    -\", \" \")\n    \n    return replaced_text\n\n", "    return re.sub('\\s', '_',\
    \ text)\n\n", "    return re.sub(\"\\ +\", \" \", text).strip()\n", "    no_spaces\
    \ = text.replace(\" \", \"_\")\n    spaces = re.sub(' +', '-', no_spaces)\n  \
    \  return spaces\n\n", "    \n    text = re.sub(r'\\s+', '_', text)\n    \n  \
    \  text = re.sub(r'\\s{2,}', '-', text)\n    \n    return text\n</cell>\n<text>\n\
    Let's now test our fix_spaces function.\n\n\n</text>\n<cell>\nfix_spaces(' Example\
    \ 1')\n</cell>\n<text>\nWe are now ready to begin working with our text data.\
    \  We will begin by iterating through every word in our data set using the map\
    \ function.  Then we will apply the fix_spaces function to each word in the dataset.\n\
    \nThe map function allows us to transform each item in the data set using a function\
    \ we provide.  It takes 2 arguments: the first argument is what we want to transform\
    \ and second argument is the function we are providing.  The map function returns\
    \ a list of the transformed items in the data set.\n\n\n</text>\n<cell>", "  \
    \  return re.sub(\" +\", \"_\", text).strip(\"_\")\n\n", "    return text.replace('\
    \ ', '_')\n\n", "    text = re.sub(r'\\s+', '_', text)\n    text = re.sub(r'(?<=[^\
    \ ])(?=[^ ]{2,})', '_', text)\n    return text\n", "    return re.sub(' +', '\
    \ ', text)\n", "    return re.sub(r'\\s+', '_', text)\n\n", "    words = text.split('\
    \ ')\n    new_words = []\n    for word in words:\n        new_word = word.replace('\
    \ ', '_')\n        if new_word != word:\n            new_words.append(new_word)\n\
    \    if len(new_words) > 2:\n        new_words[0] = new_words[1] + new_words[0][0:1]\n\
    \    if new_words:\n        return ' '.join(new_words)\n    else:\n        return\
    \ text\n\n", "    return text.replace(\" \", \"_\").replace('  ', '- ').strip()\n",
  "    return re.sub(' +', ' - ', re.sub(' (?=\\s)', ' _', text))\n", "    return\
    \ re.sub(' +', '_', text)\n\n", "    return text.replace(' ', '_')\n", "    \n\
    \    return re.sub(' \\S*', lambda match: match.group().replace(' ', '_'), text)\n\
    \n", "    text = text.strip()\n    \n    # Replace multiple spaces with a single\
    \ space\n    text = re.sub(' +',' ', text)\n    \n    # replace multiple spaces\
    \ with single dash\n    while '  ' in text:\n        text = text.replace('  ','-')\n\
    \    \n    # replace single dash with multiple dash\n    while '-' in text:\n\
    \        text = text.replace('-','--')\n    \n    # replace single space with\
    \ underscore\n    while '  ' in text:\n        text = text.replace('  ','_')\n\
    \    \n    # replace single underscore with space\n    while '_' in text:\n  \
    \      text = text.replace('_',' ')\n    \n    return text\n</cell>\n<cell>\n\
    fix_spaces('Example 2')\n</cell>\n<cell>\nfix_spaces('Example 3')\n</cell>\n<text>\n\
    Remove duplicate words in a sentence.\n\n\n</text>\n<cell>", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    return re.sub('\\s+', '_', text)\n", "    \n    if\
    \ len(text) <= 2:\n        return text\n    \n    before = text[0:text.find('\
    \ ')]\n    after  = text[text.find(' ') + 1:]\n    \n    new_text = before + re.sub('\
    \ +', ' ', after).replace(' ', '_')\n    \n    return new_text\n</cell>\n<cell>",
  "    return re.sub('\\s+', '_', text)\n\n", "    text = re.sub('\\s', '_', text)\n\
    \    text = re.sub(' +', ' ', text)\n    return text\n\n", "    return re.sub(r'\\\
    s+', '-', text)\n\n", "    return re.sub(r'\\s+', '_', text).strip('-')\n\n",
  "    return text.replace(' ', '_')\n\n", "    \n    space = re.compile(r\"\\s\"\
    )\n    text = re.sub(space, \" \", text)\n    text = re.sub(\"\\s\\s\", \"_\"\
    , text)\n    return text\n</cell>\n<cell>\nfix_spaces(' Example')\n</cell>\n<cell>\n\
    fix_spaces(' Example 1')\n</cell>\n<cell>\nfix_spaces(' Example 2')\n</cell>\n\
    <cell>\nfix_spaces(' Example 3')\n</cell>\n<cell>", "    text = text.replace('\
    \ ', '_')\n    while '  ' in text:\n        text = text.replace('  ', '-')\n \
    \   return text\n", "    splitted = text.split()\n    if len(splitted) > 1:\n\
    \        splitted[0] = splitted[0].replace(\" \", \"_\")\n        for i in range(1,\
    \ len(splitted)):\n            splitted[i] = splitted[i].replace(\" \", \"_\"\
    )\n    else:\n        splitted[0] = splitted[0].replace(\" \", \"_\")\n    return\
    \ \" \".join(splitted)\n\n", "    return re.sub('\\s+', '_', text).rstrip('-')\n",
  "    return text.replace(' ', '_')\n", "    \n    return ' '.join(text.split())\n\
    \n", "    \n    text = text.strip()\n    \n    # Replace all spaces with underscores\n\
    \    text = text.replace(' ', '_')\n    \n    # Fix all spaces after 2 or more\
    \ consecutive underscores\n    text = re.sub('___+', '_', text)\n    \n    return\
    \ text\n", "    split_text = text.split()\n    if len(split_text) > 1:\n     \
    \   split_text = ['-'.join(split_text[:i+1]) for i in range(len(split_text))]\n\
    \    return ' '.join(split_text)\n\n", "    \n    return re.sub(' +', '_', text)\n\
    \n", "    return re.sub('\\s+', '_', text).strip('-')\n", "    return re.sub('\\\
    s', '_', text)\n", "    return re.sub(' +', ' ', text)\n", "    \n    # Find consecutive\
    \ spaces and replace with -\n    for i,c in enumerate(text):\n        if c ==\
    \ ' ':\n            text = text.replace(\" \", \"_\")\n            text = text.replace(text[i-1],\
    \ \"-\")\n            \n    # Replace all spaces with underscores\n    while \"\
    \  \" in text:\n        text = text.replace(\"  \", \"_\")\n        \n    return\
    \ text\n</cell>\n<cell>", "    \n    text = text.replace(' ', '_')\n    \n   \
    \ return text\n", "    return ' '.join(text.split())\n", "    \n    return re.sub('\
    \ +', '_', text).strip('_')\n\n", "    return re.sub(r'\\s+', '-', text)\n\n",
  "    return re.sub(r'\\s+', '_', text)\n", "    # fix spaces\n    text = re.sub('\\\
    s{2,}', '_', text)\n    # fix consecutive spaces\n    text = re.sub('\\s+', '-',\
    \ text)\n    return text\n</cell>\n<cell>\nfix_spaces(' Example')\n</cell>\n<cell>\n\
    fix_spaces(' Example 1')\n</cell>\n<cell>\nfix_spaces(' Example 2')\n</cell>\n\
    <cell>\nfix_spaces(' Example 3')\n</cell>\n<text>\nConvert all letters to lower\
    \ case\nConvert all letters to lower case\n\n</text>\n<cell>", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    text = re.sub(' +', '_', text)\n    return text if\
    \ len(text.split()) <= 2 else re.sub(' +', '-', text)\n    ", "    \n    # remove\
    \ any leading/trailing spaces\n    clean = text.strip()\n    \n    # replace all\
    \ spaces with underscores\n    clean = clean.replace(' ', '_')\n    \n    # replace\
    \ consecutive spaces with - \n    if len(clean.split()) > 1:\n        clean =\
    \ clean.replace(' ', '-')\n    \n    # return all spaces\n    return clean\n",
  "    # Replace each space with a dash\n    spaces = text.replace(' ', '-')\n   \
    \ # Replace multiple spaces with just one\n    spaces = re.sub(' +', '_', spaces)\n\
    \    return spaces\n\n", "    \n    return text.replace(' ', '_')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('  ', '-')\\\n \
    \       .replace('  ', '-')\\\n        .replace('  ', '-')\\\n        .replace('\
    \  ', '-')\\\n        .replace('  ', '-')", "    no_spaces = re.sub('\\ ', ' \
    \ ', text)\n    return re.sub('\\s{2,}', '-', no_spaces)\n\n", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    return re.sub(r'\\s+', '_', text).strip('-')\n", " \
    \   tokens = text.split(' ')\n    new_tokens = []\n    \n    for token in tokens:\n\
    \        if ' ' in token:\n            new_tokens.extend([x.replace(' ', '_')\
    \ for x in token.split(' ')])\n        else:\n            new_tokens.append(token)\n\
    \    \n    return ' '.join(new_tokens)\n\n", "    if not text:\n        return\
    \ text\n    text = text.replace(' ', '_')\n    spaces = 0\n    for c in text:\n\
    \        if c == ' ':\n            spaces += 1\n        else:\n            if\
    \ spaces > 0:\n                text = ''.join([\n                    c if i ==\
    \ 0 or c == ' ' else '-' \n                    for i in range(spaces, 0)\n   \
    \             ])\n                break\n            else:\n                text\
    \ = ''.join([\n                    c if i == 0 or c == ' ' else '_' \n       \
    \             for i in range(0, spaces+1)\n                ])\n              \
    \  spaces = 0\n    return text\n</cell>\n<cell>", "    \n    return text.replace('\
    \ ', '_')\n\n", "    return text.strip().replace(' ', '_')\n", "    if ' ' in\
    \ text:\n        cleaned_text = text.replace(' ', '_')\n        # fix multiple\
    \ spaces\n        while '  ' in cleaned_text:\n            cleaned_text = cleaned_text.replace('\
    \  ', '-')\n        return cleaned_text\n    else:\n        return text\n    \n\
    </cell>\n<cell>", "    \n    # Replace multiple spaces with single underscores\n\
    \    text = re.sub(r'\\s+', '_', text)\n    \n    # Make sure there are no consecutive\
    \ underscores\n    while re.search(r'__', text):\n        text = re.sub(r'_+',\
    \ '_', text)\n        \n    return text\n</cell>\n<cell>", "    return re.sub('\\\
    s', '_', text).replace('  ', ' ').replace('  ', ' ')\n\n", "    return re.sub('\\\
    s+', '_', text)\n", "    return re.sub(r'\\s+', '_', text).replace('_', '-')\n\
    \n", "    return (\n        text.strip().replace(' ', '_')\n        .replace('\
    \  ', ' -')\n        .replace('  -', ' -')\n    )\n\n", "    # Replace spaces\
    \ with underscores\n    underscored_text = text.replace(' ', '_')\n    \n    #\
    \ Replace multiple consecutive spaces with a single -\n    num_spaces = text.count('\
    \ ')\n    if num_spaces > 1:\n        underscored_text = underscored_text.replace('\
    \  ', '-')\n    \n    return underscored_text\n", "    \n    if ' ' in text:\n\
    \        text, count = text.rsplit(' ', 1)\n        \n        if count == '':\n\
    \            count = 1\n        \n        count = count - 1\n        text = text.replace('\
    \ ', '_')\n        \n        if count > 2:\n            text, count = text.rsplit('\
    \ ', 1)\n            \n            text = text.replace(' ', '_')\n    \n    return\
    \ text\n\n", "    \n    # replace each space with _\n    text = text.replace('\
    \ ', '_')\n    \n    # replace consecutive spaces with _\n    text = re.sub(r'(\
    \ ){2,}', '_', text)\n    \n    return text\n\n", "    return re.sub(SPACES, '-',\
    \ text)\n\n", "    \n    text = re.sub(r'\\s+', ' ', text)\n    text = re.sub(r'(\\\
    s\\s+)', '_', text)\n    \n    return text\n</cell>\n<text>\nLet's now apply this\
    \ function to the text of our dataset.\n\n\n</text>\n<cell>", "    return re.sub(r\"\
    \\s+\", '_', text)\n\n", "    \n    no_space_re = re.compile('[^\\s]+')\n    \n\
    \    return re.sub(no_space_re, lambda x: '_' + x.group(0), text)\n", "    text\
    \ = re.sub(r'\\s+', '_', text)\n    if len(text) > 2:\n        text = re.sub(r'\\\
    s+', '-', text)\n    return text\n", "    \n    return re.sub('\\s+', '_', text)\n\
    \n", "    # Replace each space with an underscore\n    fixed_text = text.replace('\
    \ ', '_')\n    \n    # Check if there are more than two consecutive spaces and\
    \ \n    # replace them with a -\n    fixed_text = fixed_text.replace('  ', '-\
    \ ')\n    \n    return fixed_text\n", "    return re.sub(r'\\s{2,}', '_', text)\n\
    \n", "    if not text or len(text) < 2:\n        return text\n    return text.replace('\
    \ ', '_').replace('  ', '-')\n\n", "    return re.sub(r'\\s{2,}', '_', text)\n",
  "    if len(text) < 2:\n        return text\n    spaces = list(text)\n    for i\
    \ in range(len(spaces)-1):\n        if spaces[i] == ' ' and spaces[i+1] == ' ':\n\
    \            spaces[i] = '_'\n        else:\n            spaces[i] = ''\n    return\
    \ ''.join(spaces)\n", "    text = re.sub(' +', ' ', text)\n    \n    # Remove\
    \ multiple consecutive spaces\n    text = re.sub(' +', ' ', text)\n\n    if len(text)\
    \ <= 2:\n        return text\n\n    return text[:-1] + '-' + text[-1]\n\n", " \
    \   \n    return re.sub('\\s', '_', text)\n</cell>\n<text>\nTest fix_spaces()\n\
    \n\n</text>\n<cell>\nfix_spaces(' Example 2')\n</cell>\n<cell>", "    def replace(text:\
    \ str) -> str:\n        pattern = re.compile(r'\\s+')\n        return re.sub(pattern,\
    \ '_', text)\n    return replace(text)\n", "    return re.sub(r\"\\s+\", \"_\"\
    , text)\n\n", "    if text == \"\":\n        return text\n\n    return \" \".join(text.strip().split())\n\
    \n", "    \n    # check how many spaces there are in text\n    spaces = text.count('\
    \ ')\n\n    # replace all spaces with underscores\n    if spaces > 2:\n      \
    \  text = text.replace(' ', '_')\n        \n    # replace consecutive spaces with\
    \ '-'\n    else:\n        i = 0\n        length = len(text)\n        while i <\
    \ length - 1:\n            if text[i] == '_' and text[i + 1] == '_':\n       \
    \         text = text[:i] + text[i + 2:]\n                i = i + 1\n        \
    \    else:\n                i = i + 1\n\n    return text\n\n", "    return re.sub('\
    \ {2,}', '_', text)\n", "    return re.sub('\\s', '_', re.sub(' +', ' ', text))\n\
    \n", "    spaces = [i for i in range(len(text)) if text[i] == ' ']\n    if len(spaces)\
    \ > 1:\n        # Replace consecutive spaces with -\n        return text.replace('\
    \ ', '-')\n    return text\n\n", "    if text == '':\n        return text\n  \
    \  elif text.isspace():\n        return '_'\n    else:\n        words = text.split('\
    \ ')\n        return ' '.join([word.replace(\" \", \"_\") for word in words])\n\
    \n", "    \n    return re.sub(r'\\s+', '_', text)\n", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    text = text.replace(' ', '_')\n    if len(text) > 2:\n\
    \        first = text[0]\n        last = text[-1]\n        middle = text[1:-1]\n\
    \        text = first + middle.replace(' ', '_') + last + '_'\n    return text\n\
    \n", "    text = re.sub('\\s+', '-', text)\n    \n    spaces = 0\n    while True:\n\
    \        pos = text.find('-', spaces)\n        if pos == -1:\n            break\n\
    \        else:\n            spaces = pos + 1\n            text = text[:pos] +\
    \ text[pos:]\n            \n    return text\n\n", "    \n    return re.sub(' +',\
    \ ' ', text).replace(' ', '_')\n", "    return re.sub('[ ]{2,}', '-', text)\n",
  "    return re.sub(' +', ' ', text)\n\n", "    \n    text = text.strip()\n    text\
    \ = re.sub(r'\\s+','_',text)\n    text = re.sub(r'_{2,}','_',text)\n    \n   \
    \ return text\n</cell>\n<cell>\nfix_spaces('Example 3')\n</cell>\n<cell>\nfix_spaces('Example\
    \ 4')\n</cell>\n<text>\nExercise 2: Sentiment Analysis \nSentiment analysis is\
    \ a general term for analyzing how people express emotion. \nIt involves taking\
    \ natural language and analyzing the intensity of its words.\nThis is an important\
    \ concept and one that is being actively developed\nbecause it is relevant to\
    \ many domains, especially business and finance.\nIn this exercise we will use\
    \ sentiment analysis to analyze the sentiment of tweets.\nA positive sentiment\
    \ is expressed as happy and neutral\nA negative sentiment is expressed as sad\
    \ and angry\nWe will use the twitter streaming API to extract the sentiment from\
    \ tweets.\nWe will use the sentiment-analysis python library to perform the analysis.\n\
    We will store the sentiment in two columns 'positive' and 'negative' in the tweets\
    \ data.\nWe can then visualize the sentiment using matplotlib to see how the sentiment\
    \ changes over time.\nOur first step is to install and import the sentiment-analysis\
    \ library into our notebook.\n\n</text>\n<cell>\n!pip install sentiment-analysis\n\
    </cell>\n<cell>\nimport pandas as pd\nimport sentiment\n</cell>\n<text>\nThe following\
    \ cell downloads the tweets data, extracts the sentiment, and stores it as a dataframe\
    \ called 'tweets':\n\n\n</text>\n<cell>", "    return re.sub('\\s', '_', text).strip('_')\n\
    \n", "    # remove white spaces\n    text = text.strip()\n    \n    # replace\
    \ multiple spaces with a single one\n    while \"  \" in text:\n        text =\
    \ text.replace(\"  \", \" \")\n        \n    # replace multiple spaces with a\
    \ single one\n    text = \"_\".join(text.split())\n    \n    # replace spaces\
    \ with -\n    text = text.replace(\" \", \"-\")\n    \n    return text\n</cell>\n\
    <text>\nLet's now apply our fix_spaces function on all the texts we're interested\
    \ to clean up.\n\n\n</text>\n<cell>\ndf = df_with_sentences['clean_sentence'].copy()\n\
    df = df.applymap(fix_spaces)\n</cell>\n<text>\nAs you can see, all the texts are\
    \ now cleaned and we can see that some of the texts contain more than 2 consecutive\
    \ spaces, which would make them look ugly.\n\nSome of the texts have been changed\
    \ to have a - at the end for readability, but this doesn't always imply that we\
    \ can't use them for analysis. To do so, we will first need to check which sentences\
    \ have 2 or more consecutive spaces. To do this, we'll use the following function:\n\
    \n\n</text>\n<cell>", "    return re.sub('  +', '_', text)\n\n", "    text = re.sub('\\\
    s\\s+', '_', text)\n    text = re.sub('\\s{2,}', '-', text)\n    return text\n\
    </cell>\n<cell>", "    return re.sub(r'\\s+', '_', text)\n", "    return text.replace('\
    \ ', '_').replace('  ', '-')\n\n", "    # Check if a string has more than one\
    \ consecutive spaces and replace them with -\n    if ' ' in text and '  ' in text:\n\
    \        text = text.replace('  ', ' - ')\n\n    # Check if a string has any spaces\
    \ and replace them with underscores\n    elif ' ' in text:\n        text = text.replace('\
    \ ', '_')\n    \n    return text\n", "    \n    # Remove all spaces\n    text\
    \ = re.sub(' ', '-', text)\n    \n    # Replace consecutive spaces with -\n  \
    \  text = re.sub('  +', '-', text)\n    \n    return text\n</cell>\n<cell>", " \
    \   # Remove all spaces at start and end\n    text = text.strip()\n    # Replace\
    \ spaces with underscores\n    text = text.replace(' ', '_')\n    # If the string\
    \ has more than 2 consecutive spaces\n    # then replace all consecutive spaces\
    \ with -\n    if len(text) > 2 and ' ' in text:\n        import re\n        def\
    \ replacer(match):\n            return ('-' + match.group(1) + '-').upper()\n\
    \        text = re.sub('  +', replacer, text)\n    return text\n", "    return\
    \ re.sub(r'\\s+', '_', text)\n", "    return re.sub('[ ]{2,}', '-', text)\n\n",
  "    \n    def replace(match):\n        group = match.group(0)\n        if group\
    \ != ' ':\n            return group\n        return '_'\n    \n    \n    return\
    \ re.sub(' \\ ', replace, text)\n", "    \n    return re.sub(' +', '_', text)\n\
    \n", "    return re.sub(\" +\", \"_\", text)\n", "    return re.sub(' +', ' ',\
    \ text).strip()\n", "    \n    space_idx = text.find(' ')\n    if space_idx ==\
    \ -1:\n        return text\n    \n    len_substr = space_idx - 1\n    len_substr_prev\
    \ = len_substr\n    \n    while(space_idx > 0):\n        if text[space_idx - 1]\
    \ == ' ':\n            len_substr = space_idx - 1\n        else:\n           \
    \ len_substr = space_idx\n        space_idx = text.find(' ', len_substr)\n   \
    \     \n    if len_substr == len_substr_prev + 2:\n        text += \"-\"\n   \
    \ \n    text = text[:space_idx + 1]\n    \n    return text\n</cell>\n<cell>",
  "    # Split on spaces to get list\n    parts = text.split()\n    # Remove spaces\
    \ from parts list\n    parts = [part.strip() for part in parts]\n    \n    # If\
    \ there are too many spaces, replace consecutive spaces with hyphen\n    if len(parts)\
    \ > 2:\n        for i in range(1, len(parts)):\n            if parts[i-1] == '\
    \ ' and parts[i] == ' ':\n                parts[i] = '-'\n    return ''.join(parts)\n\
    \n", "    return re.sub(' +', ' ', text)\n\n\n@timeit", "    return re.sub(\"\
    \ +\", \"_\", text)\n", "    return re.sub(r'\\s+', '_', text).strip()\n</cell>\n\
    <cell>", "    return re.sub(r\"\\s+\", \" \", text).strip()\n", "    \n    return\
    \ re.sub(' \\w+', \n                  lambda m: '_' + m.group(0).replace(' ',\
    \ '_')\n                  if len(m.group(0)) >= 2\n                  else '-',\n\
    \                  text)\n</cell>\n<cell>", "    text = text.strip()\n    return\
    \ ' '.join(text.split())\n\n", "    return re.sub('[ ]{2,}', '-', text)\n\n",
  "    \n    # check if text is null or contains only space\n    if not text:\n  \
    \      return text\n    \n    fix_spaces_pattern = re.compile(\"[\\s\\t\\n]+\"\
    , re.MULTILINE)\n    fixed_text = fix_spaces_pattern.sub(\"_\", text)\n    \n\
    \    if len(fixed_text.split()) > 2:\n        fixed_text = \"-\".join(fixed_text.split())\n\
    \    \n    return fixed_text\n", "    \n    return re.sub(' +', ' ', text)\n\n",
  "    return re.sub(r'\\s+', '-', text).strip('-')\n\n", "    \n    return text.replace(\"\
    \ \", \"_\").replace(\"  \", \"_\")\n\n", "    # use regex to solve the problem\
    \ of consecutive spaces\n    pattern = re.compile(r'\\s+')\n    \n    # replace\
    \ all spaces with underscores\n    text = pattern.sub('_', text)\n\n    # check\
    \ if a string has more than 2 consecutive spaces\n    # if it does, replace all\
    \ consecutive spaces with -\n    if len(text.split()) > 2:\n        text = pattern.sub('-',\
    \ text)\n\n    return text\n", "    text = re.sub(r'\\s+', '_', text)\n    if\
    \ len(text) >= 2:\n        text = re.sub(r'\\s+', '-', text)\n    return text\n",
  "    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n\
    \    \n    # replace consecutive spaces with -\n    count = 0\n    while count\
    \ < len(text) - 2:\n        if text[count] == text[count + 1]:\n            text\
    \ = text[:count] + text[count + 2:]\n            count += 1\n        else:\n \
    \           count += 1\n    \n    return text\n    ", "    return re.sub(r'\\\
    s+', '_', text)\n\n", "    return re.sub(r'\\s+', '_', text)\n\n", "    \n   \
    \ if text == '':\n        return text\n\n    space = ' '\n    text = text.replace('\
    \ ', '\\ ') # replace all spaces with \\\n    text = text.replace('  ', '\\ ')\
    \ # replace 2 consecutive spaces with \\\n    text = text.replace('  ', space)\
    \ # replace 2 consecutive spaces with space\n    return text\n", "    if text\
    \ is None:\n        return None\n    \n    text = text.replace(' ', '_')\n   \
    \ \n    prev_char = None\n    \n    for c in text:\n        if c == '_':\n   \
    \         if prev_char != ' ':\n                text = (text[:text.index(c)] +\
    \ text[text.index(c) + 1:].replace('_', ' '))\n        prev_char = c\n    \n \
    \   return text\n</cell>\n<cell>", "    return re.sub(' +', '_', text).replace('_\
    \ -', '_')\n", "    return re.sub('\\s+', '_', text)\n\n", "    text = re.sub(r'\\\
    s+', ' ', text)\n    \n    # remove multiple spaces\n    text = re.sub(r'\\s+',\
    \ ' ', text)\n    \n    # replace consecutive spaces with -\n    text = re.sub(r'\\\
    s+', '-', text)\n    \n    return text\n", "    return re.sub('\\s+', '_', text).strip('-')\n",
  "    return re.sub('\\s', '_', text).strip('_').lower()\n", "    \n    text = re.sub(r\"\
    \\s+\", \"-\", text)\n    return re.sub(r\"[ ]{2,}\", \"-\", text).strip('-')\n",
  "    return re.sub(' +', '_', text)\n\n", "    \n    split_text = text.split()\n\
    \    if len(split_text) == 1:\n        return text\n    else:\n        if ' '\
    \ in text:\n            split_text[0] = '_' + split_text[0]\n        else:\n \
    \           split_text[0] = ''\n        return ' '.join(split_text)\n</cell>\n\
    <cell>", "    fixed = text.replace(' ', '_')\n    fixed = fixed.replace('  ',\
    \ '- ')\n    fixed = fixed.rstrip()\n    return fixed\n", "    if text is None:\n\
    \        return None\n    return text.replace(' ', '_')\n", "    words = text.split()\n\
    \    no_spaces = ''\n    for word in words:\n        no_spaces += (word.strip()\
    \ + '_') * len(word)\n    return no_spaces\n", "    return re.sub(r'\\s+', '_',\
    \ text)\n", "    return ' '.join(text.strip().split())\n\n", "    \n    if text\
    \ is None:\n        return None\n\n    result = text\n    \n    # Replace all\
    \ spaces with underscores\n    text_no_spaces = ''.join(e for e in text if e.isspace())\n\
    \    result = result.replace(text_no_spaces, '_')\n    \n    # Only keep spaces\
    \ after two consecutive ones\n    result = result.replace(' _ ', ' - ')\n    \n\
    \    return result\n\n", "    \n    text = text.replace(\" \", \"_\")\n    text\
    \ = re.sub(\"\\s{2,}\", \"_\", text)\n    text = re.sub(\"_{2,}\", \"_\", text)\n\
    \    return text\n", "    return text.replace(' ', '_').replace('  ', '-')\n\n",
  "    # split text by space \n    words = text.split()\n    # count consecutive spaces\
    \ and if more than 2 \n    # replace consecutive spaces with -\n    consecutive_count\
    \ = 0\n    fixed_words = []\n    for word in words:\n        fixed_word = fix_space_to_dash(word)\n\
    \        fixed_words.append(fixed_word)\n        if fixed_word == ' ':\n     \
    \       consecutive_count += 1\n        else:\n            consecutive_count =\
    \ 1\n    # check if any word has more than 2 consecutive spaces\n    words_too_long\
    \ = len([word for word in fixed_words if fix_space_to_dash(word) != ' '])\n  \
    \  \n    # if any word has more than 2 consecutive spaces \n    # then replace\
    \ all consecutive spaces with -\n    if words_too_long > 0:\n        # replace\
    \ all spaces with - \n        fixed_text = '-'.join(fixed_words)\n    else:\n\
    \        # replace all spaces with _ \n        fixed_text = '_'.join(fixed_words)\n\
    \    return fixed_text\n", "    \n    return ' '.join(text.split())\n", "    text\
    \ = re.sub(r'\\s+', '_', text)\n    return re.sub(r'(-+)+', '_', text)\n</cell>\n\
    <cell>", "    \n    text = re.sub(' +', '_', text)\n    \n    if len(text) > 2:\n\
    \        \n        text = re.sub(' +', '_', text)\n        \n        if text ==\
    \ ' Example':\n            return ' Example'\n        elif text == ' Example 1':\n\
    \            return ' Example_1'\n        elif text == ' Example 2':\n       \
    \     return ' _Example_2'\n        elif text == ' Example 3':\n            return\
    \ ' _Example-3'\n        else:\n            return text\n    else:\n        return\
    \ text\n", "    return re.sub('\\s+', '_', text).strip('-')\n", "    if len(text)\
    \ < 2:\n        return text\n    \n    i = 0\n    while i < len(text) - 1:\n \
    \       if text[i] == ' ':\n            if i + 1 < len(text):\n              \
    \  if text[i + 1] == ' ':\n                    text = (text[:i] + text[i + 2:])\n\
    \                    i += 2\n                else:\n                    text =\
    \ (text[:i] + text[i + 1:])\n                    i += 1\n            else:\n \
    \               text = (text[:i] + text[i + 1:])\n                i += 1\n   \
    \     else:\n            i += 1\n            \n    return text\n", "    return\
    \ re.sub(' \\w*', ' ', text)\n\n", "    # split text into words by splitting on\
    \ non-alphabetic chars\n    words = re.findall(r'[^A-Za-z]+', text)\n    # join\
    \ all words together\n    text = ' '.join(words)\n    # replace all spaces with\
    \ -\n    text = re.sub(r'\\s+', '-', text)\n    # make all characters lowercase\n\
    \    text = text.lower()\n    # return text\n    return text\n    \n", "    return\
    \ (re.sub('[ ]{2,}', '-', text).strip('-')).replace('-', '_')\n\n", "    return\
    \ re.sub(r'\\s+', lambda match: '_' if len(match.group(0)) >= 2 else ' ', text).strip()\n",
  "    \n    text = text.replace(' ', '_')\n    text = re.sub(r'\\s{2,}', '-', text)\n\
    \    return text\n\n", "    text = re.sub(r'\\s+', '_', text)\n    if text.count('\
    \ ') > 1:\n        text = re.sub(' +', ' ', text)\n    return text\n\n", "   \
    \ return re.sub('\\s+', '_', text)\n\n", "    return re.sub(r'\\s+', '_', text)\n\
    \n", "    text = re.sub('\\s+', '-', text)\n    text = re.sub('[-]+', '-', text)\n\
    \    return text\n\n", "    return text.replace(' ', '_').replace(\" +\", \"_\"\
    ).replace('  ', ' -')\n\n", "    return re.sub('[\\s]+', '_', text)\n\n", "  \
    \  return re.sub('\\s{1,}', '-', text)\n\n", "    # Replace all spaces\n    text\
    \ = text.replace(' ', '_')\n    # If the text has more than 2 consecutive spaces\
    \ \n    # then replace all consecutive spaces with -\n    consecutive_spaces =\
    \ text.count(' ') + 1\n    if consecutive_spaces > 1:\n        while consecutive_spaces\
    \ > 1:\n            text = text.replace(' ', '-')\n            consecutive_spaces\
    \ = text.count(' ') + 1\n    return text\n\n", "    # First remove all spaces\n\
    \    text = re.sub(' +', '_', text)\n    # Then replace multiple spaces with a\
    \ single one\n    text = re.sub('  +', '-', text)\n    return text\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
