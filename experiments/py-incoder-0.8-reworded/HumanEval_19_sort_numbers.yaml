name: HumanEval_19_sort_numbers
language: py
prompt: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
  \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
  \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
  \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
  \ one five')\n    'one three five'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
  \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n   \
  \ assert candidate('five zero four seven nine eight') == 'zero four five seven eight\
  \ nine'\n    assert candidate('six five four three two one zero') == 'zero one two\
  \ three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
completions: ["    return ' '.join(sorted(numbers))\n\n", "    numbers = numbers.split()\n\
    \    numbers = sorted(numbers)\n    return ' '.join(numbers)\n\n", "    if numbers.replace('\
    \ ', '') == 'zero one two three four five six seven eight nine':\n        return\
    \ 'zero one two three four five six seven eight nine'\n    else:\n        return\
    \ sorted(numbers)\n\n", "    numbers = numbers.strip().split()\n    if len(numbers)\
    \ == 0:\n        return ''\n    else:\n        numbers.sort()\n        return\
    \ ' '.join(numbers)\n\n", "    # Split the string into parts\n    parts = numbers.split()\n\
    \n    # Convert the parts to ints\n    numbers_as_ints = [int(n) for n in parts]\n\
    \n    # Sort the numbers\n    numbers_as_ints.sort()\n\n    # Put them back together,\
    \ separated by spaces\n    numbers_as_strings = ['zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_as_strings = '\
    \ '.join([str(n) for n in numbers_as_ints])\n\n    # Return the results\n    return\
    \ numbers_as_strings\n\n", "    return ' '.join(sorted(numbers))\n", "    numbers_list\
    \ = [int(s) for s in numbers.split() if s.isdigit()]\n    numbers.replace(\" \"\
    , \"\")\n    return \" \".join(str(x) for x in sorted(numbers_list, key=int, reverse=True))\n\
    \n", "    nums = sorted([x for x in numbers.split() if x.isdigit()])\n    return\
    \ ' '.join(nums)\n", "    # Your code here\n    return ' '.join(sorted(numbers.split()))\n\
    \n", "    numbers_as_str = numbers.split()\n    sorted_numbers = []\n    for number\
    \ in numbers_as_str:\n        if number in ['zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine']:\n            sorted_numbers.append(number)\n\
    \        else:\n            raise ValueError(f'{number} is not a valid number\
    \ choice')\n    return \" \".join(sorted_numbers)\n\n", "    return ' '.join(sorted(numbers.split()))\n",
  "    numbers = numbers.replace(' ','')\n    numbers = numbers.replace('  ',' ')\n\
    \    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('  ','\
    \ ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')\n    numbers = numbers.replace('\
    \  ',' ')\n    numbers = numbers.replace('  ',' ')", "    # sort integers\n  \
    \  numbers = numbers.replace(' ', '')\n    numbers = numbers.replace('\\n', '\
    \ ').replace(',', ' ')\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    result = ''\n    for n in numbers:\n        result += n + ' '\n    return\
    \ result\n", "    numbers = [str(i) for i in range(0, 10)]\n    numbers = list(filter(None,\
    \ numbers.split()))\n    numbers.sort()\n    numbers = ' '.join(numbers)\n   \
    \ return numbers\n\n", "    parts = numbers.split(\" \")\n    numbers.strip()\n\
    \    \n    numbers_sorted = []\n    \n    for part in parts:\n        try:\n \
    \           if part.isnumeric() and len(part) <= 2:\n                num = int(part)\n\
    \                numbers_sorted.append(num)\n        except:\n            pass\n\
    \n    return \" \".join(map(str,numbers_sorted))\n", "    words = numbers.split()\n\
    \    numbers = []\n    for word in words:\n        if word == 'one' or word ==\
    \ 'two' or word == 'three' or word == 'four' or word == 'five' or word == 'six'\
    \ or word == 'seven' or word == 'eight' or word == 'nine':\n            numbers.append(word)\n\
    \    return \" \".join(sorted(numbers))\n</cell>\n<text>\nNow let's try it with\
    \ some sample inputs:\n\n\n</text>\n<cell>\nsample_inputs = ['four',\n       \
    \          'nine',\n                 'six nine',\n                 'seven eight',\n\
    \                 'three two',\n                 'one five',\n               \
    \  'seven',\n                 'eight five',\n                 'one nine',\n  \
    \               'seven five']\nfor sample in sample_inputs:\n    print(sort_numbers(sample))\n\
    </cell>\n<text>\nExercise 5\nWrite a function that sorts the words in a given\
    \ string.\nThe input is a string containing space-separated words.\nThe output\
    \ is a string containing space-separated words sorted in alphabetical order.\n\
    Example: \"one two three\" becomes \"one three two\"\n>>> sort_words('one two\
    \ three')\n'one three two'\n\"\"\"\n", "    numbers = numbers.split()\n    return\
    \ \" \".join(sorted(numbers))\n\n", "    words = numbers.split(' ')\n    sorted_words\
    \ = [word for word in words if word != '']\n    return ' '.join(sorted(sorted_words))\n\
    \n", "    # Sort them in decreasing order\n    numbers.split(' ') \n    numbers.sort(reverse=True)\
    \ \n    return ' '.join(numbers)\n", "    numbers = numbers.split()\n    return\
    \ ' '.join(sorted(numbers))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
