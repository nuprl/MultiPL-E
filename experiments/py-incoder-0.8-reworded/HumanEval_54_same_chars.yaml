name: HumanEval_54_same_chars
language: py
prompt: "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words\
  \ have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
  \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
  \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>>\
  \ same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\
  \ == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc',\
  \ 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert\
  \ candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\
  \ == False\n    assert candidate('aabb', 'aaccc') == False\n\ndef test_check():\n\
  \    check(same_chars)\n\ntest_check()\n"
completions: ["    if s1 == s0 or s1 == s0.replace('z', ''):\n        return True\n\
    \    else:\n        return False\n\n", "    s1 = s1 + ''\n    s0 = s0 + ''\n \
    \   return not s1 or not s0\n\n", "    \n    return Counter(s0) == Counter(s1)\n\
    \n", "    return set(s0) == set(s1)\n\n", "    if s0 and s1 and len(s0) == len(s1):\n\
    \        for c0, c1 in zip(s0, s1):\n            if c0 != c1:\n              \
    \  return False\n        return True\n    return False\n\n", "    if len(s0) ==\
    \ len(s1):\n        return ''.join(s0.lower()) == ''.join(s1.lower())\n    else:\n\
    \        return False\n\n", "    len0, len1 = len(s0), len(s1)\n    if len0 >\
    \ len1:\n        s0, s1 = s1, s0\n    for p in range(len(s0)):\n        if s0[p]\
    \ != s1[p]:\n            return False\n    return True\n\n", "    return len(s0)\
    \ == len(s1) or len(s0) == len(s2) and len(s1) == len(s2)\n\n", "    return all(s0[i]\
    \ == s1[i] for i in range(len(s0)))\n\n", "    return len(s0) == len(s1) and all(s0[i]\
    \ == s1[i] for i in range(len(s0)))\n\n", "    return all(s0[i] == s1[i] for i\
    \ in range(len(s0)))\n\n", "    s0, s1 = s0.lower(), s1.lower()\n    diffs = difflib.ndiff(s0,\
    \ s1)\n    return len(diffs) == 0\n\n", "    return all(c1 == c2 for c1, c2 in\
    \ zip(s0, s1))\n\n", "    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0)\
    \ > len(s1):\n        s1, s0 = s0, s1\n    return s0 == s1\n\n", "    if len(s0)\
    \ != len(s1):\n        return False\n    else:\n        set_s0 = set(s0)\n   \
    \     set_s1 = set(s1)\n        for char in s0:\n            if char not in set_s1:\n\
    \                return False\n        for char in s1:\n            if char not\
    \ in set_s0:\n                return False\n        return True\n\n", "    return\
    \ Counter(s0) == Counter(s1)\n\n", "    return set(s0) == set(s1)\n\n", "    len_s0\
    \ = len(s0)\n    len_s1 = len(s1)\n    i = 0\n    while i < len_s0:\n        if\
    \ s0[i] != s1[i]:\n            return False\n        i += 1\n    return len_s0\
    \ == len_s1\n\n", "    if len(s0) != len(s1):\n        return False\n    letters\
    \ = list(s0)\n    for ch in s1:\n        if ch not in letters:\n            return\
    \ False\n        letters.remove(ch)\n    return True\n\n", "    s0 = s0.lower()\n\
    \    s1 = s1.lower()\n    l = len(s0)\n    if l != len(s1):\n        return False\n\
    \    else:\n        for i in s0:\n            if i not in s1:\n              \
    \  return False\n        return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
