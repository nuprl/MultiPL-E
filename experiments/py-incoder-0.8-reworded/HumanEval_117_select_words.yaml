name: HumanEval_117_select_words
language: py
prompt: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
  \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
  \ \n    a function that returns a list of all words from string s that contain exactly\
  \ \n    n consonants, in order these words appear in the string s.\n    If the string\
  \ s is empty then the function should return an empty list.\n    Note: you may assume\
  \ the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary\
  \ had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little\
  \ lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n\
  \    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
  \ sam', 3)\n    ['Uncle']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
  \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
  \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
  \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n \
  \   assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b',\
  \ 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
completions: ["    #TODO: Write your code here\n    return []\n", "    \n    # Your\
    \ code here\n    if len(s) == 0:\n        return []\n    \n    \n    words = s.split()\n\
    \    \n    \n    return words\n", '    ', "    \n    \n    return []\n", "   \
    \ \n    if not s:\n        return []\n\n    words = []\n    \n    left_count=0\n\
    \    right_count=0 \n\n    while(left_count<n or right_count<n):\n\n        left_index=s.index('\
    \ ',left_count)\n\n        if left_index==-1:\n            left_index=s.index('\
    \ ',left_count+1)\n\n        left_count+=1\n\n        right_index=s.index(' ',left_index)\n\
    \n        if right_index==-1:\n            right_index=len(s)\n\n        right_count+=1\n\
    \n        if right_index<left_index:\n            break\n\n        words.append(s[left_index:right_index].strip())\n\
    \n    return words\n\n", "    # BEGIN Question 3\n    s = s.lower()\n    if s\
    \ == \"\":\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    vowels = 'aeiouy'\n    i = 0\n    words_with_n_consonants = []\n    while\
    \ i < len(words):\n        if words[i] in consonants and words[i].count(consonants[n])\
    \ >= n:\n            words_with_n_consonants.append(words[i])\n        i += 1\n\
    \    return words_with_n_consonants\n", "    vowels = 'aeiou'\n    \n    s_list\
    \ = s.split()\n    \n    # return an empty list if there are no words in the string\n\
    \    if len(s_list) == 0:\n        return []\n\n    # define helper function to\
    \ test if string contains n vowels\n    def contain_n(word):\n        return all([c\
    \ in vowels for c in word])\n    \n    # return empty list if n is not positive\
    \ integer\n    if not n > 0:\n        return []\n\n    # return empty list if\
    \ n is zero\n    if n == 0:\n        return s_list\n\n    # initialize a list\
    \ to hold our results\n    results = []\n\n    # populate our results list with\
    \ words that contains exactly n vowels\n    for i in range(len(s_list)):\n   \
    \     if contain_n(s_list[i]):\n            results.append(s_list[i])\n      \
    \      \n    return results\n", "    \n    if s != '':\n        result = []\n\
    \        for i in range(len(s)):\n            if s.count('consonant') >= n:\n\
    \                result.append(s[:i].lower())\n            else:\n           \
    \     break\n    return result\n", "    \n    # BEGIN Practice:\n    \n    # END\
    \ Practice\n    return []\n    ", "    pass\n    \n", "    words = s.split(' ')\n\
    \    count = 0\n    for i in range(len(words)):\n        if 'a' in words[i] or\
    \ 'e' in words[i] or 'i' in words[i] or 'o' in words[i] or 'u' in words[i]:\n\
    \            count += 1\n        else:\n            break\n    if count >= n:\n\
    \        return [i for i in words if len(i) == n]\n    else:\n        return []\n\
    </cell>\n<text>\nTask 2: Write a function called select_words_with_count that\
    \ implements the function\ndescribed above. Try your function on the string 'Mary\
    \ had a little lamb'. The expected\noutput should be ['little', 'lamb'].\n\nNote:\
    \ You may assume that n is always positive.\n\n</text>\n<cell>", "    pass\n",
  "    if n < 1:\n        return []\n    return list(filter(lambda x: len(x) == n,\
    \ s.split()))\n", "    return []\n", "    pass\n", "    vowels = \"AEIOUaeiou\"\
    \n    vowel_count = Counter(vowels)\n    word_list = []\n    if s:\n        for\
    \ i, char in enumerate(s):\n            letter_count = vowel_count[char]\n   \
    \         if letter_count == n:\n                word_list.append(s[i:])\n   \
    \ return word_list\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIf you can't use RegEx,\
    \ you can use itertools:\n<code>\nfrom itertools import takewhile\n", "    # BEGIN\
    \ Practice: Write your code below. Don't forget to wrap your code in an appropriate\
    \ def\n    return []\n    # END Practice\n    \n    \n    ", "    # TODO Implement\n\
    \    lst = []\n    if len(s) == 0:\n        return lst\n\n    word = s.split()\n\
    \    for w in word:\n        if countConsonants(w) == n:\n            lst.append(w)\n\
    \    return lst\n\n", "    pass\n", "    \n    return []\n    "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
