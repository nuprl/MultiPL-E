name: HumanEval_80_is_happy
language: py
prompt: "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your\
  \ task is to check if the string is happy or not.\n    A string is happy if its\
  \ length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
  \    >>> is_happy(a)\n    False\n    >>> is_happy(aa)\n    False\n    >>> is_happy(abcd)\n\
  \    True\n    >>> is_happy(aabb)\n    False\n    >>> is_happy(adb)\n    True\n\
  \    >>> is_happy(xyy)\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa')\
  \ == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') ==\
  \ False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n\
  \    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\
  \ndef test_check():\n    check(is_happy)\n\ntest_check()\n"
completions: ["    if len(s) < 3:\n        return False\n    if len(set(s)) != len(s):\n\
    \        return False\n    return True\n\n", "    if len(s) >= 3 and len(set(s))\
    \ == len(s):\n        for index, letter in enumerate(s):\n            if letter\
    \ == s[index + 1]:\n                if s[index + 2] != letter:\n             \
    \       return False\n        return True\n    return False\n\n", "    if len(s)\
    \ < 3:\n        return False\n\n    return all(len(set(s[i:i+3])) == 3 for i in\
    \ range(len(s) - 1))\n\n", "    if len(s) < 3:\n        return False\n    ss =\
    \ s.split()\n    if len(ss) > len(set(ss)):\n        return True\n    return False\n\
    \n", "    if len(s) < 3:\n        return False\n    seen = {}\n    for letter\
    \ in s:\n        if letter not in seen:\n            seen[letter] = True\n   \
    \     else:\n            return False\n    return True\n\n", "    # Your code\
    \ here\n    return len(s) >= 3 and len(list(dict.fromkeys(s))) == 3\n</cell>\n\
    <cell>", "    # your solution here\n    if len(s) < 3:\n        return False\n\
    \    flag = True\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i +\
    \ 1] == s[i + 2]:\n            continue\n        else:\n            flag = False\n\
    \            break\n    return flag\n\n", "    if len(s) >= 3:\n        if all(len(x)\
    \ == 3 or x != s[i:i + 3] for x in set(s)):\n            return True\n    return\
    \ False\n\n", "    if len(s) < 3:\n        return False\n\n    if sorted(list(s))\
    \ == list(s):\n        return True\n\n    return False\n\n", "    if len(s) <\
    \ 3:\n        return False\n    \n    chars = [s[i:i+3] for i in range(0, len(s),\
    \ 3)]\n    \n    return len(chars) == len(set(chars))\n</cell>\n<text>\nThe above\
    \ function is_happy checks if a string s is happy or not. Let's test it:\n\n\n\
    </text>\n<cell>\nprint(is_happy('abc'))\nprint(is_happy('abcd'))\nprint(is_happy('abcde'))\n\
    print(is_happy('aa'))\nprint(is_happy('aaa'))\n</cell>\n<text>\nThe above is correct.\
    \ So, we have to implement the function is_happy to check if a string s is happy\
    \ or not using the above logic.\n\n\n</text>\n<cell>", "    return len(s) >= 3\
    \ and len(set(s)) == len(s)\n\n", "    return len(s) >= 3 and all(x == y for x,\
    \ y in zip(s, s[1:]))\n\n", "    if len(s) >= 3:\n        for i in range(3):\n\
    \            if s[i] == s[i + 1] == s[i + 2]:\n                continue\n    \
    \        else:\n                return False\n        return True\n    else:\n\
    \        return False\n\n", "    return len(s) >= 3 and len(set(s)) == len(s)\n\
    \n", "    return len(s) >= 3 and len(set(s[i : i + 3] for i in range(len(s) -\
    \ 1))) == 3\n\n", "    if len(s) < 3:\n        return False\n\n    # Create a\
    \ dictionary to store the frequency of every 3 consecutive letters in s\n    frequencies\
    \ = {}\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1]:\n     \
    \       frequencies[s[i]]+=1\n        else:\n            frequencies[s[i]]=1\n\
    \n    return all(3 <= count <= 4 for count in frequencies.values())\n\n", "  \
    \  s = s.strip()\n    return len(s) >= 3 and all(_isUniqueLetters(s[i:i+3]) for\
    \ i in range(len(s) - 2))\n\n", "    return len(s) >= 3 and sum(1 for l in s if\
    \ l != s[-1 - l]) == 3\n\n", "    s = s.lower()\n    if len(s) < 3:\n        return\
    \ True\n\n    letters = re.findall(\"[a-z]\", s)\n    return len(letters) == 3\
    \ and all(letter != letters[0] for letter in letters)\n\n", "    return len(s)\
    \ >= 3 and is_distinct(s[-3:]) and is_distinct(s[:-3]) and is_distinct(s[3:])\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
