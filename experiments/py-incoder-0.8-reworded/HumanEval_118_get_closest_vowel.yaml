name: HumanEval_118_get_closest_vowel
language: py
prompt: "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word.\
  \ Your task is to find the closest vowel that stands between \n    two consonants\
  \ from the right side of the word (case sensitive).\n    \n    Vowels in the beginning\
  \ and ending doesn't count. Return empty string if you didn't\n    find any vowel\
  \ met the above condition. \n\n    You may assume that the given string contains\
  \ English letter only.\n\n    Example:\n    >>> get_closest_vowel('yogurt')\n  \
  \  'u'\n    >>> get_closest_vowel('FULL')\n    'U'\n    >>> get_closest_vowel('quick')\n\
  \    ''\n    >>> get_closest_vowel('ab')\n    ''\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('yogurt') == 'u'\n    assert candidate('full')\
  \ == 'u'\n    assert candidate('easy') == ''\n    assert candidate('eAsy') == ''\n\
  \    assert candidate('ali') == ''\n    assert candidate('bad') == 'a'\n    assert\
  \ candidate('most') == 'o'\n    assert candidate('ab') == ''\n    assert candidate('ba')\
  \ == ''\n    assert candidate('quick') == ''\n    assert candidate('anime') == 'i'\n\
  \    assert candidate('Asia') == ''\n    assert candidate('Above') == 'o'\n\ndef\
  \ test_check():\n    check(get_closest_vowel)\n\ntest_check()\n"
completions: ["    vowels = 'AEIOUaeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \n    vowel_found = False\n    for i in range(len(word)):\n        if word[i]\
    \ in vowels:\n            vowel_found = True\n            break\n    if vowel_found\
    \ is False:\n        return ''\n\n    consonant_found = False\n    for i in range(len(word)):\n\
    \        if word[i] in consonants:\n            consonant_found = True\n     \
    \       break\n    if consonant_found is False:\n        return ''\n\n    vowel_pos\
    \ = [i for i in range(len(word)) if word[i] in vowels]\n    if len(vowel_pos)\
    \ == 0:\n        return ''\n    vowel_pos = min(vowel_pos)\n    consonant_pos\
    \ = [i for i in range(len(word)) if word[i] in consonants]\n    if len(consonant_pos)\
    \ == 0:\n        return ''\n    consonant_pos = max(consonant_pos)\n    \n   \
    \ if vowel_pos == 0 and consonant_pos > 0:\n        return word[consonant_pos\
    \ - 1]\n    if vowel_pos == 0 and consonant_pos < 0:\n        return word[consonant_pos\
    \ + 1]\n    if vowel_pos < consonant_pos:\n        return word[vowel_pos + 1]\n\
    \    else:\n        return word[vowel_pos - 1]\n", "    vowels = ('a', 'e', 'i',\
    \ 'o', 'u')\n    vowel_positions = get_vowel_positions(word)\n    if len(vowel_positions)\
    \ <= 1:\n        return ''\n    vowel_positions = sorted(vowel_positions, key=lambda\
    \ x: len(x), reverse=True)\n    return vowels[vowel_positions[0]]\n\n", "    vowels\
    \ = set('aeiouAEIOU')\n    vowels.difference_update(set('AEIOU'))\n    vowels.difference_update(set('aeiou'))\n\
    \    vowels.difference_update(set('Aeiou'))\n    vowels.difference_update(set('A'))\n\
    \    \n    left_side, right_side = word[::-1], word\n    \n    for v in vowels:\n\
    \        if v in right_side:\n            return v\n        \n        if v in\
    \ left_side:\n            return v\n\n    return ''\n\n", "    vowel = 'a'\n \
    \   word = word.lower()\n    vowel_positions = []\n\n    # check all possible\
    \ positions\n    for i in range(0, len(word)):\n        if word[i] in vowel:\n\
    \            # if the current position is in the list, append the position\n \
    \           vowel_positions.append(i)\n\n    if len(vowel_positions) > 0:\n  \
    \      min_dist = min(vowel_positions)\n        # get all vowel positions before\
    \ the minimum distance to the right\n        prev_vowels = vowel_positions[vowel_positions.index(min_dist):]\n\
    \        if len(prev_vowels) > 0:\n            # select the most distant vowel\n\
    \            prev_vowel = min(prev_vowels)\n            # find the most distant\
    \ vowel before the current vowel\n            closest_vowel = word[vowel_positions.index(min_dist):][:vowel_positions.index(prev_vowel)]\n\
    \            return closest_vowel\n\n    return ''\n\n", "    return ''\n", " \
    \   vowels = ['a','e','i','o','u']\n    \n    if not word.isalpha():\n       \
    \ return ''\n    \n    if len(word) <= 2:\n        return ''\n    \n    first\
    \ = word[-1]\n    \n    if first not in vowels:\n        return ''\n    \n   \
    \ first = word[-2]\n    \n    if first not in vowels:\n        return ''\n   \
    \ \n    return word[-1]\n</cell>\n<cell>", "    if len(word) < 1:\n        return\
    \ ''\n    elif word[-1] not in string.ascii_lowercase or word[-1] not in string.ascii_uppercase:\n\
    \        return ''\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n  \
    \      vowel_pos = -1\n        for i,c in enumerate(reversed(word)):\n       \
    \     if c in string.ascii_lowercase or c in string.ascii_uppercase:\n       \
    \         vowel_pos = -i\n                break\n        if vowel_pos == -1:\n\
    \            return ''\n        else: \n            vowel_pos += len(word)\n \
    \           if vowel_pos == 0:\n                vowel_pos = 1\n            else:\n\
    \                vowel_pos -= 1\n            return vowels[vowel_pos]\n\n", " \
    \   vowels = ['a', 'e', 'i', 'o', 'u']\n    letters = list(word)\n    \n    if\
    \ len(word) < 3: return ''\n    \n    vowel_indexes = [i for i, letter in enumerate(letters)\
    \ if letter in vowels]\n    if vowel_indexes:\n        most_vowel_index = vowel_indexes[0]\n\
    \        if len(vowel_indexes) > 1:\n            for index in vowel_indexes[1:]:\n\
    \                if abs(index - most_vowel_index) > len(vowels) / 2:\n       \
    \             most_vowel_index = index\n        else:\n            most_vowel_index\
    \ = vowel_indexes[0]\n        \n        if letters[most_vowel_index] == letters[-1]:\n\
    \            return letters[most_vowel_index]\n        \n        # check the next\
    \ letter after the most vowel if there are\n        most_vowel_index += 1\n  \
    \      while most_vowel_index < len(letters) and letters[most_vowel_index] ==\
    \ letters[-1]:\n            most_vowel_index += 1\n        \n        if most_vowel_index\
    \ == len(letters):\n            return ''\n        return letters[most_vowel_index]\n\
    \    \n    else:\n        if len(letters) == 2:\n            return letters[1]\n\
    \    \n        return ''\n\n", "    return \"\"\n\n", "    vowels_pattern = re.compile(r\"\
    [aeiouy]\")\n\n    if vowels_pattern.search(word):\n        vowel_before = vowels_pattern.search(word).span()[0]\n\
    \        vowel_after = vowels_pattern.search(word).span()[1]\n\n        if vowel_before\
    \ != 0 and vowel_before < len(word) - 1 and word[vowel_before - 1].isupper():\n\
    \            vowel_before = vowel_before - 1\n        if vowel_after != len(word)\
    \ - 1 and vowel_after < len(word) and word[vowel_after].isupper():\n         \
    \   vowel_after = vowel_after + 1\n        closest_vowel = word[vowel_after: vowel_before]\n\
    \        return closest_vowel\n    else:\n        return \"\"\n", "    \n    vowel\
    \ = ['a','e','i','o','u']\n\n    if len(word) == 0 or len(word) == 1:\n      \
    \  return \"\"\n\n    for i in range(len(word)):\n        if word[i] in vowel:\n\
    \            if word[i] in vowel[::-1]:\n                return word[i]\n\n  \
    \  return \"\"\n</cell>\n<cell>", "    vowel_mapping = {'a': 'u', 'v': 'u', 'e':\
    \ 'i', 'i': 'i', 'o': 'o', 'y': 'a', 's': 'a', 'r': 'a', 'd': 'a', 'g': 'a', 'b':\
    \ 'a', 't': 'a'}\n    if len(word) == 0:\n        return \"\"\n    char_list =\
    \ [c for c in word[::-1]]\n    start = char_list.index('a') + 1\n    end = char_list.index('a')\
    \ + 2\n    vowel = word[start:end]\n    return vowel_mapping[vowel]\n\n", "  \
    \  # Solution goes here\n    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    word\
    \ = word.lower()\n    i = 0\n    while i < len(word) - 1:\n        if word[i]\
    \ in vowel_list:\n            break\n        i += 1\n    else:\n        return\
    \ ''\n    j = len(word) - 1\n    while j >= 0 and word[j] in vowel_list:\n   \
    \     j -= 1\n    return word[i:j + 1]\n\n", "    # TODO\n    pass\n\n", "   \
    \ vowels = list(\n        filter(\n            lambda c: c in vowel_dict and not\
    \ c == word[-1],\n            word[::-1]\n        )\n    )\n    if not vowels:\n\
    \        return ''\n    else:\n        return vowels[-1]\n\n", "    vowels = ['A',\
    \ 'E', 'I', 'O', 'U']\n    word = word.lower()\n    vowel_ends = [i for i, letter\
    \ in enumerate(word) if letter in vowels]\n    \n    vowel_ends.sort()\n    vowel_ends.reverse()\n\
    \    \n    if vowel_ends[0] > len(word) - 1 or vowel_ends[-1] < len(word) - 1:\n\
    \        return ''\n    elif (vowel_ends[0] == 0 and vowel_ends[-1] == len(word)\
    \ - 1):\n        return word[vowel_ends[0]]\n    else:\n        closest_vowel_start\
    \ = min(vowel_ends)\n        closest_vowel_end = max(vowel_ends)\n        if closest_vowel_start\
    \ == closest_vowel_end:\n            return word[closest_vowel_start]\n      \
    \  elif (closest_vowel_end - closest_vowel_start == 1):\n            return word[closest_vowel_end]\n\
    \        else:\n            return ''\n\n", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U']\n\n    right_side = get_right_side(word)\n   \
    \ vowels_count = len(vowels)\n    vowel_index = 0\n\n    while vowel_index < vowels_count:\n\
    \        vowel_letter = vowels[vowel_index]\n        if right_side.endswith(vowel_letter):\n\
    \            vowel_index = vowel_index + 1\n        else:\n            return\
    \ vowel_letter\n    return ''\n\n", "    vowels = 'aeiouAEIOU'\n    letters =\
    \ [word[::-1][i] for i in vowels.find('aeiouAEIOU') + 1:len(word)]\n    return\
    \ min(letters, key=lambda x: vowels.find(x))\n\n", "    # Your code here\n   \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n\
    \    word = word.lower()\n    for i, x in enumerate(word):\n        if x in consonants:\n\
    \            if vowels.index(x) < vowels.index(word[i:]):\n                return\
    \ x\n            elif vowels.index(x) > vowels.index(word[i:]):\n            \
    \    return word[i:]\n            else:\n                return ''\n    return\
    \ ''\n\n", "    word = ''.join(i if i.islower() else i.upper() for i in word)\n\
    \    word_length = len(word)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    if\
    \ word_length <= 3:\n        return '' if len(set(word) & set(vowels)) == 0 else\
    \ ''\n    if word_length == 4:\n        if word[0] == 'a' and word[-1] == 'z':\n\
    \            return 'a'\n        if word[0] == 'e' and word[-1] == 'z':\n    \
    \        return 'e'\n        if word[0] == 'i' and word[-1] == 'z':\n        \
    \    return 'i'\n        if word[0] == 'o' and word[-1] == 'z':\n            return\
    \ 'o'\n        if word[0] == 'u' and word[-1] == 'z':\n            return 'u'\n\
    \    if word_length == 5:\n        if word[0] == 'a' and word[-1] == 'z':\n  \
    \          return 'a'\n        if word[0] == 'e' and word[-1] == 'z':\n      \
    \      return 'e'\n        if word[0] == 'i' and word[-1] == 'z':\n          \
    \  return 'i'\n        if word[0] == 'o' and word[-1] == 'z':\n            return\
    \ 'o'\n        if word[0] == 'u' and word[-1] == 'z':\n            return 'u'\n\
    \        if word[1] == 'a' and word[-1] == 'z':\n            return 'a'\n    \
    \    if word[1] == 'e' and word[-1] == 'z':\n            return 'e'\n        if\
    \ word[1] == 'i' and word[-1] == 'z':\n            return 'i'\n        if word[1]\
    \ == 'o' and word[-1] == 'z':\n            return 'o'\n        if word[1] == 'u'\
    \ and word[-1] == 'z':\n            return 'u'\n        if word[2] == 'a' and\
    \ word[-1] == 'z':\n            return 'a'\n        if word[2] == 'e' and word[-1]\
    \ == 'z':\n            return 'e'\n        if word[2] == 'i' and word[-1] == 'z':\n\
    \            return 'i'\n        if word[2] == 'o' and word[-1] == 'z':\n    \
    \        return 'o'\n        if word[2] == 'u' and word[-1] == 'z':\n        \
    \    return 'u'\n    return '' if word_length <= 6 else ''\n\n", "    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    for index, char in enumerate(word[::-1]):\n \
    \       if char in vowels:\n            if index == 0:\n                return\
    \ char\n            elif index == len(word) - 1:\n                return char\n\
    \            else:\n                return char\n    return ''\n", "    vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n    \n    if word.endswith('x'):\n        return\
    \ ''\n    \n    if len(word) <= 1:\n        return ''\n    \n    if word[-1] not\
    \ in vowels:\n        return ''\n    \n    \n    word = word.upper()\n    \n \
    \   vowel_met_before = False\n    vowel_met_after = False\n    \n    for idx,\
    \ vowel in enumerate(vowels):\n        if idx == 0:\n            if word[0] in\
    \ vowels:\n                vowel_met_before = True\n        else:\n          \
    \  if word[idx-1] in vowels:\n                vowel_met_before = True\n    \n\
    \    for idx, vowel in enumerate(vowels):\n        if idx == len(word)-1:\n  \
    \          if word[idx] in vowels:\n                vowel_met_after = True\n \
    \       else:\n            if word[idx+1] in vowels:\n                vowel_met_after\
    \ = True\n    \n    if vowel_met_before and vowel_met_after:\n        return word[-1]\n\
    \    elif vowel_met_before:\n        return word[0]\n    elif vowel_met_after:\n\
    \        return word[-1]\n    \n    return ''\n", "    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    vowel_positions = {\n        \"a\": 0,\n        \"\
    e\": 1,\n        \"i\": 2,\n        \"o\": 3,\n        \"u\": 4\n    }\n\n   \
    \ vowel_counter = 0\n    vowel_position = 0\n    for letter in word:\n       \
    \ vowel_counter += 1 if letter in vowels else 0\n\n        if vowel_position !=\
    \ 0 and vowel_counter > vowel_positions[vowels[vowel_position]]:\n           \
    \ vowel_position = vowel_positions[vowels[vowel_counter]]\n        else:\n   \
    \         vowel_counter = 0\n            vowel_position += 1\n\n    return \"\"\
    \ if vowel_counter == 0 else vowels[vowel_position]\n", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    word = word.lower()\n\n    vowel_start = word[-1:-len(vowels)]\n\
    \    vowel_end = word[-2:len(word)]\n\n    for vowel in vowels:\n        if vowel\
    \ in vowel_start and vowel in vowel_end:\n            return vowel\n    return\
    \ \"\"\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels = vowels + vowels[::-1]\n\
    \    for vowel in vowels:\n        if word[-1] == vowel:\n            return vowel\n\
    \    return ''\n", "    word = word.lower()\n    vowels = \"aeiouy\"\n    consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    vowel_count = word.count(vowels)\n    consonant_count\
    \ = word.count(consonants)\n    if vowel_count > consonant_count:\n        vowel_start\
    \ = word.rfind(vowels)\n        return word[vowel_start:]\n    elif consonant_count\
    \ > vowel_count:\n        consonant_start = word.rfind(consonants)\n        return\
    \ word[:consonant_start]\n    else:\n        return \"\"\n</cell>\n<text>\nUnit\
    \ Test\n\n</text>\n<cell>\n%%writefile src/test1.py\nfrom nose.tools import assert_equal,\
    \ assert_not_equal\nfrom helper import get_closest_vowel\n    ", "    if len(word)\
    \ < 2:\n        return ''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n  \
    \  for i, letter in enumerate(reversed(word)):\n        if letter in vowels:\n\
    \            if i < (len(word) - 1):\n                if letter == word[i+1]:\n\
    \                    return letter\n                else:\n                  \
    \  return ''\n            else: # i == (len(word) - 1):\n                return\
    \ letter\n    return ''\n\n", "    vowels = [\"a\", \"A\", \"e\", \"E\", \"i\"\
    , \"I\", \"o\", \"O\", \"u\", \"U\"]\n    vowels = [w.lower() for w in vowels]\n\
    \    \n    vowel_right = 0\n    vowel_left = len(word)\n    \n    while vowel_left\
    \ > 0 and vowel_right < len(word):\n        if vowels[vowel_left] in word[vowel_right:vowel_left\
    \ + 1]:\n            return vowels[vowel_left]\n        \n        vowel_left -=\
    \ 1\n        vowel_right += 1\n    \n    return \"\"\n", "    vowels = set('aeiouAEIOU')\n\
    \    return word[::-1][-1:] in vowels\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    vowels_left = vowels[:]\n    vowels_left.reverse()\n    vowels_right = vowels[:]\n\
    \    vowels_right.reverse()\n\n    vowel_dist = defaultdict(int)\n\n    for vow\
    \ in vowels_left:\n        if vow in word and vow in vowels_right:\n         \
    \   vowel_dist[vow] += 1\n\n    closest_vowel = ''\n    closest_vowel_dist = 0\n\
    \n    for vowel, dist in vowel_dist.items():\n        if dist < closest_vowel_dist:\n\
    \            closest_vowel = vowel\n            closest_vowel_dist = dist\n\n\
    \    return closest_vowel\n\n", "    vowels = 'AEIOUY'\n    \n    for v in vowels:\n\
    \        if word.endswith(v):\n            return v\n        \n    for v in vowels[::-1]:\n\
    \        if word.endswith(v):\n            return v\n\n    return \"\"\n    \n\
    </cell>\n<cell>", "    \n    # use list() to create list of consonants instead\
    \ of string\n    consonants_list = list(word)\n    vowels_consonants_list = list(string.ascii_lowercase)\n\
    \    \n    \n    for i in range(len(consonants_list) - 1):\n        \n       \
    \ if consonants_list[i] in vowels_consonants_list:\n            # check if consonant\
    \ is in the end of word\n            if consonants_list[i+1] in vowels_consonants_list:\n\
    \                return consonants_list[i]\n        \n    \n    \n        \n \
    \   \n        \n\n</cell>\n<cell>", "    vowels = \"aeiouAEIOU\"\n    count =\
    \ 0\n    \n    if len(word) < 2: \n        return ''\n    \n    while count <\
    \ len(word) - 1:\n        if word[count].lower() in vowels:\n            count\
    \ += 1\n        else:\n            count += 2\n            \n    return word[count].lower()\n",
  "    vowels = ['a', 'A', 'E', 'I', 'O', 'U']\n    vowel_set = set(vowels)\n    right_vowel_index\
    \ = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i : i + 1]\
    \ in vowel_set:\n            right_vowel_index = i\n            break\n    if\
    \ right_vowel_index >= 0:\n        return word[right_vowel_index + 1]\n    return\
    \ ''\n\n", "    if not word or len(word) < 4:\n        return ''\n\n    vowels\
    \ = {'a': ['a', 'A'], 'e': ['e'], 'i': ['i', 'I', 'o', 'O', 'u', 'U']}\n    vowel_counter\
    \ = {}\n\n    for vowel in vowels:\n        if vowel in word:\n            vowel_counter[vowel]\
    \ = vowel_counter.get(vowel, 0) + 1\n\n    max_count = 0\n    candidate = ''\n\
    \    for vowel in vowels:\n        if vowel_counter[vowel] > max_count:\n    \
    \        max_count = vowel_counter[vowel]\n            candidate = vowel\n\n \
    \   return candidate\n", "    if len(word) < 2:\n        return ''\n    \n   \
    \ vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # get\
    \ the index of first vowel\n    index = -1\n    for index, char in enumerate(word[::-1]):\n\
    \        if char in vowels:\n            break\n    \n    # if index found, then\
    \ we found the closest vowel\n    if index != -1:\n        return word[index+1:][::-1]\n\
    \    else:\n        return ''\n    \n", "    # Write your code here\n    vowels\
    \ = ['a','e','i','o','u','y','A','E','I','O','U','Y']\n    \n    if word[0] in\
    \ vowels and word[-1] in vowels:\n        return word[0]\n    elif word[0] in\
    \ vowels and word[-1] not in vowels:\n        return word[-1]\n    elif word[0]\
    \ not in vowels and word[-1] in vowels:\n        return word[-1]\n    elif word[0]\
    \ not in vowels and word[-1] not in vowels:\n        return word[0]\n    else:\n\
    \        return \"\"\n", "    vowels = ('a','e','i','o','u')\n    vowels = list(vowels)\n\
    \    vowels_len = len(vowels)\n    \n    for index, char in enumerate(word[::-1]):\n\
    \        \n        if (char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u'):\n            \n            closest_index = index\n        \
    \    if index + 1 < vowels_len:\n                if word[index+1] not in vowels:\n\
    \                    closest_index = index + 1\n            else:\n          \
    \      if word[index-1] not in vowels:\n                    closest_index = index\
    \ - 1\n            \n            return vowels[closest_index]\n    \n    return\
    \ ''\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n\
    </cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nThe 'break' statement\n\n</text>\n<text>\nThe break statement\
    \ is one of the most frequently used control flow statements in Python. It is\
    \ used to exit the loop once a condition is met.\n\n\n</text>\n<cell>\n\"\"\"\n\
    Write a program to find the sum of two given integers and display the sum when\
    \ they are equal.\n\"\"\"\n\nnum1 = int(input(\"Enter a number: \"))\nnum2 = int(input(\"\
    Enter another number: \"))\n", "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U']\n    count = 0\n    for i in range(len(word)):\n        if word[i]\
    \ in vowels:\n            count +=1\n    if count == 0:\n        return ''\n \
    \   if count == len(word):\n        return 'U'\n    if count == len(word)-1:\n\
    \        return 'O'\n    if count == len(word)-2:\n        return 'E'\n    if\
    \ count == len(word)-3:\n        return 'A'\n    if count == len(word)-4:\n  \
    \      return 'I'\n    if count == len(word)-5:\n        return 'H'\n    if count\
    \ == len(word)-6:\n        return 'F'\n    if count == len(word)-7:\n        return\
    \ 'V'\n    if count == len(word)-8:\n        return 'D'\n    if count == len(word)-9:\n\
    \        return 'L'\n    if count == len(word)-10:\n        return 'T'\n    if\
    \ count == len(word)-11:\n        return 'K'\n    if count == len(word)-12:\n\
    \        return 'R'\n    if count == len(word)-13:\n        return 'B'\n    if\
    \ count == len(word)-14:\n        return 'G'\n    if count == len(word)-15:\n\
    \        return 'Z'\n    if count == len(word)-16:\n        return 'J'\n    if\
    \ count == len(word)-17:\n        return 'X'\n    if count == len(word)-18:\n\
    \        return 'S'\n    if count == len(word)-19:\n        return 'P'\n    if\
    \ count == len(word)-20:\n        return 'N'\n    if count == len(word)-21:\n\
    \        return 'M'\n    if count == len(word)-22:\n        return 'C'\n    if\
    \ count == len(word)-23:\n        return 'P'\n    if count == len(word)-24:\n\
    \        return 'S'\n    if count == len(word)-25:\n        return 'V'\n    if\
    \ count == len(word)-26:\n        return 'K'\n    if count == len(word)-27:\n\
    \        return 'Q'\n    if count == len(word)-28:\n        return 'R'\n    if\
    \ count == len(word)-29:\n        return 'M'\n    if count == len(word)-30:\n\
    \        return 'Y'\n    if count == len(word)-31:\n        return 'H'\n    if\
    \ count == len(word)-32:\n        return 'F'\n    if count == len(word)-33:\n\
    \        return 'T'\n    if count == len(word)-34:\n        return 'D'\n    if\
    \ count == len(word)-35:\n        return 'L'\n    if count == len(word)-36:\n\
    \        return 'T'\n    if count == len(word)-37:\n        return 'N'\n    if\
    \ count == len(word)-38:\n        return 'B'\n    if count == len(word)-39:\n\
    \        return 'P'\n    if count == len(word)-40:\n        return 'S'\n    if\
    \ count == len(word)-41:", "    pass\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<cell>\nget_closest_vowel('FULL')\n</cell>\n<cell>\nget_closest_vowel('quick')\n\
    </cell>\n<cell>\nget_closest_vowel('ab')\n</cell>\n<text>\nWrite a Python program\
    \ to find the first missing positive integer in a given range. \nThe first missing\
    \ positive integer is given by \n\nThe formula is \nSum all the numbers from 1\
    \ to n excluding 1 n. \nThe smallest missing positive integer is given by \nSum\
    \ of the missing numbers + 1. \nNote that if the given range doesn't contain any\
    \ positive number then there is no first missing \npositive integer.\n\nExample\
    \ 1:\nInput: [1,5]\nOutput: 4\nExplanation: \nThe missing positive integer is\
    \ 4 and it is between 1 and 5.\n\nExample 2:\nInput: [1,3]\nOutput: 2\nExplanation:\
    \ \nThe missing positive integer is 2 and it is between 1 and 3.\n\n\n</text>\n\
    <cell>", "    vowels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',\
    \ 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\
    \n    pos = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n\
    \            pos = i\n            break\n\n    if pos < len(word) - 1:\n     \
    \   if word[pos + 1] in vowels:\n            return word[pos + 1]\n        else:\n\
    \            return word[pos]\n\n    else:\n        return ''\n\n", "    word\
    \ = word.lower()\n    vowels = 'aeiouAEIOU'\n    vowels = [x for x in vowels]\n\
    \    vowels_right = [x for x in vowels[::-1]]\n    \n    return vowels[vowels.index(word)].lower()\
    \ if word in vowels \\\n        and word in vowels_right else \"\"\n", "    vowels\
    \ = [k for k,v in enumerate(word) if v == 'A' or v == 'E' or v == 'I' or v ==\
    \ 'O' or v == 'U']\n    if vowels:\n        return vowels[0]\n    return ''\n",
  "    vowels = {\n        'U':'u',\n        'e':'e',\n        'i':'i',\n        'o':'o',\n\
    \        'a':'a'\n    }\n    vowel_str = vowels.get(word[-1], '')\n    if vowel_str\
    \ == word[-1]:\n        return vowel_str\n    if word[-1] == 'a':\n        return\
    \ word[-1]\n    if word[-1] == 'e':\n        return word[-1]\n    if word[-1]\
    \ == 'i':\n        return word[-1]\n    if word[-1] == 'o':\n        return word[-1]\n\
    \    if word[-1] == 'u':\n        return word[-1]\n", "    vowels = set('aeiouy')\n\
    \    word = word.lower()\n\n    if len(word) == 0:\n        return ''\n    if\
    \ len(word) == 1:\n        return word[0]\n\n    for i in range(len(word)):\n\
    \        if word[i-1] in vowels and word[i] in vowels:\n            return word[i]\n\
    \n    return ''\n", "    \n    vowels = 'AEIOUaeiou'\n    letters = sorted(list(word))\n\
    \    index = letters.index(letters[len(letters) - 1])\n    return vowels[index]\
    \ if index in [i for i in range(len(vowels)) if letters[len(letters) - 1 - i]\
    \ == letters[index]] else ''\n</cell>\n<cell>", "    vowels = ['a','e','i','o','u']\n\
    \    word = list(word)[::-1]\n    \n    for letter in word:\n        if letter\
    \ in vowels:\n            break\n    \n    index = vowels.index(letter) + 1\n\
    \    \n    if letter in vowels[index:]:\n        return letter\n    else:\n  \
    \      return ''\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U']\n    \n    vowel_candidates = deque([\n        word[::-1],\n     \
    \   word[::-1] + vowels[::-1],\n        word[::-1] + vowels[::-1].upper()\n  \
    \  ])\n    \n    for candidate in vowel_candidates:\n        if candidate.upper()\
    \ in vowels and word.isupper():\n            return candidate.upper()\n      \
    \  \n        if candidate.lower() in vowels and word.islower():\n            return\
    \ candidate.lower()\n    \n    return ''\n\n", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    length = len(word)\n    vowel_met = False\n    for i in range(length\
    \ - 1):\n        if word[i] in vowels:\n            vowel_met = True\n       \
    \     break\n    word = word[::-1]\n    for i in range(length):\n        if word[i]\
    \ in vowels:\n            break\n    if vowel_met == True:\n        return word[i]\n\
    \    else:\n        return ''\n\n", "    # Write your code here\n    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    \n    count = 0\n    for idx, ch in enumerate(word):\n\
    \        if idx == 0 or idx == len(word) - 1:\n            pass\n        else:\n\
    \            if ch in vowels:\n                if idx > 0 and word[idx - 1] ==\
    \ 'a':\n                    count += 1\n                if idx < len(word) - 1\
    \ and word[idx + 1] == 'a':\n                    count += 1\n    if count == 0:\n\
    \        return ''\n    else:\n        return word[count - 1]\n\n", "    if not\
    \ word:\n        return \"\"\n\n    vowels = {\n        'a': 'u',\n        'e':\
    \ 'u',\n        'i': 'u',\n        'o': 'u',\n        'u': 'u',\n        'y':\
    \ 'u',\n    }\n    prev_consonant = None\n    length = len(word)\n    for i in\
    \ range(length - 1):\n        char = word[i]\n        if char.isalpha():\n   \
    \         next_char = word[i + 1]\n            if next_char.isalpha():\n     \
    \           if vowels.get(next_char):\n                    prev_consonant = char\n\
    \                    break\n                elif char != prev_consonant:\n   \
    \                 prev_consonant = None\n                    break\n    return\
    \ vowels.get(prev_consonant) if prev_consonant else \"\"\n\n", "    vowel_list\
    \ = ['A', 'E', 'I', 'O', 'U']\n    vowel_length = len(vowel_list)\n    if word[0]\
    \ in vowel_list and word[-1] in vowel_list:\n        vowel = word[0]\n    elif\
    \ word[-1] in vowel_list and word[-2] in vowel_list:\n        vowel = word[-1]\n\
    \    elif word[-2] in vowel_list and word[-1] in vowel_list:\n        vowel =\
    \ word[-2]\n    else:\n        vowel = ''\n\n    return vowel\n\n", "    vowels\
    \ = set('aeiouAEIOU')\n    vowel_locations = [i for i, letter in enumerate(word)\
    \ if letter in vowels]\n    vowel_locations.append(len(word))\n    vowel_locations.sort()\n\
    \    \n    return word[vowel_locations[-1]]\n", "    if len(word) < 2:\n     \
    \   return \"\"\n    if word[0].isalpha() and word[1].isalpha():\n        word\
    \ = word.lower()\n        left_cond = [True for ch in word]\n        left_cond.insert(1,\
    \ True)\n        left_cond.insert(0, True)\n        right_cond = [True for ch\
    \ in word]\n        right_cond.pop()\n        right_cond.pop()\n        right_cond.append(True)\n\
    \        right_cond.reverse()\n        result = []\n        for idx, ch in enumerate(word):\n\
    \            if idx == len(word) - 1 or ch == word[idx+1] or ch == word[idx-1]:\n\
    \                result.append(ch)\n            if idx == len(word) - 2:\n   \
    \             if ch == word[idx+1]:\n                    result.append('u')\n\
    \                if ch == word[idx-1]:\n                    result.append('U')\n\
    \        return ''.join(result)\n    return \"\"\n\n", "    word = word.lower()\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    positions = []\n    vowel_position\
    \ = []\n    \n    for i,letter in enumerate(word):\n        if letter not in vowels:\n\
    \            positions.append(i)\n    \n    if len(positions) < 2:\n        return\
    \ ''\n    \n    for i,position in enumerate(positions):\n        if position >\
    \ len(word) - 1:\n            break\n        if position + 1 < len(word):\n  \
    \          if word[position+1] in vowels:\n                vowel_position.append(position\
    \ + 1)\n                \n    if len(vowel_position) != 2:\n        return ''\n\
    \    \n    min_distance = float('inf')\n    min_vowel_position = [0, 0]\n    for\
    \ i,position in enumerate(vowel_position):\n        distance = abs(position -\
    \ vowel_position[i]) \n        if distance < min_distance:\n            min_distance\
    \ = distance\n            min_vowel_position = vowel_position[i]\n    \n    return\
    \ word[min_vowel_position]\n        \n</cell>\n<cell>", "    vowels = ['A', 'AE',\
    \ 'I', 'OU', 'U']\n    \n    if not word:\n        return ''\n    \n    vowel_dict\
    \ = {}\n    for v in vowels:\n        vowel_dict[v] = word.find(v) #get the index\
    \ of the first vowel\n    \n    vowel_positions = vowel_dict.keys() #get a list\
    \ of the keys of the dict\n    vowel_positions = sorted(vowel_positions) #sort\
    \ them\n    \n    if vowel_positions[-1] < len(word) - 1: #check if the list is\
    \ too long and \n        return ''\n    \n    for i in range(len(vowel_positions)\
    \ - 1):\n        if vowel_positions[i] < vowel_positions[i + 1]: #if they share\
    \ a position\n            return vowels[vowel_positions[i]]\n    return '' #return\
    \ empty string if all positions are equal\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<cell>\nget_closest_vowel('ABAB')\n</cell>\n<cell>\nget_closest_vowel('quick')\n\
    </cell>\n<cell>\nget_closest_vowel('ABABAB')\n</cell>\n<cell>\nget_closest_vowel('ABAB')\n\
    </cell>\n<text>\nChallenge\nWrite a program to find the closest vowel in the given\
    \ string.\n\n\n</text>\n<text>\nSolution\nWithout using any additional package,\
    \ you can use string slicing method to get the right most character (not necessarily\
    \ the last character) of the word and check the vowel exists or not.\n\n\n</text>\n\
    <cell>", "    \n    if not len(word):\n        return ''\n    \n    vowels = ['a',\
    \ 'o', 'u']\n    vowels_set = set(vowels)\n\n    right_side = word[::-1]\n\n \
    \   consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    consonants_set = set(consonants)\n\
    \n    vowel_exists = right_side in vowels_set and right_side in consonants_set\n\
    \    consonant_exists = right_side in consonants_set and right_side in vowels_set\n\
    \    \n    if vowel_exists or consonant_exists:\n        return right_side\n \
    \   \n    return ''\n\n", "    \n    if not word or not word.isalpha():\n    \
    \    return ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n\
    \    \n    for index in range(len(word)-1, -1, -1):\n        char = word[index]\n\
    \        if char in vowels:\n            return char\n    return ''\n\n</cell>\n\
    <cell>", "    \n    vowels = ['a','e','i','o','u']\n    \n    vowel_candidates\
    \ = []\n    \n    for char in word[::-1]:\n        if char in vowels:\n      \
    \      vowel_candidates.append(char)\n            \n    if len(vowel_candidates)\
    \ == 0:\n        return ''\n    \n    if len(vowel_candidates) > 1:\n        candidate\
    \ = vowel_candidates[vowel_candidates.index(vowel_candidates[0])+1]\n    else:\n\
    \        candidate = vowel_candidates[0]\n        \n    return candidate\n", " \
    \   # TODO: Write your code\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set\
    \ = set(vowels)\n    word_list = list(word)\n    for index, letter in enumerate(word_list):\n\
    \        if letter in vowels_set:\n            vowel_index = index\n         \
    \   break\n    if vowel_index == len(word_list)-1:\n        return ''\n    left_index\
    \ = len(word_list)-1\n    right_index = len(word_list)-1\n    left_vowel = word_list[left_index-1]\n\
    \    right_vowel = word_list[right_index+1]\n    vowel_difference = abs(len(left_vowel)\
    \ - len(right_vowel))\n    if vowel_difference > 0:\n        if left_vowel ==\
    \ right_vowel:\n            return left_vowel\n    else:\n        if left_vowel\
    \ == right_vowel:\n            return right_vowel\n    while vowel_difference\
    \ > 0:\n        left_index -= 1\n        left_vowel = word_list[left_index-1]\n\
    \        vowel_difference = abs(len(left_vowel) - len(right_vowel))\n    if vowel_difference\
    \ > 0:\n        if left_vowel == right_vowel:\n            return left_vowel\n\
    \    else:\n        if left_vowel == right_vowel:\n            return right_vowel\n\
    \    while vowel_difference < 0:\n        right_index += 1\n        right_vowel\
    \ = word_list[right_index+1]\n        vowel_difference = abs(len(left_vowel) -\
    \ len(right_vowel))\n    if vowel_difference > 0:\n        if left_vowel == right_vowel:\n\
    \            return left_vowel\n    else:\n        if left_vowel == right_vowel:\n\
    \            return right_vowel\n    return ''\n", "    vowels = ('a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    vowels_set = {vowels}\n    vowels_set.add(vowels.upper())\n\
    \    vowels_set.add(vowels.lower())\n    vowels_set.add(vowels.title())\n    vowels_set.add(vowels.swapcase())\n\
    \    if any(word == i.lower() or word == i.upper() for i in vowels_set):\n   \
    \     return word[0]\n    vowels_set.add(''.join((word.lower(), word.upper())))\n\
    \    if any(word == i.lower() or word == i.upper() for i in vowels_set):\n   \
    \     return word[0]\n    if word[0] in vowels and word[-1] in vowels:\n     \
    \   return ''\n    if word[0] in vowels:\n        return word[0]\n    if word[-1]\
    \ in vowels:\n        return word[-1]\n    return ''\n\n", "    vowels = {\n \
    \       'A': 'A',\n        'a': 'a',\n        'E': 'E',\n        'e': 'e',\n \
    \       'I': 'I',\n        'i': 'i',\n        'O': 'O',\n        'o': 'o',\n \
    \       'U': 'U',\n        'u': 'u'\n    }\n\n    for letter in word:\n      \
    \  if letter.upper() in vowels:\n            return letter.upper()\n\n    return\
    \ \"\"\n", "    vowels = set('aeiou')\n    length = len(word)\n    if length ==\
    \ 1:\n        return ''\n    count = 0\n    vowel_count = 0\n    for i in range(len(word)):\n\
    \        if word[i] in vowels:\n            vowel_count += 1\n        if word[i]\
    \ == vowels[-1]:\n            count += 1\n            if vowel_count >= count:\n\
    \                return word[i]\n\n    return ''\n</cell>\n<cell>", "    if not\
    \ word:\n        return ''\n    \n    vowels = set('AEIOU')\n    \n    if len(word)\
    \ > 2:\n        for index, letter in enumerate(word[::-1]):\n            if letter\
    \ not in vowels:\n                break\n        else:\n            return ''\n\
    \    return word[index + 1 :]\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<cell>\nget_closest_vowel('FULL')\n</cell>\n<cell>\nget_closest_vowel('quick')\n\
    </cell>\n<cell>\nget_closest_vowel('ab')\n</cell>\n<text>\nProblem 3\n\n</text>\n\
    <cell>", "    word = list(word)\n    vowels = ['a', 'A', 'e','E', 'i','I', 'o',\
    \ 'O', 'u','U']\n    vowels_len = len(vowels)\n    vowels_count = [0] * len(vowels)\n\
    \    vowels_count[0] = len(word) - 1 \n    vowels_count[-1] = len(word)\n    for\
    \ index, vowel in enumerate(word):\n        if vowel in vowels:\n            vowels_count[index]\
    \ += 1\n    for i in range(vowels_len - 1, -1, -1):\n        if vowels_count[i]\
    \ == 0:\n            return \"\"\n        elif vowels_count[i] < vowels_count[i-1]:\n\
    \            return vowels[i]\n        elif vowels_count[i] > vowels_count[i-1]:\n\
    \            return vowels[i-1]\n    return \"\"\n", "    if len(word) <= 2:\n\
    \        return ''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index\
    \ = [i for i in range(len(word) - 2, -1, -1)]\n    \n    for vo in vowels:\n \
    \       if vo in vowel_index:\n            break\n    else:\n        return ''\n\
    \    \n    vowel_index.remove(vo)\n    vowel_index.remove(vo)\n    \n    return\
    \ word[vo]\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n\
    </cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nWrite a Python program to find the next character in a string\
    \ that is \na consonant. \nA consonant is defined as a character from the category\
    \ \u201C[Ll]etters except [Mm]ostums\u201D.\n\nExample: \nInput: Hello \nOutput:\
    \ E\n\nExplanation: The next character after the L from the left is E, which is\
    \ an English letter.\n\n\n</text>\n<cell>", "    return \"\"\n</cell>\n<cell>\n\
    get_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n</cell>\n\
    <cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nProblem 3\n\n</text>\n<cell>", "    vowel_positions = [\n   \
    \     i for i, letter in enumerate(word[::-1]) if letter in VOWELS or letter in\
    \ _CONSONANTS \n    ]\n    if len(vowel_positions) == 0:\n        return ''\n\
    \    \n    return word[vowel_positions[-1] + 1]\n\n", "    word = word.lower()\n\
    \    if word[0] in vowels:\n        return word[0]\n    if word[-1] in vowels:\n\
    \        return word[-1]\n    vowel_list = []\n    for i in range(len(word) -\
    \ 1):\n        if word[i] in vowels and word[i+1] in vowels:\n            vowel_list.append(word[i])\n\
    \    if len(vowel_list) == 0:\n        return ''\n    return min(vowel_list)\n\
    \nassert get_closest_vowel('yogurt') == 'u'\nassert get_closest_vowel('FULL')\
    \ == 'U'\nassert get_closest_vowel('quick') == ''\nassert get_closest_vowel('ab')\
    \ == ''\n</cell>\n<cell>", "    return ''\n\n</cell>\n<cell>", "    return word[::-1].translate({ord(c):\
    \ None for c in string.ascii_letters}).translate({ord(c): None for c in string.ascii_uppercase}).translate({ord(c):\
    \ None for c in string.ascii_lowercase}).translate({ord(c): None for c in string.ascii_symbols}).translate({ord(c):\
    \ None for c in string.digits}).upper()\n", "    vowels = [x for x in \"AEIOUaeiou\"\
    ]\n    word_length = len(word)\n    if word_length < 2:\n        return \"\"\n\
    \    word = list(word)\n    word.sort()\n    if word[0] == word[-1]:\n       \
    \ return \"\"\n    vowel_index = 0\n    while vowel_index < word_length - 1:\n\
    \        if word[vowel_index + 1] in vowels:\n            vowel_index += 1\n \
    \       else:\n            if word[vowel_index] == word[vowel_index + 1]:\n  \
    \              vowel_index += 1\n            else:\n                break\n  \
    \  else:\n        return \"\"\n    while vowel_index >= 0 and word[vowel_index]\
    \ == word[vowel_index - 1]:\n        vowel_index -= 1\n    word.reverse()\n  \
    \  if word[word_length - 1] in vowels:\n        vowel_index -= 1\n    else:\n\
    \        if word[word_length - 1] == word[word_length - 2]:\n            vowel_index\
    \ -= 1\n        else:\n            break\n    vowel = word[vowel_index]\n    return\
    \ vowel\n\n", "    # your code here\n    if len(word) == 0 or len(word) == 1:\n\
    \        return ''\n    vowel = 'AEIOUaeiou'\n    vowel_index = word.index(vowel)\n\
    \    count = 0\n    for i in range(len(word) - 1, -1, -1):\n        if word[i]\
    \ == vowel:\n            count += 1\n            if count == 2:\n            \
    \    return vowel\n        elif word[i] == vowel[::-1]:\n            count +=\
    \ 1\n            if count == 2:\n                return vowel[::-1]\n    return\
    \ ''\n\n", "    if word.isalpha():\n        return '' if word.lower() not in 'aeiouAEIOU'\
    \ else word[0].upper()\n    else:\n        return ''\n\n", "    vowels = 'aeiou'\n\
    \    length = len(word)\n\n    vowel_candidates = []\n    vowel_candidates.append('')\n\
    \    vowel_candidates.append(word[0])\n    vowel_candidates.append(word[-1])\n\
    \    vowel_candidates += [word[i] for i in range(length) if word[i] in vowels]\n\
    \    \n    \n    candidate_lengths = [len(candidate) for candidate in vowel_candidates]\n\
    \n    if min(candidate_lengths) < 2:\n        return ''\n    else:\n        return\
    \ max(vowel_candidates, key = lambda x: candidate_lengths.index(x) )\n    ", " \
    \   vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', 'y']\n    word\
    \ = word.lower()\n    words = word.split()\n    vowel_counter = 0\n    for i in\
    \ range(len(words)):\n        if words[i] in vowels:\n            vowel_counter\
    \ = vowel_counter + 1\n        if i < len(words) - 1 and words[i+1] in vowels:\n\
    \            vowel_counter = vowel_counter + 1\n    if vowel_counter == 2:\n \
    \       return words[-1]\n    elif vowel_counter == 1:\n        return words[len(words)\
    \ - 1]\n    else:\n        return ''\n\n", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    \n    if not word:\n        return ''\n    \n    prev_consonant =\
    \ word[0]\n    \n    prev_vowel = ''\n    \n    if len(word) >= 2:\n        prev_consonant\
    \ = word[1]\n        \n    \n    for consonant in word[2:]:\n        if consonant\
    \ in vowels:\n            if prev_vowel:\n                return prev_vowel\n\
    \            \n            return consonant\n        \n        prev_vowel = prev_consonant\n\
    \        prev_consonant = consonant\n        \n    return ''\n    \n</cell>\n\
    <text>\nLet's test our functions:\n\n\n</text>\n<cell>\nfor word in ['yogurt',\
    \ 'FULL', 'quick', 'ab']:\n    print('{!r:<20}\\t{}'.format(word, get_closest_vowel(word)))\n\
    </cell>\n<text>\nNext Problem\nGiven a string, find the position of the n-th highest\
    \ element in the given string.\nA very common interview question, and one that\
    \ has received some very good solutions, is a question related to search algorithms.\n\
    \nYou are given a string, for example \"apple\". Your task is to find its n'th\
    \ highest element in the given string. In the above example, its 1st highest element\
    \ is \"a\" and its 2nd highest element is \"p\". \nThe input string may contain\
    \ duplicates. For example, if the given string is \"appleapple\", then both the\
    \ 1st and 2nd highest elements are \"apple\".\n\nThe output is the position of\
    \ that element in the given string. \nIf there are multiple elements with the\
    \ same value, then choose the one that is nearest to the given string.\n\nIf your\
    \ question has been asked before, then please refer to the Stack Overflow question\
    \ below. If not, then please read our FAQ for more details. \n\nFAQ link:\n\n\n\
    </text>\n<text>\nSolution\n\n</text>\n<text>\nSolution 1 :\n\n</text>\n<cell>",
  "    pass\n\n", "    vowels = set('aeiou')\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n\
    \    \n    if not word:\n        return ''\n    \n    vowel_found = False\n  \
    \  \n    for vowel in vowels:\n        if word.endswith(vowel):\n            vowel_found\
    \ = True\n            break\n    \n    if vowel_found:\n        word = word[len(vowel):]\n\
    \    \n    vowel_found = False\n    \n    for consonant in consonants:\n     \
    \   if word.endswith(consonant):\n            vowel_found = True\n           \
    \ break\n    \n    if vowel_found:\n        word = word[:-len(consonant)]\n  \
    \  \n    return word\n\n", "    pass\n\n", "    if not is_valid_word(word):\n\
    \        return ''\n    vowels = 'aeiou'\n    vowel_index = word.rfind(vowels)\n\
    \    if vowel_index < 0 or not vowels[vowel_index + 1].isalpha():\n        return\
    \ ''\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    consonant_index = word.rfind(consonants)\n\
    \    consonant_index += 1\n    if consonant_index >= len(word) or not consonants[consonant_index].isalpha():\n\
    \        return ''\n    left_consonant_index = vowel_index + len(vowels)\n   \
    \ right_consonant_index = len(word) - len(word.replace(vowels, '', 1))\n    left_consonant\
    \ = word[left_consonant_index : right_consonant_index]\n    right_consonant =\
    \ word[right_consonant_index : len(word)]\n    if left_consonant != right_consonant:\n\
    \        return ''\n    return word[vowel_index + len(vowels) : len(word)]\n\n",
  "    vowels = ('a','e','i','o','u')\n    word = word.lower()\n    vowel_word = ''\n\
    \n    for letter in word[::-1]:\n        if letter.lower() in vowels:\n      \
    \      vowel_word += letter\n    return vowel_word\n    \n", "    vowels = {'a',\
    \ 'e', 'o', 'i', 'u'}\n    vowels_set = set(vowels)\n    \n    right_vowel = vowels_set.difference(word[:-1])\n\
    \    left_vowel = vowels_set.difference(word[1:])\n    \n    if right_vowel:\n\
    \        vowel_found = None\n        \n        for v in right_vowel:\n       \
    \     if v in vowels_set:\n                vowel_found = v\n                break\n\
    \            \n        if not vowel_found:\n            vowel_found = min(right_vowel)\n\
    \            \n        return vowel_found\n    \n    if left_vowel:\n        vowel_found\
    \ = None\n        \n        for v in left_vowel:\n            if v in vowels_set:\n\
    \                vowel_found = v\n                break\n            \n      \
    \  if not vowel_found:\n            vowel_found = min(left_vowel)\n          \
    \  \n        return vowel_found\n    \n    return ''\n\n", "    # TODO: implement\
    \ function\n    if len(word) == 1:\n        return ''\n    \n    vowel_candidate\
    \ = [c for c in word if c in \"aeiouAEIOU\"]\n    if len(vowel_candidate) == 0:\n\
    \        return ''\n    \n    vowel_candidate.sort(key=lambda x:(x == word[-1]\
    \ and 1 or -1))\n    if vowel_candidate[1] == 'A' or vowel_candidate[1] == 'E':\n\
    \        return vowel_candidate[1]\n    if vowel_candidate[1] == 'U':\n      \
    \  return vowel_candidate[1]\n    \n    if vowel_candidate[-1] == 'A' or vowel_candidate[-1]\
    \ == 'E':\n        return vowel_candidate[-1]\n    if vowel_candidate[-1] == 'U':\n\
    \        return vowel_candidate[-1]\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    if len(word) < 2: return ''\n\
    \    \n    if len(word) == 1: return word[0]\n    \n    if len(word) == 2 and\
    \ word[0] == word[1]: return word[0]\n    \n    lastLetterIndex = -1\n    \n \
    \   firstLetterIndex = -1\n    lastLetter = word[-1]\n    \n    for i in range(len(word)-1,\
    \ 0, -1):\n        if word[i] == lastLetter:\n            firstLetterIndex = i\n\
    \            lastLetterIndex = i\n        \n        elif word[i] == lastLetter\
    \ and word[i-1] != lastLetter: \n            lastLetterIndex = i\n        \n \
    \       else: \n            break\n    \n    return word[firstLetterIndex:lastLetterIndex+1].lower()\
    \ if firstLetterIndex != -1 else ''\n", "    vowels = list('aeiouAEIOU')\n   \
    \ for c in word[::-1]:\n        if c in vowels:\n            return c\n    return\
    \ ''\n", "    word = list(word)\n    vowel_count = 0\n    prev_vowel = None\n\
    \    curr_vowel = None\n    \n    # find the first vowel\n    for i, v in enumerate(word):\n\
    \        if v == 'a' or v == 'e' or v == 'i' or v == 'o' or v == 'u':\n      \
    \      prev_vowel = word[i - 1]\n            curr_vowel = v\n            vowel_count\
    \ += 1\n    # find the last vowel\n    for i, v in enumerate(reversed(word)):\n\
    \        if v == 'a' or v == 'e' or v == 'i' or v == 'o' or v == 'u':\n      \
    \      prev_vowel = word[i + 1]\n            curr_vowel = v\n            vowel_count\
    \ += 1\n    \n    # get the vowel after last vowel\n    for i, v in enumerate(reversed(word)):\n\
    \        if v != curr_vowel:\n            if vowel_count > 1:\n              \
    \  if prev_vowel == curr_vowel:\n                    return prev_vowel\n     \
    \           else:\n                    return ''\n            else:\n        \
    \        return prev_vowel\n        else:\n            vowel_count -= 1\n    \n\
    \    return ''\n\n", "    vowels = ['A', 'a', 'O', 'o', 'I', 'i', 'U', 'u']\n\n\
    \    letter_index = -1\n    for letter in word[::-1]:\n        if letter in vowels:\n\
    \            letter_index += 1\n            if letter_index == 0:\n          \
    \      return letter\n            elif letter_index == len(word) - 1:\n      \
    \          return letter\n\n    return ''\n\n", "    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    right_index = len(word) - 1\n    left_index = 0\n\n    vowel_found\
    \ = False\n    while left_index <= right_index and not vowel_found:\n        if\
    \ right_index - left_index == 1:\n            if word[left_index] == 'a' or word[left_index]\
    \ == 'e' or word[left_index] == 'i' or word[left_index] == 'o':\n            \
    \    vowel_found = True\n            else:\n                left_index -= 1\n\
    \        else:\n            if word[right_index] == 'a' or word[right_index] ==\
    \ 'e' or word[right_index] == 'i' or word[right_index] == 'o':\n             \
    \   vowel_found = True\n            else:\n                right_index -= 1\n\
    \    return ''\n", "    vowels = 'AEIOUYaeiouy'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\
    \    consonants = consonants.upper()\n    vowels = vowels.upper()\n    vowels\
    \ = vowels.replace('U','U')\n    \n    words = word.upper()\n    words = [c for\
    \ c in words if c in vowels]\n    \n    words = [c for c in words if c in consonants]\n\
    \    \n    word = words[::-1]\n    \n    if len(word) < 2:\n        return ''\n\
    \    \n    start = word[:-1]\n    end = word[1:]\n    \n    start = list(start).index(vowels[::-1].index(start))\n\
    \    end = list(end).index(vowels[::-1].index(end))\n    \n    return word[start+1:end]\n",
  "    vowels = \"aeiouAEIOU\"\n    cons_len = len(word)\n    count = 0\n    i = 0\n\
    \    while i < cons_len:\n        if word[i] in vowels:\n            count +=\
    \ 1\n            if count == 2:\n                return word[i]\n        i +=\
    \ 1\n    return \"\"\n\n", "    vowels_right_side = ['a','e','i','o','u']\n  \
    \  vowels_left_side = ['A','E','I','O','U']\n    consonants_right_side = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \    consonants_left_side = ['B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z']\n\
    \n    right_side_vowel_index = get_vowel_index(word, vowels_right_side)\n    left_side_vowel_index\
    \ = get_vowel_index(word, vowels_left_side)\n    right_side_consonant_index =\
    \ get_consonant_index(word, consonants_right_side)\n    left_side_consonant_index\
    \ = get_consonant_index(word, consonants_left_side)\n    \n    closest_vowel_index\
    \ = 0\n    if right_side_vowel_index < left_side_vowel_index:\n        closest_vowel_index\
    \ = right_side_vowel_index\n    elif right_side_vowel_index > left_side_vowel_index:\n\
    \        closest_vowel_index = left_side_vowel_index\n    elif right_side_consonant_index\
    \ < left_side_consonant_index:\n        closest_vowel_index = right_side_consonant_index\n\
    \    elif right_side_consonant_index > left_side_consonant_index:\n        closest_vowel_index\
    \ = left_side_consonant_index\n    \n    if closest_vowel_index == 0:\n      \
    \  return ''\n    return word[closest_vowel_index-1]\n", "    return ''.join(\n\
    \        [\n            letter\n            for letter in word if not letter.isalpha()\n\
    \        ][::-1]\n    ).lower()\n\nassert get_closest_vowel('yogurt') == 'u'\n\
    assert get_closest_vowel('FULL') == 'U'\nassert get_closest_vowel('quick') ==\
    \ ''\nassert get_closest_vowel('ab') == ''\n</cell>\n<cell>", "    \n    vowels\
    \ = ('a','e','i','o','u')\n    vowel_found = False\n    word_len = len(word)\n\
    \    \n    for i in range(word_len):\n        if vowel_found and i < word_len\
    \ - 1:\n            if word[i] in vowels:\n                vowel_found = True\n\
    \        else:\n            if word[i] in vowels:\n                vowel_found\
    \ = True\n            else:\n                vowel_found = False\n           \
    \     \n    if vowel_found:\n        return word[i]\n    else:\n        return\
    \ ''\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(word)-1):\n\
    \        if word[i:i+2] in vowels:\n            return word[i:i+2]\n         \
    \   \n    return ''\n", "    # Your code here\n    word = word.lower()\n    vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n    \n    for vowel in vowels:\n        if vowel\
    \ in word:\n            index = word.index(vowel)\n            \n            if\
    \ len(word) > index:\n                next_index = index + 1\n               \
    \ \n                if next_index >= len(word):\n                    return ''\n\
    \n                if next_index < len(word) and word[next_index] == vowel:\n \
    \                   return vowel\n\n    return ''\n", "    vowels = ['a','e','i','o','u']\n\
    \    vowel_word = \"\"\n    for i in word[::-1]:\n        if i in vowels:\n  \
    \          vowel_word = i\n            break\n        else:\n            vowel_word\
    \ += i\n    return vowel_word\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI came up\
    \ with the following code:\n<code>\nimport string\nvowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n", "    \n    if not word:\n        return ''\n    \n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    \n    candidates = []\n    for v in vowels:\n     \
    \   if word.rfind(v) > -1:\n            candidates.append(v)\n            \n \
    \   return candidates[0]\n\n", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    v = ''\n    \n    if word[0].islower() and word[-1].islower():\n      \
    \  left_word = word[:-1]\n        right_word = word[1:]\n    elif word[0].isupper()\
    \ and word[-1].isupper():\n        left_word = word[:-1]\n        right_word =\
    \ word[1:]\n    elif word[0].isupper() and word[-1].islower():\n        left_word\
    \ = word[:-1]\n        right_word = word[1:]\n    else:\n        left_word = word\n\
    \        right_word = word\n    \n    \n    for letter in right_word:\n      \
    \  if letter not in vowels:\n            return ''\n        \n    return left_word[0]\n\
    \n", "    pass\n\n", "    vowels = 'AEIOUYaeiouy'\n    for cons in 'bcdfghjklmnpqrstvwxyz':\n\
    \        vowel_found = False\n        for i, v in enumerate(word[::-1]):\n   \
    \         if v == cons:\n                if word[:i] in vowels and word[-i:] in\
    \ vowels:\n                    vowel_found = True\n                    break\n\
    \        if not vowel_found:\n            return ''\n    return cons.lower()\n\
    </cell>\n<cell>\nget_closest_vowel(\"quick\")\n</cell>\n<cell>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n\
    </cell>\n<cell>", "    # return an empty string if you didn't find any vowel met\
    \ the above condition\n    if len(word) <= 1:\n        return \"\"\n\n    # return\
    \ an empty string if you find any vowel met the above condition\n    if word[0]\
    \ in vowels:\n        return word[0]\n\n    # return an empty string if you find\
    \ any vowel met the above condition\n    if word[-1] in vowels:\n        return\
    \ word[-1]\n\n    # find how many consonants between two vowels (exclude the first\
    \ and last \n    # characters)\n    num_vowel_cons = sum(1 for char in word[1:-1]\
    \ if char in consonants)\n\n    # find the closest vowel\n    if num_vowel_cons\
    \ == 0:\n        return \"\"\n    elif num_vowel_cons == 1:\n        return word[0]\n\
    \    else:\n        return word[-1]\n\n", "    vowels = ('a', 'e', 'i', 'o', 'u',\
    \ 'y')\n    if len(word) <= 1:\n        return ''\n\n    right_side = word[::-1]\n\
    \    cons_index = right_side.find('a')\n    if cons_index >= 0:\n        cons_index\
    \ += 1\n        cons_letter = right_side[cons_index]\n        if cons_letter in\
    \ vowels:\n            return cons_letter\n\n    cons_index = right_side.find('e')\n\
    \    if cons_index >= 0:\n        cons_index += 1\n        cons_letter = right_side[cons_index]\n\
    \        if cons_letter in vowels:\n            return cons_letter\n\n    cons_index\
    \ = right_side.find('i')\n    if cons_index >= 0:\n        cons_index += 1\n \
    \       cons_letter = right_side[cons_index]\n        if cons_letter in vowels:\n\
    \            return cons_letter\n\n    cons_index = right_side.find('o')\n   \
    \ if cons_index >= 0:\n        cons_index += 1\n        cons_letter = right_side[cons_index]\n\
    \        if cons_letter in vowels:\n            return cons_letter\n\n    cons_index\
    \ = right_side.find('u')\n    if cons_index >= 0:\n        cons_index += 1\n \
    \       cons_letter = right_side[cons_index]\n        if cons_letter in vowels:\n\
    \            return cons_letter\n\n    cons_index = right_side.find('y')\n   \
    \ if cons_index >= 0:\n        cons_index += 1\n        cons_letter = right_side[cons_index]\n\
    \        if cons_letter in vowels:\n            return cons_letter\n\n    return\
    \ ''\n\n", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    \n    if len(word)\
    \ == 1:\n        return \"\"\n    \n    if not word[0] in vowels or not word[-1]\
    \ in vowels:\n        return \"\"\n    \n    vowel_pairs = []\n    \n    word_index\
    \ = 0\n    \n    while word_index != -1:\n        if word[word_index] == word[word_index\
    \ + 1]:\n            vowel_pairs.append(word[word_index])\n            word_index\
    \ = word_index + 1\n        else:\n            word_index = word_index - 1\n \
    \   \n    vowel_pairs.sort(key=lambda x: len(x))\n    \n    if len(vowel_pairs)\
    \ >= 2:\n        return vowel_pairs[-2]\n    else:\n        return \"\"\n\n",
  "    \n    vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U']\n    \n \
    \   word = word.lower()\n    \n    vowel_location = word.rfind('a', 0, -1)\n \
    \   \n    if vowel_location != -1:\n        return word[vowel_location:]\n   \
    \ else:\n        return ''\n\n", "    vowels = set('aeiou')\n    vowel_rights\
    \ = set(word[::-1]) - vowels\n    if vowel_rights:\n        closest_vowel = vowel_rights.pop()\n\
    \    else:\n        closest_vowel = ''\n\n    return closest_vowel\n\n", "   \
    \ word = list(word)\n    for i in range(len(word)-1,-1,-1):\n        if word[i]\
    \ in \"aeiou\":\n            word[i] = \"u\" \n    return \"\".join(word)\n\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<cell>", "    \n    vowels_found = []\n\
    \    vowels_found.append(word[0])\n    vowels_found.append(word[-1])\n    \n \
    \   for vowel in vowels_found:\n        if vowel in consonant_list:\n        \
    \    break\n        else:\n            vowels_found = []\n            vowels_found.append(word[0])\n\
    \            vowels_found.append(word[-1])\n    \n    vowels = []\n    for vowel\
    \ in vowels_found:\n        if vowel in vowels:\n            break\n        else:\n\
    \            vowels.append(vowel)\n    \n    return vowels[-1]\n</cell>\n<cell>",
  "    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    word_length = len(word)\n   \
    \ count = 0\n    vowel_counter = 0\n    \n    if word_length <= 3:\n        return\
    \ \"\"\n    else:\n        for i in range(word_length - 2):\n            if word[i]\
    \ not in vowels:\n                count = count + 1\n        \n        if count\
    \ == 0:\n            if word[word_length - 1] in vowels:\n                return\
    \ word[word_length - 1]\n            else:\n                return \"\"\n    \
    \    \n        for i in range(word_length - 1):\n            if word[i] not in\
    \ vowels:\n                count = count - 1\n                if count == 1:\n\
    \                    return word[i]\n                elif count == 0:\n      \
    \              if word[i + 1] in vowels:\n                        return word[i\
    \ + 1]\n                    else:\n                        return \"\"\n     \
    \       elif count == 0:\n                if word[i + 1] in vowels:\n        \
    \            return word[i + 1]\n                else:\n                    return\
    \ \"\"\n    ", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_index = 0\n\
    \    vowels_count = 0\n    vowels_index_prev = 0\n    vowels_count_prev = 0\n\
    \    for index, char in enumerate(word[::-1]):\n        if char in vowels:\n \
    \           if vowels_count == 0 and vowels_index == len(word) - 1:\n        \
    \        return char\n            if vowels_count == 0 and vowels_index == 0:\n\
    \                return char\n            if vowels_count == 0 and vowels_index\
    \ != len(word) - 1:\n                return char\n            if vowels_count\
    \ == 0 and vowels_index == 0:\n                return char\n            vowels_index\
    \ += 1\n            vowels_count -= 1\n            vowels_index_prev += 1\n  \
    \          vowels_count_prev -= 1\n            \n    if vowels_index == len(word)\
    \ - 1:\n        return char\n    return ''\n", "    vowel_dict = {\n        'A':\
    \ 'A',\n        'a': 'a',\n        'B': 'B',\n        'b': 'b',\n        'C':\
    \ 'C',\n        'c': 'c',\n        'D': 'D',\n        'd': 'd',\n        'E':\
    \ 'E',\n        'e': 'e',\n        'F': 'F',\n        'f': 'f',\n        'G':\
    \ 'G',\n        'g': 'g',\n        'H': 'H',\n        'h': 'h',\n        'I':\
    \ 'I',\n        'i': 'i',\n        'J': 'J',\n        'j': 'j',\n        'K':\
    \ 'K',\n        'k': 'k',\n        'L': 'L',\n        'l': 'l',\n        'M':\
    \ 'M',\n        'm': 'm',\n        'N': 'N',\n        'n': 'n',\n        'O':\
    \ 'O',\n        'o': 'o',\n        'P': 'P',\n        'p': 'p',\n        'Q':\
    \ 'Q',\n        'q': 'q',\n        'R': 'R',\n        'r': 'r',\n        'S':\
    \ 'S',\n        's': 's',\n        'T': 'T',\n        't': 't',\n        'U':\
    \ 'U',\n        'u': 'u',\n        'V': 'V',\n        'v': 'v',\n        'W':\
    \ 'W',\n        'w': 'w',\n        'X': 'X',\n        'x': 'x',\n        'Y':\
    \ 'Y',\n        'y': 'y',\n        'Z': 'Z',\n        'z': 'z'\n    }\n\n    word_len\
    \ = len(word)\n    if word_len == 1:\n        return vowel_dict[word[0]]\n   \
    \ elif word_len == 2:\n        return vowel_dict[word[1]] + vowel_dict[word[0]]\
    \ \n    elif word_len > 2:\n        first_vowel = word[-2]\n        last_vowel\
    \ = word[-1]\n        if first_vowel in vowel_dict.keys():\n            return\
    \ vowel_dict[first_vowel] + vowel_dict[last_vowel]\n        else:\n          \
    \  return ''\n", "    if len(word) == 0:\n        return ''\n\n    consonant =\
    \ 'bcdfghjklmnpqrstvwxyz'\n    vowel = 'aeiouAEIOU'\n\n    i = 0\n    j = len(word)\
    \ - 1 # skip the right most character\n    while i < j:\n        # get the next\
    \ consonant\n        c = word[i]\n        if c in consonant:\n            i +=\
    \ 1\n        else:\n            consonant = word[i]\n            i += 1\n    \
    \    \n        # get the next vowel\n        v = word[j]\n        if v in vowel:\n\
    \            j += 1\n        else:\n            vowel = word[j]\n            j\
    \ += 1\n\n    # now find the vowel in the consonant\n    vowel = consonant[vowel.index(word[j]):vowel.index(word[j])+1]\n\
    \n    return vowel\n\n", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \   if len(word) == 0:\n        return \"\"\n    else:\n        if word[0] in\
    \ vowels and word[len(word) - 1] in vowels:\n            return word[0]\n    \
    \    elif word[len(word) - 1] in vowels and word[0] in vowels:\n            return\
    \ word[len(word) - 1]\n        else:\n            return \"\"\n\n", "    vowels\
    \ = ('a', 'e', 'i', 'o', 'u')\n    vowel_count = {'a': 1, 'e': 1, 'i': 1, 'o':\
    \ 1, 'u': 1}\n    \n    for i in range(len(word) - 1):\n        if word[i] in\
    \ vowels and word[i + 1] in vowels:\n            return word[i]\n    \n    return\
    \ ''\n</cell>\n<cell>", "    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    vowel_position = []\n    for index, char in enumerate(word[::-1]):\n  \
    \      if char in vowels:\n            vowel_position.append(index)\n    vowel_position.reverse()\n\
    \    \n    if len(vowel_position) != 1:\n        return \"\"\n    elif vowel_position[0]\
    \ == 0:\n        return \"\"\n    else:\n        return word[vowel_position[0]-1]\n\
    \        ", "    # your code here\n    vowels = ['a','e','i','o','u','y','A','E','I','O','U','Y']\n\
    \    index = len(word)-1\n    word = ''.join(list(word))\n    for i in range(len(word)-1):\n\
    \        if word[i] in vowels and word[i+1] in vowels:\n            return word[i]\n\
    \        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n\
    \    return ''\n\n", "    if word == '':\n        return ''\n    vowel = 'AEIOU'\n\
    \    vowel_index = []\n    for i in range(len(vowel)):\n        if word[len(word)\
    \ - 1 - i].upper() in vowel:\n            vowel_index.append(i)\n    if len(vowel_index)\
    \ > 0:\n        return word[len(word) - 1 - vowel_index[-1]]\n    else:\n    \
    \    return ''\n", "    # Convert letters to upper case\n    word = word.upper()\n\
    \n    # Iterate over word\n    for i, letter in enumerate(word[::-1]):\n     \
    \   # If the letter is consonant\n        if letter not in {'A', 'a', 'E', 'e',\
    \ 'I', 'i', 'O', 'o', 'U', 'u'}:\n            # If it is vowel at the beginning\n\
    \            if letter in {'A', 'a'} or letter in {'E', 'e'} or letter in {'I',\
    \ 'i', 'O', 'o', 'U', 'u'}:\n                return letter\n\n        # If the\
    \ letter is consonant\n        if letter not in {'A', 'a', 'E', 'e', 'I', 'i',\
    \ 'O', 'o', 'U', 'u'}:\n            # If it is vowel at the end\n            if\
    \ letter in {'A', 'a'} or letter in {'E', 'e'} or letter in {'I', 'i', 'O', 'o',\
    \ 'U', 'u'}:\n                return letter\n\n    # return empty string if not\
    \ found\n    return ''\n\n", "    vowels = 'aeiou'\n    if len(word) < 3:\n  \
    \      return ''\n    vowel_position = word.rfind(vowels)\n    if vowel_position\
    \ == -1:\n        return ''\n    if word[vowel_position - 1] in consonants and\
    \ word[vowel_position + 1] in consonants:\n        return word[vowel_position\
    \ - 1]\n    return ''\n\n", "    if len(word) <= 1:\n        return ''\n    \n\
    \    if word[0] in 'aeiouAEIOU':\n        return word[0]\n    \n    for i in range(1,\
    \ len(word)):\n        if word[i] in 'aeiouAEIOU':\n            return word[i]\n\
    \    \n    return ''\n", "    word = list(word)\n    word.reverse()\n    vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    i = 0\n    while i\
    \ < len(word) - 2:\n        if word[i] in vowels and word[i + 1] in vowels:\n\
    \            return word[i]\n        i += 1\n    return ''\n</cell>\n<cell>\n\
    get_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n</cell>\n\
    <cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nProblem 4\n\n</text>\n<text>\nGiven a string, find the longest\
    \ substring containing only letters.\n\n\n</text>\n<cell>", "    word = word.strip()\n\
    \    vowels = set('aeiouAEIOU')\n    if not word:\n        return ''\n    \n \
    \   i = len(word) - 1\n    while i >= 0:\n        if word[i] in vowels:\n    \
    \        return word[i]\n        i -= 1\n    return ''\n\n", "    vowels = ('a',\
    \ 'e', 'i', 'o', 'u')\n    word = word.upper()\n    if len(word) < 3: return ''\n\
    \    if word[-1] not in vowels: return ''\n    if word[-3:] not in vowels: return\
    \ ''\n    if word[-2:] not in vowels: return ''\n    if word[-2:len(word)-1] not\
    \ in vowels: return ''\n    if word[-2:len(word)-1] not in vowels: return ''\n\
    \    if word[-3:len(word)-2] not in vowels: return ''\n    if word[-3:len(word)-2]\
    \ not in vowels: return ''\n    if word[-3:len(word)-1] not in vowels: return\
    \ ''\n    return word[-3:]\n", "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n\
    \    if not word:\n        return ''\n    \n    if word[0] in vowels:\n      \
    \  return word[0]\n    \n    word = word[::-1]\n    if word[0] in vowels:\n  \
    \      return word[0]\n    \n    vowels_count = 0\n    for index, letter in enumerate(word):\n\
    \        if letter in vowels:\n            vowels_count += 1\n            if index\
    \ < vowels_count:\n                return letter\n    return ''\n</cell>\n<cell>",
  "    if not word:\n        return ''\n\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\
    \    vowel_length = len(vowels)\n\n    for i, c in enumerate(word):\n        if\
    \ vowel_length == 0:\n            vowel_index = 0\n        else:\n           \
    \ vowel_index = vowels.index(c) + 1\n\n        if i - vowel_index < 0:\n     \
    \       return ''\n        if i + vowel_index > len(word):\n            return\
    \ ''\n\n        if word[i - vowel_index] != c:\n            return ''\n      \
    \  if word[i + vowel_index] != c:\n            return ''\n\n        vowel_length\
    \ -= 1\n\n    return vowels[vowel_index]\n\n", "    \n    if word[0] == 'a' or\
    \ word[0] == 'e' or word[0] == 'i' or word[0] == 'o' or word[0] == 'u':\n    \
    \    return word[0]\n    elif word[-1] == 'a' or word[-1] == 'e' or word[-1] ==\
    \ 'i' or word[-1] == 'o' or word[-1] == 'u':\n        return word[-1]\n    elif\
    \ word[-2:] == 'ea' or word[-2:] == 'ei' or word[-2:] == 'io' or word[-2:] ==\
    \ 'oo' or word[-2:] == 'ou':\n        return word[-2:-1]\n    elif word[-2:] ==\
    \ 'aa' or word[-2:] == 'ae' or word[-2:] == 'ai' or word[-2:] == 'ao' or word[-2:]\
    \ == 'au':\n        return word[-2:-1]\n    elif word[-2:] == 'eaa' or word[-2:]\
    \ == 'eea' or word[-2:] == 'iaa' or word[-2:] == 'ibe' or word[-2:] == 'ioa' or\
    \ word[-2:] == 'iua' or word[-2:] == 'iue' or word[-2:] == 'joa' or word[-2:]\
    \ == 'joe' or word[-2:] == 'joi' or word[-2:] == 'joo' or word[-2:] == 'juu' or\
    \ word[-2:] == 'kea' or word[-2:] == 'kee' or word[-2:] == 'ken' or word[-2:]\
    \ == 'keo' or word[-2:] == 'keu' or word[-2:] == 'kia' or word[-2:] == 'kib' or\
    \ word[-2:] == 'kii' or word[-2:] == 'kio' or word[-2:] == 'kou' or word[-2:]\
    \ == 'kua' or word[-2:] == 'kue' or word[-2:] == 'kuo' or word[-2:] == 'laa' or\
    \ word[-2:] == 'lbe' or word[-2:] == 'lee' or word[-2:] == 'leu' or word[-2:]\
    \ == 'lia' or word[-2:] == 'lie' or word[-2:] == 'lio' or word[-2:] == 'lou' or\
    \ word[-2:] == 'moa' or word[-2:] == 'mou' or word[-2:] == 'nea' or word[-2:]\
    \ == 'neu' or word[-2:] == 'nia' or word[-2:] == 'niu' or word[-2:] == 'nua' or\
    \ word[-2:] == 'nuu' or word[-2:] == 'oaa' or word[-2:] == 'oa' or word[-2:] ==\
    \ 'oee' or word[-2:] == 'oeu' or word[-2:] == 'oia' or word[-2:] == 'oie' or word[-2:]\
    \ == 'oio' or word[-2:] == 'oou' or word[-2:] == 'oue' or word[-2:] == 'oui' or\
    \ word[-2:] == 'oui' or word[-2:] == 'ouo' or word[-2:] == 'se", "    # Complete\
    \ the function\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ = vowels_count + 1\n        elif vowels_count == 0 and char == vowels[-1]:\n\
    \            return char\n        elif vowels_count > 0 and char == vowels[0]:\n\
    \            return char\n        elif vowels_count == 0 and char == vowels[0]:\n\
    \            return char\n        else:\n            return ''\n\n", "    vowels\
    \ = 'aeiouAEIOU'\n    if len(word) < 2:\n        return ''\n    \n    for index,\
    \ letter in enumerate(word[::-1]):\n        if letter.lower() in vowels:\n   \
    \         return word[index+1:]\n    return ''\n</cell>\n<cell>", "    for i in\
    \ range(len(word) - 1, -1, -1):\n        if word[i] in VOWELS:\n            if\
    \ word[i + 1].isupper():\n                return word[i]\n            elif word[i\
    \ - 1].isupper():\n                return word[i]\n\n    return ''\n\n\n@numba.jit(nopython=True)",
  "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_found = False\n    for index,\
    \ char in enumerate(reversed(word)):\n        if char in vowels:\n           \
    \ vowel_found = True\n            vowel_dist = index\n    if vowel_found:\n  \
    \      return word[vowel_dist:]\n    else:\n        return ''\n\n", "    vowel_positions\
    \ = []\n    for i in range(0,len(word)-1):\n        if word[i] in 'aeiouAEIOU':\n\
    \            vowel_positions.append(i)\n    if len(vowel_positions)==0:\n    \
    \    return ''\n    vowel_positions.sort()\n    left = vowel_positions[0]\n  \
    \  right = vowel_positions[-1]\n    if left < right:\n        return word[left]\n\
    \    else:\n        return word[right+1]\n\n", "    vowel_left = ['a', 'e', 'i',\
    \ 'o', 'u']\n    vowel_right = ['A', 'E', 'I', 'O', 'U']\n    vowel_list = [(vowel_left,\
    \ vowel_right)]\n    for each in vowel_list:\n        if word in each[0]:\n  \
    \          return each[1][0]\n        elif word in each[1]:\n            return\
    \ each[1][1]\n    return ''\n", "    return \"\"\n</cell>\n<cell>", "    vowel_dict\
    \ = {\n        'a' : 'u',\n        'e' : 'u',\n        'i' : 'u',\n        'o'\
    \ : 'u',\n        'u' : 'u',\n        'y' : 'u',\n        'r' : 'u',\n       \
    \ 'k' : 'u',\n        'x' : 'u',\n        'y' : 'u',\n        'l' : 'u',\n   \
    \     's' : 'u',\n        'd' : 'u',\n        'h' : 'u',\n        'm' : 'u',\n\
    \        'w' : 'u',\n        'f' : 'u',\n        'b' : 'u',\n        'p' : 'u',\n\
    \        'v' : 'u',\n        'y' : 'u'\n    }\n    \n    word=word.lower()\n \
    \   \n    for char in word[::-1]:\n        if char in vowel_dict:\n          \
    \  return vowel_dict[char]\n\n    return ''\n", "    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    vowels_right = vowels[::-1]\n    vowels_start = vowels[:]\n \
    \   if word in vowels_right and word in vowels_start:\n        vowel_pos = vowels_right.index(word)\n\
    \        vowel_neg = vowels_start.index(word)\n        if vowel_pos > vowel_neg:\n\
    \            return vowels[vowel_pos]\n        else:\n            return vowels[vowel_neg]\n\
    \    else:\n        return ''\n\n", "    vowel_lst = ['A','a','E','e','I','i','O','o','U','u','Y','y','O','o','W','w']\n\
    \    \n    vowel_found = False\n    vowel_start = None\n    vowel_end = None\n\
    \    \n    for index, char in enumerate(word):\n        if char in vowel_lst:\n\
    \            if vowel_start is None or index - 1 >= vowel_start:\n           \
    \     vowel_start = index\n            if vowel_end is None or index + 1 < vowel_end:\n\
    \                vowel_end = index\n            vowel_found = True\n         \
    \   break\n    \n    if vowel_found == False:\n        return ''\n    \n    return\
    \ word[vowel_start+1:vowel_end]\n    \n    ", "    vowels = {\n        'A': 'a',\n\
    \        'AE': 'ae',\n        'AH': 'ae',\n        'AO': 'ao',\n        'AW':\
    \ 'aw',\n        'B': 'b',\n        'CH': 'ch',\n        'D': 'd',\n        'DH':\
    \ 'dh',\n        'E': 'e',\n        'ER': 'er',\n        'EH': 'eh',\n       \
    \ 'EY': 'ey',\n        'I': 'i',\n        'IH': 'ih',\n        'IY': 'iy',\n \
    \       'O': 'o',\n        'OW': 'oy',\n        'R': 'r',\n        'SH': 'sh',\n\
    \        'T': 't',\n        'TH': 'th',\n        'U': 'u',\n        'V': 'v',\n\
    \        'W': 'w',\n        'Y': 'y',\n        'Z': 'z',\n        'ZH': 'zh'\n\
    \    }\n    length = len(word)\n    vowel_count = 0\n    last_vowel = ''\n   \
    \ \n    if length == 1 or word[0] in vowels.keys():\n        return word[0]\n\n\
    \    for index, char in enumerate(word[::-1]):\n        if char in vowels:\n \
    \           vowel_count += 1\n            last_vowel = char\n\n    if last_vowel\
    \ not in vowels.keys():\n        return ''\n\n    vowel_count -= 1\n\n    if vowel_count\
    \ == 0:\n        return last_vowel\n\n    elif vowel_count < 0:\n        return\
    \ ''\n\n    if vowel_count == 1 and last_vowel == vowels[last_vowel]:\n      \
    \  return last_vowel\n\n    elif vowel_count > 0 and vowel_count <= length / 2:\n\
    \        return last_vowel\n\n    elif vowel_count > length / 2:\n        second_last_vowel\
    \ = word[length - 1]\n        return vowels[last_vowel] if second_last_vowel in\
    \ vowels.keys() else ''\n\n    else:\n        return ''\n", "    vowel_chars =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    for index, letter in enumerate(word[::-1]):\n\
    \        if letter in vowel_chars:\n            return word[index:]\n    return\
    \ ''\n</cell>\n<cell>\nassert get_closest_vowel('yogurt') == 'u'\nassert get_closest_vowel('FULL')\
    \ == 'U'\nassert get_closest_vowel('quick') == ''\nassert get_closest_vowel('ab')\
    \ == ''\n</cell>\n<text>\nProblem 3b\nLet's write a function which checks if a\
    \ sentence has more than 3 consonants on any side.\n\nThe function should return\
    \ True if a sentence has more than 3 consonants on any side, and False otherwise.\n\
    \nYou may assume that the given sentence is always valid (has at least one character),\
    \ has length greater than zero, and has at least one vowel.\n\nExample\nLet's\
    \ see some examples:\n\n>>> sentence = \"The quick brown fox jumps over the lazy\
    \ dog\"\n>>> has_squares(sentence)\nFalse\n>>> sentence = \"A man, a plan, a canal:\
    \ Panama\"\n>>> has_squares(sentence)\nTrue\n>>> sentence = \"The elephant jumped\"\
    \n>>> has_squares(sentence)\nFalse\n>>> sentence = \"quick\"\n>>> has_squares(sentence)\n\
    False\n\n</text>\n<cell>", "    \n    vowels = set('aeiou')\n    start = word.rfind('a')\n\
    \    end = word.rfind('e')\n    if start == -1:\n        return ''\n    if end\
    \ == -1:\n        return word[start:]\n    if start > end:\n        start, end\
    \ = end, start\n    \n    word_length = len(word)\n    vowel_counter = defaultdict(int)\n\
    \    for c in word[start:]:\n        if c in vowels:\n            vowel_counter[c]\
    \ += 1\n    \n    min_distance = math.inf\n    vowel = None\n    for key, v in\
    \ vowel_counter.items():\n        if v < min_distance:\n            min_distance\
    \ = v\n            vowel = key\n    return vowel\n    ", "    if word == \"\"\
    :\n        return \"\"\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U']\n        vowels_index = []\n        vowels_count.clear()\n\
    \        for letter in word:\n            if letter in vowels:\n             \
    \   vowels_index.append(vowels.find(letter))\n                vowels_count[letter]\
    \ += 1\n            elif letter not in vowels:\n                letter_index =\
    \ vowels.index(letter)\n                letter_index_right = letter_index + 1\n\
    \                if letter_index + 1 == len(vowels):\n                    letter_index_right\
    \ += 1\n                vowels_index_right = [letter_index_right, len(vowels)-1]\n\
    \                if vowels_index[0] > vowels_index_right[0]:\n               \
    \     vowels_index_left = [0, vowels_index[0]]\n                else:\n      \
    \              vowels_index_left = [vowels_index_right[0], vowels_index[0]]\n\
    \                for i in range(vowels_index[0], vowels_index_right[0]):\n   \
    \                 if vowels_count[vowels[i]] >= vowels_count[vowels[vowels_index_left[1]]]:\n\
    \                        vowels_index_left.pop()\n                        vowels_index_left.append(i)\n\
    \                        vowels_index_left.append(vowels_index_right[1])\n   \
    \                     break\n                \n                if len(vowels_index_left)\
    \ == 0:\n                    return \"\"\n                \n                vowels_index_left.pop()\n\
    \                if vowels_index_left[0] == vowels_index_right[0]:\n         \
    \           break\n                else:\n                    vowels_index = []\n\
    \                    vowels_count.clear()\n                    vowels_index_left.pop()\n\
    \                    vowels_index.append(vowels_index_left[0])\n             \
    \       vowels_index.append(vowels_index_left[1])\n                    vowels_index.append(vowels_index_right[1])\n\
    \                    vowels_index.append(vowels_index_left[2])\n             \
    \       vowels_index.append(vowels_index_left[3])\n                    vowels_index.append(vowels_index_left[4])\n\
    \                    vowels_index.append(vowels_index_left[5])\n             \
    \       vowels_index.append(vowels_index_left[6])\n                    vowels_index.append(vowels_index_left[7])\n\
    \                    vowels_index.append(vowels_index_left[8])\n             \
    \       vowels_index.append(vowels_index_left[9])\n                    vowels_index.append(vowels_index_left[10])\n\
    \                    vowels_index.append(vowels_index_left[11])\n            \
    \        vowels_index.append(vowels_index_left[12])\n                    vowels_index.append(vowels_index_left[13])\n\
    \                    vowels_index.append(vowels_index_left[14])\n            \
    \        vowels_index.append(vowels_index_left[15])\n                    vowels_index.append(vowels_index_left[16])\n\
    \                    vowels_index.append(vowels_index_left[17])\n            \
    \        vowels_", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    if word in vowels:\n\
    \        return word\n    \n    consonants = ''.join(sorted(word.lower()))\n \
    \   vowels_right_side = vowels.copy()\n    vowels_right_side.extend(vowels_right_side[::-1])\n\
    \    \n    right_side_consonants = consonants.split()\n    \n    \n    right_side_consonants_vowel_dist\
    \ = list()\n    for con in right_side_consonants:\n        right_side_consonants_vowel_dist.append(\n\
    \            min(\n                \n                \n                ((i, distance)\
    \ for i, distance in enumerate([\n                    vowel.index(con) for vowel\
    \ in vowels_right_side\n                ]) if vowel.startswith(con)\n        \
    \    )\n        )\n    \n    \n    closest_vowel = min(right_side_consonants_vowel_dist)[1]\n\
    \    \n    if closest_vowel not in vowels:\n        return ''\n    return closest_vowel\n\
    </cell>\n<cell>", "    pass\n", "    return ''\n\n", "    vowels = {'a', 'e',\
    \ 'o', 'i', 'u', 'A', 'E', 'O', 'I', 'U'}\n    if len(word) < 2: return \"\"\n\
    \    for i, c in enumerate(word):\n        if c in vowels:\n            return\
    \ word[:i] if word[:i] in vowels else \"\"\n\n        found = []\n        j =\
    \ i - 1\n        while j >= 0:\n            if word[j] == c: found.append(j)\n\
    \            j -= 1\n        if len(found) != 0 and found[0] < len(word) - 1 and\
    \ found[-1] < len(word) - 1:\n            j = found[0]\n            found = [found[-1]]\n\
    \            while j >= 0:\n                if j == found[0]: found.append(j +\
    \ 1)\n                if j == found[-1]: found.append(j - 1)\n               \
    \ j -= 1\n            \n            if len(found) >= 2: return word[found[0]:found[-1]+1]\n\
    \n    return \"\"\n", "    vowels = {'A','E','I','O','U','Y'}\n    vowels_left\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'}\n    vowels_right = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'}\n    if word not in vowels and word not in vowels_left and word not in\
    \ vowels_right:\n        return ''\n    vowels = vowels - vowels_left - vowels_right\n\
    \    vowels = vowels.union({''})\n    vowels = {c for c in vowels if c not in\
    \ word}\n    if word[len(word)-1] in vowels:\n        return word[len(word)-1]\n\
    \    vowels_left = {c for c in vowels_left if c not in word}\n    vowels_right\
    \ = {c for c in vowels_right if c not in word}\n    if word[0] in vowels_left:\n\
    \        return word[0]\n    if word[-1] in vowels_right:\n        return word[-1]\n\
    \    return ''\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\n\
    get_closest_vowel('FULL')\n</cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n\
    <cell>\nget_closest_vowel('ab')\n</cell>\n<cell>\nget_closest_vowel('abc')\n</cell>\n\
    <cell>\nget_closest_vowel('acb')\n</cell>\n<cell>\nget_closest_vowel('cba')\n\
    </cell>\n<cell>\nget_closest_vowel('kbc')\n</cell>\n<cell>", "    vowel_locations\
    \ = [vowel.upper() for vowel in list('AEIOUY')]\n    vowel_locations_l = [vowel.lower()\
    \ for vowel in list('aeiouy')]\n    vowel_locations_u = set(vowel_locations).union(set(vowel_locations_l))\n\
    \    for vowel_location in vowel_locations_u:\n        if vowel_location in vowel_locations_l:\n\
    \            pos = len(word) - len(vowel_location)\n            if pos >= 0:\n\
    \                start = len(word) - len(vowel_location)\n                end\
    \ = len(word) - len(vowel_location) - 1\n                if word[start] == vowel_location:\n\
    \                    return word[start]\n                if word[end - 1] == vowel_location:\n\
    \                    return word[end - 1]\n    return ''\n\n", "    vowels = set(list('aeiouy'))\n\
    \    word = ''.join(c for c in word if not c.isupper())\n    vowels = [c for c\
    \ in word if c.lower() in vowels]\n    if word.islower() and len(vowels) > 1:\n\
    \        vowel = vowels.index((vowels[0]+vowels[1]).lower())\n    else:\n    \
    \    vowel = 0\n    return vowels[vowel]\n\n", "    return ''.join(ch for ch in\
    \ word if ch in 'aeiouAEIOU')\n    \n    \n    ", "    if not word:\n        return\
    \ \"\"\n    vowels = ['a','e','i','o','u']\n    len_word = len(word)\n    i =\
    \ 0\n    while i < (len_word - 1):\n        if word[i] in vowels and word[i+1]\
    \ in vowels:\n            return word[i]\n        i += 1\n    return \"\"\n\n",
  "    vowels = ['a','e','i','o','u']\n    i = 0\n    j = len(word)\n    while i <\
    \ j and word[i] == word[-1]:\n        i += 1\n    vowel = word[i]\n    if vowel\
    \ in vowels:\n        return vowel\n    else:\n        if word[i] and word[i+1]\
    \ and (word[i] == 'l' or word[i] == 'U'):\n            i += 1\n            return\
    \ word[i]\n        else:\n            return ''\n    \n    ", "    vowels = 'aeiouAEIOU'\n\
    \    \n    length = len(word)\n    \n    if length < 3:\n        return ''\n \
    \   \n    if word[0] in vowels and word[-1] in vowels:\n        if word[0] in\
    \ vowels and word[-1] in vowels and word[1] in vowels:\n            return word[1]\n\
    \        elif word[0] in vowels and word[-1] in vowels and word[-2] in vowels:\n\
    \            return word[-2]\n        else:\n            return ''\n    elif word[0]\
    \ in vowels and word[-1] in vowels:\n        return word[-1]\n    elif word[0]\
    \ in vowels and word[-1] not in vowels:\n        return ''\n    elif word[0] in\
    \ vowels and word[-1] not in vowels:\n        return ''\n    elif word[0] in vowels:\n\
    \        return word[0]\n    elif word[-1] in vowels:\n        return word[-1]\n\
    \    elif word[-1] not in vowels:\n        return ''\n    elif word[0] not in\
    \ vowels and word[-1] not in vowels:\n        return ''\n    elif word[0] not\
    \ in vowels and word[-1] in vowels:\n        return word[-1]\n    elif word[0]\
    \ not in vowels and word[-1] not in vowels:\n        return ''\n    elif word[0]\
    \ not in vowels:\n        return word[0]\n    elif word[-1] not in vowels:\n \
    \       return word[-1]\n    else:\n        return ''\n", "    vowels = [\n  \
    \      'a',\n        'e', \n        'i',\n        'o',\n        'u',\n       \
    \ 'A', \n        'E', \n        'I', \n        'O',\n        'U'\n    ]\n    \n\
    \    vowel = vowels[0]\n    prev_vowel = ''\n    \n    for i, letter in enumerate(word[::-1]):\n\
    \        if letter in vowels:\n            vowel = letter\n            prev_vowel\
    \ = vowels[i - 1]\n            break\n            \n    return prev_vowel\n\n",
  "    if word.endswith('q') or word.endswith('u'):\n        return 'u'\n    elif\
    \ word.endswith('y') or word.endswith('u'):\n        return 'U'\n    else:\n \
    \       return ''\n\n", "    return ''\n", "    vowels = set(['a', 'e', 'i', 'o',\
    \ 'u'])\n    vowels_len = len(vowels)\n    word = word.lower()\n    \n    for\
    \ index, letter in enumerate(word):\n        # Skip non-letter characters\n  \
    \      if letter.isalpha():\n            if word[index] in vowels:\n         \
    \       return word[index]\n        elif letter == 'r':\n            end = index\
    \ + 2\n            while end < len(word) and word[end] in vowels:\n          \
    \      end += 1\n            start = end - 2\n            while start > 0 and\
    \ word[start - 1] in vowels:\n                start -= 1\n            if end -\
    \ start >= vowels_len and start < end:\n                return word[start:end]\n\
    \        elif index == len(word) - 1:\n            if word[index] in vowels:\n\
    \                return word[index]\n    return ''\n\n", "    vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_positions = []\n    for c\
    \ in word[::-1]:\n        if c in vowels:\n            vowel_positions.append(vowels.index(c))\n\
    \    if vowel_positions:\n        closest_idx = vowel_positions.index(min(vowel_positions))\n\
    \        return word[::-1][closest_idx]\n    else:\n        return ''\n\n", " \
    \   vowels = ('a', 'e', 'i', 'o', 'u')\n    \n    vowel_dict = dict(zip(vowels,\
    \ range(len(vowels))))\n    \n    pos = len(word) - 1\n    \n    while pos > -1\
    \ and word[pos] not in vowels:\n        pos -= 1\n    \n    pos += 1\n    \n \
    \   while pos < len(word):\n        if word[pos] in vowel_dict:\n            vowel\
    \ = word[pos]\n            return vowel\n        \n        pos += 1\n    \n  \
    \  return ''\n\n", "    vowel = 'uoaeiouy'\n    vowel_position = word.rfind(vowel)\n\
    \n    # Handle case when no vowel found at the right side\n    if vowel_position\
    \ == -1:\n        return ''\n\n    # Handle case when no vowel found in the beginning\
    \ of the word\n    if vowel_position == 0:\n        return ''\n\n    # Handle\
    \ case when no vowel found in the end of the word\n    if vowel_position == len(word):\n\
    \        return ''\n\n    # Handle case when there is only one vowel found in\
    \ the word\n    if len(vowel) == 1:\n        return vowel\n\n    # Handle case\
    \ when there is two vowels found in the word\n    if len(vowel) == 2:\n      \
    \  return vowel[vowel_position - 1] + vowel[vowel_position + 1]\n\n    # Handle\
    \ case when there is three vowels found in the word\n    if len(vowel) == 3:\n\
    \        return vowel[vowel_position - 1] + vowel[vowel_position + 1] + vowel[vowel_position\
    \ + 2]\n\n    # Handle case when there are more than three vowels found in the\
    \ word\n    return ''\n\n", "    vowels = \"aeiouAEIOU\"\n    length = len(word)\n\
    \    index = length - 1\n    vowel_found = False\n    while index >= 0:\n    \
    \    if word[index] in vowels:\n            vowel_found = True\n            break\n\
    \        index -= 1\n    if not vowel_found:\n        return ''\n    index = length\
    \ - 1\n    while index >= 0:\n        if word[index] in vowels:\n            return\
    \ word[index]\n        index -= 1\n    return ''\n", "    if not word:\n     \
    \   return ''\n\n    vowels = set(\"aeiouAEIOU\")\n    length = len(word)\n  \
    \  \n    if not length:\n        return ''\n\n    vowel_position = []\n    vowel_position.append(0)\n\
    \    for idx in range(1,length-1):\n        if word[idx+1] in vowels:\n      \
    \      vowel_position.append(idx)\n    if len(vowel_position) != len(set(vowel_position)):\n\
    \        return ''\n\n    vowel_position.reverse()\n    closest_vowel = ''\n \
    \   min_idx = 0\n    for idx, position in enumerate(vowel_position):\n       \
    \ if position < min_idx and position == vowel_position[idx+1]:\n            min_idx\
    \ = position\n            closest_vowel = word[position]\n    return closest_vowel\n\
    \n", "    vowels = ['a','e','i','o','u']\n    vowel_positions = [m.start() for\
    \ m in re.finditer('(?iV)',word)]\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \    consonant_positions = [m.start() for m in re.finditer('(?iC)',word)]\n  \
    \  positions = [i for i in vowel_positions if i in consonant_positions]\n    \n\
    \    if positions == []:\n        return ''\n    else:\n        return vowels[positions.index(min(positions))]\n",
  "    vowels = ['a','e','i','o','u']\n    for i, letter in enumerate(word[::-1]):\n\
    \        if letter in vowels:\n            return word[-(i+1)]\n\n    return \"\
    \"\n\n", "    vowels_list = ['A','a','I','i','O','o','U','u']\n    vowels = word[::-1].count(vowels_list)\n\
    \    if vowels == 3:\n        return word[::-1].count(vowels_list[0]) \n    elif\
    \ vowels == 2:\n        return word[::-1].count(vowels_list[1]) \n    elif vowels\
    \ == 1:\n        return ''\n    else: \n        return ''\n", "    if len(word)\
    \ == 0:\n        return \"\"\n\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    word_length\
    \ = len(word)\n    for i in range(word_length):\n        if word[i] in vowels:\n\
    \            if word[i-1] in vowels and word[i+1] in vowels:\n               \
    \ return word[i]\n    return \"\"\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    word = word.upper()\n    \n    for i in range(len(word) - 1, -1, -1):\n \
    \       if word[i] in vowels:\n            return word[i]\n    return ''\n", " \
    \   pass\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n\
    </cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nProblem 7\n\n</text>\n<text>\nCreate a function which converts\
    \ numbers to their roman equivalent:\n\nExamples:\n\n$1 -> I$\n$12 -> X$\n$999\
    \ -> C$\n$785 -> V$\n\nThe argument must a number greater than 0.\n\nIf the argument\
    \ is negative, return an empty string.\n\nYou may assume that the argument is\
    \ non-empty and contains only non-zero digits.\n\nYou may assume that all input\
    \ arguments will be converted to lower case characters.\n\nInput/Output Specification\n\
    \nYou are given a positive integer $x$. The function should return a string with\
    \ the roman equivalent of $x$ as an argument to the function call. See the problem\
    \ for more details about input arguments.\n\n\n</text>\n<cell>", "    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = [vowels.index(i) for i in vowels]\n\
    \    \n    vowel_indices = [i for i,letter in enumerate(word[::-1]) if letter\
    \ in vowels]\n    if vowel_indices:\n        return vowels[min(vowel_indices)+1]\n\
    \    return ''\n    \nget_closest_vowel(\"yogurt\")\n</cell>\n<cell>\nget_closest_vowel(\"\
    AB\")\n</cell>\n<cell>", "    vowel_left = ('a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U')\n    vowel_right = ('b', 'c', 'd', 'f', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n\n    word = list(word.lower())\n\
    \n    if len(word) < 2:\n        return ''\n    elif word[-2] not in vowel_left\
    \ and word[-1] not in vowel_right:\n        return ''\n    else:\n        vowel_meet_condition\
    \ = (\n            word[-2] not in vowel_left and word[-1] not in vowel_right\n\
    \            or word[-2:] in vowel_left and word[0:2] in vowel_right\n       \
    \ )\n\n        if vowel_meet_condition:\n            return word[-1]\n       \
    \ else:\n            return word[-1]\n\n", "    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    \n    vowel_flag = False\n    count = 0\n    while count < len(word):\n\
    \        if word[count] in vowels:\n            vowel_flag = True\n        count\
    \ += 1\n        \n    if not vowel_flag:\n        return ''\n    \n    vowels_flag\
    \ = False\n    count = 0\n    while count < len(word):\n        if word[count].upper()\
    \ in vowels:\n            vowels_flag = True\n        count += 1\n        \n \
    \   if not vowels_flag:\n        return ''\n    \n    vowel_found = False\n  \
    \  count = 0\n    while count < len(word):\n        if word[count] in vowels:\n\
    \            vowel_found = True\n            count += 1\n        else:\n     \
    \       count += 1\n            \n    if vowel_found:\n        if word[len(word)-1]\
    \ in vowels:\n            return word[len(word)-1]\n        else:\n          \
    \  return ''\n    else:\n        if word[len(word)-1].upper() in vowels:\n   \
    \         return word[len(word)-1].upper()\n        else:\n            return\
    \ ''\n", "    if word == \"\":\n        return \"\"\n    vowels = \"aeiouAEIOU\"\
    \n    word = word.lower()\n    if word[0] in vowels and word[-1] in vowels:\n\
    \        word_list = list(word)\n        word_list.remove('a')\n        word_list.remove('A')\n\
    \        return \"\".join(word_list)\n    else:\n        return \"\"\n    ", " \
    \   vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n    vowels_left\
    \ = get_right_consonants(word[:len(word)-1])\n    vowels_right = get_right_consonants(word[len(word)-1:])\n\
    \    for letter in vowels:\n        if letter in vowels_left and letter in vowels_right:\n\
    \            return letter\n    return \"\"\n\n", "    # your code here\n    vowel_list\
    \ = ['a', 'e', 'i', 'o', 'u']\n    if word == '':\n        return ''\n    elif\
    \ len(word) < 3:\n        return ''\n    else:\n        word = word.lower()\n\
    \        vowel_found = False\n        for i in range(0, len(word)-1):\n      \
    \      if vowel_found:\n                break\n            if word[i] == vowel_list[0]:\n\
    \                vowel_found = True\n                if i == len(word) - 2:\n\
    \                    return vowel_list[0]\n            if word[i] == vowel_list[-1]:\n\
    \                vowel_found = True\n                if i == 0:\n            \
    \        return vowel_list[-1]\n            if word[i] == vowel_list[0]:\n   \
    \             vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == vowel_list[-1]:\n\
    \                vowel_found = True\n                if i == len(word) - 1:\n\
    \                    return vowel_list[-1]\n            if word[i] == vowel_list[0]:\n\
    \                vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == vowel_list[-1]:\n\
    \                vowel_found = True\n                if i == len(word) - 1:\n\
    \                    return vowel_list[-1]\n            if word[i] == 'u':\n \
    \               vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == 'e':\n  \
    \              vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[-1]\n            if word[i] == 'i':\n \
    \               vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == 'o':\n  \
    \              vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[-1]\n            if word[i] == 'a':\n \
    \               vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == 'b':\n  \
    \              vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[-1]\n            if word[i] == 'f':\n \
    \               vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[0]\n            if word[i] == 'z':\n  \
    \              vowel_found = True\n                if i + 1 == len(word) - 1:\n\
    \                    return vowel_list[-1]\n    return ''\n\n", "    vowel_letters\
    \ = ['a', 'e', 'i', 'o', 'u']\n    \n    word = word.lower()\n\n    vowel_letters\
    \ = list(filter(lambda c: c in word, vowel_letters))\n\n    if len(vowel_letters)\
    \ == 0:\n        return ''\n    \n    else:\n        vowel_letter = vowel_letters[-1]\n\
    \n        if vowel_letter in word:\n            vowel_letter = vowel_letter\n\
    \        else:\n            vowel_letter = ''\n            \n        return vowel_letter\n\
    \n", "    # write your code here\n    vowels = ('a','e','i','o','u')\n    for\
    \ i in reversed(range(len(word))):\n        if word[-i-1:-1] in vowels:\n    \
    \        return word[-i-1:-1]\n    return ''\n", "    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n\n    for i, char in reversed(list(enumerate(word))):\n        if\
    \ char in vowels:\n            return char\n\n    # no vowel in word\n    return\
    \ ''\n\n", "    \n    # your code here\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\
    \    words = list(word)\n    \n    vowel_counter = 0\n    \n    if words[0] in\
    \ vowels:\n        vowel_counter += 1\n    if words[-1] in vowels:\n        vowel_counter\
    \ += 1\n    \n    letters_counter = len(word)\n    \n    if letters_counter >\
    \ 1:\n        words.pop(0)\n    if letters_counter > 0:\n        words.pop(-1)\n\
    \        \n    closest_vowel = ''\n    \n    for letter in word:\n        if letter\
    \ in vowels:\n            closest_vowel = letter\n            break\n        \n\
    \    if closest_vowel != '':\n        return closest_vowel\n    else:\n      \
    \  return ''\n    ", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z']\n    if word.endswith('y') or word.endswith('Y') or\
    \ word.endswith('urt') or word.endswith('Urt'):\n        return 'u'\n    if word.endswith('l')\
    \ or word.endswith('L'):\n        return 'a'\n    for vowel in vowels:\n     \
    \   if word[-1*vowel:]+word[-1*vowel] not in consonants:\n            return vowel\n\
    \    return ''\n", "    vowel_list = ['a', 'e', 'i', 'o', 'u']\n    word_list\
    \ = list(word.lower())\n\n    for pos, char in enumerate(word_list):\n       \
    \ if char in vowel_list:\n            word_list[pos] = ''\n        elif word_list[pos]\
    \ == word_list[pos+1]:\n            word_list[pos] = ''\n\n    return ''.join(word_list)\n",
  "    vowels = 'AEIOUaeiou'\n    try:\n        return word[::-1].lower().find(vowels)\n\
    \    except:\n        return ''\n\n", "    # your code here\n    vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n    vowels_in_middle = set(vowels).intersection(set(word))\n\
    \    if len(vowels_in_middle) <= 1:\n        return ''\n    for each_vowel in\
    \ vowels_in_middle:\n        if each_vowel in vowels:\n            vowel_index\
    \ = vowels.index(each_vowel)\n            word_length = len(word)\n          \
    \  right = vowel_index + 1 if vowel_index < word_length else word_length\n   \
    \         left = right - 1 if right > 0 else 0\n            vowels_between_letters\
    \ = word[left:right]\n            vowels_between_letters = set(vowels_between_letters)\n\
    \            if len(vowels_between_letters) <= 1:\n                return ''\n\
    \            for each_vowel_in_letters in vowels_between_letters:\n          \
    \      if each_vowel_in_letters in vowels:\n                    return each_vowel\n\
    \    return ''\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\n\
    get_closest_vowel('FULL')\n</cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n\
    <cell>\nget_closest_vowel('ab')\n</cell>\n<text>\nC) get_closes_consonant\n\n\
    </text>\n<cell>", "    vowels = ['A', 'E', 'I', 'O', 'U']\n    word = word.lower()\n\
    \    for i in range(len(word)):\n        if word[-1:] in vowels and word[:i] in\
    \ vowels:\n            return word[-1:]\n    return ''\n", "    vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for index, letter in enumerate(word):\n\
    \        if letter in vowels and (index == 0 or index == len(word) - 1):\n   \
    \         return letter\n    return ''\n\n", "    word = word.lower()\n    vowels\
    \ = \"aeiou\"\n    return word[-1:] + word[:-1].find(vowels, 1) if word else \"\
    \"\n\n", "    vowel_map = {'a':'a','e':'e','i':'i','o':'o','u':'u'}\n    word\
    \ = word.lower()\n    \n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    if\
    \ word.endswith(\"y\"):\n        word = word[:-1]\n\n    index = word.find(consonants,\
    \ len(word)-2)\n    \n    while index != -1 and index != len(word):\n        if\
    \ word[index:index+1] in vowel_map.values():\n            return word[index:index+1]\n\
    \        index = word.find(consonants, index+1)\n\n    return \"\"\n", "    vowels\
    \ = ['A', 'E', 'I', 'O', 'U']\n    if not word:\n        return ''\n    if word[0]\
    \ not in vowels:\n        return ''\n    if word[-1] not in vowels:\n        return\
    \ ''\n    for index, letter in enumerate(word[::-1]):\n        if letter in vowels\
    \ and word[index - 1] not in vowels:\n            return letter\n    return ''\n\
    \n", "    return ''\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_words\
    \ = ['u']\n    found = 0\n    left = 0\n    right = len(word) - 1\n    while found\
    \ == 0:\n        while left < right:\n            if word[left].lower() not in\
    \ vowels:\n                left += 1\n                continue\n            if\
    \ word[right].lower() not in vowels:\n                right -= 1\n           \
    \     continue\n            found += 1\n            if left == right:\n      \
    \          break\n            vowel_words.append(word[left])\n            left\
    \ += 1\n            right -= 1\n    vowel_words.append(word[right])\n    return\
    \ ''.join(vowel_words)\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n\
    <cell>\nget_closest_vowel('FULL')\n</cell>\n<cell>\nget_closest_vowel('quick')\n\
    </cell>\n<cell>\nget_closest_vowel('ab')\n</cell>\n<text>\nThe word 'yogurt' has\
    \ 'u' in the right side. We can see in the next cell\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found 'u' in the rightmost position. Next 'u' is the closest\
    \ vowel. We can see in the next cell.\n\n\n</text>\n<cell>\nget_closest_vowel('yogurt')\n\
    </cell>\n<text>\nWe found ", "    vowels = set('aeiouAEIOU')\n\n    for char in\
    \ word[::-1]:\n        if char in vowels:\n            return char\n    return\
    \ ''\n\n</cell>\n<cell>\nget_closest_vowel('yogurt')\n</cell>\n<cell>\nget_closest_vowel('FULL')\n\
    </cell>\n<cell>\nget_closest_vowel('quick')\n</cell>\n<cell>\nget_closest_vowel('ab')\n\
    </cell>\n<text>\nPart II\nCreate a function that returns True if the given word\
    \ is valid English word, else return False.\n\nNote: Each word in the given string\
    \ should contain atleast one vowel.\n\n\n</text>\n<text>\nSolution\n\n</text>\n\
    <cell>", "    vowel = 'aeiou'\n    length = len(word)\n    if length <= 1:\n \
    \       return ''\n    elif length > 2:\n        for index in range(length-2):\n\
    \            if word[index].lower() in vowel:\n                return word[index+1]\n\
    \    return ''\n\n", "    vowels = ['a','e','i','o','u']\n    if len(word) < 2:\n\
    \        return ''\n    if len(word) <= 5:\n        if word[1] in vowels and word[2]\
    \ in vowels:\n            return word[1]\n        else:\n            return ''\n\
    \    if len(word) >= 7 and word[-1] in vowels and word[-2] in vowels:\n      \
    \  return word[-1]\n    else:\n        return ''\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you so much!\n<|/ c |>\n<| a dscore=0 |>\nAs per your question I assume\
    \ that you want it to be a dynamic solution because you are not providing any\
    \ code or any detail on what you are trying to achieve so I am giving a solution\
    \ which you can just use and modify the logic as per your requirements and requirements.\n\
    So I believe you have a text file containing all the words you want to match with\
    \ your word \"Yogurt\" then you can use the below code snippet which would give\
    \ you all the words containing the word \"Yogurt\" which you can then match with\
    \ the word \"Yogurt\" from the file you have.\n<code>\nimport re\nwith open('yourFile.txt')\
    \ as file:\n    for line in file.readlines():\n        words = line.split() \n\
    \        for word in words:\n            if re.search(r'Yogurt', word):\n    \
    \            print(word)\n</code>\n<|/ a tags=python-3.x |>\n<| c |>\nThanks.\
    \ But I don't want to use any external file but use the words 'Yogurt' and store\
    \ in a variable and then match with all the words 'Yogurt' in the list.\n<|/ c\
    \ |>\n<| c |>\nyou can read a file using open function in python and you can store\
    \ the content in a variable and then match it with Yogurt\n<|/ c |>\n<| a tags=python-3.x\
    \ |>\n<code>", "    pass\n\n", "    vowels = ['A','a','E','e','I','i','O','o','U','u']\n\
    \    vowels_in_right_side = []\n    vowels_in_left_side = []\n    for letter in\
    \ word:\n        if letter.upper() in vowels and letter.isupper():\n         \
    \   vowels_in_right_side.append(letter.upper())\n        elif letter.upper() in\
    \ vowels and letter.islower():\n            vowels_in_left_side.append(letter.upper())\n\
    \        else:\n            pass\n    vowels_in_right_side = vowels_in_right_side\
    \ + vowels_in_left_side\n    vowels_in_right_side.sort()\n    vowels_in_left_side.sort()\n\
    \    vowels_in_right_side.reverse()\n    vowels_in_left_side.reverse()\n    if\
    \ vowels_in_right_side[0] == vowels_in_right_side[-1]:\n        return vowels_in_right_side[0]\n\
    \    else:\n        return ''\n", "    if not word:\n        return ''\n    \n\
    \    vowels = set('aeiou')\n    word_len = len(word)\n    \n    # Find the vowel\
    \ which meet the condition\n    index_1 = word.rfind('a', 0, word_len) # start\
    \ from right side\n    index_2 = word.rfind('e', 0, word_len) # start from right\
    \ side\n    index_3 = word.rfind('i', 0, word_len) # start from right side\n \
    \   index_4 = word.rfind('o', 0, word_len) # start from right side\n    index_5\
    \ = word.rfind('u', 0, word_len) # start from right side\n    \n    if index_1\
    \ == -1 or index_2 == -1 or index_3 == -1 or index_4 == -1 or index_5 == -1:\n\
    \        return ''\n    \n    # Find all vowel index between index_1 and index_2\n\
    \    index_1_vowel_range = index_1 + 1 \n    index_2_vowel_range = index_2 - 1\n\
    \    \n    # Find all vowel index between index_3 and index_4\n    index_3_vowel_range\
    \ = index_3 + 1 \n    index_4_vowel_range = index_4 - 1\n    \n    # Find all\
    \ vowel index between index_5 and word_len\n    index_5_vowel_range = word_len\n\
    \    \n    found_index_1 = False\n    found_index_2 = False\n    found_index_3\
    \ = False\n    found_index_4 = False\n    found_index_5 = False\n    \n    vowel_1\
    \ = word[index_1_vowel_range]\n    vowel_2 = word[index_2_vowel_range]\n    vowel_3\
    \ = word[index_3_vowel_range]\n    vowel_4 = word[index_4_vowel_range]\n    vowel_5\
    \ = word[index_5_vowel_range]\n    \n    if vowel_1 in vowels:\n        found_index_1\
    \ = True\n    if vowel_2 in vowels:\n        found_index_2 = True\n    if vowel_3\
    \ in vowels:\n        found_index_3 = True\n    if vowel_4 in vowels:\n      \
    \  found_index_4 = True\n    if vowel_5 in vowels:\n        found_index_5 = True\n\
    \    \n    if found_index_1 and found_index_2 and found_index_3 and found_index_4\
    \ and found_index_5:\n        return vowel_1\n    elif found_index_1 and not found_index_2\
    \ and found_index_3 and found_index_4 and found_index_5:\n        return vowel_1\n\
    \    elif found_index_1 and found_index_2 and not found_index_3 and found_index_4\
    \ and found_index_5:\n        return vowel_1\n    elif found_index_1 and not found_index_2\
    \ and found_index_3 and not found_index_4 and found_index_5:\n        return vowel_1\n\
    \    elif found_index_1 and not found_index_2 and found_index_3 and not found_index_",
  "    vowels = set('aeiouAEIOU')\n    length = len(word)\n    word = list(word)\n\
    \    closest_index = -1\n    closest_distance = 1\n    for i in range(length-1):\n\
    \        cur_char = word[i]\n        right_char = word[i+1]\n        # we only\
    \ care about the vowel at the right side\n        if right_char in vowels:\n \
    \           # we only care about the vowel between consonants\n            if\
    \ not cur_char in vowels:\n                continue\n            \n          \
    \  # get the vowel distance\n            distance = abs(len(cur_char) - len(right_char))\n\
    \n            # we only care about the closest one\n            if closest_index\
    \ == -1 or distance < closest_distance:\n                closest_index = i\n \
    \               closest_distance = distance\n    \n    if closest_index == -1\
    \ or closest_distance == 1:\n        return ''\n    return word[closest_index+1:closest_index+1+closest_distance]\n\
    \n", "    \n    # find consonant\n    start = word[::-1].find('i')\n    end =\
    \ word[::-1].find('o')\n    \n    if start == -1 or end == -1:\n        return\
    \ ''\n    \n    if start < end:\n        return word[start:end]\n    \n    return\
    \ word[start:end]\n", "    vowels = ['a', 'A', 'e', 'i', 'I', 'o', 'O', 'u', 'U']\n\
    \    word = word.lower()\n    if word[0] == 'a':\n        return word[0]\n   \
    \ if word[-1] == 'a':\n        return word[-1]\n    for i in range(1, len(word)\
    \ - 1):\n        if word[-i-1] in vowels and word[-i] in vowels:\n           \
    \ return word[-i-1]\n    return ''\n\n", "    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \n    # TODO\n    vowel_index = -1\n    vowel_distance = 0\n    for i in range(len(word)-1,\
    \ 0, -1):\n        if word[i] in vowels:\n            vowel_index = i\n      \
    \      break\n    \n    if vowel_index == -1:\n        return ''\n\n    # TODO\n\
    \    vowel_distance += len(word) - vowel_index\n\n    return word[vowel_index]\n",
  "    return ''\n", "    if len(word) <= 1:\n        return ''\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    right_side_index = -1\n    vowels_found = 0\n    for\
    \ i in range(len(word) - 1):\n        if word[i] in vowels and word[i+1] in vowels:\n\
    \            vowels_found += 1\n            if vowels_found == 2:\n          \
    \      right_side_index = i\n                break\n        else:\n          \
    \  vowels_found = 0\n    return word[right_side_index] if right_side_index !=\
    \ -1 else '' if len(word) == 1 else ''\n</cell>\n<text>\nLet's do some tests:\n\
    \n\n</text>\n<cell>\ntests = [\n    ('yogurt', 1),\n    ('FULL', 3),\n    ('quick',\
    \ 1),\n    ('ab', 1),\n    ('a', 0),\n    ('bc', 0),\n    ('cde', 1),\n    ('ghij',\
    \ 0),\n    ('', 0),\n]\n\nfor test_case in tests:\n    word, substring_length\
    \ = test_case\n    \n    if get_closest_vowel(word) == vowels[substring_length\
    \ - 1]:\n        print('Passed.')\n    else:\n        print('Failed!')\n</cell>\n\
    <text>\nLet's do some analysis:\n\nWhat is the best substring length to find the\
    \ closest vowel? \nWhat is the longest substring length to find the closest vowel?\
    \ \nWhat is the longest substring length to find the closest vowel under specific\
    \ conditions? (e.g., consonants and vowels only)? \nWhat is the longest substring\
    \ length to find the closest vowel under specific conditions? (e.g., consonants\
    \ and vowels only)? \nWhat is the longest substring length to find the closest\
    \ vowel under specific conditions? (e.g., consonants and vowels only)? \nWhat\
    \ is the longest substring length to find the closest vowel under specific conditions?\
    \ (e.g., consonants and vowels only)? \nWhat is the longest substring length to\
    \ find the closest vowel under specific conditions? (e.g., consonants and vowels\
    \ only)? \nWhat is the longest substring length to find the closest vowel under\
    \ specific conditions? (e.g., consonants and vowels only)? \n\n\n</text>\n<text>\n\
    Problem 3: Longest Substring\nThe longest substring is the longest string which\
    \ can be created from the given string\nusing the specified rules. You have to\
    \ find the longest substring under these conditions:\n\nThe given string contains\
    \ only English letters a-z.\nThe substring must contain 2 consonants or vowels.\n\
    The longest substring must contain the closest vowel from the right side of the\
    \ word.\n\nImplement the find_longest_substring function to find the longest ",
  "    vowel_list = ('a', 'e', 'i', 'o', 'u')\n    length = len(word)\n    for index,\
    \ char in enumerate(word):\n        if char in vowel_list:\n            index\
    \ = length - index\n            vowel = word[index + 1:]\n            if vowel\
    \ in 'AEIOUaeiou':\n                return vowel\n            \n    return ''\
    \ \n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
