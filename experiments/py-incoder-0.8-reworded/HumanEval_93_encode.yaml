name: HumanEval_93_encode
language: py
prompt: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes\
  \ a message, and encodes in such a \n    way that it swaps case of all letters,\
  \ replaces all vowels in \n    the message with the letter that appears 2 places\
  \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
  \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
  \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
  \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert\
  \ candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
  \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
  \    check(encode)\n\ntest_check()\n"
completions: ["    return ''.join(\n        char.lower() if char.isupper() else\n\
    \        char.upper() if char.islower() else\n        char.swapcase() if char\
    \ in 'aeiouAEIOU' else\n        char\n        for char in message\n    )\n\n",
  "    encoded = ''\n    vowels = 'aeiouAEIOU'\n    for i in range(len(message)):\n\
    \        # Case swap\n        if message[i].upper() != message[i]:\n         \
    \   encoded += message[i].upper() + message[i].lower()\n        # Vowel substitution\n\
    \        elif message[i] in vowels:\n            letter = vowels.find(message[i])\
    \ + 2\n            encoded += message[i] + chr(letter)\n    return encoded\n",
  "    \n    letters = [letter for letter in message]\n    letters = [letter for letter\
    \ in message \n                if letter not in vowels]\n    \n    \n    encodings\
    \ = []\n    count = 0\n    for i in letters:\n        \n        encoding = ''\n\
    \        for j in letters:\n            \n            if i == j:\n           \
    \     count = count + 1\n            else:\n                count = 0\n      \
    \          \n            if count > 2:\n                encoding = encoding +\
    \ j\n            else:\n                encoding = encoding + i\n        encodings.append(encoding)\n\
    \    \n    encodings = ''.join(encodings)\n    return encodings\n", "    return\
    \ ''.join([ \n        (letter1 if letter == letter2 else letter) for letter in\
    \ message \n        for letter1, letter2 in itertools.product(\n            'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\
    \            'ABCBCDFGHIJKLMNOPQRSTUVWXYZ'\n        )\n    ])\n", "    return\
    \ ''.join([c.lower() for c in message.lower()]) + ''.join([\n        letter.lower()\
    \ if vowel in message[vowel.upper()] else letter\n        for vowel in ['A', 'a',\
    \ 'E', 'e', 'i', 'o', 'U', 'u']\n        for letter in message[vowel.lower()].lower()\n\
    \    ])\n\n", "    encoded = \"\"\n    for letter in message:\n        if letter.isalpha():\n\
    \            letter = letter.lower()\n            if letter in VOWELS:\n     \
    \           letter = VOWELS[letter]\n            vowel_index = getVowel(letter)\n\
    \            encoded = encoded + letter[vowel_index:letter_index+1]\n    return\
    \ encoded\n\n", "    vowels = set(\"aeiouAEIOU\")\n    def encode_function(message:\
    \ str) -> str:\n        encoded = message\n        for letter in message:\n  \
    \          if letter in vowels:\n                letter_index = letters.index(letter)\n\
    \                replacement_letter = letters[letter_index + 2]\n            \
    \    encoded = encoded.replace(letter, replacement_letter)\n            else:\n\
    \                encoded = encoded.replace(letter, letters[letters.index(letter)\
    \ + 2])\n        return encoded\n    return encode_function\n\n", "    alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiouAEIOU'\n    vowel_to_index\
    \ = {vowel: i for i, vowel in enumerate(vowels)}\n    letter_indices = {letter:\
    \ i for i, letter in enumerate(alphabet)}\n    message_letters = list(message)\n\
    \    for i, letter in enumerate(message_letters):\n        letter_offset = letter_indices[letter]\n\
    \        letter_offset_2 = letter_indices[message_letters[i+1]]\n        new_letter\
    \ = alphabet[letter_offset + letter_offset_2]\n        message_letters[i] = new_letter\n\
    \    return ''.join(message_letters)\n", "    \n    def swap(letter):\n      \
    \  if letter in VOWELS:\n            vowelIndex = VOWELS.index(letter)\n     \
    \       return VOWELS[vowelIndex+2]\n        else:\n            return letter\n\
    \    \n    def substituteVowel(message):\n        for i,letter in enumerate(message):\n\
    \            message[i] = swap(letter)\n        return ''.join(message)\n    \n\
    \    return substituteVowel(message)\n</cell>\n<cell>\nencode(['This', 'is', 'a',\
    \ 'message'])\n</cell>\n<cell>", "    return ''.join([\n        letter\n     \
    \   for letter in message\n        if letter in LETTERS\n    ]) + ''.join([\n\
    \        letter\n        for letter in message\n        if letter in VOWELS\n\
    \    ]).upper().replace(\n        letter,\n        LETTERS[VOWELS.index(letter)\
    \ - 2]\n    )\n\n", "    pass\n", "    # Convert message string into list of characters\
    \ \n    message = message.upper()\n    message = list(message)\n    \n    # Change\
    \ all letters to lowercase\n    message = [x.lower() for x in message]\n    \n\
    \    # Iterate through each letter in message, and change vowels based on \n \
    \   # its position in the alphabet. \n    # Example: 'a' position is 0, so it's\
    \ 'e', so letters are changed to 'e'. \n    for i in range(0, len(message)):\n\
    \        letter = message[i]\n        letter = letter.lower()\n        \n    \
    \    # Convert to lowercase \n        if letter in vowels: \n            letter\
    \ = letter.upper()\n        \n        # Iterate through each vowel in alphabet,\
    \ find its index\n        # in message and change to letter at that position\n\
    \        for j in range(0, len(vowels)):\n            vowel = vowels[j]\n    \
    \        if letter == vowel:\n                letter = message[i + j]\n      \
    \          \n        # Replace the vowel\n        message[i] = letter\n      \
    \  \n    # Join the message together and convert to string\n    message = \"\"\
    .join(message)\n    \n    # Return the encoded string\n    return message\n\n",
  "    \n    # Write your code here\n\n    encoded_message = ''\n    for letter in\
    \ message:\n        if letter in VOWELS:\n            i = VOWELS.index(letter)\n\
    \            encoded_message += VOWELS[(VOWELS.index(VOWELS[i]) + i) % VOWELS.len()]\
    \ \n        else:\n            encoded_message += letter\n    return encoded_message\n",
  "    pass\n\n@check", "    def encode(message: str) -> str:\n        mapping = {'a':\
    \ '@', 'e': '!', 'i': '%', 'o': '(', 'u': '*', 'v': ')', 'y': '1', 's': '2', 'd':\
    \ '3'}\n        message = message.lower()\n        new_message = ''\n        for\
    \ char in message:\n            if char not in mapping:\n                new_message\
    \ += char\n            else:\n                letter = mapping[char]\n       \
    \         places_ahead = 0\n                for i in mapping:\n              \
    \      if char == i:\n                        places_ahead += 1\n            \
    \    new_message += letter * places_ahead\n        return new_message\n    \n\
    \    return encode(message)\n</cell>\n<cell>\nencoded = encode('test') \nencoded\n\
    </cell>\n<text>\nThe encode function takes in a string and returns the encoded\
    \ version. Now that we have written the encode function, let's run it on the original\
    \ message and see how it works.\n\n\n</text>\n<cell>\noriginal_message = input('Enter\
    \ a message: ')\noriginal_message\n</cell>\n<cell>\nencoded_message = encode(original_message)\n\
    encoded_message\n</cell>\n<text>\nWe have successfully encoded the message using\
    \ our encode function! Let's try to do it on one more message.\n\n\n</text>\n\
    <cell>\nencoded_message = encode('This is a message')\nencoded_message\n</cell>\n\
    <text>\nNow that we've done this, let's use our encode function to write a function\
    \ called decode that takes a message and decodes it. We will have to write another\
    \ encode function to do this step.\n\n\n</text>\n<cell>", "    return ''.join(\n\
    \        \n        \n    \n        \n    )\n    ", "    vowels = ('a', 'e', 'i',\
    \ 'o', 'u')\n    \n    def swap_case(message: str) -> str:\n        return \"\"\
    .join(message.upper() if letter in vowels else \n                        message.lower()\
    \ if letter in 'AEIOU' else \n                        letter for letter in message)\n\
    \    \n    swap_case_message = swap_case(message)\n    \n    vowel_locations =\
    \ {\n        'a': [1, 3],\n        'e': [3, 6],\n        'i': [6, 9],\n      \
    \  'o': [9, 12],\n        'u': [12, 15]\n    }\n    \n    def swap_vowels(message:\
    \ str) -> str:\n        return \"\".join(message[a:b] for a, b in vowel_locations.items())\n\
    \    \n    swap_vowels_message = swap_vowels(swap_case_message)\n    \n    return\
    \ swap_vowels_message\n</cell>\n<cell>\nencode(input('Type in your message: '))\n\
    </cell>\n<text>\nDifficulty: Medium\n\n</text>\n<text>\nWrite a function that\
    \ will take in a message and count how many \nof each letter there are. \nAsk\
    \ the user to enter a message. \nUse a for loop to write your function one letter\
    \ at a time. \nDon't hardcode the positions of each letter.\n\nYou can either\
    \ use a dictionary or a list to store the letter counts.\n\nExample: \n\nletters\
    \ = {\"h\": 5, \"e\": 3, \"l\": 6}\n\n\nInput: \"Hello! Hi! Hi! Hi!\"\n\nOutput:\
    \ \nh=5 e=3 l=6\n\n\n</text>\n<cell>", "    message = list(message)\n    for i,\
    \ letter in enumerate(message):\n        if letter in 'AEIOU':\n            letter2\
    \ = message[i+2]\n            if letter2 in 'AEIOU':\n                letter3\
    \ = message[i+3]\n                letter2 = letter3.upper() if letter3 == letter2\
    \ else letter2.upper()\n                message[i] = letter\n                message[i+2]\
    \ = letter2\n    return ''.join(message)\n</cell>\n<cell>", "    message = message.lower()\n\
    \    message = message.swapcase()\n    message = message.replace('a', 'A')\n \
    \   message = message.replace('e', 'E')\n    message = message.replace('i', 'I')\n\
    \    message = message.replace('o', 'O')\n    message = message.replace('u', 'U')\n\
    \    message = message.replace('l', 'L')\n    message = message.replace('n', 'N')\n\
    \    message = message.replace('s', 'S')\n    message = message.replace('d', 'D')\n\
    \    message = message.replace('g', 'G')\n    message = message.replace('h', 'H')\n\
    \    message = message.replace('j', 'J')\n    message = message.replace('k', 'K')\n\
    \    message = message.replace('f', 'F')\n    message = message.replace('z', 'Z')\n\
    \    message = message.replace('y', 'Y')\n    message = message.replace('v', 'V')\n\
    \    message = message.replace('b', 'B')\n    message = message.replace('r', 'R')\n\
    \    message = message.replace('w', 'W')\n    message = message.replace('l', 'L')\n\
    \    message = message.replace('m', 'M')\n    message = message.replace('o', 'O')\n\
    \    message = message.replace('!', '!')\n    message = message.replace('?', '?')\n\
    \    message = message.replace('.', '.')\n    message = message.replace('?', '?')\n\
    \    return message\n", "    return ''.join([\n        chr(ord(letter) + 2 * (\n\
    \            ord(letter) - ord('A'))\n        )\n        for letter in message\n\
    \    ])\n", "    vowels = 'aeiouAEIOU'\n    \n    mapping = {\n        't':'t',\n\
    \        'a':'a',\n        's':'s',\n        'k':'k',\n        'h':'h',\n    \
    \    'g':'g',\n        'c':'c',\n        'g':'g',\n        'm':'m',\n        'g':'g',\n\
    \        's':'s',\n        'h':'h',\n        'k':'k',\n        'm':'m',\n    \
    \    'e':'e',\n        'a':'a',\n        'e':'e',\n        'i':'i',\n        'o':'o',\n\
    \        'u':'u'\n    }\n\n    message = message.upper()\n    \n    for c in message:\n\
    \        letter = mapping[c]\n        i = vowels.find(letter)\n        if i >\
    \ -1:\n            letter = vowels[i+2]\n        message = message.replace(c,\
    \ letter, 1)\n        \n    return message\n\n", "    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    vowels = 'AEIOU'\n    \n    def swap(char: str) -> str:\n        return alphabet[alphabet.index(char)\
    \ + 1]\n    \n    def substitute(char: str) -> str:\n        return alphabet[alphabet.index(vowels.index(1))\
    \ - alphabet.index(vowels.index(0))]\n    \n    return ''.join([substitute(c)\
    \ for c in message if c.lower() in alphabet])\n</cell>\n<cell>\nencode(text[0])\n\
    </cell>\n<cell>\nencode(text[1])\n</cell>\n<cell>\nencode(text[2])\n</cell>\n\
    <cell>\nencode(text[3])\n</cell>\n<cell>\nencode(text[4])\n</cell>\n<cell>\nencode(text[5])\n\
    </cell>\n<cell>\nencode(text[6])\n</cell>\n<cell>\nencode(text[7])\n</cell>\n\
    <cell>\nencode(text[8])\n</cell>\n<cell>\nencode(text[9])\n</cell>\n<cell>\nencode(text[10])\n\
    </cell>\n<cell>\nencode(text[11])\n</cell>\n<cell>\nencode(text[12])\n</cell>\n\
    <cell>\nencode(text[13])\n</cell>\n<cell>\nencode(text[14])\n</cell>\n<cell>\n\
    encode(text[15])\n</cell>\n<cell>\nencode(text[16])\n</cell>\n<cell>\nencode(text[17])\n\
    </cell>\n<cell>\nencode(text[18])\n</cell>\n<cell>\nencode(text[19])\n</cell>\n\
    <cell>\nencode(text[20])\n</cell>\n<cell>\nencode(text[21])\n</cell>\n<cell>\n\
    encode(text[22])\n</cell>\n<cell>\nencode(text[23])\n</cell>\n<cell>\nencode(text[24])\n\
    </cell>\n<cell>\nencode(text[25])\n</cell>\n<cell>\nencode(text[26])\n</cell>\n\
    <cell>\nencode(text[27])\n</cell>\n<cell>\nencode(text[28])\n</cell>\n<cell>\n\
    encode(text[29])\n</cell>\n<cell>\nencode(text[30])\n</cell>\n<cell>\nencode(text[31])\n\
    </cell>\n<cell>\nencode(text[32])\n</cell>", "    return ''.join([ascii_lowercase[message.index(i)]\
    \ if i in message.lower() else ascii_lowercase[message.index(i)] for i in range(len(message))])\n\
    \n</cell>\n<cell>", "    \n    def encode(message: str) -> str:\n        \n  \
    \      def encode(message: str) -> str:\n            \n            message_split\
    \ = message.split()\n            \n            letter_count = {}\n           \
    \ \n            for i in message:\n                letter_count[i] = letter_count.get(i,\
    \ 0) + 1\n            \n            \n            encoded_message = ''\n     \
    \       \n            for letter in message_split:\n                \n       \
    \         letter_count[letter] = letter_count[letter] % 2\n                \n\
    \                encoded_message += letter\n                \n               \
    \ if letter_count[letter] == 1:\n                    letter_count[letter] = letter_count.get(letter,\
    \ 0) + 1\n                    \n                    encoded_message += letter_count.get(letter,\
    \ 0) * 2\n                    \n            \n            return encoded_message\n\
    \        \n        return encode(message)\n    \n    return encode(message)\n\
    </cell>\n<cell>\nencode(message)\n</cell>\n<text>\nExercise: write a function\
    \ called decode that takes a message encoded by encode, and decodes it. Again\
    \ assume only letters. \nHint: use str.translate and a dictionary of {'a':'A',\
    \ ... 'z':'Z'}\nThen you can use that function to decode the message you encoded.\n\
    \n\n</text>\n<cell>", "    encoded = \"\"\n    vowels = \"AEIOUaeiou\"\n    for\
    \ letter in message:\n        if letter.upper() in vowels:\n            position\
    \ = vowels.index(letter.upper())\n            encoded += letter.upper() if position\
    \ < 2 else letter.lower()\n        else:\n            encoded += letter\n    return\
    \ encoded\n", "    vowels = ['A', 'E', 'I', 'O', 'U']\n    replacements = {\n\
    \        'a': 'A',\n        'e': 'E',\n        'i': 'I',\n        'o': 'O',\n\
    \        'u': 'U',\n        'k': 'K',\n        's': 'S',\n        'c': 'C',\n\
    \        'g': 'G',\n        'm': 'M',\n        'y': 'Y',\n        't': 'T',\n\
    \    }\n    \n    message = message.upper()\n    replaced_message = ''\n\n   \
    \ for letter in message:\n        replaced_message += replacements.get(letter,\
    \ letter)\n\n    return replaced_message\n    ", "    \n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n\n    # create empty dict to store final encoded message\n\
    \    encodedMessage = {}\n\n    # iterate over all chars in message\n    for char\
    \ in message:\n        # replace all vowels with letter in alphabet that appears\
    \ two places ahead\n        encodedMessage[char] = alphabet[alphabet.index(char)\
    \ + 2]\n    \n    # add space between encoded chars\n    for char in alphabet:\n\
    \        encodedMessage[char] += ' '\n    \n    # add space between vowels\n \
    \   for char in vowels:\n        encodedMessage[char] += ' '\n    \n    # add\
    \ space between consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n    \n    # add space between 2 letters \n    for char in alphabet:\n\
    \        encodedMessage[char] += ' '\n    \n    # add space between 2 vowels\n\
    \    for char in vowels:\n        encodedMessage[char] += ' '\n    \n    # add\
    \ space between 2 consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n    \n    # add space between 2 letters\n    for char in alphabet:\n\
    \        encodedMessage[char] += ' '\n    \n    # add space between 2 vowels\n\
    \    for char in vowels:\n        encodedMessage[char] += ' '\n\n    # add space\
    \ between 2 consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n    \n    # add space between 2 letters\n    for char in alphabet:\n\
    \        encodedMessage[char] += ' '\n    \n    # add space between 2 vowels\n\
    \    for char in vowels:\n        encodedMessage[char] += ' '\n    \n    # add\
    \ space between 2 consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n\n    # add space between 2 letters\n    for char in alphabet:\n   \
    \     encodedMessage[char] += ' '\n    \n    # add space between 2 vowels\n  \
    \  for char in vowels:\n        encodedMessage[char] += ' '\n    \n    # add space\
    \ between 2 consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n    \n    # add space between 2 letters\n    for char in alphabet:\n\
    \        encodedMessage[char] += ' '\n    \n    # add space between 2 vowels\n\
    \    for char in vowels:\n        encodedMessage[char] += ' '\n    \n    # add\
    \ space between 2 consonants\n    for char in alphabet:\n        encodedMessage[char]\
    \ += ' '\n    \n    # add space between 2 letters\n    for char in alphabet:\n\
    \        encoded", "    message = message.upper()\n    message = message.replace('A',\
    \ 'a')\n    message = message.replace('B', 'b') \n    message = message.replace('C',\
    \ 'c') \n    message = message.replace('D', 'd') \n    message = message.replace('E',\
    \ 'e') \n    message = message.replace('F', 'f') \n    message = message.replace('G',\
    \ 'g') \n    message = message.replace('H', 'h') \n    message = message.replace('I',\
    \ 'i') \n    message = message.replace('J', 'j') \n    message = message.replace('K',\
    \ 'k') \n    message = message.replace('L', 'l') \n    message = message.replace('M',\
    \ 'm') \n    message = message.replace('N', 'n') \n    message = message.replace('O',\
    \ 'o') \n    message = message.replace('P', 'p') \n    message = message.replace('Q',\
    \ 'q') \n    message = message.replace('R', 'r') \n    message = message.replace('S',\
    \ 's') \n    message = message.replace('T', 't') \n    message = message.replace('U',\
    \ 'u') \n    message = message.replace('V', 'v') \n    message = message.replace('W',\
    \ 'w') \n    message = message.replace('X', 'x') \n    message = message.replace('Y',\
    \ 'y') \n    message = message.replace('Z', 'z') \n    message = message.replace('0',\
    \ 'a') \n    message = message.replace('1', 'b') \n    message = message.replace('2',\
    \ 'c') \n    message = message.replace('3', 'd') \n    message = message.replace('4',\
    \ 'e') \n    message = message.replace('5', 'f') \n    message = message.replace('6',\
    \ 'g') \n    message = message.replace('7', 'h') \n    message = message.replace('8',\
    \ 'i') \n    message = message.replace('9', 'j') \n    message = message.replace('\
    \ ', '') \n    message = message.replace('.', '')\n    message = message.replace('?',\
    \ '')\n    message = message.replace('!', '')\n    message = message.replace('\
    \ ', '') \n    return message\n\n", "    \n    def encode_func(x: str) -> str:\n\
    \        \"\"\"\n        Encode a message using a lookup table that swaps case\
    \ \n        of all letters, replaces all vowels in message with letter \n    \
    \    that appears 2 places ahead of vowel in the english alphabet.\n        \"\
    \"\"\n        \n        result = ''\n        for letter in x:\n            if\
    \ letter.islower():\n                result += swapcase(letter)\n            else:\n\
    \                result += letter.lower()\n        return result\n\n    encode_func(message)\n\
    \    return encode_func(message)\n</cell>\n<cell>\nencode = encode(message)\n\
    encode(encode)\n</cell>\n<cell>", "    return message.replace('A', 't').replace('E',\
    \ 'g').replace('I', 's').replace('O', 'p').replace('U', 'k').replace('C', 'g').replace('B',\
    \ 'h').replace('F', 'r').replace('J', 's').replace('M', 'g').replace('O', 'p').replace('L',\
    \ 'l').replace('S', 'g').replace('V', 'k').replace('X', 'd')\n</cell>\n<cell>\n\
    encode.__doc__\n</cell>\n<cell>", "    \n    encoded = \"\"\n    \n    # iterate\
    \ over each letter in the message\n    for letter in message:\n        # get the\
    \ index of letter in the english alphabet\n        alpha_index = alphabet.index(letter.lower())\n\
    \        \n        # get the index of the next letter\n        alpha_next_index\
    \ = alpha.index(letter.upper())\n        \n        # get the next letter from\
    \ english alphabet\n        next_letter = alphabet[alpha_next_index]\n       \
    \ \n        # if letter has vowels, swap with the vowel that appears 2 places\
    \ ahead\n        if letter in vowels:\n            encoded_letter = alpha[alpha_index\
    \ + alpha_index + 2]\n            encoded = encoded + encoded_letter.lower() +\
    \ next_letter\n        \n        # append letter to encoded message\n        else:\n\
    \            encoded = encoded + letter.lower() + next_letter\n        \n    return\
    \ encoded\n\n", "    \n    def convert(letter: str, vowels: str) -> str:\n   \
    \     # find the position of the vowel given by letter\n        letter_index =\
    \ letters.index(letter)\n        \n        # find the index of the next vowel\
    \ given by letter+1\n        next_letter_vowel_index = letter_index + 1\n    \
    \    \n        # get the letters 2 places ahead of the vowel\n        next_letter_vowel\
    \ = letters[next_letter_vowel_index]\n        \n        # check if the letter\
    \ that followed the vowel was also a vowel\n        if letters[next_letter_vowel_index+1:].count(next_letter_vowel)\
    \ > 1:\n            # found a consonant\n            \n            # get the index\
    \ of the letter in the message\n            letter_index = message.index(letter)\n\
    \            \n            # get the vowel from the message at the index \n  \
    \          # of the letter in the message\n            vowel = message[letter_index]\n\
    \            \n            # swap case\n            next_letter = letter.swapcase()\n\
    \            \n            # get the index of the vowel from the message at the\
    \ index \n            # of the letter in the message\n            next_vowel_index\
    \ = message.index(next_letter)\n            \n            # get the letters 2\
    \ places ahead of the vowel\n            next_vowel = message[next_vowel_index]\n\
    \            \n            # swap case\n            next_vowel = next_vowel.swapcase()\n\
    \            \n            # find the index of the next vowel given by letter+1\n\
    \            next_letter_vowel_index = letter_index + 1\n            \n      \
    \      # get the letters 2 places ahead of the vowel\n            next_letter_vowel\
    \ = letters[next_letter_vowel_index]\n            \n            # swap case\n\
    \            next_letter_vowel = next_letter_vowel.swapcase()\n            \n\
    \            # get the index of the next vowel given by letter+1\n           \
    \ next_letter_vowel_index = letter_index + 1\n            \n            # get\
    \ the letters 2 places ahead of the vowel\n            next_letter_vowel = letters[next_letter_vowel_index]\n\
    \            \n            # swap case\n            next_letter_vowel = next_letter_vowel.swapcase()\n\
    \            \n            # get the vowel from the message at the index \n  \
    \          # of the letter in the message\n            next_vowel = message[next_vowel_index]\n\
    \            \n            # swap case\n            next_vowel = next_vowel.swapcase()\n\
    \            \n            # return the converted message\n            return\
    \ letter.join([next_vowel, next_letter_vowel, next_letter])\n        \n      \
    \  else:\n            # found a vowel\n            # return the letter\n     \
    \       return letter\n            \n    # get the list of all vowels in the alphabet\n\
    \    vowels = [letter for letter in 'AEIOU']\n    \n    # get the message\n  \
    \  message = message.upper()\n    \n    # convert the message to uppercase letters\n\
    \    converted_message = message.upper()\n    \n    # go through each letter in\
    \ the message\n    for letter in message:\n        \n        # if the ", "   \
    \ \n    vowels = \"AEIOUaeiou\"\n    \n    letter_map = {\n        \"A\": \"E\"\
    ,\n        \"E\": \"A\",\n        \"I\": \"O\",\n        \"O\": \"I\",\n     \
    \   \"U\": \"A\",\n    }\n    \n    encoded_message = \"\"\n    \n    for letter\
    \ in message:\n        if letter in letter_map:\n            encoded_message +=\
    \ letter_map[letter]\n        else:\n            encoded_message += letter\n \
    \   \n    return encoded_message\n", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    \n    \n    def swapCase(message: str) -> str:\n  \
    \      return message.swapcase()\n    \n    def swapVowels(message: str) -> str:\n\
    \        return ''.join(map(lambda c: alphabet[alphabet.index(c) + 2], \n    \
    \                       message))\n    \n    def encode(message: str) -> str:\n\
    \        return swapCase(swapVowels(message))\n    \n    return encode(message)\n\
    </cell>\n<text>\nNow that you have a function that can encode your messages, let's\
    \ see how it works.\n\n\n</text>\n<cell>\nencoded = encode('This is a message')\n\
    print(encoded)\n</cell>\n<text>\nLooks good! It took our message, and encoded\
    \ it using the swapCase function and the swapVowels function, and returned the\
    \ encoded message.\n\n\n</text>\n<text>\nTry it yourself\nWrite a function encode\
    \ that takes your message and returns the encoded message using the encode function\
    \ you created above.\n\n\n</text>\n<cell>", "    return ''.join([\n        char\
    \ if index != 0 else letter_map[char]\n        for index, char in enumerate(message)\n\
    \    ]) \n\n</cell>\n<text>\nA function that encodes a string like this will take\
    \ in \nthe message and output the encoded message\n\n\n</text>\n<cell>\nencode\
    \ = encode(test_string)\nencode\n</cell>\n<text>\nNow that we have this encoded\
    \ string we can test it \nusing the encode function\n\n\n</text>\n<cell>\nassert\
    \ encode(test_string) == encoded_string\n</cell>\n<text>\nNow we can repeat the\
    \ above exercise for the next string.\nWe do not have to rewrite this code, we\
    \ can just use the encode \nfunction to encode the new message\n\n\n</text>\n\
    <cell>\nencoded_message = encode(message)\nencoded_message\n</cell>\n<text>\n\
    Now we have two strings, encoded_message and encoded_string, \nwe can test our\
    \ encode function and verify that it works as expected.\n\n\n</text>\n<cell>\n\
    assert encode(message) == encoded_message\nassert encoded_string == encoded_message\n\
    </cell>\n<text>\nQuestion 3\nWe can use the same encode function to encode both\
    \ our message\nand the test string.\n\n\n</text>\n<cell>\nencoded_message = encode(test_string)\n\
    encoded_test_string = encode(test_string)\n</cell>\n<text>\nNow we can compare\
    \ our encoded test string with \nencoded_message and encoded_message with encoded_test_string\n\
    \n\n</text>\n<cell>\nassert encoded_message == encoded_test_string\nassert encoded_string\
    \ == encoded_test_string\n</cell>\n<text>\nNow let's create a function that can\
    \ encode a string into \na capital case version of the string.\n\n\n</text>\n\
    <cell>", "    return ''.join(message.lower().replace(letter, letters[(letters.index(letter)\
    \ + 2) % len(letters)] for letter in message))\n", "    return ''.join([\n   \
    \             chr((ord(c) + 1) if c in 'aeiouAEIOU' else ord(c)) for c in message\n\
    \            ])\n</cell>\n<cell>", "    \n    # Replace vowels with their position\
    \ 2 places ahead\n    message = message.lower()\n    \n    # Create a dictionary\
    \ that maps letters to their positions\n    letters = {}\n    for letter in message:\n\
    \        if letter not in letters:\n            letters[letter] = len(letters)\n\
    \    \n    translated = \"\"\n    for letter in message:\n        position = letters[letter]\n\
    \        if letter in VOWELS:\n            translated += LETTER_WITH_VOWELS[position]\n\
    \        else:\n            translated += LETTERS[position]\n    return translated\n",
  "    encoded_message = \"\"\n    for letter in message:\n        if letter.islower():\n\
    \            letter_index = alphabet.index(letter.upper())\n            new_letter\
    \ = alphabet[(letter_index-2)%len(alphabet)]\n            encoded_message += new_letter\
    \ + letter.lower()\n        elif letter.isupper():\n            letter_index =\
    \ alphabet.index(letter.lower())\n            new_letter = alphabet[(letter_index+1)%len(alphabet)]\n\
    \            encoded_message += new_letter + letter.upper()\n        else:\n \
    \           encoded_message += letter\n    return encoded_message\n", "    vowels\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    mapping = {\"a\" : \"a\", \"e\" :\
    \ \"e\", \"i\" : \"i\", \"o\" : \"o\", \"u\" : \"u\"}\n    result = \"\"\n   \
    \ for letter in message:\n        if letter.lower() in vowels:\n            letter\
    \ = mapping[letter.lower()]\n        result += letter\n    return result\n\n",
  "    def encode1(message: str) -> str:\n        return ''.join([letter for letter\
    \ in message if letter.isalpha()])\n\n    def encode2(message: str) -> str:\n\
    \        encoded_message = ''\n        for letter in message:\n            if\
    \ letter.islower():\n                encoded_message += letter\n            elif\
    \ letter.isupper():\n                encoded_message += letter.upper()\n     \
    \       else:\n                encoded_message += letter.lower()\n           \
    \     encoded_message += letter[0].upper() + letter[1:]\n        return encoded_message\n\
    \n    def encode3(message: str) -> str:\n        encoded_message = ''\n      \
    \  for letter in message:\n            if letter.isalpha():\n                encoded_message\
    \ += letter\n            elif letter.isupper():\n                encoded_message\
    \ += letter.upper()\n            else:\n                encoded_message += letter.lower()\n\
    \                encoded_message += letter[0].upper() + letter[1:]\n        return\
    \ encoded_message\n\n    def encode4(message: str) -> str:\n        encoded_message\
    \ = ''\n        for letter in message:\n            if letter.islower():\n   \
    \             encoded_message += letter\n            elif letter.isupper():\n\
    \                encoded_message += letter.upper()\n            else:\n      \
    \          encoded_message += letter.lower()\n                encoded_message\
    \ += letter[0].upper() + letter[1:]\n        return encoded_message\n\n    def\
    \ encode5(message: str) -> str:\n        encoded_message = ''\n        for letter\
    \ in message:\n            if letter.isalpha():\n                encoded_message\
    \ += letter\n            elif letter.isupper():\n                encoded_message\
    \ += letter.upper()\n            else:\n                encoded_message += letter.lower()\n\
    \                encoded_message += letter[0].upper() + letter[1:]\n        return\
    \ encoded_message\n\n    def encode6(message: str) -> str:\n        encoded_message\
    \ = ''\n        for letter in message:\n            if letter.islower():\n   \
    \             encoded_message += letter\n            elif letter.isupper():\n\
    \                encoded_message += letter.upper()\n            else:\n      \
    \          encoded_message += letter.lower()\n                encoded_message\
    \ += letter[0].upper() + letter[1:]\n        return encoded_message\n\n    def\
    \ encode7(message: str) -> str:\n        encoded_message = ''\n        for letter\
    \ in message:\n            if letter.islower():\n                encoded_message\
    \ += letter\n            elif letter.isupper():\n                encoded_message\
    \ += letter.upper()\n            else:\n                encoded_message += letter.lower()\n\
    \                encoded_message += letter[0].upper() + letter[1:]\n        return\
    \ encoded_message\n\n    encoded_message = encode1(message)\n    encoded_message\
    \ = encode2(encoded_message)\n    encoded_message = encode3(encoded_message)\n\
    \    encoded_message = encode4(encoded_message)\n    encoded_message = encode5(encoded_message)\n\
    \    encoded_message = encode6(encoded_message)\n    encoded_message = encode7(encoded_message)\n\
    \n    return encoded_message\n\n", "    encoded_message = ''\n    letter_map =\
    \ {\n        'A': '@',\n        'B': '@',\n        'C': '@',\n        'D': '@',\n\
    \        'E': '@',\n        'F': '@',\n        'G': '@',\n        'H': '@',\n\
    \        'I': '@',\n        'J': '@',\n        'K': '@',\n        'L': '@',\n\
    \        'M': '@',\n        'N': '@',\n        'O': '@',\n        'P': '@',\n\
    \        'Q': '@',\n        'R': '@',\n        'S': '@',\n        'T': '@',\n\
    \        'U': '@',\n        'V': '@',\n        'W': '@',\n        'X': '@',\n\
    \        'Y': '@',\n        'Z': '@'\n    }\n    vowels = ['A','E','I','O','U']\n\
    \    for char in message:\n        if char in letter_map:\n            encoded_message\
    \ += letter_map[char]\n        elif char in vowels:\n            encoded_message\
    \ += letter_map[char.upper()]\n        else:\n            encoded_message += char\n\
    \    return encoded_message\n\n", "    return ''.join(\n        message.lower()\
    \ \n        .replace(char.upper(), 't') \n        .replace(char.lower(), 'h')\
    \ \n        .replace(char.lower(), 's')\n        .replace(char.lower(), 'k')\n\
    \        .replace(char.lower(), 'g') \n        .replace(char.lower(), 'c')\n \
    \       .replace(char.lower(), 'm') \n        .replace(char.lower(), 'g')\n  \
    \      .replace(char.lower(), 's')\n        .replace(char.lower(), 'c')\n    \
    \    .replace(char.lower(), 'g')\n        .replace(char.lower(), 's') \n     \
    \   .replace(char.lower(), 'h') \n        .replace(char.lower(), 'k')\n      \
    \  .replace(char.lower(), 's')\n        .replace(char.lower(), 'c')\n        .replace(char.lower(),\
    \ 'g')\n        .replace(char.lower(), 's') \n        .replace(char.lower(), 'k')\n\
    \        .replace(char.lower(), 'g')\n        .replace(char.lower(), 's')\n  \
    \      .replace(char.lower(), 'c') \n        .replace(char.lower(), 'm')\n   \
    \ )\n</cell>\n<cell>\nencode(\n    \"test\"\n)\n</cell>\n<cell>", "    \n    vowels\
    \ = ['a','e','i','o','u']\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    message = message.replace(\" \",\
    \ \"\")\n    message = message.lower()\n    new_message = \"\"\n    for i in range(len(message)):\n\
    \        new_message += message[i].upper()\n    for letter in \"AEIOUaeiou\":\n\
    \        new_message += letter.upper() if letter.upper() in message else letter\n\
    \    \n    return new_message\n\n", "    # your code here\n    return \"\".join([chr((ord(c)\
    \ - ord('a')).upper()\n                         + 2 * (ord(c) - ord('a') + 1)\n\
    \                         + 2 * (ord(c) - ord('A') + 1)\n                    \
    \     + 2 * (ord(c) - ord('a'))\n                         + 2 * (ord(c) - ord('A')\
    \ + 1))\n                    for c in message])\n\n", "    \n    return \"\".join([letter.replace(letter,\
    \ \n                                   letter_2places_ahead[letter]) \n      \
    \               for letter in message])\n</cell>\n<cell>", "    return ''.join([letter\
    \ * 2\n                     for letter in message\n                     if letter\
    \ not in VOWELS])\n    \n</cell>\n<cell>", "    encoded_message = ''\n    \n \
    \   for letter in message:\n        if letter in VOWELS:\n            vowel_position\
    \ = Vowels.find(letter)\n            vowel_position_2 = Vowels.find(letter,vowel_position+1)\n\
    \            if vowel_position_2 > -1:\n                letter_2 = Vowels[vowel_position_2]\n\
    \                if letter_2.isupper() and vowel_position == vowel_position_2:\n\
    \                    letter_2 = 'A'\n                elif letter_2.islower() and\
    \ vowel_position == vowel_position_2:\n                    letter_2 = 'a'\n  \
    \              else:\n                    letter_2 = letter.upper()\n        \
    \        encoded_message += letter_2\n            else:\n                encoded_message\
    \ += letter.upper()\n        else:\n            encoded_message += letter.upper()\n\
    \        \n    return encoded_message\n", "    vowels = 'aeiouAEIOU'\n    def\
    \ encode_case(message: str) -> str:\n        result = ''\n        for letter in\
    \ message:\n            if letter in vowels:\n                result += letter.upper()\n\
    \            else:\n                result += letter.lower()\n        return result.upper()\n\
    \    return encode_case(message)\n", "    \n    encoded = \"\"\n    vowels = \"\
    aeiouAEIOU\"\n    for char in message:\n        if char in vowels:\n         \
    \   position2 = alphabet.find(char) + 1\n            encoded += alphabet[position2]\n\
    \        else:\n            position2 = alphabet.find(char) + 2\n            encoded\
    \ += alphabet[position2]\n    return encoded\n\n", "    \n    # define what letters\
    \ correspond to what consonants\n    letters = ['a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'y', 'z']\n\n    # define\
    \ the rules for what happens\n    rules = {\n        'a': ' ',\n        'b': '\
    \ ',\n        'c': ' ',\n        'd': ' ',\n        'e': ' ',\n        'f': 'F',\n\
    \        'g': 'G',\n        'h': ' ',\n        'i': ' ',\n        'j': ' ',\n\
    \        'k': ' ',\n        'l': ' ',\n        'm': 'M',\n        'n': 'N',\n\
    \        'o': ' ',\n        'p': ' ',\n        'q': ' ',\n        'r': ' ',\n\
    \        's': ' ',\n        't': 'T',\n        'u': ' ',\n        'v': ' ',\n\
    \        'w': ' ',\n        'x': ' ',\n        'y': ' ',\n        'z': ' '\n \
    \   }\n\n    # define what letters correspond to what vowels\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n\n    # convert the message to lowercase\n    message =\
    \ message.lower()\n\n    # go through each character in the message\n    for character\
    \ in message:\n        # find the letter that 2 letters ahead of the vowel \n\
    \        # that is being looked for\n        vowel_letter = vowels[characters.index(character)]\n\
    \n        # if the letter that 2 letters ahead of the vowel is in the rules, \n\
    \        # replace it with the letter that appears 2 places ahead of the vowel\
    \ in the alphabet\n        if letters[characters.index(vowel_letter)] in rules:\n\
    \            character = rules[letters[characters.index(vowel_letter)]]\n    \n\
    \    return character\n</code>\nThis should do what you want. \nYou can test it\
    \ out here.\n<|/ a tags=function,python |>\n<| c |>\nI think he wants something\
    \ with every vowel replaced except the vowels that are 2 letters ahead of the\
    \ vowel. So in his example, 'This' should return 'tHKS KS C MGSSCGG'.\n<|/ c |>\n\
    <| c |>\nYes, that's exactly what I want.  I'll try this and let you know if it\
    \ works.\n<|/ c |>\n<| c |>\nI changed it to look like my answer, but I just realized\
    \ I had ", "    return ''.join([\n        vowel.upper() if vowel in 'aeiouAEIOU'\
    \ \n        else vowel.lower()\n        for vowel in message\n    ])\n", "   \
    \ \n    # get the index of each vowel in the message\n    vowels_indices = list((index,\
    \ i) for i, v in enumerate(message) if v == 'A' or v == 'E' or v == 'I' or v ==\
    \ 'O' or v == 'U')\n    # make a new list with each letter being the value of\
    \ the index plus 1 \n    new_list = [index + 1] + [v for (index, v) in vowels_indices]\n\
    \    # make a new list with each letter being the value of the index minus 1 \n\
    \    backwards_new_list = [index - 1] + [v for (index, v) in vowels_indices]\n\
    \    # make a new list with each letter being the value of each letter in new_list\
    \ \n    # except the last letter in new_list\n    new_list[len(new_list)-1] =\
    \ letters[new_list[len(new_list)-1]]\n    \n    # create a list with the first\
    \ letter of the message in new_list\n    new_list_2 = [letters[v] for v in new_list]\n\
    \    # change the first letter in the list to match the value of the first letter\
    \ of the message\n    new_list_2[0] = message[0]\n    # create a new list with\
    \ each letter of backwards_new_list as its value\n    backwards_new_list_2 = [letters[v]\
    \ for v in backwards_new_list]\n    # change the first letter in the list to match\
    \ the value of the first letter of the message\n    backwards_new_list_2[0] =\
    \ message[0]\n    # concatenate new_list_2 and backwards_new_list_2 with a space\
    \ between them\n    return ' '.join([new_list_2, backwards_new_list_2])\n    ",
  "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiouAEIOU'\n    new_alphabet\
    \ = alphabet.replace(vowels, lambda v: _swaps[v])\n    encoded_message = ''\n\
    \    for char in message:\n        if char in _swaps:\n            encoded_message\
    \ += _swaps[char]\n        elif char in alphabet:\n            encoded_message\
    \ += alphabet[alphabet.index(char) + 2]\n        else:\n            encoded_message\
    \ += char\n    return new_alphabet.join(encoded_message)\n    \n</cell>\n<cell>",
  "    \n    # Write code here\n    \n    return message\n</cell>\n<cell>", "    return\
    \ ''.join([\n        chr((ord(letter) + len(message) - ord('A') - 1) % (26 + 26))\n\
    \        for letter in message\n    ])\n", "    \n    def encode1(message):\n\
    \        message = message.casefold()\n        message = message.replace('a',\
    \ 'AE')\n        message = message.replace('e', 'AE')\n        message = message.replace('i',\
    \ 'AE')\n        message = message.replace('o', 'OE')\n        message = message.replace('u',\
    \ 'OE')\n        message = message.replace('A', 'AE')\n        message = message.replace('E',\
    \ 'AE')\n        message = message.replace('I', 'AE')\n        message = message.replace('O',\
    \ 'OE')\n        message = message.replace('U', 'OE')\n        message = message.replace('1',\
    \ 'AE')\n        message = message.replace('2', 'AE')\n        message = message.replace('3',\
    \ 'AE')\n        message = message.replace('4', 'AE')\n        message = message.replace('5',\
    \ 'AE')\n        message = message.replace('6', 'AE')\n        message = message.replace('7',\
    \ 'AE')\n        message = message.replace('8', 'AE')\n        message = message.replace('9',\
    \ 'AE')\n        message = message.replace('0', 'AE')\n        message = message.replace('.',\
    \ 'AE')\n        message = message.replace('+', 'AE')\n        message = message.replace('-',\
    \ 'AE')\n        message = message.replace('_', 'AE')\n        message = message.replace('(',\
    \ 'AE')\n        message = message.replace(')', 'AE')\n        message = message.replace(':',\
    \ 'AE')\n        message = message.replace(';', 'AE')\n        message = message.replace(',',\
    \ 'AE')\n        message = message.replace(':', 'AE')\n        message = message.replace('!',\
    \ 'AE')\n        message = message.replace('?', 'AE')\n        message = message.replace('\"\
    ', 'AE')\n        message = message.replace('=', 'AE')\n        message = message.replace('\"\
    ', 'AE')\n        message = message.replace('&', 'AE')\n        message = message.replace('<',\
    \ 'AE')\n        message = message.replace('>', 'AE')\n        message = message.replace('@',\
    \ 'AE')\n        message = message.replace('|', 'AE')\n        message = message.replace('(',\
    \ 'AE')\n        message = message.replace(')', 'AE')\n        message = message.replace('+',\
    \ 'AE')\n        message = message.replace('#', 'AE')\n        message = message.replace('$',\
    \ 'AE')\n        message = message.replace('%', 'AE')\n        message = message.replace('*',\
    \ 'AE')\n        message = message.replace('~', 'AE')\n        message = message.replace('^',\
    \ 'AE')\n        message = message.replace('\"', 'AE')\n        message = message.replace('`',\
    \ 'AE')\n        message = message.replace('~', 'AE')\n        message = message.replace('_',\
    \ 'AE')\n        message = message.replace('-', 'AE')\n        message = message.replace('`',\
    \ 'AE')\n        message = message.replace('~', 'AE')\n", "    \n    # a dictionary\
    \ to convert letters to numbers for swapping\n    letter_map = {\n        'A':\
    \ 0,\n        'B': 1,\n        'C': 2,\n        'D': 3,\n        'E': 4,\n   \
    \     'F': 5,\n        'G': 6,\n        'H': 7,\n        'I': 8,\n        'J':\
    \ 9,\n        'K': 10,\n        'L': 11,\n        'M': 12,\n        'N': 13,\n\
    \        'O': 14,\n        'P': 15,\n        'Q': 16,\n        'R': 17,\n    \
    \    'S': 18,\n        'T': 19,\n        'U': 20,\n        'V': 21,\n        'W':\
    \ 22,\n        'X': 23,\n        'Y': 24,\n        'Z': 25\n    }\n    \n    message\
    \ = message.upper()\n    \n    # encode each letter, with the letter that appears\
    \ 2 places ahead of\n    # it in the same position in the alphabet\n    return\
    \ ''.join(\n        letter_map[letter] if letter in letter_map else letter\n \
    \       for letter in message\n    )\n</cell>\n<cell>", "    \n    vowels = \"\
    aeiouAEIOU\"\n    \n    mapping = {\n        \"A\": \"A\",\n        \"B\": \"\
    B\",\n        \"C\": \"C\",\n        \"D\": \"D\",\n        \"E\": \"E\",\n  \
    \      \"F\": \"F\",\n        \"G\": \"G\",\n        \"H\": \"H\",\n        \"\
    I\": \"I\",\n        \"J\": \"J\",\n        \"K\": \"K\",\n        \"L\": \"L\"\
    ,\n        \"M\": \"M\",\n        \"N\": \"N\",\n        \"O\": \"O\",\n     \
    \   \"P\": \"P\",\n        \"Q\": \"Q\",\n        \"R\": \"R\",\n        \"S\"\
    : \"S\",\n        \"T\": \"T\",\n        \"U\": \"U\",\n        \"V\": \"V\",\n\
    \        \"W\": \"W\",\n        \"X\": \"X\",\n        \"Y\": \"Y\",\n       \
    \ \"Z\": \"Z\"\n    }\n    \n    def vowelswapper(message: str) -> str:\n    \
    \    \"\"\"\n        Function that takes a message and replaces all the vowels\
    \ \n        in that message with their letter that appears 2 places \n       \
    \ ahead of them\n        \"\"\"\n        \n        swapped = ''\n        \n  \
    \      for character in message:\n            if character in vowels:\n      \
    \          swapped += mapping[vowels[vowels.find(character)+1]]\n            else:\n\
    \                swapped += character\n                \n        return swapped\n\
    \n    return vowelswapper(message)\n</cell>\n<cell>\nencode('test')\n</cell>\n\
    <cell>", "    return ''.join([c if c.islower() else c.upper() if c.isupper() else\
    \ c.lower() for c in message])\n", "    message = message.lower()\n    message\
    \ = message.upper()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.replace('a',\
    \ 't')\n    message = message.replace('e', 'k')\n    message = message.replace('i',\
    \ 'i')\n    message = message.replace('o', 'k')\n    message = message.replace('u',\
    \ 'k')\n    message = message.replace('t', 'a')\n    message = message.replace('k',\
    \ 'a')\n    message = message.replace('a', 'a')\n    message = message.replace('e',\
    \ 'a')\n    message = message.replace('i', 'a')\n    message = message.replace('o',\
    \ 'a')\n    message = message.replace('u', 'a')\n    message = message.replace('h',\
    \ 'a')\n    message = message.replace('m', 'a')\n    message = message.replace('n',\
    \ 'a')\n    message = message.replace('s', 'a')\n    message = message.replace('c','a')\n\
    \    message = message.replace('g', 'a')\n    message = message.replace('g','g')\n\
    \    message = message.replace('o','g')\n    message = message.replace('h','g')\n\
    \    message = message.replace('m','g')\n    message = message.replace('n','g')\n\
    \    message = message.replace('s','g')\n    message = message.replace('g','t')\n\
    \    message = message.replace('s','s')\n    message = message.replace('k','s')\n\
    \    message = message.replace('a','s')\n    message = message.replace('l','s')\n\
    \    message = message.replace('c','s')\n    message = message.replace('o','s')\n\
    \    message = message.replace('f','s')\n    message = message.replace('v','s')\n\
    \    message = message.replace('v','v')\n    message = message.replace('f','v')\n\
    \    message = message.replace('v','f')\n    message = message.replace('r','f')\n\
    \    message = message.replace('r','r')\n    message = message.replace('f','r')\n\
    \    message = message.replace('r','r')\n    message = message.replace('t','r')\n\
    \    message = message.replace('g','r')\n    message = message.replace('c','r')\n\
    \    message = message.replace('o','r')\n    message = message.replace('r','r')\n\
    \    message = message.replace('o','o')\n    message = message.replace('c','o')\n\
    \    message = message.replace('g','o')\n    message = message.replace('k','o')\n\
    \    message = message.replace('a','o')\n    message = message.replace('l','o')\n\
    \    message = message.replace('c','o')\n    message = message.replace('g','o')\n\
    \    message = message.replace('k','k')\n    message = message.replace('a','k')\n\
    \    message = message.replace('l','k')\n    message = message.replace('c','k')\n\
    \    message = message.replace('g','k')\n    message = message.replace('k','k')",
  "    message = message.lower()\n    \n    vowels = \"aeiou\"\n    \n    # Case swap\n\
    \    vowel_pairs = zip(vowels, vowels[1:])\n    new_message = \"\".join(c for\
    \ c, _ in vowel_pairs) + message\n    \n    # Case replace\n    new_message =\
    \ \"\".join(c for c, _ in vowel_pairs) + new_message\n    \n    return new_message\n\
    </cell>\n<cell>\nencode(my_word)\n</cell>\n<cell>", "    vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    message = message.lower()\n    message\
    \ = message.swapcase()\n    for char in message:\n        index = vowels.index(char)\n\
    \        message += char if index == 1 else vowels[index - 2]\n    return message\n\
    \n", "    \n    # Write code here\n    # Make sure the message is a string\n \
    \   message = str(message)\n    \n    # Make sure the message only contains letters\n\
    \    for letter in message:\n        if letter not in 'aeiou':\n            return\
    \ \"Not a valid message\"\n    \n    message_lowercase = message.lower()\n   \
    \ \n    substitution_dict = {\"t\":\"t\", \"g\":\"g\", \"s\":\"s\", \"h\":\"h\"\
    ,\n                         \"k\":\"k\", \"c\":\"c\", \"m\":\"m\",\n         \
    \                \"g\":\"g\", \"o\":\"o\", \"r\":\"r\",\n                    \
    \     \"a\":\"a\", \"e\":\"e\", \"i\":\"i\", \"u\":\"u\",\n                  \
    \       \"b\":\"b\", \"d\":\"d\", \"f\":\"f\", \"h\":\"h\",\n                \
    \         \"j\":\"j\", \"k\":\"k\", \"l\":\"l\", \"p\":\"p\",\n              \
    \           \"m\":\"m\", \"n\":\"n\", \"b\":\"b\", \"t\":\"t\",\n            \
    \             \"x\":\"x\", \"y\":\"y\", \"z\":\"z\", \"q\":\"q\",\n          \
    \               \"p\":\"p\", \"r\":\"r\", \"s\":\"s\", \"u\":\"u\",\n        \
    \                 \"o\":\"o\", \"y\":\"y\", \"n\":\"n\", \"h\":\"h\",\n      \
    \                   \"b\":\"b\", \"v\":\"v\", \"d\":\"d\", \"g\":\"g\",\n    \
    \                     \"e\":\"e\", \"s\":\"s\", \"c\":\"c\", \"z\":\"z\",\n  \
    \                       \"f\":\"f\", \"v\":\"v\", \"m\":\"m\", \"l\":\"l\",\n\
    \                         \"p\":\"p\", \"o\":\"o\", \"k\":\"k\", \"j\":\"j\",\n\
    \                         \"s\":\"s\", \"q\":\"q\", \"g\":\"g\", \"i\":\"i\",\n\
    \                         \"r\":\"r\", \"a\":\"a\", \"y\":\"y\", \"u\":\"u\"}\n\
    \    \n    message_lowercase = message_lowercase.replace(\" \", \"\")\n    \n\
    \    #Make a list of all substitutions\n    substitution_list = []\n    \n   \
    \ #Create a list of all letters in the message\n    letters = list(message_lowercase)\n\
    \    \n    #Create a dictionary with all substitutions \n    \n    #Iterate through\
    \ every letter and make a substitution\n    for letter in letters:\n        if\
    \ letter in substitution_dict:\n            substitution_list.append(substitution_dict[letter])\n\
    \        else:\n            substitution_list.append(letter)\n        \n    substitution_string\
    \ = \"\".join(substitution_list)\n    \n    substitution_string = substitution_string.replace(\"\
    \ \", \"\")\n    \n    \n    return substitution_string\n", "    \n    message\
    \ = message.lower()\n    \n    # Replace vowels with their next letter\n    replacement_dict\
    \ = {\n        'a' : 'j',\n        'e' : 'f',\n        'i' : 'j',\n        'o'\
    \ : 'k',\n        'u' : 'i',\n        'y' : 'j'\n    }\n    \n    # Iterate through\
    \ the message and replace vowels with their next letter\n    for letter in message:\n\
    \        if letter in replacement_dict:\n            letter = replacement_dict[letter]\n\
    \        \n        message = message.replace(letter, letter + chr(ord(letter)\
    \ + 2))\n    \n    # Swap the case of the letters and replace vowels with their\
    \ next letter\n    for letter in message:\n        if letter in replacement_dict:\n\
    \            letter = replacement_dict[letter]\n        \n        message = message.replace(letter,\
    \ letter.upper())\n    \n    return message\n</cell>\n<cell>\nencode(message='This\
    \ is a message')\n</cell>\n<text>\nQ5: Implement a function that takes a message\
    \ and a dictionary of rules, and returns \na string of the form [rule]{[character]}[rule]{[character]}...\n\
    with [rule] being one of the following:\n\nupper\nlower\nswap\nconvert\nencode\n\
    \nFor example:\n\n>>> rules_dict = {'upper': 'tHKS', \n                 'lower':\
    \ 'tHKS', \n                 'swap': 'tHKS', \n                 'convert': 'tHKS',\
    \ \n                 'encode': 'tHKS'}\n>>> rule_function(message='This is fun\
    \ and useful', rules=rules_dict)\n'tHKS shK tHKS kn tHKS S'\n\n</text>\n<cell>",
  "    \n    char_dict = {\n        'A': 'z',\n        'B': 'y',\n        'C': 'z',\n\
    \        'D': 'y',\n        'E': 'z',\n        'F': 'y',\n        'G': 'y',\n\
    \        'H': 'z',\n        'I': 'y',\n        'J': 'z',\n        'K': 'y',\n\
    \        'L': 'z',\n        'M': 'y',\n        'N': 'z',\n        'O': 'y',\n\
    \        'P': 'y',\n        'Q': 'z',\n        'R': 'y',\n        'S': 'z',\n\
    \        'T': 'y',\n        'U': 'y',\n        'V': 'z',\n        'W': 'y',\n\
    \        'X': 'z',\n        'Y': 'y',\n        'Z': 'z',\n    }\n    \n    ascii_alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    \n    encoded_message = ''\n    \n    for\
    \ letter in message:\n        if letter in ascii_alphabet:\n            encoded_message\
    \ += ascii_alphabet.find(letter)\n        else:\n            encoded_message +=\
    \ char_dict[letter]\n        \n    return encoded_message\n</cell>\n<text>\nWe\
    \ now define a function which takes in our message, and encodes it, using a function\
    \ we defined earlier. \nTo do this, we need to import our encode function. We\
    \ do this by saying import encode, where encode is the name of our encode function.\n\
    \n\n</text>\n<cell>\nfrom encode import encode\n</cell>\n<text>\nNow, let's test\
    \ our encode function by running our test cases:\n\n\n</text>\n<cell>\nassert\
    \ encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'\n\
    </cell>\n<text>\nNext, we define our encode function. \nThe function will encode\
    \ the message in the same way that our encode function did. We will now import\
    \ the encode function we defined earlier.\n\n\n</text>\n<cell>\nfrom encode import\
    \ encode\n</cell>\n<text>\nAnd now, we test our encode function by running our\
    \ test cases:\n\n\n</text>\n<cell>\nassert encode('test') == 'TGST'\nassert encode('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n</cell>\n<text>\nExercise: Implement\
    \ encode using encode and ascii_encode\n\n</text>\n<cell>", "    alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\" \n    vowels = 'aeiou'\n    \n    def encode(message):\n\
    \        \"\"\"\n        Function that takes a message, and encodes in such a\
    \ \n        way that it swaps case of all letters, replaces all vowels in \n \
    \       the message with the letter that appears 2 places ahead of that \n   \
    \     vowel in the english alphabet.\n        \n        Assume only letters.\n\
    \        \"\"\"\n        message2 = message.lower()\n        \n        # Loop\
    \ through the message and swap case and remove vowels\n        for letter in message2:\n\
    \            if letter in vowels:\n                temp = list(message2)\n   \
    \             index = alphabet.index(letter)\n                temp[index] = letter.upper()\n\
    \                message2 = \"\".join(temp)\n    \n        # replace all vowels\
    \ with letter 2 places ahead\n        for letter in vowels:\n            if letter\
    \ in message2:\n                message2 = message2.replace(letter, alphabet[alphabet.index(letter)+2])\n\
    \        \n        return message2\n    \n    return encode(message)\n\n", " \
    \   \n    message = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    message = message.upper()\n\
    \    \n    message = message.replace(\"a\", \"B\")\n    message = message.replace(\"\
    b\", \"C\")\n    message = message.replace(\"c\", \"D\")\n    message = message.replace(\"\
    d\", \"E\")\n    message = message.replace(\"e\", \"F\")\n    message = message.replace(\"\
    f\", \"G\")\n    message = message.replace(\"g\", \"H\")\n    message = message.replace(\"\
    h\", \"I\")\n    message = message.replace(\"i\", \"J\")\n    message = message.replace(\"\
    j\", \"K\")\n    message = message.replace(\"k\", \"L\")\n    message = message.replace(\"\
    l\", \"M\")\n    message = message.replace(\"m\", \"N\")\n    message = message.replace(\"\
    n\", \"O\")\n    message = message.replace(\"o\", \"P\")\n    message = message.replace(\"\
    p\", \"Q\")\n    message = message.replace(\"q\", \"R\")\n    message = message.replace(\"\
    r\", \"S\")\n    message = message.replace(\"s\", \"T\")\n    message = message.replace(\"\
    t\", \"U\")\n    message = message.replace(\"u\", \"V\")\n    message = message.replace(\"\
    v\", \"W\")\n    message = message.replace(\"w\", \"X\")\n    message = message.replace(\"\
    x\", \"Y\")\n    message = message.replace(\"y\", \"Z\")\n    \n    message =\
    \ message.replace(\".\", \"A\")\n    message = message.replace(\",\", \"B\")\n\
    \    message = message.replace(\"!\", \"C\")\n    message = message.replace(\"\
    ?\", \"D\")\n    message = message.replace(\":\", \"E\")\n    message = message.replace(\"\
    ;\", \"F\")\n    message = message.replace(\"'\", \"G\")\n    message = message.replace(\"\
    \\\"\",\"H\")\n    message = message.replace(\"(\",\"I\")\n    message = message.replace(\"\
    )\",\"J\")\n    message = message.replace(\"[\", \"K\")\n    message = message.replace(\"\
    ]\", \"L\")\n    message = message.replace(\"{\", \"M\")\n    message = message.replace(\"\
    }\", \"N\")\n    message = message.replace(\"~\",\"O\")\n    message = message.replace(\"\
    \xB4\", \"P\")\n    message = message.replace(\"%\", \"Q\")\n    message = message.replace(\"\
    ^\", \"R\")\n    message = message.replace(\"&\", \"S\")\n    message = message.replace(\"\
    \xA7\", \"T\")\n    message = message.replace(\"$\", \"U\")\n    message = message.replace(\"\
    \xA9\", \"V\")\n    message = message.replace(\"*\", \"W\")\n    message = message.replace(\"\
    _\", \"X\")\n    message = message.replace(\"-\", \"Y\")\n    message = message.replace(\"\
    +\", \"Z\")\n    \n    message = message.replace(\"a\",\"A\")\n    message = message.replace(\"\
    b\",\"B\")\n    message = message.replace(\"c\",\"C\")\n    message = message.replace(\"",
  "    \n    def encode_internal(message: str) -> str:\n        alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \        vowels = 'AEIOU'\n        encoded = message\n        \n        for i\
    \ in range(len(message)):\n            \n            if message[i] in alphabet:\n\
    \                index = (alphabet.index(message[i]) + 1)\n                \n\
    \                # swap case of letters\n                if message[i] == message[index]:\n\
    \                    encoded += message[i].upper()\n                else:\n  \
    \                  encoded += message[i]\n                \n                #\
    \ replace vowels in message with alphabet at specified index\n               \
    \ for j in range(len(vowels)):\n                    if message[i] == vowels[j]:\n\
    \                        encoded += alphabet[index]\n                        break\n\
    \                    \n                continue\n            \n            # replace\
    \ vowels in message with letter at 2 places ahead of vowel\n            for j\
    \ in range(len(vowels)):\n                if message[i] == vowels[j]:\n      \
    \              encoded += alphabet[(alphabet.index(message[i]) + 2) % (len(alphabet)\
    \ - 1)]\n                    break\n                \n        return encoded\n\
    \    \n    return encode_internal(message)\n</cell>\n<cell>\nencode(message='test')\n\
    </cell>\n<cell>\nencode(message='This is a message')\n</cell>\n<text>\n6.3 Pseudonymization\n\
    Pseudonymization is the process of taking a word or phrase and converting it into\
    \ a unique pseudonym. \nThis usually involves replacing a word with a pseudonym\
    \ of a similar word, \nbut sometimes replacing words with pseudonyms of words.\
    \ \nThe pseudonymization process involves replacing each word with a pseudonym\
    \ of a \nunique word, but sometimes replacing words with pseudonyms of other words.\
    \ \nPseudonymization is different from encryption in that it is reversible, whereas\
    \ \nencryption can only be decrypted if only two people know the key. \nThe pseudonymization\
    \ process is often used to make passwords or keys for \napplications, such as\
    \ storing private data in encrypted form. \nA simple pseudonymization process\
    \ is replacing a word with a pseudonym of \nthe word itself. \nIn addition to\
    \ this, a pseudonymization process can replace a word with another word that is\
    \ \na pseudonym of the word itself. \nTo prevent certain types of pseudonymization\
    \ attacks, pseudonymizations must be reversible. \nThis is also known as pseudonym\
    \ or pseudonymization, where a reversible pseudonymization \nis called ", "  \
    \  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    message\
    \ = message.upper()\n    \n    def encode(message: str) -> str:\n        for letter\
    \ in message:\n            if letter in alphabet:\n                letter_position\
    \ = alphabet.find(letter)\n                vowel_position = alphabet.find(vowels[letter_position])\n\
    \                letter_index = letter_position - vowel_position\n           \
    \     letter = alphabet[letter_index]\n                message.replace(letter,\
    \ letter + alphabet[letter_index + 1])\n                \n        return message\n\
    \    \n    return encode(message)\n", "    \n    return message.replace('A', 'C').replace('E',\
    \ 'D').replace('I', 'C').replace('O', 'B')\\\n                .replace('U', 'E').replace('Y',\
    \ 'U').replace('0', 'O').replace('1', 'Q')\\\n                .replace('2', 'T').replace('3',\
    \ 'P').replace('4', 'N').replace('5', 'M')\\\n                .replace('6', 'H').replace('7',\
    \ 'J').replace('8', 'K').replace('9', 'Q')\\\n                .replace('B', 'B').replace('C',\
    \ 'K').replace('D', 'N').replace('F', 'T')\\\n                .replace('G', 'L').replace('H',\
    \ 'M').replace('L', 'D').replace('P', 'O')\\\n                .replace('Q', 'Q').replace('S',\
    \ 'P').replace('T', 'R').replace('U', 'M')\\\n                .replace('V', 'V').replace('W',\
    \ 'W').replace('X', 'U').replace('Y', 'Y')\\\n                .replace('Z', 'Z').replace('0',\
    \ 'D').replace('1', 'H').replace('2', 'Q')\\\n                .replace('3', 'N').replace('4',\
    \ 'M').replace('5', 'Y').replace('6', 'J')\\\n                .replace('7', 'V').replace('8',\
    \ 'R').replace('9', 'W').replace('!', '!')\\\n                .replace('$', '!').replace('%',\
    \ '%').replace('&', '&').replace('+', '+')\\\n                .replace('-', '-').replace('*',\
    \ '*').replace('=', '=').replace(':', ':')\\\n                .replace(';', ';').replace('<',\
    \ '<').replace('>', '>').replace('?', '?')\\\n                .replace('|', '|').replace('\\\
    \\', '\\\\').replace('^', '^').replace('\"', '\"')\\\n                .replace('(',\
    \ '(').replace(')', ')').replace('{', '{').replace('}', '}')\\\n             \
    \   .replace('~', '~').replace('!', '!').replace('@', '@')\\\n               \
    \ .replace('#', '#').replace('$', '$').replace('%', '%')\\\n                .replace('^',\
    \ '^').replace('&', '&').replace('*', '*').replace('+', '+')\\\n             \
    \   .replace('_', '_').replace('.', '.').replace('\"', '\"').replace(';', ';')\\\
    \n                .replace('<', '<').replace('>', '>').replace('?', '?').replace('|',\
    \ '|')\\\n                .replace('\\\\', '\\\\').replace('*', '*').replace('_',\
    \ '_').replace('.', '.')\\\n                .replace('\"', '\"').replace(';',\
    \ ';').replace('<', '<').replace('>', '>')\\\n                .replace('?', '?').replace('|',\
    \ '|').replace('\\\\', '\\\\')\\\n                .replace('+', '+').replace('-',\
    \ '-')\n", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = list(alphabet)\n\
    \    for index, letter in enumerate(alphabet):\n        if letter in message:\n\
    \            message = message.replace(letter, alphabet[index + 1])\n    return\
    \ message\n", "    message = message.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    \n    replaced = \"\"\n    count = 0\n    for i in message:\n        replacement\
    \ = alphabet[alphabet.index(i)-count]\n        replaced += replacement\n     \
    \   count += 2\n    return replaced\n\n", "    # your code here\n    \n    ascii_lower\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    ascii_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    \n    alpha_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alpha_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    \n    vowels = 'aeiou'\n    \n    count = 0\n    \n    message_encoded =\
    \ message\n    \n    message_encoded = message\n    \n    for letter in message_encoded:\n\
    \        \n        if letter in ascii_lower:\n            message_encoded = message_encoded.replace(letter,\
    \ alpha_lower[ascii_lower.find(letter)], 1)\n            count += 1\n        \
    \    \n        if letter in ascii_upper:\n            message_encoded = message_encoded.replace(letter,\
    \ alpha_upper[ascii_upper.find(letter)], 1)\n            count += 1\n        \
    \    \n        if letter in alpha_lower:\n            message_encoded = message_encoded.replace(letter,\
    \ alpha_lower[alpha_lower.find(letter)], 1)\n            count += 1\n        \
    \    \n        if letter in alpha_upper:\n            message_encoded = message_encoded.replace(letter,\
    \ alpha_upper[alpha_upper.find(letter)], 1)\n            count += 1\n        \
    \    \n        if letter in vowels:\n            message_encoded = message_encoded.replace(letter,\
    \ alpha_upper[alpha_upper.find(letter)], 1)\n            count += 1\n    \n  \
    \  vowel_count = len([v for v in vowels if v in message_encoded])\n    \n    message_encoded\
    \ = message_encoded.replace('ae', alpha_lower[alpha_lower.find('a')+vowel_count])\n\
    \    \n    return message_encoded\n\n", "    def encode(message_: str) -> str:\n\
    \        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        swaps = {\"a\": \"\
    A\", \"e\": \"E\", \"i\": \"I\", \"o\": \"O\", \"u\": \"U\"}\n        encoded\
    \ = \"\"\n        for letter in message_:\n            if letter in swaps:\n \
    \               encoded += swaps[letter]\n            encoded += alphabet[(alphabet.find(letter)\
    \ + 2) % 26]\n        return encoded\n\n    return encode(message)\n\n", "   \
    \ alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    encoded = \"\"\n    for letter\
    \ in message:\n        letter_index = alphabet.find(letter)\n        if letter_index\
    \ == -1:\n            raise ValueError(\"the letter \" + letter + \" not in alphabet\"\
    )\n        next_letter = alphabet[letter_index + 1]\n        encoded = encoded\
    \ + letter + next_letter\n    return encoded\n\n", "    return ''.join([chr(97\
    \ + ord(letter) - ord(letter.upper()))\n                     for letter in message\n\
    \                     if letter in ENGLISH\n                     or letter in\
    \ VOWELS])\n</cell>\n<cell>\nencode = functools.partial(write_to_file, encode)\n\
    \nencode('This is a message')\n</cell>\n<cell>\nencode.__doc__\n</cell>\n<text>\n\
    We need a way to make our functions generic. functools.partial allows us to partially\
    \ apply functions with arguments.\n\n\n</text>\n<cell>", "    pass\n\n", "   \
    \ \n    mapping = {\n        'a': 'A',\n        'b': 'B',\n        'c': 'C',\n\
    \        'd': 'D',\n        'e': 'E',\n        'f': 'F',\n        'g': 'G',\n\
    \        'h': 'H',\n        'i': 'I',\n        'j': 'J',\n        'k': 'K',\n\
    \        'l': 'L',\n        'm': 'M',\n        'n': 'N',\n        'o': 'O',\n\
    \        'p': 'P',\n        'q': 'Q',\n        'r': 'R',\n        's': 'S',\n\
    \        't': 'T',\n        'u': 'U',\n        'v': 'V',\n        'w': 'W',\n\
    \        'x': 'X',\n        'y': 'Y',\n        'z': 'Z',\n    }\n    \n    message\
    \ = message.lower()\n    \n    result = []\n    \n    for char in message:\n \
    \       \n        index = mapping.get(char)\n        \n        if index:\n   \
    \         index = index - 1\n            result.append(mapping.get(index))\n \
    \       else:\n            result.append(char)\n    \n    return ''.join(result)\n\
    \n", "    message = message.upper()\n    message = message.swapcase()\n    message\
    \ = message.replace('A', 't')\n    message = message.replace('E', 'x')\n    message\
    \ = message.replace('I', 's')\n    message = message.replace('O', 'o')\n    message\
    \ = message.replace('U', 'u')\n    message = message.replace('Y', 'h')\n    return\
    \ message\n</cell>\n<cell>\nassert decode('TGST') == 'test'\nassert decode(tknize(encode('This\
    \ is a message'))) == 'This is a message'\n</cell>\n<text>\n4. (10 points)\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string.\n\n\n</text>\n<cell>", "    \n    message = message.lower()\n    \n\
    \    # encode all letters in message\n    message = message.replace('A','t')\n\
    \    message = message.replace('B','h')\n    message = message.replace('C','K')\n\
    \    message = message.replace('D','s')\n    message = message.replace('E','H')\n\
    \    message = message.replace('F','g')\n    message = message.replace('G','f')\n\
    \    message = message.replace('H','H')\n    message = message.replace('I','K')\n\
    \    message = message.replace('J','s')\n    message = message.replace('K','k')\n\
    \    message = message.replace('L','C')\n    message = message.replace('M','G')\n\
    \    message = message.replace('N','M')\n    message = message.replace('O','K')\n\
    \    message = message.replace('P','s')\n    message = message.replace('Q','t')\n\
    \    message = message.replace('R','h')\n    message = message.replace('S','K')\n\
    \    message = message.replace('T','s')\n    message = message.replace('U','H')\n\
    \    message = message.replace('V','g')\n    message = message.replace('W','f')\n\
    \    message = message.replace('X','H')\n    message = message.replace('Y','g')\n\
    \    message = message.replace('Z','f')\n    message = message.replace('a','t')\n\
    \    message = message.replace('b','h')\n    message = message.replace('c','K')\n\
    \    message = message.replace('d','s')\n    message = message.replace('e','H')\n\
    \    message = message.replace('f','g')\n    message = message.replace('g','f')\n\
    \    message = message.replace('h','H')\n    message = message.replace('i','K')\n\
    \    message = message.replace('j','s')\n    message = message.replace('k','k')\n\
    \    message = message.replace('l','C')\n    message = message.replace('m','G')\n\
    \    message = message.replace('n','M')\n    message = message.replace('o','K')\n\
    \    message = message.replace('p','s')\n    message = message.replace('q','t')\n\
    \    message = message.replace('r','h')\n    message = message.replace('s','K')\n\
    \    message = message.replace('t','s')\n    message = message.replace('u','H')\n\
    \    message = message.replace('v','g')\n    message = message.replace('w','f')\n\
    \    message = message.replace('x','H')\n    message = message.replace('y','g')\n\
    \    message = message.replace('z','f')\n    \n    # encode all vowels in message\n\
    \    message = message.replace('A','t')\n    message = message.replace('B','h')\n\
    \    message = message.replace('C','K')\n    message = message.replace('D','",
  "    \n    vowels = ('a', 'e', 'i', 'o', 'u')\n    \n    return ''.join([\n    \
    \    vowels[alphabet.index(letter)] for letter in message \n        if letter\
    \ not in vowels and \n        alphabet.index(letter) < alphabet.index(vowels[2])\n\
    \    ])\n</cell>\n<text>\nHow would you encode a message with the above function?\
    \ \nDo you think it is possible to do so without changing the function? \n(Hint:\
    \ Use your function to encode a message and then decode it to see the difference.)\n\
    \n</text>\n<cell>", "    \n    letters = { 'a':'A','b':'B','c':'C','d':'D','e':'E','f':'F','g':'G','h':'H','i':'I','j':'J','k':'K','l':'L','m':'M','n':'N','o':'O','p':'P','q':'Q','r':'R','s':'S','t':'T','u':'U','v':'V','w':'W','x':'X','y':'Y','z':'Z'}\n\
    \    vowels = \"aeiouy\"\n    \n    def encode(message: str) -> str:\n       \
    \ \n        encodedMessage = \"\"\n        \n        for char in message:\n  \
    \          if char in letters:\n                encodedMessage += letters[char]\n\
    \            elif char in vowels:\n                encodedMessage += letters[letters[char]+letters[vowels[vowels.index(char)]]]\n\
    \            else:\n                encodedMessage += char\n            \n   \
    \     return encodedMessage\n\n    \n    return encode(message)\n</cell>\n<cell>\n\
    encode(message = 'test')\n</cell>\n<cell>\nencode(message = 'This is a message')\n\
    </cell>\n<text>\nWrite a function that takes a message and encodes it in a \n\
    way that it swaps case of all letters, replaces all vowels in the \nmessage with\
    \ the letter that appears 2 places ahead of that \nvowel in the english alphabet.\
    \ \nAssume the vowels are always at the front of the alphabet.\n\nFor example,\
    \ if the message is \"tHESy wOSEnd\", then it should output \"yHESWSEnd\"\n\n\
    This could use some polishing up too, for example:\n\nWhat if you had the message\
    \ \"tHESy wOSEnd\"? \nWhat if the vowels were at the end of the message? \nWhat\
    \ if you had the message \"tHESy wOSEnd\" with the vowels at the front? \n\nWhat\
    \ happens in these cases is beyond the scope of what we've covered. \nRemember\
    \ that your code is still buggy, and that you still need to add some code to account\
    \ for \nthese possible inputs. \n\nYour code should still work if given any of\
    \ these three inputs:\n\n'tHESy wOSEnd'\n'tHESy wOSEnd'\n'tHESy wOSEnd'\n\n</text>\n\
    <cell>", "    \n    vowel_letters = ['a', 'e', 'i', 'o', 'u']\n    \n    # find\
    \ all occurences of vowels\n    vowel_groups = re.finditer(r\"[aeiou]\", message)\n\
    \    \n    encoded_message = ''\n    \n    for vowel in vowel_groups:\n      \
    \  letter_group = message.find(vowel.group()) + vowel.start()\n        \n    \
    \    for index in range(letter_group, letter_group + len(vowel.group())):\n  \
    \          encoded_message = encoded_message + vowel_letters[index % len(vowel_letters)]\n\
    \            \n    return encoded_message\n</cell>\n<cell>", "    message_encoded\
    \ = \"\"\n    for letter in message:\n        if letter in VOWELS:\n         \
    \   letter_index = VOWELS.index(letter)\n            letter_index += 1\n     \
    \       letter_index = letter_index % len(ENGLISH_VOWELS)\n            message_encoded\
    \ += ENGLISH_VOWELS[letter_index]\n        else:\n            message_encoded\
    \ += letter\n    return message_encoded\n", "    def encode1(word):\n        return\
    \ ''.join([c if c.lower() in 'aeiou' else \n            c.upper() if c.islower()\
    \ else \n            c.lower() if c == 'z' else \n            c for c in word])\n\
    \    return ''.join([encode1(word)]*2)\n", "    # Your code here\n    vowels =\
    \ ['a', 'e', 'i', 'o', 'u']\n    uppercase =[chr(i) for i in range(ord('A'), ord('Z')+1)]\n\
    \    lowercase = [chr(i) for i in range(ord('a'), ord('z')+1)]\n    message =\
    \ message.upper()\n    encoded = \"\"\n    for i in range(len(message)):\n   \
    \     if message[i] in uppercase or message[i] in lowercase:\n            encoded\
    \ += message[i]\n        elif message[i] in vowels:\n            vowel = message[i]\n\
    \            position = vowels.index(vowel)\n            if position > 0:\n  \
    \              next_vowel = vowels[position-1]\n            else:\n          \
    \      next_vowel = vowels[len(vowels)-1]\n            encoded = encoded + next_vowel\n\
    \    return encoded\n\n", "    return ''.join(\n        x if x not in VOWELS else\
    \ 'A' if letters.find(x.upper()) == letters.find(x.upper()) + 2 else x.upper()\n\
    \        for x in message\n    )\n</cell>\n<cell>", "    \n    message = message.upper()\n\
    \    \n    encoded = \"\"\n    \n    for letter in message:\n        if letter\
    \ in vowels:\n            encoded = encoded + letter.lower()\n        else:\n\
    \            letter = letter.lower()\n            letter = letter.replace(vowels[vowels.index(letter)],\
    \ letters[vowels.index(letter)].lower())\n            encoded = encoded + letter\n\
    \    return encoded\n\n", "    def encode(message: str) -> str:\n        letters\
    \ = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n        vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n        mapping = {}\n        for letter in letters:\n\
    \            mapping[letter] = letter\n        for vowel in vowels:\n        \
    \    mapping[vowel] = vowel + 2\n        \n        def reverse_mapping(message:\
    \ str) -> str:\n            mapping = {**mapping, **{'a': letters[0], 'e': letters[8],\
    \ 'i': letters[9], 'o': letters[10], 'u': letters[11]}}\n            return ''.join(mapping[letter]\
    \ for letter in message[::-1])\n\n        def swap(message: str) -> str:\n   \
    \         mapping = {**mapping, **{'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E':\
    \ 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M':\
    \ 'm', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S': 's', 'T': 't', 'U':\
    \ 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z'}}\n            return\
    \ ''.join(mapping[letter] for letter in message)\n\n        def reverse_vowels(message:\
    \ str) -> str:\n            mapping = {**mapping, **{'A': 'a', 'E': 'e', 'I':\
    \ 'i', 'O': 'o', 'U': 'u'}}\n            return ''.join(mapping[letter] for letter\
    \ in message[::-1])\n\n        def replace_vowels(message: str) -> str:\n    \
    \        mapping = {**mapping, **{'a': 'A', 'e': 'E', 'i': 'I', 'o': 'O', 'u':\
    \ 'U'}}\n            return ''.join(mapping[letter] for letter in message)\n\n\
    \        encoded = \"\"\n        for word in message.split():\n            if\
    \ word.isalpha():\n                encoded = encoded + swap(word)\n          \
    \  elif word.islower():\n                encoded = encoded + reverse_vowels(word)\n\
    \            elif word.isupper():\n                encoded = encoded + reverse_mapping(word)\n\
    \            elif word.isspace():\n                encoded = encoded + replace_vowels(word)\n\
    \            else:\n                encoded = encoded + word\n        return encoded\n\
    \    return encode(message)\n\n", "    message = message.lower()\n    message\
    \ = message.swapcase()\n    message = message.replace('a', 'z')\n    message =\
    \ message.replace('e', 'i')\n    message = message.replace('o', 'o')\n    message\
    \ = message.replace('u', 'a')\n    return message\n", "    \n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'y']\n    \n    # Case is swapped, vowels are replaced \n\
    \    message = message.lower()\n    \n    new_message = ''\n    for letter in\
    \ message:\n        if letter in vowels:\n            letter = letter.upper()\n\
    \        \n        new_message += letter\n    \n    return new_message\n</cell>\n\
    <cell>", "    \n    replacement = {'a':'ks', 'e':'ks', 'i':'gs', 'o':'ks', 'u':'ks'}\n\
    \    return ''.join([replacement.get(x) or x for x in message])\n\n", "    vowels\
    \ = \"aeiouAEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    message\
    \ = \"test\" + message\n    message = message.replace(vowels[2],letters[2])\n\
    \    message = message.replace(vowels[3],letters[3])\n    message = message.replace(vowels[4],letters[4])\n\
    \    message = message.replace(vowels[5],letters[5])\n    message = message.replace(vowels[6],letters[6])\n\
    \    message = message.replace(vowels[7],letters[7])\n    message = message.replace(vowels[8],letters[8])\n\
    \    message = message.replace(vowels[9],letters[9])\n    message = message.replace(vowels[10],letters[10])\n\
    \    message = message.replace(vowels[11],letters[11])\n    message = message.replace(vowels[12],letters[12])\n\
    \    message = message.replace(vowels[13],letters[13])\n    message = message.replace(vowels[14],letters[14])\n\
    \    message = message.replace(vowels[15],letters[15])\n    message = message.replace(vowels[16],letters[16])\n\
    \    message = message.replace(vowels[17],letters[17])\n    message = message.replace(vowels[18],letters[18])\n\
    \    message = message.replace(vowels[19],letters[19])\n    message = message.replace(vowels[20],letters[20])\n\
    \    message = message.replace(vowels[21],letters[21])\n    message = message.replace(vowels[22],letters[22])\n\
    \    message = message.replace(vowels[23],letters[23])\n    message = message.replace(vowels[24],letters[24])\n\
    \    message = message.replace(vowels[25],letters[25])\n    message = message.replace(vowels[26],letters[26])\n\
    \    message = message.replace(vowels[27],letters[27])\n    message = message.replace(vowels[28],letters[28])\n\
    \    message = message.replace(vowels[29],letters[29])\n    message = message.replace(vowels[30],letters[30])\n\
    \    message = message.replace(vowels[31],letters[31])\n    message = message.replace(vowels[32],letters[32])\n\
    \    message = message.replace(vowels[33],letters[33])\n    message = message.replace(vowels[34],letters[34])\n\
    \    message = message.replace(vowels[35],letters[35])\n    message = message.replace(vowels[36],letters[36])\n\
    \    message = message.replace(vowels[37],letters[37])\n    message = message.replace(vowels[38],letters[38])\n\
    \    message = message.replace(vowels[39],letters[39])\n    message = message.replace(",
  "    # Complete the code here\n    message = re.sub(r\"[^a-zA-Z]\", lambda m: m.group().upper(),\
    \ message).lower()\n    vowels = 'aeiou'\n    translation = 'aeiouyAEIOUY'\n \
    \   for letter in message:\n        if letter in vowels:\n            message\
    \ = message.replace(letter, translation[message.index(letter)%len(translation)])\n\
    \    return message\n", "    result = \"\"\n    for char in message:\n       \
    \ if char in \"AEIOUaeiou\":\n            result += (chr((ord(char)-65)+2) if\
    \ char.islower() else chr(ord(char)-67))\n        else:\n            result +=\
    \ char.upper()\n    return result\n</cell>\n<cell>\nencode(message='This is a\
    \ message')\n</cell>\n<text>\nExercise 2\nUsing a for loop, encode the message\
    \ 'This is a message' in such a way that each vowel is replaced by its letter's\
    \ 2 places ahead in the english alphabet. \nHow long would it take to encode the\
    \ message using this function? \n\n\n</text>\n<cell>", "    \n    vowels = 'AEIOU'\n\
    \    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Store a copy of this\
    \ message to ensure the original \n    # doesn't change\n    original = message\n\
    \    \n    # Create a new string with the original message \n    # and two new\
    \ empty strings that are used to track the \n    # current letter, letter 2 ahead\
    \ and letter 3 ahead \n    message = message + ''\n    new_message_1 = ''\n  \
    \  new_message_2 = ''\n    new_message_3 = ''\n    \n    # Iterate through the\
    \ original message and replace \n    # each letter with the letter that appears\
    \ 2 places \n    # ahead of that letter \n    for letter in message:\n       \
    \ \n        # Check if the original message is empty \n        # i.e. no more\
    \ letters to iterate through \n        if letter == '':\n            break\n \
    \       \n        # Check if the original message has a vowel \n        # in it\
    \ \n        if letter in vowels:\n            \n            # Keep track of the\
    \ letter that appears \n            # 2 places ahead of the vowel and replace\
    \ the \n            # vowel with it \n            new_message_1 += letter\n  \
    \          new_message_2 += alphabet[alphabet.index(new_message_1) + 1]\n    \
    \        new_message_3 += alphabet[alphabet.index(new_message_2) + 1]\n      \
    \      \n        # Check if the original message has a letter \n        # in it\
    \ \n        else:\n            \n            # Keep track of the letter that appears\
    \ \n            # 3 places ahead of the letter and replace the \n            #\
    \ letter with it \n            new_message_1 += letter\n            new_message_2\
    \ += alphabet[alphabet.index(new_message_1) + 1]\n            new_message_3 +=\
    \ alphabet[alphabet.index(new_message_2) + 1]\n            \n    # Write a function\
    \ that takes a message, and returns \n    # the encoded message \n    \n    \n\
    \    def encode(message: str) -> str:\n        \"\"\"\n        Write a function\
    \ that takes a message, and encodes in such a \n        way that it swaps case\
    \ of all letters, replaces all vowels in \n        the message with the letter\
    \ that appears 2 places ahead of that \n        vowel in the english alphabet.\
    \ \n        Assume only letters. \n        \n        Examples:\n        >>> encode('test')\n\
    \        'TGST'\n        >>> encode('This is a message')\n        'tHKS KS C MGSSCGG'\n\
    \        \"\"\"\n        \n        vowels = 'AEIOU'\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \        \n        # Store a copy of this message to ensure the original \n  \
    \      # doesn't change\n        original = message\n        \n        # Create\
    \ a new string with the original message \n        # and two new empty strings\
    \ that are used to track the \n        # current letter, letter 2 ahead and letter\
    \ 3 ahead \n        message = message + ''\n", "    \n    vowels = 'AEIOU'\n \
    \   encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n\
    \            encoded_message = encoded_message + char.upper() + char.lower()\n\
    \        else:\n            encoded_message = encoded_message + char.lower()\n\
    \    return encoded_message\n\n", "    \n    # a dictionary to map each letter\
    \ of the alphabet to it's index\n    index_map = {\n        'a': 0, \n       \
    \ 'b': 1, \n        'c': 2, \n        'd': 3, \n        'e': 4, \n        'f':\
    \ 5, \n        'g': 6, \n        'h': 7, \n        'i': 8, \n        'j': 9, \n\
    \        'k': 10, \n        'l': 11, \n        'm': 12, \n        'n': 13, \n\
    \        'o': 14, \n        'p': 15, \n        'q': 16, \n        'r': 17, \n\
    \        's': 18, \n        't': 19, \n        'u': 20, \n        'v': 21, \n\
    \        'w': 22, \n        'x': 23, \n        'y': 24, \n        'z': 25\n  \
    \  }\n    \n    # a list of the 26 letters of the alphabet\n    letter_list =\
    \ ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    # a dictionary\
    \ to map each vowel to the letter that comes 2 places ahead of it\n    v_index\
    \ = {\n        'a': 'z', \n        'e': 'y', \n        'i': 'w', \n        'o':\
    \ 'v', \n        'u': 'w', \n        'y': 'y', \n        'A': 'Z', \n        'E':\
    \ 'Y', \n        'I': 'W', \n        'O': 'V', \n        'U': 'W', \n        'Y':\
    \ 'Y'\n    }\n    \n    # a list of the 26 vowels\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'y']\n    \n    # get the length of the message\n    msg_len = len(message)\n\
    \    \n    # make a new string with the encoded message\n    encoded_message =\
    \ ''\n    \n    # iterate over each letter in the message\n    for letter in message:\n\
    \        \n        # get the index of the letter by looking it up in the letters\
    \ list\n        index = letter_list.index(letter)\n        \n        # use the\
    \ index to get the letter that comes 2 places ahead of it\n        letter = v_index[letter_list[index]]\n\
    \        \n        # add the letter to the new message\n        encoded_message\
    \ = encoded_message + letter\n        \n    # return the encoded message\n   \
    \ return encoded_message\n\n", "    \n    # create a dictionary of letter/letter\
    \ pairs:\n    # e.g.\n    # a = 'T'\n    # b = 'g'\n    # c = 'p'\n    # d = '\
    \ ' \n    # e = 'H'\n    \n    letter_pairs = {\n        'A': 'T', 'B': 'T', 'C':\
    \ 'T', 'D': 'T', 'E': 'T', 'F': 'T', 'G': 'T', 'H': 'T',\n        'I': 'T', 'J':\
    \ 'T', 'K': 'T', 'L': 'T', 'M': 'T', 'N': 'T', 'O': 'T', 'P': 'T',\n        'Q':\
    \ 'T', 'R': 'T', 'S': 'T', 'T': 'T', 'U': 'T', 'V': 'T', 'W': 'T', 'X': 'T',\n\
    \        'Y': 'T', 'Z': 'T', 'a': 'T', 'b': 'T', 'c': 'T', 'd': 'T', 'e': 'T',\
    \ 'f': 'T',\n        'g': 'T', 'h': 'T', 'i': 'T', 'j': 'T', 'k': 'T', 'l': 'T',\
    \ 'm': 'T', 'n': 'T',\n        'o': 'T', 'p': 'T', 'q': 'T', 'r': 'T', 's': 'T',\
    \ 't': 'T', 'u': 'T', 'v': 'T',\n        'w': 'T', 'x': 'T', 'y': 'T', 'z': 'T'\
    \ }\n\n    # for each letter in our message\n    for letter in message:\n    \
    \    # if the letter isn't a letter or a vowel\n        if letter not in letter_pairs.keys()\
    \ and letter not in vowels:\n            letter = letter.upper()\n           \
    \ \n        # for each letter pair in our dictionary\n        for pair, replacement\
    \ in letter_pairs.items():\n            # if the letter pair is the same as the\
    \ letter we're looking at\n            if pair == letter:\n                # replace\
    \ it with the replacement\n                letter = replacement\n            \
    \    \n        # add the letter to the message\n        message = message + letter\n\
    \    \n    return message\n</cell>\n<cell>", "    return message.lower()\n\n",
  "    mapping = {\n        'A': 'A',\n        'a': 'a',\n        'B': 'B',\n    \
    \    'b': 'b',\n        'C': 'C',\n        'c': 'c',\n        'D': 'D',\n    \
    \    'd': 'd',\n        'E': 'E',\n        'e': 'e',\n        'F': 'F',\n    \
    \    'f': 'f',\n        'G': 'G',\n        'g': 'g',\n        'H': 'H',\n    \
    \    'h': 'h',\n        'I': 'I',\n        'i': 'i',\n        'J': 'J',\n    \
    \    'j': 'j',\n        'K': 'K',\n        'k': 'k',\n        'L': 'L',\n    \
    \    'l': 'l',\n        'M': 'M',\n        'm': 'm',\n        'N': 'N',\n    \
    \    'n': 'n',\n        'O': 'O',\n        'o': 'o',\n        'P': 'P',\n    \
    \    'p': 'p',\n        'Q': 'Q',\n        'q': 'q',\n        'R': 'R',\n    \
    \    'r': 'r',\n        'S': 'S',\n        's': 's',\n        'T': 'T',\n    \
    \    't': 't',\n        'U': 'U',\n        'u': 'u',\n        'V': 'V',\n    \
    \    'v': 'v',\n        'W': 'W',\n        'w': 'w',\n        'X': 'X',\n    \
    \    'x': 'x',\n        'Y': 'Y',\n        'y': 'y',\n        'Z': 'Z',\n    \
    \    'z': 'z',\n        'a': 'A',\n        'A': 'a',\n        'a': 'a',\n    \
    \    'b': 'B',\n        'B': 'b',\n        'b': 'b',\n        'c': 'C',\n    \
    \    'C': 'c',\n        'c': 'c',\n        'd': 'D',\n        'D': 'd',\n    \
    \    'd': 'd',\n        'e': 'E',\n        'E': 'e',\n        'e': 'e',\n    \
    \    'f': 'F',\n        'F': 'f',\n        'f': 'f',\n        'g': 'G',\n    \
    \    'G': 'g',\n        'g': 'g',\n        'h': 'H',\n        'H': 'h',\n    \
    \    'h': 'h',\n        'i': 'I',\n        'I': 'i',\n        'i': 'i',\n    \
    \    'j': 'J',\n        'J': 'j',\n        'j': 'j',\n        'k': 'K',\n    \
    \    'K': 'k',\n        'k': 'k',\n        'l': 'L',\n        'L': 'l',\n    \
    \    'l': 'l',\n        'm': 'M',\n        'M': 'm',\n        'm': 'm',\n    \
    \    'n': 'N',\n        'N", "    \n    # write code here\n    \n    return ''\n\
    </cell>\n<text>\nNow we can test this by running the function against some test\
    \ cases. Let's see what happens when the function has been defined and tested\
    \ in one cell, before we run it as a whole.\n\n\n</text>\n<cell>\nmessage = 'This\
    \ is a message'\nencode(message)\n</cell>\n<cell>\ntest_answers = [\n    ('test',\
    \ 'TGST'),\n    ('This is a message', 'tHKS KS C MGSSCGG'),\n]\n\nfor test in\
    \ test_answers:\n    print(encode(test[0]) == test[1])\n</cell>\n<text>\nWhat\
    \ if we want to test all the answers in a row? What we really want to test is\
    \ that all of them work. We can accomplish this by using the Python any() function\
    \ and passing it a generator expression. Let's see how this works.\n\n\n</text>\n\
    <cell>\nmessage = 'This is a message'\nall_answers = (encode(test[0]) for test\
    \ in test_answers)\nall(all_answers)\n</cell>\n<text>\nWhat if we want to check\
    \ that the function works for all messages that are not already encoded? What\
    \ we really want to do is make sure that all the answers work, but in a way that\
    \ we can encode any message that we want, rather than just testing for all the\
    \ possible encoded messages. We can do this by changing the generator expression\
    \ in any to being a list comprehension that generates all encoded messages. Let's\
    \ see how this works.\n\n\n</text>\n<cell>\nmessage = 'This is a message'\nall_answers\
    \ = [encode(test[0]) for test in test_answers]\nall_answers == list(all_answers)\n\
    </cell>\n<text>\nWhat if you wanted to add an extra level of encoding to each\
    \ of the encoded messages?\n\n</text>\n<cell>", "    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    return \"\".join(\n        [vowels[v] for v in range(0,len(message))\
    \ \n         if v<len(vowels) and message[v].lower() in vowels]+\n        [message[i].lower()\
    \ for i in range(0,len(message)) \n         if i<len(message)])\n\n", "    \n\
    \    # encode each word in the message using .upper() and then lower\n    return\
    \ message.lower().replace(\",\", \"\").replace(\" \", \"\").replace(\"-\", \"\"\
    ).replace(\" \", \"\").replace(\"!\", \"\").replace(\"-\", \"\").replace(\"|\"\
    , \"\").replace(\",\", \"\").replace(\"!\", \"\").replace(\"|\", \"\").replace(\"\
    ?\", \"\").replace(\",\", \"\").replace(\":\", \"\").replace(\".\", \"\").replace(\"\
    ?\", \"\").replace(\"!\", \"\").replace(\",\", \"\").replace(\"(\", \"\").replace(\"\
    )\", \"\").replace(\",\", \"\").replace(\":\", \"\").replace(\".\", \"\").replace(\"\
    ;\", \"\").lower()\n</cell>\n<cell>", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    vowels_2 = 'AEIOU'\n    vowels_3 = 'AEIOUaeiou'\n \
    \   \n    # Get the index of each letter in the alphabet\n    letter_indexes =\
    \ [alphabet.find(letter) for letter in message]\n\n    # Create a list with the\
    \ positions of all the letters in every \n    # case where a letter is uppercase\
    \ or lowercase\n    letter_positions = [\n        letter_indexes[letter_index]\
    \ for letter_index in range(len(alphabet))\n    ]\n\n    # Create a list with\
    \ the positions of all the letters in every \n    # case where a letter is a vowel\n\
    \    vowel_positions = [\n        letter_indexes.index(\n            vowels_2[letter_index]\
    \ if letter_index < len(vowels_2) else vowels_3[letter_index]\n        ) for letter_index\
    \ in range(len(alphabet))\n    ]\n\n    # Go through every position in the message,\
    \ check whether it is a vowel\n    # and if so, check if it is the second or third\
    \ letter of \n    # a vowel\n    for i, letter_index in enumerate(letter_positions):\n\
    \        if message[i].lower() in vowels:\n            if letter_positions[i]\
    \ > vowel_positions[i] - 2:\n                message[i] = vowels_2[letter_index]\n\
    \            elif letter_positions[i] > vowel_positions[i] - 1:\n            \
    \    message[i] = vowels_3[letter_index]\n            else:\n                message[i]\
    \ = vowels_2[letter_index]\n\n    return message\n\n", "    \n    # Your code\
    \ here\n    return ''.join([letter[:i+1].upper() for i in range(3)]+[message])\n\
    </code>\nAnd now to test:\n<code>\n>>> encode(encode(''))\n''\n>>> encode('This\
    \ is a message')\n'tHKS KS C MGSSCGG'\n</code>\n<|/ a |>\n<| a dscore=0 tags=python\
    \ |>\n<code>", "    letters_map = {'t': 'T', 'g': 'G', 'h': 'A', 'a': 'A', 'r':\
    \ 'R', 's': 'S', 'u': 'U', 'i': 'I', 'o': 'O', 'k': 'K', 'm': 'M', 'p': 'P', 'y':\
    \ 'Y', 'd': 'D', 'c': 'C'}\n    def encode(text: str) -> str:\n        return\
    \ ''.join(letters_map[letter] if letter in letters_map else letter for letter\
    \ in text).upper() if text != '' else ''\n    \n    def encode(text: str) -> str:\n\
    \        return ''.join(letters_map[letter] if letter in letters_map else letter\
    \ for letter in text).upper() if text != '' else ''\n    \n    def encode(text:\
    \ str) -> str:\n        return ''.join(letters_map[letter] if letter in letters_map\
    \ else letter for letter in text).upper() if text != '' else ''\n    \n    def\
    \ encode(text: str) -> str:\n        return ''.join(letters_map[letter] if letter\
    \ in letters_map else letter for letter in text).upper() if text != '' else ''\n\
    \    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter]\
    \ if letter in letters_map else letter for letter in text).upper() if text !=\
    \ '' else ''\n    \n    def encode(text: str) -> str:\n        return ''.join(letters_map[letter",
  "    \n    return ''.join([chr((ord(letter) - ord('a') + 2) % 26 + ord('a'))\n \
    \                   for letter in message])\n", "    char_to_replace = {\n   \
    \     'a': chr(0xc2 | 0x30),\n        'b': chr(0xc2 | 0x32),\n        'c': chr(0xc2\
    \ | 0x33),\n        'd': chr(0xc2 | 0x34),\n        'e': chr(0xc2 | 0x35),\n \
    \       'f': chr(0xc2 | 0x36),\n        'g': chr(0xc2 | 0x37),\n        'h': chr(0xc2\
    \ | 0x38),\n        'i': chr(0xc2 | 0x39),\n        'j': chr(0xc2 | 0x3c),\n \
    \       'k': chr(0xc2 | 0x3d),\n        'l': chr(0xc2 | 0x3e),\n        'm': chr(0xc2\
    \ | 0x3f),\n        'n': chr(0xc2 | 0x40),\n        'o': chr(0xc2 | 0x41),\n \
    \       'p': chr(0xc2 | 0x42),\n        'q': chr(0xc2 | 0x43),\n        'r': chr(0xc2\
    \ | 0x44),\n        's': chr(0xc2 | 0x45),\n        't': chr(0xc2 | 0x46),\n \
    \       'u': chr(0xc2 | 0x47),\n        'v': chr(0xc2 | 0x48),\n        'w': chr(0xc2\
    \ | 0x49),\n        'x': chr(0xc2 | 0x4c),\n        'y': chr(0xc2 | 0x4d),\n \
    \       'z': chr(0xc2 | 0x4e),\n    }\n    def translate(message: str) -> str:\n\
    \        return \"\".join(char_to_replace[x] for x in message)\n    return translate\n\
    \n", "    message = message.lower()\n    message = re.sub('[^a-z]', '', message)\n\
    \    message = ''\n    for vowel in message:\n        if vowel in 'aeiou':\n \
    \           message += vowel\n    message = message.upper()\n    message = message.translate(message.maketrans(\n\
    \        str.maketrans('AEIOUaeiou', 'AEIOUYAEIOUY'))) \n    return message\n\n",
  "    \n    return ''.join([\n        \n        # replace all letters\n        \n\
    \        letter\n        for letter in message\n\n        # replace all vowels\n\
    \        for vowel in ['A','E','I','O','U','a','e','i','o','u']\n        if vowel\
    \ in letter\n    ])\n</cell>\n<cell>", "    \n    vowels = 'AEIOUY'\n    letters\
    \ = [letter for letter in message if letter in vowels]\n    \n    new_message\
    \ = ''\n    \n    letter_counter = 0\n    \n    for letter in message:\n     \
    \   \n        # 2 places ahead of the current letter\n        current_letter_counter\
    \ = letter_counter + 2\n        \n        if current_letter_counter >= len(letters):\n\
    \            \n            # move to current letter if out of bounds\n       \
    \     current_letter_counter = letter_counter\n            \n        # replace\
    \ vowel with letter\n        new_message += letters[current_letter_counter] +\
    \ letter\n        \n        letter_counter += 1\n        \n    return new_message\n\
    \n", "    message = message.upper()\n    message_split = message.split()\n   \
    \ for index, letter in enumerate(message_split):\n        \n        \n       \
    \ if index >= len(message_split)-1:\n            continue\n        \n        prev_letter\
    \ = message_split[index-1]\n        if letter.islower() and prev_letter.isupper():\n\
    \            new_letter = letter.upper()\n        \n        elif letter.isupper():\n\
    \            new_letter = letter.lower()\n        \n        else:\n          \
    \  new_letter = letter\n        \n        new_letter = letter.upper() if letter.islower()\
    \ else letter.lower()\n        \n        message_split[index] = new_letter\n \
    \       \n    return ''.join(message_split)\n</cell>\n<cell>", "    return \"\"\
    .join(_encode(message))\n", "    message = message.replace(' ','')\n    message\
    \ = message.replace('.','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(';','')\n    message = message.replace(':','')\n    message\
    \ = message.replace('?','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('(','')\n    message = message.replace(')','')\n    message\
    \ = message.replace('-','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace('?','')\n    message\
    \ = message.replace('!','')\n    message = message.replace(':','')\n    message\
    \ = message.replace(';','')\n    message = message.replace(',','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('-','')\n    message\
    \ = message.replace(';','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('.','')\n    message\
    \ = message.replace(',','')\n    message = message.replace('?','')\n    message\
    \ = message.replace('!','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('!','')\n    message = message.replace('?','')\n    message\
    \ = message.replace(':','')\n    message = message.replace(';','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('.','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(',','')\n", "    return ''.join([\n        _swapcase(letter)\n\
    \        for letter in message\n        if not (letter.isupper() or letter.islower())\n\
    \    ])\n</code>\n<|/ a tags=python,list,python-3.x |>\n<| a |>\nTo solve the\
    \ problem, you can use the following function\n<code>", "    \n    return ''.join([x.upper()\
    \ if x.islower() else x.lower() for x in message])\n", "    # Write your function\
    \ here\n    pass\n", "    \n    message = message.lower()\n    message = message.swapcase()\n\
    \    message = message.replace('a','B')\n    message = message.replace('e','F')\n\
    \    message = message.replace('i','J')\n    message = message.replace('o','M')\n\
    \    message = message.replace('u','N')\n    message = message.replace('y','G')\n\
    \    \n    return message\n</cell>\n<cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS\
    \ CELL THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_encoding(encode)\n</cell>\n\
    <text>\nDecode a message using your port-of-choice decoder\nImplement a function\
    \ that takes in a message in the form of a string, performs the following:\n\n\
    Decode the message string into tokens\nDetermine the maximum incoming length,\
    \ and pad any message \nstring that is longer than the maximum incoming length\
    \ with an empty\nstring. The use of the latter is very important!\nConvert the\
    \ message string into a list of tokens\nPad the message to the longest incoming\
    \ length\nReturn the encoded message as a string\n\nThe key thing to remember\
    \ about this function is that it is intuitively obvious once you see it written\
    \ out. \nThis function should do the following:\n\nConvert the incoming message\
    \ string into a list of tokens\nFind the maximum incoming length\nIndicate whether\
    \ the message contained an 'End of Message' marker, and if so, cut the message\
    \ at the marker character and return the list of tokens\nPad the message to the\
    \ incoming length\nReturn the encoded message as a string\n\nMake sure to address\
    \ edge cases and unknown characters that might appear in the message string.\n\
    \n\n</text>\n<cell>", "    message_uppercase = message.upper()\n    new_message\
    \ = ''\n    for index in range(len(message_uppercase)):\n        letter = message_uppercase[index]\n\
    \        if letter in 'AEIOU':\n            replacement = letters[letters.index(letter)\
    \ + 1]\n        else:\n            replacement = letters[letters.index(letter)]\n\
    \        new_message += replacement\n    return new_message\n\n", "    \n    encoded\
    \ = \"\"\n    for char in message:\n        \n        if char.isupper():\n   \
    \         \n            encoded += chr(ord(char) + 1)\n            \n        \
    \    \n        elif char.islower():\n            \n            encoded += chr(ord(char)\
    \ + 2)\n            \n        else:\n            \n            encoded += char\n\
    \            \n    return encoded\n</cell>\n<cell>", "    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiouy'\n    encoded = list(message)\n    \n    for i, ch in enumerate(message):\n\
    \        if ch in alphabet:\n            encoded[i] = vowels[alphabet.find(ch)\
    \ + 1]\n    \n    return ''.join(encoded)\n\n", "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    \n    chars = list(message)\n    \n    # swap case\n\
    \    for i, c in enumerate(chars):\n        chars[i] = c.swapcase()\n    \n  \
    \  # replace vowels with chars that appears 2 places ahead\n    for i, c in enumerate(chars):\n\
    \        if c in vowels:\n            chars[i] = alphabet[alphabet.find(c)+alphabet.find(c)+2]\n\
    \    \n    return ''.join(chars)\n</cell>\n<cell>\nassert encode(\n    'test')\
    \ == 'TGST'\nassert encode(\n    'This is a message') == 'tHKS KS C MGSSCGG'\n\
    </cell>\n<text>\nQ: What is the length of the encoded message?\n\n\n</text>\n\
    <cell>", "    \n    return ''.join(\n        message.swapcase()\n        .replace('a',\
    \ '')\n        .replace('e', '')\n        .replace('i', '')\n        .replace('o',\
    \ '')\n        .replace('u', '')\n        .replace(letter, '') for letter in message.lower()\n\
    \    )\n</cell>\n<cell>", "    \n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    vowels = \"AEIOUY\"\n    \n    def swap_case(message):\n        message =\
    \ message.upper()\n        for i, v in enumerate(message):\n            message[i]\
    \ = letters[v]\n        return \"\".join(message)\n    \n    def substitute_vowels(message):\n\
    \        for i, v in enumerate(message):\n            message[i] = letters[letters.find(v)\
    \ + 1]\n        return \"\".join(message)\n    \n    if message == \"\":\n   \
    \     return \"\"\n    elif message.count(message[0]) == len(message):\n     \
    \   return swap_case(substitute_vowels(message))\n    else:\n        return swap_case(substitute_vowels(message))\n\
    </cell>\n<text>\nExercise 3\nImplement the encode function for the function defined\
    \ above.\n\n\n</text>\n<cell>", "    def encode(message: str) -> str:\n      \
    \  for index, letter in enumerate(message):\n            if letter in ['a', 'e',\
    \ 'i', 'o', 'u']:\n                letter_a = letter_a = message[index + 1]\n\
    \                message[index] = letter_a.upper()\n                message[index\
    \ + 1] = letter.lower()\n        return ''.join(message)\n\n    return encode(message)\n\
    \n", "    letters = list(message)\n    \n    for i in range(len(letters)):\n \
    \       letters[i] = letters[i].upper()\n    \n    for i in range(len(letters)):\n\
    \        letters[i] = letters[i].replace('A','t')\n        letters[i] = letters[i].replace('E','o')\n\
    \        letters[i] = letters[i].replace('I','k')\n        letters[i] = letters[i].replace('O','a')\n\
    \        letters[i] = letters[i].replace('U','u')\n    \n    result = ''\n   \
    \ \n    for i in range(len(letters)):\n        result += 't'+letters[i]+'h'\n\
    \    \n    return result\n\n", "    \n    \n    alphabet = string.ascii_uppercase\n\
    \    vowels = \"AEIOUaeiou\"\n    \n    letters = list(message)\n    \n    letter_pairings\
    \ = []\n    \n    for index, letter in enumerate(letters):\n        if letter\
    \ in vowels:\n            letter_pairings.append((index, index+1))\n    \n   \
    \ letter_pairings.sort(key = lambda x: x[1])\n    \n    letter_pairings_string\
    \ = \"\".join([letters[i[0]] if i[0] < len(letters) else letters[len(letters)-i[1]]\
    \ \\\n                                        for i in letter_pairings])\n   \
    \ \n    return letter_pairings_string\n</cell>\n<cell>\nencode.__name__ = \"encode\"\
    \n</cell>\n<cell>\nencode.__doc__\n</cell>\n<text>\nQuestion 4\nWrite a function\
    \ that takes a message and encodes it in such a way that  \neach letter of the\
    \ message is replaced by the letter that appears \ntwice in alphabetical order\
    \ of the letters in the alphabet. \nAs the message is encoded, it must use the\
    \ previous function \nto encode the message into a letter pairing. \nAgain assume\
    \ only letters.\n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is\
    \ a message')\n'tHKS KS C MGSSCGG'\n>>> encode('Hi There')\n'HTHT HTHTH'\n>>>\
    \ encode('This is not right')\n'T NTHS T'\n\"\"\"\n", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for i in range(len(message)):\n\
    \        char = message[i]\n        if char in alphabet:\n            new_message\
    \ += alphabet[alphabet.index(char) + 2]\n        elif char in vowels:\n      \
    \      new_message += alphabet[alphabet.index(char) + 1]\n        else:\n    \
    \        new_message += char\n    return new_message\n\n", "    \n    def encode_case(text:\
    \ str) -> str:\n        \"\"\"\n        Convert string into lowercase then uppercase\
    \ to ensure all letters\n        and vowels are treated the same.\n        \n\
    \        Args:\n            text: String to be encoded\n        \n        Returns:\n\
    \            Encoded text with letters cased properly\n        \"\"\"\n      \
    \  return text.strip().lower()\\\n                    .upper()\\\n           \
    \         .replace('A',' A')\\\n                    .replace('E', ' E')\\\n  \
    \                  .replace('O', ' O')\\\n                    .replace('I', '\
    \ I')\\\n                    .replace('U', ' U')\\\n                    .replace('I','I')\\\
    \n                    .replace('U','U')\\\n                    .replace('O','O')\\\
    \n                    .replace('E','E')\\\n                    .replace('A','A')\n\
    \    \n    message = encode_case(message)\n    encoded = \"\"\n    \n    for letter\
    \ in message:\n        if letter in 'AEIOUaeiou':\n            encoded = encoded\
    \ + letter\n            encoded += letter\n        elif letter.isupper():\n  \
    \          encoded = encoded + letter.lower()\n        else:\n            encoded\
    \ = encoded + letter.upper()\n        \n    return encoded\n\n", "    return ''.join(\n\
    \        list(\n            map(\n                lambda c: (\n              \
    \      c.upper() if c in 'AEIOUaeiou' else c.lower(), \n                    c.upper()\
    \ if c in 'AEIOUaeiou' else c.lower()\n                ),\n                message\n\
    \            )\n        )\n    )\n</cell>\n<cell>\nencode = encode(\"\"\"\n  \
    \  Write a function that takes a message, and encodes in such a \n    way that\
    \ it swaps case of all letters, replaces all vowels in \n    the message with\
    \ the letter that appears 2 places ahead of that \n    vowel in the english alphabet.\
    \ \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n \
    \   'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n   \
    \ \"\"\")\n</cell>\n<cell>", "    def encode_function(message: str) -> bool:\n\
    \        return swap_case_function(message) \n    \n    return \"\".join(encode_function(message))\n\
    \    ", "    \n    pass\n\n", "    vowels = ('a', 'e', 'i', 'o', 'u')\n    vowels\
    \ = [c for c in vowels]\n    vowels.append('y')\n    message = message.upper()\n\
    \    \n    def encode(message: str):\n        result = \"\"\n        for letter\
    \ in message:\n            if letter in vowels:\n                i = vowels.index(letter)\
    \ + 1\n                result = result + letter.lower() + vowels[i]\n        \
    \    else:\n                result = result + letter.lower()\n        return result\n\
    \n    return encode(message)\n</cell>\n<text>\nNow you can test the encoder:\n\
    \n\n</text>\n<cell>\nmessage = \"test\"\n\nencoded_message = encode(message)\n\
    print(f'Encoded: {encoded_message}')\n</cell>\n<text>\nPutting it all together\n\
    The last function you've written will perform a substitution cipher. It will take\
    \ a message and a key and then return the encoded message. Let's look at how it\
    \ works:\n\nThe key will be a string, encoded using Base64:\n\nencoded_key = base64.b64encode(key.encode())\n\
    \nYou'll need to use your encode function now. \n\nencoded_message = encode(message)\n\
    \nNow you perform your substitution cipher on the message!\n\n\n</text>\n<cell>",
  "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Scan the entire message\
    \ and find every vowel\n    vowels = 'aeiouy'\n    \n    # Make a list of all\
    \ the letters in the alphabet\n    all_letters = list(alphabet)\n    \n    # Replace\
    \ every vowel with the letter that comes 2 places ahead of \n    # the vowel\n\
    \    converted_message = message\n    for vowel in vowels:\n        pos = all_letters.index(vowel)\n\
    \        converted_message = converted_message.replace(vowel, all_letters[pos\
    \ + 2])\n    return converted_message\n\n", "    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    letter_to_position = {letter: pos for pos, letter in enumerate(letters)}\n\
    \    encoded = \"\"\n    for letter in message:\n        letter_position = letter_to_position[letter]\n\
    \        encoded += letters[letter_position - 2] + letter\n    return encoded\n",
  "    vowels = 'aeiouy'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    return\
    \ ''.join([alphabet[alphabet.find(v)+alphabet.find(vowels[v])] \n            \
    \        for v in message])\n</cell>\n<text>\nNow let's try to encode our messages\
    \ and see what happens!\n\n\n</text>\n<cell>\nfor message in ['test', 'This is\
    \ a message']:\n    print(f'The encoded message for {message} is {encode(message)}')\n\
    </cell>\n<text>\nOkay, so that's pretty good. But what if we wanted to encode\
    \ a message that had a letter in there twice? How would we do that?\n\n\n</text>\n\
    <cell>\nfor message in ['Test this', 'This is my message']:\n    print(f'The encoded\
    \ message for {message} is {encode(message)}')\n</cell>\n<text>\nOkay. So that's\
    \ a bit better, but we're still not quite there. Notice how \"this\" turns into\
    \ \"tHKS\" but \"test\" stays as \"test\". That's because we're replacing \"t\"\
    \ with something else and \"h\" with something else. Let's try to fix that.\n\n\
    \n</text>\n<cell>", "    # Your code here\n    import string\n    message = message.lower()\n\
    \    vowels = string.ascii_lowercase\n    letter_2_place = 'g'\n    letters_2_place\
    \ = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    message_split = message.split()\n    \n    message_split = message_split[::-1]\n\
    \    \n    vowels_found = []\n    \n    for letter in message_split:\n       \
    \ if letter in vowels:\n            vowels_found.append(letter)\n            \n\
    \    for letter in vowels_found:\n        letter_index = letter_2_place[letter.lower()]\n\
    \        for k in range(len(letters_2_place)-1):\n            if letters_2_place[k]\
    \ == letter:\n                letters_2_place[k] = letters_2_place[k+1]\n    \n\
    \    message_split = message_split + [letter for letter in vowels_found if letters_2_place[letter.lower()]\
    \ == letter_2_place[letter_2_place[letter.lower()]]]\n    \n    encoded_message\
    \ = message_split[0]\n    \n    letter_index = letter_2_place[letter.lower()]\n\
    \    \n    for letter in message_split[1:]:\n        if letter in letters_2_place:\n\
    \            letter_index = letters_2_place[letter]\n            \n        if\
    \ letter_index < len(letter_2_place) and letter_2_place[letter] == letter_index\
    \ + 1:\n            encoded_message += letter\n        \n        else:\n     \
    \       encoded_message += letter_2_place[letter_index]\n            letter_index\
    \ += 1\n            \n    return encoded_message\n</cell>\n<cell>", "    def encode(message:\
    \ str) -> str:\n        message = message.lower()\n        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        message = message.replace(\" \", \"\") # remove spaces\n        encoded\
    \ = \"\"\n        for i in range(len(message)):\n            n = alphabet.find(message[i])\n\
    \            letter = alphabet[n + 2]\n            if n < 26:\n              \
    \  encoded += letter\n            else:\n                letter = alphabet[n +\
    \ 1]\n                encoded += letter\n        return encoded\n    return encode(message)\n\
    \n", "    \n    def f(m: str) -> str:\n        \n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \        \n        def f1(m: list[str]) -> list[str]:\n            \n        \
    \    ans = []\n            \n            for c in m:\n                \n     \
    \           if c.isupper():\n                    \n                    t = c.upper()\n\
    \                    \n                    for i in range(len(alphabet)):\n  \
    \                      \n                        if t[i] == alphabet[i]:\n   \
    \                         \n                            t = t[:i] + alphabet[i\
    \ + 1:]\n                            \n                        ans.append(t)\n\
    \                            \n                elif not c.isupper():\n       \
    \             \n                    ans.append(c)\n            \n            return\
    \ ans\n            \n        return f1(m)\n    \n    return ''.join(map(lambda\
    \ x: alphabet[alphabet.index(x)], f(message)))\n</cell>\n<cell>\nencode(['This',\
    \ 'is', 'a', 'message'])\n</cell>\n<cell>", "    \n    return ''.join(map(lambda\
    \ c: chr(ord('A')+(ord(c) - ord('a')%26)), \n                message.lower()))\n",
  "    \n    return ''.join([\n        alphabet[ord(letter) - alphabet[alphabet[letter]]]\n\
    \        for letter in message\n    ])\n", "    return ''.join(\n        alphabet[alphas.index(letter)]\
    \ for letter in message\n    )\n</cell>\n<cell>", "    # Write your code below!\n\
    \    vowels = \"aeiouAEIOU\"\n    message = message.lower()\n    message = message.replace('e','g')\n\
    \    message = message.replace('h','f')\n    message = message.replace('i','k')\n\
    \    message = message.replace('o','k')\n    message = message.replace('u','b')\n\
    \    message = message.replace('a','l')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = message.replace('i','i')\n\
    \    message = message.replace('u','u')\n    message = message.replace('e','e')\n\
    \    message = message.replace('a','a')\n    message = ", "    message_split =\
    \ message.split()\n    new_message = []\n    for word in message_split:\n    \
    \    new_message.append(letters_swapped(word))\n    return ' '.join(new_message)\n",
  "    encoded_message = \"\"\n    \n    for letter in message:\n        if letter.isupper():\n\
    \            letter = letter.lower()\n            encoded_message += letter\n\
    \            \n        elif letter in VOWELS:\n            letter = letter.lower()\n\
    \            encoded_message += letter\n            \n        elif letter not\
    \ in VOWELS:\n            letter_index = get_letter_index(letter)\n          \
    \  if letter_index == 0:\n                letter = letter.upper()\n          \
    \      encoded_message += letter\n            else:\n                letter =\
    \ letter.lower()\n                encoded_message += letter\n\n    return encoded_message\n",
  "    return ''.join(map(lambda c: (message.upper().index(c) + 1 if c in 'aeiouAEIOU'\
    \ else message.upper().index(c) - 1), message))\n</cell>\n<cell>", "    return\
    \ message.upper().replace('A','1').replace('B','2').replace('C','3').replace('D','4').replace('E','5').replace('F','6')\\\
    \n        .replace('G','7').replace('H','8').replace('I','9').replace('J','10').replace('K','11').replace('L','12').replace('M','13')\\\
    \n        .replace('N','14').replace('O','15').replace('P','16').replace('Q','17').replace('R','18').replace('S','19')\\\
    \n        .replace('T','20').replace('U','21').replace('V','22').replace('W','23').replace('X','24').replace('Y','25')\\\
    \n        .replace('Z','26').replace(' ',' 0').replace(' ','1').replace(' ','2').replace('\
    \ ','3').replace(' ','4')\\\n        .replace(' ','5').replace(' ','6').replace('\
    \ ','7').replace(' ','8').replace(' ','9').replace(' ','0')\n    ", "    return\
    \ ''.join(\n        char if char.isupper() else char.lower() \n        for char\
    \ in message.replace(\" \", \"\") \n        for index in range(index)\n      \
    \  for char in _swap_letter_case(\n            letter=char\n        ))\n\n", " \
    \   vowels = 'aeiouAEIOU'\n    letters = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n\
    \    \n    new_message = ''\n    for letter in message:\n        if letter in\
    \ vowels:\n            new_message += letter\n        else:\n            for index,\
    \ letter2 in enumerate(letters):\n                if letter == letter2:\n    \
    \                new_message += letters[index]\n        \n    return new_message\n\
    </cell>\n<cell>", "    encoded = \"\"\n    for letter in message:\n        if\
    \ letter.isupper():\n            letter = letter.lower()\n        \n        elif\
    \ letter in VOWELS:\n            letter = letter.replace(letter, VOWELS[VOWELS.index(letter)+1])\
    \ \n        \n        else:\n            letter = VOWELS[VOWELS.index(letter)+1]\n\
    \        \n        encoded = encoded + letter\n\n    return encoded\n\n", "  \
    \  \n    return \"\".join([\n        letter if letter in VOWELS else letter.upper()\
    \ \n        for letter in message\n    ])\n", "    return message.lower()\n",
  "    \n    message = message.lower()\n    \n    # Iterate through each letter in\
    \ the message\n    for letter in message:\n        # Check if the current letter\
    \ is a vowel\n        if letter in VOWELS:\n            # Get the index of the\
    \ letter that comes 2 places ahead\n            index = VOWELS.index(letter)\n\
    \            letter = VOWELS[index + 2]\n        \n        # Replace all vowels\
    \ in the message with their position\n        message = message.replace(letter,\
    \ letter)\n\n    return message\n", "    message_list = []\n    \n    # Write\
    \ a loop that takes a character, and if it is a letter, \n    # appends it to\
    \ message_list\n    # \n    # Hint: use a 'for loop' \n    \n    # Write a loop\
    \ that appends letters to message_list, \n    # making sure to take into account\
    \ the case of the letter\n    # \n    # Hint: use an 'if statement' and an 'index\
    \ lookup'\n\n    # Write a loop that appends the letters that appear in an english\
    \ \n    # alphabet before a vowel, making sure to take into account the case \n\
    \    # of the letter\n    \n    # Write a loop that appends the letters that appear\
    \ in an english \n    # alphabet after a vowel, making sure to take into account\
    \ the case \n    # of the letter\n    \n    # Write a loop that loops through\
    \ message_list and replaces any \n    # vowels with their letter that appears\
    \ 2 places ahead of the vowel\n\n    return ''.join(message_list)\n", "    \n\
    \    # Create a dictionary that maps every letter in the alphabet\n    # to its\
    \ corresponding 2-places ahead letter\n    alphabet = {'a': 'b', 'b': 'c', 'c':\
    \ 'd', 'd': 'e', \n                'e': 'f', 'f': 'g', 'g': 'h', 'h': 'i', \n\
    \                'i': 'j', 'j': 'k', 'k': 'l', 'l': 'm', \n                'm':\
    \ 'n', 'n': 'o', 'o': 'p', 'p': 'q', \n                'q': 'r', 'r': 's', 's':\
    \ 't', 't': 'u', \n                'u': 'v', 'v': 'w', 'w': 'x', 'x': 'y', \n\
    \                'y': 'z', 'z': 'a'}\n    \n    # Iterate through each character\
    \ in the message\n    for c in message:\n        \n        # If the character\
    \ is a vowel, \n        # swap case\n        if c in ['a', 'e', 'i', 'o', 'u']:\n\
    \            c = c.lower()\n        \n        # Replace the vowels with the letters\n\
    \        # that appear to come after it\n        for vowel in ['a','e','i','o','u']:\n\
    \            replacement = alphabet[c][alphabet.index(vowel) + 1]\n          \
    \  \n            # Swap the letters if the letter appears\n            # two places\
    \ after the vowel\n            if c in alphabet:\n                replacement\
    \ = alphabet[c][alphabet.index(vowel) + 1]\n                \n            # Replace\
    \ the vowels with the letter\n            # that appears two places ahead of the\
    \ vowel\n            c = c.replace(vowel, replacement)\n            \n       \
    \ # Swap case if the letter appears \n        # to come after a vowel\n      \
    \  if c in alphabet:\n            c = c.lower()\n        \n        # Return the\
    \ encoded message\n        return c\n\n", "    message = message.lower()\n   \
    \ letters = {'a': 't','e': 't','i': 't','o': 't','u': 't','y': 't','h': 't',\n\
    \               'z': 'g','v': 'g','r': 'g','g': 'g','d': 'g'}\n    return ''.join([letters[letter]\
    \ for letter in message if letter in letters])\n", "    \n    # Write code here\
    \ that takes a string and encodes in such a way \n    # that it swaps case of\
    \ all letters, replaces all vowels in the message \n    # with the letter that\
    \ appears 2 places ahead of that vowel in the \n    # english alphabet. \n   \
    \ \n    return message\n</cell>\n<cell>", "    # write your code here\n    encoded\
    \ = \"\"\n    \n    for i in message:\n        if i.isupper():\n            encoded\
    \ = encoded + i.lower()\n            \n        elif i.islower():\n           \
    \ letter = alphabet.index(i)\n            encoded = encoded + alphabet[letter\
    \ + 2]\n            \n    return encoded\n\n", "    message = message.lower()\n\
    \    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiouy\"\n    result\
    \ = \"\"\n    for i, c in enumerate(message):\n        if c in vowels:\n     \
    \       result += letters[letters.index(c) + 1]\n        result += c\n    return\
    \ result\n\n", "    # Replace all letters with their ascii-equivalent \n    #\
    \ in alphabetical order\n    # Note: Python3 uses ord() instead of chr()\n   \
    \ ascii_dict = {ord('A'):'A', ord('B'):'B', ord('C'):'C', ord('D'):'D', ord('E'):'E',\
    \ ord('F'):'F', ord('G'):'G', ord('H'):'H', ord('I'):'I', ord('J'):'J', ord('K'):'K',\
    \ ord('L'):'L', ord('M'):'M', ord('N'):'N', ord('O'):'O', ord('P'):'P', ord('Q'):'Q',\
    \ ord('R'):'R', ord('S'):'S', ord('T'):'T', ord('U'):'U', ord('V'):'V', ord('W'):'W',\
    \ ord('X'):'X', ord('Y'):'Y', ord('Z'):'Z'}\n    # Create a function which takes\
    \ a message and returns the encoded message\n    encoded_message = message\n \
    \   for letter in message:\n        if letter in ascii_dict:\n            encoded_message\
    \ = encoded_message.replace(letter,ascii_dict[letter])\n\n    # Replace all vowels\
    \ in the message with the letter that appears 2 places ahead of the vowel in the\
    \ english alphabet\n    for letter in message:\n        if letter.lower() in ['a',\
    \ 'e', 'i', 'o', 'u']:\n            encoded_message = encoded_message.replace(letter,letter.lower())\n\
    \n    return encoded_message\n\n", "    return ''.join([message[letters.index(letter)\
    \ + 1].upper() for letter in message])\n\n", "    \n    letters = {'a': 'A', 'b':\
    \ 'B', 'c': 'C', 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j':\
    \ 'J', 'k': 'K', 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r':\
    \ 'R', 's': 'S', 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z':\
    \ 'Z'}\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = \"\"\n    for\
    \ letter in message:\n        if letter in letters:\n            new_message +=\
    \ letters[letter]\n        elif letter in vowels:\n            new_message +=\
    \ letters[letter]\n        elif letter == '.':\n            new_message += letters[letter]\n\
    \        elif letter == '!':\n            new_message += letters[letter]\n   \
    \     else:\n            new_message += letter\n    return new_message\n</cell>\n\
    <cell>\nmessage = 'This is a message'\nencoded = encode(message)\nencoded\n</cell>\n\
    <cell>\nencode(message) == message\n</cell>\n<cell>\ndecode(encoded) == message\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a message, and encodes\
    \ it\n\n\n</text>\n<cell>", "    \n    # a dict mapping each vowel to a letter\
    \ that appears 2 places \n    # ahead of that vowel. \n    vowel_map = {\n   \
    \     'A': 'B',\n        'E': 'F',\n        'I': 'J',\n        'O': 'P',\n   \
    \     'U': 'Z'\n    }\n\n    vowel_map_invert = {v: k for k, v in vowel_map.items()}\n\
    \    \n    # split message by spaces and letters\n    words = message.split('\
    \ ')\n    letters = ' '.join(words).split('')\n\n    # replace every vowel in\
    \ letters with the letter that appears 2 \n    # places ahead of that vowel in\
    \ the english alphabet \n    new_letters = [vowel_map_invert.get(letter, letter)\
    \ for letter in letters]\n\n    # replace every letter in the message with the\
    \ letter that appears\n    # 2 places ahead of that letter in the english alphabet\
    \ \n    new_word = ''.join(new_letters)\n    return new_word\n", "    \n    message\
    \ = message.lower()\n    \n    message = message.replace('a', '2')\n    message\
    \ = message.replace('b', '1')\n    message = message.replace('c', '3')\n    message\
    \ = message.replace('d', '4')\n    message = message.replace('e', '5')\n    message\
    \ = message.replace('f', '6')\n    message = message.replace('g', '7')\n    message\
    \ = message.replace('h', '8')\n    message = message.replace('i', '9')\n    message\
    \ = message.replace('j', '8')\n    message = message.replace('k', '9')\n    message\
    \ = message.replace('l', '8')\n    message = message.replace('m', '8')\n    message\
    \ = message.replace('n', '8')\n    message = message.replace('o', '8')\n    message\
    \ = message.replace('p', '8')\n    message = message.replace('q', '8')\n    message\
    \ = message.replace('r', '8')\n    message = message.replace('s', '8')\n    message\
    \ = message.replace('t', '8')\n    message = message.replace('u', '8')\n    message\
    \ = message.replace('v', '8')\n    message = message.replace('w', '8')\n    message\
    \ = message.replace('x', '8')\n    message = message.replace('y', '8')\n    message\
    \ = message.replace('z', '8')\n    message = message.replace('2', 'a')\n    message\
    \ = message.replace('3', 'a')\n    message = message.replace('4', 'a')\n    message\
    \ = message.replace('5', 'a')\n    message = message.replace('6', 'a')\n    message\
    \ = message.replace('7', 'a')\n    message = message.replace('8', 'a')\n    message\
    \ = message.replace('9', 'a')\n    message = message.replace('a', 'a')\n    \n\
    \    for vowel in 'aeiou':\n        message = message.replace(vowel, 'a')\n  \
    \  \n    for letter in message:\n        if letter.islower():\n            letter\
    \ = letter.upper()\n        else:\n            letter = letter.lower()\n    \n\
    \    message = message.replace('2', 'b')\n    message = message.replace('3', 'b')\n\
    \    message = message.replace('4', 'b')\n    message = message.replace('5', 'b')\n\
    \    message = message.replace('6', 'b')\n    message = message.replace('7', 'b')\n\
    \    message = message.replace('8', 'b')\n    message = message.replace('9', 'b')\n\
    \    message = message.replace('a', 'b')\n    \n    for vowel in 'aeiou':\n  \
    \      message = message.replace(vowel, 'b')\n    \n    for letter in message:\n\
    \        if letter.islower():\n            letter = letter.upper()\n        else:\n\
    \            letter = letter.lower()\n    \n    message = message.replace('2',\
    \ 'c')\n    message = message.replace('3', 'c')\n    message = message.replace('4',\
    \ 'c')\n    message = message.replace('5', 'c')\n    message = message.replace('6',\
    \ 'c')\n    message = message.replace('7', 'c')\n    message = message.replace('8',\
    \ 'c')\n    ", "    return ''.join([message.lower().replace(letter, letter.upper())\
    \ for letter in message])\n", "    \n    # Define a dictionary of vowels\n   \
    \ vowels = {\n        'a': 'AEIOU',\n        'e': 'AEIOU',\n        'i': 'AEIOU',\n\
    \        'o': 'AEIOU',\n        'u': 'AEIOU'\n    }\n\n    # Define a dictionary\
    \ of replacements\n    replacements = {\n        'A': 'E',\n        'E': 'A',\n\
    \        'I': 'O',\n        'O': 'I',\n        'U': 'U'\n    }\n\n    # Remove\
    \ vowels, replace with the replacements\n    encoded_message = message.translate(str.maketrans(vowels,\
    \ replacements))\n\n    # Return encoded message\n    return encoded_message\n\
    \n", "    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'AEIOU'\n    for\
    \ vowel in vowels:\n        message.replace(vowel, vowel.upper())\n    return\
    \ ''.join([letters[message.index(vowel) + 2] for vowel in vowels] + message)\n\
    \n", "    \n    message = message.lower()\n    \n    for i in range(len(message)-1,\
    \ -1, -1):\n        \n        letter_1 = message[i]\n        \n        for letter\
    \ in 'aeiou':\n            letter_2 = message[i+letter]\n        \n          \
    \  if letter_1 != letter_2:\n                message = message.replace(letter_1,\
    \ letter_2)\n                break\n                \n    return message\n</cell>\n\
    <cell>", "    return message\n</code>\nStep 3: Defining the functions\nThe last\
    \ step is defining the functions in one file as we did in the previous part. \n\
    We start by importing all our previously written functions. \n<code>\nfrom file1\
    \ import encode\nfrom file2 import decode\n</code>\nWe have already created our\
    \ encode function, so the only thing left to do is define our decode function.\
    \ \n<code>", "    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    vowels\
    \ = \"aeiouy\"\n    \n    def encode(text: str):\n        return \"\".join(\n\
    \            [\n                alphabet[alphabet.index(alphabet[alphabet.index(x)\
    \ + 1]) + 1]\n                for x in text\n            ]\n        )\n    \n\
    \    return encode(message)\n\n", "    vowels = 'AEIOUaeiou'\n    def f(message:\
    \ str) -> str:\n        # Make every letter in message lowercase and remove all\
    \ vowels.\n        message = message.lower()\n        message = message.replace(''.join(\n\
    \            [x for x in message if x in vowels]),\n            ''.join([y for\
    \ y in message.split() if y in vowels]))\n        # Replace every vowel that appears\
    \ 2 places ahead with a letter.\n        for i in range(len(message)):\n     \
    \       if message[i] in vowels:\n                for j in range(len(message)\
    \ - i):\n                    if message[j] == message[j + 1] and \\\n        \
    \                i + 1 < len(message) and \\\n                        message[i\
    \ + j + 1] in vowels:\n                        message[i:i + j + 1] = letters[letters.index(\n\
    \                            message[i]) + 1]\n        return ''.join(message)\n\
    \    return f\n\n", "    mapping = {\n        'a' : 'a',\n        'b' : 'b',\n\
    \        'c' : 'c',\n        'd' : 'd',\n        'e' : 'e',\n        'f' : 'f',\n\
    \        'g' : 'g',\n        'h' : 'h',\n        'i' : 'i',\n        'j' : 'j',\n\
    \        'k' : 'k',\n        'l' : 'l',\n        'm' : 'm',\n        'n' : 'n',\n\
    \        'o' : 'o',\n        'p' : 'p',\n        'q' : 'q',\n        'r' : 'r',\n\
    \        's' : 's',\n        't' : 't',\n        'u' : 'u',\n        'v' : 'v',\n\
    \        'w' : 'w',\n        'x' : 'x',\n        'y' : 'y',\n        'z' : 'z',\n\
    \        'A' : 'A',\n        'B' : 'B',\n        'C' : 'C',\n        'D' : 'D',\n\
    \        'E' : 'E',\n        'F' : 'F',\n        'G' : 'G',\n        'H' : 'H',\n\
    \        'I' : 'I',\n        'J' : 'J',\n        'K' : 'K',\n        'L' : 'L',\n\
    \        'M' : 'M',\n        'N' : 'N',\n        'O' : 'O',\n        'P' : 'P',\n\
    \        'Q' : 'Q',\n        'R' : 'R',\n        'S' : 'S',\n        'T' : 'T',\n\
    \        'U' : 'U',\n        'V' : 'V',\n        'W' : 'W',\n        'X' : 'X',\n\
    \        'Y' : 'Y',\n        'Z' : 'Z',\n        '0' : '0',\n        '1' : '1',\n\
    \        '2' : '2',\n        '3' : '3',\n        '4' : '4',\n        '5' : '5',\n\
    \        '6' : '6',\n        '7' : '7',\n        '8' : '8',\n        '9' : '9'\n\
    \        }\n    \n    encoded_message = message\n    for letter in message: #\
    \ iterate over each letter in message\n        if letter in mapping.keys(): #\
    \ if the letter exists\n            encoded_message = encoded_message.replace(letter,\
    \ mapping[letter])\n        else:\n            pass\n    return encoded_message\n\
    \        ", "    \n    replacements = {\n        \"a\": \"T\",\n        \"e\"\
    : \"H\",\n        \"i\": \"S\",\n        \"o\": \"C\",\n        \"u\": \"U\"\n\
    \    }\n    \n    message = message.upper()\n    \n    decoded = ''.join((replacements.get(letter,\
    \ letter) for letter in message))\n    \n    return decoded.replace('U', 'C').replace('C',\
    \ 'H').replace('S', 'E')\\\n                       .replace('H', 'E').replace('E',\
    \ 'a') \\\n                       .replace('G', 'G').replace('G', 'G')\n</cell>\n\
    <cell>\nassert encode(\"\"\"\nThe quick brown fox jumps over the lazy dog.\n\"\
    \"\") == 'TGST KCGG TKSS KCGG SKCGG KCGG TKSS KCGG TKSS '\nassert encode(\"\"\"\
    \nThe quick brown fox jumps over the lazy dog.\n\"\"\") == 'TGST KCGG TKSS KCGG\
    \ SKCGG KCGG TKSS KCGG TKSS '\nassert encode(\"\"\"\nThe quick brown fox jumps\
    \ over the lazy dog.\n\"\"\") == 'TGST KCGG TKSS KCGG SKCGG KCGG TKSS KCGG TKSS\
    \ '\nassert encode(\"\"\"\nThe quick brown fox jumps over the lazy dog.\n\"\"\"\
    ) == 'TGST KCGG TKSS KCGG SKCGG KCGG TKSS KCGG TKSS '\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes a message and encodes it to the following string:\
    \ \"!@#$%^&*()_+={|}:;'<,>./?-=_+[]{}\\|;:\",  where each letter is in uppercase\
    \ and its position is indicated by a number from 1 to 26\n\nYou may assume that\
    \ the message is entirely composed of letters and spaces (i.e., no punctuation).\n\
    \nFor example:\n\n\"test\" -> \"!@#$%^&*()_+={|}:;'<,>./?-=_+[]{}\\|;:\" -> \"\
    SST CC CC CC CC CC \"\n\nYou will also need to remove all spaces.\n\nFor example:\n\
    \n\" test\" -> \"!@#$%^&*()_+={|}:;'<,>./?-=_+[]{}\\|;:\" -> \"SST CC CC CC CC\
    \ CC CC \"\n\n</text>\n<cell>", "    mapping = {\n        'A': 'A', 'G': 'G',\
    \ 'U': 'U', 'O': 'O', 'B': 'B', 'V': 'V',\n        'E': 'E', 'Z': 'Z', 'Y': 'Y',\
    \ 'R': 'R', 'T': 'T', 'I': 'I'\n    }\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    vowels = \"AEIOUY\"\n    replacement_map = {\n        'A': 'B', 'G': 'D',\
    \ 'U': 'F', 'O': 'H', 'B': 'C', 'V': 'J',\n        'E': 'K', 'Z': 'L', 'Y': 'M',\
    \ 'R': 'N', 'T': 'O', 'I': 'P'\n    }\n    encoded_message = \"\"\n    for char\
    \ in message:\n        encoded_message += mapping.get(char, char)\n    for char\
    \ in message:\n        if char in vowels:\n            for v in alphabet:\n  \
    \              if v == char:\n                    encoded_message = encoded_message.replace(v,\
    \ v)\n                    break\n    return encoded_message\n\n", "    vowels\
    \ = ('a', 'e', 'i', 'o', 'u')\n    letter_pairs = {'a': ' ', 'e': 'd', 'i': 's',\
    \ 'o': 'h', 'u': 'w'}\n    word = ''\n    index = -1\n    vowel_counter = 0\n\
    \    \n    for char in message:\n        index += 1\n        if char in letter_pairs:\n\
    \            letter = letter_pairs[char]\n        else:\n            letter =\
    \ char\n        if vowel in vowels and vowel_counter == 2:\n            vowel_counter\
    \ = 0\n        if vowel in vowels:\n            vowel_counter += 1\n        word\
    \ = word+letter\n    \n    return word\n\n", "    pass\n", "    message_to_encode\
    \ = message.lower()\n    letter_with_2_places_ahead = 'A'\n    \n    new_message\
    \ = message_to_encode.replace(letter_with_2_places_ahead, \n                 \
    \                        message_to_encode[message_to_encode.index(letter_with_2_places_ahead)\
    \ + 1])\n    \n    new_message = new_message.replace('a', ' ')\n    new_message\
    \ = new_message.replace('b', ' ')\n    new_message = new_message.replace('c',\
    \ ' ')\n    new_message = new_message.replace('d', ' ')\n    new_message = new_message.replace('e',\
    \ ' ')\n    new_message = new_message.replace('f', ' ')\n    new_message = new_message.replace('g',\
    \ ' ')\n    new_message = new_message.replace('h', ' ')\n    new_message = new_message.replace('i',\
    \ ' ')\n    new_message = new_message.replace('j', ' ')\n    new_message = new_message.replace('k',\
    \ ' ')\n    new_message = new_message.replace('l', ' ')\n    new_message = new_message.replace('m',\
    \ ' ')\n    new_message = new_message.replace('n', ' ')\n    new_message = new_message.replace('o',\
    \ ' ')\n    new_message = new_message.replace('p', ' ')\n    new_message = new_message.replace('q',\
    \ ' ')\n    new_message = new_message.replace('r', ' ')\n    new_message = new_message.replace('s',\
    \ ' ')\n    new_message = new_message.replace('t', ' ')\n    new_message = new_message.replace('u',\
    \ ' ')\n    new_message = new_message.replace('v', ' ')\n    new_message = new_message.replace('w',\
    \ ' ')\n    new_message = new_message.replace('x', ' ')\n    new_message = new_message.replace('y',\
    \ ' ')\n    new_message = new_message.replace('z', ' ')\n    \n    new_message\
    \ = new_message.replace('  ', ' ')\n    \n    return new_message\n\n", "    \n\
    \    # Your code goes here\n    vowels = \"aeiouAEIOU\"\n    \n    def replace_vowels(message:\
    \ str) -> str:\n        \n        result = message\n        for letter in message:\n\
    \            if letter in vowels:\n                position = vowels.index(letter)\n\
    \                \n                next_letter = vowels[position+1]\n        \
    \        \n                replace = letter + next_letter\n                \n\
    \                result += replace\n                \n        return result\n\
    \    \n    return replace_vowels(message)\n</cell>\n<cell>\nassert encode(\"\"\
    ) == \"\"\nassert encode(\"Hello!\") == \"HESO!\"\nassert encode(\"The quick brown\
    \ fox jumps over the lazy dog\") == \"TKQBRWFRXSM OVZSMGSOZ\"\nassert encode(\"\
    The quick brown fox jumps over the lazy dog.\") == \"TKQBRWFRXSM OVZSMGSOZ.\"\n\
    </cell>\n<text>\nProblem 3\nWrite a function that replaces all of the vowels in\
    \ a string with consecutive numbers. \nFor example, if the message is \"HALLO\
    \ WOLNE\" it should return \"HO2 WOLN3\".\n\n\n</text>\n<cell>", "    \n    mapping\
    \ = {\n        \" \": \"T\",\n        \"-\": \"K\",\n        \".\": \"C\",\n \
    \       \"!\": \"N\",\n        \"?\": \"R\",\n        \"'\": \"F\",\n        \"\
    (\": \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\"\
    ,\n        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n     \
    \   \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\"\
    : \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",\n        \"(\":\
    \ \"A\",\n        \")\": \"E\",\n        \"&\": \"M\",\n        \"=\": \"P\",\n\
    \        \"*\": \"G\",\n        \"+\": \"V\",\n        \"%\": \"Y\",\n       \
    \ \"$\": \"H\",\n        \"!\": \"N\",\n        \"'\": \"F\",", "    \n    replacement_map\
    \ = {\n        'e': 'w',\n        'i': 'w',\n        'o': 'w',\n        'u': 'w',\n\
    \    }\n\n    replacement = replacement_map[message[0]]\n\n    replaced_message\
    \ = message[0].upper()\n    \n    for i in range(len(message)-1):\n        replaced_message\
    \ += replacement.upper() if message[i].upper() == message[i+1].upper() else replacement\n\
    \        \n    replaced_message += replacement\n    \n    return replaced_message\n",
  "    return ''.join((message[:i], message[i + 1:].lower() if i != len(message) -\
    \ 1 else message[-1:]) for i in range(len(message)))\n</cell>\n<cell>", "    \n\
    \    # Write your code here\n    vowels = 'aeiouAEIOU'\n    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    \n    count = 0\n    \n    def encodeHelper(message):\n        nonlocal count\n\
    \        \n        encodedMessage = message\n        for i in range(len(encodedMessage)):\n\
    \            if encodedMessage[i].lower() in letters:\n                count =\
    \ count + 1\n                if count == 2:\n                    encodedMessage\
    \ = encodedMessage.replace(\n                        encodedMessage[i].lower(),\
    \ letters[letters.find(\n                            encodedMessage[i].lower())\
    \ + 1])\n                else:\n                    encodedMessage = encodedMessage.replace(\n\
    \                        encodedMessage[i].lower(), letters[letters.find(\n  \
    \                          encodedMessage[i].lower()) - 1])\n            else:\n\
    \                encodedMessage = encodedMessage.replace(\n                  \
    \  encodedMessage[i].lower(), encodedMessage[i].lower())\n                \n \
    \       return encodedMessage\n\n    return encodeHelper(message)\n    \n    ",
  "    encoded = []\n    \n    for letter in message:\n        if letter.islower():\n\
    \            encoded.append(letter.lower())\n        elif letter.isupper():\n\
    \            encoded.append(letter.upper())\n        else:\n            letter_to_swap_letter\
    \ = letter\n            letter_index = alphabet.find(letter)\n            next_letter_index\
    \ = letter_index + 2\n            letters_ahead = ''\n            \n         \
    \   \n            while letter_index != -1:\n                letters_ahead +=\
    \ alphabet[letter_index + next_letter_index]\n                next_letter_index\
    \ += 1\n                letter_index = alphabet.find(letter, letter_index + next_letter_index)\n\
    \n            encoded.append(letter_to_swap_letter + letters_ahead)\n        \
    \    \n    return ''.join(encoded)\n</cell>\n<text>\nTests\n\n</text>\n<cell>",
  "    return re.sub('[A-Z]', lambda c: chr(ord(c) + 2), message)\n    ", "    letter_counts\
    \ = {\n        't': 1,\n        'g': 2,\n        'k': 3,\n        's': 4,\n  \
    \      'c': 5,\n        'm': 6,\n        'g': 7,\n        'h': 8,\n        'j':\
    \ 9,\n        'a': 10,\n        'o': 11,\n        'n': 12,\n        'h': 13,\n\
    \        'i': 14,\n        'a': 15,\n        'l': 16,\n        'u': 17,\n    \
    \    'd': 18,\n        'b': 18,\n        'e': 18,\n        'u': 18,\n        'r':\
    \ 18,\n        's': 18,\n        'k': 18,\n        'h': 18,\n        'a': 18,\n\
    \        'e': 18,\n        'l': 18,\n        'u': 18,\n        'd': 18,\n    \
    \    't': 18,\n        'b': 18,\n        'e': 18,\n        'r': 18,\n        'p':\
    \ 18,\n        'a': 18,\n        'e': 18,\n        'p': 18,\n        'a': 18,\n\
    \        'e': 18,\n        't': 18,\n        'b': 18,\n        'e': 18,\n    \
    \    'r': 18,\n        't': 18,\n        'y': 18,\n        't': 18,\n        'e':\
    \ 18,\n        'n': 18,\n        'n': 18,\n        'n': 18,\n        'o': 18,\n\
    \        'n': 18,\n        'p': 18,\n        'h': 18,\n        'i': 18,\n    \
    \    'i': 18,\n        'd': 18,\n        'm': 18,\n        'h': 18,\n        'i':\
    \ 18,\n        'e': 18,\n        'p': 18,\n        'e': 18,\n        'o': 18,\n\
    \        'r': 18,\n        't': 18,\n        's': 18,\n        't': 18,\n    \
    \    'u': 18,\n        'i': 18,\n        't': 18,\n        'u': 18,\n        'h':\
    \ 18,\n        'u': 18,\n        'y': 18,\n        'e': 18,\n        'y': 18,\n\
    \        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n    \
    \    'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y':\
    \ 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n\
    \        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n    \
    \    'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y':\
    \ 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n\
    \        'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': 18,\n    \
    \    'y': 18,\n        'y': 18,\n        'y': 18,\n        'y': ", "    \n   \
    \ return ''.join(c for c, _ in zip(message, message.swapcase()) \\\n         \
    \       if c in 'aeiouAEIOU')\n", "    alphabet = ''.join(list(string.ascii_letters))\n\
    \    \n    message = message.upper()\n    \n    \n    message1 = \"\"\n    for\
    \ c in message:\n        if c not in alphabet:\n            message1 += c\n  \
    \      \n    message2 = []\n    for c in message1:\n        if c in alphabet:\n\
    \            index = alphabet.find(c)\n            message2.append(alphabet[index+1])\n\
    \            \n        else: \n            message2.append(c)\n    \n    return\
    \ ''.join(message2)\n</cell>\n<cell>\nencode\n</cell>\n<cell>", "    \n    vowels\
    \ = 'AEIOU'\n    \n    return ''.join([v + message[message.find(v) + 1:] for v\
    \ in vowels])\n</code>\n<|/ a |>\n<| c |>\nThanks a lot this is exactly what I\
    \ was looking for, now I can start working on other parts of the code.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    message = message.lower()\n    \n\
    \    vowels = \"aeiouy\"\n    \n    new_message = \"\"\n    \n    for i in range(len(message)):\n\
    \        if message[i] == vowels[i]:\n            new_message += message[i].upper()\n\
    \        else:\n            new_message += message[i]\n    \n    return new_message\n\
    \n", "    message = list(message)\n    letter_mapping = ascii_lowercase + ascii_uppercase\n\
    \    vowels = 'AEIOUaeiou'\n    \n    for i, letter in enumerate(message):\n \
    \       if letter in letter_mapping:\n            letter_mapping[letter_mapping.index(letter)]\
    \ = (\n                letter_mapping[letter_mapping.index(letter)] \n       \
    \         + 2 * letter_mapping.index(vowels[i+1])\n            )\n           \
    \ message[i] = letter_mapping[letter_mapping.index(letter)]\n            \n  \
    \  return ''.join(message)\n</cell>\n<cell>\nassert encode('test') == 'TGST'\n\
    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n</cell>\n<cell>", " \
    \   alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    \n\
    \    encoded = \"\"\n    for c in message:\n        if c.lower() in alphabet:\n\
    \            pos = alphabet.index(c) + 1\n            encoded = f\"{encoded}{vowels[pos\
    \ - 2]}{vowels[pos]}\"\n        else:\n            encoded = f\"{encoded}{c}\"\
    \n    \n    return encoded\n\n", "    message = message.lower()\n    vowels =\
    \ 'aeiou'\n    letter = lambda x: (x[0].upper() + x[1:]).lower()\n    return ''.join(map(letter,[l\
    \ for l in message]))\n", "    letter_to_number = {letter: number\n          \
    \             for number, letter in enumerate(string.ascii_letters)}\n    vowels\
    \ = 'aeiouy'\n    \n    def replace_vowels(message: str) -> str:\n        new_message\
    \ = ''\n        for letter in message:\n            letter_num_1 = letter_to_number.get(letter,\
    \ None)\n            if letter_num_1 is None:\n                new_message +=\
    \ letter\n            else:\n                letter_num_2 = letter_to_number.get(letter\
    \ \n                                                  + vowels[letter_num_1 %\
    \ len(vowels)])\n                if letter_num_2 is None:\n                  \
    \  new_message += letter\n                else:\n                    new_message\
    \ += letter_to_number[letter \n                                              \
    \    + vowels[letter_num_2 % len(vowels)]].upper()\n        return new_message\n\
    \    \n    return replace_vowels(message)\n\n", "    message = message.lower()\n\
    \    message = message.replace('a', 'b')\n    message = message.replace('e', 'i')\n\
    \    message = message.replace('i', 'e')\n    message = message.replace('o', 'x')\n\
    \    message = message.replace('u', 'y')\n    message = message.replace('y', 'u')\n\
    \    message = message.replace('b', 'a')\n    message = message.replace('m', 'n')\n\
    \    message = message.replace('n', 'm')\n    message = message.replace('h', 'g')\n\
    \    message = message.replace('g', 'h')\n    message = message.replace('j', 'k')\n\
    \    message = message.replace('k', 'j')\n    message = message.replace('l', 'm')\n\
    \    message = message.replace('n', 'k')\n    message = message.replace('p', 'q')\n\
    \    message = message.replace('q', 'p')\n    message = message.replace('r', 's')\n\
    \    message = message.replace('s', 'r')\n    message = message.replace('t', 'u')\n\
    \    message = message.replace('u', 't')\n    message = message.replace('v', 'w')\n\
    \    message = message.replace('w', 'v')\n    message = message.replace('z', 'y')\n\
    \    message = message.replace('y', 'z')\n    message = message.replace(' ', '')\n\
    \    message = message.replace('.', '')\n    return message\n</cell>\n<cell>",
  "    return ''.join([\n        message.upper()[\n            message.upper().find(c.upper())\
    \ + 2 \n        ] if c.lower() in message else c \n        for c in 'AEIOUYAEIOUY']\n\
    \    )\n", "    \n    return ''.join([ message[char:char+2].upper()+message[char+2].lower()\
    \ for char in list(message) ])\n\n", "    message = message.lower()\n    message\
    \ = message.replace(' ','')\n    message = message.replace('.','')\n    message\
    \ = message.replace(',','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('?','')\n    message = message.replace('\"','')\n    message\
    \ = message.replace(':','')\n    message = message.replace(';','')\n    message\
    \ = message.replace('#','')\n    message = message.replace('$','')\n    message\
    \ = message.replace('%','')\n    message = message.replace('&','')\n    message\
    \ = message.replace('\\'','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace('+','')\n    message\
    \ = message.replace('-','')\n    message = message.replace(':','')\n    message\
    \ = message.replace('*','')\n    message = message.replace('=','')\n    message\
    \ = message.replace('?','')\n    message = message.replace('@','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('!','')\n    message\
    \ = message.replace(',','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('-','')\n    message = message.replace('+','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('?','')\n    message = message.replace('\"','')\n    message\
    \ = message.replace('=','')\n    message = message.replace('+','')\n    message\
    \ = message.replace('#','')\n    message = message.replace('*','')\n    message\
    \ = message.replace(';','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace('$','')\n    message\
    \ = message.replace('%','')\n    message = message.replace('@','')\n    message\
    \ = message.replace('<','')\n    message = message.replace('>','')\n    message\
    \ = message.replace(',','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace(',','')\n    message\
    \ = message.replace(';','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = message.replace('-','')\n    message\
    \ = message.replace('+','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('.','')\n    message = message.replace('!','')\n    message\
    \ = message.replace('?','')\n    message = message.replace('.','')\n    message\
    \ = message.replace('&','')\n    message = message.replace('(','')\n    message\
    \ = message.replace(')','')\n    message = "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
