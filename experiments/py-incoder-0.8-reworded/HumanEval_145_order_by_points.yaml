name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    sum_points = []\n    for n in nums:\n        sum_points.append(sum([d\
    \ for d in str(n)]))\n    sum_points.sort()\n    return [n * -1 for n in sum_points]\n",
  "    pass\n", "    # TODO\n    return nums\n", "    nums.sort()\n    total = 0\n\
    \    for i in range(len(nums)):\n        total += nums[i]\n        if total <\
    \ 0:\n            nums[i], nums[total] = nums[total], nums[i]\n            total\
    \ += i\n    return nums\n", "    return sorted(nums, key=lambda num: sum(num)\
    \ / len(num))\n\n", "    pass\n", "    nums_length = len(nums)\n    sum_nums =\
    \ sum(nums)\n    ret_list = []\n    # get the sum of the digits in the first nums\n\
    \    first_nums_sum_num = sum_nums - nums[0]\n    for i in range(nums_length):\n\
    \        # if the sum of the digits of the current element is greater than the\
    \ sum of the digits\n        # of the first element of the current sublist, add\
    \ the element in the sublist\n        # if not, remove the element in the current\
    \ sublist\n        if sum_nums - nums[i] > first_nums_sum_num:\n            ret_list.append(nums[i])\n\
    \        else:\n            ret_list.remove(nums[i])\n            \n    return\
    \ ret_list\n", "    \n    import re\n\n    sums = {}\n    for n in nums:\n   \
    \     if n in sums:\n            sums[n] += n\n        else:\n            sums[n]\
    \ = n\n    \n    sorted_sums = sorted(sums, key=sums.get, reverse=True)\n    return\
    \ [sums[v] for v in sorted_sums]\n</cell>\n<cell>", "    pass\n\n", "    pass\n",
  "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n", "    total = 0\n\
    \    for num in nums:\n        total += num\n    sorted_nums = sorted(nums, key=lambda\
    \ num: total - num, reverse=True)\n    return sorted_nums\n", "    pass\n", " \
    \   answer = []\n    for i in range(len(nums)):\n        digit_sum = 0\n     \
    \   digit = 0\n        for num in nums:\n            digit_sum += num\n      \
    \      digit += num\n        if digit_sum > 0:\n            answer.append(nums.index(nums)\
    \ + 1)\n            digit_sum -= nums[nums.index(nums) + 1]\n        answer.append(digit)\n\
    \    return answer\n", "    pass\n</cell>\n<cell>", "    if not nums:\n      \
    \  return []\n    sum_digits = nums[0]\n    res_sorted_nums = []\n    for num\
    \ in nums:\n        sum_digits += num\n        res_sorted_nums.append(num)\n \
    \   res_sorted_nums.sort(key=lambda num: sum_digits - num)\n    return res_sorted_nums\n",
  "    nums = sorted(nums, key=lambda x: (sum([int(c) for c in str(x)])), reverse=True)\n\
    \    return nums\n", "    nums_sum = [sum(i) for i in nums]\n    return [i[0]\
    \ for i in sorted(enumerate(nums_sum), key=lambda x:x[1])]\n", "    pass\n", " \
    \   nums_sum = 0\n    for num in nums:\n        nums_sum += num\n    nums_sum\
    \ = sorted(nums_sum, key=lambda x: (nums.index(x), x))\n    return nums_sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
