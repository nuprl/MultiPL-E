name: HumanEval_29_filter_by_prefix
language: py
prompt: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>>\
  \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
completions: ["    result = []\n    for item in strings:\n        if item.startswith(prefix):\n\
    \            result.append(item)\n    return result\n\n", "    if not strings:\n\
    \        return strings\n    else:\n        return [string for string in strings\
    \ if string.startswith(prefix)]\n\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    return [x for x in strings if x.startswith(prefix)]\n",
  "    return filter(lambda x: not x.lower().startswith(prefix), strings)\n\n", " \
    \   return filter(startswith=prefix, strings=strings)\n", "    return [ s for\
    \ s in strings if s.startswith(prefix) ]\n", "    return [s for s in strings if\
    \ s.lower().startswith(prefix.lower())]\n", "    return [x for x in strings if\
    \ x.startswith(prefix)]\n", "    if not strings:\n        return strings\n   \
    \ else:\n        return [x for x in strings if x.startswith(prefix)]\n\n", " \
    \   return list(filter(lambda s: s.lower().startswith(prefix.lower()), strings))\n\
    \n", "    return [s for s in strings if s.startswith(prefix)]\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    if not strings:\n    \
    \    return []\n    else:\n        return [s for s in strings if s.startswith(prefix)]\n",
  "    if not prefix or prefix == '':\n        return strings\n    return filter(lambda\
    \ s: s.startswith(prefix), strings)\n", "    if not prefix:\n        return strings\n\
    \    else:\n        return [x for x in strings if x.startswith(prefix)]\n", " \
    \   if not strings:\n        return strings\n    if not prefix:\n        return\
    \ strings\n    if len(prefix) > len(strings):\n        return strings\n    if\
    \ strings[:len(prefix)] != prefix:\n        return strings\n    return strings[len(prefix):]\n",
  "    if prefix:\n        prefix_length = max(prefix.count('*'), prefix.count('?'))\n\
    \        return list(filter(\n            lambda s: s.startswith(prefix),\n  \
    \          strings))[:prefix_length]\n    else:\n        return strings\n", " \
    \   if not prefix or not strings:\n        return strings\n    prefix = prefix.lower()\n\
    \    strings = [s.lower() for s in strings]\n    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [ string for string in strings if string.startswith(prefix)\
    \ ]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
