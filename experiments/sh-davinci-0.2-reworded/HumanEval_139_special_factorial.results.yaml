language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo \"1\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ ))\n    do\n\
    \        result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  if [ $1 -le 0 ]; then\n\
    \    echo \"0\"\n  else\n    echo $(($(special_factorial $(($1-1))) * $1))\n \
    \ fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local i=1\n    while [ $i -le\
    \ $n ]; do\n        factorial=$((factorial * i))\n        i=$((i + 1))\n    done\n\
    \    local j=$((n - 1))\n    while [ $j -ge 1 ]; do\n        factorial=$((factorial\
    \ * j))\n        j=$((j - 1))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=n-1; i>0; i--)); do\n    result=$((result * i))\n \
    \ done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 0
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local -i n=$1\n  local -i i=1\n  local -i result=1\n  while (( i <= n ));\
    \ do\n    local -i j=1\n    local -i factorial=1\n    while (( j <= i )); do\n\
    \      factorial=$(( factorial * j ))\n      (( j++ ))\n    done\n    result=$((\
    \ result * factorial ))\n    (( i++ ))\n  done\n  echo \"$result\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=n; i++ )); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo \"$factorial\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local i=1\n    local result=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local result=1\n    for ((i=1; i<=$1; i++)); do\n        result=$(($result\
    \ * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $(factorial $i)))\n    i=$(($i + 1))\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7faxa6ft.sh: line 17: factorial: command not found

    /tmp/tmp7faxa6ft.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=0\n  while [ $i -lt $n ]; do\n\
    \    factorial=$(($factorial * $(($n - $i))))\n    i=$(($i + 1))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8_vgyl1.sh: line 17: factorial: command not found

    /tmp/tmpb8_vgyl1.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=$n; i++)); do\n\
    \        factorial=$(($factorial * $i))\n    done\n    echo $factorial\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=n; i>0; i--)); do\n    factorial=$(($factorial\
    \ * $i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $(factorial $i)))\n    i=$(($i + 1))\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7faxa6ft.sh: line 17: factorial: command not found

    /tmp/tmp7faxa6ft.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Your code here\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo\
    \ $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ )); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local -i n=$1\n  local -i i\n  local -i result=1\n  for ((i=n; i>0; i--));\
    \ do\n    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"1\"\n  else\n    echo \"$(($1 * $(special_factorial\
    \ $(($1 - 1)))))\"\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 *\
    \ $(special_factorial $(($1 - 1)))))\n    fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: implement the function here\n  # Hint: use the factorial function\
    \ you implemented in the previous exercise\n  # Hint: use the seq command to generate\
    \ a list of numbers\n  # Hint: use the paste command to join the list of numbers\
    \ with the \"*\" character\n  # Hint: use the bc command to evaluate the expression\n\
    \  # Hint: use the echo command to return the result\n  # Hint: use the tr command\
    \ to remove the last character of the result\n  # Hint: use the head command to\
    \ remove the first character of the result\n  # Hint: use the sed command to remove\
    \ the last character of the result\n  # Hint: use the sed command to remove the\
    \ first character of the result\n  # Hint: use the sed command to remove the first\
    \ character of the result\n  # Hint: use the sed command to remove the last character\
    \ of the result\n  # Hint: use the sed command to remove the first character of\
    \ the result\n  # Hint: use the sed command to remove the last character of the\
    \ result\n  # Hint: use the sed command to remove the first character of the result\n\
    \  # Hint: use the sed command to remove the last character of the result\n  #\
    \ Hint: use the sed command to remove the first character of the result\n  # Hint:\
    \ use the sed command to remove the last character of the result\n  # Hint: use\
    \ the sed command to remove the first character of the result\n  # Hint: use the\
    \ sed command to remove the last character of the result\n  # Hint: use the sed\
    \ command to remove the first character of the result\n  # Hint: use the sed command\
    \ to remove the last character of the result\n  # Hint: use the sed command to\
    \ remove the first character of the result\n  # Hint: use the sed command to remove\
    \ the last character of the result\n  # Hint: use the sed command to remove the\
    \ first character of the result\n  # Hint: use the sed command to remove the last\
    \ character of the result\n  # Hint: use the sed command to remove the first character\
    \ of the result\n  # Hint: use the sed command to remove the last character of\
    \ the result\n  # Hint: use the sed command to remove the first character of the\
    \ result\n  # Hint\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpikkjy4gm.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpikkjy4gm.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8_vgyl1.sh: line 17: factorial: command not found

    /tmp/tmpb8_vgyl1.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n \
    \       result=$(($result * $i))\n    done\n    for (( i=$n-1; i>0; i-- )); do\n\
    \        result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  if [ $1 -eq 0 ]; then\n\
    \    echo \"1\"\n  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n\
    \  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=n; i>0; i--)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8_vgyl1.sh: line 17: factorial: command not found

    /tmp/tmpb8_vgyl1.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    if [[ $1 -le 0 ]]; then\n        echo \"0\"\n    else\n        local\
    \ result=1\n        for (( i=1; i<=$1; i++ )); do\n            result=$(( $result\
    \ * $i ))\n        done\n        echo $result\n    fi\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local i=1\n    while [ $i -le $1 ]; do\n     \
    \   factorial=$(($factorial * $i))\n        i=$(($i + 1))\n    done\n    echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo \"1\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: implement this function\n  # Hint: use the factorial function you\
    \ implemented in the previous exercise\n  # and the multiplication function you\
    \ implemented in the previous exercise\n  # to implement this function\n  # Hint:\
    \ use the factorial function you implemented in the previous exercise\n  # and\
    \ the multiplication function you implemented in the previous exercise\n  # to\
    \ implement this function\n  if [[ $1 -eq 0 ]]; then\n    echo \"1\"\n  else\n\
    \    echo $(factorial $1) $(factorial $(($1-1))) $(factorial $(($1-2))) $(factorial\
    \ $(($1-3))) $(factorial $(($1-4))) $(factorial $(($1-5))) $(factorial $(($1-6)))\
    \ $(factorial $(($1-7))) $(factorial $(($1-8))) $(factorial $(($1-9))) | awk '{print\
    \ $1*$2*$3*$4*$5*$6*$7*$8*$9*$10}'\n  fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    /tmp/tmpxfx8j8nj.sh: line 23: factorial: command not found

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=1; i<=n; i++)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i = 1; i <= n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: Implement this function\n  # Hint: Use the factorial function you\
    \ wrote in the previous exercise\n  # Hint: Use the seq command to generate a\
    \ list of numbers\n  # Hint: Use the paste command to join the list of numbers\
    \ with the factorial\n  #       function\n  # Hint: Use the tr command to replace\
    \ the newlines with *\n  # Hint: Use the bc command to evaluate the expression\n\
    \  # Hint: Use the sed command to remove the trailing *\n  # Hint: Use the sed\
    \ command to remove the leading *\n  # Hint: Use the sed command to remove the\
    \ leading 1*\n  # Hint: Use the sed command to remove the leading 1*\n  # Hint:\
    \ Use the sed command to remove the leading 1*\n  # Hint: Use the sed command\
    \ to remove the leading 1*\n  # Hint: Use the sed command to remove the leading\
    \ 1*\n  # Hint: Use the sed command to remove the leading 1*\n  # Hint: Use the\
    \ sed command to remove the leading 1*\n  # Hint: Use the sed command to remove\
    \ the leading 1*\n  # Hint: Use the sed command to remove the leading 1*\n  #\
    \ Hint: Use the sed command to remove the leading 1*\n  # Hint: Use the sed command\
    \ to remove the leading 1*\n  # Hint: Use the sed command to remove the leading\
    \ 1*\n  # Hint: Use the sed command to remove the leading 1*\n  # Hint: Use the\
    \ sed command to remove the leading 1*\n  # Hint: Use the sed command to remove\
    \ the leading 1*\n  # Hint: Use the sed command to remove the leading 1*\n  #\
    \ Hint: Use the sed command to remove the leading 1*\n  # Hint: Use the sed command\
    \ to remove the leading 1*\n  # Hint: Use the sed command to remove the leading\
    \ 1*\n  # Hint: Use the sed command to remove the leading 1*\n  # Hint: Use the\
    \ sed command to remove the leading 1*\n  # Hint: Use the sed command to remove\
    \ the leading 1*\n  # Hint: Use the sed command to remove the leading 1*\n  #\
    \ Hint: Use the sed command to remove the leading 1*\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0m_hlzw8.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmp0m_hlzw8.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $(factorial $i)))\n    i=$(($i + 1))\n  done\n  echo\
    \ $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7faxa6ft.sh: line 17: factorial: command not found

    /tmp/tmp7faxa6ft.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  local j=$((n - 1))\n\
    \  while [ $j -ge 1 ]; do\n    result=$((result * j))\n    j=$((j - 1))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    local result=1\n   \
    \ for ((i=1; i<=$1; i++)); do\n      result=$(($result * $i))\n    done\n    for\
    \ ((i=$1-1; i>0; i--)); do\n      result=$(($result * $i))\n    done\n    echo\
    \ $result\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i=1; i<=$n; i++ ))\n  \
    \  do\n        factorial=$(($factorial * $i))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: Implement this function\n  # Hint: You can use the factorial function\
    \ from the previous exercise.\n  # Hint: You can use the bc command to do floating\
    \ point arithmetic.\n  # Hint: You can use the seq command to generate a sequence\
    \ of numbers.\n  # Hint: You can use the paste command to concatenate strings.\n\
    \  # Hint: You can use the tr command to replace characters.\n  # Hint: You can\
    \ use the fold command to fold long lines.\n  # Hint: You can use the sort command\
    \ to sort lines.\n  # Hint: You can use the uniq command to remove duplicates.\n\
    \  # Hint: You can use the head command to get the first line.\n  # Hint: You\
    \ can use the tail command to get all but the first line.\n  # Hint: You can use\
    \ the wc command to count lines.\n  # Hint: You can use the cut command to get\
    \ a substring.\n  # Hint: You can use the tr command to translate characters.\n\
    \  # Hint: You can use the rev command to reverse a string.\n  # Hint: You can\
    \ use the sed command to remove characters.\n  # Hint: You can use the grep command\
    \ to find lines.\n  # Hint: You can use the awk command to find and replace text.\n\
    \  # Hint: You can use the xargs command to execute commands.\n  # Hint: You can\
    \ use the expr command to do arithmetic.\n  # Hint: You can use the expr command\
    \ to do arithmetic.\n  # Hint: You can use the expr command to do arithmetic.\n\
    \  # Hint: You can use the expr command to do arithmetic.\n  # Hint: You can use\
    \ the expr command to do arithmetic.\n  # Hint: You can use the expr command to\
    \ do arithmetic.\n  # Hint: You can use the expr command to do arithmetic.\n \
    \ # Hint: You can use the expr command to do arithmetic.\n  # Hint: You can use\
    \ the expr command to do arithmetic.\n  # Hint: You can use the expr command to\
    \ do arithmetic.\n  # Hint: You can use the expr command to do arithmetic.\n \
    \ # Hint: You can use the expr command to\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp48jhodm1.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmp48jhodm1.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local result=1\n    local i=1\n    while [ $i -le $1 ]; do\n        result=$((result\
    \ * i))\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(( $(special_factorial\
    \ $(( $1 - 1 ))) * $1 ))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  local j=$((n -\
    \ 1))\n  while [ $j -ge 1 ]; do\n    factorial=$((factorial * j))\n    j=$((j\
    \ - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  local j=$((n -\
    \ 1))\n  while [ $j -ge 1 ]; do\n    factorial=$((factorial * j))\n    j=$((j\
    \ - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((result*i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=1; i<=n; i++)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local input=$1\n  local result=1\n  local i=1\n  while [ $i -le $input\
    \ ]; do\n    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=n; i++ )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    local i=1\n    while [ $i -le\
    \ $n ]; do\n        factorial=$(($factorial * $i))\n        i=$(($i + 1))\n  \
    \  done\n    echo $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  while [ $n -gt 0 ]; do\n    factorial=$((factorial\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n   \
    \ special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\"\
    ) = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"\
    7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -le 0 ]]; then\n    echo \"0\"\n  else\n    local factorial=1\n\
    \    for (( i = 1; i <= $1; i++ )); do\n      factorial=$((factorial * i))\n \
    \   done\n    echo $factorial\n  fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  for ((i=$n-1; i>=1; i--)); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=n; i++ )); do\n  \
    \      result=$(( result * i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((result*i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=n; i>0; i-- )); do\n   \
    \     result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n \
    \       result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=0\n  for ((i=1; i<=n; i++)); do\n\
    \    result=$(($result * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = $n; i > 0; i-- )); do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i = 1; i <= n; i++)); do\n   \
    \ factorial=$((factorial * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((\
    \ result * i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: Implement this function\n  # Hint: You can use the factorial function\
    \ you implemented in the previous\n  # exercise.\n  # Hint: You can use the bc\
    \ command to perform floating point arithmetic.\n  # Hint: You can use the seq\
    \ command to generate a sequence of numbers.\n  # Hint: You can use the paste\
    \ command to concatenate strings.\n  # Hint: You can use the tr command to replace\
    \ characters.\n  # Hint: You can use the fold command to fold lines.\n  # Hint:\
    \ You can use the head command to get the first line of a file.\n  # Hint: You\
    \ can use the tail command to get all but the first line of a file.\n  # Hint:\
    \ You can use the wc command to count lines.\n  # Hint: You can use the sort command\
    \ to sort lines.\n  # Hint: You can use the uniq command to remove duplicate lines.\n\
    \  # Hint: You can use the xargs command to execute commands.\n  # Hint: You can\
    \ use the echo command to print text.\n  # Hint: You can use the printf command\
    \ to format text.\n  # Hint: You can use the expr command to perform arithmetic\
    \ operations.\n  # Hint: You can use the bc command to perform floating point\
    \ arithmetic.\n  # Hint: You can use the seq command to generate a sequence of\
    \ numbers.\n  # Hint: You can use the paste command to concatenate strings.\n\
    \  # Hint: You can use the tr command to replace characters.\n  # Hint: You can\
    \ use the fold command to fold lines.\n  # Hint: You can use the head command\
    \ to get the first line of a file.\n  # Hint: You can use the tail command to\
    \ get all but the first line of a file.\n  # Hint: You can use the wc command\
    \ to count lines.\n  # Hint: You can use the sort command to sort lines.\n  #\
    \ Hint: You can use the uniq command to remove duplicate lines.\n  # Hint: You\
    \ can use the xargs command to execute commands.\n  # Hint: You can use the echo\
    \ command to print text.\n  # Hint: You can use the printf command to format text.\n\
    \n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3sjing0g.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmp3sjing0g.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local input=$1\n  local factorial=1\n  for (( i = 1; i <= input; i++ ));\
    \ do\n    factorial=$(( factorial * i ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=n; i++ )); do\n    factorial=$((\
    \ factorial * i ))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr2jdscr5.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmpr2jdscr5.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    if [[ $1 -le 0 ]]; then\n        echo \"0\"\n    else\n        local\
    \ result=1\n        for (( i=1; i<=$1; i++ )); do\n            result=$(( $result\
    \ * $i ))\n        done\n        echo $result\n    fi\n}\n\ncandidate() {\n  \
    \  special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for (( i = 1; i <= $1; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(( $1 * $(special_factorial\
    \ $(( $1 - 1 ))) ))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n \
    \       factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$(($result * $i))\n    done\n    for ((i=1; i<=n-1; i++)); do\n  \
    \      result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: Implement this function\n  # Hint: You can use the factorial function\
    \ you wrote in the previous exercise\n  # to calculate the factorial of a number.\n\
    \  # Hint: You can use the bc command to do floating point calculations.\n  #\
    \ Hint: You can use the seq command to generate a sequence of numbers.\n  # Hint:\
    \ You can use the paste command to concatenate strings.\n  # Hint: You can use\
    \ the tr command to replace characters.\n  # Hint: You can use the fold command\
    \ to fold lines.\n  # Hint: You can use the sort command to sort lines.\n  # Hint:\
    \ You can use the head command to get the first line of a file.\n  # Hint: You\
    \ can use the tail command to get all but the first line of a file.\n  # Hint:\
    \ You can use the wc command to count lines.\n  # Hint: You can use the cut command\
    \ to get a specific field from a line.\n  # Hint: You can use the uniq command\
    \ to remove duplicate lines.\n  # Hint: You can use the xargs command to execute\
    \ a command for each line.\n  # Hint: You can use the echo command to print a\
    \ string.\n  # Hint: You can use the printf command to format a string.\n  # Hint:\
    \ You can use the expr command to do arithmetic.\n  # Hint: You can use the cat\
    \ command to concatenate files.\n  # Hint: You can use the tee command to write\
    \ to a file and to stdout.\n  # Hint: You can use the rm command to remove a file.\n\
    \  # Hint: You can use the mv command to rename a file.\n  # Hint: You can use\
    \ the cp command to copy a file.\n  # Hint: You can use the mkdir command to create\
    \ a directory.\n  # Hint: You can use the rmdir command to remove a directory.\n\
    \  # Hint: You can use the touch command to create an empty file.\n  # Hint: You\
    \ can use the find command to find files.\n  # Hint: You can use the grep command\
    \ to find lines matching a pattern.\n  # Hint: You can use the sed command to\
    \ replace text.\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzixcj5kq.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpzixcj5kq.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=$n; i++)); do\n   \
    \     result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8_vgyl1.sh: line 17: factorial: command not found

    /tmp/tmpb8_vgyl1.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=$1; i>0; i--)); do\n    result=$(($result * $(factorial\
    \ $i)))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd_sr8t5r.sh: line 15: factorial: command not found

    /tmp/tmpd_sr8t5r.sh: line 15: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n \
    \       result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ ))\n  do\n  \
    \  factorial=$(( $factorial * $i ))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i = 1; i <= n; i++ )); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  for ((i=1; i<=n-1; i++)); do\n    factorial=$((factorial *\
    \ i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ ))\n    do\n\
    \        result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=n; i>0; i-- )); do\n   \
    \     result=$(( result * i ))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -lt 0 ]; then\n    echo \"Error: the input must be a positive integer\"\
    \n    return 1\n  fi\n  if [ $1 -eq 0 ]; then\n    echo \"1\"\n    return 0\n\
    \  fi\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  for ((i=$1-1; i>0; i--)); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for (( i=1; i<=$1; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=n; i>0; i--)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010433
