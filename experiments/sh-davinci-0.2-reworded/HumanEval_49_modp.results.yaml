language: sh
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=\"$1\"\n  local p=\"$2\"\n  local x=\"1\"\n  local i\n  for ((i=0;\
    \ i<${#n}; i++)); do\n    if [[ \"${n:$i:1}\" == \"1\" ]]; then\n      x=$(mul\
    \ \"$x\" \"$x\" \"$p\")\n    fi\n    x=$(mul \"$x\" \"$x\" \"$p\")\n  done\n \
    \ echo \"$x\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo2hze6g0.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=0\n \
    \   local l=${#n}\n    local b\n    while [ $i -lt $l ]; do\n        b=\"${n:$i:1}\"\
    \n        if [ \"$b\" -eq \"1\" ]; then\n            r=$(($r*2))\n           \
    \ r=$(($r%$p))\n        fi\n        i=$(($i+1))\n    done\n    echo \"$r\"\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=\"$1\"\n  local p=\"$2\"\n  local r=\"1\"\n  local i\n  for ((i=0;\
    \ i<${#n}; i++)); do\n    if [[ \"${n:$i:1}\" == \"1\" ]]; then\n      r=$(mul\
    \ \"$r\" \"$r\" \"$p\")\n    fi\n    r=$(mul \"$r\" \"$r\" \"$p\")\n  done\n \
    \ echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn3bh_t6q.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n  \
    \  done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    while [ $i -lt $nlen ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2))\n            r=$((r%p))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    for ((i=0; i<n_len; i++)); do\n        local digit=${n:$i:1}\n        if\
    \ [ $digit -eq 1 ]; then\n            r=$(((r * 2) % p))\n        fi\n       \
    \ r=$(((r * r) % p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i\n   \
    \ for ((i=0; i<${#n}-1; i++)); do\n        r=$(($r*2))\n        r=$(($r%$p))\n\
    \    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ $i -lt ${#n} ]; do\n        r=$(($r*$r % $p))\n        i=$(($i+1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            result=$(($result * $result % $p))\n        fi\n        result=$(($result\
    \ * $result % $p))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfe_n3bnf.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal x=1\n\tlocal i\n\tfor ((i=0; i<${#n}; i++));\
    \ do\n\t\tx=$((x*x%p))\n\t\tif [[ ${n:$i:1} == 1 ]]; then\n\t\t\tx=$((x*2%p))\n\
    \t\tfi\n\tdone\n\techo $x\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local res=\"1\"\n    local i\n  \
    \  for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            res=$(mulmod \"$res\" \"$res\" \"$p\")\n        fi\n        res=$(mulmod\
    \ \"$res\" \"$res\" \"$p\")\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsmuii2fa.sh: line 25: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n  \
    \          r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n\
    \        if [ \"$(($n & 1))\" -eq 1 ]; then\n            r=$(($r * $r % $p))\n\
    \        fi\n        n=$(($n >> 1))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ \"$1\" == \"0\" ]; then\n        echo \"1\"\n        return\n    fi\n\
    \    if [ \"$1\" == \"1\" ]; then\n        echo \"$2\"\n        return\n    fi\n\
    \    if [ \"$(($1 % 2))\" == \"0\" ]; then\n        echo \"$(($(modp \"$(($1 /\
    \ 2))\" \"$2\") ** 2 % $2))\"\n        return\n    fi\n    echo \"$(($(modp \"\
    $(($1 - 1))\" \"$2\") * $2 % $2))\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_len_minus_1=$((n_len - 1))\n    local n_len_minus_i\n    local n_i\n\
    \    local n_i_int\n    local n_i_int_minus_1\n    local n_i_int_minus_1_pow_2\n\
    \    local n_i_int_minus_1_pow_2_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p\n    local\
    \ n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p_r\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p\n\
    \    local n_i_int_minus_1_pow\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    local digit\n    local pow2\n    while [ $i -lt $len ]; do\n        digit=${n:$i:1}\n\
    \        if [ $digit -eq 1 ]; then\n            pow2=$(pow2 $i)\n            r=$(modmul\
    \ $r $pow2 $p)\n        fi\n        i=$(($i+1))\n    done\n    echo $r\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n \
    \   local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n\
    \    local tmp10\n    local tmp11\n    local tmp12\n    local tmp13\n    local\
    \ tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n\
    \    local tmp19\n    local tmp20\n    local tmp21\n    local tmp22\n    local\
    \ tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n\
    \    local tmp28\n    local tmp29\n    local tmp30\n    local tmp31\n    local\
    \ tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n\
    \    local tmp37\n    local tmp38\n    local tmp39\n    local tmp40\n    local\
    \ tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n\
    \    local tmp46\n    local tmp47\n    local tmp48\n    local tmp49\n    local\
    \ tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n\
    \    local tmp55\n    local tmp56\n    local tmp57\n    local tmp58\n    local\
    \ tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n\
    \    local tmp64\n    local tmp65\n    local tmp66\n    local tmp67\n    local\
    \ tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n\
    \    local tmp73\n    local tmp74\n    local tmp75\n    local tmp76\n    local\
    \ tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n\
    \    local tmp82\n    local tmp83\n    local tmp84\n    local tmp85\n    local\
    \ tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n\
    \    local tmp91\n    local tmp92\n    local tmp93\n    local tmp94\n    local\
    \ tmp95\n    local tmp96\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ n_length=${#n}\n    local n_length_minus_one=$((n_length - 1))\n    local n_length_minus_two=$((n_length\
    \ - 2))\n    local n_length_minus_three=$((n_length - 3))\n    local n_length_minus_four=$((n_length\
    \ - 4))\n    local n_length_minus_five=$((n_length - 5))\n    local n_length_minus_six=$((n_length\
    \ - 6))\n    local n_length_minus_seven=$((n_length - 7))\n    local n_length_minus_eight=$((n_length\
    \ - 8))\n    local n_length_minus_nine=$((n_length - 9))\n    local n_length_minus_ten=$((n_length\
    \ - 10))\n    local n_length_minus_eleven=$((n_length - 11))\n    local n_length_minus_twelve=$((n_length\
    \ - 12))\n    local n_length_minus_thirteen=$((n_length - 13))\n    local n_length_minus_fourteen=$((n_length\
    \ - 14))\n    local n_length_minus_fifteen=$((n_length - 15))\n    local n_length_minus_sixteen=$((n_length\
    \ - 16))\n    local n_length_minus_seventeen=$((n_length - 17))\n    local n_length_minus_eighteen=$((n_length\
    \ - 18))\n    local n_length_minus_nineteen=$((n_length - 19))\n    local n_length_minus_twenty=$((n_length\
    \ - 20))\n    local n_length_minus_twentyone=$((n_length - 21))\n    local n_length_minus_twentytwo=$((n_length\
    \ - 22))\n    local n_length_minus_twentythree=$((n_length - 23))\n    local n_length_minus_twentyfour=$((n_length\
    \ - 24))\n    local n_length_minus_twentyfive=$((n_length - 25))\n    local n_length\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while (( i < l )); do\n        (( i++ ))\n        if [[ ${n:$((l-i)):1} -eq\
    \ 1 ]]; then\n            (( r = (r * 2) % p ))\n        fi\n    done\n    echo\
    \ $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            res=$((res*res%p))\n\
    \        fi\n        res=$((res*res%p))\n    done\n    echo $res\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_i\n    local n_i_val\n    local n_i_val_pow2\n    local n_i_val_pow2_modp\n\
    \    local n_i_val_pow2_modp_r\n    while [ $i -lt $n_len ]; do\n        n_i=${n:$i:1}\n\
    \        n_i_val=$((2**$i))\n        n_i_val_pow2=$((n_i_val * n_i_val))\n   \
    \     n_i_val_pow2_modp=$((n_i_val_pow2 % p))\n        n_i_val_pow2_modp_r=$((n_i_val_pow2_modp\
    \ * r))\n        r=$((n_i_val_pow2_modp_r % p))\n        i=$((i + 1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_i\n    local n_i_int\n    local r_int\n    local r_int_sq\n    local\
    \ r_int_sq_mod\n    local r_int_sq_mod_int\n    local r_int_sq_mod_int_sq\n  \
    \  local r_int_sq_mod_int_sq_mod\n    local r_int_sq_mod_int_sq_mod_int\n    local\
    \ r_int_sq_mod_int_sq_mod_int_sq\n    local r_int_sq_mod_int_sq_mod_int_sq_mod\n\
    \    local r_int_sq_mod_int_sq_mod_int_sq_mod_int\n    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq\n\
    \    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod\n    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int\n\
    \    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq\n    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod\n\
    \    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int\n    local\
    \ r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq\n    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod\n\
    \    local r_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int_sq_mod_int\n\
    \    local r_int_\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(mul \"$r\" \"$r\" \"$p\")\n      \
    \  if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mul \"$r\" \"2\" \"\
    $p\")\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_w8k1sl6.sh: line 22: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} == 1 ]]; then\n\
    \            r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfe_n3bnf.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal r=1\n\tlocal i=0\n\tlocal l=${#n}\n\twhile\
    \ [ $i -lt $l ]; do\n\t\tlocal d=${n:$i:1}\n\t\tif [ $d -eq 1 ]; then\n\t\t\t\
    r=$((r*2))\n\t\t\tr=$((r%p))\n\t\tfi\n\t\ti=$((i+1))\n\tdone\n\techo $r\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2))\n            r=$((r%p))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            r=$((r * 2 % p))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} == \"1\" ]]; then\n\
    \            r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(($r*$r%$p))\n        if [[ \"${n:$i:1}\"\
    \ == \"1\" ]]; then\n            r=$(($r*2%$p))\n        fi\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local j=0\n\
    \    local k=0\n    local m=0\n    local t=0\n    local s=0\n    local d=0\n \
    \   local c=0\n    local b=0\n    local a=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local q=0\n    local w=0\n    local v=0\n    local u=0\n   \
    \ local g=0\n    local f=0\n    local e=0\n    local l=0\n    local h=0\n    local\
    \ o=0\n    local n=0\n    local p=0\n    local r=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local m=0\n    local t=0\n    local s=0\n    local d=0\n \
    \   local c=0\n    local b=0\n    local a=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local q=0\n    local w=0\n    local v=0\n    local u=0\n   \
    \ local g=0\n    local f=0\n    local e=0\n    local l=0\n    local h=0\n    local\
    \ o=0\n    local n=0\n    local p=0\n    local r=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local m=0\n    local t=0\n    local s=0\n    local d=0\n \
    \   local c=0\n    local b=0\n    local a=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local q=0\n    local w=0\n    local v=0\n    local u=0\n   \
    \ local g=0\n    local f=0\n    local e=0\n    local l=0\n    local h=0\n    local\
    \ o=0\n    local n=0\n    local p=0\n    local r=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local m=0\n   \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n     \
    \       r=$(($r * $r % $p))\n        fi\n        r=$(($r * $r % $p))\n    done\n\
    \    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n\
    \            r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i=\"0\"\n\
    \    local nlen=\"${#n}\"\n    while [ \"$i\" -lt \"$nlen\" ]; do\n        local\
    \ bit=\"${n:$i:1}\"\n        if [ \"$bit\" -eq \"1\" ]; then\n            r=$(($r\
    \ * 2))\n            r=$(($r % $p))\n        fi\n        i=$(($i + 1))\n    done\n\
    \    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"Usage: modp <integer>\
    \ <integer>\"\n        return 1\n    fi\n    local n=\"$1\"\n    local p=\"$2\"\
    \n    local r=\"$n\"\n    local i=1\n    while [ \"$i\" -lt \"${#n}\" ]; do\n\
    \        r=$(mul \"$r\" \"$r\" \"$p\")\n        i=$((i+1))\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv9u3r1ed.sh: line 26: mul: command not found

    /tmp/tmpv9u3r1ed.sh: line 26: mul: command not found

    /tmp/tmpv9u3r1ed.sh: line 26: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local j=0\n\
    \    local k=0\n    local m=$((p-1))\n    local t=0\n    local x=0\n    local\
    \ y=0\n    local z=0\n    local w=0\n    local u=0\n    local v=0\n    local s=0\n\
    \    local q=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n \
    \   local e=0\n    local f=0\n    local g=0\n    local h=0\n    local l=0\n  \
    \  local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n   \
    \ local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local\
    \ y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local\
    \ dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local\
    \ ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local\
    \ nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local\
    \ ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local\
    \ xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n   \
    \ local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n\
    \    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local\
    \ lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n\
    \   \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local r=1\n  local i=0\n  local len=${#n}\n  while\
    \ [ $i -lt $len ]; do\n    local bit=${n:$i:1}\n    if [ $bit -eq 1 ]; then\n\
    \      r=$((r*2%p))\n    fi\n    i=$((i+1))\n  done\n  echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    local nlenm1=$((nlen-1))\n    local nlenm2=$((nlen-2))\n    local nlenm3=$((nlen-3))\n\
    \    local nlenm4=$((nlen-4))\n    local nlenm5=$((nlen-5))\n    local nlenm6=$((nlen-6))\n\
    \    local nlenm7=$((nlen-7))\n    local nlenm8=$((nlen-8))\n    local nlenm9=$((nlen-9))\n\
    \    local nlenm10=$((nlen-10))\n    local nlenm11=$((nlen-11))\n    local nlenm12=$((nlen-12))\n\
    \    local nlenm13=$((nlen-13))\n    local nlenm14=$((nlen-14))\n    local nlenm15=$((nlen-15))\n\
    \    local nlenm16=$((nlen-16))\n    local nlenm17=$((nlen-17))\n    local nlenm18=$((nlen-18))\n\
    \    local nlenm19=$((nlen-19))\n    local nlenm20=$((nlen-20))\n    local nlenm21=$((nlen-21))\n\
    \    local nlenm22=$((nlen-22))\n    local nlenm23=$((nlen-23))\n    local nlenm24=$((nlen-24))\n\
    \    local nlenm25=$((nlen-25))\n    local nlenm26=$((nlen-26))\n    local nlenm27=$((nlen-27))\n\
    \    local nlenm28=$((nlen-28))\n    local nlenm29=$((nlen-29))\n    local nlenm30=$((nlen-30))\n\
    \    local nlenm31=$((nlen-31))\n    local nlenm32=$((nlen-32))\n    local nlenm33=$((nlen-33))\n\
    \    local nlenm34=$((nlen-34))\n   \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        if [ \"${n:$i:1}\" == \"1\"\
    \ ]; then\n            result=$((result * result % p))\n        fi\n        result=$((result\
    \ * result % p))\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    while [ \"$n\"\
    \ -gt \"0\" ]; do\n        if [ \"$(($n % 2))\" -eq \"1\" ]; then\n          \
    \  r=$(($r * $r % $p))\n        fi\n        n=$(($n / 2))\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i\n   \
    \ for ((i=1; i<${#n}; i++)); do\n        r=$(($r*$r%$p))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    while [ $i -lt $nlen ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n  \
    \  done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" -eq 1 ]; then\n     \
    \       r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(mul \"$r\" \"$r\" \"$p\")\n      \
    \  if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mul \"$r\" \"2\" \"\
    $p\")\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_w8k1sl6.sh: line 22: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt ${#n} ]; do\n        if [ ${n:$i:1} -eq 1 ]; then\n            r=$((r*2%p))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n  \
    \  done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ n_length=${#n}\n    while [ $i -lt $n_length ]; do\n        local digit=${n:$i:1}\n\
    \        if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n \
    \       fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 2
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    local nbits=$(($nlen * 4))\n    local nmask=$((2**$nbits - 1))\n    local\
    \ nmax=$((2**$nbits))\n    local nmin=$((2**($nbits - 1)))\n    local nmid=$((2**($nbits\
    \ - 1) - 1))\n    local nneg=$((2**($nbits - 1) + 1))\n    local npos=$((2**($nbits\
    \ - 1) - 2))\n    local nzero=$((2**($nbits - 1) - 1))\n    local none=$((2**($nbits\
    \ - 1) - 2))\n    local ntwo=$((2**($nbits - 1) - 3))\n    local nthree=$((2**($nbits\
    \ - 1) - 4))\n    local nfour=$((2**($nbits - 1) - 5))\n    local nfive=$((2**($nbits\
    \ - 1) - 6))\n    local nsix=$((2**($nbits - 1) - 7))\n    local nseven=$((2**($nbits\
    \ - 1) - 8))\n    local neight=$((2**($nbits - 1) - 9))\n    local nnine=$((2**($nbits\
    \ - 1) - 10))\n    local nten=$((2**($nbits - 1) - 11))\n    local neleven=$((2**($nbits\
    \ - 1) - 12))\n    local ntwelve=$((2**($nbits - 1) - 13))\n    local nthirteen=$((2**($nbits\
    \ - 1) - 14))\n    local nfourteen=$((2**($nbits - 1) - 15))\n    local nfifteen=$((2**($nbits\
    \ - 1) - 16))\n    local nsixteen=$((2**($nbits - 1) - 17))\n    local nseventeen=$((2**($nbits\
    \ - 1) - 18))\n    local neighteen=$((2**($nbits - 1) - 19))\n    local nnineteen=$((2**($nbits\
    \ - 1) -\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7w8pnix4.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7w8pnix4.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal result=1\n\tlocal i\n\tfor ((i=0; i<${#n};\
    \ i++)); do\n\t\tif [[ ${n:$i:1} -eq 1 ]]; then\n\t\t\tresult=$((result * 2 %\
    \ p))\n\t\tfi\n\t\tresult=$((result * result % p))\n\tdone\n\techo $result\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal r=1\n\tlocal i=0\n\tlocal nlen=${#n}\n\tlocal\
    \ nbit=0\n\tlocal nbit_i=0\n\tlocal nbit_j=0\n\tlocal nbit_k=0\n\tlocal nbit_l=0\n\
    \tlocal nbit_m=0\n\tlocal nbit_n=0\n\tlocal nbit_o=0\n\tlocal nbit_p=0\n\tlocal\
    \ nbit_q=0\n\tlocal nbit_r=0\n\tlocal nbit_s=0\n\tlocal nbit_t=0\n\tlocal nbit_u=0\n\
    \tlocal nbit_v=0\n\tlocal nbit_w=0\n\tlocal nbit_x=0\n\tlocal nbit_y=0\n\tlocal\
    \ nbit_z=0\n\tlocal nbit_A=0\n\tlocal nbit_B=0\n\tlocal nbit_C=0\n\tlocal nbit_D=0\n\
    \tlocal nbit_E=0\n\tlocal nbit_F=0\n\tlocal nbit_G=0\n\tlocal nbit_H=0\n\tlocal\
    \ nbit_I=0\n\tlocal nbit_J=0\n\tlocal nbit_K=0\n\tlocal nbit_L=0\n\tlocal nbit_M=0\n\
    \tlocal nbit_N=0\n\tlocal nbit_O=0\n\tlocal nbit_P=0\n\tlocal nbit_Q=0\n\tlocal\
    \ nbit_R=0\n\tlocal nbit_S=0\n\tlocal nbit_T=0\n\tlocal nbit_U=0\n\tlocal nbit_V=0\n\
    \tlocal nbit_W=0\n\tlocal nbit_X=0\n\tlocal nbit_Y=0\n\tlocal nbit_Z=0\n\tlocal\
    \ nbit_0=0\n\tlocal nbit_1=0\n\tlocal nbit_2=0\n\tlocal nbit_3=0\n\tlocal nbit_4=0\n\
    \tlocal nbit_5=0\n\tlocal nbit_6=0\n\tlocal nbit_7=0\n\tlocal\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local digit=${n:$i:1}\n        if [\
    \ $digit -eq 1 ]; then\n            r=$(($r * 2 % $p))\n        fi\n        i=$(($i\
    \ + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local res=\"1\"\n    local i\n  \
    \  for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            res=$(($res * $res % $p))\n            res=$(($res * 2 % $p))\n \
    \       else\n            res=$(($res * $res % $p))\n        fi\n    done\n  \
    \  echo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    local\
    \ d\n    for ((i=${#n}-1; i>=0; i--)); do\n        d=\"${n:$i:1}\"\n        if\
    \ [ \"$d\" == \"1\" ]; then\n            r=$(($r*$r % $p))\n        fi\n     \
    \   r=$(($r*$r % $p))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n\
    \        if [ \"$(($n & 1))\" -eq 1 ]; then\n            r=$(($r * $r % $p))\n\
    \        fi\n        n=$(($n >> 1))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt ${#n} ]; do\n        local d=${n:$i:1}\n        if [ $d -eq 1 ]; then\n\
    \            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ \"$i\" -lt \"${#n}\" ]; do\n        r=$(($r*$r%$p))\n        i=$(($i+1))\n\
    \    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            res=$((res * res % p))\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    while [ $i -lt $nlen ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            r=$(((r * r) % p))\n        fi\n        i=$((i +\
    \ 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n  \
    \          r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n\
    \            r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local bit=${n:$i:1}\n        if [ $bit\
    \ -eq 1 ]; then\n            res=$(((res * res) % p))\n            res=$(((res\
    \ * 2) % p))\n        else\n            res=$(((res * res) % p))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo $res\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    local len=${#n}\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") =\
    \ \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"\
    3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[\
    \ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"\
    3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(mulmod \"$r\" \"$r\" \"$p\")\n   \
    \     if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mulmod \"$r\" \"\
    2\" \"$p\")\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt02qig6l.sh: line 22: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            r=$(mulmod \"$r\" \"$r\" \"$p\")\n            r=$(mulmod \"$r\" \"\
    ${n:0:$i}\" \"$p\")\n        else\n            r=$(mulmod \"$r\" \"$r\" \"$p\"\
    )\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppzgm42mw.sh: line 26: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=$(($n % $p))\n    if [ $r -lt 0 ];\
    \ then\n        r=$((r + $p))\n    fi\n    echo $r\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local n_i=$(echo \"$n\" | cut -c $((i+1))\
    \ )\n        if [ \"$n_i\" -eq \"1\" ]; then\n            r=$(( (r*r) % p ))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=$((n % p))\n    if [[ $r -lt 0 ]];\
    \ then\n        r=$((r + p))\n    fi\n    echo $r\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*r%p))\n        fi\n        r=$((r*r%p))\n      \
    \  i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        r=$((r*r % p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n\
    \            r=$((r*2 % p))\n        fi\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        if [[ ${n:$i:1} == 1 ]]; then\n            result=$((result*result%p))\n\
    \            result=$((result*2%p))\n        else\n            result=$((result*result%p))\n\
    \        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local r=1\n  local i=0\n  local n_len=${#n}\n \
    \ local n_i\n  local n_i_int\n  local n_i_int_pow2\n  local n_i_int_pow2_modp\n\
    \  while [ $i -lt $n_len ]; do\n    n_i=${n:$i:1}\n    n_i_int=$(echo \"$n_i\"\
    \ | bc)\n    n_i_int_pow2=$(echo \"2^$i\" | bc)\n    n_i_int_pow2_modp=$(echo\
    \ \"$n_i_int_pow2 % $p\" | bc)\n    r=$(echo \"$r * $n_i_int_pow2_modp % $p\"\
    \ | bc)\n    i=$((i+1))\n  done\n  echo \"$r\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(mul \"$r\" \"$r\" \"$p\")\n      \
    \  if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mul \"$r\" \"2\" \"\
    $p\")\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_w8k1sl6.sh: line 22: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            result=$(mul \"$result\" \"$result\")\n            result=$(mul \"\
    $result\" \"$p\")\n        else\n            result=$(mul \"$result\" \"$result\"\
    )\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppzh1uvul.sh: line 26: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local x=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        x=$((x*x%p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n\
    \            x=$((x*2%p))\n        fi\n    done\n    echo $x\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while (( i\
    \ < ${#n} )); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            r=$((\
    \ r * r % p ))\n        fi\n        r=$(( r * r % p ))\n        i=$(( i + 1 ))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} == 1 ]]; then\n   \
    \         r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ ${n:$i:1} -eq 1 ]]; then\n            result=$((result\
    \ * result % p))\n        fi\n        result=$((result * result % p))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_len_minus_1=$((n_len - 1))\n    local n_i=0\n    local n_i_minus_1=0\n\
    \    local n_i_minus_2=0\n    local n_i_minus_3=0\n    local n_i_minus_4=0\n \
    \   local n_i_minus_5=0\n    local n_i_minus_6=0\n    local n_i_minus_7=0\n  \
    \  local n_i_minus_8=0\n    local n_i_minus_9=0\n    local n_i_minus_10=0\n  \
    \  local n_i_minus_11=0\n    local n_i_minus_12=0\n    local n_i_minus_13=0\n\
    \    local n_i_minus_14=0\n    local n_i_minus_15=0\n    local n_i_minus_16=0\n\
    \    local n_i_minus_17=0\n    local n_i_minus_18=0\n    local n_i_minus_19=0\n\
    \    local n_i_minus_20=0\n    local n_i_minus_21=0\n    local n_i_minus_22=0\n\
    \    local n_i_minus_23=0\n    local n_i_minus_24=0\n    local n_i_minus_25=0\n\
    \    local n_i_minus_26=0\n    local n_i_minus_27=0\n    local n_i_minus_28=0\n\
    \    local n_i_minus_29=0\n    local n_i_minus_30=0\n    local n_i_minus_31=0\n\
    \    local n_i_minus_32=0\n    local n_i_minus_33=0\n    local n_i_minus_34=0\n\
    \    local n_i_minus_35=0\n    local n_i_minus_36=0\n    local n_i_minus_37=0\n\
    \    local n_i_\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=0\n \
    \   while [ \"$i\" -lt \"${#n}\" ]; do\n        if [ \"${n:$i:1}\" -eq \"1\" ];\
    \ then\n            r=$(modmul \"$r\" \"2\" \"$p\")\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4s0mew3t.sh: line 23: modmul: command not found

    /tmp/tmp4s0mew3t.sh: line 23: modmul: command not found

    /tmp/tmp4s0mew3t.sh: line 23: modmul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    while\
    \ [ $i -lt $n ]; do\n        result=$((result * 2))\n        result=$((result\
    \ % p))\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i\n   \
    \ for ((i=0; i<${#n}-1; i++)); do\n        r=$(($r*2))\n        r=$(($r%$p))\n\
    \    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local res=\"1\"\n    local i\n  \
    \  for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            res=$(mul \"$res\" \"$res\")\n            res=$(mod \"$res\" \"$p\"\
    )\n        fi\n        res=$(mul \"$res\" \"$res\")\n        res=$(mod \"$res\"\
    \ \"$p\")\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppilmkpcs.sh: line 26: mul: command not found

    /tmp/tmppilmkpcs.sh: line 27: mod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ $i -lt ${#n} ]; do\n        r=$(($r * $r % $p))\n        i=$(($i +\
    \ 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            result=$(($result * $result % $p))\n        fi\n        result=$(($result\
    \ * $result % $p))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    while [ \"$n\" -gt 0\
    \ ]; do\n        if [ \"$((n % 2))\" -eq 1 ]; then\n            result=$((result\
    \ * result % p))\n        fi\n        n=$((n / 2))\n    done\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    while\
    \ [ $i -lt $n ]; do\n        result=$((result * 2))\n        result=$((result\
    \ % p))\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local d=${n:$i:1}\n        if [ $d -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local digit=${n:$i:1}\n        if [\
    \ $digit -eq 1 ]; then\n            r=$(($r * 2 % $p))\n        fi\n        i=$(($i\
    \ + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    local nbit\n    while [ $i -lt $nlen ]; do\n        nbit=${n:$i:1}\n    \
    \    if [ $nbit -eq 1 ]; then\n            r=$(($r * 2))\n            r=$(($r\
    \ % $p))\n        fi\n        i=$(($i + 1))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_i\n    local n_i_int\n    local r_int\n    local r_int_new\n    local\
    \ r_new\n    local r_len\n    local r_len_new\n    local r_len_diff\n    local\
    \ r_len_diff_abs\n    local r_len_diff_abs_str\n    local r_len_diff_abs_str_len\n\
    \    local r_len_diff_abs_str_len_new\n    local r_len_diff_abs_str_len_new_str\n\
    \    local r_len_diff_abs_str_len_new_str_len\n    local r_len_diff_abs_str_len_new_str_len_new\n\
    \    local r_len_diff_abs_str_len_new_str_len_new_str\n    local r_len_diff_abs_str_len_new_str_len_new_str_len\n\
    \    local r_len_diff_abs_str_len_new_str_len_new_str_len_new\n    local r_len_diff_abs_str_len_new_str_len_new_str_len_new_str\n\
    \    local r_len_diff_abs_str_len_new_str_len_new_str_len_new_str_len\n    local\
    \ r_len_diff_abs_str_len_new_str_len_new_str_len_new_str_len_new\n    local r_len_diff_abs_str_len_new_str_len_new_str_len_new_str_len_new_str\n\
    \    local r_len_diff_abs_str_len_new_str_len_new_str_len_new_str_len_new_str_len\n\
    \    local r_len_diff_abs_str_len_new_str_len_new_str_len_new_str_len_new_str_len_new\n\
    \    local r_len_diff_abs_str_len_new_str_len_\n}\n\ncandidate() {\n    modp \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_len_minus_one=$((n_len - 1))\n    local n_len_minus_one_bin=$(echo\
    \ \"obase=2; $n_len_minus_one\" | bc)\n    local n_len_minus_one_bin_len=${#n_len_minus_one_bin}\n\
    \    local n_len_minus_one_bin_len_minus_one=$((n_len_minus_one_bin_len - 1))\n\
    \    local n_len_minus_one_bin_len_minus_one_bin=$(echo \"obase=2; $n_len_minus_one_bin_len_minus_one\"\
    \ | bc)\n    local n_len_minus_one_bin_len_minus_one_bin_len=${#n_len_minus_one_bin_len_minus_one_bin}\n\
    \    local n_len_minus_one_bin_len_minus_one_bin_len_minus_one=$((n_len_minus_one_bin_len_minus_one_bin_len\
    \ - 1))\n    local n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin=$(echo\
    \ \"obase=2; $n_len_minus_one_bin_len_minus_one_bin_len_minus_one\" | bc)\n  \
    \  local n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin_len=${#n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin}\n\
    \    local n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin_len_minus_one=$((n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin_len\
    \ - 1))\n    local n_len_minus_one_bin_len_minus_one_bin_len_minus_one_bin_len_minus_\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ $i -lt \"${#n}\" ]; do\n        r=$(modmul \"$r\" \"$r\" \"$p\")\n\
    \        i=$(($i + 1))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0oz2uffe.sh: line 22: modmul: command not found

    /tmp/tmp0oz2uffe.sh: line 22: modmul: command not found

    /tmp/tmp0oz2uffe.sh: line 22: modmul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local d=${n:$i:1}\n        if [ $d -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [[ $i\
    \ -lt $n ]]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=0\n \
    \   local l=${#n}\n    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" ==\
    \ \"1\" ]; then\n            r=$(($r * $r % $p))\n        fi\n        i=$(($i\
    \ + 1))\n        r=$(($r * $r % $p))\n    done\n    echo $r\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"$n\"\n    local i\n\
    \    for ((i=1; i<${#n}; i++)); do\n        result=$(mulmod \"$result\" \"$result\"\
    \ \"$p\")\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdvvhaws6.sh: line 22: mulmod: command not found

    /tmp/tmpdvvhaws6.sh: line 22: mulmod: command not found

    /tmp/tmpdvvhaws6.sh: line 22: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    while [ \"$n\"\
    \ -gt \"0\" ]; do\n        if [ \"$(($n % 2))\" -eq \"1\" ]; then\n          \
    \  r=$(($r * $r % $p))\n        fi\n        n=$(($n / 2))\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local i\n    local r=1\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} == 1 ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            result=$((result\
    \ * result % p))\n        fi\n        result=$((result * result % p))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n\
    \        if [ $((n & 1)) -eq 1 ]; then\n            r=$((r * 2 % p))\n       \
    \ fi\n        n=$((n >> 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local result=1\n  local i=0\n  local n_len=${#n}\n\
    \  while [ $i -lt $n_len ]; do\n    local digit=${n:$i:1}\n    if [ $digit -eq\
    \ 1 ]; then\n      result=$((result * 2 % p))\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local x=1\n  local i\n  for ((i=0; i<${#n}; i++));\
    \ do\n    if [[ ${n:$i:1} == 1 ]]; then\n      x=$((x*x%p))\n    fi\n    x=$((x*x%p))\n\
    \  done\n  echo $x\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} -eq 1 ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        r=$((r*r%p))\n        if [[ \"${n:$i:1}\" == \"1\"\
    \ ]]; then\n            r=$((r*2%p))\n        fi\n    done\n    echo \"$r\"\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local r=1\n  local i\n  for ((i=${#n}-1; i>=0;\
    \ i--)); do\n    r=$((r*r%p))\n    if [[ ${n:$i:1} == 1 ]]; then\n      r=$((r*2%p))\n\
    \    fi\n  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n        if [ $digit\
    \ -eq 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n  \
    \  done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n  \
    \          r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=${#n}-1; i>=0; i--)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]];\
    \ then\n            result=$(($result * $result % $p))\n            result=$(($result\
    \ * 2 % $p))\n        else\n            result=$(($result * $result % $p))\n \
    \       fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local digit=${n:$i:1}\n        if [\
    \ $digit -eq 1 ]; then\n            r=$(($r * 2 % $p))\n        fi\n        i=$(($i\
    \ + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local i=$((${#n}-1))\n  local r=1\n  while [ $i\
    \ -ge 0 ]; do\n    r=$((r*r%p))\n    if [ \"${n:$i:1}\" -eq 1 ]; then\n      r=$((r*2%p))\n\
    \    fi\n    i=$((i-1))\n  done\n  echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=0\n \
    \   local l=${#n}\n    while [ $i -lt $l ]; do\n        local b=${n:$i:1}\n  \
    \      if [ \"$b\" == \"1\" ]; then\n            r=$(($r * 2))\n            r=$(($r\
    \ % $p))\n        fi\n        i=$(($i + 1))\n    done\n    echo \"$r\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n \
    \           r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(mul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmply6o40fj.sh: line 25: mul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    local nbit\n    local pbit\n    local nbit_i\n    local pbit_i\n    local\
    \ nbit_i_1\n    local pbit_i_1\n    local nbit_i_2\n    local pbit_i_2\n    local\
    \ nbit_i_3\n    local pbit_i_3\n    local nbit_i_4\n    local pbit_i_4\n    local\
    \ nbit_i_5\n    local pbit_i_5\n    local nbit_i_6\n    local pbit_i_6\n    local\
    \ nbit_i_7\n    local pbit_i_7\n    local nbit_i_8\n    local pbit_i_8\n    local\
    \ nbit_i_9\n    local pbit_i_9\n    local nbit_i_10\n    local pbit_i_10\n   \
    \ local nbit_i_11\n    local pbit_i_11\n    local nbit_i_12\n    local pbit_i_12\n\
    \    local nbit_i_13\n    local pbit_i_13\n    local nbit_i_14\n    local pbit_i_14\n\
    \    local nbit_i_15\n    local pbit_i_15\n    local nbit_i_16\n    local pbit_i_16\n\
    \    local nbit_i_17\n    local pbit_i_17\n    local nbit_i_18\n    local pbit_i_18\n\
    \    local nbit_i_19\n    local pbit_i_19\n    local nbit_i_20\n    local pbit_i_20\n\
    \    local nbit_i_21\n    local pbit_i_21\n    local nbit_i_22\n    local pbit_i_22\n\
    \    local nbit_i_23\n    local pbit_i_23\n    local nbit_i_24\n    local pbit_i_24\n\
    \    local nbit_i_25\n    local pbit_i_25\n    local n\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    for (( i=0; i<nlen; i++ )); do\n        if [[ ${n:i:1} == \"1\" ]]; then\n\
    \            r=$(( (r*r) % p ))\n        fi\n        r=$(( (r*r) % p ))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(mulmod \"$r\" \"$r\" \"$p\")\n   \
    \     if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mulmod \"$r\" \"\
    2\" \"$p\")\n        fi\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt02qig6l.sh: line 22: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n        if [ $digit\
    \ -eq 1 ]; then\n            r=$((r * 2 % p))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n\
    \        if [ \"$((n&1))\" -eq 1 ]; then\n            r=$((r*2%p))\n        fi\n\
    \        n=$((n>>1))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=$1\n  local p=$2\n  local r=1\n  local i=0\n  local len=${#n}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${n:$i:1}\n    if [ $c -eq 1 ]; then\n    \
    \  r=$((r*2%p))\n    fi\n    i=$((i+1))\n  done\n  echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n            result=$((result\
    \ * result % p))\n        fi\n        result=$((result * result % p))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    for ((i=0; i<l; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n\
    \            r=$((r*r%p))\n        fi\n        r=$((r*r%p))\n    done\n    echo\
    \ $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    while [ $i -lt $n_len ]; do\n        local digit=${n:$i:1}\n        if [\
    \ $digit -eq 1 ]; then\n            r=$(($r * 2 % $p))\n        fi\n        i=$(($i\
    \ + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        res=$((res*2))\n        res=$((res%p))\n        i=$((i+1))\n\
    \    done\n    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    while [ \"$n\"\
    \ -gt \"0\" ]; do\n        if [ \"$(($n % 2))\" -eq \"1\" ]; then\n          \
    \  r=$(($r * $r % $p))\n        fi\n        n=$(($n / 2))\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        if [ ${n:$i:1} -eq 1 ]; then\n       \
    \     r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ $i -lt ${#n} ]; do\n        r=$(($r*$r%$p))\n        i=$(($i+1))\n\
    \    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local m=0\n    local n_bin=$(echo \"obase=2; $n\" |\
    \ bc)\n    local n_bin_len=${#n_bin}\n    local n_bin_rev=$(echo $n_bin | rev)\n\
    \    local n_bin_rev_len=${#n_bin_rev}\n    local n_bin_rev_arr=()\n    local\
    \ n_bin_rev_arr_len=0\n    local p_bin=$(echo \"obase=2; $p\" | bc)\n    local\
    \ p_bin_len=${#p_bin}\n    local p_bin_rev=$(echo $p_bin | rev)\n    local p_bin_rev_len=${#p_bin_rev}\n\
    \    local p_bin_rev_arr=()\n    local p_bin_rev_arr_len=0\n    local p_bin_rev_arr_max=0\n\
    \    local p_bin_rev_arr_max_len=0\n    local p_bin_rev_arr_max_len_bin=0\n  \
    \  local p_bin_rev_arr_max_len_bin_rev=0\n    local p_bin_rev_arr_max_len_bin_rev_len=0\n\
    \    local p_bin_rev_arr_max_len_bin_rev_arr=()\n    local p_bin_rev_arr_max_len_bin_rev_arr_len=0\n\
    \    local p_bin_rev_arr_max_len_bin_rev_arr_len_bin=0\n    local p_bin_rev_arr_max_len_bin_rev_arr_len_bin_rev=0\n\
    \    local p_bin_rev_arr_max_len_bin_rev_arr_len_bin_rev_len=0\n    local p_bin_rev_arr_max_len_bin_rev_arr_len_bin_rev_arr=()\n\
    \    local p_bin_rev_arr_max_len_bin_rev_arr_len\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt ${#n} ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n            r=$(((r\
    \ * r) % p))\n        fi\n        r=$(((r * r) % p))\n        i=$((i + 1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local d=${n:$i:1}\n        if [ $d -eq\
    \ 1 ]; then\n            r=$((r*2))\n            r=$((r%p))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local b=${n:$i:1}\n        if [ $b -eq\
    \ 1 ]; then\n            r=$((r*r % p))\n        fi\n        r=$((r*r % p))\n\
    \        i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=${#n}-1;\
    \ i>=0; i--)); do\n        if [ ${n:$i:1} -eq 1 ]; then\n            result=$((result*result%p))\n\
    \            result=$((result*2%p))\n        else\n            result=$((result*result%p))\n\
    \        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_i\n    for ((i=0; i<n_len; i++)); do\n        n_i=${n:$i:1}\n   \
    \     if [[ $n_i == 1 ]]; then\n            r=$(((r*r)%p))\n        fi\n     \
    \   r=$(((r*r)%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    while\
    \ [ $i -lt ${#n} ]; do\n        local bit=${n:$i:1}\n        if [ $bit -eq 1 ];\
    \ then\n            result=$((result * 2 % p))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"\
    1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n   \
    \ [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   local l=${#n}\n    while [ $i -lt $l ]; do\n        r=$(($r*$r%$p))\n    \
    \    i=$(($i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   local l=\"${#n}\"\n    while [ $i -lt $l ]; do\n        r=$(($r * $r % $p))\n\
    \        i=$(($i + 1))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n        if [ $digit\
    \ -eq 1 ]; then\n            r=$((r * 2 % p))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ \"$i\" -lt \"${#n}\" ]; do\n        r=$(($r * $r % $p))\n        i=$(($i\
    \ + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n\
    \    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\"\
    ) = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} == 1 ]]; then\n   \
    \         r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} == 1 ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$(((r * r) % p))\n        fi\n        r=$(((r * r) %\
    \ p))\n        i=$((i + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \  local n=\"$1\"\n  local p=\"$2\"\n  local result=\"1\"\n  local i\n  for ((i=0;\
    \ i<${#n}; i++)); do\n    if [[ \"${n:$i:1}\" == \"1\" ]]; then\n      result=$(($result\
    \ * $result % $p))\n    fi\n    result=$(($result * $result % $p))\n  done\n \
    \ echo \"$result\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=$((${#n}-1))\n\
    \    while [ $i -le $l ]; do\n        if [ \"${n:$i:1}\" -eq 1 ]; then\n     \
    \       r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ ${n:$i:1} -eq 1 ]]; then\n            result=$((result\
    \ * result % p))\n        fi\n        result=$((result * result % p))\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n \
    \   while [ $i -lt ${#n} ]; do\n        r=$(($r*$r%$p))\n        i=$(($i+1))\n\
    \    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n     \
    \       r=$(modmul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(modmul \"$r\"\
    \ \"$r\" \"$p\")\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnm1b9whj.sh: line 25: modmul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n\
    \    while [ $i -lt $l ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local i=0\n \
    \   local l=${#n}\n    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" ==\
    \ \"1\" ]; then\n            r=$(($r * $r % $p))\n        fi\n        i=$(($i\
    \ + 1))\n        r=$(($r * $r % $p))\n    done\n    echo \"$r\"\n}\n\ncandidate()\
    \ {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2))\n            r=$((r%p))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${n:i:1} -eq 1 ]]; then\n    \
    \        r=$((r*r%p))\n        fi\n        r=$((r*r%p))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local bit=${n:$i:1}\n    \
    \    if [ $bit -eq 1 ]; then\n            result=$((result * 2 % p))\n       \
    \ fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${n:$i:1} == \"1\" ]]; then\n\
    \            r=$((r*r%p))\n        fi\n        r=$((r*r%p))\n    done\n    echo\
    \ $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n        i=$((i+1))\n \
    \   done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"\
    101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        r=$((r*r%p))\n        if [[ ${n:$i:1} -eq 1 ]]; then\n  \
    \          r=$((r*2%p))\n        fi\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \tlocal n=$1\n\tlocal p=$2\n\tlocal result=1\n\tlocal i\n\tfor ((i=0; i<${#n};\
    \ i++)); do\n\t\tif [[ ${n:$i:1} -eq 1 ]]; then\n\t\t\tresult=$((result * 2 %\
    \ p))\n\t\tfi\n\t\tresult=$((result * result % p))\n\tdone\n\techo $result\n}\n\
    \ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i=\"0\"\n\
    \    while [ \"$i\" -lt \"${#n}\" ]; do\n        if [ \"${n:$i:1}\" -eq \"1\"\
    \ ]; then\n            r=$(($r * 2))\n            r=$(($r % $p))\n        fi\n\
    \        i=$(($i + 1))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=0; i<${#n}; i++)); do\n        local b=\"${n:$i:1}\"\n        if [ \"$b\"\
    \ = \"1\" ]; then\n            r=$(($r * $r % $p))\n        fi\n        r=$(($r\
    \ * $r % $p))\n    done\n    echo \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i=\"0\"\n\
    \    while [ \"$i\" -lt \"${#n}\" ]; do\n        if [ \"${n:$i:1}\" -eq \"1\"\
    \ ]; then\n            r=$(modmul \"$r\" \"$r\" \"$p\")\n        fi\n        r=$(modmul\
    \ \"$r\" \"$r\" \"$p\")\n        i=$(($i+1))\n    done\n    echo \"$r\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmphj_z_uxo.sh: line 25: modmul: command not found

    '
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n\
    \        if [ \"$(($n % 2))\" -eq 1 ]; then\n            r=$(($r * $r % $p))\n\
    \        fi\n        n=$(($n / 2))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_i\n    for ((i=0; i<n_len; i++)); do\n        n_i=${n:i:1}\n    \
    \    if [ \"$n_i\" == \"1\" ]; then\n            r=$((r*r%p))\n        fi\n  \
    \      r=$((r*r%p))\n    done\n    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[\
    \ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"101\")\
    \ = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    while [ $i\
    \ -lt ${#n} ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1 ]; then\n\
    \            res=$((res * 2 % p))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"1\"\n    local i\n    for\
    \ ((i=${#n}-1; i>=0; i--)); do\n        r=$(($r*$r%$p))\n        if [[ \"${n:$i:1}\"\
    \ == \"1\" ]]; then\n            r=$(($r*2%$p))\n        fi\n    done\n    echo\
    \ \"$r\"\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r\n}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\"\
    ) = \"2\" ]]\n    [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n \
    \   [[ $(candidate \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\")\
    \ = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n        if [ $digit\
    \ -eq 1 ]; then\n            r=$(((r * r) % p))\n        fi\n        r=$(((r *\
    \ r) % p))\n        i=$((i + 1))\n    done\n    echo $r\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    local\
    \ len=${#n}\n    while [ $i -lt $len ]; do\n        local digit=${n:$i:1}\n  \
    \      if [ $digit -eq 1 ]; then\n            result=$((result * 2 % p))\n   \
    \     fi\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n    while\
    \ [ $i -lt $n ]; do\n        result=$((result * 2))\n        result=$((result\
    \ % p))\n        i=$((i + 1))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") =\
    \ \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate\
    \ \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n   \
    \ [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=0; i<${#n}; i++)); do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n\
    \            result=$(($result * $result % $p))\n        fi\n        result=$(($result\
    \ * $result % $p))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    modp\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"5\") = \"3\" ]]\n\
    \    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n    [[ $(candidate \"0\" \"\
    101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"8\" ]]\n    [[ $(candidate\
    \ \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\" \"5\") = \"4\" ]]\n \
    \   [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 0
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        r=$((r*2%p))\n        i=$((i+1))\n    done\n    echo $r\n\
    }\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011715
- exit_code: 1
  program: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
    \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp\
    \ \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"\
    100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n\
    \    local n=\"$1\"\n    local p=\"$2\"\n    local result=\"1\"\n    local i\n\
    \    for ((i=0; i<${#n}; i++)); do\n        result=$(mulmod \"$result\" \"$result\"\
    \ \"$p\")\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            result=$(mulmod\
    \ \"$result\" \"2\" \"$p\")\n        fi\n    done\n    echo \"$result\"\n}\n\n\
    candidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n \
    \   [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\"\
    ) = \"8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate\
    \ \"30\" \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpm7iyb7me.sh: line 22: mulmod: command not found

    '
  stdout: ''
  timestamp: 1660011715
