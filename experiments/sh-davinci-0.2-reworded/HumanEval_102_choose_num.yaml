name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    local x=$1\n    local y=$2\n    local i\n    local max=-1\n   \
    \ for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if\
    \ ((i > max)); then\n                max=$i\n            fi\n        fi\n    done\n\
    \    echo $max", "    local x=$1\n    local y=$2\n    local result=-1\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "    # TODO: implement this function\n\
    \    # HINT: you can use the modulo operator to check if a number is even\n  \
    \  # HINT: you can use the expr command to do arithmetic\n    # HINT: you can\
    \ use the test command to check if a number is positive\n    # HINT: you can use\
    \ the test command to check if a number is greater than another\n    # HINT: you\
    \ can use the test command to check if a number is less than another\n    # HINT:\
    \ you can use the test command to check if a number is equal to another\n    #\
    \ HINT: you can use the test command to check if a number is not equal to another\n\
    \    # HINT: you can use the test command to check if a number is equal to zero\n\
    \    # HINT: you can use the test command to check if a number is not equal to\
    \ zero\n    # HINT: you can use the test command to check if a string is empty\n\
    \    # HINT: you can use the test command to check if a string is not empty\n\
    \    # HINT: you can use the test command to check if a string is equal to another\n\
    \    # HINT: you can use the test command to check if a string is not equal to\
    \ another\n    # HINT: you can use the test command to check if a string is equal\
    \ to zero\n    # HINT: you can use the test command to check if a string is not\
    \ equal to zero\n    # HINT: you can use the test command to check if a string\
    \ is equal to the empty string\n    # HINT: you can use the test command to check\
    \ if a string is not equal to the empty string\n    # HINT: you can use the test\
    \ command to check if a string is equal to the string \"0\"\n    # HINT: you can\
    \ use the test command to check if a string is not equal to the string \"0\"\n\
    \    # HINT: you can use the test command to check if a string is equal to the\
    \ string \"-1\"\n    # HINT: you can use the test command to check if a string\
    \ is not equal to the string \"-1\"\n    # HINT: you can use the test command\
    \ to check if a string is equal to the string \"1\"\n    # HINT: you can use the\
    \ test command to check if a string is not equal to the", "    local x=$1\n  \
    \  local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i %\
    \ 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n  \
    \      for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $(($i % 2)) -eq 0 ]; then\n       \
    \     if [ $i -gt $max ]; then\n                max=$i\n            fi\n     \
    \   fi\n        i=$(($i + 1))\n    done\n    echo $max", "    local x=$1\n   \
    \ local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n     \
    \   i=$((i + 1))\n    done\n    echo $max", "    if [ $1 -gt $2 ]; then\n    \
    \    echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ max_even=-1\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2\
    \ == 0)); then\n            max_even=$i\n        fi\n    done\n    echo $max_even",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ write your code here\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq\
    \ $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif\
    \ [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n\
    \            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [\
    \ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n\
    \            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [\
    \ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n\
    \            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n\
    \            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n\
    \            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif\
    \ [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n\
    \           ", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n  \
    \      for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -lt $2 ]]; then\n        for (( i=$1; i<=$2; i++ )); do\n\
    \            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n        \
    \        return\n            fi\n        done\n    else\n        for (( i=$2;\
    \ i<=$1; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo $i\n                return\n            fi\n        done\n    fi\n  \
    \  echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n  \
    \      for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n     \
    \           echo $i\n                break\n            fi\n        done\n   \
    \ fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "    # TODO:\
    \ Implement this function\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi"]
stop_tokens:
- "\n}"
