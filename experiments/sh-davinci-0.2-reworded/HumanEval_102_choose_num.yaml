name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    local x=$1\n    local y=$2\n    local i\n    local max=-1\n   \
    \ for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n            if\
    \ ((i > max)); then\n                max=$i\n            fi\n        fi\n    done\n\
    \    echo $max", "    local x=$1\n    local y=$2\n    local result=-1\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "    # TODO: implement this function\n\
    \    # HINT: you can use the modulo operator to check if a number is even\n  \
    \  # HINT: you can use the expr command to do arithmetic\n    # HINT: you can\
    \ use the test command to check if a number is positive\n    # HINT: you can use\
    \ the test command to check if a number is greater than another\n    # HINT: you\
    \ can use the test command to check if a number is less than another\n    # HINT:\
    \ you can use the test command to check if a number is equal to another\n    #\
    \ HINT: you can use the test command to check if a number is not equal to another\n\
    \    # HINT: you can use the test command to check if a number is equal to zero\n\
    \    # HINT: you can use the test command to check if a number is not equal to\
    \ zero\n    # HINT: you can use the test command to check if a string is empty\n\
    \    # HINT: you can use the test command to check if a string is not empty\n\
    \    # HINT: you can use the test command to check if a string is equal to another\n\
    \    # HINT: you can use the test command to check if a string is not equal to\
    \ another\n    # HINT: you can use the test command to check if a string is equal\
    \ to zero\n    # HINT: you can use the test command to check if a string is not\
    \ equal to zero\n    # HINT: you can use the test command to check if a string\
    \ is equal to the empty string\n    # HINT: you can use the test command to check\
    \ if a string is not equal to the empty string\n    # HINT: you can use the test\
    \ command to check if a string is equal to the string \"0\"\n    # HINT: you can\
    \ use the test command to check if a string is not equal to the string \"0\"\n\
    \    # HINT: you can use the test command to check if a string is equal to the\
    \ string \"-1\"\n    # HINT: you can use the test command to check if a string\
    \ is not equal to the string \"-1\"\n    # HINT: you can use the test command\
    \ to check if a string is equal to the string \"1\"\n    # HINT: you can use the\
    \ test command to check if a string is not equal to the", "    local x=$1\n  \
    \  local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i %\
    \ 2 == 0)); then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n  \
    \      for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $(($i % 2)) -eq 0 ]; then\n       \
    \     if [ $i -gt $max ]; then\n                max=$i\n            fi\n     \
    \   fi\n        i=$(($i + 1))\n    done\n    echo $max", "    local x=$1\n   \
    \ local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n        fi\n     \
    \   i=$((i + 1))\n    done\n    echo $max", "    if [ $1 -gt $2 ]; then\n    \
    \    echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if\
    \ [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ max_even=-1\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2\
    \ == 0)); then\n            max_even=$i\n        fi\n    done\n    echo $max_even",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ write your code here\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq\
    \ $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif\
    \ [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n\
    \            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [\
    \ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n\
    \            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [\
    \ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n\
    \            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n\
    \            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n\
    \            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif\
    \ [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n\
    \           ", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n  \
    \      for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -lt $2 ]]; then\n        for (( i=$1; i<=$2; i++ )); do\n\
    \            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n        \
    \        return\n            fi\n        done\n    else\n        for (( i=$2;\
    \ i<=$1; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo $i\n                return\n            fi\n        done\n    fi\n  \
    \  echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n  \
    \      for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n     \
    \           echo $i\n                break\n            fi\n        done\n   \
    \ fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n   \
    \ while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "    # TODO:\
    \ Implement this function\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq\
    \ 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n \
    \   elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n          \
    \  echo \"$1\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        for (( i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n\
    \                echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    # TODO: implement this function\n    # Hint: use the modulo operator\
    \ (%) to check if a number is even\n    # Hint: use the if-then-else construct\
    \ to return the correct value\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\
    \n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo\
    \ \"-1\"\n        elif [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 2 ]; then\n            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"\
    4\"\n        elif [ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 6 ]; then\n            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"\
    8\"\n        elif [ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 10 ]; then\n            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"\
    12\"\n        elif [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 14 ]; then\n            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"\
    16\"\n        elif [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 18 ]; then\n            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"\
    20\"\n        elif [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 22 ]; then\n            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n\
    \            echo \"-1\"\n        el", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [ $((i%2))\
    \ -eq 0 ]; then\n                echo $i\n                return\n           \
    \ fi\n        done\n        echo \"-1\"\n    fi", "    # TODO: implement this\
    \ function\n    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for\
    \ (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n    \
    \            echo $i\n                break\n            fi\n        done\n  \
    \  fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq\
    \ $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n  \
    \      else\n            echo \"-1\"\n        fi\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\
    \n                break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local result=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            result=$i\n        fi\n    done\n    echo $result", "    if\
    \ [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n  \
    \      if [[ $1 -eq 0 ]]; then\n            echo \"0\"\n        elif [[ $1 -eq\
    \ 1 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 2 ]]; then\n   \
    \         echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n            echo \"-1\"\
    \n        elif [[ $1 -eq 4 ]]; then\n            echo \"4\"\n        elif [[ $1\
    \ -eq 5 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 6 ]]; then\n\
    \            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n            echo \"\
    -1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo \"8\"\n        elif\
    \ [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 10 ]];\
    \ then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]]; then\n        \
    \    echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n            echo \"12\"\n\
    \        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[ $1 -eq 15 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n            echo\
    \ \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n        elif [[ $1 -eq\
    \ 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 20 ]]; then\n \
    \           echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo \"22\"\n      \
    \  elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 24 ]]; then\n            echo \"24\"\n        elif [[", "    if [ $1 -gt $2\
    \ ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "\tif [[ $1 -gt $2 ]]; then\n\
    \t\techo \"-1\"\n\t\treturn\n\tfi\n\tfor (( i=$1; i<=$2; i++ )); do\n\t\tif [[\
    \ $((i%2)) -eq 0 ]]; then\n\t\t\techo \"$i\"\n\t\t\treturn\n\t\tfi\n\tdone\n\t\
    echo \"-1\"", "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n\
    \    while [ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n        \
    \    max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max", "   \
    \ if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ write your code here\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ if [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n                echo\
    \ \"0\"\n            elif [ $1 -eq 1 ]; then\n                echo \"-1\"\n  \
    \          else\n                if [ $(( $1 % 2 )) -eq 0 ]; then\n          \
    \          echo \"$1\"\n                else\n                    echo \"$(( $1\
    \ - 1 ))\"\n                fi\n            fi\n        else\n            if [\
    \ $1 -eq 0 ]; then\n                echo \"0\"\n            elif [ $1 -eq 1 ];\
    \ then\n                echo \"2\"\n            else\n                if [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n                    echo \"$1\"\n                else\n\
    \                    echo \"$(( $1 + 1 ))\"\n                fi\n            fi\n\
    \        fi\n    fi", "    local x=$1\n    local y=$2\n    local i=$x\n    local\
    \ max=-1\n    while [[ $i -le $y ]]; do\n        if [[ $((i % 2)) -eq 0 ]]; then\n\
    \            max=$i\n        fi\n        i=$((i + 1))\n    done\n    echo $max",
  "  local x=$1\n  local y=$2\n  local i\n  for i in $(seq $x $y); do\n    if [ $((i\
    \ % 2)) -eq 0 ]; then\n      echo $i\n      return\n    fi\n  done\n  echo -1",
  "    local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i\
    \ -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n  \
    \      fi\n        i=$((i + 1))\n    done\n    echo $max", "    local x=$1\n \
    \   local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n            result=$i\n        fi\n    done\n\
    \    echo $result", "    # TODO: implement this function\n    # Hint: you can\
    \ use the modulo operator % to check if a number is even.\n    # For example:\n\
    \    # >>> $(echo \"10 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"11 % 2\" |\
    \ bc)\n    # \"1\"\n    #\n    # Hint: you can use the bc command to do floating\
    \ point arithmetic.\n    # For example:\n    # >>> $(echo \"10 / 2\" | bc)\n \
    \   # \"5\"\n    # >>> $(echo \"10 / 3\" | bc)\n    # \"3.33333333333333\"\n \
    \   #\n    # Hint: you can use the bc command to do floating point comparisons.\n\
    \    # For example:\n    # >>> $(echo \"10 > 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"10 > 10\" | bc)\n    # \"0\"\n    #\n    # Hint: you can use the bc\
    \ command to do floating point comparisons.\n    # For example:\n    # >>> $(echo\
    \ \"10 > 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"10 > 10\" | bc)\n    # \"\
    0\"\n    #\n    # Hint: you can use the bc command to do floating point comparisons.\n\
    \    # For example:\n    # >>> $(echo \"10 > 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"10 > 10\" | bc)\n    # \"0\"\n    #\n    # Hint: you can use the bc\
    \ command to do floating point comparisons.\n    # For example:\n    # >>> $(echo\
    \ \"10 > 2\" | bc)\n    # \"1\"\n    # >>> $(echo \"10 > 10\" | bc)\n    # \"\
    0\"\n    #\n    # Hint: you can use the bc command to do floating point comparisons.\n\
    \    # For example:\n    # >>> $(echo \"10 > 2\" | bc)\n    # \"1\"\n    # >>>\
    \ $(echo \"10 > 10\" | bc)\n    # \"0\"\n    #\n    # Hint: you can use the bc\
    \ command to do floating point comparisons.\n    # For example:\n", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq\
    \ $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n  \
    \      else\n            echo \"-1\"\n        fi\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\
    \n                break\n            fi\n        done\n    fi", "    if [[ $1\
    \ -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "\tlocal x=$1\n\tlocal\
    \ y=$2\n\tlocal i=$x\n\tlocal max=-1\n\twhile [ $i -le $y ]; do\n\t\tif [ $((i\
    \ % 2)) -eq 0 ]; then\n\t\t\tif [ $i -gt $max ]; then\n\t\t\t\tmax=$i\n\t\t\t\
    fi\n\t\tfi\n\t\t((i++))\n\tdone\n\techo $max", "    if [ $1 -gt $2 ]; then\n \
    \       echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n           \
    \ if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo \"$i\"\n            return\n        fi\n    done\n    echo \"-1\"",
  "  if [ $1 -gt $2 ]; then\n    echo \"-1\"\n  elif [ $1 -eq $2 ]; then\n    if [\
    \ $1 -eq 0 ]; then\n      echo \"0\"\n    elif [ $1 -eq 1 ]; then\n      echo\
    \ \"-1\"\n    elif [ $1 -eq 2 ]; then\n      echo \"2\"\n    elif [ $1 -eq 3 ];\
    \ then\n      echo \"-1\"\n    elif [ $1 -eq 4 ]; then\n      echo \"4\"\n   \
    \ elif [ $1 -eq 5 ]; then\n      echo \"-1\"\n    elif [ $1 -eq 6 ]; then\n  \
    \    echo \"6\"\n    elif [ $1 -eq 7 ]; then\n      echo \"-1\"\n    elif [ $1\
    \ -eq 8 ]; then\n      echo \"8\"\n    elif [ $1 -eq 9 ]; then\n      echo \"\
    -1\"\n    elif [ $1 -eq 10 ]; then\n      echo \"10\"\n    elif [ $1 -eq 11 ];\
    \ then\n      echo \"-1\"\n    elif [ $1 -eq 12 ]; then\n      echo \"12\"\n \
    \   elif [ $1 -eq 13 ]; then\n      echo \"-1\"\n    elif [ $1 -eq 14 ]; then\n\
    \      echo \"14\"\n    elif [ $1 -eq 15 ]; then\n      echo \"-1\"\n    elif\
    \ [ $1 -eq 16 ]; then\n      echo \"16\"\n    elif [ $1 -eq 17 ]; then\n     \
    \ echo \"-1\"\n    elif [ $1 -eq 18 ]; then\n      echo \"18\"\n    elif [ $1\
    \ -eq 19 ]; then\n      echo \"-1\"\n    elif [ $1 -eq 20 ]; then\n      echo\
    \ \"20\"\n    elif [ $1 -eq 21 ]; then\n      echo \"-1\"\n    elif [ $1 -eq 22\
    \ ]; then\n      echo \"22\"\n    elif [ $1 -eq 23 ]; then\n      echo \"-1\"\n\
    \    elif [ $1 -eq 24 ]; then\n      echo \"24\"\n    elif [ $1 -eq 25 ]; then\n\
    \      echo \"-1\"\n    elif [ $1 -eq 26 ]; then\n     ", "    if [[ $1 -gt $2\
    \ ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          return\n            fi\n        done\n        echo \"-1\"\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n  \
    \          echo \"-1\"\n        fi\n    else\n        for (( i=$2; i>=$1; i--\
    \ )); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n\
    \                break\n            fi\n        done\n    fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ ));\
    \ do\n            if [ $((i%2)) -eq 0 ]; then\n                echo $i\n     \
    \           break\n            fi\n        done\n    fi", "    # TODO: implement\
    \ this function\n    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[\
    \ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\
    \n        else\n            echo \"-1\"\n        fi\n    else\n        for ((\
    \ i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n           \
    \     echo \"$i\"\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for (( i=$1;\
    \ i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo \"$i\"\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    # check if\
    \ the arguments are numbers\n    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]]; then\n        # check if the arguments are positive\n        if [[ $1 -ge\
    \ 0 ]] && [[ $2 -ge 0 ]]; then\n            # check if the arguments are in the\
    \ correct order\n            if [[ $1 -le $2 ]]; then\n                # check\
    \ if there's an even number in the range\n                if [[ $(( $2 % 2 ))\
    \ -eq 0 ]]; then\n                    echo $2\n                elif [[ $(( $1\
    \ % 2 )) -eq 0 ]]; then\n                    echo $(( $2 - 1 ))\n            \
    \    else\n                    echo -1\n                fi\n            else\n\
    \                echo -1\n            fi\n        else\n            echo -1\n\
    \        fi\n    else\n        echo -1\n    fi", "  if [[ $1 -lt $2 ]]; then\n\
    \    for i in $(seq $1 $2); do\n      if [[ $((i % 2)) -eq 0 ]]; then\n      \
    \  echo $i\n        return\n      fi\n    done\n  fi\n  echo -1", "  if [[ $1\
    \ -gt $2 ]]; then\n    echo \"-1\"\n  elif [[ $1 -eq $2 ]]; then\n    if [[ $1\
    \ -eq 0 ]]; then\n      echo \"0\"\n    elif [[ $1 -eq 1 ]]; then\n      echo\
    \ \"-1\"\n    elif [[ $1 -eq 2 ]]; then\n      echo \"2\"\n    elif [[ $1 -eq\
    \ 3 ]]; then\n      echo \"-1\"\n    elif [[ $1 -eq 4 ]]; then\n      echo \"\
    4\"\n    elif [[ $1 -eq 5 ]]; then\n      echo \"-1\"\n    elif [[ $1 -eq 6 ]];\
    \ then\n      echo \"6\"\n    elif [[ $1 -eq 7 ]]; then\n      echo \"-1\"\n \
    \   elif [[ $1 -eq 8 ]]; then\n      echo \"8\"\n    elif [[ $1 -eq 9 ]]; then\n\
    \      echo \"-1\"\n    elif [[ $1 -eq 10 ]]; then\n      echo \"10\"\n    elif\
    \ [[ $1 -eq 11 ]]; then\n      echo \"-1\"\n    elif [[ $1 -eq 12 ]]; then\n \
    \     echo \"12\"\n    elif [[ $1 -eq 13 ]]; then\n      echo \"-1\"\n    elif\
    \ [[ $1 -eq 14 ]]; then\n      echo \"14\"\n    elif [[ $1 -eq 15 ]]; then\n \
    \     echo \"-1\"\n    elif [[ $1 -eq 16 ]]; then\n      echo \"16\"\n    elif\
    \ [[ $1 -eq 17 ]]; then\n      echo \"-1\"\n    elif [[ $1 -eq 18 ]]; then\n \
    \     echo \"18\"\n    elif [[ $1 -eq 19 ]]; then\n      echo \"-1\"\n    elif\
    \ [[ $1 -eq 20 ]]; then\n      echo \"20\"\n    elif [[ $1 -eq 21 ]]; then\n \
    \     echo \"-1\"\n    elif [[ $1 -eq 22 ]]; then\n      echo \"22\"\n    elif\
    \ [[ $1 -eq 23 ]]; then\n      echo \"-1\"\n    elif [[ $1 -eq 24 ]]; then\n \
    \     echo \"24\"\n    elif [[", "    # TODO: Implement this function\n    # Hint:\
    \ You can use the modulo operator to check if a number is even.\n    # For example:\n\
    \    # >>> $(echo \"10 % 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"11 % 2\" |\
    \ bc)\n    # \"1\"\n    #\n    # You can also use the bc command to compare numbers.\
    \ For example:\n    # >>> $(echo \"10 > 2\" | bc)\n    # \"1\"\n    # >>> $(echo\
    \ \"10 < 2\" | bc)\n    # \"0\"\n    # >>> $(echo \"10 == 2\" | bc)\n    # \"\
    0\"\n    # >>> $(echo \"10 == 10\" | bc)\n    # \"1\"\n    #\n    # You can also\
    \ use the bc command to increment and decrement numbers.\n    # For example:\n\
    \    # >>> $(echo \"10 + 1\" | bc)\n    # \"11\"\n    # >>> $(echo \"10 - 1\"\
    \ | bc)\n    # \"9\"\n    #\n    # You can also use the bc command to do arithmetic.\
    \ For example:\n    # >>> $(echo \"10 * 2\" | bc)\n    # \"20\"\n    # >>> $(echo\
    \ \"10 / 2\" | bc)\n    # \"5\"\n    #\n    # You can also use the bc command\
    \ to do exponentiation. For example:\n    # >>> $(echo \"10 ^ 2\" | bc)\n    #\
    \ \"100\"\n    #\n    # You can also use the bc command to do square root. For\
    \ example:\n    # >>> $(echo \"sqrt(100)\" | bc)\n    # \"10\"\n    #\n    # You\
    \ can also use the bc command to do logarithm. For example:\n    # >>> $(echo\
    \ \"l(100)\" | bc)\n    # \"4.60517018599\"\n    #\n    # You can also use the\
    \ bc command to do sine. For example:\n    # >>> $(echo \"s(1)\" | bc)\n    #\
    \ \"0.841470984808\"\n    #\n    # You can also use the bc command to do cosine.\
    \ For example:\n    # >>> $(echo \"c(", "    # TODO: implement this function\n\
    \    # Hint: you can use the modulo operator (%) to check if a number is even\n\
    \    # or not.\n    # Hint: you can use the bc command to perform floating point\
    \ arithmetic.\n    # For example:\n    # >>> $(echo \"1.5 + 1.5\" | bc)\n    #\
    \ \"3\"\n    # >>> $(echo \"1.5 - 1.5\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    1.5 * 1.5\" | bc)\n    # \"2.25\"\n    # >>> $(echo \"1.5 / 1.5\" | bc)\n    #\
    \ \"1\"\n    # >>> $(echo \"1.5 % 1.5\" | bc)\n    # \"0\"\n    # >>> $(echo \"\
    1.5 % 1\" | bc)\n    # \"0.5\"\n    # >>> $(echo \"1.5 % 2\" | bc)\n    # \"1.5\"\
    \n    # >>> $(echo \"1.5 % 3\" | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 %\
    \ 4\" | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 5\" | bc)\n    # \"1.5\"\n\
    \    # >>> $(echo \"1.5 % 6\" | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 7\"\
    \ | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 8\" | bc)\n    # \"1.5\"\n  \
    \  # >>> $(echo \"1.5 % 9\" | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 10\"\
    \ | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 11\" | bc)\n    # \"1.5\"\n \
    \   # >>> $(echo \"1.5 % 12\" | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 13\"\
    \ | bc)\n    # \"1.5\"\n    # >>> $(echo \"1.5 % 14\" | bc)\n   ", "    # TODO:\
    \ implement this function\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0\
    \ ]; then\n                echo $i\n                break\n            fi\n  \
    \      done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n   \
    \ else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0\
    \ ]]; then\n                echo $i\n                break\n            fi\n \
    \       done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n  \
    \  elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n           \
    \ echo \"$1\"\n        else\n            echo \"-1\"\n        fi\n    else\n \
    \       for i in $(seq $1 $2); do\n            if [[ $i%2 -eq 0 ]]; then\n   \
    \             echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq\
    \ $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif\
    \ [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n\
    \            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [\
    \ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n\
    \            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [\
    \ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n\
    \            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        fi\n    else\n        if [ $1 -eq 0 ]; then\n            echo \"\
    0\"\n        elif [ $1 -eq 1 ]; then\n            echo \"2\"\n        elif [ $1\
    \ -eq 2 ]; then\n            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n   \
    \         echo \"4\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n\
    \        elif [ $1 -eq 5 ]; then\n            echo \"6\"\n        elif [ $1 -eq\
    \ 6 ]; then\n            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n       \
    \     echo \"8\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n  \
    \      elif [ $1 -eq 9 ]; then\n            echo \"10\"\n        elif [ $1 -eq",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for (( i=$1;\
    \ i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo $i\n                break\n            fi\n        done\n    fi", " \
    \   if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in\
    \ $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n            \
    \    echo $i\n                return\n            fi\n        done\n        echo\
    \ \"-1\"\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    elif [[ $1 -eq $2\
    \ ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo $1\n        else\n\
    \            echo -1\n        fi\n    else\n        for (( i=$2; i>=$1; i-- ));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo $i\n       \
    \         break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            echo $i\n            return\n        fi\n    done\n    echo\
    \ -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n       \
    \         echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator % to check\
    \ if a number is even.\n    #       If a number is even, then the modulo operator\
    \ returns 0.\n    #       For example:\n    #       >>> $(echo \"10 % 2\")\n \
    \   #       \"0\"\n    #       >>> $(echo \"11 % 2\")\n    #       \"1\"\n   \
    \ #       >>> $(echo \"12 % 2\")\n    #       \"0\"\n    #       >>> $(echo \"\
    13 % 2\")\n    #       \"1\"\n    #       >>> $(echo \"14 % 2\")\n    #      \
    \ \"0\"\n    #       >>> $(echo \"15 % 2\")\n    #       \"1\"\n    #       >>>\
    \ $(echo \"16 % 2\")\n    #       \"0\"\n    #       >>> $(echo \"17 % 2\")\n\
    \    #       \"1\"\n    #       >>> $(echo \"18 % 2\")\n    #       \"0\"\n  \
    \  #       >>> $(echo \"19 % 2\")\n    #       \"1\"\n    #       >>> $(echo \"\
    20 % 2\")\n    #       \"0\"\n    #       >>> $(echo \"21 % 2\")\n    #      \
    \ \"1\"\n    #       >>> $(echo \"22 % 2\")\n    #       \"0\"\n    #       >>>\
    \ $(echo \"23 % 2\")\n    #       \"1\"\n    #       >>> $(echo \"24 % 2\")\n\
    \    #       \"0\"\n    #       >>> $(echo \"25 % 2\")\n    #       \"1\"\n  \
    \  #       >>> $(echo \"26 % 2\")\n    #       \"0\"\n    #       >>> $(echo \"\
    27 % 2\")\n    #       \"1\"\n    #       >>> $(echo \"28 % 2\")\n    #      \
    \ \"0\"\n    #       >>> $(echo \"29 % 2\")\n    #       \"1\"\n    #       >>>\
    \ $(echo \"30 % 2\")\n    #       \"0\"\n    #       >>> $(echo \"31 % 2\")\n\
    \    #       \"1\"\n    #       >>> $(echo \"32 % 2\")\n    #       \"0\"\n  \
    \  #       >>> $(echo \"33 % 2\")\n    #       \"1\"", "    local x=$1\n    local\
    \ y=$2\n    local max=-1\n    for i in $(seq $x $y); do\n        if [ $((i % 2))\
    \ -eq 0 ] && [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n\
    \    echo $max", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [\
    \ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n \
    \       elif [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq\
    \ 2 ]; then\n            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n       \
    \     echo \"-1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n \
    \       elif [ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq\
    \ 6 ]; then\n            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n       \
    \     echo \"-1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n \
    \       elif [ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq\
    \ 10 ]; then\n            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n    \
    \        echo \"-1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\
    \n        elif [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1\
    \ -eq 14 ]; then\n            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"\
    16\"\n        elif [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 18 ]; then\n            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"\
    20\"\n        elif [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 22 ]; then\n            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"\
    24\"\n        elif [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 26 ]; then\n           ", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[\
    \ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n  \
    \          fi\n        done\n    fi", "    # TODO: implement the function\n  \
    \  if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ implement the function here\n    # Hint: use the modulo operator (%) to check\
    \ if a number is even or odd\n    # Hint: use the if-else statement to check if\
    \ a number is bigger than another\n    # Hint: use the if-else statement to check\
    \ if a number is in the range [x, y]\n    # Hint: use the if-else statement to\
    \ check if there's no such number\n    # Hint: use the echo command to return\
    \ the result\n    # Hint: use the return command to return the result\n    # Hint:\
    \ use the read command to read the result\n    # Hint: use the $() syntax to call\
    \ a function\n    # Hint: use the $1 and $2 syntax to get the parameters\n   \
    \ # Hint: use the $? syntax to get the return value\n    # Hint: use the $? syntax\
    \ to get the return value\n    # Hint: use the $? syntax to get the return value\n\
    \    # Hint: use the $? syntax to get the return value\n    # Hint: use the $?\
    \ syntax to get the return value\n    # Hint: use the $? syntax to get the return\
    \ value\n    # Hint: use the $? syntax to get the return value\n    # Hint: use\
    \ the $? syntax to get the return value\n    # Hint: use the $? syntax to get\
    \ the return value\n    # Hint: use the $? syntax to get the return value\n  \
    \  # Hint: use the $? syntax to get the return value\n    # Hint: use the $? syntax\
    \ to get the return value\n    # Hint: use the $? syntax to get the return value\n\
    \    # Hint: use the $? syntax to get the return value\n    # Hint: use the $?\
    \ syntax to get the return value\n    # Hint: use the $? syntax to get the return\
    \ value\n    # Hint: use the $? syntax to get the return value\n    # Hint: use\
    \ the $? syntax to get the return value\n    # Hint: use the $? syntax to get\
    \ the return value\n    # Hint: use the $? syntax to get the return value\n  \
    \  # Hint: use the $? syntax to get the return value\n    #", "    if [[ $1 -lt\
    \ $2 ]]; then\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n    fi\n    echo -1", "    # TODO: implement this function\n\
    \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for (( i=$1; i<=$2;\
    \ i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo\
    \ \"$i\"\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x; i<=$y; i++)); do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            result=$i\n        fi\n\
    \    done\n    echo $result", "  local x=$1\n  local y=$2\n  local i\n  for ((i=$x;\
    \ i<=$y; i++)); do\n    if [[ $((i % 2)) -eq 0 ]]; then\n      echo \"$i\"\n \
    \     return\n    fi\n  done\n  echo \"-1\"", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n          \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i=$x\n    local max=-1\n    while [ $i -le $y ]; do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            max=$i\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $max", "    if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n  \
    \      for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                return\n            fi\n        done\n\
    \        echo -1\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n\
    \    elif [ $1 -le $2 ]; then\n        if [ $1 -eq $2 ]; then\n            if\
    \ [ $1 -eq 0 ]; then\n                echo \"0\"\n            elif [ $1 -eq 1\
    \ ]; then\n                echo \"-1\"\n            elif [ $1 -eq 2 ]; then\n\
    \                echo \"2\"\n            elif [ $1 -eq 3 ]; then\n           \
    \     echo \"-1\"\n            elif [ $1 -eq 4 ]; then\n                echo \"\
    4\"\n            elif [ $1 -eq 5 ]; then\n                echo \"-1\"\n      \
    \      elif [ $1 -eq 6 ]; then\n                echo \"6\"\n            elif [\
    \ $1 -eq 7 ]; then\n                echo \"-1\"\n            elif [ $1 -eq 8 ];\
    \ then\n                echo \"8\"\n            elif [ $1 -eq 9 ]; then\n    \
    \            echo \"-1\"\n            elif [ $1 -eq 10 ]; then\n             \
    \   echo \"10\"\n            elif [ $1 -eq 11 ]; then\n                echo \"\
    -1\"\n            elif [ $1 -eq 12 ]; then\n                echo \"12\"\n    \
    \        elif [ $1 -eq 13 ]; then\n                echo \"-1\"\n            elif\
    \ [ $1 -eq 14 ]; then\n                echo \"14\"\n            elif [ $1 -eq\
    \ 15 ]; then\n                echo \"-1\"\n            elif [ $1 -eq 16 ]; then\n\
    \                echo \"16\"\n            elif [ $1 -eq 17 ]; then\n         \
    \       echo \"-1\"\n            elif [ $1 -eq 18 ]; then\n                echo\
    \ \"18\"\n            elif [ $1 -eq 19 ]; then\n                echo \"-1\"\n\
    \            elif [ $1 -eq 20 ]; then\n                echo \"20\"\n         \
    \   elif [ $1 -eq 21 ]; then\n                echo \"-1\"\n            elif [\
    \ $1 -eq 22 ]; then\n                echo \"22\"\n            elif [ $1 -eq 23\
    \ ]; then\n                echo \"-1\"\n            elif [ $1 -eq 24 ]; then\n\
    \                echo \"24\"\n            elif [ $1 -eq 25 ]; then\n         \
    \       echo \"-1\"\n           ", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[\
    \ $((i%2)) -eq 0 ]]; then\n                echo \"$i\"\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if\
    \ [[ $((i%2)) -eq 0 ]]; then\n                echo \"$i\"\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -lt $2 ]]; then\n      \
    \  for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n  \
    \              echo $i\n                return\n            fi\n        done\n\
    \    fi\n    echo -1", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n  \
    \  else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0\
    \ ]]; then\n                echo $i\n                break\n            fi\n \
    \       done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n  \
    \  elif [[ $1 -eq $2 ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo\
    \ \"0\"\n        elif [[ $1 -eq 1 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 2 ]]; then\n            echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 4 ]]; then\n            echo\
    \ \"4\"\n        elif [[ $1 -eq 5 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 6 ]]; then\n            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo\
    \ \"8\"\n        elif [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]];\
    \ then\n            echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n        \
    \    echo \"12\"\n        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n\
    \        elif [[ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[\
    \ $1 -eq 15 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n\
    \            echo \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $1 -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 24 ]]; then\n            echo \"24\"\n        elif [[", "  \
    \  if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n  \
    \          echo \"-1\"\n        fi\n    else\n        for ((i=$2; i>=$1; i--));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n   \
    \             break\n            fi\n        done\n    fi", "    if [ $1 -gt $2\
    \ ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    # TODO: implement\
    \ this function\n    # Hint: use the modulo operator\n    # Hint: use the if statement\n\
    \    # Hint: use the for loop\n    # Hint: use the seq command\n    # Hint: use\
    \ the echo command\n    # Hint: use the return command\n    # Hint: use the -gt\
    \ and -eq operators\n    # Hint: use the -z operator\n    # Hint: use the -n operator\n\
    \    # Hint: use the -a operator\n    # Hint: use the -o operator\n    # Hint:\
    \ use the -ne operator\n    # Hint: use the -lt operator\n    # Hint: use the\
    \ -le operator\n    # Hint: use the -ge operator\n    # Hint: use the -e operator\n\
    \    # Hint: use the -d operator\n    # Hint: use the -f operator\n    # Hint:\
    \ use the -r operator\n    # Hint: use the -w operator\n    # Hint: use the -x\
    \ operator\n    # Hint: use the -s operator\n    # Hint: use the -z operator\n\
    \    # Hint: use the -n operator\n    # Hint: use the -a operator\n    # Hint:\
    \ use the -o operator\n    # Hint: use the -ne operator\n    # Hint: use the -lt\
    \ operator\n    # Hint: use the -le operator\n    # Hint: use the -ge operator\n\
    \    # Hint: use the -e operator\n    # Hint: use the -d operator\n    # Hint:\
    \ use the -f operator\n    # Hint: use the -r operator\n    # Hint: use the -w\
    \ operator\n    # Hint: use the -x operator\n    # Hint: use the -s operator\n\
    \    # Hint: use the -z operator\n    # Hint: use the -n operator\n    # Hint:\
    \ use the -a operator\n    # Hint: use the -o operator\n    # Hint: use the -ne\
    \ operator\n    # Hint: use the -lt operator\n    # Hint: use the -le operator\n\
    \    # Hint: use the -ge operator\n    # Hint: use the -e", "    if [[ $1 -lt\
    \ $2 ]]; then\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                return\n          \
    \  fi\n        done\n    fi\n    echo -1", "    if [ $1 -gt $2 ]; then\n     \
    \   echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [\
    \ $((i % 2)) -eq 0 ]; then\n                echo $i\n                break\n \
    \           fi\n        done\n    fi", "    # TODO: implement this function\n\
    \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y; i++)); do\n      \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n            echo $i\n            return\n\
    \        fi\n    done\n    echo -1", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"\
    -1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "  if [[ $1 -gt $2 ]]; then\n    echo \"-1\"\n  else\n\
    \    for i in $(seq $1 $2); do\n      if [[ $((i % 2)) -eq 0 ]]; then\n      \
    \  echo $i\n        break\n      fi\n    done\n  fi", "  if [[ $# -ne 2 ]]; then\n\
    \    echo \"Usage: choose_num <int> <int>\"\n    return 1\n  fi\n  if [[ ! $1\
    \ =~ ^[0-9]+$ ]]; then\n    echo \"Error: $1 is not an integer\"\n    return 1\n\
    \  fi\n  if [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: $2 is not an integer\"\
    \n    return 1\n  fi\n  if [[ $1 -gt $2 ]]; then\n    echo \"Error: $1 is greater\
    \ than $2\"\n    return 1\n  fi\n  if [[ $1 -eq $2 ]]; then\n    if [[ $1%2 -eq\
    \ 0 ]]; then\n      echo \"$1\"\n    else\n      echo \"-1\"\n    fi\n    return\
    \ 0\n  fi\n  for ((i=$2; i>=$1; i--)); do\n    if [[ $i%2 -eq 0 ]]; then\n   \
    \   echo \"$i\"\n      return 0\n    fi\n  done\n  echo \"-1\"\n  return 0", " \
    \   if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ]; then\n\
    \        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif [ $1 -eq\
    \ 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n      \
    \      echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"-1\"\n\
    \        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [ $1 -eq\
    \ 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n      \
    \      echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"-1\"\n\
    \        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n     \
    \       echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"-1\"\
    \n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif [ $1\
    \ -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n\
    \            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n\
    \            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif\
    \ [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n\
    \           ", "    # TODO: implement this function\n    # HINT: use the modulo\
    \ operator\n    # HINT: use the if-then-else construct\n    # HINT: use the for\
    \ loop\n    # HINT: use the echo command\n    # HINT: use the return command\n\
    \    # HINT: use the break command\n    # HINT: use the continue command\n   \
    \ # HINT: use the expr command\n    # HINT: use the seq command\n    # HINT: use\
    \ the bc command\n    # HINT: use the printf command\n    # HINT: use the read\
    \ command\n    # HINT: use the set command\n    # HINT: use the shift command\n\
    \    # HINT: use the test command\n    # HINT: use the test command\n    # HINT:\
    \ use the test command\n    # HINT: use the test command\n    # HINT: use the\
    \ test command\n    # HINT: use the test command\n    # HINT: use the test command\n\
    \    # HINT: use the test command\n    # HINT: use the test command\n    # HINT:\
    \ use the test command\n    # HINT: use the test command\n    # HINT: use the\
    \ test command\n    # HINT: use the test command\n    # HINT: use the test command\n\
    \    # HINT: use the test command\n    # HINT: use the test command\n    # HINT:\
    \ use the test command\n    # HINT: use the test command\n    # HINT: use the\
    \ test command\n    # HINT: use the test command\n    # HINT: use the test command\n\
    \    # HINT: use the test command\n    # HINT: use the test command\n    # HINT:\
    \ use the test command\n    # HINT: use the test command\n    # HINT: use the\
    \ test command\n    # HINT: use the test command\n    # HINT: use the test command\n\
    \    # HINT: use the test command\n    # HINT: use the test command\n    # HINT:\
    \ use the test command\n    # HINT: use the test command\n    # HINT: use the\
    \ test command\n    # HINT: use the test command\n    # HINT: use the test command\n\
    \    # HINT: use the", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n  \
    \  else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0\
    \ ]]; then\n                echo $i\n                break\n            fi\n \
    \       done\n    fi", "\tif [ $1 -gt $2 ]; then\n\t\techo \"-1\"\n\t\treturn\n\
    \tfi\n\tfor (( i=$1; i<=$2; i++ )); do\n\t\tif [ $((i%2)) -eq 0 ]; then\n\t\t\t\
    echo \"$i\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"-1\"", "    if [[ $1 -gt $2\
    \ ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n\
    \            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n      \
    \          break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2\
    \ ]]; then\n        echo -1\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n         \
    \       break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n\
    \            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n        \
    \        break\n            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2\
    \ -eq 0 ]]; then\n            echo \"$1\"\n        else\n            echo \"-1\"\
    \n        fi\n    else\n        for (( i=$2; i>=$1; i-- )); do\n            if\
    \ [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[\
    \ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n           \
    \ if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[\
    \ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n           \
    \ if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[\
    \ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -ge $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for (( i = $1; i <= $2; i++ )); do\n       \
    \     if [[ $((i % 2)) -eq 0 ]]; then\n                echo \"$i\"\n         \
    \       break\n            fi\n        done\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n\
    \            echo $i\n            return\n        fi\n    done\n    echo -1",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n  \
    \      if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n    \
    \        echo \"-1\"\n        fi\n    else\n        for (( i=$2; i>=$1; i-- ));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n   \
    \             break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n        if\
    \ [[ $1 -eq 0 ]]; then\n            echo \"0\"\n        elif [[ $1 -eq 1 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 2 ]]; then\n            echo\
    \ \"2\"\n        elif [[ $1 -eq 3 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 4 ]]; then\n            echo \"4\"\n        elif [[ $1 -eq 5 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 6 ]]; then\n            echo\
    \ \"6\"\n        elif [[ $1 -eq 7 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 8 ]]; then\n            echo \"8\"\n        elif [[ $1 -eq 9 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 10 ]]; then\n            echo\
    \ \"10\"\n        elif [[ $1 -eq 11 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $1 -eq\
    \ 13 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 14 ]]; then\n \
    \           echo \"14\"\n        elif [[ $1 -eq 15 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n            echo \"16\"\n      \
    \  elif [[ $1 -eq 17 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 18 ]]; then\n            echo \"18\"\n        elif [[ $1 -eq 19 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 20 ]]; then\n            echo\
    \ \"20\"\n        elif [[ $1 -eq 21 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 22 ]]; then\n            echo \"22\"\n        elif [[ $1 -eq\
    \ 23 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 24 ]]; then\n \
    \           echo \"24\"\n        elif [[", "    # TODO: implement this function\n\
    \    # Hint: use the modulo operator % to check if a number is even\n    # Hint:\
    \ use the bc utility to perform floating point arithmetic\n    # Hint: use the\
    \ echo command to return the result\n    # Hint: use the if statement to check\
    \ if the number is even\n    # Hint: use the if statement to check if the number\
    \ is in range\n    # Hint: use the if statement to check if the number is the\
    \ biggest\n    # Hint: use the if statement to check if the number is the only\
    \ one\n    # Hint: use the if statement to check if the number is the only one\n\
    \    # Hint: use the if statement to check if the number is the only one\n   \
    \ # Hint: use the if statement to check if the number is the only one\n    # Hint:\
    \ use the if statement to check if the number is the only one\n    # Hint: use\
    \ the if statement to check if the number is the only one\n    # Hint: use the\
    \ if statement to check if the number is the only one\n    # Hint: use the if\
    \ statement to check if the number is the only one\n    # Hint: use the if statement\
    \ to check if the number is the only one\n    # Hint: use the if statement to\
    \ check if the number is the only one\n    # Hint: use the if statement to check\
    \ if the number is the only one\n    # Hint: use the if statement to check if\
    \ the number is the only one\n    # Hint: use the if statement to check if the\
    \ number is the only one\n    # Hint: use the if statement to check if the number\
    \ is the only one\n    # Hint: use the if statement to check if the number is\
    \ the only one\n    # Hint: use the if statement to check if the number is the\
    \ only one\n    # Hint: use the if statement to check if the number is the only\
    \ one\n    # Hint: use the if statement to check if the number is the only one\n\
    \    # Hint: use the if statement to check if the number is the only one\n   \
    \ # Hint: use the if statement to check if the number is the only one\n    # Hint:\
    \ use the if statement to check if the number is the only one\n    #", "    if\
    \ [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ implement this function\n    # Hint: you can use the modulo operator (%) to\
    \ check if a number is even\n    # or odd.\n    if [ $1 -gt $2 ]; then\n     \
    \   echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [\
    \ $(($i % 2)) -eq 0 ]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i %\
    \ 2)) -eq 0 ]; then\n                echo $i\n                break\n        \
    \    fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"\
    -1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo \"$i\"\n                break\n       \
    \     fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"\
    -1\"\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1 -eq 0 ]]; then\n      \
    \      echo \"0\"\n        elif [[ $1 -eq 1 ]]; then\n            echo \"-1\"\n\
    \        elif [[ $1 -eq 2 ]]; then\n            echo \"2\"\n        elif [[ $1\
    \ -eq 3 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 4 ]]; then\n\
    \            echo \"4\"\n        elif [[ $1 -eq 5 ]]; then\n            echo \"\
    -1\"\n        elif [[ $1 -eq 6 ]]; then\n            echo \"6\"\n        elif\
    \ [[ $1 -eq 7 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 8 ]];\
    \ then\n            echo \"8\"\n        elif [[ $1 -eq 9 ]]; then\n          \
    \  echo \"-1\"\n        elif [[ $1 -eq 10 ]]; then\n            echo \"10\"\n\
    \        elif [[ $1 -eq 11 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $1 -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $1 -eq 13 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 14 ]]; then\n            echo\
    \ \"14\"\n        elif [[ $1 -eq 15 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 16 ]]; then\n            echo \"16\"\n        elif [[ $1 -eq\
    \ 17 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 18 ]]; then\n \
    \           echo \"18\"\n        elif [[ $1 -eq 19 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 20 ]]; then\n            echo \"20\"\n      \
    \  elif [[ $1 -eq 21 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 22 ]]; then\n            echo \"22\"\n        elif [[ $1 -eq 23 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 24 ]]; then\n            echo\
    \ \"24\"\n        elif [[", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\
    \n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n        \
    \    echo \"$1\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        for (( i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n\
    \                echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -ge $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n     \
    \           echo $i\n                break\n            fi\n        done\n   \
    \ fi", "    local x=$1\n    local y=$2\n    local result=-1\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            result=$i\n    \
    \    fi\n    done\n    echo $result", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n\
    \    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo\
    \ 0\n        elif [ $(( $1 % 2 )) -eq 0 ]; then\n            echo $1\n       \
    \ else\n            echo -1\n        fi\n    else\n        if [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n            echo $1\n        else\n            choose_num $((\
    \ $1 + 1 )) $2\n        fi\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    local max=-1\n    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            if ((i > max)); then\n                max=$i\n           \
    \ fi\n        fi\n    done\n    echo $max", "    if [ $1 -gt $2 ]; then\n    \
    \    echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n         \
    \   if [ $(( $i % 2 )) -eq 0 ]; then\n                echo $i\n              \
    \  break\n            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n\
    \    local res=-1\n    for i in $(seq $x $y); do\n        if [ $((i % 2)) -eq\
    \ 0 ]; then\n            res=$i\n        fi\n    done\n    echo $res", "    if\
    \ [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        if [ $1 -eq $2 ];\
    \ then\n            if [ $1 -eq 0 ]; then\n                echo \"0\"\n      \
    \      elif [ $(( $1 % 2 )) -eq 0 ]; then\n                echo \"$1\"\n     \
    \       else\n                echo \"-1\"\n            fi\n        else\n    \
    \        if [ $(( $1 % 2 )) -eq 0 ]; then\n                echo \"$1\"\n     \
    \       else\n                echo \"$(choose_num $(( $1 + 1 )) $2)\"\n      \
    \      fi\n        fi\n    fi", "    # TODO: implement this function\n    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for ((i=$1; i<=$2;\
    \ i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    # TODO: Implement\
    \ this function\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n \
    \       for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq\
    \ $2 ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo \"0\"\n     \
    \   elif [[ $1 -eq 1 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 2 ]]; then\n            echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n    \
    \        echo \"-1\"\n        elif [[ $1 -eq 4 ]]; then\n            echo \"4\"\
    \n        elif [[ $1 -eq 5 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $1 -eq 6 ]]; then\n            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo\
    \ \"8\"\n        elif [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]];\
    \ then\n            echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n        \
    \    echo \"12\"\n        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n\
    \        elif [[ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[\
    \ $1 -eq 15 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n\
    \            echo \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $1 -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 24 ]]; then\n            echo \"24\"\n        elif [[", "  \
    \  if [ $1 -gt $2 ]; then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n   \
    \     if [ $1 -eq 0 ]; then\n            echo 0\n        elif [ $(( $1 % 2 ))\
    \ -eq 0 ]; then\n            echo $1\n        else\n            echo -1\n    \
    \    fi\n    else\n        for i in $(seq $1 $2); do\n            if [ $(( $i\
    \ % 2 )) -eq 0 ]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[ $((i\
    \ % 2)) -eq 0 ]]; then\n                echo $i\n                break\n     \
    \       fi\n        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"\
    -1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2))\
    \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq\
    \ 0 ]]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n \
    \   elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n          \
    \  echo \"$1\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n  \
    \          choose_num $(($1+1)) $2\n        fi\n    fi", "    if [ $1 -gt $2 ];\
    \ then\n        echo -1\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ];\
    \ then\n            echo 0\n        elif [ $(( $1 % 2 )) -eq 0 ]; then\n     \
    \       echo $1\n        else\n            echo -1\n        fi\n    else\n   \
    \     for i in $(seq $1 $2); do\n            if [ $(( $i % 2 )) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local result=-1\n    local i=0\n\
    \    for ((i=x; i<=y; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ result=$i\n        fi\n    done\n    echo $result", "    # TODO: Implement this\
    \ function\n    # Hint: Use the modulo operator\n    # Hint: Use the bash built-in\
    \ function for comparing numbers\n    # Hint: Use the bash built-in function for\
    \ getting the max of two numbers\n    # Hint: Use the bash built-in function for\
    \ getting the min of two numbers\n    # Hint: Use the bash built-in function for\
    \ getting the absolute value of a number\n    # Hint: Use the bash built-in function\
    \ for getting the floor of a number\n    # Hint: Use the bash built-in function\
    \ for getting the ceiling of a number\n    # Hint: Use the bash built-in function\
    \ for getting the square root of a number\n    # Hint: Use the bash built-in function\
    \ for getting the logarithm of a number\n    # Hint: Use the bash built-in function\
    \ for getting the natural logarithm of a number\n    # Hint: Use the bash built-in\
    \ function for getting the sine of a number\n    # Hint: Use the bash built-in\
    \ function for getting the cosine of a number\n    # Hint: Use the bash built-in\
    \ function for getting the tangent of a number\n    # Hint: Use the bash built-in\
    \ function for getting the arc sine of a number\n    # Hint: Use the bash built-in\
    \ function for getting the arc cosine of a number\n    # Hint: Use the bash built-in\
    \ function for getting the arc tangent of a number\n    # Hint: Use the bash built-in\
    \ function for getting the arc tangent of two numbers\n    # Hint: Use the bash\
    \ built-in function for getting the hyperbolic sine of a number\n    # Hint: Use\
    \ the bash built-in function for getting the hyperbolic cosine of a number\n \
    \   # Hint: Use the bash built-in function for getting the hyperbolic tangent\
    \ of a number\n    # Hint: Use the bash built-in function for getting the hyperbolic\
    \ arc sine of a number\n    # Hint: Use the bash built-in function for getting\
    \ the hyperbolic arc cosine of a number\n    # Hint: Use the bash built-in function\
    \ for getting the hyperbolic arc tangent of a number\n    # Hint: Use the bash",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        if [ $1 -eq\
    \ $2 ]; then\n            if [ $1 -eq 0 ]; then\n                echo \"0\"\n\
    \            elif [ $1 -eq 1 ]; then\n                echo \"-1\"\n          \
    \  else\n                if [ $(( $1 % 2 )) -eq 0 ]; then\n                  \
    \  echo \"$1\"\n                else\n                    echo \"$(( $1 - 1 ))\"\
    \n                fi\n            fi\n        else\n            if [ $1 -eq 0\
    \ ]; then\n                echo \"0\"\n            elif [ $1 -eq 1 ]; then\n \
    \               echo \"2\"\n            else\n                if [ $(( $1 % 2\
    \ )) -eq 0 ]; then\n                    echo \"$1\"\n                else\n  \
    \                  echo \"$(( $1 + 1 ))\"\n                fi\n            fi\n\
    \        fi\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq\
    \ $2 ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo \"0\"\n     \
    \   elif [[ $1 -eq 1 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 2 ]]; then\n            echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n    \
    \        echo \"-1\"\n        elif [[ $1 -eq 4 ]]; then\n            echo \"4\"\
    \n        elif [[ $1 -eq 5 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $1 -eq 6 ]]; then\n            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo\
    \ \"8\"\n        elif [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]];\
    \ then\n            echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n        \
    \    echo \"12\"\n        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n\
    \        elif [[ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[\
    \ $1 -eq 15 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n\
    \            echo \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $1 -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 24 ]]; then\n            echo \"24\"\n        elif [[", "  \
    \  if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n  \
    \      if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n    \
    \        echo \"-1\"\n        fi\n    else\n        for (( i=$2; i>=$1; i-- ));\
    \ do\n            if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n   \
    \             break\n            fi\n        done\n    fi", "    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n        if\
    \ [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n        else\n            echo\
    \ \"-1\"\n        fi\n    else\n        for i in $(seq $1 $2); do\n          \
    \  if [[ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    if\
    \ [ $x -gt $y ]; then\n        echo \"-1\"\n    elif [ $x -eq $y ]; then\n   \
    \     if [ $((x % 2)) -eq 0 ]; then\n            echo \"$x\"\n        else\n \
    \           echo \"-1\"\n        fi\n    else\n        local i=$x\n        while\
    \ [ $i -le $y ]; do\n            if [ $((i % 2)) -eq 0 ]; then\n             \
    \   echo \"$i\"\n                return\n            fi\n            i=$((i +\
    \ 1))\n        done\n        echo \"-1\"\n    fi", "    local x=$1\n    local\
    \ y=$2\n    local result=-1\n    for i in $(seq $x $y); do\n        if [ $(($i\
    \ % 2)) -eq 0 ]; then\n            result=$i\n        fi\n    done\n    echo $result",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n\
    \        if [[ $1 -eq 0 ]]; then\n            echo \"0\"\n        elif [[ $1 -eq\
    \ 1 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 2 ]]; then\n   \
    \         echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n            echo \"-1\"\
    \n        elif [[ $1 -eq 4 ]]; then\n            echo \"4\"\n        elif [[ $1\
    \ -eq 5 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 6 ]]; then\n\
    \            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n            echo \"\
    -1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo \"8\"\n        elif\
    \ [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 10 ]];\
    \ then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]]; then\n        \
    \    echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n            echo \"12\"\n\
    \        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n        elif [[\
    \ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[ $1 -eq 15 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n            echo\
    \ \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n        elif [[ $1 -eq\
    \ 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 20 ]]; then\n \
    \           echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo \"22\"\n      \
    \  elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 24 ]]; then\n            echo \"24\"\n        elif [[", "    if [[ $1 -gt $2\
    \ ]]; then\n        echo \"-1\"\n    elif [[ $1 -lt $2 ]]; then\n        if [[\
    \ $1 -eq 0 ]]; then\n            echo $1\n        elif [[ $1 -eq 1 ]]; then\n\
    \            echo $2\n        else\n            if [[ $1%2 -eq 0 ]]; then\n  \
    \              echo $1\n            else\n                echo $(( $1 + 1 ))\n\
    \            fi\n        fi\n    else\n        if [[ $1%2 -eq 0 ]]; then\n   \
    \         echo $1\n        else\n            echo \"-1\"\n        fi\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "  # TODO: implement\
    \ this function\n  # Hint: you can use the modulo operator to check if a number\
    \ is even\n  # or odd.\n  # Hint: you can use the bc command to do floating point\
    \ arithmetic.\n  # Hint: you can use the echo command to return a value.\n  #\
    \ Hint: you can use the test command to check if a number is greater\n  # than\
    \ another number.\n  # Hint: you can use the test command to check if a number\
    \ is equal\n  # to another number.\n  # Hint: you can use the test command to\
    \ check if a number is less\n  # than another number.\n  # Hint: you can use the\
    \ test command to check if a number is greater\n  # than or equal to another number.\n\
    \  # Hint: you can use the test command to check if a number is less\n  # than\
    \ or equal to another number.\n  # Hint: you can use the test command to check\
    \ if a number is not equal\n  # to another number.\n  # Hint: you can use the\
    \ test command to check if a string is equal\n  # to another string.\n  # Hint:\
    \ you can use the test command to check if a string is not equal\n  # to another\
    \ string.\n  # Hint: you can use the test command to check if a string is empty.\n\
    \  # Hint: you can use the test command to check if a string is not empty.\n \
    \ # Hint: you can use the test command to check if a file exists.\n  # Hint: you\
    \ can use the test command to check if a file does not exist.\n  # Hint: you can\
    \ use the test command to check if a file is a directory.\n  # Hint: you can use\
    \ the test command to check if a file is not a directory.\n  # Hint: you can use\
    \ the test command to check if a file is a regular file.\n  # Hint: you can use\
    \ the test command to check if a file is not a regular file.\n  # Hint: you can\
    \ use the test command to check if a file is a symbolic link.\n  # Hint: you can\
    \ use the test command to check if a file is not a symbolic link.\n  # Hint: you\
    \ can use the test command", "    # TODO: implement this function\n    # Hint:\
    \ use the modulo operator % to check if a number is even\n    # Hint: use the\
    \ bc command to perform floating point arithmetic\n    # Hint: use the echo command\
    \ to return a value\n    # Hint: use the if-then-else construct to return -1 if\
    \ there is no\n    #       even number in the range [x, y]\n    # Hint: use the\
    \ if-then-else construct to return the biggest even\n    #       number in the\
    \ range [x, y]\n    # Hint: use the if-then-else construct to return the biggest\
    \ even\n    #       number in the range [x, y]\n    # Hint: use the if-then-else\
    \ construct to return the biggest even\n    #       number in the range [x, y]\n\
    \    # Hint: use the if-then-else construct to return the biggest even\n    #\
    \       number in the range [x, y]\n    # Hint: use the if-then-else construct\
    \ to return the biggest even\n    #       number in the range [x, y]\n    # Hint:\
    \ use the if-then-else construct to return the biggest even\n    #       number\
    \ in the range [x, y]\n    # Hint: use the if-then-else construct to return the\
    \ biggest even\n    #       number in the range [x, y]\n    # Hint: use the if-then-else\
    \ construct to return the biggest even\n    #       number in the range [x, y]\n\
    \    # Hint: use the if-then-else construct to return the biggest even\n    #\
    \       number in the range [x, y]\n    # Hint: use the if-then-else construct\
    \ to return the biggest even\n    #       number in the range [x, y]\n    # Hint:\
    \ use the if-then-else construct to return the biggest even\n    #       number\
    \ in the range [x, y]\n    # Hint: use the if-then-else construct to return the\
    \ biggest even\n    #       number in the range [x, y]\n    # Hint: use the if-then-else\
    \ construct to return the biggest even\n    #       number in the range [x, y]\n\
    \    #", "    local x=$1\n    local y=$2\n    local max=$x\n    local i=0\n  \
    \  local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n   \
    \ local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local\
    \ t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n\
    \    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local\
    \ zzz=0\n    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n\
    \   ", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for\
    \ i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n       \
    \         echo $i\n                break\n            fi\n        done\n    fi",
  "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ]; then\n\
    \        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif [ $1 -eq\
    \ 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n      \
    \      echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"-1\"\n\
    \        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [ $1 -eq\
    \ 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n      \
    \      echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"-1\"\n\
    \        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [ $1 -eq\
    \ 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n     \
    \       echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"-1\"\
    \n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif [ $1\
    \ -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n\
    \            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n\
    \            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif\
    \ [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n\
    \           ", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq\
    \ $2 ]; then\n        if [ $1 -eq 0 ]; then\n            echo \"0\"\n        elif\
    \ [ $1 -eq 1 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n\
    \            echo \"2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [\
    \ $1 -eq 5 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n\
    \            echo \"6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [\
    \ $1 -eq 9 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n\
    \            echo \"10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif\
    \ [ $1 -eq 13 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n\
    \            echo \"14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif\
    \ [ $1 -eq 17 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n\
    \            echo \"18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif\
    \ [ $1 -eq 21 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n\
    \            echo \"22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif\
    \ [ $1 -eq 25 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n\
    \           ", "    # TODO: write your code here\n    #\n    # Hint: you can use\
    \ the modulo operator to check if a number is even.\n    #\n    # Hint: you can\
    \ use the following bash built-in functions:\n    #   - expr\n    #   - echo\n\
    \    #   - return\n    #\n    # Hint: you can use the following bash built-in\
    \ variables:\n    #   - $1\n    #   - $2\n    #\n    # Hint: you can use the following\
    \ bash built-in control structures:\n    #   - if\n    #   - for\n    #   - while\n\
    \    #\n    # Hint: you can use the following bash built-in arithmetic operators:\n\
    \    #   - -lt\n    #   - -gt\n    #   - -eq\n    #   - -ne\n    #   - -le\n \
    \   #   - -ge\n    #\n    # Hint: you can use the following bash built-in arithmetic\
    \ operators:\n    #   - %\n    #\n    # Hint: you can use the following bash built-in\
    \ arithmetic operators:\n    #   - expr\n    #\n    # Hint: you can use the following\
    \ bash built-in arithmetic operators:\n    #   - echo\n    #\n    # Hint: you\
    \ can use the following bash built-in arithmetic operators:\n    #   - return\n\
    \    #\n    # Hint: you can use the following bash built-in arithmetic operators:\n\
    \    #   - if\n    #\n    # Hint: you can use the following bash built-in arithmetic\
    \ operators:\n    #   - for\n    #\n    # Hint: you can use the following bash\
    \ built-in arithmetic operators:\n    #   - while\n    #\n    # Hint: you can\
    \ use the following bash built-in arithmetic operators:\n    #   - -lt\n    #\n\
    \    # Hint: you can use the following bash built-in arithmetic operators:\n \
    \   #   - -gt\n    #\n    # Hint: you can use the following bash built-in arithmetic\
    \ operators:\n    #   - -eq\n    #\n    # Hint: you can use the following bash\
    \ built-in arithmetic operators:\n    #   - -ne\n    #", "    if [ $1 -gt $2 ];\
    \ then\n        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n   \
    \         if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n           \
    \     break\n            fi\n        done\n    fi", "  # TODO: implement this\
    \ function\n  # Hint: you can use the modulo operator % to check if a number is\
    \ even\n  # or odd.\n  # Hint: you can use the bc command to perform floating\
    \ point arithmetic.\n  # For example:\n  # $ echo \"1.0 / 3.0\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1 / 3\" | bc -l\n  # 0\n  #\n  # $ echo \"1 % 3\" | bc -l\n\
    \  # 1\n  #\n  # $ echo \"1.0 % 3.0\" | bc -l\n  # 1.00000000000000000000000000000000000000000000000000000000000000\n\
    \  #\n  # $ echo \"1.0 % 3\" | bc -l\n  # 1.00000000000000000000000000000000000000000000000000000000000000\n\
    \  #\n  # $ echo \"1 % 3.0\" | bc -l\n  # 1\n  #\n  # $ echo \"1.0 / 3\" | bc\
    \ -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1 / 3.0\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1.0 / 3\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1 / 3.0\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1.0 / 3.0\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1.0 / 3\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  # $ echo \"1 / 3.0\" | bc -l\n  # 0.3333333333333333333333333333333333333333333333333333333333333333\n\
    \  #\n  #", "    # TODO: implement this function\n    # Hint: use the modulo operator\n\
    \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # Write\
    \ your code here\n    # You can use the following command to print your output:\n\
    \    # echo \"Your output\"\n    #\n    # Note: You can use the following command\
    \ to read the input:\n    # read -p \"Your prompt\" var_name\n    #\n    # Note:\
    \ You can use the following command to print your error:\n    # >&2 echo \"Your\
    \ error\"\n    #\n    # Note: You can use the following command to exit your script:\n\
    \    # exit 1\n    #\n    # Note: You can use the following command to return\
    \ your output:\n    # return \"Your output\"\n    #\n    # Note: You can use the\
    \ following command to return your error:\n    # return >&2 \"Your error\"\n \
    \   #\n    # Note: You can use the following command to return your exit code:\n\
    \    # return 1\n    #\n    # Note: You can use the following command to return\
    \ your output and exit code:\n    # return \"Your output\" 1\n    #\n    # Note:\
    \ You can use the following command to return your error and exit code:\n    #\
    \ return >&2 \"Your error\" 1\n    #\n    # Note: You can use the following command\
    \ to return your output, error and exit code:\n    # return \"Your output\" >&2\
    \ \"Your error\" 1\n    #\n    # Note: You can use the following command to return\
    \ your output, error and exit code:\n    # return \"Your output\" >&2 \"Your error\"\
    \ 1\n    #\n    # Note: You can use the following command to return your output,\
    \ error and exit code:\n    # return \"Your output\" >&2 \"Your error\" 1\n  \
    \  #\n    # Note: You can use the following command to return your output, error\
    \ and exit code:\n    # return \"Your output\" >&2 \"Your error\" 1\n    #\n \
    \   # Note: You can use the following command to return your output, error and\
    \ exit code:\n    # return \"Your output\" >&2 \"Your error\" 1\n    #\n    #\
    \ Note: You can use the following command to return your output, error and exit\
    \ code:\n    # return \"Your output\" >&2 \"Your error\" 1\n    #\n    # Note:\
    \ You can", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif [[ $1\
    \ -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"$1\"\n\
    \        else\n            echo \"-1\"\n        fi\n    else\n        for (( i=$2;\
    \ i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo\
    \ \"$i\"\n                break\n            fi\n        done\n    fi", "    if\
    \ [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        if [[ $1 -eq $2\
    \ ]]; then\n            if [[ $1 -eq 0 ]]; then\n                echo \"0\"\n\
    \            elif [[ $1 -eq 1 ]]; then\n                echo \"-1\"\n        \
    \    elif [[ $1 -eq 2 ]]; then\n                echo \"2\"\n            elif [[\
    \ $1 -eq 3 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq 4\
    \ ]]; then\n                echo \"4\"\n            elif [[ $1 -eq 5 ]]; then\n\
    \                echo \"-1\"\n            elif [[ $1 -eq 6 ]]; then\n        \
    \        echo \"6\"\n            elif [[ $1 -eq 7 ]]; then\n                echo\
    \ \"-1\"\n            elif [[ $1 -eq 8 ]]; then\n                echo \"8\"\n\
    \            elif [[ $1 -eq 9 ]]; then\n                echo \"-1\"\n        \
    \    elif [[ $1 -eq 10 ]]; then\n                echo \"10\"\n            elif\
    \ [[ $1 -eq 11 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq\
    \ 12 ]]; then\n                echo \"12\"\n            elif [[ $1 -eq 13 ]];\
    \ then\n                echo \"-1\"\n            elif [[ $1 -eq 14 ]]; then\n\
    \                echo \"14\"\n            elif [[ $1 -eq 15 ]]; then\n       \
    \         echo \"-1\"\n            elif [[ $1 -eq 16 ]]; then\n              \
    \  echo \"16\"\n            elif [[ $1 -eq 17 ]]; then\n                echo \"\
    -1\"\n            elif [[ $1 -eq 18 ]]; then\n                echo \"18\"\n  \
    \          elif [[ $1 -eq 19 ]]; then\n                echo \"-1\"\n         \
    \   elif [[ $1 -eq 20 ]]; then\n                echo \"20\"\n            elif\
    \ [[ $1 -eq 21 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq\
    \ 22 ]]; then\n                echo \"22\"\n            elif [[ $1 -eq 23 ]];\
    \ then\n                echo \"-1\"\n            elif [[ $1 -eq 24 ]]; then\n\
    \                echo \"24\"\n            el", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n          \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n            if [[\
    \ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n     \
    \       echo $i\n            return\n        fi\n    done\n    echo -1", "   \
    \ # TODO: implement this function\n    # Hint: use the modulo operator\n    #\
    \ Hint: use the if-else statement\n    # Hint: use the if-else statement\n   \
    \ # Hint: use the if-else statement\n    # Hint: use the if-else statement\n \
    \   # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement\n    # Hint: use the if-else statement\n\
    \    # Hint: use the if-else statement", "    local x=$1\n    local y=$2\n   \
    \ if [[ $x -gt $y ]]; then\n        echo -1\n    elif [[ $x -eq $y ]]; then\n\
    \        if [[ $x%2 -eq 0 ]]; then\n            echo $x\n        else\n      \
    \      echo -1\n        fi\n    else\n        local i=$x\n        local max=-1\n\
    \        while [[ $i -le $y ]]; do\n            if [[ $i%2 -eq 0 ]]; then\n  \
    \              max=$i\n            fi\n            i=$((i+1))\n        done\n\
    \        echo $max\n    fi", "    # TODO: implement this function\n    # Hint:\
    \ use the modulo operator\n    # Hint: use the if-then-else statement\n    # Hint:\
    \ use the echo command\n    # Hint: use the return command\n    # Hint: use the\
    \ bc command\n    # Hint: use the seq command\n    # Hint: use the tail command\n\
    \    # Hint: use the head command\n    # Hint: use the sort command\n    # Hint:\
    \ use the -n option of the sort command\n    # Hint: use the -r option of the\
    \ sort command\n    # Hint: use the -z option of the sort command\n    # Hint:\
    \ use the -g option of the sort command\n    # Hint: use the -n option of the\
    \ sort command\n    # Hint: use the -r option of the sort command\n    # Hint:\
    \ use the -z option of the sort command\n    # Hint: use the -g option of the\
    \ sort command\n    # Hint: use the -n option of the sort command\n    # Hint:\
    \ use the -r option of the sort command\n    # Hint: use the -z option of the\
    \ sort command\n    # Hint: use the -g option of the sort command\n    # Hint:\
    \ use the -n option of the sort command\n    # Hint: use the -r option of the\
    \ sort command\n    # Hint: use the -z option of the sort command\n    # Hint:\
    \ use the -g option of the sort command\n    # Hint: use the -n option of the\
    \ sort command\n    # Hint: use the -r option of the sort command\n    # Hint:\
    \ use the -z option of the sort command\n    # Hint: use the -g option of the\
    \ sort command\n    # Hint: use the -n option of the sort command\n    # Hint:\
    \ use the -r option of the sort command\n    # Hint: use the -z option of the\
    \ sort command\n    # Hint: use the -g option of the sort command\n    # Hint:\
    \ use the -n option of the sort command\n    # Hint: use the -r option of the\
    \ sort command\n    # Hint: use the -z option of the sort command\n    #", " \
    \   local x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [\
    \ $i -le $y ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            max=$i\n\
    \        fi\n        i=$((i + 1))\n    done\n    echo $max", "    if [ $1 -gt\
    \ $2 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ]; then\n        if [\
    \ $1 -eq 0 ]; then\n            echo \"0\"\n        elif [ $1 -eq 1 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 2 ]; then\n            echo \"\
    2\"\n        elif [ $1 -eq 3 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 4 ]; then\n            echo \"4\"\n        elif [ $1 -eq 5 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 6 ]; then\n            echo \"\
    6\"\n        elif [ $1 -eq 7 ]; then\n            echo \"-1\"\n        elif [\
    \ $1 -eq 8 ]; then\n            echo \"8\"\n        elif [ $1 -eq 9 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 10 ]; then\n            echo \"\
    10\"\n        elif [ $1 -eq 11 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 12 ]; then\n            echo \"12\"\n        elif [ $1 -eq 13 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 14 ]; then\n            echo \"\
    14\"\n        elif [ $1 -eq 15 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 16 ]; then\n            echo \"16\"\n        elif [ $1 -eq 17 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 18 ]; then\n            echo \"\
    18\"\n        elif [ $1 -eq 19 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 20 ]; then\n            echo \"20\"\n        elif [ $1 -eq 21 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 22 ]; then\n            echo \"\
    22\"\n        elif [ $1 -eq 23 ]; then\n            echo \"-1\"\n        elif\
    \ [ $1 -eq 24 ]; then\n            echo \"24\"\n        elif [ $1 -eq 25 ]; then\n\
    \            echo \"-1\"\n        elif [ $1 -eq 26 ]; then\n           ", "  \
    \  if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for (( i=$1;\
    \ i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]]; then\n             \
    \   echo \"$i\"\n                break\n            fi\n        done\n    fi",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        if [[ $1 -eq\
    \ $2 ]]; then\n            if [[ $1 -eq 0 ]]; then\n                echo \"0\"\
    \n            elif [[ $1 -eq 1 ]]; then\n                echo \"-1\"\n       \
    \     elif [[ $1 -eq 2 ]]; then\n                echo \"2\"\n            elif\
    \ [[ $1 -eq 3 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq\
    \ 4 ]]; then\n                echo \"4\"\n            elif [[ $1 -eq 5 ]]; then\n\
    \                echo \"-1\"\n            elif [[ $1 -eq 6 ]]; then\n        \
    \        echo \"6\"\n            elif [[ $1 -eq 7 ]]; then\n                echo\
    \ \"-1\"\n            elif [[ $1 -eq 8 ]]; then\n                echo \"8\"\n\
    \            elif [[ $1 -eq 9 ]]; then\n                echo \"-1\"\n        \
    \    elif [[ $1 -eq 10 ]]; then\n                echo \"10\"\n            elif\
    \ [[ $1 -eq 11 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq\
    \ 12 ]]; then\n                echo \"12\"\n            elif [[ $1 -eq 13 ]];\
    \ then\n                echo \"-1\"\n            elif [[ $1 -eq 14 ]]; then\n\
    \                echo \"14\"\n            elif [[ $1 -eq 15 ]]; then\n       \
    \         echo \"-1\"\n            elif [[ $1 -eq 16 ]]; then\n              \
    \  echo \"16\"\n            elif [[ $1 -eq 17 ]]; then\n                echo \"\
    -1\"\n            elif [[ $1 -eq 18 ]]; then\n                echo \"18\"\n  \
    \          elif [[ $1 -eq 19 ]]; then\n                echo \"-1\"\n         \
    \   elif [[ $1 -eq 20 ]]; then\n                echo \"20\"\n            elif\
    \ [[ $1 -eq 21 ]]; then\n                echo \"-1\"\n            elif [[ $1 -eq\
    \ 22 ]]; then\n                echo \"22\"\n            elif [[ $1 -eq 23 ]];\
    \ then\n                echo \"-1\"\n            elif [[ $1 -eq 24 ]]; then\n\
    \                echo \"24\"\n            el", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        for i in $(seq $1 $2); do\n          \
    \  if [[ $((i % 2)) -eq 0 ]]; then\n                echo $i\n                break\n\
    \            fi\n        done\n    fi", "    local x=$1\n    local y=$2\n    local\
    \ i\n    for ((i=x; i<=y; i++)); do\n        if ((i%2==0)); then\n           \
    \ echo $i\n            return\n        fi\n    done\n    echo -1", "    # TODO:\
    \ implement this function\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
    \   elif [ $1 -eq $2 ]; then\n        if [ $(($1 % 2)) -eq 0 ]; then\n       \
    \     echo \"$1\"\n        else\n            echo \"-1\"\n        fi\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [ $(($i % 2)) -eq 0 ]; then\n\
    \                echo \"$i\"\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ if [ $1 -eq $2 ]; then\n            if [ $1 -eq 0 ]; then\n                echo\
    \ \"0\"\n            elif [ $1 -eq 1 ]; then\n                echo \"-1\"\n  \
    \          else\n                if [ $(( $1 % 2 )) -eq 0 ]; then\n          \
    \          echo \"$1\"\n                else\n                    echo \"$(( $1\
    \ - 1 ))\"\n                fi\n            fi\n        else\n            if [\
    \ $1 -eq 0 ]; then\n                echo \"0\"\n            elif [ $1 -eq 1 ];\
    \ then\n                echo \"2\"\n            else\n                if [ $((\
    \ $1 % 2 )) -eq 0 ]; then\n                    echo \"$1\"\n                else\n\
    \                    echo \"$(( $1 + 1 ))\"\n                fi\n            fi\n\
    \        fi\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n   \
    \ elif [[ $1 -eq $2 ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo\
    \ \"0\"\n        elif [[ $1 -eq 1 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 2 ]]; then\n            echo \"2\"\n        elif [[ $1 -eq 3 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 4 ]]; then\n            echo\
    \ \"4\"\n        elif [[ $1 -eq 5 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 6 ]]; then\n            echo \"6\"\n        elif [[ $1 -eq 7 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 8 ]]; then\n            echo\
    \ \"8\"\n        elif [[ $1 -eq 9 ]]; then\n            echo \"-1\"\n        elif\
    \ [[ $1 -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $1 -eq 11 ]];\
    \ then\n            echo \"-1\"\n        elif [[ $1 -eq 12 ]]; then\n        \
    \    echo \"12\"\n        elif [[ $1 -eq 13 ]]; then\n            echo \"-1\"\n\
    \        elif [[ $1 -eq 14 ]]; then\n            echo \"14\"\n        elif [[\
    \ $1 -eq 15 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 16 ]]; then\n\
    \            echo \"16\"\n        elif [[ $1 -eq 17 ]]; then\n            echo\
    \ \"-1\"\n        elif [[ $1 -eq 18 ]]; then\n            echo \"18\"\n      \
    \  elif [[ $1 -eq 19 ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq\
    \ 20 ]]; then\n            echo \"20\"\n        elif [[ $1 -eq 21 ]]; then\n \
    \           echo \"-1\"\n        elif [[ $1 -eq 22 ]]; then\n            echo\
    \ \"22\"\n        elif [[ $1 -eq 23 ]]; then\n            echo \"-1\"\n      \
    \  elif [[ $1 -eq 24 ]]; then\n            echo \"24\"\n        elif [[", "  \
    \  if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    local\
    \ x=$1\n    local y=$2\n    local i=$x\n    local max=-1\n    while [ $i -le $y\
    \ ]; do\n        if [ $(($i % 2)) -eq 0 ]; then\n            if [ $i -gt $max\
    \ ]; then\n                max=$i\n            fi\n        fi\n        i=$(($i\
    \ + 1))\n    done\n    echo $max", "    if [ $1 -gt $2 ]; then\n        echo \"\
    -1\"\n    else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2))\
    \ -eq 0 ]; then\n                echo $i\n                break\n            fi\n\
    \        done\n    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n   \
    \ else\n        for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n       \
    \ for i in $(seq $1 $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n     \
    \           echo $i\n                break\n            fi\n        done\n   \
    \ fi"]
stop_tokens:
- "\n}"
