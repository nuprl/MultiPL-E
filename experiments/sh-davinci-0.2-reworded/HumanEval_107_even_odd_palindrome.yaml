name: HumanEval_107_even_odd_palindrome
language: sh
prompt: "#!/bin/bash\n# Given a positive integer n, return a list that has the number\
  \ of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n\
  # Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n\
  # Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
  # Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n\
  # Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and\
  \ 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number\
  \ of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome()\
  \ {\n"
tests: "}\n\ncandidate() {\n    even_odd_palindrome \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"123\") = \"8 13\" ]]\n    [[ $(candidate \"12\") = \"\
  4 6\" ]]\n    [[ $(candidate \"3\") = \"1 2\" ]]\n    [[ $(candidate \"63\") = \"\
  6 8\" ]]\n    [[ $(candidate \"25\") = \"5 6\" ]]\n    [[ $(candidate \"19\") =\
  \ \"4 6\" ]]\n    [[ $(candidate \"9\") = \"4 5\" ]]\n    [[ $(candidate \"1\")\
  \ = \"0 1\" ]]\n}\n\nrun_test"
completions: ["  local n=$1\n  local even=0\n  local odd=0\n  for ((i=1; i<=n; i++));\
    \ do\n    if [[ $i -eq $(rev $i) ]]; then\n      if [[ $((i%2)) -eq 0 ]]; then\n\
    \        even=$((even+1))\n      else\n        odd=$((odd+1))\n      fi\n    fi\n\
    \  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  local even=0\n  local odd=0\n\
    \  for (( i=1; i<=$1; i++ )); do\n    if [[ $(is_palindrome $i) -eq 1 ]]; then\n\
    \      if [[ $(is_even $i) -eq 1 ]]; then\n        even=$((even+1))\n      else\n\
    \        odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\
    \"$odd\\\"]\"", "  local -i n=$1\n  local -i even=0\n  local -i odd=0\n  local\
    \ -i i=1\n  while (( i <= n )); do\n    if (( i < 10 )); then\n      (( odd++\
    \ ))\n    elif (( i < 100 )); then\n      (( even++ ))\n    elif (( i < 1000 ));\
    \ then\n      if (( i == $(rev \"$i\") )); then\n        (( odd++ ))\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", " \
    \ local n=$1\n  local even_count=0\n  local odd_count=0\n  for ((i=1; i<=n; i++));\
    \ do\n    if [[ $i -eq $(rev_num $i) ]]; then\n      if [[ $((i%2)) -eq 0 ]];\
    \ then\n        ((even_count++))\n      else\n        ((odd_count++))\n      fi\n\
    \    fi\n  done\n  echo \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"", "  local\
    \ n=$1\n  local even_count=0\n  local odd_count=0\n  for (( i=1; i<=n; i++ ));\
    \ do\n    if [[ $(is_palindrome $i) == \"true\" ]]; then\n      if [[ $(is_even\
    \ $i) == \"true\" ]]; then\n        even_count=$((even_count+1))\n      else\n\
    \        odd_count=$((odd_count+1))\n      fi\n    fi\n  done\n  echo \"[\\\"\
    $even_count\\\", \\\"$odd_count\\\"]\"", "  local even_count=0\n  local odd_count=0\n\
    \  for (( i=1; i<=$1; i++ )); do\n    if [[ $i -eq $(rev $i) ]]; then\n      if\
    \ [[ $((i%2)) -eq 0 ]]; then\n        even_count=$((even_count+1))\n      else\n\
    \        odd_count=$((odd_count+1))\n      fi\n    fi\n  done\n  echo \"[\\\"\
    $even_count\\\", \\\"$odd_count\\\"]\"", "  local even=0\n  local odd=0\n  for\
    \ ((i=1; i<=$1; i++)); do\n    if [[ $(is_palindrome $i) == \"true\" ]]; then\n\
    \      if [[ $(is_even $i) == \"true\" ]]; then\n        ((even++))\n      else\n\
    \        ((odd++))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\
    \"]\"", "  local n=\"$1\"\n  local even=0\n  local odd=0\n  for ((i=1; i<=n; i++));\
    \ do\n    if [[ $(is_palindrome \"$i\") == \"true\" ]]; then\n      if [[ $(is_even\
    \ \"$i\") == \"true\" ]]; then\n        even=$((even+1))\n      else\n       \
    \ odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\
    \"]\"", "  local n=$1\n  local even=0\n  local odd=0\n  for ((i=1; i<=n; i++));\
    \ do\n    if [[ $(is_palindrome $i) -eq 1 ]]; then\n      if [[ $(is_even $i)\
    \ -eq 1 ]]; then\n        even=$((even+1))\n      else\n        odd=$((odd+1))\n\
    \      fi\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  local\
    \ n=$1\n  local even=0\n  local odd=0\n  for ((i=1; i<=n; i++)); do\n    if [[\
    \ $i -eq $(rev $i) ]]; then\n      if [[ $((i%2)) -eq 0 ]]; then\n        even=$((even+1))\n\
    \      else\n        odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"\
    $even\\\", \\\"$odd\\\"]\"", "  local n=$1\n  local even=0\n  local odd=0\n  local\
    \ i=1\n  while [ $i -le $n ]; do\n    if [ $((i % 2)) -eq 0 ]; then\n      even=$((even\
    \ + 1))\n    else\n      odd=$((odd + 1))\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  local n=$1\n  local even=0\n  local\
    \ odd=0\n  for (( i=1; i<=n; i++ )); do\n    if [[ $i -eq $(reverse_integer $i)\
    \ ]]; then\n      if [[ $((i%2)) -eq 0 ]]; then\n        even=$((even+1))\n  \
    \    else\n        odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\
    \", \\\"$odd\\\"]\"", "  local n=\"$1\"\n  local even_count=0\n  local odd_count=0\n\
    \  for ((i=1; i<=n; i++)); do\n    if [[ \"$(is_palindrome \"$i\")\" == \"true\"\
    \ ]]; then\n      if [[ \"$((i % 2))\" == \"0\" ]]; then\n        ((even_count++))\n\
    \      else\n        ((odd_count++))\n      fi\n    fi\n  done\n  echo \"[\\\"\
    $even_count\\\", \\\"$odd_count\\\"]\"", "  local even_count=0\n  local odd_count=0\n\
    \  for ((i=1; i<=$1; i++)); do\n    if [[ $(is_palindrome $i) -eq 1 ]]; then\n\
    \      if [[ $(is_even $i) -eq 1 ]]; then\n        even_count=$((even_count+1))\n\
    \      else\n        odd_count=$((odd_count+1))\n      fi\n    fi\n  done\n  echo\
    \ \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"", "  local n=$1\n  local even_count=0\n\
    \  local odd_count=0\n  for (( i=1; i<=n; i++ )); do\n    local num=$i\n    local\
    \ rev=0\n    while [[ $num -gt 0 ]]; do\n      local digit=$(( num % 10 ))\n \
    \     rev=$(( rev * 10 + digit ))\n      num=$(( num / 10 ))\n    done\n    if\
    \ [[ $i -eq $rev ]]; then\n      if [[ $(( i % 2 )) -eq 0 ]]; then\n        even_count=$((\
    \ even_count + 1 ))\n      else\n        odd_count=$(( odd_count + 1 ))\n    \
    \  fi\n    fi\n  done\n  echo \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"",
  "  local -i n=$1\n  local -i even=0 odd=0\n  for ((i=1; i<=n; i++)); do\n    local\
    \ -i rev=$(reverse_integer $i)\n    if [[ $i -eq $rev ]]; then\n      if [[ $((i%2))\
    \ -eq 0 ]]; then\n        ((even++))\n      else\n        ((odd++))\n      fi\n\
    \    fi\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  local n=$1\n  local\
    \ even=0\n  local odd=0\n  for ((i=1; i<=n; i++)); do\n    if [[ $i -eq $(rev_num\
    \ $i) ]]; then\n      if [[ $((i%2)) -eq 0 ]]; then\n        even=$((even+1))\n\
    \      else\n        odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"\
    $even\\\", \\\"$odd\\\"]\"", "  local n=$1\n  local even=0\n  local odd=0\n  for\
    \ ((i=1; i<=n; i++)); do\n    local rev=$(reverse $i)\n    if [ $i -eq $rev ];\
    \ then\n      if [ $((i%2)) -eq 0 ]; then\n        even=$((even+1))\n      else\n\
    \        odd=$((odd+1))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\
    \"$odd\\\"]\"", "  local n=\"$1\"\n  local even_count=0\n  local odd_count=0\n\
    \  for (( i=1; i<=n; i++ )); do\n    if [[ $i -eq $(rev \"$i\") ]]; then\n   \
    \   if [[ $((i%2)) -eq 0 ]]; then\n        even_count=$((even_count+1))\n    \
    \  else\n        odd_count=$((odd_count+1))\n      fi\n    fi\n  done\n  echo\
    \ \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"", "  local n=$1\n  local even=0\n\
    \  local odd=0\n  for (( i=1; i<=n; i++ )); do\n    if [[ $i -eq $(reverse_integer\
    \ $i) ]]; then\n      if [[ $((i%2)) -eq 0 ]]; then\n        ((even++))\n    \
    \  else\n        ((odd++))\n      fi\n    fi\n  done\n  echo \"[\\\"$even\\\"\
    , \\\"$odd\\\"]\""]
stop_tokens:
- "\n}"
