name: HumanEval_17_parse_music
language: sh
prompt: "#!/bin/bash\n# Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n# Your task is to parse this string and return list\
  \ of integers corresponding to how many beats does each\n# not last.\n# Here is\
  \ a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two\
  \ beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o|\
  \ o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"\
  ', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music()\
  \ {\n"
tests: "}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\"\
  \ ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"\
  o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .|\
  \ o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
completions: ["    local result=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n      \
    \  case ${1:$i:1} in\n            \"o\")\n                result=\"$result 4\"\
    \n                ;;\n            \"o|\")\n                result=\"$result 2\"\
    \n                ;;\n            \".|\")\n                result=\"$result 1\"\
    \n                ;;\n        esac\n    done\n    echo $result", "  # TODO: write\
    \ your code here\n  echo \"Not implemented yet\"", "    # TODO: implement this\
    \ function\n    # Hint: use sed and tr\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | tr ' ' '\\n'", "    # TODO: implement this function\n \
    \   echo \"\\\"4\\\" \\\"2\\\" \\\"1\\\" \\\"2\\\" \\\"2\\\" \\\"1\\\" \\\"1\\\
    \" \\\"1\\\" \\\"1\\\" \\\"4\\\" \\\"4\\\"\"", "    # TODO: implement this function\n\
    \    # Hint: use awk\n    echo \"Not implemented\"", "    # Your code here\n \
    \   # echo \"Your code here\"\n    # echo $1\n    # echo $1 | sed 's/o/4/g' |\
    \ sed 's/o|/2/g' | sed 's/.|/1/g' | sed 's/ /,/g'\n    echo $1 | sed 's/o/4/g'\
    \ | sed 's/o|/2/g' | sed 's/.|/1/g' | sed 's/ /,/g' | sed 's/,/\", \"/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'", "  # TODO: implement this function\n  echo \"Not\
    \ implemented yet\"", "    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'", "    # TODO: Your code here\n\
    \    echo \"Not implemented\"", "    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/ /,/g'", "  # TODO: implement this function\n  echo\
    \ $1 | tr ' ' '\\n' | awk '{\n    if ($1 == \"o\") {\n      print \"\\\"4\\\"\"\
    \n    } else if ($1 == \"o|\") {\n      print \"\\\"2\\\"\"\n    } else if ($1\
    \ == \".|\") {\n      print \"\\\"1\\\"\"\n    }\n  }'", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "    local music_string=$1\n \
    \   local beats=()\n    local beat=0\n    local i=0\n    local len=${#music_string}\n\
    \    while [ $i -lt $len ]; do\n        case ${music_string:$i:1} in\n       \
    \     o)\n                beat=4\n                ;;\n            o|)\n      \
    \          beat=2\n                ;;\n            .|)\n                beat=1\n\
    \                ;;\n            *)\n                echo \"Invalid input\"\n\
    \                exit 1\n                ;;\n        esac\n        beats+=($beat)\n\
    \        i=$((i+2))\n    done\n    echo ${beats[@]}", "  echo $1 | sed -e 's/o/4/g'\
    \ -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'",
  "    # TODO: Write your code here\n    # Hint: You can use awk to parse the string\n\
    \    echo $1 | awk '{for(i=1;i<=NF;i++) {if($i==\"o\") {print \"4\"} else if($i==\"\
    o|\") {print \"2\"} else if($i==\".|\") {print \"1\"}}}'", "    # TODO: implement\
    \ this function\n    echo \"Not implemented\"", "  echo $1 | sed 's/o/4/g' | sed\
    \ 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'", "    # TODO: implement this\
    \ function\n    # Hint: use sed\n    echo \"$1\" | sed -r 's/o/4/g' | sed -r 's/o\\\
    |/2/g' | sed -r 's/\\.\\|/1/g'", "    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g'\
    \ -e 's/\\.|/1/g' -e 's/ /,/g'", "    # TODO: implement this function\n    # Hint:\
    \ use sed\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'"]
stop_tokens:
- "\n}"
