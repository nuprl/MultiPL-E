language: sh
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local result=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n\
    \        case ${1:$i:1} in\n            \"o\")\n                result=\"$result\
    \ 4\"\n                ;;\n            \"o|\")\n                result=\"$result\
    \ 2\"\n                ;;\n            \".|\")\n                result=\"$result\
    \ 1\"\n                ;;\n        esac\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: write your code here\n  echo \"Not implemented yet\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed and\
    \ tr\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | tr ' '\
    \ '\\n'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"\\\"4\\\" \\\"\
    2\\\" \\\"1\\\" \\\"2\\\" \\\"2\\\" \\\"1\\\" \\\"1\\\" \\\"1\\\" \\\"1\\\" \\\
    \"4\\\" \\\"4\\\"\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk\n  \
    \  echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Your code here\n    # echo \"Your code here\"\n    # echo\
    \ $1\n    # echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g' | sed 's/\
    \ /,/g'\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g' | sed 's/\
    \ /,/g' | sed 's/,/\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo \"Not implemented yet\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Your code here\n    echo \"Not implemented\"\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo $1 | tr ' ' '\\n' |\
    \ awk '{\n    if ($1 == \"o\") {\n      print \"\\\"4\\\"\"\n    } else if ($1\
    \ == \"o|\") {\n      print \"\\\"2\\\"\"\n    } else if ($1 == \".|\") {\n  \
    \    print \"\\\"1\\\"\"\n    }\n  }'\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local beats=()\n    local beat=0\n\
    \    local i=0\n    local len=${#music_string}\n    while [ $i -lt $len ]; do\n\
    \        case ${music_string:$i:1} in\n            o)\n                beat=4\n\
    \                ;;\n            o|)\n                beat=2\n               \
    \ ;;\n            .|)\n                beat=1\n                ;;\n          \
    \  *)\n                echo \"Invalid input\"\n                exit 1\n      \
    \          ;;\n        esac\n        beats+=($beat)\n        i=$((i+2))\n    done\n\
    \    echo ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl9a60nx5.sh: line 24: syntax error near unexpected token `)''

    /tmp/tmpl9a60nx5.sh: line 24: `            o|)''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Write your code here\n    # Hint: You can use awk\
    \ to parse the string\n    echo $1 | awk '{for(i=1;i<=NF;i++) {if($i==\"o\") {print\
    \ \"4\"} else if($i==\"o|\") {print \"2\"} else if($i==\".|\") {print \"1\"}}}'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo \"$1\" | sed -r 's/o/4/g' | sed -r 's/o\\|/2/g' | sed -r 's/\\.\\|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed\n  # Hint:\
    \ use echo\n  # Hint: use tr\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint:\
    \ use sed\n  # Hint: use\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp07dus3mn.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmp07dus3mn.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Write your code here\n    # You can use echo to return\
    \ a string\n    # You can use echo to return a string\n    # You can use echo\
    \ to return a string\n    # You can use echo to return a string\n    # You can\
    \ use echo to return a string\n    # You can use echo to return a string\n   \
    \ # You can use echo to return a string\n    # You can use echo to return a string\n\
    \    # You can use echo to return a string\n    # You can use echo to return a\
    \ string\n    # You can use echo to return a string\n    # You can use echo to\
    \ return a string\n    # You can use echo to return a string\n    # You can use\
    \ echo to return a string\n    # You can use echo to return a string\n    # You\
    \ can use echo to return a string\n    # You can use echo to return a string\n\
    \    # You can use echo to return a string\n    # You can use echo to return a\
    \ string\n    # You can use echo to return a string\n    # You can use echo to\
    \ return a string\n    # You can use echo to return a string\n    # You can use\
    \ echo to return a string\n    # You can use echo to return a string\n    # You\
    \ can use echo to return a string\n    # You can use echo to return a string\n\
    \    # You can use echo to return a string\n    # You can use echo to return a\
    \ string\n    # You can use echo to return a string\n    # You can use echo to\
    \ return a string\n    # You can use echo to return a string\n    # You can use\
    \ echo to return a string\n    # You can use echo to return a string\n    # You\
    \ can use echo to return a string\n    # You can use echo to return a string\n\
    \    # You can use echo to return a string\n    # You can use echo to return a\
    \ string\n    # You can use echo to return a string\n    # You can use echo to\
    \ return a string\n    # You can use echo to return a string\n    # You can use\
    \ echo to return a string\n    # You can use echo to return a string\n    # You\
    \ can use echo to return a string\n    # You can use echo to return a string\n\
    \    # You can use echo to return a string\n    # You can use echo to return a\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrhwbgsa.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpnrhwbgsa.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/\\s/\\n/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # HINT: use sed\n  \
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n  # Hint:\
    \ use cut\n  # Hint: use sort\n  # Hint: use uniq\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use echo\n  # Hint: use grep\n  # Hint: use wc\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmp6g0mlq.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmpmp6g0mlq.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E\
    \ 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed to replace\
    \ all o| with 2, .| with 1, o with 4\n  # Then use tr to replace all spaces with\
    \ commas\n  # Then use sed to remove all the newlines\n  # Then use sed to remove\
    \ all the commas at the end of the string\n  # Then use sed to remove all the\
    \ commas at the beginning of the string\n  # Then use sed to replace all the commas\
    \ with spaces\n  # Then use sed to add double quotes around each number\n  # Then\
    \ use sed to add square brackets at the beginning and end of the string\n  # Then\
    \ use sed to replace all the newlines with spaces\n  # Then use sed to remove\
    \ all the spaces at the end of the string\n  # Then use sed to remove all the\
    \ spaces at the beginning of the string\n  # Then use sed to replace all the spaces\
    \ with commas\n  # Then use sed to remove all the newlines\n  # Then use sed to\
    \ remove all the commas at the end of the string\n  # Then use sed to remove all\
    \ the commas at the beginning of the string\n  # Then use sed to replace all the\
    \ commas with spaces\n  # Then use sed to add double quotes around each number\n\
    \  # Then use sed to add square brackets at the beginning and end of the string\n\
    \  # Then use sed to replace all the newlines with spaces\n  # Then use sed to\
    \ remove all the spaces at the end of the string\n  # Then use sed to remove all\
    \ the spaces at the beginning of the string\n  # Then use sed to replace all the\
    \ spaces with commas\n  # Then use sed to remove all the newlines\n  # Then use\
    \ sed to remove all the commas at the end of the string\n  # Then use sed to remove\
    \ all the commas at the beginning of the string\n  # Then use sed to replace all\
    \ the commas with spaces\n  # Then use sed to add double quotes around each number\n\
    \  # Then use sed to add square brackets at the beginning and end of the string\n\
    \  # Then use sed to replace all the newlines with spaces\n  # Then use sed to\
    \ remove all the spaces at the end of the string\n  # Then use sed to remove all\
    \ the spaces at the beginning of the string\n  # Then use sed to replace all the\
    \ spaces with commas\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4rnho9xo.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp4rnho9xo.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    # Hint: use awk\n  \
    \  echo $1 | awk '{\n        for (i = 1; i <= NF; i++) {\n            if ($i ==\
    \ \"o\") {\n                print \"\\\"4\\\"\"\n            } else if ($i ==\
    \ \"o|\") {\n                print \"\\\"2\\\"\"\n            } else if ($i ==\
    \ \".|\") {\n                print \"\\\"1\\\"\"\n            }\n        }\n \
    \   }'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  # Hint: use echo\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use\
    \ sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint:\
    \ use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n   \
    \ # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n\
    \    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use\
    \ sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint:\
    \ use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n   \
    \ # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n\
    \    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use\
    \ sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint:\
    \ use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n   \
    \ # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n\
    \    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use\
    \ sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint:\
    \ use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n   \
    \ # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n    # Hint: use sed\n\
    \    # Hint: use sed\n    # Hint: use\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ms44v25.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmp9ms44v25.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g'\
    \ -e 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Your code here\n    echo $1 | tr ' ' '\\n' | awk '{if ($1\
    \ == \"o\") print \"4\"; else if ($1 == \"o|\") print \"2\"; else if ($1 == \"\
    .|\") print \"1\";}'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed and tr to\
    \ replace all characters with spaces\n  # Hint: use sed to replace all 'o' with\
    \ '4'\n  # Hint: use sed to replace all 'o|' with '2'\n  # Hint: use sed to replace\
    \ all '.|' with '1'\n  # Hint: use sed to replace all '|' with ''\n  # Hint: use\
    \ tr to replace all spaces with ','\n  # Hint: use sed to replace all ',' with\
    \ ', '\n  # Hint: use sed to replace all ' ,' with ','\n  # Hint: use sed to replace\
    \ all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint:\
    \ use sed to replace all ' , ' with ', '\n  # Hint: use sed to replace all ' ,\
    \ ' with ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint: use\
    \ sed to replace all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with\
    \ ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint: use sed to\
    \ replace all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with ',\
    \ '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint: use sed to replace\
    \ all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint:\
    \ use sed to replace all ' , ' with ', '\n  # Hint: use sed to replace all ' ,\
    \ ' with ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint: use\
    \ sed to replace all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with\
    \ ', '\n  # Hint: use sed to replace all ' , ' with ', '\n  # Hint: use sed to\
    \ replace all ' , ' with ', '\n  # Hint: use sed to replace all ' , ' with ',\
    \ '\n  # Hint: use sed to replace all\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp508xm4wn.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp508xm4wn.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a notes\n    local -a beats\n    local -i i=0\n  \
    \  local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local\
    \ -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n\
    \    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n\
    \    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local -i o\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music=$1\n  local beats=()\n  local beat=0\n  local i=0\n\
    \  while [ $i -lt ${#music} ]; do\n    case ${music:$i:1} in\n      o)\n     \
    \   beat=4\n        ;;\n      o|)\n        beat=2\n        ;;\n      .|)\n   \
    \     beat=1\n        ;;\n      *)\n        echo \"Invalid music string\"\n  \
    \      return 1\n        ;;\n    esac\n    beats+=($beat)\n    i=$((i+1))\n  done\n\
    \  echo ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4lp3oied.sh: line 23: syntax error near unexpected token `)''

    /tmp/tmp4lp3oied.sh: line 23: `      o|)''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed and\
    \ tr\n    # Hint: use echo to return a string\n    # Hint: use echo -n to return\
    \ a string without newline\n    # Hint: use tr -d to remove characters\n    #\
    \ Hint: use tr -s to replace multiple characters with one\n    # Hint: use tr\
    \ -c to keep only certain characters\n    # Hint: use tr 'o' '4' to replace o\
    \ with 4\n    # Hint: use tr 'o|' '2' to replace o| with 2\n    # Hint: use tr\
    \ '.|' '1' to replace .| with 1\n    # Hint: use sed 's/^/\\\"/' to add \" at\
    \ the beginning of each line\n    # Hint: use sed 's/$/\\\"/' to add \" at the\
    \ end of each line\n    # Hint: use sed 's/^/\\\"/' to add \" at the beginning\
    \ of each line\n    # Hint: use sed 's/$/\\\"/' to add \" at the end of each line\n\
    \    # Hint: use sed 's/^/\\\"/' to add \" at the beginning of each line\n   \
    \ # Hint: use sed 's/$/\\\"/' to add \" at the end of each line\n    # Hint: use\
    \ sed 's/^/\\\"/' to add \" at the beginning of each line\n    # Hint: use sed\
    \ 's/$/\\\"/' to add \" at the end of each line\n    # Hint: use sed 's/^/\\\"\
    /' to add \" at the beginning of each line\n    # Hint: use sed 's/$/\\\"/' to\
    \ add \" at the end of each line\n    # Hint: use sed 's/^/\\\"/' to add \" at\
    \ the beginning of each line\n    # Hint: use sed 's/$/\\\"/' to add \" at the\
    \ end of each line\n    # Hint: use sed 's/^/\\\"/' to add \" at the beginning\
    \ of each line\n    # Hint: use sed 's/$/\\\"/' to add \" at the end of each line\n\
    \    # Hint: use sed 's/^/\\\"/' to\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpuscc5imv.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpuscc5imv.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo \"Not implemented yet\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e\
    \ 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: Implement this function.\n  # Hint: You will need to\
    \ use a loop.\n  # Hint: You can use the following syntax to append to a list:\n\
    \  # list=\"${list[@]} $value\"\n  # Hint: You can use the following syntax to\
    \ get the length of an array:\n  # ${#array[@]}\n  # Hint: You can use the following\
    \ syntax to get the last element of an array:\n  # ${array[-1]}\n  # Hint: You\
    \ can use the following syntax to get the last character of a string:\n  # ${string:\
    \ -1}\n  # Hint: You can use the following syntax to get the first character of\
    \ a string:\n  # ${string:0:1}\n  # Hint: You can use the following syntax to\
    \ get a substring of a string:\n  # ${string:start:length}\n  # Hint: You can\
    \ use the following syntax to remove the last character of a string:\n  # string=${string:0:-1}\n\
    \  # Hint: You can use the following syntax to remove the first character of a\
    \ string:\n  # string=${string:1}\n  # Hint: You can use the following syntax\
    \ to remove a substring of a string:\n  # string=${string:0:start}${string:start+length}\n\
    \  # Hint: You can use the following syntax to get the length of a string:\n \
    \ # ${#string}\n  # Hint: You can use the following syntax to convert a string\
    \ to an integer:\n  # $((string))\n  # Hint: You can use the following syntax\
    \ to convert an integer to a string:\n  # $((integer))\n  # Hint: You can use\
    \ the following syntax to get the last character of a string:\n  # ${string: -1}\n\
    \  # Hint: You can use the following syntax to get the first character of a string:\n\
    \  # ${string:0:1}\n  # Hint: You can use the following syntax to get a substring\
    \ of a string:\n  # ${string:start:length}\n  # Hint: You can use the following\
    \ syntax to remove the last character of a string:\n  # string=${string:\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptoy7heqb.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmptoy7heqb.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed to replace\
    \ all o| with 2, .| with 1 and o with 4\n    # Hint: use sed to replace all o|\
    \ with 2, .| with 1 and o with 4\n    echo $1 | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/o/4/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed to replace\
    \ the characters with the number of beats\n    # Hint: use tr to remove the '|'\
    \ characters\n    # Hint: use sed to remove the '.' characters\n    # Hint: use\
    \ sed to remove the 'o' characters\n    # Hint: use sed to remove the ' ' characters\n\
    \    # Hint: use sed to remove the '\"' characters\n    # Hint: use sed to remove\
    \ the '[' characters\n    # Hint: use sed to remove the ']' characters\n    #\
    \ Hint: use sed to remove the ',' characters\n    # Hint: use sed to remove the\
    \ '\\n' characters\n    # Hint: use sed to remove the '\\t' characters\n    #\
    \ Hint: use sed to remove the '\\r' characters\n    # Hint: use sed to remove\
    \ the '\\v' characters\n    # Hint: use sed to remove the '\\f' characters\n \
    \   # Hint: use sed to remove the '\\\\' characters\n    # Hint: use sed to remove\
    \ the '\\'' characters\n    # Hint: use sed to remove the '\\`' characters\n \
    \   # Hint: use sed to remove the '\\$' characters\n    # Hint: use sed to remove\
    \ the '\\*' characters\n    # Hint: use sed to remove the '\\^' characters\n \
    \   # Hint: use sed to remove the '\\&' characters\n    # Hint: use sed to remove\
    \ the '\\(' characters\n    # Hint: use sed to remove the '\\)' characters\n \
    \   # Hint: use sed to remove the '\\+' characters\n    # Hint: use sed to remove\
    \ the '\\=' characters\n    # Hint: use sed to remove the '\\[' characters\n \
    \   # Hint: use sed to remove the '\\]' characters\n    # Hint: use sed to remove\
    \ the '\\{' characters\n    # Hint: use sed to remove the '\\}' characters\n \
    \   # Hint: use sed to remove the '\\|' characters\n    # Hint: use sed to remove\
    \ the '\\:' characters\n    # Hint: use sed to remove the '\\;' characters\n \
    \   # Hint: use sed to remove the '\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp23649o_4.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp23649o_4.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed to replace\
    \ all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with\
    \ 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with\
    \ 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n\
    \  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use\
    \ sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace\
    \ all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with\
    \ 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with\
    \ 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n\
    \  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use\
    \ sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace\
    \ all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with\
    \ 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with\
    \ 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n\
    \  # Hint: use sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use\
    \ sed to replace all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace\
    \ all o| with 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with\
    \ 2, .| with 1, o with 4\n  # Hint: use sed to replace all o| with 2, .| with\
    \ 1, o with\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo5h6q8jt.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpo5h6q8jt.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g' | tr -d '\\n'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo $1 | sed -e 's/o/4/g'\
    \ -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use 'echo' to return\
    \ a value\n  # Hint: use 'sed' to replace characters\n  # Hint: use 'tr' to split\
    \ string into array\n  # Hint: use 'for' to iterate over array\n  # Hint: use\
    \ 'echo' to print array\n  # Hint: use 'printf' to format output\n  # Hint: use\
    \ 'eval' to execute command\n  # Hint: use 'echo' to return a value\n  # Hint:\
    \ use 'sed' to replace characters\n  # Hint: use 'tr' to split string into array\n\
    \  # Hint: use 'for' to iterate over array\n  # Hint: use 'echo' to print array\n\
    \  # Hint: use 'printf' to format output\n  # Hint: use 'eval' to execute command\n\
    \  # Hint: use 'echo' to return a value\n  # Hint: use 'sed' to replace characters\n\
    \  # Hint: use 'tr' to split string into array\n  # Hint: use 'for' to iterate\
    \ over array\n  # Hint: use 'echo' to print array\n  # Hint: use 'printf' to format\
    \ output\n  # Hint: use 'eval' to execute command\n  # Hint: use 'echo' to return\
    \ a value\n  # Hint: use 'sed' to replace characters\n  # Hint: use 'tr' to split\
    \ string into array\n  # Hint: use 'for' to iterate over array\n  # Hint: use\
    \ 'echo' to print array\n  # Hint: use 'printf' to format output\n  # Hint: use\
    \ 'eval' to execute command\n  # Hint: use 'echo' to return a value\n  # Hint:\
    \ use 'sed' to replace characters\n  # Hint: use 'tr' to split string into array\n\
    \  # Hint: use 'for' to iterate over array\n  # Hint: use 'echo' to print array\n\
    \  # Hint: use 'printf' to format output\n  # Hint: use 'eval' to execute command\n\
    \  # Hint: use 'echo' to return a value\n  # Hint: use 'sed\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgdi8q46_.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpgdi8q46_.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    # Hint: use bash parameter\
    \ expansion\n    # http://tldp.org/LDP/abs/html/parameter-substitution.html\n\
    \    # http://tldp.org/LDP/abs/html/string-manipulation.html\n    # http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # http://tldp.org/LDP/abs/html/quotingvar.html\n    # http://tldp.org/LDP/abs/html/dblquote.html\n\
    \    # http://tldp.org/LDP/abs/html/here-docs.html\n    # http://tldp.org/LDP/abs/html/process-sub.html\n\
    \    # http://tldp.org/LDP/abs/html/quotingvar.html\n    # http://tldp.org/LDP/abs/html/dblquote.html\n\
    \    # http://tldp.org/LDP/abs/html/here-docs.html\n    # http://tldp.org/LDP/abs/html/process-sub.html\n\
    \    # http://tldp.org/LDP/abs/html/quotingvar.html\n    # http://tldp.org/LDP/abs/html/dblquote.html\n\
    \    # http://tldp.org/LDP/abs/html/here-docs.html\n    # http://tldp.org/LDP/abs/html/process-sub.html\n\
    \    # http://tldp.org/LDP/abs/html/quotingvar.html\n    # http://tldp.org/LDP/abs/html/dblquote.html\n\
    \    # http://tldp.org/LDP/abs/html/here-docs.html\n    # http://tldp.org/LDP/abs/html/process-sub.html\n\
    \    # http://tldp.org/LDP/abs/html/quotingvar.html\n    # http://tldp.org/LDP/abs/html/dblquote.html\n\
    \    # http://t\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbyyb3oe7.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpbyyb3oe7.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Write your code here\n    echo \"Not implemented\"\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: Implement this function\n  echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music=$1\n    local beats=()\n    local note=''\n \
    \   local beat=''\n    local i=0\n    local j=0\n    local len=${#music}\n   \
    \ while [ $i -lt $len ]; do\n        note=${music:$i:1}\n        if [ \"$note\"\
    \ == \"o\" ]; then\n            beat=4\n        elif [ \"$note\" == \".\" ]; then\n\
    \            beat=1\n        else\n            beat=2\n        fi\n        beats[$j]=$beat\n\
    \        i=$((i+2))\n        j=$((j+1))\n    done\n    echo ${beats[@]}\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed and echo\n\
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: you can use\
    \ 'echo' and 'sed' to parse the string\n    # Hint: you can use 'echo' and 'sed'\
    \ to parse the string\n    # Hint: you can use 'echo' and 'sed' to parse the string\n\
    \    # Hint: you can use 'echo' and 'sed' to parse the string\n    # Hint: you\
    \ can use 'echo' and 'sed' to parse the string\n    # Hint: you can use 'echo'\
    \ and 'sed' to parse the string\n    # Hint: you can use 'echo' and 'sed' to parse\
    \ the string\n    # Hint: you can use 'echo' and 'sed' to parse the string\n \
    \   # Hint: you can use 'echo' and 'sed' to parse the string\n    # Hint: you\
    \ can use 'echo' and 'sed' to parse the string\n    # Hint: you can use 'echo'\
    \ and 'sed' to parse the string\n    # Hint: you can use 'echo' and 'sed' to parse\
    \ the string\n    # Hint: you can use 'echo' and 'sed' to parse the string\n \
    \   # Hint: you can use 'echo' and 'sed' to parse the string\n    # Hint: you\
    \ can use 'echo' and 'sed' to parse the string\n    # Hint: you can use 'echo'\
    \ and 'sed' to parse the string\n    # Hint: you can use 'echo' and 'sed' to parse\
    \ the string\n    # Hint: you can use 'echo' and 'sed' to parse the string\n \
    \   # Hint: you can use 'echo' and 'sed' to parse the string\n    # Hint: you\
    \ can use 'echo' and 'sed' to parse the string\n    # Hint: you can use 'echo'\
    \ and 'sed' to parse the string\n    # Hint: you can use 'echo' and 'sed' to parse\
    \ the string\n    # Hint: you can use 'echo' and 'sed' to parse the string\n \
    \   # Hint: you can use 'echo' and 'sed' to parse the string\n    # Hint: you\
    \ can use 'echo' and 'sed' to parse the string\n    #\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgv620rjf.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpgv620rjf.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | tr '\\n' ' ' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E 's/\\.\\|/1/g' |\
    \ sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local -a notes=($(echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \  echo \"${notes[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a result\n    local -a notes=($(echo \"$1\" | sed\
    \ 's/o|/o/g'))\n    local -a durations=($(echo \"$1\" | sed 's/o/o|/g'))\n   \
    \ local -a beats=($(echo \"$1\" | sed 's/o/4/g;s/o|/2/g;s/\\.|/1/g'))\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music=\"$1\"\n    local beats=()\n    local beat=0\n\
    \    local note=0\n    local i=0\n    local len=${#music}\n    while [ $i -lt\
    \ $len ]; do\n        if [ \"${music:$i:1}\" == \"o\" ]; then\n            beat=4\n\
    \            if [ \"${music:$((i+1)):1}\" == \"|\" ]; then\n                beat=2\n\
    \                i=$((i+1))\n            fi\n        elif [ \"${music:$i:1}\"\
    \ == \".\" ]; then\n            beat=1\n        fi\n        beats[$note]=$beat\n\
    \        note=$((note+1))\n        i=$((i+1))\n    done\n    echo \"${beats[@]}\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # Write your code here\n  echo \"$1\" | sed -e 's/o/4/g' -e\
    \ 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"$1\" | sed -e\
    \ 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n\t# Your code here\n\t#echo $1\n\t#echo $1 | sed 's/o/4/g' |\
    \ sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\techo $1 | sed 's/o/4/g'\
    \ | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/,/\", \"/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music=\"$1\"\n    local beats=()\n    local note=''\n\
    \    local i=0\n    for ((i=0; i<${#music}; i++)); do\n        note=\"${music:$i:1}\"\
    \n        if [[ $note == 'o' ]]; then\n            beats+=('\"4\"')\n        elif\
    \ [[ $note == '.' ]]; then\n            beats+=('\"1\"')\n        elif [[ $note\
    \ == '|' ]]; then\n            beats+=('\"2\"')\n        fi\n    done\n    echo\
    \ \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Write your code here\n    # You may use echo command to\
    \ return a string\n    # Example: echo \"4 2 1 2 2 1 1 1 1 4 4\"\n    echo \"\
    4 2 1 2 2 1 1 1 1 4 4\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music=\"$1\"\n  local beats=()\n  local beat=0\n  local\
    \ note=''\n  local length=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk\n  \
    \  echo $1 | awk '{for(i=1;i<=NF;i++) {if($i==\"o\") print \"4\"; else if($i==\"\
    o|\") print \"2\"; else if($i==\".|\") print \"1\"}}'\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: Your code here\n  # Hint: You can use 'echo' to print\
    \ to stdout\n  # echo \"4 2 1 2 2 1 1 1 1 4 4\"\n  echo $1 | sed -e 's/o/4/g'\
    \ -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # HINT: use sed to replace\
    \ all characters with spaces\n  # HINT: use tr to replace all spaces with commas\n\
    \  # HINT: use tr to replace all 'o' with '4'\n  # HINT: use tr to replace all\
    \ 'o|' with '2'\n  # HINT: use tr to replace all '.|' with '1'\n  # HINT: use\
    \ tr to remove all '|'\n  # HINT: use tr to remove all '.'\n  # HINT: use tr to\
    \ remove all ' '\n  # HINT: use tr to replace all ',' with ' '\n  # HINT: use\
    \ tr to replace all '\\n' with ' '\n  # HINT: use tr to replace all '\"' with\
    \ ' '\n  # HINT: use tr to remove all ' '\n  # HINT: use tr to replace all ','\
    \ with ' '\n  # HINT: use tr to replace all '\\n' with ' '\n  # HINT: use tr to\
    \ replace all '\"' with ' '\n  # HINT: use tr to remove all ' '\n  # HINT: use\
    \ tr to replace all ',' with ' '\n  # HINT: use tr to replace all '\\n' with '\
    \ '\n  # HINT: use tr to replace all '\"' with ' '\n  # HINT: use tr to remove\
    \ all ' '\n  # HINT: use tr to replace all ',' with ' '\n  # HINT: use tr to replace\
    \ all '\\n' with ' '\n  # HINT: use tr to replace all '\"' with ' '\n  # HINT:\
    \ use tr to remove all ' '\n  # HINT: use tr to replace all ',' with ' '\n  #\
    \ HINT: use tr to replace all '\\n' with ' '\n  # HINT: use tr to replace all\
    \ '\"' with ' '\n  # HINT: use tr to remove all ' '\n  # HINT: use tr to replace\
    \ all ',' with ' '\n  # HINT: use tr to replace all '\\n' with ' '\n  # HINT:\
    \ use tr to replace all '\"' with ' '\n  # HINT: use tr to remove all ' '\n\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx1sq6c3p.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpx1sq6c3p.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed, tr, and\
    \ grep\n  # Hint: use echo to return a string\n  # Hint: use echo -n to return\
    \ a string without a newline\n  # Hint: use tr -d to remove characters from a\
    \ string\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\\\"/' -e 's/$/\\\"/' to surround a string\
    \ with quotes\n  # Hint: use sed -e 's/^/\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ee9dtww.sh: line 33: syntax error near unexpected token `}''

    /tmp/tmp6ee9dtww.sh: line 33: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music_string=$1\n  local music_array=($(echo $music_string\
    \ | tr \" \" \"\\n\"))\n  local music_array_length=${#music_array[@]}\n  local\
    \ music_array_index=0\n  local music_array_value=0\n  local music_array_result=()\n\
    \  while [ $music_array_index -lt $music_array_length ]; do\n    music_array_value=${music_array[$music_array_index]}\n\
    \    if [ \"$music_array_value\" == \"o\" ]; then\n      music_array_result+=(4)\n\
    \    elif [ \"$music_array_value\" == \"o|\" ]; then\n      music_array_result+=(2)\n\
    \    elif [ \"$music_array_value\" == \".|\" ]; then\n      music_array_result+=(1)\n\
    \    fi\n    music_array_index=$((music_array_index+1))\n  done\n  echo ${music_array_result[@]}\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk\n  \
    \  # Hint: use echo\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use\
    \ grep\n    # Hint: use wc\n    # Hint: use sort\n    # Hint: use uniq\n    #\
    \ Hint: use cut\n    # Hint: use paste\n    # Hint: use tr\n    # Hint: use sed\n\
    \    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use\
    \ sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint:\
    \ use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    #\
    \ Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n\
    \    # Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use\
    \ tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint:\
    \ use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    #\
    \ Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n\
    \    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use\
    \ sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    # Hint:\
    \ use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n    #\
    \ Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use tr\n\
    \    # Hint: use sed\n    # Hint: use tr\n    # Hint: use sed\n    # Hint: use\
    \ tr\n    # Hint: use sed\n    # H\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpho72atxc.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpho72atxc.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed and\
    \ tr\n    # Hint: use echo to return the result\n    echo $1 | sed 's/o/4/g' |\
    \ sed 's/o|/2/g' | sed 's/\\.|/1/g' | tr ' ' '\\n'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music=\"$1\"\n    local beats=()\n    local beat=0\n\
    \    for (( i=0; i<${#music}; i++ )); do\n        case \"${music:$i:1}\" in\n\
    \            'o')\n                beat=4\n                ;;\n            'o|')\n\
    \                beat=2\n                ;;\n            '.|')\n             \
    \   beat=1\n                ;;\n            ' ')\n                beats+=(\"$beat\"\
    )\n                beat=0\n                ;;\n        esac\n    done\n    beats+=(\"\
    $beat\")\n    echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local notes=$1\n    local beats=()\n    local note\n    local\
    \ beat\n    for note in $notes; do\n        case $note in\n            \"o\")\n\
    \                beat=4\n                ;;\n            \"o|\")\n           \
    \     beat=2\n                ;;\n            \".|\")\n                beat=1\n\
    \                ;;\n        esac\n        beats+=($beat)\n    done\n    echo\
    \ ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a notes=($(echo $1 | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \    echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # HINT: use awk\n  \
    \  echo $1 | awk '{\n        for (i = 1; i <= NF; i++) {\n            if ($i ==\
    \ \"o\") {\n                print \"\\\"4\\\"\"\n            } else if ($i ==\
    \ \"o|\") {\n                print \"\\\"2\\\"\"\n            } else if ($i ==\
    \ \".|\") {\n                print \"\\\"1\\\"\"\n            }\n        }\n \
    \   }'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/\\(.\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n\t# TODO: implement this function\n\t# Hint: use sed, tr, and\
    \ grep\n\t# Hint: use echo to return a string\n\t# Hint: use $1 to access the\
    \ input string\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the echo keyword to print to stdout\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\t# Hint: use the return keyword to return a value\n\t# Hint:\
    \ use the return keyword to return a value\n\t# Hint: use the return keyword to\
    \ return a value\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaojgckgy.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpaojgckgy.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: you can use\
    \ awk to split string into array\n    # Hint: you can use echo to print to stdout\n\
    \    # Hint: you can use bash array manipulation to convert array of strings to\
    \ array of integers\n    # Hint: you can use tr to remove newlines\n    # Hint:\
    \ you can use printf to format output\n    # Hint: you can use paste to join array\
    \ elements with newlines\n    # Hint: you can use sed to remove trailing newline\n\
    \    # Hint: you can use echo -n to print without newline\n    # Hint: you can\
    \ use echo -e to interpret backslash escapes\n    # Hint: you can use echo -e\
    \ to print special characters\n    # Hint: you can use echo -e to print special\
    \ characters\n    # Hint: you can use echo -e to print special characters\n  \
    \  # Hint: you can use echo -e to print special characters\n    # Hint: you can\
    \ use echo -e to print special characters\n    # Hint: you can use echo -e to\
    \ print special characters\n    # Hint: you can use echo -e to print special characters\n\
    \    # Hint: you can use echo -e to print special characters\n    # Hint: you\
    \ can use echo -e to print special characters\n    # Hint: you can use echo -e\
    \ to print special characters\n    # Hint: you can use echo -e to print special\
    \ characters\n    # Hint: you can use echo -e to print special characters\n  \
    \  # Hint: you can use echo -e to print special characters\n    # Hint: you can\
    \ use echo -e to print special characters\n    # Hint: you can use echo -e to\
    \ print special characters\n    # Hint: you can use echo -e to print special characters\n\
    \    # Hint: you can use echo -e to print special characters\n    # Hint: you\
    \ can use echo -e to print special characters\n    # Hint: you can use echo -e\
    \ to print special characters\n    # Hint: you can use echo -e to print special\
    \ characters\n    # Hint: you can use echo -e to print special characters\n  \
    \  # Hint: you can use echo -e to print special characters\n    # Hint\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjvhj_12r.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpjvhj_12r.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed and\
    \ awk\n    # Hint: use echo -n to print without newline\n    # Hint: use echo\
    \ -e to interpret escape sequences\n    # Hint: use tr to replace characters\n\
    \    # Hint: use printf to format output\n    # Hint: use echo -e to interpret\
    \ escape sequences\n    # Hint: use tr to replace characters\n    # Hint: use\
    \ printf to format output\n    # Hint: use echo -e to interpret escape sequences\n\
    \    # Hint: use tr to replace characters\n    # Hint: use printf to format output\n\
    \    # Hint: use echo -e to interpret escape sequences\n    # Hint: use tr to\
    \ replace characters\n    # Hint: use printf to format output\n    # Hint: use\
    \ echo -e to interpret escape sequences\n    # Hint: use tr to replace characters\n\
    \    # Hint: use printf to format output\n    # Hint: use echo -e to interpret\
    \ escape sequences\n    # Hint: use tr to replace characters\n    # Hint: use\
    \ printf to format output\n    # Hint: use echo -e to interpret escape sequences\n\
    \    # Hint: use tr to replace characters\n    # Hint: use printf to format output\n\
    \    # Hint: use echo -e to interpret escape sequences\n    # Hint: use tr to\
    \ replace characters\n    # Hint: use printf to format output\n    # Hint: use\
    \ echo -e to interpret escape sequences\n    # Hint: use tr to replace characters\n\
    \    # Hint: use printf to format output\n    # Hint: use echo -e to interpret\
    \ escape sequences\n    # Hint: use tr to replace characters\n    # Hint: use\
    \ printf to format output\n    # Hint: use echo -e to interpret escape sequences\n\
    \    # Hint: use tr to replace characters\n    # Hint: use printf to format output\n\
    \    # Hint: use echo -e to interpret escape sequences\n    # Hint: use tr to\
    \ replace characters\n    # Hint: use printf to format output\n    # Hint: use\
    \ echo -e to interpret escape sequences\n    # Hint: use tr to replace characters\n\
    \    # Hint: use printf to format output\n    # Hint: use echo -\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4xgqsmov.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp4xgqsmov.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e\
    \ 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use tr, grep,\
    \ sed, awk, etc.\n    # Hint: use echo -e to interpret escape characters\n   \
    \ # Hint: use | to chain commands\n    # Hint: use $1 to access the input string\n\
    \    # Hint: use quotes to pass strings to commands\n    # Hint: use $() to capture\
    \ the output of a command\n    # Hint: use $() to capture the output of a command\n\
    \    # Hint: use $() to capture the output of a command\n    # Hint: use $() to\
    \ capture the output of a command\n    # Hint: use $() to capture the output of\
    \ a command\n    # Hint: use $() to capture the output of a command\n    # Hint:\
    \ use $() to capture the output of a command\n    # Hint: use $() to capture the\
    \ output of a command\n    # Hint: use $() to capture the output of a command\n\
    \    # Hint: use $() to capture the output of a command\n    # Hint: use $() to\
    \ capture the output of a command\n    # Hint: use $() to capture the output of\
    \ a command\n    # Hint: use $() to capture the output of a command\n    # Hint:\
    \ use $() to capture the output of a command\n    # Hint: use $() to capture the\
    \ output of a command\n    # Hint: use $() to capture the output of a command\n\
    \    # Hint: use $() to capture the output of a command\n    # Hint: use $() to\
    \ capture the output of a command\n    # Hint: use $() to capture the output of\
    \ a command\n    # Hint: use $() to capture the output of a command\n    # Hint:\
    \ use $() to capture the output of a command\n    # Hint: use $() to capture the\
    \ output of a command\n    # Hint: use $() to capture the output of a command\n\
    \    # Hint: use $() to capture the output of a command\n    # Hint: use $() to\
    \ capture the output of a command\n    # Hint: use $() to capture the output of\
    \ a command\n    # Hint: use $() to capture the output of a command\n\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb056eoa8.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpb056eoa8.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo $1 | sed 's/o/4/g'\
    \ | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk to split\
    \ string by characters\n    # Hint: use bash arrays\n    # Hint: use bash array\
    \ indexing\n    # Hint: use echo to print array\n    # Hint: use tr to remove\
    \ unwanted characters\n    # Hint: use sed to remove unwanted characters\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint: use sed to\
    \ replace characters with integers\n    # Hint: use sed to replace characters\
    \ with integers\n    # Hint: use sed to replace characters with integers\n   \
    \ # Hint: use sed to replace characters with integers\n    # Hint\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9k8rfc3c.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp9k8rfc3c.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local music_array=($(echo $music_string\
    \ | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'))\n    echo\
    \ ${music_array[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # HINT: use awk\n  \
    \  # HINT: use a variable to store the result\n    # HINT: use a loop to iterate\
    \ over the string\n    # HINT: use a variable to store the current note\n    #\
    \ HINT: use a variable to store the current note length\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a variable to store the\
    \ result\n    # HINT: use a variable to store the result\n    # HINT: use a variable\
    \ to store the result\n    # HINT: use a variable to store the result\n    # HINT:\
    \ use a variable to store the result\n    # HINT: use a\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqmj_uiuf.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpqmj_uiuf.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo \"$1\" | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed\
    \ -E 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint: use\
    \ sed\n    # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint:\
    \ use sed\n    # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n   \
    \ # Hint: use sed\n    # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n\
    \    # Hint: use sed\n    # Hint: use tr\n    # Hint: use awk\n    # Hint: use\
    \ echo\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use awk\n    # Hint:\
    \ use echo\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use awk\n   \
    \ # Hint: use echo\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use awk\n\
    \    # Hint: use echo\n    # Hint: use sed\n    # Hint: use tr\n    # Hint: use\
    \ awk\n    # Hint: use echo\n    # Hint: use sed\n    # Hint: use tr\n    # Hint:\
    \ use awk\n    # Hint: use echo\n    # Hint: use sed\n    # Hint: use tr\n   \
    \ # Hint: use awk\n    # Hint: use echo\n    # Hint: use sed\n    # Hint: use\
    \ tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint: use sed\n    # Hint:\
    \ use tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint: use sed\n   \
    \ # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint: use sed\n\
    \    # Hint: use tr\n    # Hint: use awk\n    # Hint: use echo\n    # Hint: use\
    \ sed\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6zg2nlb5.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmp6zg2nlb5.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  echo $1 | sed 's/o/4/g'\
    \ | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E\
    \ 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed\n  # Hint:\
    \ use tr\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use sed\n  # Hint: use\
    \ sed\n  # Hint: use\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1sijmhl_.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmp1sijmhl_.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # HINT: you can use\
    \ awk to split string into array\n    # HINT: you can use bash's built-in arithmetic\
    \ evaluation to convert strings to numbers\n    # HINT: you can use bash's built-in\
    \ array syntax to access array elements\n    # HINT: you can use bash's built-in\
    \ string manipulation to remove characters from a string\n    # HINT: you can\
    \ use bash's built-in string manipulation to replace characters in a string\n\
    \    # HINT: you can use bash's built-in string manipulation to split a string\
    \ into an array\n    # HINT: you can use bash's built-in string manipulation to\
    \ join an array into a string\n    # HINT: you can use bash's built-in string\
    \ manipulation to convert a string to uppercase\n    # HINT: you can use bash's\
    \ built-in string manipulation to convert a string to lowercase\n    # HINT: you\
    \ can use bash's built-in string manipulation to trim whitespace from a string\n\
    \    # HINT: you can use bash's built-in string manipulation to compare two strings\n\
    \    # HINT: you can use bash's built-in string manipulation to check if a string\
    \ starts with another string\n    # HINT: you can use bash's built-in string manipulation\
    \ to check if a string ends with another string\n    # HINT: you can use bash's\
    \ built-in string manipulation to check if a string contains another string\n\
    \    # HINT: you can use bash's built-in string manipulation to check if a string\
    \ matches a regular expression\n    # HINT: you can use bash's built-in string\
    \ manipulation to replace a substring with another string\n    # HINT: you can\
    \ use bash's built-in string manipulation to split a string into an array\n  \
    \  # HINT: you can use bash's built-in string manipulation to join an array into\
    \ a string\n    # HINT: you can use bash's built-in string manipulation to convert\
    \ a string to uppercase\n    # HINT: you can use bash's built-in string manipulation\
    \ to convert a string to lowercase\n    # HINT: you can use bash's built-in string\
    \ manipulation to trim whitespace from a string\n    # HINT: you can use bash's\
    \ built-in string manipulation to compare two strings\n    # HINT: you\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo1qj7d0m.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpo1qj7d0m.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed to replace\
    \ all the characters with the corresponding number of beats\n    # Hint: use sed\
    \ to replace all the characters with the corresponding number of beats\n    echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed and tr\n\
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | tr ' ' '\\n'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | tr '\\n' ' ' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a notes\n    local -a beats\n    local -a result\n\
    \    local note\n    local beat\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local aa\n    local bb\n    local cc\n    local\
    \ dd\n    local ee\n    local ff\n    local gg\n    local hh\n    local ii\n \
    \   local jj\n    local kk\n    local ll\n    local mm\n    local nn\n    local\
    \ oo\n    local pp\n    local qq\n    local rr\n    local ss\n    local tt\n \
    \   local uu\n    local vv\n    local ww\n    local xx\n    local yy\n    local\
    \ zz\n    local aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n\
    \    local fff\n    local ggg\n    local hhh\n    local iii\n    local jjj\n \
    \   local kkk\n    local lll\n    local mmm\n    local nnn\n    local ooo\n  \
    \  local ppp\n    local qqq\n    local rrr\n    local sss\n    local ttt\n   \
    \ local uuu\n    local vvv\n    local www\n    local xxx\n    local yyy\n    local\
    \ zzz\n    local aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local\
    \ eeee\n    local ffff\n    local gggg\n    local hhhh\n    local iiii\n    local\
    \ jjjj\n    local kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local\
    \ oooo\n    local pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local\
    \ tttt\n    local uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local\
    \ yyyy\n    local zzzz\n    local aaaaa\n    local bbbbb\n    local ccccc\n\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    # Hint: use sed, tr,\
    \ and grep\n    # Hint: use echo to return a string\n    # Hint: use tr to replace\
    \ 'o' with '4'\n    # Hint: use tr to replace 'o|' with '2'\n    # Hint: use tr\
    \ to replace '.|' with '1'\n    # Hint: use sed to remove all non-digits\n   \
    \ # Hint: use sed to replace all spaces with commas\n    # Hint: use grep to remove\
    \ empty strings\n    # Hint: use echo to return a string\n    # Hint: use tr to\
    \ replace ',' with ' '\n    # Hint: use echo to return a string\n    # Hint: use\
    \ tr to replace ' ' with '\", \"'\n    # Hint: use echo to return a string\n \
    \   # Hint: use tr to replace '\", \"' with '\", \"'\n    # Hint: use echo to\
    \ return a string\n    # Hint: use tr to replace '\", \"' with '\", \"'\n    #\
    \ Hint: use echo to return a string\n    # Hint: use tr to replace '\", \"' with\
    \ '\", \"'\n    # Hint: use echo to return a string\n    # Hint: use tr to replace\
    \ '\", \"' with '\", \"'\n    # Hint: use echo to return a string\n    # Hint:\
    \ use tr to replace '\", \"' with '\", \"'\n    # Hint: use echo to return a string\n\
    \    # Hint: use tr to replace '\", \"' with '\", \"'\n    # Hint: use echo to\
    \ return a string\n    # Hint: use tr to replace '\", \"' with '\", \"'\n    #\
    \ Hint: use echo to return a string\n    # Hint: use tr to replace '\", \"' with\
    \ '\", \"'\n    # Hint: use echo to return a string\n    # Hint: use tr to replace\
    \ '\", \"' with '\", \"'\n    # Hint: use echo to return a string\n    # Hint:\
    \ use tr to replace '\", \"' with '\", \"'\n    # Hint: use echo to return a string\n\
    \    # Hint: use tr to replace '\", \"' with '\", \"'\n    # Hint: use echo to\
    \ return\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc9s9twej.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpc9s9twej.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: implement this function\n  # Hint: use sed\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local -a notes\n  local -a beats\n  local -a result\n  local\
    \ note\n  local beat\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n\
    \  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local\
    \ hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n\
    \  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local\
    \ uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n\
    \  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n\
    \  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n\
    \  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n\
    \  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n\
    \  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local\
    \ eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n\
    \  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local\
    \ pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n\
    \  local vvvv\n  local wwww\n  local xxxx\n  local yyyy\n  local zzzz\n  local\
    \ aaaaa\n  local bbbbb\n  local ccccc\n\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    # Hint: You can use\
    \ 'echo' to print to stdout, and '$(<command>)' to capture the output of a command\n\
    \    # Hint: You can use '$1' to access the first argument passed to the function\n\
    \    # Hint: You can use '$(($1 + 1))' to increment a number\n    # Hint: You\
    \ can use '$(($1 - 1))' to decrement a number\n    # Hint: You can use '$(($1\
    \ * 2))' to double a number\n    # Hint: You can use '$(($1 / 2))' to halve a\
    \ number\n    # Hint: You can use '$(($1 % 2))' to get the remainder of a number\
    \ divided by 2\n    # Hint: You can use '$(($1 ** 2))' to square a number\n  \
    \  # Hint: You can use '$(($1 ** 0.5))' to square root a number\n    # Hint: You\
    \ can use '$(($1 == 2))' to check if a number is equal to another number\n   \
    \ # Hint: You can use '$(($1 != 2))' to check if a number is not equal to another\
    \ number\n    # Hint: You can use '$(($1 > 2))' to check if a number is greater\
    \ than another number\n    # Hint: You can use '$(($1 < 2))' to check if a number\
    \ is less than another number\n    # Hint: You can use '$(($1 >= 2))' to check\
    \ if a number is greater than or equal to another number\n    # Hint: You can\
    \ use '$(($1 <= 2))' to check if a number is less than or equal to another number\n\
    \    # Hint: You can use '$(($1 && 1))' to check if a number is true\n    # Hint:\
    \ You can use '$(($1 || 1))' to check if a number is false\n    # Hint: You can\
    \ use '$(($1 + $2))' to add two numbers\n    # Hint: You can use '$(($1 - $2))'\
    \ to subtract two numbers\n    # Hint: You can use '$(\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpztfwd87a.sh: line 35: syntax error near unexpected token `}''

    /tmp/tmpztfwd87a.sh: line 35: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use tr to replace\
    \ all characters with spaces\n    # Hint: use sed to remove all spaces\n    #\
    \ Hint: use sed to replace all 'o' with '4'\n    # Hint: use sed to replace all\
    \ 'o|' with '2'\n    # Hint: use sed to replace all '.|' with '1'\n    # Hint:\
    \ use sed to replace all '|' with ''\n    # Hint: use sed to replace all '.' with\
    \ ''\n    # Hint: use sed to replace all ' ' with ','\n    # Hint: use sed to\
    \ replace all ',,,' with ','\n    # Hint: use sed to replace all ',,,,' with ','\n\
    \    # Hint: use sed to replace all ',,,,,' with ','\n    # Hint: use sed to replace\
    \ all ',,,,,,' with ','\n    # Hint: use sed to replace all ',,,,,,,' with ','\n\
    \    # Hint: use sed to replace all ',,,,,,,,' with ','\n    # Hint: use sed to\
    \ replace all ',,,,,,,,,' with ','\n    # Hint: use sed to replace all ',,,,,,,,,,'\
    \ with ','\n    # Hint: use sed to replace all ',,,,,,,,,,,' with ','\n    # Hint:\
    \ use sed to replace all ',,,,,,,,,,,,' with ','\n    # Hint: use sed to replace\
    \ all ',,,,,,,,,,,,,' with ','\n    # Hint: use sed to replace all ',,,,,,,,,,,,,,'\
    \ with ','\n    # Hint: use sed to replace all ',,,,,,,,,,,,,,,' with ','\n  \
    \  # Hint: use sed to replace all ',,,,,,,,,,,,,,,,' with ','\n    # Hint: use\
    \ sed to replace all ',,,,,,,,,,,,,,,,,' with ','\n    # Hint: use sed to replace\
    \ all ',,,,,,,,,,,,,,,,,,' with ','\n    # Hint: use sed to replace all ',,,,,,,,,,,,,,,,,,,'\
    \ with ','\n    # Hint: use sed to replace all ',,,,,,,,,,,,,,,,,,,,' with ','\n\
    \    # Hint: use sed to replace all ',,,,,,,,,,,,,,,,,,,,,' with ','\n    # Hint:\
    \ use sed to replace all ',,,,,,,,,,,,,,,,,,,,,,' with ','\n    # Hint\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmsxa8h_v.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpmsxa8h_v.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E\
    \ 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Your code here\n    # Hint: use tr and sed\n    #\
    \ Hint: use echo and tr to convert string to array\n    # Hint: use sed to replace\
    \ whole notes with 4, half notes with 2, and quater notes with 1\n    # Hint:\
    \ use echo and tr to convert array back to string\n    # Hint: use echo to remove\
    \ quotes from the string\n    echo \"$1\" | tr ' ' '\\n' | sed 's/o/4/g' | sed\
    \ 's/o|/2/g' | sed 's/\\.|/1/g' | tr '\\n' ' ' | sed 's/\"//g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: you can use\
    \ 'echo' to print to stdout\n    # Hint: you can use 'expr' to evaluate arithmetic\
    \ expressions\n    # Hint: you can use 'sed' to replace strings\n    # Hint: you\
    \ can use 'tr' to translate characters\n    # Hint: you can use 'bc' to evaluate\
    \ math expressions\n    # Hint: you can use 'grep' to find substrings\n    # Hint:\
    \ you can use 'wc' to count characters\n    # Hint: you can use 'cut' to split\
    \ strings\n    # Hint: you can use 'paste' to join strings\n    # Hint: you can\
    \ use 'rev' to reverse strings\n    # Hint: you can use 'sort' to sort strings\n\
    \    # Hint: you can use 'uniq' to remove duplicates\n    # Hint: you can use\
    \ 'xargs' to execute commands\n    # Hint: you can use 'tr' to translate characters\n\
    \    # Hint: you can use 'rev' to reverse strings\n    # Hint: you can use 'sort'\
    \ to sort strings\n    # Hint: you can use 'uniq' to remove duplicates\n    #\
    \ Hint: you can use 'xargs' to execute commands\n    # Hint: you can use 'tr'\
    \ to translate characters\n    # Hint: you can use 'rev' to reverse strings\n\
    \    # Hint: you can use 'sort' to sort strings\n    # Hint: you can use 'uniq'\
    \ to remove duplicates\n    # Hint: you can use 'xargs' to execute commands\n\
    \    # Hint: you can use 'tr' to translate characters\n    # Hint: you can use\
    \ 'rev' to reverse strings\n    # Hint: you can use 'sort' to sort strings\n \
    \   # Hint: you can use 'uniq' to remove duplicates\n    # Hint: you can use 'xargs'\
    \ to execute commands\n    # Hint: you can use 'tr' to translate characters\n\
    \    # Hint: you can use 'rev' to reverse strings\n    # Hint: you can use 'sort'\
    \ to sort strings\n    # Hint: you can use 'uniq' to remove duplicates\n   \n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7y6qwxcu.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp7y6qwxcu.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Implement this function\n    # Hint: You can use\
    \ the following bash functions:\n    # - ${#1} - length of the string\n    # -\
    \ ${1:i:1} - character at position i in the string\n    # - echo -e - prints a\
    \ string with escape sequences interpreted\n    # - echo -n - prints a string\
    \ without a trailing newline\n    # - printf - prints a formatted string\n   \
    \ # - echo -en \"\\x01\" - prints a byte with hex value 01\n    # - echo -en \"\
    \\x01\\x02\" - prints two bytes with hex values 01 and 02\n    # - echo -en \"\
    \\x01\\x02\\x03\\x04\" - prints four bytes with hex values 01, 02, 03 and 04\n\
    \    # - echo -en \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\" - prints eight\
    \ bytes with hex values 01, 02, 03, 04, 05, 06, 07 and 08\n    # - echo -en \"\
    \\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\\
    x10\" - prints 16 bytes with hex values 01, 02, 03, 04, 05, 06, 07, 08, 09, 0a,\
    \ 0b, 0c, 0d, 0e, 0f and 10\n    # - echo -en \"\\x01\\x02\\x03\\x04\\x05\\x06\\\
    x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\\
    x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\" - prints 32 bytes with hex\
    \ values 01, 02, 03, 04, 05, 06, 07, 08, 09, 0a, 0b, 0c, 0d, 0e, 0f, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19,\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp9h0lhosy.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmp9h0lhosy.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local notes=$1\n    local beats=()\n    for note in $notes;\
    \ do\n        case $note in\n            \"o\")\n                beats+=(4)\n\
    \                ;;\n            \"o|\")\n                beats+=(2)\n       \
    \         ;;\n            \".|\")\n                beats+=(1)\n              \
    \  ;;\n        esac\n    done\n    echo \"${beats[@]}\"\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e\
    \ 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a notes\n    local -a beats\n    local -a output\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed, grep,\
    \ tr, and echo\n    # Hint: use echo -n to print without newline\n    # Hint:\
    \ use echo -e to print escaped characters\n    # Hint: use echo -e '\\t' to print\
    \ a tab\n    # Hint: use echo -e '\\n' to print a newline\n    # Hint: use echo\
    \ -e '\\\\' to print a backslash\n    # Hint: use echo -e '\\\"' to print a double\
    \ quote\n    # Hint: use echo -e '\\'' to print a single quote\n    # Hint: use\
    \ echo -e '\\xhh' to print a character with hex code hh\n    # Hint: use echo\
    \ -e '\\ooo' to print a character with octal code ooo\n    # Hint: use echo -e\
    \ '\\c' to suppress the trailing newline\n    # Hint: use echo -e '\\c' to suppress\
    \ the trailing newline\n    # Hint: use echo -e '\\c' to suppress the trailing\
    \ newline\n    # Hint: use echo -e '\\c' to suppress the trailing newline\n  \
    \  # Hint: use echo -e '\\c' to suppress the trailing newline\n    # Hint: use\
    \ echo -e '\\c' to suppress the trailing newline\n    # Hint: use echo -e '\\\
    c' to suppress the trailing newline\n    # Hint: use echo -e '\\c' to suppress\
    \ the trailing newline\n    # Hint: use echo -e '\\c' to suppress the trailing\
    \ newline\n    # Hint: use echo -e '\\c' to suppress the trailing newline\n  \
    \  # Hint: use echo -e '\\c' to suppress the trailing newline\n    # Hint: use\
    \ echo -e '\\c' to suppress the trailing newline\n    # Hint: use echo -e '\\\
    c' to suppress the trailing newline\n    # Hint: use echo -e '\\c' to suppress\
    \ the trailing newline\n    # Hint: use echo -e '\\c' to suppress the trailing\
    \ newline\n    # Hint: use echo -e '\\c' to suppress the trailing new\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8n_stqtn.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp8n_stqtn.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e\
    \ 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo \"$1\" | tr 'o.|' '4411'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ sed -e 's/\\s/\\n/g' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  # TODO: write your code here\n  # echo \"Not implemented yet\"\
    \n  # return 1\n  # echo $1\n  # echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/.|/1/g'\n\
    \  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/.|/1/g' | tr ' ' '\\n' | sed\
    \ -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ' '\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E\
    \ 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"TODO\"\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk to split\
    \ string by character\n    # Hint: use awk to split string by character\n    echo\
    \ $1 | awk '{for(i=1;i<=NF;i++) {if($i==\"o\") print \"4\"; else if($i==\"o|\"\
    ) print \"2\"; else if($i==\".|\") print \"1\";}}'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local music_string=$1\n    local result=\"\"\n    local i=0\n\
    \    local len=${#music_string}\n    while [ $i -lt $len ]; do\n        local\
    \ char=${music_string:$i:1}\n        if [ \"$char\" == \"o\" ]; then\n       \
    \     result=\"$result 4\"\n            i=$((i+1))\n        elif [ \"$char\" ==\
    \ \".\" ]; then\n            result=\"$result 1\"\n            i=$((i+3))\n  \
    \      else\n            echo \"Invalid character $char\"\n            exit 1\n\
    \        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Write your code here\n    # Hint: You can use the\
    \ following command to split the string into an array:\n    # arr=(${1//|/ })\n\
    \    # echo ${arr[@]}\n    arr=(${1//|/ })\n    for i in ${arr[@]}; do\n     \
    \   if [ $i == \"o\" ]; then\n            echo \"\\\"4\\\"\"\n        else\n \
    \           echo \"\\\"1\\\"\"\n        fi\n    done\n}\n\ncandidate() {\n   \
    \ parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: you can use\
    \ bash arrays\n    # Hint: you can use bash regexp matching\n    # Hint: you can\
    \ use bash string manipulation\n    # Hint: you can use bash string splitting\n\
    \    # Hint: you can use bash arithmetic\n    # Hint: you can use bash array join\n\
    \    # Hint: you can use bash array length\n    # Hint: you can use bash array\
    \ slicing\n    # Hint: you can use bash array indexing\n    # Hint: you can use\
    \ bash array iteration\n    # Hint: you can use bash string iteration\n    # Hint:\
    \ you can use bash string join\n    # Hint: you can use bash string length\n \
    \   # Hint: you can use bash string slicing\n    # Hint: you can use bash string\
    \ indexing\n    # Hint: you can use bash string iteration\n    # Hint: you can\
    \ use bash string join\n    # Hint: you can use bash string length\n    # Hint:\
    \ you can use bash string slicing\n    # Hint: you can use bash string indexing\n\
    \    # Hint: you can use bash string iteration\n    # Hint: you can use bash string\
    \ join\n    # Hint: you can use bash string length\n    # Hint: you can use bash\
    \ string slicing\n    # Hint: you can use bash string indexing\n    # Hint: you\
    \ can use bash string iteration\n    # Hint: you can use bash string join\n  \
    \  # Hint: you can use bash string length\n    # Hint: you can use bash string\
    \ slicing\n    # Hint: you can use bash string indexing\n    # Hint: you can use\
    \ bash string iteration\n    # Hint: you can use bash string join\n    # Hint:\
    \ you can use bash string length\n    # Hint: you can use bash string slicing\n\
    \    # Hint: you can use bash string indexing\n    # Hint: you can use bash string\
    \ iteration\n    # Hint: you can use bash string join\n    # Hint: you can use\
    \ bash string length\n    # Hint: you can use bash string slicing\n    # Hint:\
    \ you can use bash string indexing\n    # Hint: you can use bash string iteration\n\
    \    # Hint\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_pgeu7a6.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp_pgeu7a6.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a notes=($(echo $1 | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \    echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local notes=$1\n    local beats=()\n    local note\n    for\
    \ note in $notes; do\n        if [[ $note == \"o\" ]]; then\n            beats+=(\"\
    4\")\n        elif [[ $note == \"o|\" ]]; then\n            beats+=(\"2\")\n \
    \       elif [[ $note == \".|\" ]]; then\n            beats+=(\"1\")\n       \
    \ fi\n    done\n    echo ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Your code here\n    # Hint: Use sed\n    echo $1\
    \ | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e\
    \ 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E\
    \ 's/\\.\\|/1/g' | sed -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # HINT: use sed to replace\
    \ all the notes with their corresponding number of beats\n    # HINT: use tr to\
    \ replace all the spaces with commas\n    # HINT: use tr to replace all the vertical\
    \ bars with spaces\n    # HINT: use sed to remove all the newlines\n    # HINT:\
    \ use sed to remove all the double quotes\n    # HINT: use sed to remove all the\
    \ square brackets\n    # HINT: use sed to remove all the spaces\n    # HINT: use\
    \ sed to remove all the commas\n    # HINT: use sed to remove all the double quotes\n\
    \    # HINT: use sed to remove all the square brackets\n    # HINT: use sed to\
    \ remove all the spaces\n    # HINT: use sed to remove all the commas\n    # HINT:\
    \ use sed to remove all the double quotes\n    # HINT: use sed to remove all the\
    \ square brackets\n    # HINT: use sed to remove all the spaces\n    # HINT: use\
    \ sed to remove all the commas\n    # HINT: use sed to remove all the double quotes\n\
    \    # HINT: use sed to remove all the square brackets\n    # HINT: use sed to\
    \ remove all the spaces\n    # HINT: use sed to remove all the commas\n    # HINT:\
    \ use sed to remove all the double quotes\n    # HINT: use sed to remove all the\
    \ square brackets\n    # HINT: use sed to remove all the spaces\n    # HINT: use\
    \ sed to remove all the commas\n    # HINT: use sed to remove all the double quotes\n\
    \    # HINT: use sed to remove all the square brackets\n    # HINT: use sed to\
    \ remove all the spaces\n    # HINT: use sed to remove all the commas\n    # HINT:\
    \ use sed to remove all the double quotes\n    # HINT: use sed to remove all the\
    \ square brackets\n    # HINT: use sed to remove all the spaces\n    # HINT: use\
    \ sed to remove all the commas\n    # HINT: use sed to remove all the double quotes\n\
    \    # HINT: use sed to remove all the square brackets\n    # HINT: use sed to\
    \ remove all the spaces\n    # HINT: use sed to remove all the\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ngc5_tw.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp6ngc5_tw.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660011319
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a result\n    local -a notes=($(echo $1 | sed 's/|/|\
    \ /g'))\n    for note in \"${notes[@]}\"; do\n        case $note in\n        \
    \    \"o\")\n                result+=(4)\n                ;;\n            \"o|\"\
    )\n                result+=(2)\n                ;;\n            \".|\")\n    \
    \            result+=(1)\n                ;;\n        esac\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/\\(.\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    local -a result\n    local -a notes=($(echo $1 | sed 's/|//g'))\n\
    \    local -a durations=($(echo $1 | sed 's/o//g'))\n    local -a duration_values=(4\
    \ 2 1)\n    local -a duration_symbols=(o . |)\n    local -i i=0\n    local -i\
    \ j=0\n    local -i k=0\n    local -i duration=0\n    local -i note_count=${#notes[@]}\n\
    \    local -i duration_count=${#durations[@]}\n    local -i duration_value_count=${#duration_values[@]}\n\
    \    local -i duration_symbol_count=${#duration_symbols[@]}\n    local note\n\
    \    local duration\n    local duration_value\n    local duration_symbol\n\n \
    \   for ((i=0; i<note_count; i++)); do\n        note=${notes[$i]}\n        for\
    \ ((j=0; j<duration_count; j++)); do\n            duration=${durations[$j]}\n\
    \            for ((k=0; k<duration_symbol_count; k++)); do\n                duration_symbol=${duration_symbols[$k]}\n\
    \                if [[ $duration == $duration_symbol ]]; then\n              \
    \      duration_value=${duration_values[$k]}\n                    break\n    \
    \            fi\n            done\n            if [[ $note == $duration_symbol\
    \ ]]; then\n                result+=($duration_value)\n                break\n\
    \            fi\n        done\n    done\n\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfv90e01z.sh: line 18: syntax error near unexpected token `|''

    /tmp/tmpfv90e01z.sh: line 18: `    local -a duration_symbols=(o . |)''

    /tmp/tmpfv90e01z.sh: line 19: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 20: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 21: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 22: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 23: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 24: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 25: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 26: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 27: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 28: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 29: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 30: local: can only be used in a function

    /tmp/tmpfv90e01z.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpfv90e01z.sh: line 51: `}''

    '
  stdout: '

    '
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed to replace\
    \ all o| with 2, .| with 1, and o with 4\n    # Hint: use sed to replace all o|\
    \ with 2, .| with 1, and o with 4\n    echo $1 | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/o/4/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: Write your code here\n    # Hint: You can use 'echo'\
    \ to print to stdout\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local -a notes=($(echo $1 | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \  echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk to parse\
    \ the string\n    echo $1 | awk '{\n        for (i = 1; i <= NF; i++) {\n    \
    \        if ($i == \"o\") {\n                print \"\\\"4\\\"\";\n          \
    \  } else if ($i == \"o|\") {\n                print \"\\\"2\\\"\";\n        \
    \    } else if ($i == \".|\") {\n                print \"\\\"1\\\"\";\n      \
    \      }\n        }\n    }'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  local music=$1\n  local beats=()\n  local beat=1\n  local note=''\n\
    \  local i=0\n  local len=${#music}\n  while [ $i -lt $len ]; do\n    note=${music:$i:1}\n\
    \    if [ \"$note\" == \"o\" ]; then\n      beat=4\n    elif [ \"$note\" == \"\
    o|\" ]; then\n      beat=2\n    elif [ \"$note\" == \".|\" ]; then\n      beat=1\n\
    \    fi\n    beats+=($beat)\n    i=$((i+1))\n  done\n  echo ${beats[@]}\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo \"$1\" | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E 's/\\.\\|/1/g'\
    \ | sed -E 's/\\s+/\\n/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' |\
    \ tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed -e 's/,$//'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use sed\n  \
    \  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011318
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    echo \"Not implemented\
    \ yet\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\n\
    parse_music() {\n    # TODO: implement this function\n    # Hint: use awk to parse\
    \ the string\n    # Hint: use echo to return the result\n    echo $1 | awk '{\n\
    \        for (i = 1; i <= NF; i++) {\n            if ($i == \"o\") {\n       \
    \         print \"\\\"4\\\"\"\n            } else if ($i == \"o|\") {\n      \
    \          print \"\\\"2\\\"\"\n            } else if ($i == \".|\") {\n     \
    \           print \"\\\"1\\\"\"\n            }\n        }\n    }'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011319
