language: sh
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n    \
    \            tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n            \
    \    arr[$j]=$tmp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<${#arr[@]};\
    \ i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [[ $flag -eq\
    \ 1 ]]\n        then\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n  \
    \              tmp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n          \
    \      arr[$j]=$tmp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a temp\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i n=${#arr[@]}\n    local -i m=0\n\
    \    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n        temp=${shifted[@]}\n\
    \        shifted=(${temp[@]:1} ${temp[0]})\n        for ((j=0; j<n; j++))\n  \
    \      do\n            if [[ ${shifted[j]} -ne ${sorted[j]} ]]\n            then\n\
    \                flag=1\n                break\n            fi\n        done\n\
    \        if [[ $flag -eq 0 ]]\n        then\n            echo \"true\"\n     \
    \       return\n        fi\n        flag=0\n    done\n    echo \"false\"\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local i=0\n\
    \  local j=0\n  local temp=0\n  local flag=0\n  local n=${#arr[@]}\n  for ((i=0;\
    \ i<n-1; i++))\n  do\n    if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n    then\n     \
    \ flag=1\n      break\n    fi\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [ ${arr[j]} -lt $min ]\n            then\n       \
    \         min=${arr[j]}\n                min_index=$j\n            fi\n      \
    \  done\n        if [ $min_index -ne $i ]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local aa\n\
    \    local bb\n    local cc\n    local dd\n    local ee\n    local ff\n    local\
    \ gg\n    local hh\n    local ii\n    local jj\n    local kk\n    local ll\n \
    \   local mm\n    local nn\n    local oo\n    local pp\n    local qq\n    local\
    \ rr\n    local ss\n    local tt\n    local uu\n    local vv\n    local ww\n \
    \   local xx\n    local yy\n    local zz\n    local aaa\n    local bbb\n    local\
    \ ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n\
    \    local iii\n    local jjj\n    local kkk\n    local lll\n    local mmm\n \
    \   local nnn\n    local ooo\n    local ppp\n    local qqq\n    local rrr\n  \
    \  local sss\n    local ttt\n    local uuu\n    local vvv\n    local www\n   \
    \ local xxx\n    local yyy\n    local zzz\n    local aaaa\n    local bbbb\n  \
    \  local cccc\n    local dddd\n    local eeee\n    local ffff\n    local gggg\n\
    \    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n    local llll\n\
    \    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n    local qqqq\n\
    \    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n    local vvvv\n\
    \    local wwww\n    local xxxx\n    local yyyy\n    local zzzz\n    local aaaaa\n\
    \    local bbbbb\n    local ccccc\n    local ddddd\n    local eeeee\n    local\
    \ fffff\n    local ggg\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<len;\
    \ k++))\n    do\n        if [ $k -ne ${arr[k]} ]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n    then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local n=${#arr[@]}\n    local flag=0\n    for ((i=0;\
    \ i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n          \
    \  if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [[ $flag -eq\
    \ 1 ]]\n        then\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i j\n    local -i N\n    local -i min_index\n    local -i min_value\n    local\
    \ -i temp\n    local -i flag\n    arr=($1)\n    N=${#arr[@]}\n    flag=0\n   \
    \ for ((i=0; i<N; i++))\n    do\n        min_index=$i\n        min_value=${arr[$i]}\n\
    \        for ((j=i+1; j<N; j++))\n        do\n            if [[ ${arr[$j]} -lt\
    \ $min_value ]]\n            then\n                min_index=$j\n            \
    \    min_value=${arr[$j]}\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            temp=${arr[$i]}\n            arr[$i]=${arr[$min_index]}\n\
    \            arr[$min_index]=$temp\n            flag=1\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local count=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            count=$((count+1))\n            fi\n        done\n    done\n    if\
    \ [[ $count -gt 1 ]]\n    then\n        flag=1\n    fi\n    if [[ $flag -eq 1\
    \ ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<n; i++))\n    do\n     \
    \   min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n   \
    \     do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n        \
    \        min=${arr[j]}\n                min_index=$j\n            fi\n       \
    \ done\n        if [[ $min_index -ne $i ]]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n    \
    \            temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n           \
    \     arr[$j]=$temp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${shifted[@]}\" == \"${sorted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((k=0; k<len; k++))\n    do\n\
    \        if [ ${arr[k]} -ne $k ]\n        then\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    IFS=' '\
    \ read -r -a arr <<< \"$1\"\n    local -a sorted_arr\n    sorted_arr=($(printf\
    \ \"%s\\n\" \"${arr[@]}\" | sort -n))\n    local -a shifted_arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    n=${#arr[@]}\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            shifted_arr[j]=${arr[(j+i)%n]}\n\
    \        done\n        for ((k=0; k<n; k++)); do\n            if [[ ${shifted_arr[k]}\
    \ -ne ${sorted_arr[k]} ]]; then\n                break\n            fi\n     \
    \   done\n        if [[ $k -eq $n ]]; then\n            echo \"true\"\n      \
    \      return\n        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local n=${#arr[@]}\n\
    \    for (( i=0; i<n-1; i++ ))\n    do\n        for (( j=0; j<n-i-1; j++ ))\n\
    \        do\n            if [[ ${arr[j]} -gt ${arr[$((j+1))]} ]]\n           \
    \ then\n                temp=${arr[j]}\n                arr[$j]=${arr[$((j+1))]}\n\
    \                arr[$((j+1))]=$temp\n            fi\n        done\n    done\n\
    \    for (( i=0; i<n-1; i++ ))\n    do\n        if [[ ${arr[i]} -gt ${arr[$((i+1))]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    local count=0\n    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1;\
    \ j<len; j++ ))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n    \
    \        then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n        if [ $flag -eq 1 ]\n        then\n            count=$((count+1))\n\
    \        fi\n        flag=0\n    done\n    if [ $count -gt 1 ]\n    then\n   \
    \     echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local flag=0\n    for ((i=0; i<${#arr[@]}; i++))\n \
    \   do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n            if [[\
    \ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n     \
    \           break\n            fi\n        done\n        if [[ $flag -eq 1 ]]\n\
    \        then\n            break\n        fi\n    done\n    if [[ $flag -eq 1\
    \ ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    local count=0\n    local min=0\n    local min_index=0\n\
    \    local min_index_temp=0\n    local min_index_temp_2=0\n    local min_index_temp_3=0\n\
    \    local min_index_temp_4=0\n    local min_index_temp_5=0\n    local min_index_temp_6=0\n\
    \    local min_index_temp_7=0\n    local min_index_temp_8=0\n    local min_index_temp_9=0\n\
    \    local min_index_temp_10=0\n    local min_index_temp_11=0\n    local min_index_temp_12=0\n\
    \    local min_index_temp_13=0\n    local min_index_temp_14=0\n    local min_index_temp_15=0\n\
    \    local min_index_temp_16=0\n    local min_index_temp_17=0\n    local min_index_temp_18=0\n\
    \    local min_index_temp_19=0\n    local min_index_temp_20=0\n    local min_index_temp_21=0\n\
    \    local min_index_temp_22=0\n    local min_index_temp_23=0\n    local min_index_temp_24=0\n\
    \    local min_index_temp_25=0\n    local min_index_temp_26=0\n    local min_index_temp_27=0\n\
    \    local min_index_temp_28=0\n    local min_index_temp_29=0\n    local min_index_temp_30=0\n\
    \    local min_index_temp_31=0\n    local min_index_temp_32=0\n    local min_index_temp_33=0\n\
    \    local min_index_temp_34=0\n    local min_index_temp_35=0\n    local min_index_temp_36=0\n\
    \    local min_index_temp_37=0\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i min\n    local\
    \ -i max\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n    if [[ $n -eq\
    \ 0 ]]; then\n        echo \"true\"\n        return\n    fi\n    for ((i=0; i<n;\
    \ i++)); do\n        min=${arr[i]}\n        max=${arr[i]}\n        flag=0\n  \
    \      for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n\
    \                min=${arr[j]}\n                k=$j\n                flag=1\n\
    \            fi\n            if [[ ${arr[j]} -gt $max ]]; then\n             \
    \   max=${arr[j]}\n            fi\n        done\n        if [[ $flag -eq 1 ]];\
    \ then\n            arr[i]=$min\n            arr[k]=${arr[i]}\n        fi\n  \
    \      if [[ $min -gt $max ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    IFS=' '\
    \ read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n    local -i i=0\n   \
    \ local -i j=0\n    local -i k=0\n    local -i min=0\n    local -i min_index=0\n\
    \    local -i temp=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n\
    \    done\n    for ((k=0; k<n-1; k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n    else\n      \
    \  echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local flag=0\n  for ((i=0; i<len; i++))\n  do\n \
    \   for ((j=i+1; j<len; j++))\n    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n\
    \      then\n        flag=1\n        break\n      fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n      break\n    fi\n  done\n  if [[ $flag -eq 1 ]]\n  then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<n;\
    \ i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<n; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n          \
    \  then\n                min=${arr[j]}\n                min_index=$j\n       \
    \     fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n   \
    \         temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n\
    \            flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0;\
    \ k<n-1; k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_sorted=($(echo\
    \ \"${shifted[@]}\" | tr ' ' '\\n' | sort -n))\n    if [[ \"${sorted[@]}\" ==\
    \ \"${arr[@]}\" ]]; then\n        echo \"true\"\n    elif [[ \"${shifted_sorted[@]}\"\
    \ == \"${sorted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n    \
    \            temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n           \
    \     arr[$j]=$temp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  local min=0\n  local\
    \ min_index=0\n  local temp=0\n  for ((i=0; i<len; i++))\n  do\n    min=${arr[i]}\n\
    \    min_index=$i\n    for ((j=i+1; j<len; j++))\n    do\n      if [ ${arr[j]}\
    \ -lt $min ]\n      then\n        min=${arr[j]}\n        min_index=$j\n      fi\n\
    \    done\n    if [ $min_index -ne $i ]\n    then\n      flag=1\n      temp=${arr[i]}\n\
    \      arr[i]=${arr[min_index]}\n      arr[min_index]=$temp\n    fi\n  done\n\
    \  if [ $flag -eq 0 ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  local count=0\n \
    \ for (( i=0; i<$len; i++ ))\n  do\n    for (( j=i+1; j<$len; j++ ))\n    do\n\
    \      if [ ${arr[$i]} -gt ${arr[$j]} ]\n      then\n        temp=${arr[$i]}\n\
    \        arr[$i]=${arr[$j]}\n        arr[$j]=$temp\n        flag=1\n      fi\n\
    \    done\n    if [ $flag -eq 1 ]\n    then\n      count=$((count+1))\n      flag=0\n\
    \    fi\n  done\n  if [ $count -eq 1 ]\n  then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local count=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            count=$((count+1))\n            fi\n        done\n    done\n    if\
    \ [[ $count -eq 1 ]]\n    then\n        flag=1\n    fi\n    if [[ $flag -eq 1\
    \ ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt\
    \ $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n\
    \            arr[min_index]=${arr[i]}\n            arr[i]=$min\n        fi\n \
    \   done\n    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n        then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=(\"$@\")\n  \
    \  local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local\
    \ -a shifted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n \
    \   shifted+=(\"${sorted[0]}\")\n    if [[ \"${sorted[@]}\" == \"${shifted[@]}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted_shifted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted_shifted_shifted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted_shifted_shifted_shifted_shifted_shifted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [[ -z \"$1\" ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    declare -a arr=($1)\n    declare\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    if [[ \"${arr[@]}\"\
    \ == \"${sorted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=0; j<len-1;\
    \ j++))\n        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n        \
    \    then\n                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n\
    \                arr[j+1]=$temp\n                flag=1\n            fi\n    \
    \    done\n        if [[ $flag -eq 0 ]]\n        then\n            break\n   \
    \     fi\n    done\n    for ((k=0; k<len-1; k++))\n    do\n        if [[ ${arr[k]}\
    \ -gt ${arr[k+1]} ]]\n        then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local i=0\n\
    \  local j=0\n  local temp=0\n  local flag=0\n  local len=${#arr[@]}\n  for ((\
    \ i=0; i<$len; i++ ))\n  do\n    for (( j=i+1; j<$len; j++ ))\n    do\n      if\
    \ [ ${arr[$i]} -gt ${arr[$j]} ]\n      then\n        temp=${arr[$i]}\n       \
    \ arr[$i]=${arr[$j]}\n        arr[$j]=$temp\n        flag=1\n      fi\n    done\n\
    \  done\n  if [ $flag -eq 1 ]\n  then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    IFS=' '\
    \ read -r -a arr <<< \"$1\"\n    local -i n=${#arr[@]}\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i min\n    local -i min_index\n    local -i\
    \ count\n    local -i flag\n    for ((i=0; i<n; i++))\n    do\n        min=${arr[i]}\n\
    \        min_index=$i\n        for ((j=i+1; j<n; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_index=$j\n            fi\n        done\n        if [[ $min_index\
    \ -ne $i ]]\n        then\n            count=0\n            for ((k=min_index;\
    \ k>i; k--))\n            do\n                arr[k]=${arr[k-1]}\n           \
    \     count=$((count+1))\n            done\n            arr[i]=$min\n        \
    \    if [[ $count -gt 1 ]]\n            then\n                flag=1\n       \
    \         break\n            fi\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n\
    \    then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local flag=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [[ $flag -eq\
    \ 1 ]]\n        then\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n    local flag=0\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n\
    \                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n           \
    \     arr[j]=$tmp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for (( i=0; i<$len;\
    \ i++ ))\n  do\n    for (( j=i+1; j<$len; j++ ))\n    do\n      if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$temp\n        flag=1\n      fi\n    done\n  done\n  if [[ $flag\
    \ -eq 1 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<n;\
    \ k++))\n    do\n        if [ ${arr[k]} -ne $((k+1)) ]\n        then\n       \
    \     flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [[ $flag -eq\
    \ 1 ]]\n        then\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted=(\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpxe92cc7m.sh: line 41: syntax error near unexpected token `(''

    /tmp/tmpxe92cc7m.sh: line 41: `candidate() {''

    /tmp/tmpxe92cc7m.sh: line 42: move_one_ball: command not found

    /tmp/tmpxe92cc7m.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpxe92cc7m.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for (( i=0; i<$len;\
    \ i++ ))\n  do\n    for (( j=i+1; j<$len; j++ ))\n    do\n      if [ ${arr[i]}\
    \ -gt ${arr[j]} ]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$temp\n        flag=1\n      fi\n    done\n  done\n  if [ $flag\
    \ -eq 0 ]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<len;\
    \ i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<len; j++))\n        do\n            if [ ${arr[j]} -lt $min ]\n          \
    \  then\n                min=${arr[j]}\n                min_index=$j\n       \
    \     fi\n        done\n        if [ $min_index -ne $i ]\n        then\n     \
    \       temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n\
    \            flag=1\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local N=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  local temp=0\n  local\
    \ min=0\n  local min_index=0\n  local max=0\n  local max_index=0\n  local min_index_prev=0\n\
    \  local max_index_prev=0\n  local min_index_next=0\n  local max_index_next=0\n\
    \  local min_index_prev_prev=0\n  local max_index_prev_prev=0\n  local min_index_next_next=0\n\
    \  local max_index_next_next=0\n  local min_index_prev_prev_prev=0\n  local max_index_prev_prev_prev=0\n\
    \  local min_index_next_next_next=0\n  local max_index_next_next_next=0\n  local\
    \ min_index_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev=0\n \
    \ local min_index_next_next_next_next=0\n  local max_index_next_next_next_next=0\n\
    \  local min_index_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev=0\n\
    \  local min_index_next_next_next_next_next=0\n  local max_index_next_next_next_next_next=0\n\
    \  local min_index_prev_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev_prev=0\n\
    \  local min_index_next_next_next_next_next_next=0\n  local max_index_next_next_next_next_next_next=0\n\
    \  local min_index_prev_prev_prev_prev_prev_prev_prev=0\n  local max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local min_index_next_next_next_next_next_next_next=0\n  local max_index_next_\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n          \
    \  then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n            fi\n        done\n    done\n    for\
    \ ((k=0; k<len; k++))\n    do\n        if [ ${arr[$k]} -gt ${arr[$((k+1))]} ]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4xzmvn0e.sh: line 47: [: 5: unary operator expected

    /tmp/tmp4xzmvn0e.sh: line 47: [: 10: unary operator expected

    /tmp/tmp4xzmvn0e.sh: line 47: [: 4: unary operator expected

    '
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    local flag1=0\n    local flag2=0\n    local flag3=0\n \
    \   local flag4=0\n    local flag5=0\n    local flag6=0\n    local flag7=0\n \
    \   local flag8=0\n    local flag9=0\n    local flag10=0\n    local flag11=0\n\
    \    local flag12=0\n    local flag13=0\n    local flag14=0\n    local flag15=0\n\
    \    local flag16=0\n    local flag17=0\n    local flag18=0\n    local flag19=0\n\
    \    local flag20=0\n    local flag21=0\n    local flag22=0\n    local flag23=0\n\
    \    local flag24=0\n    local flag25=0\n    local flag26=0\n    local flag27=0\n\
    \    local flag28=0\n    local flag29=0\n    local flag30=0\n    local flag31=0\n\
    \    local flag32=0\n    local flag33=0\n    local flag34=0\n    local flag35=0\n\
    \    local flag36=0\n    local flag37=0\n    local flag38=0\n    local flag39=0\n\
    \    local flag40=0\n    local flag41=0\n    local flag42=0\n    local flag43=0\n\
    \    local flag44=0\n    local flag45=0\n    local flag46=0\n    local flag47=0\n\
    \    local flag48=0\n    local flag49=0\n    local flag50=0\n    local flag51=0\n\
    \    local flag52=0\n    local flag53=0\n    local flag54=0\n    local flag55=0\n\
    \    local flag56=0\n    local flag57=0\n    local flag58=0\n    local flag59=0\n\
    \    local flag60=0\n    local flag61=0\n    local flag62=0\n    local flag63=0\n\
    \    local flag64=0\n    local flag65=0\n    local flag66=0\n\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local i\n\
    \    local j\n    local -i count\n    local -i max\n    local -i max_index\n \
    \   local -i min\n    local -i min_index\n    local -i temp\n    local -i temp_index\n\
    \    local -i temp_count\n    local -i temp_max\n    local -i temp_max_index\n\
    \    local -i temp_min\n    local -i temp_min_index\n    local -i flag\n    local\
    \ -i flag_temp\n    local -i flag_temp_count\n    local -i flag_temp_max\n   \
    \ local -i flag_temp_max_index\n    local -i flag_temp_min\n    local -i flag_temp_min_index\n\
    \    local -i flag_temp_index\n    local -i flag_temp_temp\n    local -i flag_temp_temp_index\n\
    \    local -i flag_temp_temp_count\n    local -i flag_temp_temp_max\n    local\
    \ -i flag_temp_temp_max_index\n    local -i flag_temp_temp_min\n    local -i flag_temp_temp_min_index\n\
    \    local -i flag_temp_temp_flag\n    local -i flag_temp_temp_flag_temp\n   \
    \ local -i flag_temp_temp_flag_temp_count\n    local -i flag_temp_temp_flag_temp_max\n\
    \    local -i flag_temp_temp_flag_temp_max_index\n    local -i flag_temp_temp_flag_temp_min\n\
    \    local -i flag_temp_temp_flag_temp_min_index\n    local -i flag_temp_temp_flag_temp_flag\n\
    \    local -i flag_temp_temp_flag_temp_flag_temp\n    local -i flag_temp_temp_flag_temp_flag_temp_count\n\
    \    local -i flag_temp_temp_flag_temp_flag_temp_max\n    local -i flag_temp_temp_flag_temp_flag_temp_max_index\n\
    \    local -i flag_temp_temp_flag_temp_flag_temp_min\n    local -i flag_temp_temp_flag_temp_flag\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [ $flag -eq 1\
    \ ]\n        then\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 1 ]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n   \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr=($1)\n  local -a\
    \ sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n  local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n  shifted+=(${sorted[0]})\n\
    \  if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=i+1; j<$len; j++ ))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local min=${arr[0]}\n    local min_index=0\n    local temp=0\n    local temp_index=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        if [ ${arr[i]} -lt $min ]\n    \
    \    then\n            min=${arr[i]}\n            min_index=$i\n        fi\n \
    \   done\n    for ((i=0; i<len; i++))\n    do\n        if [ $i -eq $min_index\
    \ ]\n        then\n            continue\n        fi\n        if [ ${arr[i]} -lt\
    \ $min ]\n        then\n            flag=1\n            break\n        fi\n  \
    \  done\n    if [ $flag -eq 1 ]\n    then\n        echo \"false\"\n    else\n\
    \        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            tmp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$tmp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -i n=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i min=0\n  \
    \  local -i min_index=0\n    local -i temp=0\n    local -i flag=0\n    if [[ $n\
    \ -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n    for ((i=0;\
    \ i<n; i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<n; j++)); do\n            if [[ ${arr[j]} -lt $min ]]; then\n            \
    \    min=${arr[j]}\n                min_index=$j\n            fi\n        done\n\
    \        if [[ $min_index -ne $i ]]; then\n            temp=${arr[i]}\n      \
    \      arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n          \
    \  flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -i i j\n\
    \  local -i n=0\n  local -i flag=0\n  arr=($1)\n  n=${#arr[@]}\n  for ((i=0; i<n-1;\
    \ i++))\n  do\n    if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n    then\n      flag=1\n\
    \      break\n    fi\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    if [ ${#arr[@]}\
    \ -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        if [ ${arr[$i]} -gt ${arr[$((i+1))]} ]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local flag=0\n  for\
    \ (( i=0; i<$len; i++ ))\n  do\n    for (( j=i+1; j<$len; j++ ))\n    do\n   \
    \   if [ ${arr[i]} -gt ${arr[j]} ]\n      then\n        temp=${arr[i]}\n     \
    \   arr[i]=${arr[j]}\n        arr[j]=$temp\n      fi\n    done\n  done\n  for\
    \ (( k=0; k<$len; k++ ))\n  do\n    if [ $k -ne ${arr[k]} ]\n    then\n      flag=1\n\
    \      break\n    fi\n  done\n  if [ $flag -eq 0 ]\n  then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i j k\n    local -i len=0\n    local -i flag=0\n    local -i count=0\n    arr=($1)\n\
    \    len=${#arr[@]}\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1;\
    \ j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n   \
    \         then\n                flag=1\n                break\n            fi\n\
    \        done\n        if [[ flag -eq 1 ]]\n        then\n            break\n\
    \        fi\n    done\n    if [[ flag -eq 0 ]]\n    then\n        echo \"true\"\
    \n    else\n        for ((k=0; k<len; k++))\n        do\n            if [[ ${arr[k]}\
    \ -gt ${arr[j]} ]]\n            then\n                count=$((count+1))\n   \
    \         fi\n        done\n        if [[ count -eq 1 ]]\n        then\n     \
    \       echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i j\n    local -i len=0\n    local -i min=0\n    local -i max=0\n    local -i\
    \ min_pos=0\n    local -i max_pos=0\n    local -i min_pos_prev=0\n    local -i\
    \ max_pos_prev=0\n    local -i min_pos_prev_prev=0\n    local -i max_pos_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev=0\n    local -i max_pos_prev_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev_prev=0\n    local -i max_pos_prev_prev_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev_prev_prev=0\n    local -i max_pos_prev_prev_prev_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev_prev_prev_prev=0\n    local -i max_pos_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_pos_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i min_pos_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_pos_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i min_pos_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n    \
    \            temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n           \
    \     arr[$j]=$temp\n                flag=1\n            fi\n        done\n  \
    \  done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n  \
    \              temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n         \
    \       arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local len=${#arr[@]}\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local n=${#arr[@]}\n    local flag=0\n\
    \    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n        do\n\
    \            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n          \
    \      flag=1\n                break\n            fi\n        done\n        if\
    \ [[ $flag -eq 1 ]]\n        then\n            break\n        fi\n    done\n \
    \   if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr=($1)\n  local -i\
    \ len=${#arr[@]}\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i count=0\n\
    \  local -i flag=0\n  local -i min=0\n  local -i min_index=0\n  local -i temp=0\n\
    \  local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n\
    \  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n\
    \  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n\
    \  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n\
    \  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n\
    \  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n\
    \  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n\
    \  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n\
    \  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n\
    \  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n\
    \  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n\
    \  local -i flag46=0\n  local -i flag47=0\n  local -i flag48=0\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=(\"$@\")\n  \
    \  local -a sorted_arr=(\"$@\")\n    local -a temp_arr=(\"$@\")\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local\
    \ -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local n=${#arr[@]}\n    local min=0\n    local min_index=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<n; i++))\n    do\n     \
    \   min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n   \
    \     do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n        \
    \        min=${arr[j]}\n                min_index=$j\n            fi\n       \
    \ done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n\
    \        if [[ $i -gt 0 ]]\n        then\n            if [[ ${arr[i]} -lt ${arr[i-1]}\
    \ ]]\n            then\n                flag=1\n                break\n      \
    \      fi\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo\
    \ \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0;\
    \ k<n; k++))\n    do\n        if [[ ${arr[k]} -ne $((k+1)) ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local is_sorted=1\n\
    \    local is_sorted_after_shift=1\n    local is_sorted_after_shift_2=1\n    local\
    \ is_sorted_after_shift_3=1\n    local is_sorted_after_shift_4=1\n    local is_sorted_after_shift_5=1\n\
    \    local is_sorted_after_shift_6=1\n    local is_sorted_after_shift_7=1\n  \
    \  local is_sorted_after_shift_8=1\n    local is_sorted_after_shift_9=1\n    local\
    \ is_sorted_after_shift_10=1\n    local is_sorted_after_shift_11=1\n    local\
    \ is_sorted_after_shift_12=1\n    local is_sorted_after_shift_13=1\n    local\
    \ is_sorted_after_shift_14=1\n    local is_sorted_after_shift_15=1\n    local\
    \ is_sorted_after_shift_16=1\n    local is_sorted_after_shift_17=1\n    local\
    \ is_sorted_after_shift_18=1\n    local is_sorted_after_shift_19=1\n    local\
    \ is_sorted_after_shift_20=1\n    local is_sorted_after_shift_21=1\n    local\
    \ is_sorted_after_shift_22=1\n    local is_sorted_after_shift_23=1\n    local\
    \ is_sorted_after_shift_24=1\n    local is_sorted_after_shift_25=1\n    local\
    \ is_sorted_after_shift_26=1\n    local is_sorted_after_shift_27=1\n    local\
    \ is_sorted_after_shift_28=1\n    local is_sorted_after_shift_29=1\n    local\
    \ is_sorted_after_shift_30=1\n    local is_sorted_after_shift_31=1\n    local\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local count=0\n    local temp=0\n\
    \    local flag=0\n    if [[ $len -eq 0 ]]; then\n        echo \"true\"\n    \
    \    return\n    fi\n    for (( i=0; i<len; i++ )); do\n        for (( j=i+1;\
    \ j<len; j++ )); do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n  \
    \              temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n         \
    \       arr[$j]=$temp\n                count=$((count+1))\n            fi\n  \
    \      done\n    done\n    if [[ $count -gt 1 ]]; then\n        echo \"false\"\
    \n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local i\n\
    \    local j\n    local k\n    local n\n    local -i count\n    local -i flag\n\
    \    local -i flag1\n    local -i flag2\n    local -i flag3\n    local -i flag4\n\
    \    local -i flag5\n    local -i flag6\n    local -i flag7\n    local -i flag8\n\
    \    local -i flag9\n    local -i flag10\n    local -i flag11\n    local -i flag12\n\
    \    local -i flag13\n    local -i flag14\n    local -i flag15\n    local -i flag16\n\
    \    local -i flag17\n    local -i flag18\n    local -i flag19\n    local -i flag20\n\
    \    local -i flag21\n    local -i flag22\n    local -i flag23\n    local -i flag24\n\
    \    local -i flag25\n    local -i flag26\n    local -i flag27\n    local -i flag28\n\
    \    local -i flag29\n    local -i flag30\n    local -i flag31\n    local -i flag32\n\
    \    local -i flag33\n    local -i flag34\n    local -i flag35\n    local -i flag36\n\
    \    local -i flag37\n    local -i flag38\n    local -i flag39\n    local -i flag40\n\
    \    local -i flag41\n    local -i flag42\n    local -i flag43\n    local -i flag44\n\
    \    local -i flag45\n    local -i flag46\n    local -i flag47\n    local -i flag48\n\
    \    local -i flag49\n    local -i flag50\n    local -i flag51\n    local -i flag52\n\
    \    local -i flag53\n    local -i flag54\n    local -i flag55\n    local -i flag56\n\
    \    local -i flag57\n    local -i flag58\n    local -i flag59\n    local -i flag60\n\
    \    local -i flag61\n    local -i flag62\n    local -i flag63\n    local -i flag64\n\
    \    local -i flag65\n    local -i flag66\n    local -i flag67\n    local -i flag68\n\
    \   \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<n;\
    \ k++))\n    do\n        if [ ${arr[k]} -ne $((k+1)) ]\n        then\n       \
    \     flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local n=${#arr[@]}\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++))\n    do\n\
    \        flag=0\n        for ((j=0; j<n-i-1; j++))\n        do\n            if\
    \ [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n\
    \                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n        \
    \        flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n\
    \        then\n            break\n        fi\n    done\n    for ((k=0; k<n-1;\
    \ k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=i+1; j<$len; j++ ))\n\
    \        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for ((i=0; i<len;\
    \ i++))\n  do\n    for ((j=i+1; j<len; j++))\n    do\n      if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$temp\n        flag=1\n      fi\n    done\n  done\n  if [[ $flag\
    \ -eq 1 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i min=0\n  \
    \  local -i min_index=0\n    local -i flag=0\n    for ((i=0; i<n; i++))\n    do\n\
    \        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -i i\n\
    \  local -i j\n  local -i n\n  local -i min\n  local -i min_index\n  local -i\
    \ temp\n  local -i flag\n  local -i count\n  arr=($1)\n  n=${#arr[@]}\n  flag=0\n\
    \  count=0\n  for ((i=0; i<n; i++))\n  do\n    min=${arr[i]}\n    min_index=$i\n\
    \    for ((j=i+1; j<n; j++))\n    do\n      if [[ ${arr[j]} -lt $min ]]\n    \
    \  then\n        min=${arr[j]}\n        min_index=$j\n      fi\n    done\n   \
    \ if [[ $min_index -ne $i ]]\n    then\n      temp=${arr[i]}\n      arr[i]=${arr[min_index]}\n\
    \      arr[min_index]=$temp\n      count=$((count+1))\n    fi\n  done\n  for ((i=0;\
    \ i<n-1; i++))\n  do\n    if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n    then\n     \
    \ flag=1\n      break\n    fi\n  done\n  if [[ $flag -eq 1 ]]\n  then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  local temp=0\n  local\
    \ count=0\n  for (( i=0; i<len; i++ ))\n  do\n    for (( j=i+1; j<len; j++ ))\n\
    \    do\n      if [[ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[j]}\n        arr[j]=$temp\n        flag=1\n      fi\n  \
    \  done\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo \"true\"\n  else\n \
    \   for (( k=0; k<len; k++ ))\n    do\n      if [[ ${arr[k]} -eq $k ]]\n     \
    \ then\n        count=$((count+1))\n      fi\n    done\n    if [[ $count -eq $len\
    \ ]]\n    then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n\
    \  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local len=${#arr[@]}\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=i+1; j<$len; j++ ))\n\
    \        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [ $flag -eq 1 ]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ N=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    for ((i=0; i<N; i++))\n    do\n        for ((j=i+1; j<N;\
    \ j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n          \
    \  then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n  \
    \              arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0;\
    \ k<N; k++))\n    do\n        if [[ ${arr[k]} -ne $((k+1)) ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local n=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for ((i=0; i<n; i++))\n\
    \  do\n    for ((j=i+1; j<n; j++))\n    do\n      if [ ${arr[i]} -gt ${arr[j]}\
    \ ]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n        arr[j]=$temp\n\
    \        flag=1\n      fi\n    done\n  done\n  if [ $flag -eq 1 ]\n  then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -i i j\n\
    \  local -i len=0\n  local -i max=0\n  local -i min=0\n  local -i max_index=0\n\
    \  local -i min_index=0\n  local -i count=0\n  local -i flag=0\n  local -i flag1=0\n\
    \  local -i flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n\
    \  local -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n\
    \  local -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n\
    \  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n\
    \  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n\
    \  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n\
    \  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n\
    \  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n\
    \  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n\
    \  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n\
    \  local -i flag42=0\n  local -i flag43=0\n  local -i flag44=0\n  local -i flag45=0\n\
    \  local -i flag46=0\n  local -i flag47=0\n  local -i flag48=0\n  local -i flag49\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++))\n    do\n\
    \        flag=0\n        for ((j=0; j<n-i-1; j++))\n        do\n            if\
    \ [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n\
    \                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n        \
    \        flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n\
    \        then\n            break\n        fi\n    done\n    for ((k=0; k<n-1;\
    \ k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    arr=($1)\n\
    \    local -i len=${#arr[@]}\n    local -i i\n    local -i j\n    local -i k\n\
    \    local -i count\n    local -i flag=0\n    for ((i=0; i<len; i++))\n    do\n\
    \        count=0\n        for ((j=0; j<len; j++))\n        do\n            if\
    \ [[ ${arr[$j]} -lt ${arr[$i]} ]]\n            then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count -eq $i ]]\n        then\n\
    \            flag=1\n        else\n            flag=0\n            break\n   \
    \     fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(\"${sorted[0]}\"\
    )\n    if [[ \"${shifted[@]}\" == \"${sorted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    local n=${#arr[@]}\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    while [\
    \ $i -lt $len ]\n    do\n        j=$((i+1))\n        while [ $j -lt $len ]\n \
    \       do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n \
    \               temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n        \
    \        arr[$j]=$temp\n            fi\n            j=$((j+1))\n        done\n\
    \        i=$((i+1))\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local flag=0\n  for\
    \ ((i=0; i<len; i++))\n  do\n    for ((j=i+1; j<len; j++))\n    do\n      if [[\
    \ ${arr[i]} -gt ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$temp\n      fi\n    done\n  done\n  for ((k=0; k<len; k++))\n\
    \  do\n    if [[ ${arr[k]} -ne $k+1 ]]\n    then\n      flag=1\n      break\n\
    \    fi\n  done\n  if [[ $flag -eq 0 ]]\n  then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -a\
    \ sorted_arr\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n\
    \    local -i flag\n    local -i temp\n    local -i count\n    arr=($1)\n    sorted_arr=($1)\n\
    \    n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [[ ${sorted_arr[$i]} -gt ${sorted_arr[$j]}\
    \ ]]\n            then\n                temp=${sorted_arr[$i]}\n             \
    \   sorted_arr[$i]=${sorted_arr[$j]}\n                sorted_arr[$j]=$temp\n \
    \           fi\n        done\n    done\n    for ((i=0; i<n; i++))\n    do\n  \
    \      if [[ ${arr[$i]} -ne ${sorted_arr[$i]} ]]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        for ((i=0; i<n; i++))\n        do\n            if [[ ${arr[$i]} -eq ${sorted_arr[$n-1]}\
    \ ]]\n            then\n                for ((j=i; j<n-1; j++))\n            \
    \    do\n                    arr[$j]=${arr[$j+1]}\n                done\n    \
    \            arr[$n-1]=${sorted_arr[$n-1]}\n                for ((k=0; k<n; k++))\n\
    \                do\n                    if [[ ${arr[$k]} -ne ${sorted_arr[$k]}\
    \ ]]\n                    then\n                        flag=0\n             \
    \           break\n                    fi\n                done\n            \
    \    if [[ $flag -eq 1 ]]\n                then\n                    count=1\n\
    \                    break\n                fi\n            fi\n        done\n\
    \    else\n        count=1\n    fi\n    if [[ $count -eq 1 ]]\n    then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted2=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort -n))\n    local -a shifted3=($(echo \"${arr[@]}\" | tr\
    \ ' ' '\\n' | sort -n))\n    local -a shifted4=($(echo \"${arr[@]}\" | tr ' '\
    \ '\\n' | sort -n))\n    local -a shifted5=($(echo \"${arr[@]}\" | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted6=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort\
    \ -n))\n    local -a shifted7=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n\
    \    local -a shifted8=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local\
    \ -a shifted9=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted10=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted11=($(echo \"\
    ${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted12=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort -n))\n    local -a shifted13=($(echo \"${arr[@]}\" | tr\
    \ ' ' '\\n' | sort -n))\n    local -a shifted14=($(echo \"${arr[@]}\" | tr ' '\
    \ '\\n' | sort -n))\n    local -a shifted15=($(echo \"${arr[@]}\" | tr ' ' '\\\
    n' | sort -n))\n    local -a shifted16=(\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfur32vfl.sh: line 46: syntax error near unexpected token `(''

    /tmp/tmpfur32vfl.sh: line 46: `candidate() {''

    /tmp/tmpfur32vfl.sh: line 47: move_one_ball: command not found

    /tmp/tmpfur32vfl.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpfur32vfl.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_idx=0\n\
    \    local tmp=0\n    for ((i=0; i<len; i++))\n    do\n        min=${arr[i]}\n\
    \        min_idx=$i\n        for ((j=i+1; j<len; j++))\n        do\n         \
    \   if [[ ${arr[j]} -lt $min ]]\n            then\n                min=${arr[j]}\n\
    \                min_idx=$j\n            fi\n        done\n        if [[ $min_idx\
    \ -ne $i ]]\n        then\n            tmp=${arr[i]}\n            arr[i]=${arr[min_idx]}\n\
    \            arr[min_idx]=$tmp\n        fi\n    done\n    for ((i=0; i<len-1;\
    \ i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n        then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    local count=0\n    local result=0\n    for (( i=0; i<len;\
    \ i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n        do\n          \
    \  if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    for (( k=0; k<len; k++ ))\n    do\n        if [ $k\
    \ -eq ${arr[k]} ]\n        then\n            flag=1\n        else\n          \
    \  flag=0\n            break\n        fi\n    done\n    if [ $flag -eq 1 ]\n \
    \   then\n        result=1\n    else\n        result=0\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=i+1; j<$len; j++ ))\n\
    \        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    len=${#arr[@]}\n\
    \    if [ $len -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n\
    \    for ((i=0; i<$len; i++)); do\n        if [ ${arr[$i]} -gt ${arr[$((i+1))]}\
    \ ]; then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len;\
    \ j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<len;\
    \ k++))\n    do\n        if [ ${arr[k]} -ne $((k+1)) ]\n        then\n       \
    \     flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n    for ((i=0; i<n-1; i++))\n\
    \    do\n        for ((j=0; j<n-i-1; j++))\n        do\n            if [[ ${arr[j]}\
    \ -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n     \
    \           arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n             \
    \   flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n     \
    \   then\n            break\n        fi\n    done\n    for ((k=0; k<n-1; k++))\n\
    \    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n          \
    \  echo \"false\"\n            return\n        fi\n    done\n    echo \"true\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local temp=0\n\
    \    local flag=0\n    local flag1=0\n    local flag2=0\n    local flag3=0\n \
    \   local flag4=0\n    local flag5=0\n    local flag6=0\n    local flag7=0\n \
    \   local flag8=0\n    local flag9=0\n    local flag10=0\n    local flag11=0\n\
    \    local flag12=0\n    local flag13=0\n    local flag14=0\n    local flag15=0\n\
    \    local flag16=0\n    local flag17=0\n    local flag18=0\n    local flag19=0\n\
    \    local flag20=0\n    local flag21=0\n    local flag22=0\n    local flag23=0\n\
    \    local flag24=0\n    local flag25=0\n    local flag26=0\n    local flag27=0\n\
    \    local flag28=0\n    local flag29=0\n    local flag30=0\n    local flag31=0\n\
    \    local flag32=0\n    local flag33=0\n    local flag34=0\n    local flag35=0\n\
    \    local flag36=0\n    local flag37=0\n    local flag38=0\n    local flag39=0\n\
    \    local flag40=0\n    local flag41=0\n    local flag42=0\n    local flag43=0\n\
    \    local flag44=0\n    local flag45=0\n    local flag46=0\n    local flag47=0\n\
    \    local flag48=0\n    local flag49=0\n    local flag50=0\n    local flag51=0\n\
    \    local flag52=0\n    local flag53=0\n    local flag54=0\n    local flag55=0\n\
    \    local flag56=0\n    local flag57=0\n    local flag58=0\n    local flag59=0\n\
    \    local flag60=0\n    local flag61=0\n    local flag62=0\n    local flag63=0\n\
    \    local flag64=0\n    local flag65=0\n    local flag66=0\n\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local n=${#arr[@]}\n    local temp=0\n    for ((i=0;\
    \ i<n-1; i++))\n    do\n        for ((j=0; j<n-i-1; j++))\n        do\n      \
    \      if [ ${arr[j]} -gt ${arr[$((j+1))]} ]\n            then\n             \
    \   temp=${arr[j]}\n                arr[$j]=${arr[$((j+1))]}\n               \
    \ arr[$((j+1))]=$temp\n            fi\n        done\n    done\n    if [ ${arr[0]}\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local tmp=0\n  local flag=0\n  local\
    \ ret=0\n  if [ $len -eq 0 ]; then\n    echo \"true\"\n    return\n  fi\n  for\
    \ ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [ ${arr[$i]}\
    \ -gt ${arr[$j]} ]; then\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n\
    \        arr[$j]=$tmp\n        flag=1\n      fi\n    done\n  done\n  if [ $flag\
    \ -eq 0 ]; then\n    echo \"true\"\n    return\n  fi\n  for ((i=0; i<len; i++));\
    \ do\n    for ((j=i+1; j<len; j++)); do\n      if [ ${arr[$i]} -gt ${arr[$j]}\
    \ ]; then\n        echo \"false\"\n        return\n      fi\n    done\n  done\n\
    \  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -a\
    \ sorted\n    local -a diff\n    local i\n    local j\n    local k\n    local\
    \ flag\n    arr=($1)\n    sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n\
    \    diff=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} != ${sorted[$i]} ]];\
    \ then\n            flag=0\n            for ((j=i+1; j<${#arr[@]}; j++)); do\n\
    \                if [[ ${arr[$j]} == ${sorted[$i]} ]]; then\n                \
    \    flag=1\n                    break\n                fi\n            done\n\
    \            if [[ $flag -eq 0 ]]; then\n                echo \"false\"\n    \
    \            return\n            fi\n            for ((k=j; k>i; k--)); do\n \
    \               arr[$k]=${arr[$k-1]}\n            done\n            arr[$i]=${sorted[$i]}\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=(\"$@\")\n  \
    \  local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local\
    \ -a shifted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a tmp\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n\
    \    local -i count=0\n    local -i flag=0\n    local -i flag1=0\n    local -i\
    \ flag2=0\n    local -i flag3=0\n    local -i flag4=0\n    local -i flag5=0\n\
    \    local -i flag6=0\n    local -i flag7=0\n    local -i flag8=0\n    local -i\
    \ flag9=0\n    local -i flag10=0\n    local -i flag11=0\n    local -i flag12=0\n\
    \    local -i flag13=0\n    local -i flag14=0\n    local -i flag15=0\n    local\
    \ -i flag16=0\n    local -i flag17=0\n    local -i flag18=0\n    local -i flag19=0\n\
    \    local -i flag20=0\n    local -i flag21=0\n    local -i flag22=0\n    local\
    \ -i flag23=0\n    local -i flag24=0\n    local -i flag25=0\n    local -i flag26=0\n\
    \    local -i flag27=0\n    local -i flag28=0\n    local -i flag29=0\n    local\
    \ -i flag30=0\n    local -i flag31=0\n    local -i flag32=0\n    local -i flag33=0\n\
    \    local -i flag34=0\n    local -i flag35=0\n    local -i flag36=0\n    local\
    \ -i flag37=0\n    local -i flag38=0\n    local -i flag39=0\n    local -i flag40=0\n\
    \    local -i flag41=0\n    local -i flag42=0\n    local -\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local n=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        if [ ${arr[i]} -gt ${arr[i+1]} ]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=i+1; j<$len; j++ ))\n\
    \        do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<${#arr[@]};\
    \ i++))\n    do\n        for ((j=i+1; j<${#arr[@]}; j++))\n        do\n      \
    \      if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n                temp=${arr[$i]}\n\
    \                arr[$i]=${arr[$j]}\n                arr[$j]=$temp\n         \
    \       flag=1\n            fi\n        done\n    done\n    if [[ $flag -eq 1\
    \ ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    local flag=0\n    if [ $len -eq\
    \ 0 ]; then\n        echo \"true\"\n        return\n    fi\n    for ((i=0; i<len;\
    \ i++)); do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [ ${arr[j]} -lt $min ]; then\n            \
    \    min=${arr[j]}\n                min_index=$j\n            fi\n        done\n\
    \        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n        arr[min_index]=$temp\n\
    \    done\n    for ((k=0; k<len-1; k++)); do\n        if [ ${arr[k]} -gt ${arr[k+1]}\
    \ ]; then\n            flag=1\n            break\n        fi\n    done\n    if\
    \ [ $flag -eq 1 ]; then\n        echo \"false\"\n    else\n        echo \"true\"\
    \n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n\
    \  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local\
    \ gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n\
    \  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local\
    \ rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n\
    \  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local\
    \ ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n\
    \  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n \
    \ local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local\
    \ sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n\
    \  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n  local cccc=0\n\
    \  local dddd=0\n  local eeee=0\n  local f\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local flag=0\n    local n=${#arr[@]}\n\
    \    local temp=0\n    for (( i=0; i<n; i++ ))\n    do\n        for (( j=i+1;\
    \ j<n; j++ ))\n        do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n  \
    \          then\n                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n\
    \                arr[$j]=$temp\n            fi\n        done\n    done\n    for\
    \ (( k=0; k<n; k++ ))\n    do\n        if [[ ${arr[$k]} -ne $k+1 ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 0 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  arr=($1)\n \
    \ local -a sorted\n  sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n  local\
    \ -a shifted\n  shifted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n | tail -n +2\
    \ | tr '\\n' ' '))\n  shifted=(${shifted[@]} ${arr[0]})\n  if [[ \"${sorted[@]}\"\
    \ == \"${shifted[@]}\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -i len=${#arr[@]}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n  \
    \  local -i min=0\n    local -i min_index=0\n    local -i temp=0\n    local -i\
    \ flag=0\n    for ((i=0; i<len; i++))\n    do\n        min=arr[i]\n        min_index=i\n\
    \        for ((j=i+1; j<len; j++))\n        do\n            if [ ${arr[j]} -lt\
    \ $min ]\n            then\n                min=${arr[j]}\n                min_index=j\n\
    \            fi\n        done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n\
    \        arr[min_index]=$temp\n    done\n    for ((k=0; k<len-1; k++))\n    do\n\
    \        if [ ${arr[k]} -gt ${arr[k+1]} ]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [ $flag -eq 1 ]\n    then\n \
    \       echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++))\n    do\n\
    \        flag=0\n        for ((j=0; j<n-i-1; j++))\n        do\n            if\
    \ [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n\
    \                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n        \
    \        flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n\
    \        then\n            break\n        fi\n    done\n    for ((k=0; k<n-1;\
    \ k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local flag=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [ $flag -eq 1\
    \ ]\n        then\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 1 ]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n   \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local flag=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                flag=1\n\
    \                break\n            fi\n        done\n        if [ $flag -eq 1\
    \ ]\n        then\n            break\n        fi\n    done\n    if [ $flag -eq\
    \ 1 ]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n   \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local min=0\n    local min_index=0\n\
    \    local temp=0\n    local flag=0\n    for ((i=0; i<len; i++))\n    do\n   \
    \     min=${arr[i]}\n        min_index=$i\n        for ((j=i+1; j<len; j++))\n\
    \        do\n            if [[ ${arr[j]} -lt $min ]]\n            then\n     \
    \           min=${arr[j]}\n                min_index=$j\n            fi\n    \
    \    done\n        if [[ $min_index -ne $i ]]\n        then\n            temp=${arr[i]}\n\
    \            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n    \
    \        flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    local -i count\n    local -i count_max\n    local -i count_min\n\
    \    local -i count_min_index\n    local -i count_max_index\n    local -i count_temp\n\
    \    local -i count_temp_index\n    local -i count_temp_max\n    local -i count_temp_max_index\n\
    \    local -i count_temp_min\n    local -i count_temp_min_index\n    local -i\
    \ count_temp_max_index\n    local -i count_temp_min_index\n    local -i count_temp_max_index\n\
    \    local -i count_temp_min_index\n    local -i count_temp_max_index\n    local\
    \ -i count_temp_min_index\n    local -i count_temp_max_index\n    local -i count_temp_min_index\n\
    \    local -i count_temp_max_index\n    local -i count_temp_min_index\n    local\
    \ -i count_temp_max_index\n    local -i count_temp_min_index\n    local -i count_temp_max_index\n\
    \    local -i count_temp_min_index\n    local -i count_temp_max_index\n    local\
    \ -i count_temp_min_index\n    local -i count_temp_max_index\n    local -i count_temp_min_index\n\
    \    local -i count_temp_max_index\n    local -i count_temp_min_index\n    local\
    \ -i count_temp_max_index\n    local -i count_temp_min_index\n    local -i count_temp_max_index\n\
    \    local -i count_temp_min_index\n    local -i count_temp_max_index\n    local\
    \ -i count_temp_min_index\n    local -i count_temp_max_index\n    local -i count_temp_min_index\n\
    \    local -i count_temp_max_index\n    local -i count_temp_min_index\n    local\
    \ -i count\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2))\n    shifted+=(${sorted[0]})\n\
    \    if [[ \"${sorted[@]}\" == \"${shifted[@]}\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n))\n    local -a temp=($(echo ${arr[@]} |\
    \ tr ' ' '\\n' | sort -n))\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n  \
    \              temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n         \
    \       arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n  \
    \  local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n\
    \    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n\
    \    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n\
    \    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n\
    \    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n\
    \    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local\
    \ eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n\
    \    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local\
    \ nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n\
    \    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local\
    \ www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n\
    \    local bbbb=0\n    local cccc=0\n    local dddd=0\n\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local tmp=0\n  local flag=0\n  for (( i=0; i<len;\
    \ i++ ))\n  do\n    for (( j=i+1; j<len; j++ ))\n    do\n      if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]\n      then\n        tmp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$tmp\n        flag=1\n      fi\n    done\n  done\n  if [[ $flag\
    \ -eq 0 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local len=${#arr[@]}\n    local flag=0\n\
    \    local temp=0\n    local count=0\n    for ((i=0; i<len; i++))\n    do\n  \
    \      for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n           \
    \     arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n       \
    \ done\n    done\n    for ((k=0; k<len; k++))\n    do\n        if [[ ${arr[k]}\
    \ -eq $((k+1)) ]]\n        then\n            flag=1\n        else\n          \
    \  flag=0\n            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i min\n    local\
    \ -i min_index\n    local -i temp\n    local -i flag\n    arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n\
    \        for ((j=i+1; j<n; j++))\n        do\n            if [[ ${arr[j]} -lt\
    \ $min ]]\n            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        temp=${arr[i]}\n        arr[i]=${arr[min_index]}\n\
    \        arr[min_index]=$temp\n    done\n    flag=1\n    for ((k=0; k<n-1; k++))\n\
    \    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n          \
    \  flag=0\n            break\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    for ((i=0; i<n-1; i++))\n    do\n\
    \        flag=0\n        for ((j=0; j<n-i-1; j++))\n        do\n            if\
    \ [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n                temp=${arr[j]}\n\
    \                arr[j]=${arr[j+1]}\n                arr[j+1]=$temp\n        \
    \        flag=1\n            fi\n        done\n        if [[ $flag -eq 0 ]]\n\
    \        then\n            break\n        fi\n    done\n    for ((k=0; k<n-1;\
    \ k++))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n        then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$((i+1))]} ]]; then\n        \
    \    arr[$i]=${arr[$((i+1))]}\n            arr[$((i+1))]=${arr[$i]}\n        fi\n\
    \    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for (( i=0;\
    \ i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n        do\n   \
    \         if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i temp\n    local\
    \ -i flag\n    arr=($1)\n    n=${#arr[@]}\n    flag=0\n    for ((i=0; i<n-1; i++))\n\
    \    do\n        if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n        then\n          \
    \  flag=1\n            break\n        fi\n    done\n    if [[ $flag -eq 0 ]]\n\
    \    then\n        echo \"true\"\n    else\n        for ((i=0; i<n-1; i++))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[i+1]}\n        \
    \        arr[i+1]=$temp\n                for ((j=0; j<n-1; j++))\n           \
    \     do\n                    if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n           \
    \         then\n                        echo \"false\"\n                     \
    \   return\n                    fi\n                done\n                echo\
    \ \"true\"\n                return\n            fi\n        done\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    local count=0\n    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1;\
    \ j<len; j++))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n   \
    \         then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n                flag=1\n            fi\n      \
    \  done\n        if [[ $flag -eq 1 ]]\n        then\n            count=$((count+1))\n\
    \            flag=0\n        fi\n    done\n    if [[ $count -eq 1 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for (( i=0;\
    \ i<len; i++ ))\n    do\n        for (( j=0; j<len-i-1; j++ ))\n        do\n \
    \           if [[ ${arr[j]} -gt ${arr[$((j+1))]} ]]\n            then\n      \
    \          temp=${arr[j]}\n                arr[$j]=${arr[$((j+1))]}\n        \
    \        arr[$((j+1))]=$temp\n            fi\n        done\n    done\n    echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<$len; i++ ))\n    do\n        for (( j=0; j<$len-1; j++ ))\n\
    \        do\n            if [[ ${arr[j]} -gt ${arr[j+1]} ]]\n            then\n\
    \                temp=${arr[j]}\n                arr[j]=${arr[j+1]}\n        \
    \        arr[j+1]=$temp\n                flag=1\n            fi\n        done\n\
    \        if [[ $flag -eq 0 ]]\n        then\n            break\n        fi\n \
    \   done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a\
    \ shifted_arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n\
    \    local -a shifted_arr_sorted=($(echo \"${shifted_arr[@]}\" | tr ' ' '\\n'\
    \ | sort -n))\n    if [[ \"${sorted_arr[@]}\" == \"${shifted_arr_sorted[@]}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    for (( i=0; i<n; i++ ))\n    do\n        for (( j=i+1;\
    \ j<n; j++ ))\n        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n    \
    \        then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    for\
    \ (( k=0; k<n-1; k++ ))\n    do\n        if [[ ${arr[k]} -gt ${arr[k+1]} ]]\n\
    \        then\n            flag=1\n            break\n        fi\n    done\n \
    \   if [[ $flag -eq 1 ]]\n    then\n        echo \"false\"\n    else\n       \
    \ echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n      \
    \          temp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$temp\n\
    \                flag=1\n            fi\n        done\n    done\n    if [ $flag\
    \ -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for (( i=0; i<len;\
    \ i++ ))\n  do\n    for (( j=i+1; j<len; j++ ))\n    do\n      if [[ ${arr[$i]}\
    \ -gt ${arr[$j]} ]]\n      then\n        temp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n\
    \        arr[$j]=$temp\n        flag=1\n      fi\n    done\n  done\n  if [[ $flag\
    \ -eq 1 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -i i\n\
    \  local -i j\n  local -i min\n  local -i min_index\n  local -i n\n  local -i\
    \ temp\n  arr=($1)\n  n=${#arr[@]}\n  for ((i=0; i<n-1; i++))\n  do\n    min=${arr[i]}\n\
    \    min_index=$i\n    for ((j=i+1; j<n; j++))\n    do\n      if [[ ${arr[j]}\
    \ -lt $min ]]\n      then\n        min=${arr[j]}\n        min_index=$j\n     \
    \ fi\n    done\n    temp=${arr[i]}\n    arr[i]=${arr[min_index]}\n    arr[min_index]=$temp\n\
    \  done\n  for ((i=0; i<n-1; i++))\n  do\n    if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n    then\n      echo \"false\"\n      return\n    fi\n  done\n  echo \"\
    true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    if [[ ${arr[0]} -eq 1 ]]\n    then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=(\"$@\")\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local n=${#arr[@]}\n    local flag=0\n\
    \    for ((i=0; i<n-1; i++))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local len=${#arr[@]}\n\
    \  local i=0\n  local j=0\n  local temp=0\n  local flag=0\n  for ((i=0; i<len;\
    \ i++))\n  do\n    for ((j=i+1; j<len; j++))\n    do\n      if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]\n      then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n\
    \        arr[j]=$temp\n        flag=1\n      fi\n    done\n  done\n  if [[ $flag\
    \ -eq 1 ]]\n  then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n        do\n      \
    \      if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr=($1)\n  local -a\
    \ sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n  local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  local -a shifted_sorted=($(echo\
    \ \"${shifted[@]}\" | tr ' ' '\\n' | sort -n))\n  if [[ \"${sorted[@]}\" == \"\
    ${arr[@]}\" ]]; then\n    echo \"true\"\n  elif [[ \"${shifted_sorted[@]}\" ==\
    \ \"${sorted[@]}\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    local flag=0\n    for ((i=0; i<n;\
    \ i++))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<n; j++))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n          \
    \  then\n                min=${arr[j]}\n                min_index=$j\n       \
    \     fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n   \
    \         temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n            arr[min_index]=$temp\n\
    \            flag=1\n        fi\n    done\n    if [[ $flag -eq 1 ]]\n    then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2 | head -n -1))\n    if [[\
    \ \"${arr[@]}\" == \"${sorted[@]}\" ]]; then\n        echo \"true\"\n    elif\
    \ [[ \"${shifted[@]}\" == \"${sorted[@]}\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            tmp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$tmp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -a\
    \ sorted_arr\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n\
    \    local -i temp\n    local -i flag\n    arr=($1)\n    sorted_arr=($1)\n   \
    \ n=${#arr[@]}\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n; j++))\n\
    \        do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<n;\
    \ k++))\n    do\n        if [[ ${arr[k]} -ne ${sorted_arr[k]} ]]\n        then\n\
    \            flag=1\n            break\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n    local flag=0\n\
    \    for (( i=0; i<len; i++ )); do\n        for (( j=i+1; j<len; j++ )); do\n\
    \            if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n             \
    \   flag=1\n            fi\n        done\n    done\n    if [[ $flag -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    local -a shifted_sorted=($(echo\
    \ \"${shifted[@]}\" | tr ' ' '\\n' | sort -n))\n    if [[ \"${sorted[@]}\" ==\
    \ \"${arr[@]}\" ]]; then\n        echo \"true\"\n    elif [[ \"${shifted_sorted[@]}\"\
    \ == \"${sorted[@]}\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local sorted=($(echo\
    \ ${arr[@]} | tr ' ' '\\n' | sort -n))\n  local i=0\n  local j=0\n  local k=0\n\
    \  local len=${#arr[@]}\n  local flag=0\n  while [ $i -lt $len ]\n  do\n    if\
    \ [ ${arr[$i]} -eq ${sorted[$i]} ]\n    then\n      i=$((i+1))\n    else\n   \
    \   j=$((i+1))\n      while [ $j -lt $len ]\n      do\n        if [ ${arr[$j]}\
    \ -eq ${sorted[$i]} ]\n        then\n          k=$j\n          while [ $k -gt\
    \ $i ]\n          do\n            arr[$k]=${arr[$((k-1))]}\n            k=$((k-1))\n\
    \          done\n          arr[$i]=${sorted[$i]}\n          flag=1\n         \
    \ break\n        fi\n        j=$((j+1))\n      done\n      if [ $flag -eq 0 ]\n\
    \      then\n        echo \"false\"\n        return\n      fi\n      i=$((i+1))\n\
    \    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<len; i++ ))\n    do\n        for (( j=i+1; j<len; j++ ))\n\
    \        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n  \
    \              temp=${arr[i]}\n                arr[i]=${arr[j]}\n            \
    \    arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [ $flag -eq 0 ]\n    then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for (( i=0; i<n-1; i++ ))\n    do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]\n        then\n            flag=1\n            break\n        fi\n    done\n\
    \    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i j\n    local -i n\n    local -i max\n    local -i max_index\n    local -i\
    \ min\n    local -i min_index\n    local -i shift_count\n    local -i shift_index\n\
    \    local -i shift_max\n    local -i shift_min\n    local -i shift_min_index\n\
    \    local -i shift_max_index\n    local -i shift_max_count\n    local -i shift_min_count\n\
    \    local -i shift_max_index_count\n    local -i shift_min_index_count\n    local\
    \ -i shift_max_index_count_max\n    local -i shift_min_index_count_max\n    local\
    \ -i shift_max_index_count_min\n    local -i shift_min_index_count_min\n    local\
    \ -i shift_max_index_count_max_index\n    local -i shift_min_index_count_max_index\n\
    \    local -i shift_max_index_count_min_index\n    local -i shift_min_index_count_min_index\n\
    \    local -i shift_max_index_count_max_index_count\n    local -i shift_min_index_count_max_index_count\n\
    \    local -i shift_max_index_count_min_index_count\n    local -i shift_min_index_count_min_index_count\n\
    \    local -i shift_max_index_count_max_index_count_max\n    local -i shift_min_index_count_max_index_count_max\n\
    \    local -i shift_max_index_count_min_index_count_max\n    local -i shift_min_index_count_min_index_count_max\n\
    \    local -i shift_max_index_count_max_index_count_min\n    local -i shift_min_index_count_max_index_count_min\n\
    \    local -i shift_max_index_count_min_index_count_min\n    local -i shift_min_index_count_min_index_count_min\n\
    \    local -i shift_max_index_count_max_index_\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    for ((i=0; i<len; i++))\n    do\n\
    \        min=${arr[$i]}\n        min_index=$i\n        for ((j=$i; j<len; j++))\n\
    \        do\n            if [[ ${arr[$j]} -lt $min ]]\n            then\n    \
    \            min=${arr[$j]}\n                min_index=$j\n            fi\n  \
    \      done\n        if [[ $min_index -ne $i ]]\n        then\n            for\
    \ ((k=$min_index; k>$i; k--))\n            do\n                temp=${arr[$k]}\n\
    \                arr[$k]=${arr[$k-1]}\n                arr[$k-1]=$temp\n     \
    \       done\n        fi\n    done\n    for ((i=0; i<len-1; i++))\n    do\n  \
    \      if [[ ${arr[$i]} -gt ${arr[$i+1]} ]]\n        then\n            echo \"\
    false\"\n            exit 0\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local flag=0\n\
    \    local temp=0\n    for ((i=0; i<n; i++))\n    do\n        for ((j=i+1; j<n;\
    \ j++))\n        do\n            if [ ${arr[i]} -gt ${arr[j]} ]\n            then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((k=0; k<n;\
    \ k++))\n    do\n        if [ ${arr[k]} -ne $((k+1)) ]\n        then\n       \
    \     flag=1\n            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted_sorted_shifted=(\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpxe92cc7m.sh: line 41: syntax error near unexpected token `(''

    /tmp/tmpxe92cc7m.sh: line 41: `candidate() {''

    /tmp/tmpxe92cc7m.sh: line 42: move_one_ball: command not found

    /tmp/tmpxe92cc7m.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpxe92cc7m.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local k=0\n    local min=0\n\
    \    local min_index=0\n    local temp=0\n    local flag=0\n    for (( i=0; i<len;\
    \ i++ ))\n    do\n        min=${arr[i]}\n        min_index=$i\n        for ((\
    \ j=i+1; j<len; j++ ))\n        do\n            if [[ ${arr[j]} -lt $min ]]\n\
    \            then\n                min=${arr[j]}\n                min_index=$j\n\
    \            fi\n        done\n        if [[ $min_index -ne $i ]]\n        then\n\
    \            temp=${arr[i]}\n            arr[i]=${arr[min_index]}\n          \
    \  arr[min_index]=$temp\n            flag=1\n        fi\n    done\n    if [[ $flag\
    \ -eq 1 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<$len; i++))\n    do\n        for ((j=i+1; j<$len; j++))\n  \
    \      do\n            if [[ ${arr[$i]} -gt ${arr[$j]} ]]\n            then\n\
    \                temp=${arr[$i]}\n                arr[$i]=${arr[$j]}\n       \
    \         arr[$j]=$temp\n                flag=1\n            fi\n        done\n\
    \    done\n    if [[ $flag -eq 0 ]]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local flag=0\n    local temp=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i n\n    local -i tmp\n    local\
    \ -i flag\n    local -i flag1\n    local -i flag2\n    local -i flag3\n    local\
    \ -i flag4\n    local -i flag5\n    local -i flag6\n    local -i flag7\n    local\
    \ -i flag8\n    local -i flag9\n    local -i flag10\n    local -i flag11\n   \
    \ local -i flag12\n    local -i flag13\n    local -i flag14\n    local -i flag15\n\
    \    local -i flag16\n    local -i flag17\n    local -i flag18\n    local -i flag19\n\
    \    local -i flag20\n    local -i flag21\n    local -i flag22\n    local -i flag23\n\
    \    local -i flag24\n    local -i flag25\n    local -i flag26\n    local -i flag27\n\
    \    local -i flag28\n    local -i flag29\n    local -i flag30\n    local -i flag31\n\
    \    local -i flag32\n    local -i flag33\n    local -i flag34\n    local -i flag35\n\
    \    local -i flag36\n    local -i flag37\n    local -i flag38\n    local -i flag39\n\
    \    local -i flag40\n    local -i flag41\n    local -i flag42\n    local -i flag43\n\
    \    local -i flag44\n    local -i flag45\n    local -i flag46\n    local -i flag47\n\
    \    local -i flag48\n    local -i flag49\n    local -i flag50\n    local -i flag51\n\
    \    local -i flag52\n    local -i flag53\n    local -i flag54\n    local -i flag55\n\
    \    local -i flag56\n    local -i flag57\n    local -i flag58\n    local -i flag59\n\
    \    local -i flag60\n    local -i flag61\n    local -i flag62\n    local -i flag63\n\
    \    local -i flag64\n    local -i flag65\n    local -i flag66\n    local -i flag67\n\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014693
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ len=${#arr[@]}\n    local i=0\n    local j=0\n    local temp=0\n    local flag=0\n\
    \    for ((i=0; i<len; i++))\n    do\n        for ((j=i+1; j<len; j++))\n    \
    \    do\n            if [[ ${arr[i]} -gt ${arr[j]} ]]\n            then\n    \
    \            temp=${arr[i]}\n                arr[i]=${arr[j]}\n              \
    \  arr[j]=$temp\n                flag=1\n            fi\n        done\n    done\n\
    \    if [[ $flag -eq 1 ]]\n    then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014692
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_shifted_shifted_sorted_shifted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n    local -a shifted_shifted_shifted_shifted_shifted_shifted_sorted=($(echo\
    \ \"${arr[@]}\" | tr\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp63q_7v8i.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmp63q_7v8i.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660014693
