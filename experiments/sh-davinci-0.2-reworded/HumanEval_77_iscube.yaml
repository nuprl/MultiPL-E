name: HumanEval_77_iscube
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
  \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
  \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n#\
  \ >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube\
  \ \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\"\
  )\n# \"false\"\n#\n# $1 is an integer\niscube() {\n"
tests: "}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
  \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
  \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
  \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    if [ $1 -eq 0 ]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi", "    local a=$1\n    local b=0\n    local c=0\n  \
    \  while [ $b -le $a ]; do\n        c=$(($b*$b*$b))\n        if [ $c -eq $a ];\
    \ then\n            echo \"true\"\n            return\n        fi\n        b=$(($b+1))\n\
    \    done\n    echo \"false\"", "    if [ $1 -eq 0 ]; then\n        echo \"true\"\
    \n    else\n        # Calculate the cube root of $1\n        cube_root=$(echo\
    \ \"scale=0; $1^(1/3)\" | bc -l)\n        # Calculate the cube of the cube root\n\
    \        cube=$(echo \"$cube_root^3\" | bc -l)\n        # Compare the cube with\
    \ the original number\n        if [ $cube -eq $1 ]; then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    fi", "    if\
    \ [ $1 -eq 0 ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n   \
    \     echo \"true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n   \
    \ else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq\
    \ $1 ]; then\n                echo \"true\"\n                return\n        \
    \    fi\n        done\n        echo \"false\"\n    fi", "    if [ $1 -eq 0 ];\
    \ then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"true\"\
    \n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i)) -eq\
    \ $1 ]; then\n                echo \"true\"\n                return\n        \
    \    fi\n        done\n        echo \"false\"\n    fi", "    local a=$1\n    local\
    \ b=$(echo \"scale=0; sqrt($a)\" | bc)\n    local c=$(echo \"scale=0; $b * $b\
    \ * $b\" | bc)\n    if [ $a -eq $c ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    if [ $1 -eq 0 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq\
    \ -1 ]; then\n        echo \"true\"\n    else\n        for ((i=1; i<=$1; i++));\
    \ do\n            if [ $((i*i*i)) -eq $1 ]; then\n                echo \"true\"\
    \n                break\n            elif [ $((i*i*i)) -gt $1 ]; then\n      \
    \          echo \"false\"\n                break\n            fi\n        done\n\
    \    fi", "    if [ $1 -eq 0 ]; then\n        echo \"true\"\n    elif [ $1 -lt\
    \ 0 ]; then\n        echo \"true\"\n    else\n        for i in $(seq 1 $1); do\n\
    \            if [ $((i*i*i)) -eq $1 ]; then\n                echo \"true\"\n \
    \               return\n            fi\n        done\n        echo \"false\"\n\
    \    fi", "    if [ $1 -eq 0 ]; then\n        echo \"true\"\n    elif [ $1 -lt\
    \ 0 ]; then\n        echo \"true\"\n    else\n        local i=1\n        while\
    \ [ $((i*i*i)) -lt $1 ]; do\n            i=$((i+1))\n        done\n        if\
    \ [ $((i*i*i)) -eq $1 ]; then\n            echo \"true\"\n        else\n     \
    \       echo \"false\"\n        fi\n    fi", "    if [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        if [[ $1 -eq 0 ]]; then\n            echo \"true\"\n        else\n  \
    \          local i=1\n            while [[ $((i*i*i)) -lt $1 ]]; do\n        \
    \        ((i++))\n            done\n            if [[ $((i*i*i)) -eq $1 ]]; then\n\
    \                echo \"true\"\n            else\n                echo \"false\"\
    \n            fi\n        fi\n    else\n        echo \"false\"\n    fi", "   \
    \ if [ $1 -eq 0 ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n\
    \        echo \"true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n      \
    \      if [ $((i*i*i)) -eq $1 ]; then\n                echo \"true\"\n       \
    \         return\n            fi\n        done\n        echo \"false\"\n    fi",
  "    # your code here\n    # hint: you may use bc to do floating point calculations\n\
    \    # hint: you may use the following function to check if a number is an integer\n\
    \    # isint() {\n    #     if [[ $1 =~ ^-?[0-9]+$ ]]; then\n    #         echo\
    \ \"true\"\n    #     else\n    #         echo \"false\"\n    #     fi\n    #\
    \ }\n    # hint: you may use the following function to check if a number is a\
    \ cube\n    # iscube() {\n    #     if [[ $(isint $(echo \"scale=0; $1 ^ (1/3)\"\
    \ | bc)) == \"true\" ]]; then\n    #         echo \"true\"\n    #     else\n \
    \   #         echo \"false\"\n    #     fi\n    # }\n    # hint: you may use the\
    \ following function to check if a number is a cube\n    # iscube() {\n    # \
    \    if [[ $(isint $(echo \"scale=0; $1 ^ (1/3)\" | bc)) == \"true\" ]]; then\n\
    \    #         echo \"true\"\n    #     else\n    #         echo \"false\"\n \
    \   #     fi\n    # }\n    # hint: you may use the following function to check\
    \ if a number is a cube\n    # iscube() {\n    #     if [[ $(isint $(echo \"scale=0;\
    \ $1 ^ (1/3)\" | bc)) == \"true\" ]]; then\n    #         echo \"true\"\n    #\
    \     else\n    #         echo \"false\"\n    #     fi\n    # }\n    # hint: you\
    \ may use the following function to check if a number is a cube\n    # iscube()\
    \ {\n    #     if [[ $(isint $(echo \"scale=0; $1 ^ (1/3)\" | bc)) == \"true\"\
    \ ]]; then\n    #         echo \"true\"\n    #     else\n    #         echo \"\
    false\"\n    #     fi\n    # }\n    # hint: you may use the following function\
    \ to check if a number is a cube\n    # iscube() {\n    #     if [[ $(isint $(echo\
    \ \"scale=0; $1 ^ (1/3)\" | bc)) ==", "    local num=$1\n    local i=0\n    while\
    \ (( i*i*i < num )); do\n        (( i++ ))\n    done\n    if (( i*i*i == num ));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  if\
    \ [ $1 -eq 0 ]\n  then\n    echo \"true\"\n  elif [ $1 -lt 0 ]\n  then\n    echo\
    \ \"true\"\n  else\n    for ((i=1; i<=$1; i++))\n    do\n      if [ $((i*i*i))\
    \ -eq $1 ]\n      then\n        echo \"true\"\n        return\n      fi\n    done\n\
    \    echo \"false\"\n  fi", "    if [ $1 -eq 0 ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    if [ $1 -eq 0 ]; then\n     \
    \   echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif\
    \ [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n        if [ $(($1 % 2))\
    \ -eq 0 ]; then\n            if [ $(($1 % 3)) -eq 0 ]; then\n                if\
    \ [ $(($1 % 4)) -eq 0 ]; then\n                    if [ $(($1 % 5)) -eq 0 ]; then\n\
    \                        if [ $(($1 % 6)) -eq 0 ]; then\n                    \
    \        if [ $(($1 % 7)) -eq 0 ]; then\n                                if [\
    \ $(($1 % 8)) -eq 0 ]; then\n                                    if [ $(($1 %\
    \ 9)) -eq 0 ]; then\n                                        echo \"true\"\n \
    \                                   else\n                                   \
    \     echo \"false\"\n                                    fi\n               \
    \                 else\n                                    echo \"false\"\n \
    \                               fi\n                            else\n       \
    \                         echo \"false\"\n                            fi\n   \
    \                     else\n                            echo \"false\"\n     \
    \                   fi\n                    else\n                        echo\
    \ \"false\"\n                    fi\n                else\n                  \
    \  echo \"false\"\n                fi\n            else\n                echo\
    \ \"false\"\n            fi\n        else\n            echo \"false\"\n      \
    \  fi\n    fi", "    if [ $1 -eq 0 ]\n    then\n        echo \"true\"\n    elif\
    \ [ $1 -eq 1 ]\n    then\n        echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n\
    \        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\" | bc\
    \ -l)\n        local sqrt_int=$(echo \"$sqrt\" | cut -d \".\" -f 1)\n        local\
    \ sqrt_dec=$(echo \"$sqrt\" | cut -d \".\" -f 2)\n        if [ $sqrt_dec -eq 0\
    \ ]\n        then\n            local cube=$(echo \"$sqrt_int*$sqrt_int*$sqrt_int\"\
    \ | bc -l)\n            if [ $cube -eq $1 ]\n            then\n              \
    \  echo \"true\"\n            else\n                echo \"false\"\n         \
    \   fi\n        else\n            echo \"false\"\n        fi\n    fi", "    local\
    \ number=$1\n    local result=$(bc <<< \"scale=0; $number^(1/3)\")\n    if [ $result\
    \ -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi", "    if [ $1 -eq 0 ]; then\n        echo \"true\"\n    elif [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        for i in $(seq 1 $1); do\n\
    \            if [ $((i*i*i)) -eq $1 ]; then\n                echo \"true\"\n \
    \               return\n            fi\n        done\n        echo \"false\"\n\
    \    fi", "    if [ $1 -eq 0 ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n      \
    \  echo \"true\"\n    else\n        local i=1\n        while [ $((i*i*i)) -lt\
    \ $1 ]; do\n            i=$((i+1))\n        done\n        if [ $((i*i*i)) -eq\
    \ $1 ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi"]
stop_tokens:
- "\n}"
