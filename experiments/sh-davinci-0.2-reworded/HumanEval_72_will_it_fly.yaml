name: HumanEval_72_will_it_fly
language: sh
prompt: "#!/bin/bash\n# Write a function that returns true if the object q will fly,\
  \ and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic\
  \ list) and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less\
  \ than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"\
  3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3\
  \ is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly\
  \ \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and\
  \ it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly()\
  \ {\n"
tests: "}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"\
  5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
  \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
completions: ["  local q=$1\n  local w=$2\n  local sum=0\n  local balanced=true\n\
    \  local i=0\n  local j=$((${#q}-1))\n  local q_array=($q)\n  while [ $i -lt $j\
    \ ]; do\n    if [ ${q_array[$i]} -ne ${q_array[$j]} ]; then\n      balanced=false\n\
    \      break\n    fi\n    i=$(($i+1))\n    j=$(($j-1))\n  done\n  for i in ${q_array[@]};\
    \ do\n    sum=$(($sum+$i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local q=$1\n    local\
    \ w=$2\n    local sum=0\n    local balanced=true\n    local i=0\n    local j=$((${#q}-1))\n\
    \    while [ $i -lt $j ]; do\n        if [ ${q:$i:1} != ${q:$j:1} ]; then\n  \
    \          balanced=false\n            break\n        fi\n        i=$(($i+1))\n\
    \        j=$(($j-1))\n    done\n    for i in $q; do\n        sum=$(($sum+$i))\n\
    \    done\n    if [ $sum -le $w ] && $balanced; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  local list=$1\n  local max_weight=$2\n\
    \  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#list}-1))\n\
    \  while [ $i -lt $j ]; do\n    if [ ${list:$i:1} != ${list:$j:1} ]; then\n  \
    \    balanced=false\n      break\n    fi\n    i=$(($i+1))\n    j=$(($j-1))\n \
    \ done\n  for i in $list; do\n    sum=$(($sum+$i))\n  done\n  if [ $sum -le $max_weight\
    \ ] && $balanced; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local list=$1\n  local max_weight=$2\n  local sum=0\n  local balanced=true\n\
    \  local i=0\n  local j=$((${#list}-1))\n  while [ $i -lt $j ]; do\n    if [ \"\
    ${list:$i:1}\" != \"${list:$j:1}\" ]; then\n      balanced=false\n      break\n\
    \    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $list; do\n    sum=$((sum+i))\n\
    \  done\n  if [ $sum -le $max_weight ] && $balanced; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  local list=$1\n  local max_weight=$2\n\
    \  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#list}-1))\n\
    \  while [ $i -lt $j ]; do\n    if [ \"${list:$i:1}\" != \"${list:$j:1}\" ]; then\n\
    \      balanced=false\n      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n \
    \ done\n  for i in $list; do\n    sum=$((sum+i))\n  done\n  if [ $sum -le $max_weight\
    \ ] && $balanced; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local q=$1\n  local w=$2\n  local s=$(echo $q | tr ' ' '+')\n  local r=$(echo\
    \ $q | rev)\n  if [[ $q == $r ]] && [[ $(($s)) -le $w ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local q=$1\n  local w=$2\n  local q_sum=$(echo\
    \ $q | tr ' ' '\\n' | paste -sd+ - | bc)\n  local q_len=$(echo $q | wc -w)\n \
    \ local q_rev=$(echo $q | tr ' ' '\\n' | rev | tr '\\n' ' ')\n  if [ $q_sum -le\
    \ $w ] && [ \"$q\" == \"$q_rev\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  local q=$1\n  local w=$2\n  local sum=0\n  local balanced=true\n\
    \  local i=0\n  local j=$((${#q}-1))\n  local q_array=($q)\n  while [ $i -lt $j\
    \ ]; do\n    if [ ${q_array[$i]} -ne ${q_array[$j]} ]; then\n      balanced=false\n\
    \      break\n    fi\n    i=$(($i+1))\n    j=$(($j-1))\n  done\n  for i in ${q_array[@]};\
    \ do\n    sum=$(($sum+$i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local q=$1\n  local\
    \ w=$2\n  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n\
    \  local q_array=($q)\n  while [ $i -lt $j ]; do\n    if [ ${q_array[$i]} -ne\
    \ ${q_array[$j]} ]; then\n      balanced=false\n      break\n    fi\n    i=$(($i+1))\n\
    \    j=$(($j-1))\n  done\n  for i in ${q_array[@]}; do\n    sum=$(($sum+$i))\n\
    \  done\n  if [ $sum -le $w ] && $balanced; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local q=$1\n  local w=$2\n  local sum=0\n  local\
    \ balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [ $i -lt $j ]; do\n\
    \    if [ ${q:$i:1} != ${q:$j:1} ]; then\n      balanced=false\n      break\n\
    \    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $q; do\n    sum=$((sum+i))\n\
    \  done\n  if [ $sum -le $w ] && $balanced; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local q=$1\n  local w=$2\n  local q_sum=$(echo\
    \ $q | tr ' ' '\\n' | paste -sd+ - | bc)\n  local q_rev=$(echo $q | tr ' ' '\\\
    n' | tac | tr '\\n' ' ')\n  if [[ $q_sum -le $w ]] && [[ $q == $q_rev ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local list=$1\n  local\
    \ max_weight=$2\n  local sum=0\n  local balanced=true\n  local arr=($list)\n \
    \ local len=${#arr[@]}\n  local half=$((len/2))\n  local i=0\n  while [[ $i -lt\
    \ $half ]]; do\n    if [[ ${arr[$i]} -ne ${arr[$((len-i-1))]} ]]; then\n     \
    \ balanced=false\n      break\n    fi\n    ((i++))\n  done\n  for i in $list;\
    \ do\n    ((sum+=i))\n  done\n  if [[ $sum -le $max_weight && $balanced == true\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local q=$1\n\
    \  local w=$2\n  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n\
    \  local q_array=($q)\n  while [ $i -lt $j ]; do\n    if [ ${q_array[$i]} -ne\
    \ ${q_array[$j]} ]; then\n      balanced=false\n      break\n    fi\n    i=$(($i+1))\n\
    \    j=$(($j-1))\n  done\n  for i in ${q_array[@]}; do\n    sum=$(($sum+$i))\n\
    \  done\n  if [ $sum -le $w ] && $balanced; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local q=$1\n  local w=$2\n  local sum=0\n  local\
    \ balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [ $i -lt $j ]; do\n\
    \    if [ \"${q:$i:1}\" != \"${q:$j:1}\" ]; then\n      balanced=false\n     \
    \ break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $q; do\n \
    \   sum=$((sum+i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local list=$1\n  local max_weight=$2\n\
    \  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#list}-1))\n\
    \  while [ $i -lt $j ]; do\n    if [ ${list:$i:1} != ${list:$j:1} ]; then\n  \
    \    balanced=false\n      break\n    fi\n    i=$(($i+1))\n    j=$(($j-1))\n \
    \ done\n  for i in $list; do\n    sum=$(($sum+$i))\n  done\n  if [ $sum -le $max_weight\
    \ ] && $balanced; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  # Write your code here\n  # You can use the following variables:\n  # $1 is the\
    \ first argument\n  # $2 is the second argument\n  # $# is the number of arguments\n\
    \  # $@ is an array of all arguments\n  # $? is the exit status of the last command\n\
    \  # $! is the PID of the last command\n  # $$ is the PID of the current script\n\
    \  # $USER is the current user\n  # $HOSTNAME is the current hostname\n  # $SECONDS\
    \ is the number of seconds since the script was started\n  # $RANDOM returns a\
    \ different random number each time is it referred to\n  # $LINENO returns the\
    \ current line number\n  #\n  # For more information, see:\n  # http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html\n\
    \  #\n  # Use echo to print to standard output.\n  # Example:\n  # echo \"Hello\
    \ world!\"\n  #\n  # Use return to return a value.\n  # Example:\n  # return 0\n\
    \  #\n  # Use exit to terminate the script.\n  # Example:\n  # exit 0\n  #\n \
    \ # Use read to read from standard input.\n  # Example:\n  # read -p \"What is\
    \ your name? \" name\n  #\n  # Use $() to run a command.\n  # Example:\n  # echo\
    \ \"The current date is: $(date)\"\n  #\n  # Use $[] to perform arithmetic operations.\n\
    \  # Example:\n  # echo $[2+2]\n  #\n  # Use [[ ]] to perform tests.\n  # Example:\n\
    \  # [[ 1 -eq 1 ]] && echo \"1 equals 1\"\n  #\n  # Use (( )) to perform arithmetic\
    \ operations.\n  # Example:\n  # (( a = 1 + 1 ))\n  #\n  # Use > to redirect standard\
    \ output to a file.\n  # Example:\n  # echo \"Hello world!\" > hello.txt\n  #\n\
    \  # Use < to redirect standard input from a file.\n  # Example:\n  # read -p\
    \ \"What is your name? \" name < hello.txt\n  #\n ", "  local q=\"$1\"\n  local\
    \ w=\"$2\"\n  local sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n\
    \  while [ $i -lt $j ]; do\n    if [ \"${q:$i:1}\" != \"${q:$j:1}\" ]; then\n\
    \      balanced=false\n      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n \
    \ done\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum -le $w ] &&\
    \ $balanced; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ q=$1\n  local w=$2\n  local sum=0\n  local balanced=true\n  local i=0\n  local\
    \ j=$((${#q}-1))\n  local q_array=($q)\n  while [ $i -lt $j ]; do\n    if [ ${q_array[$i]}\
    \ -ne ${q_array[$j]} ]; then\n      balanced=false\n      break\n    fi\n    i=$(($i+1))\n\
    \    j=$(($j-1))\n  done\n  for i in ${q_array[@]}; do\n    sum=$(($sum+$i))\n\
    \  done\n  if [ $sum -le $w ] && $balanced; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local list=$1\n  local max_weight=$2\n  local weight=$(echo\
    \ $list | tr ' ' '+')\n  local balanced=$(echo $list | rev | tr ' ' '\\n' | tr\
    \ '\\n' ' ')\n  if [[ $list == $balanced ]] && (( $weight <= $max_weight )); then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local q=$1\n  local\
    \ w=$2\n  local sum=0\n  local len=0\n  local i=0\n  local j=0\n  local balanced=true\n\
    \  local fly=false\n\n  for i in $q; do\n    ((sum+=i))\n    ((len++))\n  done\n\
    \n  if ((sum<=w)); then\n    for ((i=0, j=len-1; i<len/2; i++, j--)); do\n   \
    \   if [[ ${q[i]} != ${q[j]} ]]; then\n        balanced=false\n        break\n\
    \      fi\n    done\n    if $balanced; then\n      fly=true\n    fi\n  fi\n\n\
    \  echo $fly"]
stop_tokens:
- "\n}"
