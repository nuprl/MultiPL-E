language: sh
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n\
    \    letters[\"$letter\"]=$((letters[\"$letter\"] + 1))\n  done\n  local max=0\n\
    \  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -gt $max\
    \ ]]; then\n      max=${letters[$letter]}\n    fi\n  done\n  local -a result\n\
    \  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -eq $max\
    \ ]]; then\n      result+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n\
    \    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local result\n\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  result=\"{\"\n  for letter in \"${max_letters[@]}\"; do\n\
    \    result+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if ((letter != ${max_letters[-1]}));\
    \ then\n      result+=\", \"\n    fi\n  done\n  result+=\"}\"\n\n  echo $result\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n\
    \    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n \
    \     max_count=$count\n    fi\n  done\n  local result=()\n  for letter in \"\
    ${!histogram[@]}\"; do\n    local count=${histogram[$letter]}\n    if ((count\
    \ == max_count)); then\n      result+=(\"\\\"$letter\\\": \\\"$count\\\"\")\n\
    \    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A counts\n\
    \  local max_count=0\n  for letter in $1; do\n    counts[$letter]=$((counts[$letter]\
    \ + 1))\n    if [ ${counts[$letter]} -gt $max_count ]; then\n      max_count=${counts[$letter]}\n\
    \    fi\n  done\n  local -a max_letters\n  for letter in ${!counts[@]}; do\n \
    \   if [ ${counts[$letter]} -eq $max_count ]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  echo -n \"{\"\n  for letter in ${max_letters[@]}; do\n  \
    \  echo -n \"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if [ \"$letter\" != \"\
    ${max_letters[-1]}\" ]; then\n      echo -n \", \"\n    fi\n  done\n  echo \"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histo\n    local -a letters\n    local -a counts\n    local -a result\n\
    \    local letter\n    local count\n    local i\n    local j\n    local max_count\n\
    \    local max_count_index\n    local max_count_indexes\n    local max_count_indexes_len\n\
    \    local max_count_indexes_len_minus_one\n    local max_count_indexes_len_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one\n    local max_count_indexes_len_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one\n \
    \   local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max=0\n  local -a max_letters\n  local -a\
    \ result\n  for letter in $1; do\n    ((letters[$letter]++))\n    if ((letters[$letter]\
    \ > max)); then\n      max=${letters[$letter]}\n      max_letters=(\"$letter\"\
    )\n    elif ((letters[$letter] == max)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\\\
    \"$letter\\\": \\\"$max\\\"\")\n  done\n  echo \"{$(IFS=,; echo \"${result[*]}\"\
    )}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ input=$1\n  local output=\"\"\n  local max=0\n  local max_letters=\"\"\n  local\
    \ letter=\"\"\n  local count=0\n  local counts=\"\"\n  local letter_count=\"\"\
    \n  local letter_counts=\"\"\n\n  # Count the occurrences of each letter\n  for\
    \ letter in $(echo $input | tr \" \" \"\\n\"); do\n    counts[$letter]=$(( ${counts[$letter]}\
    \ + 1 ))\n  done\n\n  # Find the letter(s) with the highest count\n  for letter\
    \ in ${!counts[@]}; do\n    count=${counts[$letter]}\n    if [[ $count -gt $max\
    \ ]]; then\n      max=$count\n      max_letters=$letter\n    elif [[ $count -eq\
    \ $max ]]; then\n      max_letters=\"$max_letters $letter\"\n    fi\n  done\n\n\
    \  # Create the output\n  for letter in $max_letters; do\n    letter_counts=\"\
    $letter_counts {\\\"$letter\\\": \\\"${counts[$letter]}\\\"}\"\n  done\n  output=\"\
    {$letter_counts}\"\n  echo $output\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a keys\n    local -a values\n    local -a max_keys\n\
    \    local max_value\n    local key\n    local value\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  local max_count=0\n  local csv=()\n  for letter\
    \ in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((histogram[$letter]++))\n    if ((histogram[$letter]\
    \ > max_count)); then\n      max_count=${histogram[$letter]}\n    fi\n  done\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max_count));\
    \ then\n      csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n    fi\n\
    \  done\n  echo \"{\"$(IFS=\", \"; echo \"${csv[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] > max_count)); then\n      max_letters=(\"$letter\"\
    )\n      max_count=${histogram[$letter]}\n    elif ((histogram[$letter] == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n  for\
    \ letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n  done\n  echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result=\"$result,\\\"\
    $letter\\\": \\\"${histogram[$letter]}\\\"\"\n    fi\n  done\n  echo \"{${result:1}}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -a letters=($1)\n  local -A letter_counts\n  local -a max_letters\n  local max_count=0\n\
    \  local -a csv_letters\n  local -a csv_counts\n  local csv_result\n\n  for letter\
    \ in \"${letters[@]}\"; do\n    letter_counts[$letter]=$((letter_counts[$letter]\
    \ + 1))\n  done\n\n  for letter in \"${!letter_counts[@]}\"; do\n    if [[ ${letter_counts[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letter_counts[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letter_counts[$letter]} -eq $max_count ]]; then\n  \
    \    max_letters+=(\"$letter\")\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv_letters+=(\"$letter\")\n    csv_counts+=(\"${letter_counts[$letter]}\"\
    )\n  done\n\n  csv_result=$(join_by \":\" \"${csv_letters[@]}\")\n  csv_result=$(join_by\
    \ \":\" \"${csv_result[@]}\" \"${csv_counts[@]}\")\n  echo \"{${csv_result[@]}}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4y_c9sih.sh: line 45: join_by: command not found

    /tmp/tmp4y_c9sih.sh: line 46: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local max_count=0\n  local max_letters=()\n  for letter in $(echo\
    \ \"$1\" | tr ' ' '\\n'); do\n    histogram[$letter]=$((histogram[$letter] + 1))\n\
    \    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${histogram[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"\
    ${histogram[$letter]}\\\"\")\n  done\n  echo \"{\"$(IFS=,; echo \"${csv[*]}\"\
    )\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    letters[$letter]=$((\
    \ ${letters[$letter]} + 1 ))\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"\
    ; do\n    if [[ ${letters[$letter]} -gt $max ]]; then\n      max=${letters[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!letters[@]}\"; do\n \
    \   if [[ ${letters[$letter]} -eq $max ]]; then\n      result+=(\"$letter\")\n\
    \    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local -a\
    \ max_letters\n  local max_count\n  local -a result\n  local -a csv_result\n\n\
    \  # Convert the string to an array of letters\n  IFS=' ' read -r -a letters <<<\
    \ \"$1\"\n\n  # Count the number of occurrences of each letter\n  for letter in\
    \ \"${letters[@]}\"; do\n    ((histogram[$letter]++))\n  done\n\n  # Find the\
    \ maximum count\n  max_count=0\n  for count in \"${histogram[@]}\"; do\n    if\
    \ [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n  done\n\n\
    \  # Find the letters with the maximum count\n  max_letters=()\n  for letter in\
    \ \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]} -eq $max_count ]];\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  # Convert the result\
    \ to a CSV\n  result=()\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\
    \\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n  csv_result=$(IFS=,; echo \"\
    ${result[*]}\")\n\n  # Return the result\n  echo \"{$csv_result}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ csv\n    for letter in $1; do\n        ((letters[$letter]++))\n        if ((letters[$letter]\
    \ > max_count)); then\n            max_count=${letters[$letter]}\n           \
    \ max_letters=(\"$letter\")\n        elif ((letters[$letter] == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n    for letter\
    \ in \"${max_letters[@]}\"; do\n        csv+=\"{\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \"},\"\n    done\n    echo \"{${csv%,}}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local -a result\n\
    \  for letter in $1; do\n    if [[ -z ${letters[$letter]} ]]; then\n      letters[$letter]=1\n\
    \    else\n      letters[$letter]=$((letters[$letter] + 1))\n    fi\n    if [[\
    \ ${letters[$letter]} -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${letters[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  for letter in\
    \ \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \"\")\n  done\n  echo \"{$(IFS=,; echo \"${result[*]}\")}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ -A letters\n    local max_count=0\n    for letter in $1; do\n        letters[$letter]=$((letters[$letter]\
    \ + 1))\n        if [ ${letters[$letter]} -gt $max_count ]; then\n           \
    \ max_count=${letters[$letter]}\n        fi\n    done\n    local result=\"{\"\n\
    \    for letter in ${!letters[@]}; do\n        if [ ${letters[$letter]} -eq $max_count\
    \ ]; then\n            result+=\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\
    ,\"\n        fi\n    done\n    echo \"${result::-1}}\"\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  local letter_counts=$(echo \"$letters\" | tr ' ' '\\n' | sort\
    \ | uniq -c)\n  local max_count=$(echo \"$letter_counts\" | awk '{print $1}' |\
    \ sort -n | tail -n 1)\n  local max_letters=$(echo \"$letter_counts\" | awk -v\
    \ max_count=\"$max_count\" '$1 == max_count {print $2}')\n  local csv=$(echo \"\
    $max_letters\" | tr '\\n' ',' | sed 's/,$//')\n  echo \"{\\\"$csv\\\": \\\"$max_count\\\
    \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $1; do\n        letters[$letter]=$((\
    \ ${letters[$letter]} + 1 ))\n    done\n    local max=0\n    for letter in \"\
    ${!letters[@]}\"; do\n        if [[ ${letters[$letter]} -gt $max ]]; then\n  \
    \          max=${letters[$letter]}\n        fi\n    done\n    local result=\"\"\
    \n    for letter in \"${!letters[@]}\"; do\n        if [[ ${letters[$letter]}\
    \ -eq $max ]]; then\n            result+=\"\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \", \"\n        fi\n    done\n    echo \"{${result%, }}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $(echo $1 | tr ' ' '\\n'); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for key in \"${!histogram[@]}\"; do\n    if\
    \ [[ ${histogram[$key]} -gt $max ]]; then\n      max=${histogram[$key]}\n    fi\n\
    \  done\n  local -a result\n  for key in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$key]}\
    \ -eq $max ]]; then\n      result+=(\"\\\"$key\\\": \\\"${histogram[$key]}\\\"\
    \")\n    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print \"\\\"\"$2\"\
    \\\": \\\"\"$1\"\\\"\"}' | paste -sd ',' - | sed 's/^/{/' | sed 's/$/}/'\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local max_count\n  local\
    \ -a max_letters\n  local -a csv\n  local -a csv_letters\n  local -a csv_counts\n\
    \  local csv_letter\n  local csv_count\n  local i\n\n  # Build histogram\n  for\
    \ letter in $1; do\n    histogram[$letter]=$(( ${histogram[$letter]} + 1 ))\n\
    \  done\n\n  # Find max count\n  max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \    fi\n  done\n\n  # Find letters with max count\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if [[ ${histogram[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n\n  # Build CSV\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv+=(\"$letter\" \"${histogram[$letter]}\")\n  done\n\n  # Print CSV\n\
    \  for (( i=0; i<${#csv[@]}; i+=2 )); do\n    csv_letter=${csv[$i]}\n    csv_count=${csv[$((\
    \ i + 1 ))]}\n    csv_letters+=(\"$csv_letter\")\n    csv_counts+=(\"$csv_count\"\
    )\n  done\n  echo \"{$(join_by , \"${csv_letters[@]}\")}\"\n  echo \"{$(join_by\
    \ , \"${csv_counts[@]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpif2jj57v.sh: line 63: join_by: command not found

    /tmp/tmpif2jj57v.sh: line 64: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    done\n    local -a max_letters\n    local max_count=0\n    for letter\
    \ in \"${!histogram[@]}\"; do\n        if [[ ${histogram[$letter]} -gt $max_count\
    \ ]]; then\n            max_letters=(\"$letter\")\n            max_count=${histogram[$letter]}\n\
    \        elif [[ ${histogram[$letter]} -eq $max_count ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a csv\n    for letter in \"${max_letters[@]}\"\
    ; do\n        csv+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n    done\n    echo\
    \ \"{\"$(IFS=,; echo \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local -a counts\n  local -a result\n  local\
    \ letter\n  local count\n  local i\n\n  for letter in $1; do\n    ((histogram[$letter]++))\n\
    \  done\n\n  for letter in \"${!histogram[@]}\"; do\n    letters+=(\"\\\"$letter\\\
    \"\")\n    counts+=(\"\\\"${histogram[$letter]}\\\"\")\n  done\n\n  if [[ ${#letters[@]}\
    \ -eq 0 ]]; then\n    echo \"{}\"\n  else\n    result=(\"{\")\n    for ((i = 0;\
    \ i < ${#letters[@]}; i++)); do\n      result+=(\"${letters[$i]}: ${counts[$i]},\"\
    )\n    done\n    result[-1]=\"${result[-1]%,}\"\n    result+=(\"}\")\n    echo\
    \ \"${result[@]}\"\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result+=(\"$letter\"\
    )\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    done\n    local max_count=0\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if [[ ${histogram[$letter]} -gt $max_count ]]; then\n          \
    \  max_count=${histogram[$letter]}\n        fi\n    done\n    local result=\"\"\
    \n    for letter in \"${!histogram[@]}\"; do\n        if [[ ${histogram[$letter]}\
    \ -eq $max_count ]]; then\n            result=\"$result$letter:${histogram[$letter]},\"\
    \n        fi\n    done\n    echo \"${result::-1}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: implement this function\n  echo \"{}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $(echo \"$1\" | tr ' '\
    \ '\\n' | sort); do\n        (( letters[$letter]++ ))\n    done\n    echo -n '{'\n\
    \    local first=1\n    for letter in \"${!letters[@]}\"; do\n        if [[ $first\
    \ -eq 0 ]]; then\n            echo -n ', '\n        else\n            first=0\n\
    \        fi\n        echo -n '\"'$letter'\": \"'${letters[$letter]}'\"'\n    done\n\
    \    echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for count in \"${histogram[@]}\"; do\n\
    \    if (( count > max_count )); then\n      max_count=$count\n    fi\n  done\n\
    \  local result=()\n  for letter in \"${!histogram[@]}\"; do\n    if (( histogram[$letter]\
    \ == max_count )); then\n      result+=(\"$letter\")\n    fi\n  done\n  echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local letter\n    for letter in $(echo \"$1\" | tr '\
    \ ' '\\n'); do\n        ((histogram[$letter]++))\n    done\n    local max_count=0\n\
    \    local max_letters=()\n    for letter in \"${!histogram[@]}\"; do\n      \
    \  if ((histogram[$letter] > max_count)); then\n            max_count=${histogram[$letter]}\n\
    \            max_letters=(\"$letter\")\n        elif ((histogram[$letter] == max_count));\
    \ then\n            max_letters+=(\"$letter\")\n        fi\n    done\n    local\
    \ -a csv\n    for letter in \"${max_letters[@]}\"; do\n        csv+=(\"\\\"$letter\\\
    \": \\\"$max_count\\\"\")\n    done\n    echo \"{\"$(IFS=,; echo \"${csv[*]}\"\
    )\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count=0\n\
    \  local max_letters=()\n  local csv\n  local -a csv_array\n\n  for letter in\
    \ $1; do\n    ((histogram[$letter]++))\n  done\n\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if [[ $count -gt $max_count ]]; then\n\
    \      max_count=$count\n      max_letters=(\"$letter\")\n    elif [[ $count -eq\
    \ $max_count ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  csv_array=()\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv_array+=(\"\\\"$letter\\\"\
    : \\\"${histogram[$letter]}\\\"\")\n  done\n  csv=\"{$(IFS=,; echo \"${csv_array[*]}\"\
    )}\"\n  echo \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $1; do\n        (( letters[$letter]++\
    \ ))\n    done\n    local -a max_letters\n    local max_count=0\n    for letter\
    \ in \"${!letters[@]}\"; do\n        if (( letters[$letter] > max_count )); then\n\
    \            max_letters=(\"$letter\")\n            max_count=${letters[$letter]}\n\
    \        elif (( letters[$letter] == max_count )); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local max_letter\n    local -a csv\n   \
    \ for max_letter in \"${max_letters[@]}\"; do\n        csv+=(\"\\\"$max_letter\\\
    \": \\\"${letters[$max_letter]}\\\"\")\n    done\n    echo \"{\"$(IFS=,; echo\
    \ \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a keys\n  local -a values\n  local -a max_values\n  local\
    \ max_value\n  local key\n  local value\n  local -i i\n  local -i j\n  local -i\
    \ k\n  local -i n\n  local -i m\n  local -i p\n  local -i q\n  local -i r\n  local\
    \ -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n\
    \  local -i y\n  local -i z\n  local -i aa\n  local -i ab\n  local -i ac\n  local\
    \ -i ad\n  local -i ae\n  local -i af\n  local -i ag\n  local -i ah\n  local -i\
    \ ai\n  local -i aj\n  local -i ak\n  local -i al\n  local -i am\n  local -i an\n\
    \  local -i ao\n  local -i ap\n  local -i aq\n  local -i ar\n  local -i as\n \
    \ local -i at\n  local -i au\n  local -i av\n  local -i aw\n  local -i ax\n  local\
    \ -i ay\n  local -i az\n  local -i ba\n  local -i bb\n  local -i bc\n  local -i\
    \ bd\n  local -i be\n  local -i bf\n  local -i bg\n  local -i bh\n  local -i bi\n\
    \  local -i bj\n  local -i bk\n  local -i bl\n  local -i bm\n  local -i bn\n \
    \ local -i bo\n  local -i bp\n  local -i bq\n  local -i br\n  local -i bs\n  local\
    \ -i bt\n  local -i bu\n  local -i bv\n  local -i bw\n  local -i bx\n  local -i\
    \ by\n  local -i bz\n  local -i ca\n  local -i cb\n  local -i cc\n  local -i cd\n\
    \  local -i ce\n  local -i cf\n  local\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local -i max_count=0\n  local -i count\n\
    \  local letter\n  local -a max_letters\n  local -a csv_letters\n  local csv_letter\n\
    \  local csv_max_letters\n  local csv_max_count\n\n  for letter in $1; do\n  \
    \  ((histogram[$letter]++))\n  done\n\n  for letter in \"${!histogram[@]}\"; do\n\
    \    count=${histogram[$letter]}\n    if ((count > max_count)); then\n      max_count=$count\n\
    \      max_letters=(\"$letter\")\n    elif ((count == max_count)); then\n    \
    \  max_letters+=(\"$letter\")\n    fi\n  done\n\n  for csv_letter in \"${max_letters[@]}\"\
    ; do\n    csv_letters+=(\"\\\"$csv_letter\\\": \\\"$max_count\\\"\")\n  done\n\
    \n  csv_max_letters=$(IFS=,; echo \"${csv_letters[*]}\")\n  echo \"{$csv_max_letters}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local max_count=0\n    local max_letters=\"\"\n    for\
    \ letter in $1; do\n        let histogram[$letter]++\n        if [ ${histogram[$letter]}\
    \ -gt $max_count ]; then\n            max_count=${histogram[$letter]}\n      \
    \      max_letters=$letter\n        elif [ ${histogram[$letter]} -eq $max_count\
    \ ]; then\n            max_letters=\"$max_letters $letter\"\n        fi\n    done\n\
    \    local result=\"\"\n    for letter in $max_letters; do\n        result=\"\
    $result {\\\"$letter\\\": \\\"${histogram[$letter]}\\\"},\"\n    done\n    echo\
    \ \"{$(echo $result | sed 's/,$//')}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $(echo $1 | tr ' ' '\\n'); do\n    ((letters[$letter]++))\n\
    \  done\n  local -A counts\n  for letter in \"${!letters[@]}\"; do\n    counts[${letters[$letter]}]=\"\
    ${counts[${letters[$letter]}]} $letter\"\n  done\n  local max=0\n  for count in\
    \ \"${!counts[@]}\"; do\n    if ((count > max)); then\n      max=$count\n    fi\n\
    \  done\n  local result=()\n  for letter in ${counts[$max]}; do\n    result+=(\"\
    \\\"$letter\\\": \\\"$max\\\"\")\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\"\
    )\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local -a\
    \ max_count_letters\n  local max_count\n  local -a result\n\n  for letter in $1;\
    \ do\n    ((histogram[$letter]++))\n  done\n\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if [[ $count -gt $max_count ]]; then\n\
    \      max_count=$count\n      max_count_letters=(\"$letter\")\n    elif [[ $count\
    \ -eq $max_count ]]; then\n      max_count_letters+=(\"$letter\")\n    fi\n  done\n\
    \n  for letter in \"${max_count_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\
    \": \\\"${histogram[$letter]}\\\"\")\n  done\n\n  echo \"{\"$(IFS=,; echo \"${result[*]}\"\
    )\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    if [ -z \"\
    ${letters[$letter]}\" ]; then\n      letters[$letter]=1\n    else\n      letters[$letter]=$((letters[$letter]+1))\n\
    \    fi\n  done\n  local -a max_letters\n  local max_count=0\n  for letter in\
    \ \"${!letters[@]}\"; do\n    if [ \"${letters[$letter]}\" -gt \"$max_count\"\
    \ ]; then\n      max_letters=(\"$letter\")\n      max_count=\"${letters[$letter]}\"\
    \n    elif [ \"${letters[$letter]}\" -eq \"$max_count\" ]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  echo -n '{'\n  local first=true\n  for letter in\
    \ \"${max_letters[@]}\"; do\n    if $first; then\n      first=false\n    else\n\
    \      echo -n ', '\n    fi\n    echo -n '\"'$letter'\": \"'${letters[$letter]}'\"\
    '\n  done\n  echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif ((count ==\
    \ max_count)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local\
    \ -a result\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\
    \": \\\"$max_count\\\"\")\n  done\n  echo \"{\"\"$(join_by \", \" \"${result[@]}\"\
    )\"\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy3oinc37.sh: line 38: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $1; do\n    ((letters[$letter]++))\n  done\n  local\
    \ max=0\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] > max));\
    \ then\n      max=${letters[$letter]}\n    fi\n  done\n  local -a max_letters\n\
    \  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] == max)); then\n\
    \      max_letters+=($letter)\n    fi\n  done\n  echo -n '{'\n  for letter in\
    \ \"${max_letters[@]}\"; do\n    echo -n '\"'$letter'\": \"'${letters[$letter]}'\"\
    , '\n  done\n  echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] > max_count)); then\n      max_letters=(\"$letter\"\
    )\n      max_count=${histogram[$letter]}\n    elif ((histogram[$letter] == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n  for\
    \ letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n  done\n  echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"{}\"\n    return\n  fi\n  local -A histogram\n\
    \  for letter in $1; do\n    if [[ -z \"${histogram[$letter]}\" ]]; then\n   \
    \   histogram[$letter]=1\n    else\n      histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    fi\n  done\n  local -a max_letters\n  local max_count=0\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    if [[ \"${histogram[$letter]}\" -gt \"$max_count\"\
    \ ]]; then\n      max_letters=(\"$letter\")\n      max_count=\"${histogram[$letter]}\"\
    \n    elif [[ \"${histogram[$letter]}\" -eq \"$max_count\" ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n  done\n\
    \  echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histo\n  local -a letters\n  local -i max=0\n  local -i count\n  local letter\n\
    \  local -a result\n\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((histo[$letter]++))\n\
    \  done\n\n  for letter in \"${!histo[@]}\"; do\n    count=${histo[$letter]}\n\
    \    if ((count > max)); then\n      max=$count\n      letters=(\"$letter\")\n\
    \    elif ((count == max)); then\n      letters+=(\"$letter\")\n    fi\n  done\n\
    \n  for letter in \"${letters[@]}\"; do\n    result+=(\"\\\"$letter\\\": \\\"\
    $max\\\"\")\n  done\n\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local count\n\
    \    local -a max_letters\n    local max_count\n    local -a output\n    local\
    \ -a temp\n    local i\n    local j\n\n    # Create a histogram of the letters\n\
    \    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter] +\
    \ 1))\n    done\n\n    # Find the maximum count\n    max_count=0\n    for letter\
    \ in \"${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n        if\
    \ (( count > max_count )); then\n            max_count=$count\n        fi\n  \
    \  done\n\n    # Find the letters with the maximum count\n    for letter in \"\
    ${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n        if (( count\
    \ == max_count )); then\n            max_letters+=(\"$letter\")\n        fi\n\
    \    done\n\n    # Create the output\n    for (( i = 0; i < ${#max_letters[@]};\
    \ i++ )); do\n        letter=${max_letters[$i]}\n        count=${histogram[$letter]}\n\
    \        temp=($(printf '\"%s\"': '\"%s\"' \"$letter\" \"$count\"))\n        for\
    \ (( j = 0; j < ${#temp[@]}; j++ )); do\n            output+=(\"${temp[$j]}\"\
    )\n        done\n    done\n\n    # Print the output\n    printf '{%s}' \"$(IFS=,;\
    \ echo \"${output[*]}\")\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local max=0\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ > max)); then\n      max=${histogram[$letter]}\n    fi\n  done\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max)); then\n  \
    \    echo -n \"{\\\"$letter\\\": \\\"$max\\\"}\"\n      if ((histogram[$letter]\
    \ != max)); then\n        echo -n \", \"\n      fi\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local max\n  local -a max_letters\n\
    \  local -a csv\n  local -a csv_letters\n  local -a csv_counts\n  local csv_letter\n\
    \  local csv_count\n  local i\n  local j\n\n  for letter in $1; do\n    ((histogram[$letter]++))\n\
    \  done\n\n  letters=(${!histogram[@]})\n  max=0\n  for letter in ${letters[@]};\
    \ do\n    if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${histogram[$letter]} -eq $max ]];\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  csv=()\n  for letter\
    \ in ${max_letters[@]}; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n  done\n\n  echo \"{\"$(join , ${csv[@]})\"}\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'join: extra operand ''"2"''

    Try ''join --help'' for more information.

    '
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max_count ]]; then\n      result=\"$result\\\
    \"$letter\\\": \\\"${histogram[$letter]}\\\", \"\n    fi\n  done\n  echo \"{${result%,\
    \ }}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local csv\n  local -a csv_array\n  local csv_array_index=0\n  local\
    \ csv_array_size=0\n  local csv_array_element\n  local csv_array_element_index=0\n\
    \  local csv_array_element_size=0\n  local csv_array_element_key\n  local csv_array_element_value\n\
    \  local csv_array_element_key_size=0\n  local csv_array_element_value_size=0\n\
    \  local csv_array_element_key_index=0\n  local csv_array_element_value_index=0\n\
    \  local csv_array_element_key_char\n  local csv_array_element_value_char\n  local\
    \ csv_array_element_key_char_index=0\n  local csv_array_element_value_char_index=0\n\
    \  local csv_array_element_key_char_size=0\n  local csv_array_element_value_char_size=0\n\
    \  local csv_array_element_key_char_ascii\n  local csv_array_element_value_char_ascii\n\
    \  local csv_array_element_key_char_ascii_index=0\n  local csv_array_element_value_char_ascii_index=0\n\
    \  local csv_array_element_key_char_ascii_size=0\n  local csv_array_element_value_char_ascii_size=0\n\
    \  local csv_array_element_key_char_ascii_char\n  local csv_array_element_value_char_ascii_char\n\
    \  local csv_array_element_key_char_ascii_char_index=0\n  local csv_array_element_value_char_ascii_char_index=0\n\
    \  local csv_array_element_key_char_ascii_char_size=0\n  local csv_array_element_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter]\
    \ > max)); then\n      max=${letters[$letter]}\n    fi\n  done\n  local result=\"\
    \"\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] == max));\
    \ then\n      if [[ -n $result ]]; then\n        result=\"$result, \"\n      fi\n\
    \      result=\"$result{\\\"$letter\\\": \\\"${letters[$letter]}\\\"}\"\n    fi\n\
    \  done\n  echo \"{$result}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  for letter in $1;\
    \ do\n    ((letters[$letter]++))\n    if ((letters[$letter] > max_count)); then\n\
    \      max_count=${letters[$letter]}\n      max_letters=(\"$letter\")\n    elif\
    \ ((letters[$letter] == max_count)); then\n      max_letters+=(\"$letter\")\n\
    \    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n \
    \   csv+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n  echo \"\
    {$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local -a\
    \ max_letters\n  local max_count\n  local -a result\n  local -a result_letters\n\
    \  local result_count\n  local result_letter\n  local -a result_letter_array\n\
    \  local result_letter_array_length\n  local result_letter_array_index\n  local\
    \ result_letter_array_value\n  local result_letter_array_value_escaped\n  local\
    \ result_letter_array_value_quoted\n  local result_letter_array_value_quoted_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped\n  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped_comma_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped_comma_escaped_quoted\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped_comma_escaped_quoted_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped_comma_escaped_quoted_escaped_comma_escaped\n\
    \  local result_letter_array_value_quoted_escaped_comma_escaped_colon_escaped_quoted_escaped_comma_escaped_quoted_escaped_comma_escaped_quoted\n\
    \  local result_letter_array_value_quoted_escaped_com\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ input=$1\n  local output=\"\"\n  local max=0\n  local count=0\n  local letter=\"\
    \"\n  local letters=\"\"\n  local letter_counts=\"\"\n  local letter_count=\"\"\
    \n  local letter_count_pair=\"\"\n  local letter_count_pairs=\"\"\n  local letter_count_pair_list=\"\
    \"\n  local letter_count_pair_list_sorted=\"\"\n  local letter_count_pair_list_sorted_max=\"\
    \"\n  local letter_count_pair_list_sorted_max_letters=\"\"\n  local letter_count_pair_list_sorted_max_letters_csv=\"\
    \"\n  local letter_count_pair_list_sorted_max_letters_csv_escaped=\"\"\n\n  #\
    \ Split the input into an array of letters\n  IFS=' ' read -r -a letters <<< \"\
    $input\"\n\n  # Iterate over the letters and count the number of occurrences of\
    \ each\n  for letter in \"${letters[@]}\"; do\n    count=0\n    for letter_count\
    \ in \"${letter_counts[@]}\"; do\n      if [[ \"$letter_count\" == \"$letter\"\
    \ ]]; then\n        ((count++))\n      fi\n    done\n    letter_counts+=(\"$letter\"\
    )\n    letter_counts+=(\"$count\")\n  done\n\n  # Convert the letter counts into\
    \ a list of pairs\n  for ((i=0; i<${#letter_counts[@]}; i+=2)); do\n    letter_count_pair=\"\
    {\\\"${letter_counts[$i]}\\\": \\\"${letter_counts[$i+1]}\\\"}\"\n    letter_count_pairs+=(\"\
    $letter_count_pair\")\n  done\n\n  # Convert the list of pairs into a list of\
    \ lists\n  for letter_count_pair in \"${letter_count_pairs[@]}\"; do\n    letter_count_pair_list+=\"\
    [$letter_count_pair]\"\n  done\n\n  # Sort the list of lists by the count in descending\
    \ order\n  letter_count_pair_list_sorted=$(echo \"$letter_count_pair_list\" |\
    \ jq -s 'sort_by(.values) | reverse')\n\n  # Get the first list\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj0rlxrqw.sh: line 63: jq: command not found

    '
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count\n\
    \  local -a max_letters\n  local -a csv\n  local -a csv_letters\n  local -a csv_counts\n\
    \  local csv_letter\n  local csv_count\n  local csv_string\n\n  # Build the histogram\n\
    \  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\n  # Find the\
    \ letters with the max count\n  max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if ((count > max_count)); then\n  \
    \    max_count=$count\n      max_letters=(\"$letter\")\n    elif ((count == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  # Build the CSV\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"$letter\" \"${histogram[$letter]}\"\
    )\n  done\n\n  # Convert the CSV to a string\n  csv_string=\"{\"\n  for ((i=0;\
    \ i<${#csv[@]}; i+=2)); do\n    csv_letter=\"${csv[$i]}\"\n    csv_count=\"${csv[$((i+1))]}\"\
    \n    csv_string+=\"\\\"$csv_letter\\\": \\\"$csv_count\\\"\"\n    if ((i < ${#csv[@]}\
    \ - 2)); then\n      csv_string+=\", \"\n    fi\n  done\n  csv_string+=\"}\"\n\
    \n  echo \"$csv_string\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ letters=($(echo \"$1\" | tr ' ' '\\n' | sort | uniq))\n    local counts=($(echo\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $1}'))\n    local max=0\n\
    \    local max_index=0\n    local max_count=0\n    local max_count_index=0\n \
    \   for i in \"${!counts[@]}\"; do\n        if [ \"${counts[$i]}\" -gt \"$max\"\
    \ ]; then\n            max=\"${counts[$i]}\"\n            max_index=\"$i\"\n \
    \       fi\n    done\n    for i in \"${!counts[@]}\"; do\n        if [ \"${counts[$i]}\"\
    \ -eq \"$max\" ]; then\n            max_count=\"${counts[$i]}\"\n            max_count_index=\"\
    $i\"\n        fi\n    done\n    echo \"{$(echo ${letters[$max_index]} | tr -d\
    \ '\\n'): $(echo ${counts[$max_count_index]} | tr -d '\\n')}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  for letter in $1; do\n    (( histogram[$letter]++\
    \ ))\n  done\n  local max=0\n  local max_letters=()\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if (( histogram[$letter] > max )); then\n      max=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif (( histogram[$letter] == max )); then\n\
    \      max_letters+=(\"$letter\")\n    fi\n  done\n  local result=()\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\": \\\"$max\\\"\"\
    )\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count\n\
    \  local max_letters\n  local csv\n  local -a csv_array\n  local csv_string\n\n\
    \  # Create a histogram of the letters\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  # Find the maximum count\n  max_count=0\n  for letter in\
    \ \"${!histogram[@]}\"; do\n    count=${histogram[$letter]}\n    if ((count >\
    \ max_count)); then\n      max_count=$count\n    fi\n  done\n\n  # Find the letters\
    \ with the maximum count\n  max_letters=()\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if ((count == max_count)); then\n \
    \     max_letters+=($letter)\n    fi\n  done\n\n  # Create a CSV of the letters\
    \ and their counts\n  csv_array=()\n  for letter in \"${max_letters[@]}\"; do\n\
    \    csv_array+=($(printf '\"%s\": \"%s\"' \"$letter\" \"${histogram[$letter]}\"\
    ))\n  done\n  csv_string=$(printf '{%s}' \"$(IFS=,; echo \"${csv_array[*]}\")\"\
    )\n  echo \"$csv_string\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $1; do\n    ((letters[$letter]++))\n  done\n  local\
    \ max=0\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] > max));\
    \ then\n      max=${letters[$letter]}\n    fi\n  done\n  local result=\"\"\n \
    \ for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] == max)); then\n\
    \      result+=\"{\\\"$letter\\\": \\\"$max\\\"}, \"\n    fi\n  done\n  echo \"\
    {${result%%, }}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((histogram[$letter]++))\n\
    \  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ > max)); then\n      max=${histogram[$letter]}\n    fi\n  done\n  local -a result\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max));\
    \ then\n      result+=(\"$letter\")\n    fi\n  done\n  echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    (( histogram[$letter]++ ))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if (( count > max_count )); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif (( count ==\
    \ max_count )); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local\
    \ -a csv\n  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\
    \": \\\"$max_count\\\"\")\n  done\n  echo \"{$(join_by , \"${csv[@]}\")}\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgg2syt_8.sh: line 38: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n  local -A counts\n  local count\n  for count in \"${letters[@]}\"; do\n\
    \    ((counts[$count]++))\n  done\n  local max=0\n  local count\n  for count in\
    \ \"${!counts[@]}\"; do\n    if ((count > max)); then\n      max=$count\n    fi\n\
    \  done\n  local -A result\n  local letter\n  for letter in \"${!letters[@]}\"\
    ; do\n    if ((letters[$letter] == max)); then\n      result[$letter]=$max\n \
    \   fi\n  done\n  local -a keys\n  local key\n  for key in \"${!result[@]}\";\
    \ do\n    keys+=(\"$key\")\n  done\n  local -a values\n  local value\n  for value\
    \ in \"${result[@]}\"; do\n    values+=(\"$value\")\n  done\n  echo \"$(join_by\
    \ \", \" \"${keys[@]}\")\"\n  echo \"$(join_by \", \" \"${values[@]}\")\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph7p_woaf.sh: line 53: join_by: command not found

    /tmp/tmph7p_woaf.sh: line 54: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a result\n  local max=0\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \    if ((letters[$letter] > max)); then\n      max=${letters[$letter]}\n    fi\n\
    \  done\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] ==\
    \ max)); then\n      result+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\"\
    )\n    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a letters\n    local -a counts\n    local -a max_counts\n    local -a\
    \ max_letters\n    local -i max_count\n    local -i count\n    local -i i\n  \
    \  local -i j\n    local -i k\n    local -i n\n    local -i m\n    local -i p\n\
    \    local -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i\
    \ u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local\
    \ -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i l\n    local\
    \ -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i l\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i l\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement me!\n  local -A histogram\n  local -a letters\n  local letter\n\
    \  local max=0\n  local -a max_letters\n  local -a csv\n  local csv_entry\n\n\
    \  # Create histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n\
    \  done\n\n  # Find max\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ > max)); then\n      max=${histogram[$letter]}\n    fi\n  done\n\n  # Find letters\
    \ with max\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ == max)); then\n      max_letters+=($letter)\n    fi\n  done\n\n  # Create csv\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv_entry=\"\\\"$letter\\\": \\\
    \"$max\\\"\"\n    csv+=($csv_entry)\n  done\n\n  echo \"{\"$(IFS=,; echo \"${csv[*]}\"\
    )\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $(echo $1 | tr ' ' '\\\
    n'); do\n        if [[ -z ${letters[$letter]} ]]; then\n            letters[$letter]=1\n\
    \        else\n            letters[$letter]=$((letters[$letter]+1))\n        fi\n\
    \    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n       \
    \ if [[ ${letters[$letter]} -gt $max ]]; then\n            max=${letters[$letter]}\n\
    \        fi\n    done\n    local result=\"\"\n    for letter in \"${!letters[@]}\"\
    ; do\n        if [[ ${letters[$letter]} -eq $max ]]; then\n            if [[ -z\
    \ $result ]]; then\n                result=\"{\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \"}\"\n            else\n                result=\"$result, {\\\"$letter\\\": \\\
    \"${letters[$letter]}\\\"}\"\n            fi\n        fi\n    done\n    echo $result\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"{}\"\n    return\n  fi\n  local -A counts\n\
    \  for letter in $1; do\n    counts[$letter]=$((counts[$letter] + 1))\n  done\n\
    \  local max_count=0\n  for count in \"${counts[@]}\"; do\n    if [[ $count -gt\
    \ $max_count ]]; then\n      max_count=$count\n    fi\n  done\n  local -a max_letters\n\
    \  for letter in \"${!counts[@]}\"; do\n    if [[ ${counts[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"\
    ${counts[$letter]}\\\"\")\n  done\n  echo \"{\"$(IFS=,; echo \"${csv[*]}\")\"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local count\n  local max_count\n  local max_letters\n\
    \  local -a max_letters_array\n  local -a letters_array\n  local -a counts_array\n\
    \  local -a max_counts_array\n  local -a max_letters_array\n  local -a max_letters_counts_array\n\
    \  local -a max_letters_counts_array_sorted\n  local -a max_letters_counts_array_sorted_unique\n\
    \  local -a max_letters_counts_array_sorted_unique_joined\n  local -a max_letters_counts_array_sorted_unique_joined_quoted\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined\n  local\
    \ -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted\n  local\
    \ -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted_joined_quoted\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \  local -a max_letters_counts_array_sorted_unique_joined_quoted_joined_quoted_joined_qu\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    (( letters[$letter]++\
    \ ))\n  done\n  local -a most_common\n  local max=0\n  for letter in \"${!letters[@]}\"\
    ; do\n    if (( letters[$letter] > max )); then\n      max=${letters[$letter]}\n\
    \      most_common=(\"$letter\")\n    elif (( letters[$letter] == max )); then\n\
    \      most_common+=(\"$letter\")\n    fi\n  done\n  local -a result\n  for letter\
    \ in \"${most_common[@]}\"; do\n    result+=(\"\\\"$letter\\\": \\\"$max\\\"\"\
    )\n  done\n  echo \"{$(IFS=,; echo \"${result[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n  local -A histogram\n  local -a letters\n  local -a counts\n\
    \  local -a max_counts\n  local max_count\n  local letter\n  local count\n  local\
    \ i\n\n  # Build the histogram\n  for letter in $string; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  # Build the letters and counts arrays\n  for letter in \"\
    ${!histogram[@]}\"; do\n    letters+=(\"$letter\")\n    counts+=(\"${histogram[$letter]}\"\
    )\n  done\n\n  # Find the maximum count\n  max_count=0\n  for count in \"${counts[@]}\"\
    ; do\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n\
    \  done\n\n  # Build the max_counts array\n  for ((i = 0; i < ${#counts[@]}; i++));\
    \ do\n    if [[ ${counts[$i]} -eq $max_count ]]; then\n      max_counts+=(\"${letters[$i]}\"\
    )\n    fi\n  done\n\n  # Build the output\n  output=\"{\"\n  for letter in \"\
    ${max_counts[@]}\"; do\n    output+=\"\\\"$letter\\\": \\\"$max_count\\\", \"\n\
    \  done\n  output=\"${output%, }\"\n  output+=\"}\"\n\n  echo \"$output\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local result\n\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n\
    \    ((letters[$letter]++))\n  done\n\n  for letter in \"${!letters[@]}\"; do\n\
    \    count=${letters[$letter]}\n    if ((count > max_count)); then\n      max_count=$count\n\
    \      max_letters=(\"$letter\")\n    elif ((count == max_count)); then\n    \
    \  max_letters+=(\"$letter\")\n    fi\n  done\n\n  result=\"{\"\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    result+=\"\\\"$letter\\\": \\\"$max_count\\\
    \"\"\n    if ((letter != ${max_letters[-1]})); then\n      result+=\", \"\n  \
    \  fi\n  done\n  result+=\"}\"\n\n  echo \"$result\"\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"$1\"\n  local -A histogram\n  local -a max_keys\n  local max_key\n  local\
    \ max_value\n  local -a keys\n  local key\n  local value\n  local -a csv\n  local\
    \ csv_str\n\n  # Build the histogram\n  for key in $str; do\n    ((histogram[$key]++))\n\
    \  done\n\n  # Find the max value\n  for key in \"${!histogram[@]}\"; do\n   \
    \ value=\"${histogram[$key]}\"\n    if [[ -z \"$max_value\" || \"$value\" -gt\
    \ \"$max_value\" ]]; then\n      max_value=\"$value\"\n      max_keys=(\"$key\"\
    )\n    elif [[ \"$value\" -eq \"$max_value\" ]]; then\n      max_keys+=(\"$key\"\
    )\n    fi\n  done\n\n  # Build the CSV\n  for key in \"${max_keys[@]}\"; do\n\
    \    csv+=(\"$key:$max_value\")\n  done\n\n  # Convert the CSV to a string\n \
    \ csv_str=\"$(IFS=,; echo \"${csv[*]}\")\"\n\n  # Print the CSV\n  echo \"{$csv_str}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a letters\n    local -a counts\n    local -a max_counts\n    local max_count=0\n\
    \    local letter\n    local count\n    local -i i\n    local -i j\n    local\
    \ -i k\n    local -i n\n    local -i m\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i A\n    local -i B\n    local -i C\n    local -i D\n    local -i E\n    local\
    \ -i F\n    local -i G\n    local -i H\n    local -i I\n    local -i J\n    local\
    \ -i K\n    local -i L\n    local -i M\n    local -i N\n    local -i O\n    local\
    \ -i P\n    local -i Q\n    local -i R\n    local -i S\n    local -i T\n    local\
    \ -i U\n    local -i V\n    local -i W\n    local -i X\n    local -i Y\n    local\
    \ -i Z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local\
    \ -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local\
    \ -i j\n    local -i k\n\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a result\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n       \
    \ if ((letters[$letter] > max)); then\n            max=${letters[$letter]}\n \
    \           result=(\"$letter\")\n        elif ((letters[$letter] == max)); then\n\
    \            result+=(\"$letter\")\n        fi\n    done\n    echo \"{$(IFS=,;\
    \ echo \"\\\"${result[*]}\\\"\":\\\"$max\\\")}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    done\n    local max=0\n    for letter in \"${!histogram[@]}\"; do\n\
    \        if [[ ${histogram[$letter]} -gt $max ]]; then\n            max=${histogram[$letter]}\n\
    \        fi\n    done\n    local -a result\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if [[ ${histogram[$letter]} -eq $max ]]; then\n            result+=(\"\
    $letter\")\n        fi\n    done\n    echo \"{$(IFS=,; echo \"\\\"${result[*]}\\\
    \"\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    letters[$letter]=$((letters[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if\
    \ [[ ${letters[$letter]} -gt $max ]]; then\n      max=${letters[$letter]}\n  \
    \  fi\n  done\n  local result=\"\"\n  for letter in \"${!letters[@]}\"; do\n \
    \   if [[ ${letters[$letter]} -eq $max ]]; then\n      if [[ -n $result ]]; then\n\
    \        result=\"$result, \"\n      fi\n      result=\"$result{\\\"$letter\\\"\
    : \\\"${letters[$letter]}\\\"}\"\n    fi\n  done\n  echo \"{$result}\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result=\"$result,\\\"\
    $letter\\\": \\\"${histogram[$letter]}\\\"\"\n    fi\n  done\n  echo \"{${result:1}}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count\n\
    \  local max_letters\n  local -a result\n  local result_string\n\n  # Build the\
    \ histogram\n  for letter in $1; do\n    if [[ -z ${histogram[$letter]} ]]; then\n\
    \      histogram[$letter]=1\n    else\n      histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    fi\n  done\n\n  # Find the max count\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if [[ -z $max_count ]] || [[ $count\
    \ -gt $max_count ]]; then\n      max_count=$count\n      max_letters=($letter)\n\
    \    elif [[ $count -eq $max_count ]]; then\n      max_letters+=($letter)\n  \
    \  fi\n  done\n\n  # Build the result\n  for letter in \"${max_letters[@]}\";\
    \ do\n    result+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n  done\n\
    \n  # Build the result string\n  result_string=\"{${result[*]}}\"\n  echo $result_string\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function\n  # Hint: Use the following command to sort the\
    \ letters in the string\n  # $ echo \"a b c\" | tr \" \" \"\\n\" | sort\n  #\n\
    \  # Hint: Use the following command to count the number of occurrences of each\n\
    \  # letter\n  # $ echo \"a b c\" | tr \" \" \"\\n\" | sort | uniq -c\n  #\n \
    \ # Hint: Use the following command to convert the output of the previous\n  #\
    \ command into a CSV\n  # $ echo \"a b c\" | tr \" \" \"\\n\" | sort | uniq -c\
    \ | awk '{print \"{\\\"\"$2\"\\\": \\\"\"$1\"\\\"}\"}'\n  #\n  # Hint: Use the\
    \ following command to concatenate the output of the previous\n  # command into\
    \ a single line\n  # $ echo \"a b c\" | tr \" \" \"\\n\" | sort | uniq -c | awk\
    \ '{print \"{\\\"\"$2\"\\\": \\\"\"$1\"\\\"}\"}' | paste -sd \",\" -\n  #\n  #\
    \ Hint: Use the following command to remove the trailing comma\n  # $ echo \"\
    a b c\" | tr \" \" \"\\n\" | sort | uniq -c | awk '{print \"{\\\"\"$2\"\\\": \\\
    \"\"$1\"\\\"}\"}' | paste -sd \",\" - | sed 's/,$//'\n  #\n  # Hint: Use the following\
    \ command to remove the trailing comma when there is\n  # only one letter\n  #\
    \ $ echo \"a b c\" | tr \" \" \"\\n\" | sort | uniq -c | awk '{print \"{\\\"\"\
    $2\"\\\": \\\"\"$1\"\\\"}\"}' | paste -sd \",\" - | sed 's/,$//' | sed 's/^{\\\
    (.*\\)}$/{\\1}/'\n  #\n  # Hint: Use the following command to remove the trailing\
    \ comma when there are\n  # no letters\n  # $ echo \"a b c\" | tr \" \" \"\\n\"\
    \ | sort | uniq -c | awk '{print \"{\\\"\"$2\"\\\": \\\"\"$1\"\\\"}\"}' | paste\
    \ -sd \"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6pt1fwnk.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp6pt1fwnk.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    if [[ -z ${histogram[$letter]} ]];\
    \ then\n      histogram[$letter]=1\n    else\n      histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    fi\n  done\n  local -a max_letters\n  local max_count=0\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]} -gt $max_count\
    \ ]]; then\n      max_letters=(\"$letter\")\n      max_count=${histogram[$letter]}\n\
    \    elif [[ ${histogram[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n  echo \"{\"\
    $(IFS=,; echo \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    letters[$letter]=$((letters[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  local max_letters=()\n  for letter in\
    \ \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -gt $max_count ]]; then\n\
    \      max_count=${letters[$letter]}\n      max_letters=(\"$letter\")\n    elif\
    \ [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  local max_letters_csv=$(printf '\"%s\",' \"${max_letters[@]}\"\
    )\n  max_letters_csv=${max_letters_csv%,}\n  echo \"{$max_letters_csv: '\\\"$max_count\\\
    \"'}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    echo\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}' | awk\
    \ '{print \"{\\\"\"$1\"\\\": \\\"\"$2\"\\\"}\"}' | paste -sd \",\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] > max_count)); then\n      max_letters=(\"$letter\"\
    )\n      max_count=${histogram[$letter]}\n    elif ((histogram[$letter] == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n  for\
    \ letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n  done\n  echo \"{$(join_by , \"${csv[@]}\")}\"\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk6zdp9td.sh: line 37: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement me!\n  echo \"Not yet implemented\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        if [[ -z ${histogram[$letter]}\
    \ ]]; then\n            histogram[$letter]=1\n        else\n            histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n        fi\n    done\n    local max=0\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if [[ ${histogram[$letter]} -gt $max ]]; then\n            max=${histogram[$letter]}\n\
    \        fi\n    done\n    local -a max_letters\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if [[ ${histogram[$letter]} -eq $max ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a result\n    for letter in \"${max_letters[@]}\"\
    ; do\n        result+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n \
    \   done\n    echo \"{$(IFS=,; echo \"${result[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local csv\n\n  for letter in $1; do\n    ((letters[$letter]++))\n \
    \ done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  csv=\"{\"\n  for letter in \"${max_letters[@]}\"; do\n\
    \    csv+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if ((letter != \"${max_letters[-1]}\"\
    )); then\n      csv+=\", \"\n    fi\n  done\n  csv+=\"}\"\n\n  echo \"$csv\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max_count=0\n  local max_letters=()\n  for\
    \ letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    letters[$letter]=$(( ${letters[$letter]}\
    \ + 1 ))\n    if [[ ${letters[$letter]} -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n\
    \      max_letters=()\n    fi\n    if [[ ${letters[$letter]} -eq $max_count ]];\
    \ then\n      max_letters+=($letter)\n    fi\n  done\n  echo -n '{'\n  local i\n\
    \  for (( i=0; i<${#max_letters[@]}; i++ )); do\n    if [[ $i -gt 0 ]]; then\n\
    \      echo -n ', '\n    fi\n    echo -n '\"'${max_letters[$i]}'\": \"'$max_count'\"\
    '\n  done\n  echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A letters\n\
    \  for letter in $1; do\n    letters[$letter]=$(( ${letters[$letter]} + 1 ))\n\
    \  done\n  local -A counts\n  for letter in \"${!letters[@]}\"; do\n    counts[${letters[$letter]}]=\"\
    ${counts[${letters[$letter]}]} $letter\"\n  done\n  local max_count=0\n  for count\
    \ in \"${!counts[@]}\"; do\n    if [ $count -gt $max_count ]; then\n      max_count=$count\n\
    \    fi\n  done\n  local result=\"{\"\n  for letter in ${counts[$max_count]};\
    \ do\n    result=\"$result '\\\"$letter\\\"': '\\\"$max_count\\\"',\"\n  done\n\
    \  echo \"${result%?}}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function\n  # Hint: You can use the following to get the\
    \ number of occurrences of a letter:\n  # echo \"a b b a\" | tr ' ' '\\n' | grep\
    \ -c 'a'\n  # Hint: You can use the following to get the number of occurrences\
    \ of each letter:\n  # echo \"a b b a\" | tr ' ' '\\n' | sort | uniq -c\n  # Hint:\
    \ You can use the following to get the number of occurrences of each letter,\n\
    \  # sorted by the number of occurrences:\n  # echo \"a b b a\" | tr ' ' '\\n'\
    \ | sort | uniq -c | sort -n\n  # Hint: You can use the following to get the number\
    \ of occurrences of each letter,\n  # sorted by the number of occurrences, and\
    \ then get the highest number of occurrences:\n  # echo \"a b b a\" | tr ' ' '\\\
    n' | sort | uniq -c | sort -n | tail -n 1\n  # Hint: You can use the following\
    \ to get the number of occurrences of each letter,\n  # sorted by the number of\
    \ occurrences, and then get the highest number of occurrences,\n  # and then get\
    \ the number of occurrences:\n  # echo \"a b b a\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | tail -n 1 | awk '{print $1}'\n  # Hint: You can use the following\
    \ to get the number of occurrences of each letter,\n  # sorted by the number of\
    \ occurrences, and then get the highest number of occurrences,\n  # and then get\
    \ the number of occurrences, and then get the letters with that number of occurrences:\n\
    \  # echo \"a b b a\" | tr ' ' '\\n' | sort | uniq -c | sort -n | tail -n 1 |\
    \ awk '{print $1}' | xargs -I {} grep -E \"{} \"\n  # Hint: You can use the following\
    \ to get the number of occurrences of each letter,\n  # sorted by the number of\
    \ occurrences, and then get the highest number of occurrences,\n  # and then get\
    \ the number of occurrences, and then get the letters with that number of occurrences,\n\
    \ \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzu64pn0x.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpzu64pn0x.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_letters=(\"\
    $letter\")\n      max_count=${histogram[$letter]}\n    elif [[ ${histogram[$letter]}\
    \ -eq $max_count ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\
    \  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"$letter:$max_count\"\
    )\n  done\n  echo \"${csv[@]}\" | tr ' ' ','\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max_count=0\n  local max_letters=()\n  local\
    \ csv=()\n\n  for letter in $1; do\n    (( letters[$letter]++ ))\n    if (( letters[$letter]\
    \ > max_count )); then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif (( letters[$letter] == max_count )); then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n\n  echo \"{$(IFS=,;\
    \ echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local count\n  local max_count=0\n  local max_letters=()\n\
    \  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    count=$((count + 1))\n\
    \    letters[$letter]=$count\n    if [ $count -gt $max_count ]; then\n      max_count=$count\n\
    \      max_letters=(\"$letter\")\n    elif [ $count -eq $max_count ]; then\n \
    \     max_letters+=(\"$letter\")\n    fi\n  done\n  echo -n '{'\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    echo -n \"\\\"$letter\\\": \\\"$max_count\\\
    \", \"\n  done\n  echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local count\n\
    \    local -a max_letters\n    local max_count\n    local -a result\n    local\
    \ -a result_letters\n    local -a result_counts\n    local -a result_pairs\n \
    \   local result_pair\n    local result_letter\n    local result_count\n    local\
    \ i\n    local j\n\n    # Build the histogram\n    for letter in $1; do\n    \
    \    ((histogram[$letter]++))\n    done\n\n    # Find the maximum count\n    letters=(${!histogram[@]})\n\
    \    max_count=0\n    for letter in ${letters[@]}; do\n        count=${histogram[$letter]}\n\
    \        if ((count > max_count)); then\n            max_count=$count\n      \
    \      max_letters=($letter)\n        elif ((count == max_count)); then\n    \
    \        max_letters+=($letter)\n        fi\n    done\n\n    # Build the result\n\
    \    result=()\n    for letter in ${max_letters[@]}; do\n        result+=(\\\"\
    $letter\\\": \\\"${histogram[$letter]}\\\")\n    done\n\n    # Format the result\n\
    \    result_letters=()\n    result_counts=()\n    result_pairs=()\n    for i in\
    \ ${!result[@]}; do\n        result_pair=${result[$i]}\n        result_letter=${result_pair%%:*}\n\
    \        result_count=${result_pair##*: }\n        result_letters+=($result_letter)\n\
    \        result_counts+=($result_count)\n    done\n    for i in ${!result_letters[@]};\
    \ do\n        result_letter=${result_letters[$i]}\n        result_count=${result_counts[$i]}\n\
    \        result_pairs+=($result_letter:$result_count)\n    done\n    echo ${result_pairs[@]}\
    \ | tr ' ' ','\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -a letters\n  local -a counts\n  local -a max_counts\n  local -a max_letters\n\
    \  local -i max_count\n  local -i count\n  local -i i\n  local -i j\n  local -i\
    \ k\n  local -i n\n  local -i m\n  local -i p\n  local -i q\n  local -i r\n  local\
    \ -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n\
    \  local -i y\n  local -i z\n  local -i A\n  local -i B\n  local -i C\n  local\
    \ -i D\n  local -i E\n  local -i F\n  local -i G\n  local -i H\n  local -i I\n\
    \  local -i J\n  local -i K\n  local -i L\n  local -i M\n  local -i N\n  local\
    \ -i O\n  local -i P\n  local -i Q\n  local -i R\n  local -i S\n  local -i T\n\
    \  local -i U\n  local -i V\n  local -i W\n  local -i X\n  local -i Y\n  local\
    \ -i Z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n\
    \  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n\
    \  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local\
    \ -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i A\n\
    \  local -i B\n  local -i C\n  local -i D\n  local -i E\n  local -i F\n  local\
    \ -i G\n  local -i H\n  local -i I\n  local -i J\n\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif ((count ==\
    \ max_count)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local\
    \ -a result\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\
    \": \\\"$max_count\\\"\")\n  done\n  echo \"{$(join_by , \"${result[@]}\")}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyi8kxzwq.sh: line 38: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    for letter in $(echo $1 | tr ' ' '\\n'); do\n        ((letters[$letter]++))\n\
    \    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n       \
    \ if [[ ${letters[$letter]} -gt $max ]]; then\n            max=${letters[$letter]}\n\
    \        fi\n    done\n    local -a result\n    for letter in \"${!letters[@]}\"\
    ; do\n        if [[ ${letters[$letter]} -eq $max ]]; then\n            result+=(\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n        fi\n    done\n    echo\
    \ \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local max_count=0\n\
    \    local count\n    local -a max_letters\n    local -a csv_array\n    local\
    \ csv\n\n    for letter in $1; do\n        ((histogram[$letter]++))\n    done\n\
    \n    for letter in \"${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n\
    \        if ((count > max_count)); then\n            max_count=$count\n      \
    \      max_letters=(\"$letter\")\n        elif ((count == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n\n    for letter\
    \ in \"${max_letters[@]}\"; do\n        csv_array+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n    done\n\n    csv=\"{$(join_by \", \" \"${csv_array[@]}\")}\"\n    echo\
    \ \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz42eg4eb.sh: line 46: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for count in \"${histogram[@]}\"; do\n\
    \    if (( count > max_count )); then\n      max_count=$count\n    fi\n  done\n\
    \  local -a max_letters\n  for letter in \"${!histogram[@]}\"; do\n    if (( histogram[$letter]\
    \ == max_count )); then\n      max_letters+=($letter)\n    fi\n  done\n  local\
    \ -a csv\n  for letter in \"${max_letters[@]}\"; do\n    csv+=($(printf '\"%s\"\
    : \"%s\"' \"$letter\" \"$max_count\"))\n  done\n  echo \"{$(IFS=,; echo \"${csv[*]}\"\
    )}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A hist\n  for\
    \ c in $1; do\n    hist[$c]=$((hist[$c] + 1))\n  done\n  local max=0\n  for c\
    \ in \"${!hist[@]}\"; do\n    if [ ${hist[$c]} -gt $max ]; then\n      max=${hist[$c]}\n\
    \    fi\n  done\n  local -a max_letters\n  for c in \"${!hist[@]}\"; do\n    if\
    \ [ ${hist[$c]} -eq $max ]; then\n      max_letters+=(\"$c\")\n    fi\n  done\n\
    \  local -a csv\n  for c in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$c\\\"\
    : \\\"${hist[$c]}\\\"\")\n  done\n  echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local count\n\
    \    local max_count\n    local -a max_letters\n    local -a result\n\n    for\
    \ letter in $1; do\n        ((histogram[$letter]++))\n    done\n\n    for letter\
    \ in \"${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n        if\
    \ [[ $count -gt $max_count ]]; then\n            max_count=$count\n          \
    \  max_letters=(\"$letter\")\n        elif [[ $count -eq $max_count ]]; then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n\n    for letter\
    \ in \"${max_letters[@]}\"; do\n        result+=(\"\\\"$letter\\\": \\\"$max_count\\\
    \"\")\n    done\n\n    echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local result\n\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  result=\"{\"\n  for letter in \"${max_letters[@]}\"; do\n\
    \    result+=\"\\\"$letter\\\": \\\"$max_count\\\", \"\n  done\n  result=${result%%,\
    \ }\n  result+=\"}\"\n  echo \"$result\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local csv\n  local -a csv_array\n  local i\n  local j\n\n  for letter\
    \ in $1; do\n    ((letters[$letter]++))\n  done\n\n  for letter in \"${!letters[@]}\"\
    ; do\n    count=${letters[$letter]}\n    if ((count > max_count)); then\n    \
    \  max_count=$count\n      max_letters=(\"$letter\")\n    elif ((count == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  for ((i = 0; i <\
    \ ${#max_letters[@]}; i++)); do\n    if ((i > 0)); then\n      csv+=\",\"\n  \
    \  fi\n    csv+=\"\\\"${max_letters[$i]}\\\": \\\"$max_count\\\"\"\n  done\n\n\
    \  echo \"{$csv}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        ((histogram[$letter]++))\n\
    \    done\n    local -a max_letters\n    local max_count=0\n    for letter in\
    \ \"${!histogram[@]}\"; do\n        if ((histogram[$letter] > max_count)); then\n\
    \            max_letters=(\"$letter\")\n            max_count=${histogram[$letter]}\n\
    \        elif ((histogram[$letter] == max_count)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    echo -n '{'\n    for letter in \"${max_letters[@]}\"\
    ; do\n        echo -n \"\\\"$letter\\\": \\\"$max_count\\\", \"\n    done\n  \
    \  echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a keys\n  local -a values\n  local -a output\n  local letter\n\
    \  local count\n  local max_count\n  local max_count_letters\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n\n  # Initialize the letters array\n  for letter in\
    \ {a..z}; do\n    letters[$letter]=0\n  done\n\n  # Count the letters\n  for letter\
    \ in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((letters[$letter]++))\n  done\n\n\
    \  # Get the keys and values\n  keys=(${!letters[@]})\n  values=(${letters[@]})\n\
    \n  # Get the max count\n  max_count=0\n  for count in ${values[@]}; do\n    if\
    \ [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n  done\n\n\
    \  # Get the letters with the max count\n  max_count_letters=()\n  for ((i=0;\
    \ i<${#values[@]}; i++)); do\n    if [[ ${values[$i]} -eq $max_count ]]; then\n\
    \      max_count_letters+=(${keys[$i]})\n    fi\n  done\n\n  # Create the output\n\
    \  output=()\n  for letter in ${max_count_letters[@]}; do\n    output+=(\"\\\"\
    $letter\\\": \\\"$max_count\\\"\")\n  done\n\n  # Print the output\n  echo \"\
    {\"$(IFS=,; echo \"${output[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a max_keys\n    local max_value\n    for letter\
    \ in $1; do\n        (( histogram[$letter]++ ))\n    done\n    for key in \"${!histogram[@]}\"\
    ; do\n        if [[ -z $max_value || ${histogram[$key]} -gt $max_value ]]; then\n\
    \            max_value=${histogram[$key]}\n            max_keys=(\"$key\")\n \
    \       elif [[ ${histogram[$key]} -eq $max_value ]]; then\n            max_keys+=(\"\
    $key\")\n        fi\n    done\n    echo -n '{'\n    for key in \"${max_keys[@]}\"\
    ; do\n        echo -n \"\\\"$key\\\": \\\"${histogram[$key]}\\\", \"\n    done\n\
    \    echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ -A letters\n    local letter\n    for letter in $(echo \"$1\" | tr \" \" \"\\\
    n\"); do\n        if [ -z \"${letters[$letter]}\" ]; then\n            letters[$letter]=1\n\
    \        else\n            letters[$letter]=$((letters[$letter]+1))\n        fi\n\
    \    done\n    local -A max_letters\n    local max_count=0\n    for letter in\
    \ \"${!letters[@]}\"; do\n        if [ \"${letters[$letter]}\" -gt \"$max_count\"\
    \ ]; then\n            max_count=\"${letters[$letter]}\"\n            unset max_letters\n\
    \            max_letters[$letter]=1\n        elif [ \"${letters[$letter]}\" -eq\
    \ \"$max_count\" ]; then\n            max_letters[$letter]=1\n        fi\n   \
    \ done\n    local -a result\n    for letter in \"${!max_letters[@]}\"; do\n  \
    \      result+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n    done\n    echo \"\
    {\"$(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local max_count\n\
    \    local count\n    local -a max_letters\n    local -a csv_letters\n    local\
    \ csv_letter\n    local csv_count\n    local csv_max_letters\n    local csv_max_count\n\
    \    local csv_max_letter\n    local csv_max_letters_count\n    local csv_max_letters_count_letter\n\
    \    local csv_max_letters_count_letters\n    local csv_max_letters_count_count\n\
    \    local csv_max_letters_count_max_letters\n    local csv_max_letters_count_max_count\n\
    \    local csv_max_letters_count_max_letter\n    local csv_max_letters_count_max_letters_count\n\
    \    local csv_max_letters_count_max_letters_count_letter\n    local csv_max_letters_count_max_letters_count_letters\n\
    \    local csv_max_letters_count_max_letters_count_count\n    local csv_max_letters_count_max_letters_count_max_letters\n\
    \    local csv_max_letters_count_max_letters_count_max_count\n    local csv_max_letters_count_max_letters_count_max_letter\n\
    \    local csv_max_letters_count_max_letters_count_max_letters_count\n    local\
    \ csv_max_letters_count_max_letters_count_max_letters_count_letter\n    local\
    \ csv_max_letters_count_max_letters_count_max_letters_count_letters\n    local\
    \ csv_max_letters_count_max_letters_count_max_letters_count_count\n    local csv_max_letters_count_max_letters_count_max_letters_count_max_letters\n\
    \    local csv_max_letters_count_max_letters_count_max_letters_count_max_count\n\
    \    local csv_max_letters_count_max_letters_count_max_letters_count_max_letter\n\
    \    local csv_max_letters_count_max_letters_\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A hist\n  local -a letters\n  local -a counts\n  local letter\n  local count\n\
    \  for letter in $1; do\n    ((hist[$letter]++))\n  done\n  for letter in \"${!hist[@]}\"\
    ; do\n    letters+=(\"$letter\")\n    counts+=(\"${hist[$letter]}\")\n  done\n\
    \  max_count=$(printf \"%s\\n\" \"${counts[@]}\" | sort -nr | head -n 1)\n  for\
    \ ((i=0; i<${#counts[@]}; i++)); do\n    if [[ \"${counts[$i]}\" -eq \"$max_count\"\
    \ ]]; then\n      echo -n \"{\\\"${letters[$i]}\\\": \\\"${counts[$i]}\\\"\"\n\
    \      if [[ \"$i\" -lt \"$((${#counts[@]} - 1))\" ]]; then\n        echo -n \"\
    , \"\n      fi\n    fi\n  done\n  echo \"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ letter\n    local count\n    local -a result\n\n    for letter in $1; do\n \
    \       ((letters[$letter]++))\n    done\n\n    for letter in \"${!letters[@]}\"\
    ; do\n        count=${letters[$letter]}\n        if ((count > max_count)); then\n\
    \            max_count=$count\n            max_letters=(\"$letter\")\n       \
    \ elif ((count == max_count)); then\n            max_letters+=(\"$letter\")\n\
    \        fi\n    done\n\n    for letter in \"${max_letters[@]}\"; do\n       \
    \ result+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n    done\n\n    echo \"{\"\
    $(IFS=,; echo \"${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: implement this function\n  # Hint: use the following command to get the\
    \ count of each letter\n  # $ echo \"a b c a b\" | tr ' ' '\\n' | sort | uniq\
    \ -c\n  #   2 a\n  #   2 b\n  #   1 c\n  #\n  # Hint: use the following command\
    \ to get the count of each letter\n  # $ echo \"a b c a b\" | tr ' ' '\\n' | sort\
    \ | uniq -c | sort -r\n  #   2 a\n  #   2 b\n  #   1 c\n  #\n  # Hint: use the\
    \ following command to get the count of each letter\n  # $ echo \"a b c a b\"\
    \ | tr ' ' '\\n' | sort | uniq -c | sort -r | head -n 1\n  #   2 a\n  #   2 b\n\
    \  #\n  # Hint: use the following command to get the count of each letter\n  #\
    \ $ echo \"a b c a b\" | tr ' ' '\\n' | sort | uniq -c | sort -r | head -n 1 |\
    \ awk '{print $1}'\n  #   2\n  #\n  # Hint: use the following command to get the\
    \ count of each letter\n  # $ echo \"a b c a b\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -r | head -n 1 | awk '{print $1}'\n  #   2\n  #\n  # Hint: use the\
    \ following command to get the count of each letter\n  # $ echo \"a b c a b\"\
    \ | tr ' ' '\\n' | sort | uniq -c | sort -r | head -n 1 | awk '{print $1}'\n \
    \ #   2\n  #\n  # Hint: use the following command to get the count of each letter\n\
    \  # $ echo \"a b c a b\" | tr ' ' '\\n' | sort | uniq -c | sort -r | head -n\
    \ 1 | awk '{print $1}'\n  #   2\n  #\n  # Hint: use the following command to get\
    \ the count of each letter\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbkgqzjsk.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpbkgqzjsk.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max_count=0\n  local max_letters=()\n  local\
    \ csv_letters=()\n  for letter in $1; do\n    ((letters[$letter]++))\n    if ((letters[$letter]\
    \ > max_count)); then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif ((letters[$letter] == max_count)); then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  for letter in \"${max_letters[@]}\"; do\n    csv_letters+=(\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n  echo \"{$(IFS=,; echo\
    \ \"${csv_letters[*]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for count in \"${histogram[@]}\"; do\n\
    \    if ((count > max_count)); then\n      max_count=$count\n    fi\n  done\n\
    \  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ == max_count)); then\n      result=\"$result,\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\"\n    fi\n  done\n  echo \"{\"${result#,}\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max_count=0\n  local max_letters=()\n  for\
    \ letter in $1; do\n    ((letters[$letter]++))\n    if [[ ${letters[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n  echo\
    \ \"{$(join , \"${csv[@]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'join: extra operand ''"a": "2"''

    Try ''join --help'' for more information.

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif ((count ==\
    \ max_count)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local\
    \ -a result\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\
    \": \\\"$max_count\\\"\")\n  done\n  echo \"{$(join_by , \"${result[@]}\")}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyi8kxzwq.sh: line 38: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((histogram[$letter]++))\n\
    \  done\n  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n    if\
    \ ((histogram[$letter] > max_count)); then\n      max_count=${histogram[$letter]}\n\
    \    fi\n  done\n  local -a max_letters\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] == max_count)); then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  echo -n '{'\n  for letter in \"${max_letters[@]}\"\
    ; do\n    echo -n \"\\\"$letter\\\": \\\"$max_count\\\", \"\n  done\n  echo -n\
    \ '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for count in \"${histogram[@]}\"; do\n\
    \    if ((count > max_count)); then\n      max_count=$count\n    fi\n  done\n\
    \  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ == max_count)); then\n      if [[ -n $result ]]; then\n        result=\"$result,\
    \ \"\n      fi\n      result=\"$result{\\\"$letter\\\": \\\"$max_count\\\"}\"\n\
    \    fi\n  done\n  echo \"{$result}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local csv\n  local -a csv_array\n  local csv_array_index=0\n  local\
    \ csv_array_size=0\n  local csv_array_element\n  local csv_array_element_index\n\
    \  local csv_array_element_size\n  local csv_array_element_key\n  local csv_array_element_value\n\
    \  local csv_array_element_key_size\n  local csv_array_element_value_size\n  local\
    \ csv_array_element_key_index\n  local csv_array_element_value_index\n  local\
    \ csv_array_element_key_char\n  local csv_array_element_value_char\n  local csv_array_element_key_char_index\n\
    \  local csv_array_element_value_char_index\n  local csv_array_element_key_char_size\n\
    \  local csv_array_element_value_char_size\n  local csv_array_element_key_char_ascii\n\
    \  local csv_array_element_value_char_ascii\n  local csv_array_element_key_char_ascii_index\n\
    \  local csv_array_element_value_char_ascii_index\n  local csv_array_element_key_char_ascii_size\n\
    \  local csv_array_element_value_char_ascii_size\n  local csv_array_element_key_char_ascii_char\n\
    \  local csv_array_element_value_char_ascii_char\n  local csv_array_element_key_char_ascii_char_index\n\
    \  local csv_array_element_value_char_ascii_char_index\n  local csv_array_element_key_char_ascii_char_size\n\
    \  local csv_array_element_value_char_ascii_char_size\n  local csv_array_element_key_char_ascii_char_char\n\
    \ \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local letter\n    for letter in $(echo \"$1\" | tr '\
    \ ' '\\n'); do\n        histogram[$letter]=$((histogram[$letter] + 1))\n    done\n\
    \    local max=0\n    for letter in \"${!histogram[@]}\"; do\n        if [[ ${histogram[$letter]}\
    \ -gt $max ]]; then\n            max=${histogram[$letter]}\n        fi\n    done\n\
    \    local result=\"\"\n    for letter in \"${!histogram[@]}\"; do\n        if\
    \ [[ ${histogram[$letter]} -eq $max ]]; then\n            if [[ -n $result ]];\
    \ then\n                result=\"$result, \"\n            fi\n            result=\"\
    $result{\\\"$letter\\\": \\\"${histogram[$letter]}\\\"}\"\n        fi\n    done\n\
    \    echo \"{$result}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n       \
    \ if ((letters[$letter] > max)); then\n            max=${letters[$letter]}\n \
    \       fi\n    done\n    local -a max_letters\n    for letter in \"${!letters[@]}\"\
    ; do\n        if ((letters[$letter] == max)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a csv\n    for letter in \"${max_letters[@]}\"\
    ; do\n        csv+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n    done\n\
    \    echo \"{\"$(IFS=,; echo \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n  else\n    echo \"{$(echo \"$1\" | tr\
    \ ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print \"\\\"\"$2\"\\\": \\\"\"\
    $1\"\\\"\"}' | tr '\\n' ',' | sed 's/,$//')}\"\n  fi\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  echo -n '{'\n  local first=true\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if $first; then\n      first=false\n    else\n      echo -n ', '\n    fi\n\
    \    echo -n '\"'$letter'\": \"'${histogram[$letter]}'\"'\n  done\n  echo '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  for letter in $1; do\n    (( histogram[$letter]++\
    \ ))\n  done\n  local -a max_letters\n  local max_count=0\n  for letter in \"\
    ${!histogram[@]}\"; do\n    if (( histogram[$letter] > max_count )); then\n  \
    \    max_letters=(\"$letter\")\n      max_count=${histogram[$letter]}\n    elif\
    \ (( histogram[$letter] == max_count )); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n\
    \    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n  done\n  echo\
    \ \"{$(join_by , \"${csv[@]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa5w0g6_0.sh: line 38: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letter_count\n  local -a letters\n  local letter\n  local count\n  local\
    \ -a max_letters\n  local max_count\n  local -a csv_array\n  local csv_string\n\
    \  local -a csv_string_array\n  local csv_string_array_string\n  local -a csv_string_array_string_array\n\
    \  local csv_string_array_string_array_string\n  local -a csv_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array_string\n  local -a csv_string_array_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array_string_array_string\n  local\
    \ -a csv_string_array_string_array_string_array_string_array_string_array\n  local\
    \ csv_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a csv_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a csv_string_array_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a csv_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a csv_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local csv_string_array_string_array_string_array\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local letter\n    local -i max_count=0\n\
    \    local -i count\n    local -a max_letters=()\n    local -a csv_letters=()\n\
    \    local -a csv_counts=()\n    local -a csv_pairs=()\n    local -a csv_pairs_sorted=()\n\
    \    local csv_pairs_sorted_string\n    local csv_pairs_string\n    local csv_string\n\
    \n    for letter in $1; do\n        ((histogram[$letter]++))\n    done\n\n   \
    \ for letter in \"${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n\
    \        if ((count > max_count)); then\n            max_count=$count\n      \
    \      max_letters=(\"$letter\")\n        elif ((count == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n\n    for letter\
    \ in \"${max_letters[@]}\"; do\n        csv_letters+=(\"\\\"$letter\\\"\")\n \
    \       csv_counts+=(\"\\\"$max_count\\\"\")\n    done\n\n    csv_pairs=($(paste\
    \ -d ':' <(printf \"%s\\n\" \"${csv_letters[@]}\") <(printf \"%s\\n\" \"${csv_counts[@]}\"\
    )))\n    csv_pairs_sorted=($(printf \"%s\\n\" \"${csv_pairs[@]}\" | sort))\n \
    \   csv_pairs_sorted_string=$(printf \"%s,\" \"${csv_pairs_sorted[@]}\")\n   \
    \ csv_pairs_string=${csv_pairs_sorted_string%?}\n    csv_string=\"{$csv_pairs_string}\"\
    \n    echo $csv_string\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -n -r)\n  local\
    \ max_count=$(echo \"$letters\" | head -n 1 | awk '{print $1}')\n  local max_letters=$(echo\
    \ \"$letters\" | awk -v max_count=\"$max_count\" '$1 == max_count {print $2}')\n\
    \  echo \"$max_letters\" | tr '\\n' ',' | sed 's/,$//'\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk '{print $2, $1}'\
    \ | tr ' ' ',' | sed 's/^/{/' | sed 's/$/}/'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] > max_count)); then\n      max_letters=(\"$letter\"\
    )\n      max_count=${histogram[$letter]}\n    elif ((histogram[$letter] == max_count));\
    \ then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n  for\
    \ letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n  done\n  echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max=0\n  local -a max_letters\n  for letter\
    \ in ${1// / }; do\n    ((letters[$letter]++))\n    if ((letters[$letter] > max));\
    \ then\n      max=${letters[$letter]}\n      max_letters=(\"$letter\")\n    elif\
    \ ((letters[$letter] == max)); then\n      max_letters+=(\"$letter\")\n    fi\n\
    \  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n  echo \"{\"$(IFS=,;\
    \ echo \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n\
    \    letters[\"$letter\"]=$((letters[\"$letter\"] + 1))\n  done\n  local -a max_letters\n\
    \  local max_count=0\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max_count ]]; then\n      max_letters=(\"$letter\")\n      max_count=${letters[$letter]}\n\
    \    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  echo \"${max_letters[@]}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ letter\n    local count\n    local csv\n\n    for letter in $1; do\n       \
    \ ((letters[$letter]++))\n    done\n\n    for letter in \"${!letters[@]}\"; do\n\
    \        count=${letters[$letter]}\n        if ((count > max_count)); then\n \
    \           max_count=$count\n            max_letters=(\"$letter\")\n        elif\
    \ ((count == max_count)); then\n            max_letters+=(\"$letter\")\n     \
    \   fi\n    done\n\n    csv=\"{\"\n    for letter in \"${max_letters[@]}\"; do\n\
    \        csv+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n        if ((${#max_letters[@]}\
    \ > 1)); then\n            csv+=\", \"\n        fi\n    done\n    csv+=\"}\"\n\
    \n    echo \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n    local max=0\n    for letter in \"${!letters[@]}\"; do\n       \
    \ if ((letters[$letter] > max)); then\n            max=${letters[$letter]}\n \
    \       fi\n    done\n    local output=\"\"\n    for letter in \"${!letters[@]}\"\
    ; do\n        if ((letters[$letter] == max)); then\n            output+=\"{\\\"\
    $letter\\\": \\\"$max\\\"}, \"\n        fi\n    done\n    echo \"{${output%, }}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for count in \"${histogram[@]}\"; do\n    if\
    \ (( count > max )); then\n      max=$count\n    fi\n  done\n  local result=()\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if (( histogram[$letter] == max\
    \ )); then\n      result+=(\"$letter\")\n    fi\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  for letter in $1;\
    \ do\n    letters[$letter]=$(( ${letters[$letter]} + 1 ))\n    if [[ ${letters[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  echo -n '{'\n  for letter in \"${max_letters[@]}\"\
    ; do\n    echo -n '\"'$letter'\": \"'${letters[$letter]}'\", '\n  done\n  echo\
    \ -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: implement me\n    echo \"{}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: implement this function\n    echo \"{}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local output\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  output=\"{\"\n  for letter in \"${max_letters[@]}\"; do\n\
    \    output+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if ((${#max_letters[@]}\
    \ > 1)); then\n      output+=\", \"\n    fi\n  done\n  output+=\"}\"\n  echo \"\
    $output\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result+=(\"$letter:${histogram[$letter]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local count\n  local\
    \ letter\n  local csv\n  local -a csv_array\n  local csv_string\n\n  for letter\
    \ in $1; do\n    (( letters[$letter]++ ))\n  done\n\n  for letter in \"${!letters[@]}\"\
    ; do\n    count=${letters[$letter]}\n    if [[ $count -gt $max_count ]]; then\n\
    \      max_count=$count\n      max_letters=(\"$letter\")\n    elif [[ $count -eq\
    \ $max_count ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  for\
    \ letter in \"${max_letters[@]}\"; do\n    csv_array+=(\"\\\"$letter\\\": \\\"\
    $max_count\\\"\")\n  done\n\n  csv_string=$(IFS=,; echo \"${csv_array[*]}\")\n\
    \  echo \"{$csv_string}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local -a counts\n    local -a\
    \ result\n    local letter\n    local count\n    local i\n    local j\n    local\
    \ max_count\n\n    # Initialize the histogram\n    for letter in $(echo \"$1\"\
    \ | tr ' ' '\\n' | sort -u); do\n        histogram[$letter]=0\n    done\n\n  \
    \  # Count the letters\n    for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n\
    \        ((histogram[$letter]++))\n    done\n\n    # Get the letters and counts\n\
    \    for letter in \"${!histogram[@]}\"; do\n        letters+=(\"$letter\")\n\
    \        counts+=(\"${histogram[$letter]}\")\n    done\n\n    # Find the maximum\
    \ count\n    max_count=0\n    for ((i=0; i<${#counts[@]}; i++)); do\n        if\
    \ ((counts[i] > max_count)); then\n            max_count=${counts[i]}\n      \
    \  fi\n    done\n\n    # Build the result\n    for ((i=0; i<${#counts[@]}; i++));\
    \ do\n        if ((counts[i] == max_count)); then\n            result+=(\"{\\\"\
    ${letters[i]}\\\": \\\"${counts[i]}\\\"}\")\n        fi\n    done\n\n    # Print\
    \ the result\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif ((count ==\
    \ max_count)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  echo\
    \ -n \"{\"\n  local first=true\n  for letter in \"${max_letters[@]}\"; do\n  \
    \  if $first; then\n      first=false\n    else\n      echo -n \", \"\n    fi\n\
    \    echo -n \"\\\"$letter\\\": \\\"$max_count\\\"\"\n  done\n  echo \"}\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local -a letters\n    local -i max_count\n    local\
    \ -a max_letters\n    local letter\n    local count\n    local -i i\n    for letter\
    \ in ${1// /}; do\n        ((histogram[$letter]++))\n    done\n    for letter\
    \ in \"${!histogram[@]}\"; do\n        count=${histogram[$letter]}\n        if\
    \ ((count > max_count)); then\n            max_count=$count\n            max_letters=(\"\
    $letter\")\n        elif ((count == max_count)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    printf '{'\n    for ((i = 0; i < ${#max_letters[@]};\
    \ i++)); do\n        letter=${max_letters[$i]}\n        count=${histogram[$letter]}\n\
    \        if ((i > 0)); then\n            printf ', '\n        fi\n        printf\
    \ '\"%s\": \"%s\"' \"$letter\" \"$count\"\n    done\n    printf '}'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a max_keys\n  local max_count=0\n  local key\n  local\
    \ count\n  local -a keys\n  local -a values\n  local i\n  local result\n\n  for\
    \ key in $1; do\n    ((histogram[$key]++))\n  done\n\n  for key in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$key]}\n    if ((count > max_count)); then\n     \
    \ max_count=$count\n      max_keys=(\"$key\")\n    elif ((count == max_count));\
    \ then\n      max_keys+=(\"$key\")\n    fi\n  done\n\n  for ((i = 0; i < ${#max_keys[@]};\
    \ i++)); do\n    keys[i]=\"\\\"${max_keys[i]}\\\"\"\n    values[i]=\"\\\"$max_count\\\
    \"\"\n  done\n\n  result=\"{$(join_by \", \" \"${keys[@]}\" \"${values[@]}\")}\"\
    \n  echo \"$result\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4eqy62m_.sh: line 48: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        (( histogram[$letter]++\
    \ ))\n    done\n    echo -n \"{\"\n    for letter in \"${!histogram[@]}\"; do\n\
    \        echo -n '\"'$letter'\": \"'${histogram[$letter]}'\", '\n    done\n  \
    \  echo -n \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for count in \"${histogram[@]}\"; do\n    if\
    \ [[ $count -gt $max ]]; then\n      max=$count\n    fi\n  done\n  local result=\"\
    \"\n  for letter in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]}\
    \ -eq $max ]]; then\n      result=\"$result,\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\"\n    fi\n  done\n  echo \"{\"${result#,}\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: Implement me\n    echo \"Not yet implemented\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count\n\
    \  local -a max_letters\n  local -a csv_letters\n  local csv_letter\n  local -a\
    \ csv_counts\n  local csv_count\n  local csv\n\n  # Build a histogram of the letters\n\
    \  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter] + 1))\n\
    \  done\n\n  # Find the letters with the most repetition\n  max_count=0\n  for\
    \ letter in \"${!histogram[@]}\"; do\n    count=${histogram[$letter]}\n    if\
    \ ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"$letter\"\
    )\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\")\n \
    \   fi\n  done\n\n  # Build a CSV of the letters and their counts\n  csv_letters=()\n\
    \  csv_counts=()\n  for letter in \"${max_letters[@]}\"; do\n    csv_letters+=(\"\
    \\\"$letter\\\"\")\n    csv_counts+=(\"\\\"${histogram[$letter]}\\\"\")\n  done\n\
    \  csv=$(join_by , \"${csv_letters[@]}\")\n  csv=$(join_by : \"$csv\" \"${csv_counts[@]}\"\
    )\n  echo \"{$csv}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk6z7913z.sh: line 55: join_by: command not found

    /tmp/tmpk6z7913z.sh: line 56: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((letters[$letter]++))\n\
    \  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter]\
    \ > max)); then\n      max=${letters[$letter]}\n    fi\n  done\n  local result=\"\
    \"\n  for letter in \"${!letters[@]}\"; do\n    if ((letters[$letter] == max));\
    \ then\n      result=\"$result,\\\"$letter\\\": \\\"$max\\\"\"\n    fi\n  done\n\
    \  echo \"{${result:1}}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    done\n    local -a max_letters\n    local max_count=0\n    for letter\
    \ in \"${!histogram[@]}\"; do\n        if [[ ${histogram[$letter]} -gt $max_count\
    \ ]]; then\n            max_letters=(\"$letter\")\n            max_count=${histogram[$letter]}\n\
    \        elif [[ ${histogram[$letter]} -eq $max_count ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a csv\n    for letter in \"${max_letters[@]}\"\
    ; do\n        csv+=(\"$letter: ${histogram[$letter]}\")\n    done\n    echo \"\
    ${csv[@]}\" | tr ' ' ','\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    done\n    local max=0\n    for letter in \"${!histogram[@]}\"; do\n\
    \        if [[ ${histogram[$letter]} -gt $max ]]; then\n            max=${histogram[$letter]}\n\
    \        fi\n    done\n    local result=\"\"\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if [[ ${histogram[$letter]} -eq $max ]]; then\n            result=\"\
    $result,\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\"\n        fi\n    done\n\
    \    echo \"{\"${result#,}\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local max=0\n  local max_keys\n  for letter in $(echo \"$1\"\
    \ | tr ' ' '\\n'); do\n    histogram[$letter]=$((histogram[$letter] + 1))\n  \
    \  if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \      max_keys=($letter)\n    elif [[ ${histogram[$letter]} -eq $max ]]; then\n\
    \      max_keys+=($letter)\n    fi\n  done\n  echo -n '{'\n  local -a keys=(${!histogram[@]})\n\
    \  for key in \"${keys[@]}\"; do\n    echo -n '\"'$key'\": \"'${histogram[$key]}'\"\
    , '\n  done\n  echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  local max_count=0\n  local max_letters=()\n\
    \  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter] + 1))\n\
    \    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${histogram[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"\
    ${histogram[$letter]}\\\"\")\n  done\n  echo \"{\"$(join , \"${csv[@]}\")\"}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'join: extra operand ''"a": "2"''

    Try ''join --help'' for more information.

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local letter\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result+=(\"$letter:${histogram[$letter]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' ','\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ letter\n    local count\n    local result\n    for letter in $1; do\n      \
    \  let letters[$letter]++\n        if [ ${letters[$letter]} -gt $max_count ];\
    \ then\n            max_count=${letters[$letter]}\n            max_letters=(\"\
    $letter\")\n        elif [ ${letters[$letter]} -eq $max_count ]; then\n      \
    \      max_letters+=(\"$letter\")\n        fi\n    done\n    result=\"{\"\n  \
    \  for letter in \"${max_letters[@]}\"; do\n        result+=\"\\\"$letter\\\"\
    : \\\"${letters[$letter]}\\\",\"\n    done\n    result=\"${result%,}\"\"}\"\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $1; do\n    letters[$letter]=$((\
    \ ${letters[$letter]} + 1 ))\n  done\n  local max_count=0\n  local max_letters=()\n\
    \  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]} -gt $max_count\
    \ ]]; then\n      max_count=${letters[$letter]}\n      max_letters=(\"$letter\"\
    )\n    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local result=\"{\"\n  local first=true\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    if [[ $first == false ]]; then\n      result+=\"\
    , \"\n    fi\n    result+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n    first=false\n\
    \  done\n  result+=\"}\"\n  echo \"$result\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local max=0\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ > max)); then\n      max=${histogram[$letter]}\n    fi\n  done\n  local -a letters\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max));\
    \ then\n      letters+=(\"$letter\")\n    fi\n  done\n  echo -n '{'\n  local first=true\n\
    \  for letter in \"${letters[@]}\"; do\n    if $first; then\n      first=false\n\
    \    else\n      echo -n ', '\n    fi\n    echo -n '\"'$letter'\": \"'${histogram[$letter]}'\"\
    '\n  done\n  echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local -a max_letters\n  local max_count=0\n  for letter in\
    \ \"${!histogram[@]}\"; do\n    local count=${histogram[$letter]}\n    if [[ $count\
    \ -gt $max_count ]]; then\n      max_letters=(\"$letter\")\n      max_count=$count\n\
    \    elif [[ $count -eq $max_count ]]; then\n      max_letters+=(\"$letter\")\n\
    \    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n \
    \   csv+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n  echo \"{$(IFS=,;\
    \ echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local max_count\n  local\
    \ -a max_letters\n  local -a csv\n  local -a csv_letters\n  local -a csv_counts\n\
    \  local -a csv_pairs\n  local csv_pair\n  local csv_pair_letter\n  local csv_pair_count\n\
    \  local csv_pair_quoted_letter\n  local csv_pair_quoted_count\n  local csv_pair_quoted\n\
    \  local csv_quoted\n\n  # Build histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  # Find max count\n  max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \    fi\n  done\n\n  # Find letters with max count\n  max_letters=()\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=($letter)\n    fi\n  done\n\n  # Build CSV\n  csv=()\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv_letters+=($letter)\n    csv_counts+=(${histogram[$letter]})\n\
    \  done\n  for ((i=0; i<${#csv_letters[@]}; i++)); do\n    csv_pair_letter=${csv_letters[$i]}\n\
    \    csv_pair_count=${csv_counts[$i]}\n    csv_pair_quoted_letter=$(printf '\"\
    %s\"' \"$csv_pair_letter\")\n    csv_pair_quoted_count=$(printf '\"%s\"' \"$csv_pair_count\"\
    )\n    csv_pair_quoted=$(printf '%s: %s' \"$csv_pair_quoted_letter\" \"$csv_pair_quoted_count\"\
    )\n   \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu9rqalwk.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpu9rqalwk.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a result\n  for letter in $(echo \"$1\" | tr ' ' '\\n');\
    \ do\n    ((letters[$letter]++))\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"\
    ; do\n    if ((letters[$letter] > max)); then\n      max=${letters[$letter]}\n\
    \      result=(\"$letter\")\n    elif ((letters[$letter] == max)); then\n    \
    \  result+=(\"$letter\")\n    fi\n  done\n  echo -n \"{\"\n  for letter in \"\
    ${result[@]}\"; do\n    echo -n \"\\\"$letter\\\": \\\"$max\\\"\"\n    if ((letter\
    \ != ${result[-1]})); then\n      echo -n \", \"\n    fi\n  done\n  echo \"}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: implement histogram\n    echo \"{\"\n    echo \"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: implement this function\n  echo \"{\"\n  echo \"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local -a\
    \ max_letters\n  local max_count\n  local -a csv_letters\n  local csv_count\n\
    \  local csv_letters_count\n  local csv_letters_count_str\n  local csv_str\n\n\
    \  # Create a histogram of the letters\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n\n  # Find the letters with the maximum count\n  max_count=0\n\
    \  for letter in \"${!histogram[@]}\"; do\n    count=${histogram[$letter]}\n \
    \   if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif [ $count -eq $max_count ]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  # Create a CSV of the letters and their count\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    csv_letters+=(\"\\\"$letter\\\"\")\n    csv_count+=(\"\
    \\\"${histogram[$letter]}\\\"\")\n  done\n  csv_letters_count=($(paste -d, <(printf\
    \ \"%s\\n\" \"${csv_letters[@]}\") <(printf \"%s\\n\" \"${csv_count[@]}\")))\n\
    \  csv_letters_count_str=$(printf \"{%s}\" \"${csv_letters_count[@]}\")\n  csv_str=$(echo\
    \ \"$csv_letters_count_str\" | sed -E 's/\\s+//g')\n  echo \"$csv_str\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local -a csv_array\n\
    \  local csv_string\n\n  for letter in $1; do\n    letters[$letter]=$((letters[$letter]\
    \ + 1))\n  done\n\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"; do\n    csv_array+=(\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n\n  csv_string=$(IFS=,;\
    \ echo \"{${csv_array[*]}}\")\n  echo \"$csv_string\"\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  for letter in $(echo $1 | tr ' ' '\\n'); do\n\
    \    if [[ -z ${letters[$letter]} ]]; then\n      letters[$letter]=1\n    else\n\
    \      letters[$letter]=$((letters[$letter]+1))\n    fi\n  done\n  local max=0\n\
    \  local max_letters=()\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max ]]; then\n      max=${letters[$letter]}\n      max_letters=(\"$letter\"\
    )\n    elif [[ ${letters[$letter]} -eq $max ]]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  echo -n '{'\n  local first=true\n  for letter in \"${max_letters[@]}\"\
    ; do\n    if [[ $first == true ]]; then\n      first=false\n    else\n      echo\
    \ -n ', '\n    fi\n    echo -n '\"'$letter'\": \"'${letters[$letter]}'\"'\n  done\n\
    \  echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in $(echo $1 | tr ' ' '\\n'); do\n    ((letters[$letter]++))\n\
    \  done\n  local -A max\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt ${max[count]} ]]; then\n      max[count]=${letters[$letter]}\n      max[letters]=$letter\n\
    \    elif [[ ${letters[$letter]} -eq ${max[count]} ]]; then\n      max[letters]=\"\
    ${max[letters]} $letter\"\n    fi\n  done\n  echo '{'\n  for letter in ${max[letters]};\
    \ do\n    echo '\"'$letter'\": '\"\\\"${max[count]}\\\"\"','\n  done\n  echo '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local -a\
    \ max_letters\n  local max_count\n  local -a output\n  local -a csv\n  local -a\
    \ csv_line\n  local -a csv_lines\n  local csv_string\n\n  for letter in $1; do\n\
    \    ((histogram[$letter]++))\n  done\n\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if [[ -z $max_count ]]; then\n    \
    \  max_count=$count\n      max_letters=($letter)\n    elif [[ $count -eq $max_count\
    \ ]]; then\n      max_letters+=($letter)\n    elif [[ $count -gt $max_count ]];\
    \ then\n      max_count=$count\n      max_letters=($letter)\n    fi\n  done\n\n\
    \  for letter in \"${max_letters[@]}\"; do\n    output+=($letter)\n    output+=(${histogram[$letter]})\n\
    \  done\n\n  csv_lines=($(csv_from_array output))\n  csv_string=$(join_by \",\"\
    \ \"${csv_lines[@]}\")\n  echo \"{$csv_string}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp62jzbism.sh: line 53: csv_from_array: command not found

    /tmp/tmp62jzbism.sh: line 54: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for (( i=0; i<${#1}; i++ )); do\n    local letter=\"${1:$i:1}\"\
    \n    if [[ -z \"${letters[$letter]}\" ]]; then\n      letters[$letter]=1\n  \
    \  else\n      letters[$letter]=$(( ${letters[$letter]} + 1 ))\n    fi\n  done\n\
    \  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max ]]; then\n      max=${letters[$letter]}\n    fi\n  done\n  local -a\
    \ result\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -eq $max ]]; then\n      result+=(\"$letter\")\n    fi\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    local max_count=0\n    local max_letters=()\n\
    \    for letter in $1; do\n        if [[ -z \"${letters[$letter]}\" ]]; then\n\
    \            letters[$letter]=1\n        else\n            letters[$letter]=$((letters[$letter]\
    \ + 1))\n        fi\n        if [[ \"${letters[$letter]}\" -gt \"$max_count\"\
    \ ]]; then\n            max_count=\"${letters[$letter]}\"\n            max_letters=(\"\
    $letter\")\n        elif [[ \"${letters[$letter]}\" -eq \"$max_count\" ]]; then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n    local -A max_letters_count\n\
    \    for letter in \"${max_letters[@]}\"; do\n        max_letters_count[$letter]=\"\
    $max_count\"\n    done\n    echo \"$(dict_to_csv \"$(declare -p max_letters_count)\"\
    )\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4_1an0jc.sh: line 40: dict_to_csv: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -a letters\n  local -a counts\n  local -a max_counts\n  local -a max_letters\n\
    \  local -i max_count=0\n  local -i count\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i n\n  local -i n_letters\n  local -i n_max_letters\n  local\
    \ -i n_max_counts\n  local -i n_counts\n  local -i n_max_counts\n  local -i n_max_letters\n\
    \  local -i n_letters\n  local -i n_max_letters\n  local -i n_max_counts\n  local\
    \ -i n_counts\n  local -i n_max_counts\n  local -i n_max_letters\n  local -i n_letters\n\
    \  local -i n_max_letters\n  local -i n_max_counts\n  local -i n_counts\n  local\
    \ -i n_max_counts\n  local -i n_max_letters\n  local -i n_letters\n  local -i\
    \ n_max_letters\n  local -i n_max_counts\n  local -i n_counts\n  local -i n_max_counts\n\
    \  local -i n_max_letters\n  local -i n_letters\n  local -i n_max_letters\n  local\
    \ -i n_max_counts\n  local -i n_counts\n  local -i n_max_counts\n  local -i n_max_letters\n\
    \  local -i n_letters\n  local -i n_max_letters\n  local -i n_max_counts\n  local\
    \ -i n_counts\n  local -i n_max_counts\n  local -i n_max_letters\n  local -i n_letters\n\
    \  local -i n_max_letters\n  local -i n_max_counts\n  local -i n_counts\n  local\
    \ -i n_max_counts\n  local -i n_max_letters\n  local -i n_letters\n  local -i\
    \ n_max_letters\n  local -i n_max_counts\n\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result=\"$result,\\\"\
    $letter\\\": \\\"${histogram[$letter]}\\\"\"\n    fi\n  done\n  echo \"{${result:1}}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local letter\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n    local -A max\n    for letter in \"${!letters[@]}\"; do\n      \
    \  if [[ ${letters[$letter]} -gt ${max[count]} ]]; then\n            max[count]=${letters[$letter]}\n\
    \            max[letters]=$letter\n        elif [[ ${letters[$letter]} -eq ${max[count]}\
    \ ]]; then\n            max[letters]=\"${max[letters]} $letter\"\n        fi\n\
    \    done\n    local -a result\n    for letter in ${max[letters]}; do\n      \
    \  result+=(\"\\\"$letter\\\": \\\"${max[count]}\\\"\")\n    done\n    echo \"\
    {$(join_by , \"${result[@]}\")}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprxos9r5w.sh: line 37: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local count\n  local max_count\n\
    \  local max_letters\n  local csv\n  local -a csv_array\n  local csv_key\n  local\
    \ csv_value\n  local -a csv_key_array\n  local -a csv_value_array\n  local i\n\
    \  local j\n\n  # Build histogram\n  for letter in $(echo \"$1\" | tr ' ' '\\\
    n'); do\n    histogram[$letter]=$((histogram[$letter] + 1))\n  done\n\n  # Find\
    \ max count\n  max_count=0\n  for letter in \"${!histogram[@]}\"; do\n    count=${histogram[$letter]}\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n  done\n\
    \n  # Find letters with max count\n  max_letters=()\n  for letter in \"${!histogram[@]}\"\
    ; do\n    count=${histogram[$letter]}\n    if [[ $count -eq $max_count ]]; then\n\
    \      max_letters+=(\"$letter\")\n    fi\n  done\n\n  # Build CSV\n  csv=()\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"\
    ${histogram[$letter]}\\\"\")\n  done\n  csv=$(IFS=,; echo \"${csv[*]}\")\n\n \
    \ # Build CSV array\n  csv_array=($(echo \"$csv\" | tr ',' '\\n'))\n\n  # Build\
    \ CSV key array\n  csv_key_array=()\n  for i in \"${!csv_array[@]}\"; do\n   \
    \ csv_key=$(echo \"${csv_array[$i]}\" | cut -d ':' -f 1)\n    csv_key_array+=(\"\
    $csv_key\")\n  done\n\n  # Build CSV value array\n  csv_value_array=()\n  for\
    \ i in \"${!csv_array[@]}\"; do\n    csv_value=$(echo \"${csv_array[$i]}\" | cut\
    \ -d ':' -\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprbl59dc4.sh: line 77: unexpected EOF while looking for matching
    `)''

    /tmp/tmprbl59dc4.sh: line 97: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ letter\n    local count\n    local csv\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n    for letter in \"${!letters[@]}\"; do\n        count=${letters[$letter]}\n\
    \        if ((count > max_count)); then\n            max_count=$count\n      \
    \      max_letters=(\"$letter\")\n        elif ((count == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n    csv=\"{\"\n\
    \    for letter in \"${max_letters[@]}\"; do\n        csv+=\"\\\"$letter\\\":\
    \ \\\"$max_count\\\"\"\n        if ((${#max_letters[@]} > 1)); then\n        \
    \    csv+=\", \"\n        fi\n    done\n    csv+=\"}\"\n    echo \"$csv\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $(echo $1 | tr \" \" \"\\n\"); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      if [[ -z $result ]];\
    \ then\n        result=\"{\\\"$letter\\\": \\\"${histogram[$letter]}\\\"}\"\n\
    \      else\n        result=\"$result, {\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"}\"\n      fi\n    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n\
    \  local -a max_letters\n  local max_count=0\n  for letter in \"${!histogram[@]}\"\
    ; do\n    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n\
    \      max_letters=(\"$letter\")\n      max_count=$count\n    elif ((count ==\
    \ max_count)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local\
    \ -a csv\n  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"$letter: $max_count\"\
    )\n  done\n  echo \"${csv[@]}\" | tr ' ' ','\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A hist\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    ((hist[$letter]++))\n\
    \  done\n  local max=0\n  for letter in \"${!hist[@]}\"; do\n    if ((hist[$letter]\
    \ > max)); then\n      max=${hist[$letter]}\n    fi\n  done\n  local -a result\n\
    \  for letter in \"${!hist[@]}\"; do\n    if ((hist[$letter] == max)); then\n\
    \      result+=(\"$letter\")\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        ((histogram[$letter]++))\n\
    \    done\n    local -a result\n    local max_count=0\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if ((histogram[$letter] > max_count)); then\n            max_count=${histogram[$letter]}\n\
    \            result=()\n        fi\n        if ((histogram[$letter] == max_count));\
    \ then\n            result+=(\"$letter\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -r letters=\"$1\"\n  local -r letter_counts=$(echo \"$letters\" | tr ' ' '\\\
    n' | sort | uniq -c)\n  local -r max_count=$(echo \"$letter_counts\" | awk '{print\
    \ $1}' | sort -n | tail -n 1)\n  local -r most_common_letters=$(echo \"$letter_counts\"\
    \ | awk -v max_count=\"$max_count\" '$1 == max_count {print $2}')\n  local -r\
    \ csv=$(echo \"$most_common_letters\" | tr '\\n' ',' | sed 's/,$//')\n  echo \"\
    {\\\"$csv\\\": \\\"$max_count\\\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"$1\"\n  local letter\n  local count\n  local max_count=0\n  local\
    \ max_letters=\"\"\n  local csv=\"\"\n  local first=true\n\n  for letter in $letters;\
    \ do\n    count=$(echo \"$letters\" | grep -o \"$letter\" | wc -l)\n    if [ \"\
    $count\" -gt \"$max_count\" ]; then\n      max_count=\"$count\"\n      max_letters=\"\
    $letter\"\n    elif [ \"$count\" -eq \"$max_count\" ]; then\n      max_letters=\"\
    $max_letters $letter\"\n    fi\n  done\n\n  for letter in $max_letters; do\n \
    \   if $first; then\n      first=false\n    else\n      csv=\"$csv,\"\n    fi\n\
    \    csv=\"$csv{\\\"$letter\\\": \\\"$max_count\\\"}\"\n  done\n\n  echo \"$csv\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: implement this function\n    # Hint: use the following command to get\
    \ a list of unique letters\n    # echo $1 | tr ' ' '\\n' | sort -u\n    # Hint:\
    \ use the following command to get a list of letter counts\n    # echo $1 | tr\
    \ ' ' '\\n' | sort | uniq -c\n    # Hint: use the following command to get a list\
    \ of letter counts in CSV format\n    # echo $1 | tr ' ' '\\n' | sort | uniq -c\
    \ | tr ' ' ','\n    # Hint: use the following command to get the maximum letter\
    \ count\n    # echo $1 | tr ' ' '\\n' | sort | uniq -c | tr ' ' ',' | cut -d ','\
    \ -f 1 | sort -n | tail -n 1\n    # Hint: use the following command to get the\
    \ letters with the maximum count\n    # echo $1 | tr ' ' '\\n' | sort | uniq -c\
    \ | tr ' ' ',' | cut -d ',' -f 1,2 | sort -t ',' -n -k 1 | tail -n 1\n    # Hint:\
    \ use the following command to get the letters with the maximum count in CSV format\n\
    \    # echo $1 | tr ' ' '\\n' | sort | uniq -c | tr ' ' ',' | cut -d ',' -f 1,2\
    \ | sort -t ',' -n -k 1 | tail -n 1 | cut -d ',' -f 2 | tr '\\n' ',' | sed 's/,$//'\n\
    \    # Hint: use the following command to get the letters with the maximum count\
    \ in JSON format\n    # echo $1 | tr ' ' '\\n' | sort | uniq -c | tr ' ' ',' |\
    \ cut -d ',' -f 1,2 | sort -t ',' -n -k 1 | tail -n 1 | cut -d ',' -f 2 | tr '\\\
    n' ',' | sed 's/,$//' | sed 's/^/{/' | sed 's/,/, /g' | sed 's/$/}/'\n    # Hint:\
    \ use the following command to get the letters with the maximum count in JSON\
    \ format with\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_z9gj9k4.sh: line 35: syntax error near unexpected token `}''

    /tmp/tmp_z9gj9k4.sh: line 35: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local letter\n  local max_count\n  local\
    \ -a max_letters\n  local -a csv_letters\n  local -a csv_counts\n  local csv_letter\n\
    \  local csv_count\n  local csv_letters_counts\n  local csv_letters_count\n  local\
    \ csv_letters_counts_count\n  local csv_letters_counts_count_count\n  local csv_letters_counts_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count\n  local csv_letters_counts_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count\n  local csv_letters_counts_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n\
    \  local csv_letters_counts_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr)\n  local max_count=$(echo\
    \ \"$letters\" | head -n 1 | awk '{print $1}')\n  local max_letters=$(echo \"\
    $letters\" | grep \"^ *$max_count\" | awk '{print $2}')\n  local result=\"\"\n\
    \  for letter in $max_letters; do\n    if [ -z \"$result\" ]; then\n      result=\"\
    {\\\"$letter\\\": \\\"$max_count\\\"}\"\n    else\n      result=\"$result, {\\\
    \"$letter\\\": \\\"$max_count\\\"}\"\n    fi\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local letter\n  local max_count=0\n  local max_letters=()\n  for\
    \ letter in $1; do\n    ((letters[$letter]++))\n    if [[ ${letters[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letters[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local result=()\n  for letter in \"${max_letters[@]}\"\
    ; do\n    result+=(\"$letter:${letters[$letter]}\")\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a result\n  local letter\n  local count\n  local max_count=0\n\
    \  local max_letters=()\n\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\
    \\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n\n  echo \"{\"$(IFS=,; echo \"\
    ${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ -a result\n    local letter\n    local count\n    for letter in $1; do\n   \
    \     ((letters[$letter]++))\n    done\n    for letter in \"${!letters[@]}\";\
    \ do\n        count=${letters[$letter]}\n        if [[ $count -gt $max_count ]];\
    \ then\n            max_count=$count\n            max_letters=(\"$letter\")\n\
    \        elif [[ $count -eq $max_count ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    for letter in \"${max_letters[@]}\"; do\n\
    \        result+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\"\")\n    done\n\
    \    echo \"{$(IFS=,; echo \"${result[*]}\")}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in ${1// / }; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result+=\"{\\\"$letter\\\
    \": \\\"${histogram[$letter]}\\\"},\"\n    fi\n  done\n  echo \"{${result%,}}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: implement this function\n  echo \"{}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010914
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  local -a letters\n  local -a counts\n  local letter\n  local\
    \ count\n  local i\n  local j\n  local max_count\n  local max_count_letters\n\n\
    \  # Build the histogram\n  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n\
    \    histogram[$letter]=$((histogram[$letter] + 1))\n  done\n\n  # Get the letters\
    \ and counts\n  for letter in \"${!histogram[@]}\"; do\n    letters+=(\"$letter\"\
    )\n    counts+=(\"${histogram[$letter]}\")\n  done\n\n  # Find the maximum count\n\
    \  max_count=0\n  for ((i = 0; i < ${#counts[@]}; i++)); do\n    if [[ ${counts[$i]}\
    \ -gt $max_count ]]; then\n      max_count=${counts[$i]}\n    fi\n  done\n\n \
    \ # Find the letters with the maximum count\n  max_count_letters=()\n  for ((i\
    \ = 0; i < ${#counts[@]}; i++)); do\n    if [[ ${counts[$i]} -eq $max_count ]];\
    \ then\n      max_count_letters+=(\"${letters[$i]}\")\n    fi\n  done\n\n  # Build\
    \ the CSV\n  csv=()\n  for ((i = 0; i < ${#max_count_letters[@]}; i++)); do\n\
    \    csv+=(\"\\\"${max_count_letters[$i]}\\\": \\\"$max_count\\\"\")\n  done\n\
    \n  echo \"{\"$(IFS=,; echo \"${csv[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in ${1// / }; do\n    if [[ -z ${letters[$letter]}\
    \ ]]; then\n      letters[$letter]=1\n    else\n      letters[$letter]=$((letters[$letter]+1))\n\
    \    fi\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if\
    \ [[ ${letters[$letter]} -gt $max ]]; then\n      max=${letters[$letter]}\n  \
    \  fi\n  done\n  local -a result\n  for letter in \"${!letters[@]}\"; do\n   \
    \ if [[ ${letters[$letter]} -eq $max ]]; then\n      result+=(\"\\\"$letter\\\"\
    : \\\"${letters[$letter]}\\\"\")\n    fi\n  done\n  echo \"{$(IFS=,; echo \"${result[*]}\"\
    )}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local result=()\n\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\
    \\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n\n  echo \"{\"$(join_by \", \"\
    \ \"${result[@]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzv41nzo9.sh: line 44: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: Implement this function.\n  # Hint: Use the following command to sort\
    \ a string:\n  # $ echo \"a b c\" | tr \" \" \"\\n\" | sort\n  #\n  # Hint: Use\
    \ the following command to count the number of occurrences of a\n  # character\
    \ in a string:\n  # $ echo \"a b c\" | tr -cd \"a\" | wc -c\n  #\n  # Hint: Use\
    \ the following command to convert a string to an array:\n  # $ echo \"a b c\"\
    \ | tr \" \" \"\\n\"\n  #\n  # Hint: Use the following command to convert an array\
    \ to a string:\n  # $ echo -e \"${array[@]}\" | tr \"\\n\" \" \"\n  #\n  # Hint:\
    \ Use the following command to convert a string to an array:\n  # $ echo \"a b\
    \ c\" | tr \" \" \"\\n\"\n  #\n  # Hint: Use the following command to convert\
    \ an array to a string:\n  # $ echo -e \"${array[@]}\" | tr \"\\n\" \" \"\n  #\n\
    \  # Hint: Use the following command to convert a string to an array:\n  # $ echo\
    \ \"a b c\" | tr \" \" \"\\n\"\n  #\n  # Hint: Use the following command to convert\
    \ an array to a string:\n  # $ echo -e \"${array[@]}\" | tr \"\\n\" \" \"\n  #\n\
    \  # Hint: Use the following command to convert a string to an array:\n  # $ echo\
    \ \"a b c\" | tr \" \" \"\\n\"\n  #\n  # Hint: Use the following command to convert\
    \ an array to a string:\n  # $ echo -e \"${array[@]}\" | tr \"\\n\" \" \"\n  #\n\
    \  # Hint: Use the following command to convert a string to an array:\n  # $ echo\
    \ \"a b c\" | tr \" \" \"\\n\"\n  #\n  # Hint: Use the following command to convert\
    \ an array to a string:\n  # $ echo -e \"${array[@]}\" | tr \"\\n\" \" \"\n  #\n\
    \  # Hint: Use the following command to convert a string\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjtgd4dd9.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpjtgd4dd9.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max=0\n  for letter in \"${!histogram[@]}\"; do\n   \
    \ if [[ ${histogram[$letter]} -gt $max ]]; then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!histogram[@]}\"; do\n\
    \    if [[ ${histogram[$letter]} -eq $max ]]; then\n      result+=(\"\\\"$letter\\\
    \": \\\"${histogram[$letter]}\\\"\")\n    fi\n  done\n  echo \"{\"$(IFS=,; echo\
    \ \"${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for count in \"${histogram[@]}\"; do\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n  done\n\
    \  local result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]}\
    \ -eq $max_count ]]; then\n      if [[ -n $result ]]; then\n        result=\"\
    $result, \"\n      fi\n      result=\"$result{\\\"$letter\\\": \\\"$max_count\\\
    \"}\"\n    fi\n  done\n  echo \"{\"$result\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    for letter in $1; do\n        ((histogram[$letter]++))\n\
    \    done\n    local -a max_letters\n    local max_count=0\n    for letter in\
    \ \"${!histogram[@]}\"; do\n        if ((histogram[$letter] > max_count)); then\n\
    \            max_letters=(\"$letter\")\n            max_count=${histogram[$letter]}\n\
    \        elif ((histogram[$letter] == max_count)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a csv\n    for letter in \"${max_letters[@]}\"\
    ; do\n        csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n    done\n\
    \    echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A histogram\n\
    \  for letter in $1; do\n    if [ -z \"${histogram[$letter]}\" ]; then\n     \
    \ histogram[$letter]=1\n    else\n      histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    fi\n  done\n  local -a max_letters\n  local max_count=0\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    if [ \"${histogram[$letter]}\" -gt \"$max_count\"\
    \ ]; then\n      max_letters=(\"$letter\")\n      max_count=\"${histogram[$letter]}\"\
    \n    elif [ \"${histogram[$letter]}\" -eq \"$max_count\" ]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  echo -n \"{\"\n  local first=true\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    if ! $first; then\n      echo -n \", \"\n\
    \    fi\n    echo -n \"\\\"$letter\\\": \\\"$max_count\\\"\"\n    first=false\n\
    \  done\n  echo \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A letters\n\
    \  for letter in $(echo \"$1\" | tr ' ' '\\n'); do\n    if [ -z \"${letters[$letter]}\"\
    \ ]; then\n      letters[$letter]=1\n    else\n      letters[$letter]=$((letters[$letter]\
    \ + 1))\n    fi\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n\
    \    if [ \"${letters[$letter]}\" -gt \"$max\" ]; then\n      max=\"${letters[$letter]}\"\
    \n    fi\n  done\n  local -a result\n  for letter in \"${!letters[@]}\"; do\n\
    \    if [ \"${letters[$letter]}\" -eq \"$max\" ]; then\n      result+=(\"\\\"\
    $letter\\\": \\\"${letters[$letter]}\\\"\")\n    fi\n  done\n  echo \"{\"$(IFS=,;\
    \ echo \"${result[*]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A histogram\n    local max_count=0\n    local max_letters=()\n    for\
    \ letter in ${1// / }; do\n        histogram[$letter]=$((histogram[$letter] +\
    \ 1))\n        if [[ ${histogram[$letter]} -gt $max_count ]]; then\n         \
    \   max_count=${histogram[$letter]}\n            max_letters=(\"$letter\")\n \
    \       elif [[ ${histogram[$letter]} -eq $max_count ]]; then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a csv_array\n    for letter in \"\
    ${max_letters[@]}\"; do\n        csv_array+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\")\n    done\n    echo \"{\"$(IFS=,; echo \"${csv_array[*]}\")\"}\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A counts\n    local -a letters\n    local letter\n    local count\n \
    \   local -a max_letters\n    local max_count\n    local -a csv_letters\n    local\
    \ -a csv_counts\n    local csv_letter\n    local csv_count\n    local csv_letters_counts\n\
    \    local csv_letters_counts_str\n    local csv_letters_counts_str_escaped\n\
    \    local csv_letters_counts_str_escaped_quoted\n    local csv_letters_counts_str_escaped_quoted_json\n\
    \n    # Count the letters\n    for letter in $(echo \"$1\" | tr ' ' '\\n' | sort\
    \ | uniq); do\n        counts[$letter]=$(echo \"$1\" | tr ' ' '\\n' | grep -c\
    \ \"$letter\")\n    done\n\n    # Get the max count\n    max_count=0\n    for\
    \ letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n        if\
    \ [ $count -gt $max_count ]; then\n            max_count=$count\n        fi\n\
    \    done\n\n    # Get the letters with the max count\n    max_letters=()\n  \
    \  for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n   \
    \     if [ $count -eq $max_count ]; then\n            max_letters+=(\"$letter\"\
    )\n        fi\n    done\n\n    # Build the CSV\n    csv_letters=()\n    csv_counts=()\n\
    \    for letter in \"${max_letters[@]}\"; do\n        csv_letters+=(\"$letter\"\
    )\n        csv_counts+=(\"${counts[$letter]}\")\n    done\n\n    # Build the CSV\
    \ string\n    csv_letters_counts=()\n    for ((i=0; i<${#csv_letters[@]}; i++));\
    \ do\n        csv_letter=\"${csv_letters[$i]}\"\n        csv_count=\"${csv_counts[$i]}\"\
    \n        csv_letters_counts+=(\"$csv_letter:$csv_count\")\n    done\n\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"$1\"\n  local -A hist\n  local -a max\n  local max_count=0\n  local -a\
    \ letters\n  local letter\n  local count\n  local -a csv\n  local csv_str\n\n\
    \  # Build the histogram\n  for letter in $str; do\n    ((hist[$letter]++))\n\
    \  done\n\n  # Find the max count\n  for letter in \"${!hist[@]}\"; do\n    count=${hist[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max=(\"$letter\"\
    )\n    elif ((count == max_count)); then\n      max+=(\"$letter\")\n    fi\n \
    \ done\n\n  # Build the CSV\n  for letter in \"${max[@]}\"; do\n    csv+=(\"$letter:${hist[$letter]}\"\
    )\n  done\n\n  # Join the CSV\n  csv_str=$(IFS=,; echo \"${csv[*]}\")\n\n  # Return\
    \ the CSV\n  echo \"{$csv_str}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010915
