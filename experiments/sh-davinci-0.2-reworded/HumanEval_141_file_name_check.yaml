name: HumanEval_141_file_name_check
language: sh
prompt: "#!/bin/bash\n# Create a function which takes a string representing a file's\
  \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\"\
  )\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a\
  \ string\nfile_name_check() {\n"
tests: "}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
  ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
  \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
  \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
  ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
  ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate\
  \ \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
  ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
  \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
  all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n \
  \   [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
  ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n\
  \    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
  ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\"\
  ) = \"No\" ]]\n}\n\nrun_test"
completions: ["    # Write your code here\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\\
    .(txt|exe|dll)$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n\
    \        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}.[txt|exe|dll]$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  local file_name=$1\n    local file_name_len=${#file_name}\n    local file_name_no_ext=${file_name%.*}\n\
    \    local file_name_ext=${file_name##*.}\n    local file_name_no_ext_len=${#file_name_no_ext}\n\
    \    local file_name_ext_len=${#file_name_ext}\n    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n\
    \    local file_name_no_ext_first_char_ascii=$(printf \"%d\" \"'$file_name_no_ext_first_char\"\
    )\n    local file_name_no_ext_first_char_ascii_lower=$(printf \"%d\" \"'a\")\n\
    \    local file_name_no_ext_first_char_ascii_upper=$(printf \"%d\" \"'A\")\n \
    \   local file_name_no_ext_first_char_ascii_lower_end=$(printf \"%d\" \"'z\")\n\
    \    local file_name_no_ext_first_char_ascii_upper_end=$(printf \"%d\" \"'Z\"\
    )\n    local file_name_no_ext_first_char_is_letter=0\n    local file_name_ext_is_valid=0\n\
    \    local file_name_no_ext_has_digits=0\n    local file_name_no_ext_has_more_than_three_digits=0\n\
    \    local file_name_has_exactly_one_dot=0\n    local file_name_no_ext_is_empty=0\n\
    \    local file_name_is_valid=0\n\n    if [[ $file_name_no_ext_first_char_ascii\
    \ -ge $file_name_no_ext_first_char_ascii_lower && $file_name_no_ext_first_char_ascii\
    \ -le $file_name_no_ext_first_char_ascii_lower_end ]] || [[ $file_name_no_ext_first_char_ascii\
    \ -ge $file_name_no_", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ local file_name=$1\n    local file_name_len=${#file_name}\n    local dot_index=$(expr\
    \ index \"$file_name\" \".\")\n    local dot_index_minus_one=$((dot_index - 1))\n\
    \    local dot_index_plus_one=$((dot_index + 1))\n    local file_name_before_dot=${file_name:0:dot_index_minus_one}\n\
    \    local file_name_after_dot=${file_name:dot_index_plus_one:file_name_len}\n\
    \    local file_name_before_dot_len=${#file_name_before_dot}\n    local file_name_after_dot_len=${#file_name_after_dot}\n\
    \    local file_name_before_dot_first_char=${file_name_before_dot:0:1}\n    local\
    \ file_name_after_dot_first_char=${file_name_after_dot:0:1}\n    local file_name_after_dot_second_char=${file_name_after_dot:1:1}\n\
    \    local file_name_after_dot_third_char=${file_name_after_dot:2:1}\n    local\
    \ file_name_after_dot_fourth_char=${file_name_after_dot:3:1}\n    local file_name_after_dot_fifth_char=${file_name_after_dot:4:1}\n\
    \    local file_name_after_dot_sixth_char=${file_name_after_dot:5:1}\n    local\
    \ file_name_after_dot_seventh_char=${file_name_after_dot:6:1}\n    local file_name_after_dot_eighth_char=${file_name_after_dot:7:1}\n\
    \    local file_name_after_dot_ninth_char=${file_name_after_dot:8:1}\n    local\
    \ file_name_after_dot_tenth_char=${file_name_after_dot:9:1}\n    local file_name_after_dot_eleventh_char=${file_name_",
  "    # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[ ${BASH_REMATCH[1]}\
    \ == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n            echo\
    \ \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n     \
    \   echo \"No\"\n    fi", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # TODO: Write\
    \ your code here\n    # Hint: You can use the following command to check if a\
    \ string matches a regular expression:\n    # [[ $string =~ $regex ]]\n    # If\
    \ the string matches the regex, the return value is 0\n    # Otherwise, the return\
    \ value is 1\n    # For example:\n    # >>> [[ \"abc\" =~ \"a\" ]]\n    # 0\n\
    \    # >>> [[ \"abc\" =~ \"d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~ \"^a\" ]]\n\
    \    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~\
    \ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[\
    \ \"abc\" =~ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n\
    \    # >>> [[ \"abc\" =~ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n\
    \    # 1\n    # >>> [[ \"abc\" =~ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~\
    \ \"^d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~ \"^a\" ]]\n    # 0\n    # >>> [[\
    \ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~ \"^a\" ]]\n    # 0\n\
    \    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~ \"^a\" ]]\n\
    \    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[ \"abc\" =~\
    \ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n    # 1\n    # >>> [[\
    \ \"abc\" =~ \"^a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"^d\" ]]\n   ", "  \
    \  # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    # TODO: Write your code\
    \ here\n    # Check if the file's name contains exactly one dot '.'\n    if [[\
    \ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]; then\n        # Check if the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n        if [[\
    \ $1 =~ \\.txt$ || $1 =~ \\.exe$ || $1 =~ \\.dll$ ]]; then\n            echo \"\
    Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n        echo\
    \ \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]];\
    \ then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    # Remove pass and write your code\n    pass", "    # Write your code here\n\
    \    # You can use the following command to check if a string is a valid file\
    \ name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]] && echo \"Yes\"\
    \ || echo \"No\"\n    #\n    # If you want to check if a string contains a substring,\
    \ you can use the following command:\n    # [[ $1 =~ .*substring.* ]] && echo\
    \ \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string contains\
    \ a digit, you can use the following command:\n    # [[ $1 =~ [0-9] ]] && echo\
    \ \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string contains\
    \ a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # If you want to check if a string\
    \ contains a character, you can use the following command:\n    # [[ $1 =~ .*character.*",
  "    local file_name=$1\n    local file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_regex ]]; then\n       \
    \ echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # Write your code\
    \ here\n    # You can use the following command to check if a string is empty:\n\
    \    # if [ -z \"$1\" ]; then\n    #     echo \"Yes\"\n    # fi\n    # You can\
    \ use the following command to check if a string contains a substring:\n    #\
    \ if [[ \"$1\" == *\"$2\"* ]]; then\n    #     echo \"Yes\"\n    # fi\n    # You\
    \ can use the following command to check if a string starts with a substring:\n\
    \    # if [[ \"$1\" == \"$2\"* ]]; then\n    #     echo \"Yes\"\n    # fi\n  \
    \  # You can use the following command to check if a string ends with a substring:\n\
    \    # if [[ \"$1\" == *\"$2\" ]]; then\n    #     echo \"Yes\"\n    # fi\n  \
    \  # You can use the following command to check if a string contains only digits:\n\
    \    # if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    #     echo \"Yes\"\n    # fi\n \
    \   # You can use the following command to check if a string contains only letters:\n\
    \    # if [[ \"$1\" =~ ^[a-zA-Z]+$ ]]; then\n    #     echo \"Yes\"\n    # fi\n\
    \    # You can use the following command to check if a string contains only letters\
    \ and digits:\n    # if [[ \"$1\" =~ ^[a-zA-Z0-9]+$ ]]; then\n    #     echo \"\
    Yes\"\n    # fi\n    # You can use the following command to check if a string\
    \ contains only letters and digits and underscores:\n    # if [[ \"$1\" =~ ^[a-zA-Z0-9_]+$\
    \ ]]; then\n    #     echo \"Yes\"\n    # fi\n    # You can use the following\
    \ command to check if a string contains only letters and digits and underscores\
    \ and dashes:\n    # if [[ \"$1\" =~ ^[a-zA-Z0-9_-]+$ ]]; then\n    #     echo\
    \ \"Yes\"\n    # fi\n    # You can use the following command to check if a string\
    \ contains only letters and digits and underscores and dashes and dots:\n    #\
    \ if [[", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n\
    \        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n   \
    \         echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n  \
    \  else\n        echo \"No\"\n    fi", "    # Check if the file's name contains\
    \ more than three digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n        echo \"No\"\
    \n        return\n    fi\n\n    # Check if the file's name contains exactly one\
    \ dot\n    if [[ $1 =~ \\. ]]; then\n        if [[ $1 =~ \\.{2} ]]; then\n   \
    \         echo \"No\"\n            return\n        fi\n    else\n        echo\
    \ \"No\"\n        return\n    fi\n\n    # Check if the substring before the dot\
    \ is empty, or it doesn't start with a letter\n    if [[ $1 =~ ^[^a-zA-Z] ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n    if [[ $1 =~ \\.txt$\
    \ ]]; then\n        echo \"Yes\"\n        return\n    elif [[ $1 =~ \\.exe$ ]];\
    \ then\n        echo \"Yes\"\n        return\n    elif [[ $1 =~ \\.dll$ ]]; then\n\
    \        echo \"Yes\"\n        return\n    else\n        echo \"No\"\n       \
    \ return\n    fi", "    # Check if the file's name contains more than three digits\n\
    \    if [[ \"$1\" =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file's name contains exactly one dot\n    if [[\
    \ \"$1\" =~ \\. ]]; then\n        if [[ \"$1\" =~ \\.{2} ]]; then\n          \
    \  echo \"No\"\n            return\n        fi\n    else\n        echo \"No\"\n\
    \        return\n    fi\n\n    # Check if the substring before the dot is empty,\
    \ and it starts with a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    if [[ \"$1\" =~ ^[a-zA-Z] ]]; then\n        if [[ \"$1\" =~ ^[a-zA-Z]*\\\
    . ]]; then\n            # Check if the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n            if [[ \"$1\" =~ \\.txt$ ]]; then\n      \
    \          echo \"Yes\"\n                return\n            elif [[ \"$1\" =~\
    \ \\.exe$ ]]; then\n                echo \"Yes\"\n                return\n   \
    \         elif [[ \"$1\" =~ \\.dll$ ]]; then\n                echo \"Yes\"\n \
    \               return\n            else\n                echo \"No\"\n      \
    \          return\n            fi\n        else\n            echo \"No\"\n   \
    \         return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi", "    # Write your code here\n    # You can use the following command\
    \ to check if a string is a valid file name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z]{3}$ ]]\n    # It returns true if the string is a valid file name, and\
    \ false otherwise.\n    #\n    # For example:\n    # >>> [[ \"example.txt\" =~\
    \ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]\n    # true\n    # >>> [[ \"1example.dll\"\
    \ =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]\n    # false\n    #\n    # You can\
    \ use the following command to check if a string contains exactly one dot:\n \
    \   # [[ $1 =~ ^[^.]*\\.[^.]*$ ]]\n    # It returns true if the string contains\
    \ exactly one dot, and false otherwise.\n    #\n    # For example:\n    # >>>\
    \ [[ \"example.txt\" =~ ^[^.]*\\.[^.]*$ ]]\n    # true\n    # >>> [[ \"example..txt\"\
    \ =~ ^[^.]*\\.[^.]*$ ]]\n    # false\n    #\n    # You can use the following command\
    \ to check if a string contains more than three digits:\n    # [[ $1 =~ ^[^0-9]*[0-9]{4,}[^0-9]*$\
    \ ]]\n    # It returns true if the string contains more than three digits, and\
    \ false otherwise.\n    #\n    # For example:\n    # >>> [[ \"example12345.txt\"\
    \ =~ ^[^0-9]*[0-9]{4,}[^0-9]*$ ]]\n    # true\n    # >>> [[ \"example123.txt\"\
    \ =~ ^[^0-9]*[0-9]{4,}[^0-9]*$ ]]\n    # false\n    #\n    # You can", "    if\
    \ [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[ $1\
    \ =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]]; then\n        \
    \    echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write your code\
    \ here\n    #\n    # Hint:\n    # - You can use the following command to check\
    \ if a string contains a substring:\n    #   if [[ \"$string\" == *\"substring\"\
    * ]]; then\n    #       ...\n    #   fi\n    # - You can use the following command\
    \ to check if a string starts with a substring:\n    #   if [[ \"$string\" ==\
    \ substring* ]]; then\n    #       ...\n    #   fi\n    # - You can use the following\
    \ command to check if a string ends with a substring:\n    #   if [[ \"$string\"\
    \ == *substring ]]; then\n    #       ...\n    #   fi\n    # - You can use the\
    \ following command to check if a string contains only digits:\n    #   if [[\
    \ \"$string\" =~ ^[0-9]+$ ]]; then\n    #       ...\n    #   fi\n    # - You can\
    \ use the following command to check if a string contains only letters:\n    #\
    \   if [[ \"$string\" =~ ^[a-zA-Z]+$ ]]; then\n    #       ...\n    #   fi\n \
    \   # - You can use the following command to check if a string contains only letters\
    \ and digits:\n    #   if [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]; then\n    #   \
    \    ...\n    #   fi\n    # - You can use the following command to check if a\
    \ string contains only letters and digits and underscores:\n    #   if [[ \"$string\"\
    \ =~ ^[a-zA-Z0-9_]+$ ]]; then\n    #       ...\n    #   fi\n    # - You can use\
    \ the following command to check if a string contains only letters and digits\
    \ and underscores and dashes:\n    #   if [[ \"$string\" =~ ^[a-zA-Z0-9_-]+$ ]];\
    \ then\n    #       ...\n    #   fi\n    # - You can use the following command\
    \ to check if a string contains only letters and digits and underscores and dashes\
    \ and dots:\n    #   if [[ \"$string\" =~ ^[a-zA-Z0-9_.-]+$ ]]; then\n    #  \
    \     ...\n    #   fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi", "    # Write your code\
    \ here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   \
    \ # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n  \
    \  # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n", "    # TODO: Write your code here\n    # Hint: You can use the\
    \ following command to check if a string contains a substring:\n    # [[ \"$string\"\
    \ == *\"$substring\"* ]]\n    # Hint: You can use the following command to check\
    \ if a string starts with a substring:\n    # [[ \"$string\" == \"$substring\"\
    * ]]\n    # Hint: You can use the following command to check if a string ends\
    \ with a substring:\n    # [[ \"$string\" == *\"$substring\" ]]\n    # Hint: You\
    \ can use the following command to check if a string contains only digits:\n \
    \   # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: You can use the following command\
    \ to check if a string contains only letters:\n    # [[ \"$string\" =~ ^[a-zA-Z]+$\
    \ ]]\n    # Hint: You can use the following command to check if a string contains\
    \ only letters and digits:\n    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint:\
    \ You can use the following command to check if a string contains only letters\
    \ and digits:\n    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint: You can\
    \ use the following command to check if a string contains only letters and digits:\n\
    \    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint: You can use the following\
    \ command to check if a string contains only letters and digits:\n    # [[ \"\
    $string\" =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint: You can use the following command\
    \ to check if a string contains only letters and digits:\n    # [[ \"$string\"\
    \ =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint: You can use the following command to check\
    \ if a string contains only letters and digits:\n    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$\
    \ ]]\n    # Hint: You can use the following command to check if a string contains\
    \ only letters and digits:", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n",
  "    # Write your code here\n    # You can use the following command to check if\
    \ a string is a valid file name:\n    # [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # It returns 0 if the string is a valid file name, and 1 otherwise.\n\
    \    # You can use the following command to check if a string is a valid file\
    \ name:\n    # [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]\n    # It returns\
    \ 0 if the string is a valid file name, and 1 otherwise.\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi", "    if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n\
    \        if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi", "    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local dot_index=0\n    local dot_count=0\n    local digit_count=0\n    local\
    \ extension=\"\"\n    local extension_len=0\n    local valid_extensions=(\"txt\"\
    \ \"exe\" \"dll\")\n    local valid_extension=0\n    local i=0\n    local j=0\n\
    \    local c=0\n    local valid=0\n\n    # Check if the file name is empty\n \
    \   if [ -z \"$file_name\" ]; then\n        echo \"No\"\n        return\n    fi\n\
    \n    # Check if the file name contains only one dot\n    for ((i=0; i<file_name_len;\
    \ i++)); do\n        c=${file_name:i:1}\n        if [ \"$c\" == \".\" ]; then\n\
    \            dot_count=$((dot_count+1))\n            dot_index=$i\n        fi\n\
    \    done\n    if [ $dot_count -ne 1 ]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file name contains more than three digits\n    for\
    \ ((i=0; i<dot_index; i++)); do\n        c=${file_name:i:1}\n        if [[ \"\
    $c\" =~ [0-9] ]]; then\n            digit_count=$((digit_count+1))\n        fi\n\
    \    done\n    if [ $digit_count -gt 3 ]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file name starts with a letter\n    c=${file_name:0:1}\n\
    \    if [[ ! \"$c\" =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file name has a valid extension\n    extension=${file_name:dot_index+1}\n\
    \    extension_len=${#extension}\n    for ((i=0; i<${#valid_extensions[@]}; i++));\
    \ do\n        if [ \"$extension\" == \"${valid_extensions[i]}\" ]; then\n    \
    \        valid_extension=1\n            break\n       ", "    # Write your code\
    \ here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n", "    # check if the file's name contains exactly\
    \ one dot '.'\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]; then\n\
    \        # check if the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n        if [[ $1 =~ \\.(txt|exe|dll)$ ]]; then\n            # check\
    \ if there are not more than three digits ('0'-'9') in the file's name\n     \
    \       if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\.[a-zA-Z]{3}$ ]]; then\n      \
    \          echo \"Yes\"\n            else\n                echo \"No\"\n     \
    \       fi\n        else\n            echo \"No\"\n        fi\n    else\n    \
    \    echo \"No\"\n    fi", "    # Write your code here\n    # Remove the following\
    \ line and replace it with your code.\n    echo \"Not implemented\"", "    # Write\
    \ your code here\n    # You can use the following command to check if a string\
    \ is a valid file name:\n    #     [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\
    \ ]]\n    # It returns 0 if the string is a valid file name, and returns 1 otherwise.\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ more than three digits:\n    #     [[ $1 =~ [0-9]{4} ]]\n    # It returns 0\
    \ if the string contains more than three digits, and returns 1 otherwise.\n  \
    \  #\n    # You can use the following command to check if a string contains exactly\
    \ one dot:\n    #     [[ $1 =~ ^[^.]*\\.[^.]*$ ]]\n    # It returns 0 if the string\
    \ contains exactly one dot, and returns 1 otherwise.\n    #\n    # You can use\
    \ the following command to check if a string ends with one of the following:\n\
    \    # ['txt', 'exe', 'dll']\n    #     [[ $1 =~ \\.(txt|exe|dll)$ ]]\n    # It\
    \ returns 0 if the string ends with one of the following: ['txt', 'exe', 'dll'],\n\
    \    # and returns 1 otherwise.\n    #\n    # You can use the following command\
    \ to check if a string starts with a letter from the latin alphapet:\n    #  \
    \   [[ $1 =~ ^[a-zA-Z] ]]\n    # It returns 0 if the string starts with a letter\
    \ from the latin alphapet, and returns 1 otherwise.\n    #\n    # You can use\
    \ the following command to check if a string is empty:\n    #     [[ -z $1 ]]\n\
    \    # It returns 0 if the string is empty, and returns 1 otherwise.\n    #\n\
    \    # You can use the following command to check if a string is not empty:\n\
    \    #     [[ -n $1 ]]\n    # It returns 0 if the string is not empty, and returns\
    \ 1 otherwise.\n    #\n    # You can use the following command to check if a string\
    \ contains exactly one dot:\n    #     [[ $1 =~", "    # TODO: Write your code\
    \ here\n    # Check if the file name has more than 3 digits\n    if [[ $1 =~ [0-9]{4}\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the\
    \ file name has exactly one dot\n    if [[ $1 =~ [.] ]]; then\n        if [[ $1\
    \ =~ [.]{2} ]]; then\n            echo \"No\"\n            return\n        fi\n\
    \    else\n        echo \"No\"\n        return\n    fi\n\n    # Check if the substring\
    \ before the dot is not empty and starts with a letter\n    if [[ $1 =~ ^[a-zA-Z]\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][.] ]]; then\n            echo \"No\"\
    \n            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n    if [[ $1 =~ [.](txt|exe|dll)$ ]]; then\n        echo \"Yes\"\
    \n        return\n    else\n        echo \"No\"\n        return\n    fi", "  \
    \  local file_name=$1\n    local file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_regex ]]; then\n       \
    \ echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    local file_name=$1\n\
    \    local file_name_len=${#file_name}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_ext_len=${#file_name_ext}\n    local file_name_ext_len_minus_one=$((file_name_ext_len\
    \ - 1))\n    local file_name_ext_len_minus_two=$((file_name_ext_len - 2))\n  \
    \  local file_name_ext_len_minus_three=$((file_name_ext_len - 3))\n    local file_name_ext_len_minus_four=$((file_name_ext_len\
    \ - 4))\n    local file_name_ext_len_minus_five=$((file_name_ext_len - 5))\n \
    \   local file_name_ext_len_minus_six=$((file_name_ext_len - 6))\n    local file_name_ext_len_minus_seven=$((file_name_ext_len\
    \ - 7))\n    local file_name_ext_len_minus_eight=$((file_name_ext_len - 8))\n\
    \    local file_name_ext_len_minus_nine=$((file_name_ext_len - 9))\n    local\
    \ file_name_ext_len_minus_ten=$((file_name_ext_len - 10))\n    local file_name_ext_len_minus_eleven=$((file_name_ext_len\
    \ - 11))\n    local file_name_ext_len_minus_twelve=$((file_name_ext_len - 12))\n\
    \    local file_name_ext_len_minus_thirteen=$((file_name_ext_len - 13))\n    local\
    \ file_name_ext_len_minus_fourteen=$((file_name_ext_len - 14))\n    local file_name_ext_len_minus_fifteen=$((file_name_ext_len\
    \ - 15))\n    local file_name_ext_len_minus_sixteen=$((file_name_ext_len - 16))\n\
    \    local file_name_ext_len_minus_seventeen=$((file_name_ext_len - 17))\n   \
    \ local file", "    # check if the file name contains more than 3 digits\n   \
    \ if [[ \"$1\" =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n   \
    \ fi\n\n    # check if the file name contains exactly one dot\n    if [[ \"$1\"\
    \ =~ \\. ]]; then\n        if [[ \"$1\" =~ \\.{2} ]]; then\n            echo \"\
    No\"\n            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # check if the substring before the dot is empty or starts with\
    \ a digit\n    if [[ \"$1\" =~ ^[0-9] ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # check if the substring after the dot is one of the valid extensions\n\
    \    if [[ \"$1\" =~ \\.txt$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    elif [[ \"$1\" =~ \\.exe$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    elif [[ \"$1\" =~ \\.dll$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    else\n        echo \"No\"\n        return\n    fi", "    # Write your code\
    \ here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   \
    \ # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n  \
    \  # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n\
    \        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n   \
    \         echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n  \
    \  else\n        echo \"No\"\n    fi", "    # Write your code here\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    # Write your code here\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n", "\t# Check if the file name contains\
    \ more than 3 digits\n\tif [[ \"$1\" =~ [0-9]{4} ]]; then\n\t\techo \"No\"\n\t\
    \treturn\n\tfi\n\n\t# Check if the file name contains exactly one dot\n\tif [[\
    \ \"$1\" =~ ^[^.]+\\.[^.]+$ ]]; then\n\t\t# Check if the substring before the\
    \ dot is not empty, and starts with a letter\n\t\tif [[ \"$1\" =~ ^[a-zA-Z]+\\\
    .[^.]+$ ]]; then\n\t\t\t# Check if the substring after the dot is one of the following:\
    \ ['txt', 'exe', 'dll']\n\t\t\tif [[ \"$1\" =~ \\.txt$ || \"$1\" =~ \\.exe$ ||\
    \ \"$1\" =~ \\.dll$ ]]; then\n\t\t\t\techo \"Yes\"\n\t\t\t\treturn\n\t\t\tfi\n\
    \t\tfi\n\tfi\n\n\techo \"No\"", "    # Write your code here\n    # You can use\
    \ the following command to check if a string is a valid file name:\n    # [[ $1\
    \ =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]\n    # If the string is a valid file\
    \ name, the command returns 0 (true).\n    # Otherwise, it returns 1 (false).\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ more than three\n    # digits:\n    # [[ $1 =~ [0-9]{4,} ]]\n    # If the string\
    \ contains more than three digits, the command returns 0 (true).\n    # Otherwise,\
    \ it returns 1 (false).\n    #\n    # You can use the following command to check\
    \ if a string contains exactly one dot:\n    # [[ $1 =~ ^[^.]*\\.[^.]*$ ]]\n \
    \   # If the string contains exactly one dot, the command returns 0 (true).\n\
    \    # Otherwise, it returns 1 (false).\n    #\n    # You can use the following\
    \ command to check if a string ends with one of these:\n    # ['txt', 'exe', 'dll']\n\
    \    # [[ $1 =~ \\.(txt|exe|dll)$ ]]\n    # If the string ends with one of these,\
    \ the command returns 0 (true).\n    # Otherwise, it returns 1 (false).\n    #\n\
    \    # You can use the following command to check if a string starts with a letter\
    \ from \n    # the latin alphapet ('a'-'z' and 'A'-'Z'):\n    # [[ $1 =~ ^[a-zA-Z]\
    \ ]]\n    # If the string starts with a letter from the latin alphapet, the command\
    \ returns 0 (true).\n    # Otherwise, it returns 1 (false).\n    #\n    # You\
    \ can use the following command to check if a string is empty:\n    # [[ -z $1\
    \ ]]\n    # If the string is empty, the command returns 0 (true).\n    # Otherwise,\
    \ it returns 1 (false).\n    #\n    # You can use the following command to check\
    \ if a string contains only digits:", "    # Write your code here\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...", "\tif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n\t\tif [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[ ${BASH_REMATCH[1]}\
    \ == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\t\t\techo \"\
    Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi", " \
    \   # Write your code here\n    # You can use the following command to check if\
    \ a string is a valid file's name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\
    \ ]]\n    # It returns true if the string is a valid file's name, and false otherwise.\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ more than three digits:\n    # [[ $1 =~ [0-9]{4} ]]\n    # It returns true if\
    \ the string contains more than three digits, and false otherwise.\n    #\n  \
    \  # You can use the following command to check if a string contains exactly one\
    \ dot:\n    # [[ $1 =~ ^[^.]*\\.[^.]*$ ]]\n    # It returns true if the string\
    \ contains exactly one dot, and false otherwise.\n    #\n    # You can use the\
    \ following command to check if a string contains a substring:\n    # [[ $1 =~\
    \ $2 ]]\n    # It returns true if the string contains the substring, and false\
    \ otherwise.\n    #\n    # You can use the following command to check if a string\
    \ starts with a substring:\n    # [[ $1 =~ ^$2 ]]\n    # It returns true if the\
    \ string starts with the substring, and false otherwise.\n    #\n    # You can\
    \ use the following command to check if a string ends with a substring:\n    #\
    \ [[ $1 =~ $2$ ]]\n    # It returns true if the string ends with the substring,\
    \ and false otherwise.\n    #\n    # You can use the following command to check\
    \ if a string is empty:\n    # [[ -z $1 ]]\n    # It returns true if the string\
    \ is empty, and false otherwise.\n    #\n    # You can use the following command\
    \ to check if a string is not empty:\n    # [[ -n $1 ]]\n    # It returns true\
    \ if the string is not empty, and false otherwise.\n    #\n    # You can use the\
    \ following command to check if a string contains only digits:\n    # [[ $1 =~\
    \ ^[0-9]+$ ]]\n    # It returns true", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    # You can use the following command to check if a string matches a regular\
    \ expression:\n    # [[ $string =~ $regex ]]\n    # If the string matches the\
    \ regular expression, the return value of the above command is 0,\n    # otherwise,\
    \ the return value is 1.\n    #\n    # For example, the following command checks\
    \ if a string contains exactly three digits:\n    # [[ $string =~ [0-9]{3} ]]\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ exactly one dot:\n    # [[ $string =~ \\. ]]\n    #\n    # You can use the following\
    \ command to check if a string starts with a letter from the latin alphabet:\n\
    \    # [[ $string =~ ^[a-zA-Z] ]]\n    #\n    # You can use the following command\
    \ to check if a string is one of these: ['txt', 'exe', 'dll']:\n    # [[ $string\
    \ =~ ^(txt|exe|dll)$ ]]\n    #\n    # You can use the following command to check\
    \ if a string contains exactly one dot:\n    # [[ $string =~ \\. ]]\n    #\n \
    \   # You can use the following command to check if a string contains more than\
    \ three digits:\n    # [[ $string =~ [0-9]{4,} ]]\n    #\n    # You can use the\
    \ following command to check if a string contains less than three digits:\n  \
    \  # [[ $string =~ ^[^0-9]*[0-9]{0,3}[^0-9]*$ ]]\n    #\n    # You can use the\
    \ following command to check if a string contains exactly one dot:\n    # [[ $string\
    \ =~ \\. ]]\n    #\n    # You can use the following command to check if a string\
    \ contains exactly one dot:\n    # [[ $string =~ \\. ]]\n    #\n    # You can\
    \ use the following command to check if a string contains exactly one dot:\n \
    \   # [[ $string =~ \\. ]]\n    #\n    # You can use the following command to\
    \ check if a string contains exactly one dot:\n    # [[ $string =~ \\. ]]", " \
    \   if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]; then\n        if [[\
    \ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]]; then\n     \
    \       echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    # TODO: Write your code here\n    # Return\
    \ \"Yes\" or \"No\"\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    # TODO: Write your code\
    \ here\n    # Hint: You can use the following command to check if a string contains\
    \ a substring:\n    # [[ \"$string\" == *\"$substring\"* ]]\n    # If the string\
    \ contains the substring, it returns true. Otherwise, it returns false.\n    #\
    \ For example:\n    # >>> [[ \"example\" == *\"ex\"* ]]\n    # true\n    # >>>\
    \ [[ \"example\" == *\"exx\"* ]]\n    # false\n    #\n    # Hint: You can use\
    \ the following command to check if a string starts with a substring:\n    # [[\
    \ \"$string\" == \"$substring\"* ]]\n    # If the string starts with the substring,\
    \ it returns true. Otherwise, it returns false.\n    # For example:\n    # >>>\
    \ [[ \"example\" == \"ex\"* ]]\n    # true\n    # >>> [[ \"example\" == \"exx\"\
    * ]]\n    # false\n    #\n    # Hint: You can use the following command to check\
    \ if a string ends with a substring:\n    # [[ \"$string\" == *\"$substring\"\
    \ ]]\n    # If the string ends with the substring, it returns true. Otherwise,\
    \ it returns false.\n    # For example:\n    # >>> [[ \"example\" == *\"le\" ]]\n\
    \    # true\n    # >>> [[ \"example\" == *\"lle\" ]]\n    # false\n    #\n   \
    \ # Hint: You can use the following command to check if a string contains only\
    \ digits:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # If the string contains only\
    \ digits, it returns true. Otherwise, it returns false.\n    # For example:\n\
    \    # >>> [[ \"123\" =~ ^[0-9]+$ ]]\n    # true\n    # >>> [[ \"123a\" =~ ^[0-9]+$\
    \ ]]\n    # false\n    #\n    # Hint: You can use the following command to check\
    \ if a string contains only letters:\n    # [[ \"$string\" =~ ^[a-zA-Z]+$ ]]\n\
    \    # If the string contains only letters, it returns true. Otherwise, it returns",
  "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n\t\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n\
    \t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\techo \"No\"\
    \n\tfi", "    # Write your code here\n    # You can use the following command\
    \ to check if a string matches a regular expression:\n    # [[ $string =~ $regex\
    \ ]]\n    # If the string matches the regex, the return value is 0. Otherwise,\
    \ the return value is 1.\n    #\n    # For example,\n    # [[ \"abc\" =~ \"a\"\
    \ ]] returns 0\n    # [[ \"abc\" =~ \"d\" ]] returns 1\n    #\n    # You can use\
    \ the following command to check if a string contains a substring:\n    # [[ $string\
    \ == *$substring* ]]\n    # If the string contains the substring, the return value\
    \ is 0. Otherwise, the return value is 1.\n    #\n    # For example,\n    # [[\
    \ \"abc\" == *\"a\"* ]] returns 0\n    # [[ \"abc\" == *\"d\"* ]] returns 1\n\
    \    #\n    # You can use the following command to check if a string starts with\
    \ a substring:\n    # [[ $string == $substring* ]]\n    # If the string starts\
    \ with the substring, the return value is 0. Otherwise, the return value is 1.\n\
    \    #\n    # For example,\n    # [[ \"abc\" == \"a\"* ]] returns 0\n    # [[\
    \ \"abc\" == \"d\"* ]] returns 1\n    #\n    # You can use the following command\
    \ to check if a string ends with a substring:\n    # [[ $string == *$substring\
    \ ]]\n    # If the string ends with the substring, the return value is 0. Otherwise,\
    \ the return value is 1.\n    #\n    # For example,\n    # [[ \"abc\" == *\"c\"\
    \ ]] returns 0\n    # [[ \"abc\" == *\"d\" ]] returns 1\n    #\n    # You can\
    \ use the following command to check if a string is empty:\n    # [[ -z $string\
    \ ]]\n    # If the string is empty, the return value is 0. Otherwise, the return\
    \ value is 1.\n    #\n    # For example,\n    # [[ -z \"\" ]] returns 0\n    #\
    \ [[ -z \"a\" ]] returns 1\n    #\n    # You can use the following command", " \
    \   # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n", "    local file_name=$1\n    local file_name_regex=\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_regex\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "  local file_name=$1\n  local file_name_len=${#file_name}\n\
    \  local dot_index=$(expr index \"$file_name\" '.')\n  local dot_index_plus_one=$((dot_index\
    \ + 1))\n  local dot_index_plus_two=$((dot_index + 2))\n  local dot_index_plus_three=$((dot_index\
    \ + 3))\n  local file_name_extension=${file_name:dot_index_plus_one:3}\n  local\
    \ file_name_extension_len=${#file_name_extension}\n  local file_name_extension_len_minus_one=$((file_name_extension_len\
    \ - 1))\n  local file_name_extension_len_minus_two=$((file_name_extension_len\
    \ - 2))\n  local file_name_extension_len_minus_three=$((file_name_extension_len\
    \ - 3))\n  local file_name_extension_first_char=${file_name_extension:0:1}\n \
    \ local file_name_extension_second_char=${file_name_extension:1:1}\n  local file_name_extension_third_char=${file_name_extension:2:1}\n\
    \  local file_name_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_extension_first_char\"\
    )\n  local file_name_extension_second_char_ascii=$(printf \"%d\" \"'$file_name_extension_second_char\"\
    )\n  local file_name_extension_third_char_ascii=$(printf \"%d\" \"'$file_name_extension_third_char\"\
    )\n  local file_name_extension_first_char_ascii_lower_case_a=$(printf \"%d\" \"\
    'a\")\n  local file_name_extension_first_char_ascii_upper_case_a=$(printf \"%d\"\
    \ \"'A\")\n  local file_name_extension_first_char_ascii_lower_case_z=$(printf\
    \ \"%d\" \"'z\")\n  local file_", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$\
    \ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$\
    \ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "  if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n      echo \"Yes\"\n    else\n      echo \"No\"\n    fi\n  else\n\
    \    echo \"No\"\n  fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ .*[0-9].* ]]; then\n            echo \"No\"\n\
    \        else\n            echo \"Yes\"\n        fi\n    else\n        echo \"\
    No\"\n    fi", "    # Write your code here\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "    # TODO:\
    \ Write your code here\n    # Check if the file's name is valid\n    # Return\
    \ \"Yes\" if the file's name is valid, and \"No\" otherwise\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    local file_name=$1\n    local file_name_len=${#file_name}\n    local dot_index=$(expr\
    \ index \"$file_name\" \".\")\n    local dot_index_minus_one=$((dot_index - 1))\n\
    \    local dot_index_plus_one=$((dot_index + 1))\n    local dot_index_plus_two=$((dot_index\
    \ + 2))\n    local dot_index_plus_three=$((dot_index + 3))\n    local dot_index_plus_four=$((dot_index\
    \ + 4))\n    local first_letter=${file_name:0:1}\n    local first_letter_is_valid=$(echo\
    \ \"$first_letter\" | grep -E \"^[a-zA-Z]$\")\n    local extension=${file_name:dot_index_plus_one:3}\n\
    \    local extension_is_valid=$(echo \"$extension\" | grep -E \"^(txt|exe|dll)$\"\
    )\n    local digits_count=$(echo \"$file_name\" | grep -o -E \"[0-9]\" | wc -l)\n\
    \    if [[ \"$file_name_len\" -lt 5 ]]; then\n        echo \"No\"\n    elif [[\
    \ \"$dot_index\" -eq 1 ]]; then\n        echo \"No\"\n    elif [[ \"$dot_index_plus_four\"\
    \ -gt \"$file_name_len\" ]]; then\n        echo \"No\"\n    elif [[ -z \"$first_letter_is_valid\"\
    \ ]]; then\n        echo \"No\"\n    elif [[ -z \"$extension_is_valid\" ]]; then\n\
    \        echo \"No\"\n    elif [[ \"$digits_count\" -gt 3 ]]; then\n        echo\
    \ \"No\"\n    else\n        echo \"Yes\"\n    fi", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "    # Write your code here\n    # You can use the following\
    \ command to check if a string matches a regular expression:\n    # [[ $string\
    \ =~ $regex ]]\n    # If the string matches the regular expression, the return\
    \ value is 0.\n    # Otherwise, the return value is 1.\n    #\n    # For example:\n\
    \    # [[ \"abc\" =~ \"a\" ]]\n    # The return value is 0.\n    # [[ \"abc\"\
    \ =~ \"d\" ]]\n    # The return value is 1.\n    #\n    # You can use the following\
    \ command to check if a string contains a substring:\n    # [[ $string == *$substring*\
    \ ]]\n    # If the string contains the substring, the return value is 0.\n   \
    \ # Otherwise, the return value is 1.\n    #\n    # For example:\n    # [[ \"\
    abc\" == *\"a\"* ]]\n    # The return value is 0.\n    # [[ \"abc\" == *\"d\"\
    * ]]\n    # The return value is 1.\n    #\n    # You can use the following command\
    \ to check if a string starts with a substring:\n    # [[ $string == $substring*\
    \ ]]\n    # If the string starts with the substring, the return value is 0.\n\
    \    # Otherwise, the return value is 1.\n    #\n    # For example:\n    # [[\
    \ \"abc\" == \"a\"* ]]\n    # The return value is 0.\n    # [[ \"abc\" == \"d\"\
    * ]]\n    # The return value is 1.\n    #\n    # You can use the following command\
    \ to check if a string ends with a substring:\n    # [[ $string == *$substring\
    \ ]]\n    # If the string ends with the substring, the return value is 0.\n  \
    \  # Otherwise, the return value is 1.\n    #\n    # For example:\n    # [[ \"\
    abc\" == *\"c\" ]]\n    # The return value is 0.\n    # [[ \"abc\" == *\"d\" ]]\n\
    \    # The return value is 1.\n    #\n    # You can use the following command\
    \ to count the number of characters in a string:\n    # ${#string}", "    # Write\
    \ your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n", "    # Write your code here\n  \
    \  # You can use the following command to check if a string contains a substring:\n\
    \    # [[ $string == *substring* ]]\n    # It returns true if the $string contains\
    \ $substring, and false otherwise.\n    # For example:\n    # >>> [[ \"abc\" ==\
    \ *\"b\"* ]]\n    # true\n    # >>> [[ \"abc\" == *\"d\"* ]]\n    # false\n  \
    \  #\n    # You can use the following command to check if a string starts with\
    \ a substring:\n    # [[ $string == substring* ]]\n    # It returns true if the\
    \ $string starts with $substring, and false otherwise.\n    # For example:\n \
    \   # >>> [[ \"abc\" == \"a\"* ]]\n    # true\n    # >>> [[ \"abc\" == \"b\"*\
    \ ]]\n    # false\n    #\n    # You can use the following command to check if\
    \ a string ends with a substring:\n    # [[ $string == *substring ]]\n    # It\
    \ returns true if the $string ends with $substring, and false otherwise.\n   \
    \ # For example:\n    # >>> [[ \"abc\" == *\"c\" ]]\n    # true\n    # >>> [[\
    \ \"abc\" == *\"d\" ]]\n    # false\n    #\n    # You can use the following command\
    \ to check if a string contains only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n\
    \    # It returns true if the $string contains only digits, and false otherwise.\n\
    \    # For example:\n    # >>> [[ \"123\" =~ ^[0-9]+$ ]]\n    # true\n    # >>>\
    \ [[ \"abc\" =~ ^[0-9]+$ ]]\n    # false\n    #\n    # You can use the following\
    \ command to check if a string contains only letters:\n    # [[ $string =~ ^[a-zA-Z]+$\
    \ ]]\n    # It returns true if the $string contains only letters, and false otherwise.\n\
    \    # For example:\n    # >>> [[ \"abc\" =~ ^[a-zA-Z]+$ ]]\n    # true\n    #\
    \ >>> [[ \"123\" =~ ^", "    # Write your code here\n    # You can use the following\
    \ command to check if a string is a valid number:\n    # [[ $1 =~ ^[0-9]+$ ]]\n\
    \    # It returns true if the string is a valid number, and false otherwise.\n\
    \    # You can use the following command to check if a string is a valid file's\
    \ name:\n    # [[ $1 =~ ^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+$ ]]\n    # It returns true\
    \ if the string is a valid file's name, and false otherwise.\n    # You can use\
    \ the following command to check if a string is a valid file's extension:\n  \
    \  # [[ $1 =~ ^(txt|exe|dll)$ ]]\n    # It returns true if the string is a valid\
    \ file's extension, and false otherwise.\n    # You can use the following command\
    \ to extract the substring before the dot:\n    # ${1%.*}\n    # You can use the\
    \ following command to extract the substring after the dot:\n    # ${1##*.}\n\
    \    # You can use the following command to get the length of a string:\n    #\
    \ ${#1}\n    # You can use the following command to get the number of digits in\
    \ a string:\n    # $(echo $1 | grep -o '[0-9]' | wc -l)\n    # You can use the\
    \ following command to get the number of dots in a string:\n    # $(echo $1 |\
    \ grep -o '\\.' | wc -l)\n    # You can use the following command to get the number\
    \ of letters in a string:\n    # $(echo $1 | grep -o '[a-zA-Z]' | wc -l)\n   \
    \ # You can use the following command to get the number of letters in a string:\n\
    \    # $(echo $1 | grep -o '[a-zA-Z]' | wc -l)\n    # You can use the following\
    \ command to get the number of letters in a string:\n    # $(echo $1 | grep -o\
    \ '[a-zA-Z]' | wc -l)\n    # You can use the following command to get the number\
    \ of letters in a string:\n    # $(echo $1 |", "    # Write your code here\n \
    \   # You can use the following command to check if a string contains a substring:\n\
    \    # if [[ \"$string\" == *\"$substring\"* ]]; then ...\n    # You can use the\
    \ following command to check if a string matches a regular expression:\n    #\
    \ if [[ \"$string\" =~ $regex ]]; then ...\n    # You can use the following command\
    \ to check if a string starts with a substring:\n    # if [[ \"$string\" == \"\
    $substring\"* ]]; then ...\n    # You can use the following command to check if\
    \ a string ends with a substring:\n    # if [[ \"$string\" == *\"$substring\"\
    \ ]]; then ...\n    # You can use the following command to check if a string is\
    \ empty:\n    # if [[ -z \"$string\" ]]; then ...\n    # You can use the following\
    \ command to check if a string is not empty:\n    # if [[ -n \"$string\" ]]; then\
    \ ...\n    # You can use the following command to check if a string contains only\
    \ digits:\n    # if [[ \"$string\" =~ ^[0-9]+$ ]]; then ...\n    # You can use\
    \ the following command to check if a string contains only letters:\n    # if\
    \ [[ \"$string\" =~ ^[a-zA-Z]+$ ]]; then ...\n    # You can use the following\
    \ command to check if a string contains only letters and digits:\n    # if [[\
    \ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]; then ...\n    # You can use the following\
    \ command to check if a string contains only letters, digits, and underscores:\n\
    \    # if [[ \"$string\" =~ ^[a-zA-Z0-9_]+$ ]]; then ...\n    # You can use the\
    \ following command to check if a string contains only letters, digits, underscores,\
    \ and dashes:\n    # if [[ \"$string\" =~ ^[a-zA-Z0-9_-]+$ ]]; then ...\n    #\
    \ You can use the following command to check if a string contains only letters,\
    \ digits, underscores, dashes, and dots:\n    # if [[ \"$string\" =~ ^[a-zA-Z0-9_.-]+$\
    \ ]]; then ...", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]];\
    \ then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi", "    # write your code here\n    if [[\
    \ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~\
    \ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]]; then\n           \
    \ echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    if [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$\
    \ ]]; then\n        echo \"Yes\"\n    elif [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    # Write your code here\n    # You can use the following command to check if\
    \ a string is a valid file name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # Hint:\n    # You can use the\
    \ following command to count the number of digits in a string:\n    # echo $1\
    \ | grep -o \"[0-9]\" | wc -l\n    #\n    # Hint:\n    # You can use the following\
    \ command to count the number of dots in a string:\n    # echo $1 | grep -o \"\
    \\.\" | wc -l\n    #\n    # Hint:\n    # You can use the following command to\
    \ get the substring before the dot:\n    # echo $1 | cut -d'.' -f1\n    #\n  \
    \  # Hint:\n    # You can use the following command to get the substring after\
    \ the dot:\n    # echo $1 | cut -d'.' -f2\n    #\n    # Hint:\n    # You can use\
    \ the following command to check if a string is empty:\n    # [[ -z $1 ]] && echo\
    \ \"Yes\" || echo \"No\"\n    #\n    # Hint:\n    # You can use the following\
    \ command to check if a string starts with a letter:\n    # [[ $1 =~ ^[a-zA-Z]\
    \ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # Hint:\n    # You can use the\
    \ following command to check if a string is one of these: ['txt', 'exe', 'dll']\n\
    \    # [[ $1 =~ ^(txt|exe|dll)$ ]] && echo \"Yes\" || echo \"No\"\n    #\n   \
    \ # Hint:\n    # You can use the following command to check if a string is not\
    \ one of these: ['txt', 'exe', 'dll']\n    # [[ ! $1 =~ ^(txt|exe|dll)$ ]] &&\
    \ echo \"Yes\" || echo \"No\"\n    #\n    # Hint:\n    # You can use the following\
    \ command", "    # Write your code here\n    # You can use the following command\
    \ to check if a string contains a substring:\n    # [[ $1 =~ .*$2.* ]]\n    #\
    \ It returns 0 if the string contains the substring, and 1 otherwise.\n    #\n\
    \    # For example:\n    # >>> [[ \"abc\" =~ .*b.* ]]\n    # 0\n    # >>> [[ \"\
    abc\" =~ .*d.* ]]\n    # 1\n    #\n    # You can use the following command to\
    \ check if a string starts with a substring:\n    # [[ $1 =~ ^$2.* ]]\n    # It\
    \ returns 0 if the string starts with the substring, and 1 otherwise.\n    #\n\
    \    # For example:\n    # >>> [[ \"abc\" =~ ^a.* ]]\n    # 0\n    # >>> [[ \"\
    abc\" =~ ^b.* ]]\n    # 1\n    #\n    # You can use the following command to check\
    \ if a string ends with a substring:\n    # [[ $1 =~ .*$2$ ]]\n    # It returns\
    \ 0 if the string ends with the substring, and 1 otherwise.\n    #\n    # For\
    \ example:\n    # >>> [[ \"abc\" =~ .*c$ ]]\n    # 0\n    # >>> [[ \"abc\" =~\
    \ .*b$ ]]\n    # 1\n    #\n    # You can use the following command to check if\
    \ a string contains only digits:\n    # [[ $1 =~ ^[0-9]+$ ]]\n    # It returns\
    \ 0 if the string contains only digits, and 1 otherwise.\n    #\n    # For example:\n\
    \    # >>> [[ \"123\" =~ ^[0-9]+$ ]]\n    # 0\n    # >>> [[ \"123abc\" =~ ^[0-9]+$\
    \ ]]\n    # 1\n    #\n    # You can use the following command to check if a string\
    \ contains only letters:\n    # [[ $1 =~ ^[a-zA-Z]+$ ]]\n    # It returns 0 if\
    \ the string contains only letters, and 1 otherwise.\n    #\n    # For example:\n\
    \    # >>> [[ \"abc\" =~ ^[a-zA-", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "    # Check if the file\
    \ name contains more than 3 digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n      \
    \  echo \"No\"\n        return\n    fi\n\n    # Check if the file name contains\
    \ exactly one dot\n    if [[ $1 =~ ^[^.]*\\.[^.]*$ ]]; then\n        # Check if\
    \ the substring before the dot is not empty, and starts with a letter\n      \
    \  if [[ $1 =~ ^[a-zA-Z][^.]*\\.[^.]*$ ]]; then\n            # Check if the substring\
    \ after the dot is one of the following: ['txt', 'exe', 'dll']\n            if\
    \ [[ $1 =~ \\.(txt|exe|dll)$ ]]; then\n                echo \"Yes\"\n        \
    \        return\n            fi\n        fi\n    fi\n\n    echo \"No\"", "   \
    \ # TODO: Write your code here\n    # Check if the file name contains more than\
    \ 3 digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file name contains exactly one dot\n    if [[ $1\
    \ =~ \\. ]]; then\n        if [[ $1 =~ \\.{2} ]]; then\n            echo \"No\"\
    \n            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the substring before the dot is not empty and starts\
    \ with a letter\n    if [[ $1 =~ ^[a-zA-Z] ]]; then\n        if [[ $1 =~ ^[a-zA-Z]\\\
    . ]]; then\n            echo \"No\"\n            return\n        fi\n    else\n\
    \        echo \"No\"\n        return\n    fi\n\n    # Check if the substring after\
    \ the dot is one of the following: ['txt', 'exe', 'dll']\n    if [[ $1 =~ \\.txt$\
    \ ]]; then\n        echo \"Yes\"\n        return\n    elif [[ $1 =~ \\.exe$ ]];\
    \ then\n        echo \"Yes\"\n        return\n    elif [[ $1 =~ \\.dll$ ]]; then\n\
    \        echo \"Yes\"\n        return\n    else\n        echo \"No\"\n       \
    \ return\n    fi", "    # Your code here\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    # Write your code here\n    # You can use the following\
    \ command to check if a string matches a regular expression:\n    # [[ <string>\
    \ =~ <regular expression> ]]\n    # For example:\n    # [[ \"abc\" =~ \"a\" ]]\n\
    \    # will return 0 (true)\n    # [[ \"abc\" =~ \"d\" ]]\n    # will return 1\
    \ (false)\n    #\n    # You can use the following command to extract a substring\
    \ from a string:\n    # ${<string>#<substring>}\n    # For example:\n    # ${abc#a}\n\
    \    # will return \"bc\"\n    # ${abc#b}\n    # will return \"abc\"\n    #\n\
    \    # You can use the following command to extract a substring from a string:\n\
    \    # ${<string>%<substring>}\n    # For example:\n    # ${abc%a}\n    # will\
    \ return \"bc\"\n    # ${abc%b}\n    # will return \"abc\"\n    #\n    # You can\
    \ use the following command to get the length of a string:\n    # ${#<string>}\n\
    \    # For example:\n    # ${#abc}\n    # will return 3\n    #\n    # You can\
    \ use the following command to get the number of occurences of a substring in\
    \ a string:\n    # $(grep -o <substring> <<< <string> | wc -l)\n    # For example:\n\
    \    # $(grep -o a <<< abc | wc -l)\n    # will return 1\n    # $(grep -o a <<<\
    \ abc | wc -l)\n    # will return 2\n    #\n    # You can use the following command\
    \ to get the number of occurences of a character in a string:\n    # $(grep -o\
    \ <character> <<< <string> | wc -l)\n    # For example:\n    # $(grep -o a <<<\
    \ abc | wc -l)\n    # will return 1\n    # $(grep -o a <<< abc | wc -l)\n    #\
    \ will return 2\n    #\n    # You can use the following command to get the", " \
    \   # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n",
  "    if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n       \
    \ if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n      \
    \      echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    # Write your code here\n    # You can use\
    \ the following command to check if a string is empty:\n    # [ -z \"$string\"\
    \ ]\n    #\n    # You can use the following command to check if a string starts\
    \ with a letter:\n    # [[ $string =~ ^[a-zA-Z] ]]\n    #\n    # You can use the\
    \ following command to check if a string contains only digits:\n    # [[ $string\
    \ =~ ^[0-9]+$ ]]\n    #\n    # You can use the following command to check if a\
    \ string contains only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n    #\n    #\
    \ You can use the following command to check if a string contains exactly one\
    \ dot:\n    # [[ $string =~ ^[^.]*\\.[^.]*$ ]]\n    #\n    # You can use the following\
    \ command to check if a string contains only digits:\n    # [[ $string =~ ^[0-9]+$\
    \ ]]\n    #\n    # You can use the following command to check if a string contains\
    \ only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n    #\n    # You can use the\
    \ following command to check if a string contains only digits:\n    # [[ $string\
    \ =~ ^[0-9]+$ ]]\n    #\n    # You can use the following command to check if a\
    \ string contains only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n    #\n    #\
    \ You can use the following command to check if a string contains only digits:\n\
    \    # [[ $string =~ ^[0-9]+$ ]]\n    #\n    # You can use the following command\
    \ to check if a string contains only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n    #\n    # You can use the\
    \ following command to check if a string contains only digits:\n    # [[ $string\
    \ =~ ^[0-9]+$ ]]\n    #\n    # You can use the following command to check", " \
    \   # Write your code here\n    # You can use the following command to check if\
    \ a string contains a substring:\n    # [[ $string == *$substring* ]]\n    # It\
    \ returns true if $string contains $substring, and false otherwise.\n    #\n \
    \   # You can use the following command to check if a string starts with a substring:\n\
    \    # [[ $string == $substring* ]]\n    # It returns true if $string starts with\
    \ $substring, and false otherwise.\n    #\n    # You can use the following command\
    \ to check if a string ends with a substring:\n    # [[ $string == *$substring\
    \ ]]\n    # It returns true if $string ends with $substring, and false otherwise.\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n    # It returns true if $string\
    \ contains only digits, and false otherwise.\n    #\n    # You can use the following\
    \ command to check if a string contains only letters:\n    # [[ $string =~ ^[a-zA-Z]+$\
    \ ]]\n    # It returns true if $string contains only letters, and false otherwise.\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ only letters and digits:\n    # [[ $string =~ ^[a-zA-Z0-9]+$ ]]\n    # It returns\
    \ true if $string contains only letters and digits, and false otherwise.\n   \
    \ #\n    # You can use the following command to check if a string contains only\
    \ letters and digits and underscores:\n    # [[ $string =~ ^[a-zA-Z0-9_]+$ ]]\n\
    \    # It returns true if $string contains only letters and digits and underscores,\
    \ and false otherwise.\n    #\n    # You can use the following command to check\
    \ if a string contains only letters and digits and underscores and dashes:\n \
    \   # [[ $string =~ ^[a-zA-Z0-9_-]+$ ]]\n    # It returns true if $string contains\
    \ only letters and digits and underscores and dashes, and false otherwise.\n \
    \   #\n    # You can use the following command to check if a string contains only\
    \ letters", "    # Write your code here\n    # ...\n    # ...\n    # ...\n   \
    \ # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n  \
    \  # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n", "    local file_name=$1\n    local\
    \ file_name_len=${#file_name}\n    local file_name_ext=${file_name##*.}\n    local\
    \ file_name_ext_len=${#file_name_ext}\n    local file_name_ext_len_plus_one=$((file_name_ext_len\
    \ + 1))\n    local file_name_ext_len_plus_two=$((file_name_ext_len + 2))\n   \
    \ local file_name_ext_len_plus_three=$((file_name_ext_len + 3))\n    local file_name_ext_len_plus_four=$((file_name_ext_len\
    \ + 4))\n    local file_name_ext_len_plus_five=$((file_name_ext_len + 5))\n  \
    \  local file_name_ext_len_plus_six=$((file_name_ext_len + 6))\n    local file_name_ext_len_plus_seven=$((file_name_ext_len\
    \ + 7))\n    local file_name_ext_len_plus_eight=$((file_name_ext_len + 8))\n \
    \   local file_name_ext_len_plus_nine=$((file_name_ext_len + 9))\n    local file_name_ext_len_plus_ten=$((file_name_ext_len\
    \ + 10))\n    local file_name_ext_len_plus_eleven=$((file_name_ext_len + 11))\n\
    \    local file_name_ext_len_plus_twelve=$((file_name_ext_len + 12))\n    local\
    \ file_name_ext_len_plus_thirteen=$((file_name_ext_len + 13))\n    local file_name_ext_len_plus_fourteen=$((file_name_ext_len\
    \ + 14))\n    local file_name_ext_len_plus_fifteen=$((file_name_ext_len + 15))\n\
    \    local file_name_ext_len_plus_sixteen=$((file_name_ext_len + 16))\n    local\
    \ file_name_ext_len_plus_seventeen=$((file_name_ext_len + 17))\n    local file",
  "    # Write your code here\n    # You can use the following command to check if\
    \ a string matches a regular expression:\n    # [[ $string =~ $regex ]]\n    #\
    \ If the string matches the regular expression, the return value is 0.\n    #\
    \ Otherwise, the return value is 1.\n    #\n    # For example:\n    # [[ \"abc\"\
    \ =~ \"a\" ]]\n    # The return value is 0.\n    # [[ \"abc\" =~ \"d\" ]]\n  \
    \  # The return value is 1.\n    #\n    # You can use the following command to\
    \ check if a string contains a substring:\n    # [[ $string == *$substring* ]]\n\
    \    # If the string contains the substring, the return value is 0.\n    # Otherwise,\
    \ the return value is 1.\n    #\n    # For example:\n    # [[ \"abc\" == *\"a\"\
    * ]]\n    # The return value is 0.\n    # [[ \"abc\" == *\"d\"* ]]\n    # The\
    \ return value is 1.\n    #\n    # You can use the following command to check\
    \ if a string starts with a substring:\n    # [[ $string == $substring* ]]\n \
    \   # If the string starts with the substring, the return value is 0.\n    # Otherwise,\
    \ the return value is 1.\n    #\n    # For example:\n    # [[ \"abc\" == \"a\"\
    * ]]\n    # The return value is 0.\n    # [[ \"abc\" == \"d\"* ]]\n    # The return\
    \ value is 1.\n    #\n    # You can use the following command to check if a string\
    \ ends with a substring:\n    # [[ $string == *$substring ]]\n    # If the string\
    \ ends with the substring, the return value is 0.\n    # Otherwise, the return\
    \ value is 1.\n    #\n    # For example:\n    # [[ \"abc\" == *\"c\" ]]\n    #\
    \ The return value is 0.\n    # [[ \"abc\" == *\"d\" ]]\n    # The return value\
    \ is 1.\n    #\n    # You can use the following command to get the length of a\
    \ string:\n    # ${#string}\n   ", "\tlocal file_name=$1\n\tlocal file_name_len=${#file_name}\n\
    \tlocal file_name_dot_index=0\n\tlocal file_name_dot_index_found=0\n\tlocal file_name_dot_index_found_count=0\n\
    \tlocal file_name_digit_count=0\n\tlocal file_name_substring_before_dot=\"\"\n\
    \tlocal file_name_substring_after_dot=\"\"\n\tlocal file_name_substring_after_dot_len=0\n\
    \tlocal file_name_substring_after_dot_len_is_3=0\n\tlocal file_name_substring_after_dot_is_txt=0\n\
    \tlocal file_name_substring_after_dot_is_exe=0\n\tlocal file_name_substring_after_dot_is_dll=0\n\
    \tlocal file_name_substring_after_dot_is_valid=0\n\tlocal file_name_is_valid=0\n\
    \tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal n=0\n\
    \tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal t=0\n\
    \tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal z=0\n\
    \tlocal a=0\n\tlocal b=0\n\tlocal c=0\n\tlocal d=0\n\tlocal e=0\n\tlocal f=0\n\
    \tlocal g=0\n\tlocal h=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\
    \tlocal m=0\n\tlocal n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\
    \tlocal s=0\n\tlocal t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\
    \tlocal y=0\n\tlocal z=0\n\tlocal A=0\n\tlocal B=0\n\tlocal C=", "    # Write\
    \ your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    # TODO: Write your code\
    \ here\n    # Check the number of digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n    # Check the number of dots\n\
    \    if [[ $1 =~ \\.{2} ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \    # Check the substring before the dot\n    if [[ $1 =~ ^[a-zA-Z] ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n    # Check the substring after\
    \ the dot\n    if [[ $1 =~ \\.txt$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    fi\n    if [[ $1 =~ \\.exe$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    fi\n    if [[ $1 =~ \\.dll$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    fi\n    echo \"No\"", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # TODO: Write\
    \ your code here\n    # Check if there are more than 3 digits\n    if [[ $1 =~\
    \ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check\
    \ if there is exactly one dot\n    if [[ $1 =~ \\. ]]; then\n        if [[ $1\
    \ =~ \\.{2} ]]; then\n            echo \"No\"\n            return\n        fi\n\
    \    else\n        echo \"No\"\n        return\n    fi\n\n    # Check if the substring\
    \ before the dot is empty\n    if [[ $1 =~ ^\\. ]]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    # Check if the substring before the dot starts\
    \ with a letter\n    if [[ $1 =~ ^[a-zA-Z] ]]; then\n        if [[ $1 =~ \\.txt$\
    \ ]]; then\n            echo \"Yes\"\n            return\n        elif [[ $1 =~\
    \ \\.exe$ ]]; then\n            echo \"Yes\"\n            return\n        elif\
    \ [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n            return\n  \
    \      else\n            echo \"No\"\n            return\n        fi\n    else\n\
    \        echo \"No\"\n        return\n    fi", "    # Write your code here\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "    # Write your code here\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
  "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[\
    \ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n            echo\
    \ \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n     \
    \   echo \"No\"\n    fi", "    # Check if the file's name contains more than three\
    \ digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file's name contains exactly one dot\n    if [[\
    \ $1 =~ \\. ]]; then\n        if [[ $1 =~ \\..*\\. ]]; then\n            echo\
    \ \"No\"\n            return\n        fi\n    else\n        echo \"No\"\n    \
    \    return\n    fi\n\n    # Check if the substring before the dot is empty, or\
    \ starts with a letter\n    if [[ $1 =~ ^[a-zA-Z] ]]; then\n        if [[ $1 =~\
    \ ^[a-zA-Z]*\\. ]]; then\n            if [[ $1 =~ ^[a-zA-Z]*\\.(txt|exe|dll)$\
    \ ]]; then\n                echo \"Yes\"\n                return\n           \
    \ fi\n        fi\n    fi\n\n    echo \"No\"", "    local file_name=$1\n    local\
    \ file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\"\n    if [[ $file_name\
    \ =~ $file_name_regex ]]; then\n        echo \"Yes\"\n    else\n        echo \"\
    No\"\n    fi", "    # TODO: Write your code here\n    # Check if the file name\
    \ is valid\n    # Return \"Yes\" or \"No\"\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n", "    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  # TODO: Write your code here\n    # Check if the file name is valid\n    if\
    \ [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]; then\n        # Check if the\
    \ file name has more than 3 digits\n        if [[ $1 =~ [0-9]{4} ]]; then\n  \
    \          echo \"No\"\n        else\n            echo \"Yes\"\n        fi\n \
    \   else\n        echo \"No\"\n    fi", "    # Write your code here\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    # Write your code here\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    # TODO: Implement this function\n    # Hint: You\
    \ can use the following command to check if a string matches a regex:\n    # [[\
    \ $string =~ $regex ]]\n    # If the string matches the regex, the return value\
    \ of the command is 0.\n    # Otherwise, the return value is 1.\n    # For example:\n\
    \    # >>> [[ \"abcd\" =~ \"a\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"b\" ]]\n\
    \    # 0\n    # >>> [[ \"abcd\" =~ \"c\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~\
    \ \"d\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"e\" ]]\n    # 1\n    # >>> [[\
    \ \"abcd\" =~ \"ab\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"bc\" ]]\n    # 0\n\
    \    # >>> [[ \"abcd\" =~ \"cd\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"de\"\
    \ ]]\n    # 1\n    # >>> [[ \"abcd\" =~ \"abc\" ]]\n    # 0\n    # >>> [[ \"abcd\"\
    \ =~ \"bcd\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"cde\" ]]\n    # 1\n    #\
    \ >>> [[ \"abcd\" =~ \"abcd\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"bcde\" ]]\n\
    \    # 1\n    # >>> [[ \"abcd\" =~ \"abcde\" ]]\n    # 1\n    # >>> [[ \"abcd\"\
    \ =~ \"a\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"b\" ]]\n    # 0\n    # >>>\
    \ [[ \"abcd\" =~ \"c\" ]]\n    # 0\n    # >>> [[ \"abcd\" =~ \"d\" ]]\n    # 0\n\
    \    # >>> [[ \"abcd\" =~ \"e\" ]]\n    # 1\n    # >>> [[ \"abcd\" =~ \"ab\" ]]\n\
    \    # 0\n    # >>> [[ \"abcd", "    # Write your code here\n    # You can use\
    \ the following command to check if a string matches a regular expression:\n \
    \   # [[ $string =~ $regex ]]\n    # If the string matches the regex, the return\
    \ value of the command is 0, otherwise 1.\n    # For example:\n    # >>> [[ \"\
    abc\" =~ \"a\" ]]\n    # 0\n    # >>> [[ \"abc\" =~ \"d\" ]]\n    # 1\n    #\n\
    \    # You can use the following command to check if a string contains a substring:\n\
    \    # [[ $string = *$substring* ]]\n    # If the string contains the substring,\
    \ the return value of the command is 0, otherwise 1.\n    # For example:\n   \
    \ # >>> [[ \"abc\" = *\"a\"* ]]\n    # 0\n    # >>> [[ \"abc\" = *\"d\"* ]]\n\
    \    # 1\n    #\n    # You can use the following command to check if a string\
    \ starts with a substring:\n    # [[ $string = $substring* ]]\n    # If the string\
    \ starts with the substring, the return value of the command is 0, otherwise 1.\n\
    \    # For example:\n    # >>> [[ \"abc\" = \"a\"* ]]\n    # 0\n    # >>> [[ \"\
    abc\" = \"d\"* ]]\n    # 1\n    #\n    # You can use the following command to\
    \ check if a string ends with a substring:\n    # [[ $string = *$substring ]]\n\
    \    # If the string ends with the substring, the return value of the command\
    \ is 0, otherwise 1.\n    # For example:\n    # >>> [[ \"abc\" = *\"c\" ]]\n \
    \   # 0\n    # >>> [[ \"abc\" = *\"d\" ]]\n    # 1\n    #\n    # You can use the\
    \ following command to check if a string is empty:\n    # [[ -z $string ]]\n \
    \   # If the string is empty, the return value of the command is 0, otherwise\
    \ 1.\n    # For example:\n    # >>> [[ -z \"\" ]]\n    # 0\n    # >>> [[ -z \"\
    abc\" ]]\n    # 1\n    #\n    # You", "    # Write your code here\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write\
    \ your code here\n    # You can use the following command to check if a string\
    \ is a valid file name:\n    # [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # It returns 0 if the string is a valid file name, and 1 otherwise.\n\
    \    # You can use the following command to check if a string contains exactly\
    \ one dot:\n    # [[ $1 =~ ^[^.]+\\.[^.]+$ ]]\n    # It returns 0 if the string\
    \ contains exactly one dot, and 1 otherwise.\n    # You can use the following\
    \ command to check if a string contains more than three digits:\n    # [[ $1 =~\
    \ ^[^0-9]*[0-9]{4,} ]]\n    # It returns 0 if the string contains more than three\
    \ digits, and 1 otherwise.\n    # You can use the following command to check if\
    \ a string contains a substring:\n    # [[ $1 =~ $2 ]]\n    # It returns 0 if\
    \ the string contains the substring, and 1 otherwise.\n    # You can use the following\
    \ command to check if a string starts with a letter from the latin alphabet:\n\
    \    # [[ $1 =~ ^[a-zA-Z] ]]\n    # It returns 0 if the string starts with a letter\
    \ from the latin alphabet, and 1 otherwise.\n    # You can use the following command\
    \ to check if a string is one of the following: ['txt', 'exe', 'dll']\n    # [[\
    \ $1 =~ ^(txt|exe|dll)$ ]]\n    # It returns 0 if the string is one of the following:\
    \ ['txt', 'exe', 'dll'], and 1 otherwise.\n    # You can use the following command\
    \ to check if a string is empty:\n    # [[ -z $1 ]]\n    # It returns 0 if the\
    \ string is empty, and 1 otherwise.\n    # You can use the following command to\
    \ check if a string is not empty:\n    # [[ -n $1 ]]\n    # It returns 0 if the\
    \ string is not empty, and 1 otherwise.\n    # You can use the following command\
    \ to check if a string contains only digits:\n   ", "    # Write your code here\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n",
  "    local file_name=$1\n    local file_name_regex=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$\"\n    if [[ $file_name =~ $file_name_regex ]]; then\n       \
    \ echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[\
    \ ${BASH_REMATCH[1]} == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "  local file_name=$1\n \
    \ local file_name_len=${#file_name}\n  local file_name_dot_index=$(expr index\
    \ \"$file_name\" \".\")\n  local file_name_dot_index_plus_one=$((file_name_dot_index\
    \ + 1))\n  local file_name_dot_index_minus_one=$((file_name_dot_index - 1))\n\
    \  local file_name_dot_index_minus_one_plus_one=$((file_name_dot_index_minus_one\
    \ + 1))\n  local file_name_dot_index_minus_one_plus_two=$((file_name_dot_index_minus_one\
    \ + 2))\n  local file_name_dot_index_minus_one_plus_three=$((file_name_dot_index_minus_one\
    \ + 3))\n  local file_name_dot_index_minus_one_plus_four=$((file_name_dot_index_minus_one\
    \ + 4))\n  local file_name_dot_index_minus_one_plus_five=$((file_name_dot_index_minus_one\
    \ + 5))\n  local file_name_dot_index_minus_one_plus_six=$((file_name_dot_index_minus_one\
    \ + 6))\n  local file_name_dot_index_minus_one_plus_seven=$((file_name_dot_index_minus_one\
    \ + 7))\n  local file_name_dot_index_minus_one_plus_eight=$((file_name_dot_index_minus_one\
    \ + 8))\n  local file_name_dot_index_minus_one_plus_nine=$((file_name_dot_index_minus_one\
    \ + 9))\n  local file_name_dot_index_minus_one_plus_ten=$((file_name_dot_index_minus_one\
    \ + 10))\n  local file_name_dot_index_minus_one_plus_eleven=$((file_name_dot_index_minus_one\
    \ + 11))\n  local file_name_dot_index_minus_one_plus_twelve=$((file_name_dot_index_minus_one\
    \ + 12))\n  local file_name", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    # Write your code here\n    # Remove the following line and replace it with\
    \ your code.\n    echo \"Not implemented\"", "    # Write your code here\n   \
    \ # You can use the following command to check if a string is a valid file name:\n\
    \    # [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]\n    # It returns 0 if\
    \ the string is a valid file name, and 1 otherwise.\n    # You can use the following\
    \ command to check if a string contains exactly one dot:\n    # [[ $1 =~ ^[^.]+\\\
    .[^.]+$ ]]\n    # It returns 0 if the string contains exactly one dot, and 1 otherwise.\n\
    \    # You can use the following command to check if a string contains more than\
    \ three digits:\n    # [[ $1 =~ ^[^0-9]*[0-9]{4,} ]]\n    # It returns 0 if the\
    \ string contains more than three digits, and 1 otherwise.\n    # You can use\
    \ the following command to check if a string contains the substring 'txt':\n \
    \   # [[ $1 =~ txt ]]\n    # It returns 0 if the string contains the substring\
    \ 'txt', and 1 otherwise.\n    # You can use the following command to check if\
    \ a string contains the substring 'exe':\n    # [[ $1 =~ exe ]]\n    # It returns\
    \ 0 if the string contains the substring 'exe', and 1 otherwise.\n    # You can\
    \ use the following command to check if a string contains the substring 'dll':\n\
    \    # [[ $1 =~ dll ]]\n    # It returns 0 if the string contains the substring\
    \ 'dll', and 1 otherwise.\n    # You can use the following command to check if\
    \ a string starts with a letter from the latin alphapet:\n    # [[ $1 =~ ^[a-zA-Z]\
    \ ]]\n    # It returns 0 if the string starts with a letter from the latin alphapet,\
    \ and 1 otherwise.\n    # You can use the following command to check if a string\
    \ is empty:\n    # [[ -z $1 ]]\n    # It returns 0 if the string is empty, and\
    \ 1 otherwise.\n    # You can use the following command to check if a string is\
    \ not empty:\n    # [[ -n $1", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]];\
    \ then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ ]];\
    \ then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]];\
    \ then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    if\
    \ [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[ $1\
    \ =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n            echo \"\
    Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n        echo\
    \ \"No\"\n    fi", "    # TODO: Write your code here\n    # Check if the file\
    \ name contains more than 3 digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n      \
    \  echo \"No\"\n        return\n    fi\n\n    # Check if the file name contains\
    \ exactly one dot\n    if [[ $1 =~ \\. ]]; then\n        if [[ $1 =~ \\.{2} ]];\
    \ then\n            echo \"No\"\n            return\n        fi\n    else\n  \
    \      echo \"No\"\n        return\n    fi\n\n    # Check if the substring before\
    \ the dot is not empty and starts with a letter\n    if [[ $1 =~ ^[a-zA-Z] ]];\
    \ then\n        if [[ $1 =~ ^[a-zA-Z]\\. ]]; then\n            echo \"No\"\n \
    \           return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the substring after the dot is one of these: ['txt',\
    \ 'exe', 'dll']\n    if [[ $1 =~ \\.txt$ ]]; then\n        echo \"Yes\"\n    \
    \    return\n    elif [[ $1 =~ \\.exe$ ]]; then\n        echo \"Yes\"\n      \
    \  return\n    elif [[ $1 =~ \\.dll$ ]]; then\n        echo \"Yes\"\n        return\n\
    \    else\n        echo \"No\"\n        return\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write your code\
    \ here\n    # You can add/change any other variable names as long as the variables\n\
    \    # are named as specified in the question.\n    #\n    # You can write additional\
    \ functions as well.\n    #\n    # You can use any command line tool to help you\
    \ in solving this question.\n    #\n    # You can write additional functions as\
    \ well.\n    #\n    # You can use any command line tool to help you in solving\
    \ this question.\n    #\n    # You can write additional functions as well.\n \
    \   #\n    # You can use any command line tool to help you in solving this question.\n\
    \    #\n    # You can write additional functions as well.\n    #\n    # You can\
    \ use any command line tool to help you in solving this question.\n    #\n   \
    \ # You can write additional functions as well.\n    #\n    # You can use any\
    \ command line tool to help you in solving this question.\n    #\n    # You can\
    \ write additional functions as well.\n    #\n    # You can use any command line\
    \ tool to help you in solving this question.\n    #\n    # You can write additional\
    \ functions as well.\n    #\n    # You can use any command line tool to help you\
    \ in solving this question.\n    #\n    # You can write additional functions as\
    \ well.\n    #\n    # You can use any command line tool to help you in solving\
    \ this question.\n    #\n    # You can write additional functions as well.\n \
    \   #\n    # You can use any command line tool to help you in solving this question.\n\
    \    #\n    # You can write additional functions as well.\n    #\n    # You can\
    \ use any command line tool to help you in solving this question.\n    #\n   \
    \ # You can write additional functions as well.\n    #\n    # You can use any\
    \ command line tool to help you in solving this question.\n    #\n    # You can\
    \ write additional functions as well.\n    #\n    # You can use any command line\
    \ tool to help you in solving this question.\n    #\n    # You can write additional\
    \ functions as well.\n    #\n    # You can use any command line tool to help you\
    \ in solving this question.\n    #\n    # You can write additional functions as\
    \ well.\n    #\n    # You can", "    local file_name=$1\n    local file_name_len=${#file_name}\n\
    \    local file_name_no_ext=${file_name%.*}\n    local file_name_ext=${file_name##*.}\n\
    \    local file_name_no_ext_len=${#file_name_no_ext}\n    local file_name_ext_len=${#file_name_ext}\n\
    \    local file_name_no_ext_first_char=${file_name_no_ext:0:1}\n    local file_name_no_ext_first_char_ascii=$(printf\
    \ \"%d\" \"'$file_name_no_ext_first_char\")\n    local file_name_no_ext_first_char_ascii_lower_case=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_no_ext_first_char_ascii_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_no_ext_first_char_ascii_lower_case_end=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_no_ext_first_char_ascii_upper_case_end=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_no_ext_first_char_ascii_lower_case_range=$((file_name_no_ext_first_char_ascii_lower_case_end\
    \ - file_name_no_ext_first_char_ascii_lower_case + 1))\n    local file_name_no_ext_first_char_ascii_upper_case_range=$((file_name_no_ext_first_char_ascii_upper_case_end\
    \ - file_name_no_ext_first_char_ascii_upper_case + 1))\n    local file_name_no_ext_first_char_ascii_lower_case_start=$((file_name_no_ext_first_char_ascii_lower_case\
    \ - file_name_no_ext_first_char_ascii))\n    local file_name_no_ext_first_char_asci",
  "\t# Check if the file name contains more than 3 digits\n\tif [[ $1 =~ [0-9]{4}\
    \ ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# Check if the file name contains\
    \ exactly one dot\n\tif [[ $1 =~ \\. ]]; then\n\t\tif [[ $1 =~ \\.{2} ]]; then\n\
    \t\t\techo \"No\"\n\t\t\treturn\n\t\tfi\n\telse\n\t\techo \"No\"\n\t\treturn\n\
    \tfi\n\n\t# Check if the substring before the dot is empty\n\tif [[ $1 =~ ^\\\
    . ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# Check if the substring before\
    \ the dot starts with a letter\n\tif [[ $1 =~ ^[^a-zA-Z] ]]; then\n\t\techo \"\
    No\"\n\t\treturn\n\tfi\n\n\t# Check if the substring after the dot is one of the\
    \ allowed extensions\n\tif [[ $1 =~ \\.(txt|exe|dll)$ ]]; then\n\t\techo \"Yes\"\
    \n\t\treturn\n\tfi\n\n\techo \"No\"", "    # Write your code here\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    if\
    \ [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[ $1\
    \ =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]]; then\n        \
    \    echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    local file_name=$1\n    local file_extension=${file_name##*.}\n\
    \    local file_name_without_extension=${file_name%.*}\n    local file_name_without_extension_first_char=${file_name_without_extension:0:1}\n\
    \    local file_name_without_extension_first_char_ascii=$(printf \"%d\" \"'$file_name_without_extension_first_char\"\
    )\n    local file_name_without_extension_first_char_ascii_lower_bound=$(printf\
    \ \"%d\" \"'a\")\n    local file_name_without_extension_first_char_ascii_upper_bound=$(printf\
    \ \"%d\" \"'z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_upper_case=$(printf\
    \ \"%d\" \"'A\")\n    local file_name_without_extension_first_char_ascii_upper_bound_upper_case=$(printf\
    \ \"%d\" \"'Z\")\n    local file_name_without_extension_first_char_ascii_lower_bound_digit=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_ascii_upper_bound_digit=$(printf\
    \ \"%d\" \"'9\")\n    local file_name_without_extension_first_char_ascii_lower_bound_dot=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_upper_bound_dot=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_lower_bound_dot_upper_case=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_upper_bound_dot_upper_case=$(printf\
    \ \"%d\" \"'.\")\n    local file_name_without_extension_first_char_ascii_lower_bound_digit_upper_case=$(printf\
    \ \"%d\" \"'0\")\n    local file_name_without_extension_first_char_asci", "  \
    \  # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write your code\
    \ here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n", "    # Write your code here\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]]; then\n        echo\
    \ \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ ]]; then\n        echo\
    \ \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi", "    # Write your code\
    \ here\n    # Remove the following line and add your code here\n    echo \"Not\
    \ implemented yet\"", "    # Write your code here\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi", "    # Write your code here\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n",
  "    # write your code here\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]; then\n        if [[ ${BASH_REMATCH[1]} == \".txt\" ]] || [[ ${BASH_REMATCH[1]}\
    \ == \".exe\" ]] || [[ ${BASH_REMATCH[1]} == \".dll\" ]]; then\n            echo\
    \ \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n     \
    \   echo \"No\"\n    fi", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write your code\
    \ here\n    # You can use the following command to check if a string is a valid\
    \ file name:\n    # [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]\n    # It\
    \ returns 0 if the string is a valid file name, and 1 otherwise\n    # For example:\n\
    \    # >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$ ]]\n  \
    \  # 0\n    # >>> [[ \"1example.dll\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 1\n    # >>> [[ \"example.dll\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.exe\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]{3})$\
    \ ]]\n    # 0\n    # >>> [[ \"example.txt\" =~ ^[a-zA", "    # Write your code\
    \ here\n    # Remove the following line and replace it with your code\n    echo\
    \ \"No\"", "    # Write your code here\n    # Remove the following line and replace\
    \ it with your code\n    echo \"Not implemented\"", "    # Write your code here\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n",
  "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$ ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "    local file_name=\"$1\"\
    \n    local file_name_pattern=\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n \
    \   if [[ \"$file_name\" =~ $file_name_pattern ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi", "    # Write your code here\n    # You\
    \ can use the following command to check if a string is a valid file name:\n \
    \   # if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]; then\n    #     echo\
    \ \"Yes\"\n    # else\n    #     echo \"No\"\n    # fi\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi", "    # Write your code here\n    # You can use the following command\
    \ to check if the file's name is valid:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .[a-zA-Z]{3}$ ]] && echo \"Yes\" || echo \"No\"\n    #\n    # You can use the\
    \ following command to check if the file's name contains more than\n    # three\
    \ digits:\n    # [[ $1 =~ [0-9]{4} ]] && echo \"No\" || echo \"Yes\"\n    #\n\
    \    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[ $1 =~ \\. ]] && echo \"Yes\" || echo \"No\"\
    \n    #\n    # You can use the following command to check if the file's name contains\
    \ exactly one\n    # dot:\n    # [[", "    # Write your code here\n    # You can\
    \ use the following command to check if a string matches a regular expression:\n\
    \    # [[ $string =~ $regex ]]\n    # It returns 0 if the string matches the regex,\
    \ and 1 otherwise.\n    # For more information, run the following command:\n \
    \   # man bash | grep -A2 '=~'\n    #\n    # For example, the following command\
    \ checks if a string contains exactly one dot:\n    # [[ $string =~ ^[^.]*\\.[^.]*$\
    \ ]]\n    #\n    # You can use the following command to extract a substring from\
    \ a string:\n    # ${string:start:length}\n    # For more information, run the\
    \ following command:\n    # man bash | grep -A2 '${string:start:length}'\n   \
    \ #\n    # For example, the following command extracts the substring after the\
    \ first dot:\n    # ${string#*.}\n    #\n    # You can use the following command\
    \ to check if a string is empty:\n    # [ -z $string ]\n    # It returns 0 if\
    \ the string is empty, and 1 otherwise.\n    # For more information, run the following\
    \ command:\n    # man bash | grep -A2 '\\-z'\n    #\n    # For example, the following\
    \ command checks if a string is empty:\n    # [ -z $string ]\n    #\n    # You\
    \ can use the following command to check if a string contains only digits:\n \
    \   # [[ $string =~ ^[0-9]+$ ]]\n    # It returns 0 if the string contains only\
    \ digits, and 1 otherwise.\n    # For more information, run the following command:\n\
    \    # man bash | grep -A2 '=~'\n    #\n    # For example, the following command\
    \ checks if a string contains only digits:\n    # [[ $string =~ ^[0-9]+$ ]]\n\
    \    #\n    # You can use the following command to check if a string contains\
    \ only letters:\n    # [[ $string =~ ^[a-zA-Z]+$ ]]\n    # It returns 0 if the\
    \ string contains only letters, and 1 otherwise.\n    # For more information,\
    \ run the following command:\n    # man bash | grep -A2 '=~", "    # Write your\
    \ code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ [0-9]{4} ]]; then\n            echo\
    \ \"No\"\n        else\n            echo \"Yes\"\n        fi\n    else\n     \
    \   echo \"No\"\n    fi", "    # Write your code here\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ # Check if the file's name contains more than three digits\n    if [[ $1 =~\
    \ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check\
    \ if the file's name contains exactly one dot\n    if [[ $1 =~ [^.]+\\.[^.]+ ]];\
    \ then\n        # Check if the substring before the dot is not empty, and it starts\
    \ with a letter\n        if [[ $1 =~ ^[a-zA-Z]+\\.[^.]+ ]]; then\n           \
    \ # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \            if [[ $1 =~ \\.[txt|exe|dll]$ ]]; then\n                echo \"Yes\"\
    \n                return\n            fi\n        fi\n    fi\n\n    echo \"No\"",
  "    if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$ ]]; then\n \
    \       echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n        if [[\
    \ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]]; then\n            echo\
    \ \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n     \
    \   echo \"No\"\n    fi", "\t# TODO: Write your code here\n\t# Hint: You can use\
    \ the following command to check if a string matches a regular expression:\n\t\
    # [[ $string =~ $regex ]]\n\t# If the string matches the regex, the return value\
    \ is 0. Otherwise, the return value is 1.\n\t# For example:\n\t# >>> [[ \"example.txt\"\
    \ =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]]\n\t# 0\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]\n\t# 1\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]]\n\
    \t# 1\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]] && echo \"\
    Yes\" || echo \"No\"\n\t# Yes\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]] && echo \"Yes\" || echo \"No\"\n\t# No\n\t# >>> [[ \"example.txt\" =~\
    \ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]] && echo \"Yes\" || echo \"No\"\n\t# No\n\t# >>>\
    \ [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]] && echo \"Yes\" || echo\
    \ \"No\"\n\t# Yes\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ ]]\
    \ && echo \"Yes\" || echo \"No\"\n\t# No\n\t# >>> [[ \"example.txt\" =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]] && echo \"Yes\" || echo \"No\"\n\t# No\n\t# >>> [[ \"example.txt\" =~\
    \ ^[a-z", "    local file_name=$1\n    local file_name_len=${#file_name}\n   \
    \ local dot_index=0\n    local dot_count=0\n    local digit_count=0\n    local\
    \ i=0\n    local valid_extensions=(\"txt\" \"exe\" \"dll\")\n    local extension=\"\
    \"\n    local extension_len=0\n    local extension_index=0\n    local valid_extension=0\n\
    \    local valid_file_name=0\n    local valid_extension_len=0\n    local valid_extension_index=0\n\
    \    local valid_extension_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_extension_index_count=0\n\
    \    local valid_extension_len_count=0\n    local valid_", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    local file_name=$1\n   \
    \ local file_name_len=${#file_name}\n    local dot_index=0\n    local i=0\n  \
    \  local digits_count=0\n    local first_letter=0\n    local last_three_letters=0\n\
    \    local valid_extensions=(\"txt\" \"exe\" \"dll\")\n    local valid_extension=0\n\
    \    local valid_name=0\n\n    # Check if the file name contains exactly one dot\n\
    \    for ((i=0; i<file_name_len; i++)); do\n        if [[ ${file_name:$i:1} ==\
    \ \".\" ]]; then\n            if [[ $dot_index -eq 0 ]]; then\n              \
    \  dot_index=$i\n            else\n                echo \"No\"\n             \
    \   return\n            fi\n        fi\n    done\n\n    # Check if the file name\
    \ contains more than three digits\n    for ((i=0; i<file_name_len; i++)); do\n\
    \        if [[ ${file_name:$i:1} =~ [0-9] ]]; then\n            ((digits_count++))\n\
    \        fi\n    done\n    if [[ $digits_count -gt 3 ]]; then\n        echo \"\
    No\"\n        return\n    fi\n\n    # Check if the substring before the dot is\
    \ empty, and it starts with a letter from \n    # the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    first_letter=${file_name:0:1}\n    if [[ $dot_index -eq 0\
    \ ]] || [[ ! $first_letter =~ [a-zA-Z] ]]; then\n        echo \"No\"\n       \
    \ return\n    fi\n\n    # Check if the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n    last_three_letters=${file_name:$dot_index+1:3}\n\
    \    for extension in \"${valid_extensions[@]}\"; do\n        if [[ $last_three_letters\
    \ == $extension ]]; then\n            valid_extension=1\n            break\n \
    \       fi\n    done\n    if [[ $valid_extension -eq 0 ]]; then\n        echo\
    \ \"No", "    # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n", "    # TODO: Your code here\n    # Hint:\
    \ You can use the following command to check if a string is a valid\n    #   \
    \    file name:\n    #       $ touch \"$1\" 2> /dev/null\n    #       $ if [ $?\
    \ -eq 0 ]; then echo \"Yes\"; else echo \"No\"; fi\n    #       $ rm \"$1\" 2>\
    \ /dev/null\n    #       $? is the exit status of the last command.\n    #   \
    \    If the last command is successful, $? is 0.\n    #       If the last command\
    \ is not successful, $? is not 0.\n    #       The command 'touch' will create\
    \ a file with the name given as the\n    #       first argument.\n    #      \
    \ The command 'rm' will remove a file with the name given as the\n    #      \
    \ first argument.\n    #       The command '2> /dev/null' will redirect the standard\
    \ error to\n    #       /dev/null.\n    #       /dev/null is a special file that\
    \ discards all data written to it.\n    #       The command '2> /dev/null' will\
    \ make sure that the error message\n    #       will not be printed on the screen.\n\
    \    #       For more information about 'touch', 'rm', '2>', and '/dev/null',\n\
    \    #       please use 'man' to read the manual.\n    #       For example, 'man\
    \ touch' will show the manual of the command 'touch'.\n    #       You can exit\
    \ the manual by typing 'q'.\n    #       If you are not familiar with 'man', you\
    \ can use 'help' instead.\n    #       For example, 'help touch' will show the\
    \ help message of the command\n    #       'touch'.\n    #       You can exit\
    \ the help message by typing 'q'.\n    #       If you are not familiar with 'man'\
    \ or 'help', you can use Google\n    #       instead.\n    #       For example,\
    \ you can search 'linux touch command' on Google.\n    #       You can also search\
    \ 'linux rm command', 'linux 2> command', and\n    #       'linux /dev/null' on\
    \ Google.\n    #       You can also search 'linux exit status' on Google.\n  \
    \  #       You can also search", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]]\
    \ || [[ $1 =~ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n     \
    \       echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi", "   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    local file_name=$1\n    local valid_extensions=(\"\
    txt\" \"exe\" \"dll\")\n    local valid_extension=0\n    local valid_name=0\n\
    \    local valid_digits=0\n    local valid_dot=0\n    local valid_prefix=0\n \
    \   local valid_suffix=0\n    local valid_substring=0\n    local valid_substring_prefix=0\n\
    \    local valid_substring_suffix=0\n    local valid_substring_dot=0\n    local\
    \ valid_substring_prefix_letter=0\n    local valid_substring_suffix_extension=0\n\
    \    local valid_substring_prefix_length=0\n    local valid_substring_suffix_length=0\n\
    \    local valid_substring_prefix_length_max=0\n    local valid_substring_suffix_length_max=0\n\
    \    local valid_substring_prefix_length_min=0\n    local valid_substring_suffix_length_min=0\n\
    \    local valid_substring_prefix_length_max_value=0\n    local valid_substring_suffix_length_max_value=0\n\
    \    local valid_substring_prefix_length_min_value=0\n    local valid_substring_suffix_length_min_value=0\n\
    \    local valid_substring_prefix_length_value=0\n    local valid_substring_suffix_length_value=0\n\
    \    local valid_substring_prefix_length_value_max=0\n    local valid_substring_suffix_length_value_max=0\n\
    \    local valid_substring_prefix_length_value_min=0\n    local valid_substring_suffix_length_value_min=0\n\
    \    local valid_substring_prefix_length_value_max_value=0\n    local valid_substring_suffix_length_value_max_value=0\n\
    \    local valid_substring_prefix_length_value_min_value=0\n    local valid_substring_suffix_length_value_min_value=0\n\
    \    local valid_substring_prefix_length_value_max_value_value=0\n    local valid_sub",
  "\tif [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,2}[.][txt|exe|dll]$ ]]; then\n\t\techo\
    \ \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "    # Write your code here\n    #\n\
    \    # Hint:\n    # - Use the following command to check if a string contains\
    \ a substring:\n    #   [[ $string == *$substring* ]]\n    # - Use the following\
    \ command to check if a string starts with a substring:\n    #   [[ $string ==\
    \ $substring* ]]\n    # - Use the following command to check if a string ends\
    \ with a substring:\n    #   [[ $string == *$substring ]]\n    # - Use the following\
    \ command to check if a string contains only digits:\n    #   [[ $string =~ ^[0-9]+$\
    \ ]]\n    # - Use the following command to check if a string contains only letters:\n\
    \    #   [[ $string =~ ^[a-zA-Z]+$ ]]\n    # - Use the following command to check\
    \ if a string contains only letters and digits:\n    #   [[ $string =~ ^[a-zA-Z0-9]+$\
    \ ]]\n    # - Use the following command to check if a string contains only letters\
    \ and digits and underscores:\n    #   [[ $string =~ ^[a-zA-Z0-9_]+$ ]]\n    #\
    \ - Use the following command to check if a string contains only letters and digits\
    \ and underscores and dashes:\n    #   [[ $string =~ ^[a-zA-Z0-9_-]+$ ]]\n   \
    \ # - Use the following command to check if a string contains only letters and\
    \ digits and underscores and dashes and dots:\n    #   [[ $string =~ ^[a-zA-Z0-9_.-]+$\
    \ ]]\n    # - Use the following command to check if a string contains only letters\
    \ and digits and underscores and dashes and dots and slashes:\n    #   [[ $string\
    \ =~ ^[a-zA-Z0-9_.-/]+$ ]]\n    # - Use the following command to check if a string\
    \ contains only letters and digits and underscores and dashes and dots and slashes\
    \ and backslashes:\n    #   [[ $string =~ ^[a-zA-Z0-9_.-/\\\\]+$ ]]\n    # - Use\
    \ the following command to check if a string contains only letters and", "   \
    \ # Write your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n\t\tif [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[\
    \ $1 =~ \\.dll$ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\t\
    fi\n\telse\n\t\techo \"No\"\n\tfi", "    # Write your code here\n    # ...\n \
    \   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "    # Write\
    \ your code here\n    # You can use the following command to check if a string\
    \ is a valid file name:\n    # [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$ ]]\n\
    \    # This command returns 0 if the string is a valid file name, and 1 otherwise.\n\
    \    # You can use the following command to check if a string contains more than\
    \ three digits:\n    # [[ $1 =~ [0-9]{4} ]]\n    # This command returns 0 if the\
    \ string contains more than three digits, and 1 otherwise.\n    # You can use\
    \ the following command to check if a string contains exactly one dot:\n    #\
    \ [[ $1 =~ ^[^.]*\\.[^.]*$ ]]\n    # This command returns 0 if the string contains\
    \ exactly one dot, and 1 otherwise.\n    # You can use the following command to\
    \ check if a string contains a substring:\n    # [[ $1 =~ $2 ]]\n    # This command\
    \ returns 0 if the string contains the substring, and 1 otherwise.\n    # You\
    \ can use the following command to get the substring before the first dot:\n \
    \   # ${1%%.*}\n    # You can use the following command to get the substring after\
    \ the first dot:\n    # ${1#*.}\n    # You can use the following command to get\
    \ the length of a string:\n    # ${#1}\n    # You can use the following command\
    \ to get the first character of a string:\n    # ${1:0:1}\n    # You can use the\
    \ following command to get the substring of a string:\n    # ${1:$2:$3}\n    #\
    \ The first argument is the string, the second argument is the starting index,\
    \ and the third argument is the length.\n    # You can use the following command\
    \ to convert a string to lower case:\n    # ${1,,}\n    # You can use the following\
    \ command to convert a string to upper case:\n    # ${1^^}\n    # You can use\
    \ the following command to convert a string to an array:\n    # read -a array\
    \ <<< $1\n    # You can use the following command to get the length of an array",
  "    # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n", "    # Check if the file's name contains more than three\
    \ digits\n    if [[ $1 =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file's name contains exactly one dot\n    if [[\
    \ $1 =~ \\. ]]; then\n        if [[ $1 =~ \\.{2} ]]; then\n            echo \"\
    No\"\n            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the substring before the dot is empty or not\n    if\
    \ [[ $1 =~ ^[a-zA-Z] ]]; then\n        if [[ $1 =~ ^[a-zA-Z]\\.[a-zA-Z]{3}$ ]];\
    \ then\n            if [[ $1 =~ \\.txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~\
    \ \\.dll$ ]]; then\n                echo \"Yes\"\n                return\n   \
    \         fi\n        fi\n    fi\n\n    echo \"No\"", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\
    \ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$ ]];\
    \ then\n            echo \"Yes\"\n        else\n            echo \"No\"\n    \
    \    fi\n    else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[a-zA-Z]{3}$ ]]; then\n        if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\
    \ ]]; then\n            echo \"Yes\"\n        else\n            echo \"No\"\n\
    \        fi\n    else\n        echo \"No\"\n    fi"]
stop_tokens:
- "\n}"
