name: HumanEval_146_specialFilter
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an array of numbers as input and\
  \ returns \n# the number of elements in the array that are greater than 10 and both\
  \ \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n\
  # >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2\
  \ -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n"
tests: "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\"\
  ) = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate\
  \ \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\"\
  ) = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"\
  0\" ]]\n}\n\nrun_test"
completions: ["    local -a nums=($1)\n    local count=0\n    for num in ${nums[@]};\
    \ do\n        if [[ $num -gt 10 ]]; then\n            if [[ $(($num%10)) -eq 1\
    \ ]] || [[ $(($num%10)) -eq 3 ]] || [[ $(($num%10)) -eq 5 ]] || [[ $(($num%10))\
    \ -eq 7 ]] || [[ $(($num%10)) -eq 9 ]]; then\n                if [[ $(($num/10))\
    \ -eq 1 ]] || [[ $(($num/10)) -eq 3 ]] || [[ $(($num/10)) -eq 5 ]] || [[ $(($num/10))\
    \ -eq 7 ]] || [[ $(($num/10)) -eq 9 ]]; then\n                    count=$(($count+1))\n\
    \                fi\n            fi\n        fi\n    done\n    echo $count", " \
    \   local -a array=($1)\n    local count=0\n    for i in ${array[@]}; do\n   \
    \     if [ $i -gt 10 ]; then\n            local first=$(echo $i | cut -c1)\n \
    \           local last=$(echo $i | cut -c${#i})\n            if [ $first -gt 1\
    \ ] && [ $first -lt 9 ] && [ $last -gt 1 ] && [ $last -lt 9 ]; then\n        \
    \        count=$((count+1))\n            fi\n        fi\n    done\n    echo $count",
  "    local -a arr=(\"$@\")\n    local count=0\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -gt 10 ]]; then\n            local first=${i:0:1}\n        \
    \    local last=${i: -1}\n            if [[ $first -gt 1 && $first -lt 9 && $last\
    \ -gt 1 && $last -lt 9 ]]; then\n                ((count++))\n            fi\n\
    \        fi\n    done\n    echo \"$count\"", "\tlocal -a array=($1)\n\tlocal count=0\n\
    \tfor i in ${array[@]}; do\n\t\tif [[ $i -gt 10 ]]; then\n\t\t\tlocal first=${i:0:1}\n\
    \t\t\tlocal last=${i: -1}\n\t\t\tif [[ $first -eq 1 || $first -eq 3 || $first\
    \ -eq 5 || $first -eq 7 || $first -eq 9 ]] && [[ $last -eq 1 || $last -eq 3 ||\
    \ $last -eq 5 || $last -eq 7 || $last -eq 9 ]]; then\n\t\t\t\tcount=$((count+1))\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\techo $count", "    local -a array=($1)\n    local\
    \ -i count=0\n    for i in ${array[@]}; do\n        if [[ $i -gt 10 ]]; then\n\
    \            if [[ ${i:0:1} -eq 1 || ${i:0:1} -eq 3 || ${i:0:1} -eq 5 || ${i:0:1}\
    \ -eq 7 || ${i:0:1} -eq 9 ]]; then\n                if [[ ${i: -1} -eq 1 || ${i:\
    \ -1} -eq 3 || ${i: -1} -eq 5 || ${i: -1} -eq 7 || ${i: -1} -eq 9 ]]; then\n \
    \                   count=$((count+1))\n                fi\n            fi\n \
    \       fi\n    done\n    echo $count", "    local -a arr=($1)\n    local count=0\n\
    \    for i in ${arr[@]}; do\n        if [ $i -gt 10 ]; then\n            if [\
    \ $(($i % 2)) -eq 1 ] && [ $((${i:0:1} % 2)) -eq 1 ]; then\n                count=$(($count\
    \ + 1))\n            fi\n        fi\n    done\n    echo $count", "    local -a\
    \ arr=(\"$@\")\n    local -i count=0\n    for i in \"${arr[@]}\"; do\n       \
    \ if [[ $i -gt 10 ]] && [[ $(($i%10)) -gt 0 ]] && [[ $(($i/10)) -gt 0 ]] && [[\
    \ $(($i%10))%2 -gt 0 ]] && [[ $(($i/10))%2 -gt 0 ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo \"$count\"", "    local -a array=($1)\n    local\
    \ count=0\n    for i in ${array[@]}; do\n        if [ $i -gt 10 ] && [ $(($i %\
    \ 2)) -eq 1 ] && [ $((${i:0:1} % 2)) -eq 1 ] && [ $((${i: -1} % 2)) -eq 1 ]; then\n\
    \            count=$(($count + 1))\n        fi\n    done\n    echo $count", " \
    \   local -i count=0\n    for i in $1; do\n        if (( i > 10 )); then\n   \
    \         if (( (i/10)%2 != 0 )) && (( i%2 != 0 )); then\n                (( count++\
    \ ))\n            fi\n        fi\n    done\n    echo $count", "    local -a array=($1)\n\
    \    local count=0\n    for i in ${array[@]}; do\n        if [ $i -gt 10 ]; then\n\
    \            if [ $(($i % 2)) -ne 0 ]; then\n                if [ $((${i: -1}\
    \ % 2)) -ne 0 ]; then\n                    count=$(($count + 1))\n           \
    \     fi\n            fi\n        fi\n    done\n    echo $count", "    local -i\
    \ count=0\n    for i in $1; do\n        if [[ $i -gt 10 ]] && [[ $(($i % 2)) -eq\
    \ 1 ]] && [[ $((${i:0:1} % 2)) -eq 1 ]] && [[ $((${i: -1} % 2)) -eq 1 ]]; then\n\
    \            ((count++))\n        fi\n    done\n    echo $count", "    local -a\
    \ arr=($1)\n    local count=0\n    for i in ${arr[@]}; do\n        if [[ $i -gt\
    \ 10 ]]; then\n            if [[ $(($i%10)) -eq 1 ]] || [[ $(($i%10)) -eq 3 ]]\
    \ || [[ $(($i%10)) -eq 5 ]] || [[ $(($i%10)) -eq 7 ]] || [[ $(($i%10)) -eq 9 ]];\
    \ then\n                count=$(($count+1))\n            fi\n        fi\n    done\n\
    \    echo $count", "    # Write your code here\n    echo \"1\"", "    local -a\
    \ arr=(\"$@\")\n    local count=0\n    for i in \"${arr[@]}\"; do\n        if\
    \ [[ $i -gt 10 ]]; then\n            if [[ $i =~ ^[13579] ]] && [[ $i =~ [13579]$\
    \ ]]; then\n                ((count++))\n            fi\n        fi\n    done\n\
    \    echo \"$count\"", "    local -a arr=($1)\n    local count=0\n    for i in\
    \ ${arr[@]}; do\n        if [[ $i -gt 10 ]]; then\n            if [[ $((i%10))\
    \ -eq 1 ]] || [[ $((i%10)) -eq 3 ]] || [[ $((i%10)) -eq 5 ]] || [[ $((i%10)) -eq\
    \ 7 ]] || [[ $((i%10)) -eq 9 ]]; then\n                if [[ $((i/10)) -eq 1 ]]\
    \ || [[ $((i/10)) -eq 3 ]] || [[ $((i/10)) -eq 5 ]] || [[ $((i/10)) -eq 7 ]] ||\
    \ [[ $((i/10)) -eq 9 ]]; then\n                    ((count++))\n             \
    \   fi\n            fi\n        fi\n    done\n    echo $count", "    echo $1 |\
    \ tr ' ' '\\n' | grep -E '^[13579][0-9]*[13579]$' | grep -E '[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*[0-9]*",
  "    # TODO: write your code here\n    # You can use the following command to get\
    \ the first digit of a number:\n    # firstDigit=$(echo $number | cut -c 1)\n\
    \    # You can use the following command to get the last digit of a number:\n\
    \    # lastDigit=$(echo $number | cut -c $((${#number})))\n    # You can use the\
    \ following command to check if a number is odd:\n    # if [[ $((number % 2))\
    \ -eq 1 ]]; then\n    #     echo \"odd\"\n    # fi\n    # You can use the following\
    \ command to check if a number is greater than 10:\n    # if [[ $number -gt 10\
    \ ]]; then\n    #     echo \"greater than 10\"\n    # fi\n    # You can use the\
    \ following command to check if a number is greater than 10 and odd:\n    # if\
    \ [[ $number -gt 10 && $((number % 2)) -eq 1 ]]; then\n    #     echo \"greater\
    \ than 10 and odd\"\n    # fi\n    # You can use the following command to check\
    \ if a number is greater than 10 and both first and last digits are odd:\n   \
    \ # if [[ $number -gt 10 && $((number % 2)) -eq 1 && $((firstDigit % 2)) -eq 1\
    \ && $((lastDigit % 2)) -eq 1 ]]; then\n    #     echo \"greater than 10 and both\
    \ first and last digits are odd\"\n    # fi\n    # You can use the following command\
    \ to check if a number is greater than 10 and both first and last digits are odd:\n\
    \    # if [[ $number -gt 10 && $((number % 2)) -eq 1 && $((firstDigit % 2)) -eq\
    \ 1 && $((lastDigit % 2)) -eq 1 ]]; then\n    #     echo \"greater than 10 and\
    \ both first and last digits are odd\"\n    # fi\n    # You can use the following\
    \ command to check if a number is greater than 10 and both first and last digits\
    \ are odd:\n    # if [[ $number -gt 10 && $((number % 2)) -eq 1 && $((firstDigit\
    \ % 2)) -eq 1 && $((lastDigit % 2)) -eq 1 ]]; then\n    #     echo", "    local\
    \ -a array=($1)\n    local count=0\n    for i in ${array[@]}; do\n        if [[\
    \ $i -gt 10 ]]; then\n            local first=${i:0:1}\n            local last=${i:\
    \ -1}\n            if [[ $first%2 -ne 0 && $last%2 -ne 0 ]]; then\n          \
    \      ((count++))\n            fi\n        fi\n    done\n    echo $count", " \
    \   local -a arr=($1)\n    local count=0\n    for i in ${arr[@]}; do\n       \
    \ if [[ $i -gt 10 ]]; then\n            local first=$(echo $i | cut -c1)\n   \
    \         local last=$(echo $i | cut -c${#i})\n            if [[ $first -gt 1\
    \ && $first -lt 9 && $last -gt 1 && $last -lt 9 ]]; then\n                ((count++))\n\
    \            fi\n        fi\n    done\n    echo $count", "    # TODO: implement\
    \ this function\n    # Hint: use the following command to get the first digit\
    \ of a number:\n    # echo $number | cut -c 1\n    # Hint: use the following command\
    \ to get the last digit of a number:\n    # echo $number | cut -c -1\n    # Hint:\
    \ use the following command to get the length of a number:\n    # echo $number\
    \ | wc -c\n    # Hint: use the following command to check if a number is odd:\n\
    \    # echo $(( $number % 2 ))\n    # Hint: use the following command to check\
    \ if a number is greater than 10:\n    # [[ $number -gt 10 ]]\n    # Hint: use\
    \ the following command to check if a number is less than 10:\n    # [[ $number\
    \ -lt 10 ]]\n    # Hint: use the following command to check if a number is equal\
    \ to 10:\n    # [[ $number -eq 10 ]]\n    # Hint: use the following command to\
    \ check if a number is not equal to 10:\n    # [[ $number -ne 10 ]]\n    # Hint:\
    \ use the following command to check if a number is greater than or equal to 10:\n\
    \    # [[ $number -ge 10 ]]\n    # Hint: use the following command to check if\
    \ a number is less than or equal to 10:\n    # [[ $number -le 10 ]]\n    # Hint:\
    \ use the following command to check if a number is greater than 10 and less than\
    \ 20:\n    # [[ $number -gt 10 && $number -lt 20 ]]\n    # Hint: use the following\
    \ command to check if a number is greater than 10 or less than 20:\n    # [[ $number\
    \ -gt 10 || $number -lt 20 ]]\n    # Hint: use the following command to check\
    \ if a number is greater than 10 and less than 20 and equal to 15:\n    # [[ $number\
    \ -gt 10 && $number -lt 20 && $number -eq 15 ]]\n    # Hint: use the following\
    \ command to check if a number is greater than 10 or less than 20 or equal to\
    \ 15:\n    # [[ $number -gt 10 || $number -lt 20 || $number -eq 15 ]]\n    # Hint:\
    \ use"]
stop_tokens:
- "\n}"
