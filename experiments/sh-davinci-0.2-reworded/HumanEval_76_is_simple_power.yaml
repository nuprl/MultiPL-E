name: HumanEval_76_is_simple_power
language: sh
prompt: "#!/bin/bash\n# Your task is to write a function that returns true if a number\
  \ x is a simple\n# power of n and false in other cases.\n# x is a simple power of\
  \ n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# true\n\
  # >>> $(is_simple_power \"2\" \"2\")\n# true\n# >>> $(is_simple_power \"8\" \"2\"\
  )\n# true\n# >>> $(is_simple_power \"3\" \"2\")\n# false\n# >>> $(is_simple_power\
  \ \"3\" \"1\")\n# false\n# >>> $(is_simple_power \"5\" \"3\")\n# false\n#\n# $1\
  \ is an integer\n# $2 is an integer\nis_simple_power() {\n"
tests: "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
  16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
  \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n \
  \   [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\"\
  ) = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\
  \nrun_test"
completions: ["  if [ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n\
    \    echo true\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
    \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n\
    \  else\n    echo false\n  fi", "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif\
    \ [[ $1 -eq $2 ]]; then\n    echo true\n  elif [[ $1 -eq $(( $2 * $2 )) ]]; then\n\
    \    echo true\n  else\n    echo false\n  fi", "  if [ $1 -eq $2 ]; then\n   \
    \ echo true\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n\
    \      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n\
    \  else\n    echo false\n  fi", "    if [ $1 -eq $2 ]\n    then\n        echo\
    \ true\n    elif [ $1 -eq 1 ]\n    then\n        echo false\n    elif [ $1 -eq\
    \ 0 ]\n    then\n        echo false\n    elif [ $1 -lt $2 ]\n    then\n      \
    \  echo false\n    elif [ $(( $1 % $2 )) -eq 0 ]\n    then\n        is_simple_power\
    \ $(( $1 / $2 )) $2\n    else\n        echo false\n    fi", "  if [[ $1 -eq 1\
    \ ]]; then\n    echo \"true\"\n  elif [[ $1 -eq $2 ]]; then\n    echo \"true\"\
    \n  elif [[ $1 -gt $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]]; then\n    \
    \  is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n\
    \  else\n    echo \"false\"\n  fi", "  if [[ $1 -eq 1 ]]; then\n    echo true\n\
    \  elif [[ $1 -eq $2 ]]; then\n    echo true\n  elif [[ $1 -gt $2 ]]; then\n \
    \   if [[ $(( $1 % $2 )) -eq 0 ]]; then\n      is_simple_power $(( $1 / $2 ))\
    \ $2\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi", "   \
    \ if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n   \
    \     echo true\n    elif [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2))\
    \ $2\n    else\n        echo false\n    fi", "  # Write your code here\n  # $1\
    \ is an integer\n  # $2 is an integer\n  if [ $1 -eq $2 ]; then\n    echo \"true\"\
    \n  elif [ $1 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1 -eq 1 ]; then\n \
    \   echo \"false\"\n  elif [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n \
    \   is_simple_power $(($1/$2)) $2\n  fi", "  if [[ $1 -eq 1 ]]; then\n    echo\
    \ \"true\"\n  elif [[ $1 -eq $2 ]]; then\n    echo \"true\"\n  elif [[ $1 -gt\
    \ $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]]; then\n      is_simple_power\
    \ $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi", "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif [[ $1 -eq\
    \ $2 ]]; then\n    echo true\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $1%$2 -eq\
    \ 0 ]]; then\n      is_simple_power $(( $1/$2 )) $2\n    else\n      echo false\n\
    \    fi\n  else\n    echo false\n  fi", "    if [ $1 -eq 1 ]; then\n        echo\
    \ true\n    elif [ $1 -eq $2 ]; then\n        echo true\n    elif [ $1 -eq $(($2\
    \ * $2)) ]; then\n        echo true\n    else\n        echo false\n    fi", " \
    \ if [ $1 -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  if [ $1 -eq 1\
    \ ]; then\n    echo \"true\"\n    return\n  fi\n  if [ $2 -eq 0 ]; then\n    echo\
    \ \"false\"\n    return\n  fi\n  if [ $2 -eq 1 ]; then\n    echo \"true\"\n  \
    \  return\n  fi\n  if [ $1 -eq $2 ]; then\n    echo \"true\"\n    return\n  fi\n\
    \  if [ $1 -lt $2 ]; then\n    echo \"false\"\n    return\n  fi\n  if [ $1 -gt\
    \ $2 ]; then\n    if [ $1 -eq $(( $2 * $2 )) ]; then\n      echo \"true\"\n  \
    \    return\n    fi\n    if [ $1 -gt $(( $2 * $2 )) ]; then\n      if [ $1 -eq\
    \ $(( $2 * $2 * $2 )) ]; then\n        echo \"true\"\n        return\n      fi\n\
    \      if [ $1 -gt $(( $2 * $2 * $2 )) ]; then\n        if [ $1 -eq $(( $2 * $2\
    \ * $2 * $2 )) ]; then\n          echo \"true\"\n          return\n        fi\n\
    \        if [ $1 -gt $(( $2 * $2 * $2 * $2 )) ]; then\n          if [ $1 -eq $((\
    \ $2 * $2 * $2 * $2 * $2 )) ]; then\n            echo \"true\"\n            return\n\
    \          fi\n          if [ $1 -gt $(( $2 * $2 * $2 * $2 * $2 )) ]; then\n \
    \           if [ $1 -eq $(( $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n         \
    \     echo \"true\"\n              return\n            fi\n            if [ $1\
    \ -gt $(( $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n              if [ $1 -eq $((\
    \ $2 * $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n                echo \"true\"\n\
    \                return\n              fi\n              if [ $1 -gt $(( $2 *\
    \ $2", "    if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ];\
    \ then\n        echo true\n    elif [ $1 -lt $2 ]; then\n        echo false\n\
    \    else\n        is_simple_power $(($1/$2)) $2\n    fi", "  if [ $1 -eq 1 ];\
    \ then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif\
    \ [ $1 -lt $2 ]; then\n    echo \"false\"\n  else\n    is_simple_power $(($1/$2))\
    \ $2\n  fi", "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ];\
    \ then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(($1 % $2)) -eq\
    \ 0 ]; then\n      is_simple_power $(($1 / $2)) $2\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi", "    if [ $1 -eq 1 ]; then\n    \
    \    echo \"true\"\n    elif [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif\
    \ [ $1 -gt $2 ]; then\n        is_simple_power $(($1/$2)) $2\n    else\n     \
    \   echo \"false\"\n    fi", "    if [ $1 -eq 1 ]; then\n        echo true\n \
    \   elif [ $1 -eq $2 ]; then\n        echo true\n    elif [ $1 -gt $2 ]; then\n\
    \        is_simple_power $(( $1 / $2 )) $2\n    else\n        echo false\n   \
    \ fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x $n\" | awk\
    \ '{print ($1**(1/$2))}')\n    if [[ $result =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"\
    $result\" | awk '{printf(\"%d\\n\",$1 + 0.5)}')\n  if [ \"$result\" == \"$int_result\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    if [ $1\
    \ -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n        echo\
    \ true\n    elif [ $1 -lt $2 ]; then\n        echo false\n    else\n        is_simple_power\
    \ $(($1/$2)) $2\n    fi"]
stop_tokens:
- "\n}"
