language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers\n  local -a names\n  local -a sorted\n  local\
    \ -a reversed\n  local -a final\n  local -i i\n  local -i j\n  local -i k\n  local\
    \ -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n\
    \  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local\
    \ -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n\
    \  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local\
    \ -i h\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i\
    \ mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n\
    \  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n \
    \ local -i xx\n  local -i yy\n  local -i zz\n  local -i aa\n  local -i bb\n  local\
    \ -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i\
    \ hh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local\
    \ -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local\
    \ -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local -i vvv\n  local\
    \ -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local -i aaa\n  local\
    \ -i bbb\n  local\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local i=0\n  for i in $1; do\n\
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n      array+=($i)\n    fi\n  done\n\
    \  sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n  reversed=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | tac))\n  for i in ${reversed[@]}; do\n    result+=(${numbers[$i-1]})\n\
    \  done\n  echo \"[$(printf '\"%s\", ' \"${result[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        case $i in\n            1|2|3|4|5|6|7|8|9) arr+=($i)\
    \ ;;\n        esac\n    done\n    local -a res=()\n    for i in $(echo ${arr[@]}\
    \ | tr ' ' '\\n' | sort -n -r); do\n        case $i in\n            1) res+='\"\
    One\"' ;;\n            2) res+='\"Two\"' ;;\n            3) res+='\"Three\"' ;;\n\
    \            4) res+='\"Four\"' ;;\n            5) res+='\"Five\"' ;;\n      \
    \      6) res+='\"Six\"' ;;\n            7) res+='\"Seven\"' ;;\n            8)\
    \ res+='\"Eight\"' ;;\n            9) res+='\"Nine\"' ;;\n        esac\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]];\
    \ then\n            res+=(${nums[$i-1]})\n        fi\n    done\n    echo $(echo\
    \ ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' ')\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a res\n  local -a nums\n  local -a names\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i p\n  local -i q\n\
    \  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local\
    \ -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n\
    \  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local\
    \ -i h\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i\
    \ mm\n  local -i nn\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i ss\n\
    \  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n \
    \ local -i yy\n  local -i zz\n  local -i aa\n  local -i bb\n  local -i cc\n  local\
    \ -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n  local -i\
    \ iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n  local\
    \ -i nnn\n  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local\
    \ -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local\
    \ -i yyy\n  local -i zzz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n  local\
    \ -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local -i\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n  \
    \  local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n  \
    \  local -a tmp8\n    local -a tmp9\n    local -a tmp10\n    local -a tmp11\n\
    \    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n    local -a tmp15\n\
    \    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n    local -a tmp19\n\
    \    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n    local -a tmp23\n\
    \    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n    local -a tmp27\n\
    \    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n    local -a tmp31\n\
    \    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n    local -a tmp35\n\
    \    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n    local -a tmp39\n\
    \    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n    local -a tmp43\n\
    \    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n    local -a tmp47\n\
    \    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n    local -a tmp51\n\
    \    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n    local -a tmp55\n\
    \    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n    local -a tmp59\n\
    \    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n    local -a tmp63\n\
    \    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n    local -a tmp67\n\
    \    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n    local -a tmp71\n\
    \    local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local i\n    for i in $1; do\n        if [[ $i -ge 1 && $i -le 9\
    \ ]]; then\n            arr+=($i)\n        fi\n    done\n    if [[ ${#arr[@]}\
    \ -eq 0 ]]; then\n        echo \"[]\"\n    else\n        for i in $(seq 0 $((${#arr[@]}\
    \ - 1)) | sort -r); do\n            res+=(${nums[${arr[$i]} - 1]})\n        done\n\
    \        echo \"[$(IFS=,; echo \"${res[*]}\")]\"\n    fi\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n\
    \    fi\n  done\n  echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\")\n        fi\n   \
    \ done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: Your code here\n\
    \  echo \"Not yet implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: Your code here\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\" [\"3\"]=\"Three\" [\"4\"]=\"Four\" [\"5\"]=\"\
    Five\" [\"6\"]=\"Six\" [\"7\"]=\"Seven\" [\"8\"]=\"Eight\" [\"9\"]=\"Nine\" )\n\
    \  # Hint: You can use the following associative array:\n  # declare -A numbers=(\
    \ [\"1\"]=\"One\" [\"2\"]=\"Two\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyt__ut68.sh: line 32: syntax error near unexpected token `}''

    /tmp/tmpyt__ut68.sh: line 32: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local\
    \ -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local\
    \ -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local number\n  for number in \"${array[@]}\"; do\n    if [[ $number\
    \ =~ ^[1-9]$ ]]; then\n      result+=($number)\n    fi\n  done\n  if [[ ${#result[@]}\
    \ -gt 0 ]]; then\n    result=($(printf \"%s\\n\" \"${result[@]}\" | sort -n))\n\
    \    result=($(printf \"%s\\n\" \"${result[@]}\" | tac))\n    for (( i=0; i<${#result[@]};\
    \ i++ )); do\n      result[$i]=${numbers[${result[$i]}-1]}\n    done\n  fi\n \
    \ printf '[\"%s\"]' \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=()\n\
    \    local -a result=()\n    local -a numbers=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in $1; do\n      \
    \  if [ $i -ge 1 ] && [ $i -le 9 ]; then\n            array+=(\"$i\")\n      \
    \  fi\n    done\n    for i in $(echo ${array[@]} | tr \" \" \"\\n\" | sort -rn);\
    \ do\n        result+=(\"${numbers[$i-1]}\")\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(${nums[$i-1]})\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' |\
    \ sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n\
    \    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ names=()\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            sorted+=($i)\n        fi\n    done\n    if [[ ${#sorted[@]}\
    \ -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n    sorted=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for j in \"${sorted[@]}\"; do\n\
    \        reversed=($j \"${reversed[@]}\")\n    done\n    for k in \"${reversed[@]}\"\
    ; do\n        names+=(${numbers[$k-1]})\n    done\n    for l in \"${names[@]}\"\
    ; do\n        result+=(\\\"$l\\\")\n    done\n    echo [${result[@]}]\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a arr_sorted=()\n    local -a arr_reversed=()\n    local -a arr_final=()\n\
    \    local -a arr_final_str=()\n    local -a arr_final_str_quoted=()\n    local\
    \ -a arr_final_str_quoted_joined=()\n    local -a arr_final_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted=()\n    local -a arr_final_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str=()\n    local\
    \ -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted=()\n    local -a\
    \ arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n    local\
    \ -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_index=(1 2 3 4 5 6 7 8 9)\n  local -a nums_index_rev=(9 8 7 6 5 4 3 2 1)\n\
    \  local -a nums_index_rev_str=()\n  local -a nums_index_str=()\n  local -a nums_rev_str=()\n\
    \  local -a nums_str=()\n  local -a nums_str_rev=()\n  local -a nums_str_rev_index=()\n\
    \  local -a nums_str_index=()\n  local -a nums_str_index_rev=()\n  local -a nums_str_index_rev_str=()\n\
    \  local -a nums_str_index_str=()\n  local -a nums_str_rev_index_str=()\n  local\
    \ -a nums_str_rev_str=()\n  local -a nums_str_rev_str_index=()\n  local -a nums_str_rev_str_index_rev=()\n\
    \  local -a nums_str_rev_str_index_rev_str=()\n  local -a nums_str_rev_str_index_str=()\n\
    \  local -a nums_str_rev_str_str=()\n  local -a nums_str_str=()\n  local -a nums_str_str_index=()\n\
    \  local -a nums_str_str_index_rev=()\n  local -a nums_str_str_index_rev_str=()\n\
    \  local -a nums_str_str_index_str=()\n  local -a nums_str_str_rev=()\n  local\
    \ -a nums_str_str_rev_index=()\n  local -a nums_str_str_rev_index_rev=()\n  local\
    \ -a nums_str_str_rev_index_rev_str\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a arr_sorted=()\n  local -a arr_reversed=()\n  local -a arr_mapped=()\n  local\
    \ -a arr_filtered=()\n  local -a arr_sorted_filtered=()\n  local -a arr_reversed_filtered=()\n\
    \  local -a arr_mapped_filtered=()\n  local -a arr_sorted_filtered_mapped=()\n\
    \  local -a arr_reversed_filtered_mapped=()\n  local -a arr_sorted_filtered_mapped_reversed=()\n\
    \  local -a arr_reversed_filtered_mapped_reversed=()\n  local -a arr_sorted_filtered_mapped_reversed_reversed=()\n\
    \  local -a arr_reversed_filtered_mapped_reversed_reversed=()\n  local -a arr_sorted_filtered_mapped_reversed_reversed_reversed=()\n\
    \  local -a arr_reversed_filtered_mapped_reversed_reversed_reversed=()\n  local\
    \ -a arr_sorted_filtered_mapped_reversed_reversed_reversed_reversed=()\n  local\
    \ -a arr_reversed_filtered_mapped_reversed_reversed_reversed_reversed=()\n  local\
    \ -a arr_sorted_filtered_mapped_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a arr_reversed_filtered_mapped_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a arr_sorted_filtered_mapped_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local -a arr_reversed_filtered_mapped_reversed_reversed_reversed_reversed_reversed_reversed=()\n\
    \  local\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    for i in ${arr[@]}; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            res+=(${nums[$i-1]})\n        fi\n    done\n    echo ${res[@]} |\
    \ tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  array=($1)\n\
    \  local -a result\n  local -a sorted\n  local -a reversed\n  local -a numbers\n\
    \  local -a names\n  local -a final\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n\
    \  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local\
    \ mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n\
    \  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local\
    \ zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local eee\n  local\
    \ fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n  local kkk\n  local\
    \ lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local\
    \ rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n  local www\n  local\
    \ xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local\
    \ dddd\n  local eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n\
    \  local jjjj\n  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local\
    \ oooo\n  local pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n\
    \  local uuuu\n  local vvvv\n  local wwww\n  local xxxx\n  local yyyy\n\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use echo to print the result\n  # Example: echo \"Hello\"\n  #\n\
    \  # Your code here\n  #\n  # End of your code\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp12zlonn1.sh: line 24: syntax error near unexpected token `}''

    /tmp/tmp12zlonn1.sh: line 24: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # TODO: Your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local i\n  local j\n  local number\n\
    \n  for ((i = 0; i < ${#array[@]}; i++)); do\n    number=${array[$i]}\n    if\
    \ [[ $number -ge 1 && $number -le 9 ]]; then\n      sorted[${#sorted[@]}]=$number\n\
    \    fi\n  done\n\n  if [[ ${#sorted[@]} -gt 0 ]]; then\n    sorted=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for ((i = ${#sorted[@]} - 1; i >=\
    \ 0; i--)); do\n      reversed[${#reversed[@]}]=${sorted[$i]}\n    done\n  fi\n\
    \n  for ((i = 0; i < ${#reversed[@]}; i++)); do\n    number=${reversed[$i]}\n\
    \    for ((j = 0; j < ${#numbers[@]}; j++)); do\n      if [[ $number -eq $((j\
    \ + 1)) ]]; then\n        result[${#result[@]}]=\"\\\"${numbers[$j]}\\\"\"\n \
    \     fi\n    done\n  done\n\n  echo \"[${result[@]}]\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo $(printf '\"%s\" ' \"\
    ${result[@]}\" | tac)\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a res\n    local -a nums\n    local -a names\n    local i\n    local j\n  \
    \  local k\n    local tmp\n    local num\n    local name\n    arr=($1)\n    res=()\n\
    \    nums=(1 2 3 4 5 6 7 8 9)\n    names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i = 0; i < ${#arr[@]};\
    \ i++)); do\n        num=${arr[$i]}\n        for ((j = 0; j < ${#nums[@]}; j++));\
    \ do\n            if [[ $num -eq ${nums[$j]} ]]; then\n                res+=(${names[$j]})\n\
    \                break\n            fi\n        done\n    done\n    for ((i =\
    \ 0; i < ${#res[@]}; i++)); do\n        for ((j = i + 1; j < ${#res[@]}; j++));\
    \ do\n            if [[ ${res[$i]} > ${res[$j]} ]]; then\n                tmp=${res[$i]}\n\
    \                res[$i]=${res[$j]}\n                res[$j]=$tmp\n          \
    \  fi\n        done\n    done\n    for ((i = 0; i < ${#res[@]}; i++)); do\n  \
    \      res[$i]=\"\\\"${res[$i]}\\\"\"\n    done\n    echo \"${res[@]}\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local\
    \ -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    for i in ${arr[@]}; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            res+=(${nums[$i-1]})\n        fi\n    done\n    echo $(echo ${res[@]}\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' ')\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   declare -a arr=(\"$@\")\n    declare -a arr_sorted\n    declare -a arr_reversed\n\
    \    declare -a arr_result\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge\
    \ 1 && $i -le 9 ]]; then\n            arr_sorted+=($i)\n        fi\n    done\n\
    \    IFS=$'\\n' arr_sorted=($(sort <<<\"${arr_sorted[*]}\"))\n    unset IFS\n\
    \    for ((i=${#arr_sorted[@]}-1; i>=0; i--)); do\n        arr_reversed+=(${arr_sorted[i]})\n\
    \    done\n    for i in \"${arr_reversed[@]}\"; do\n        case $i in\n     \
    \       1) arr_result+=('\"One\"') ;;\n            2) arr_result+=('\"Two\"')\
    \ ;;\n            3) arr_result+=('\"Three\"') ;;\n            4) arr_result+=('\"\
    Four\"') ;;\n            5) arr_result+=('\"Five\"') ;;\n            6) arr_result+=('\"\
    Six\"') ;;\n            7) arr_result+=('\"Seven\"') ;;\n            8) arr_result+=('\"\
    Eight\"') ;;\n            9) arr_result+=('\"Nine\"') ;;\n        esac\n    done\n\
    \    echo \"${arr_result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpccr4s7ku.sh: line 23: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a numbers\n    local -a words\n    local -a sorted\n\
    \    local -a reversed\n    local -a final\n    local -a tmp\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i\
    \ n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n \
    \   local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local\
    \ -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n\
    \    local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local\
    \ -i zz\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n\
    \    local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n\
    \    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local\
    \ -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n\
    \    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local\
    \ -i aaa\n    local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local i\n  local j\n  local k\n\
    \  local number\n  for ((i=0; i<${#array[@]}; i++)); do\n    number=${array[$i]}\n\
    \    if [[ $number -ge 1 && $number -le 9 ]]; then\n      sorted[${#sorted[@]}]=$number\n\
    \    fi\n  done\n  sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n \
    \ for ((i=${#sorted[@]}-1; i>=0; i--)); do\n    reversed[${#reversed[@]}]=${sorted[$i]}\n\
    \  done\n  for ((i=0; i<${#reversed[@]}; i++)); do\n    number=${reversed[$i]}\n\
    \    for ((j=0; j<${#numbers[@]}; j++)); do\n      if [[ $number -eq $((j+1))\
    \ ]]; then\n        result[${#result[@]}]=${numbers[$j]}\n      fi\n    done\n\
    \  done\n  echo \"[$(printf '\"%s\", ' \"${result[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    arr=($1)\n\
    \    local -a result\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 &&\
    \ $i -le 9 ]]; then\n            result+=($i)\n        fi\n    done\n    result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -nr))\n    for i in \"${!result[@]}\"; do\n\
    \        case ${result[$i]} in\n            1) result[$i]='\"One\"';;\n      \
    \      2) result[$i]='\"Two\"';;\n            3) result[$i]='\"Three\"';;\n  \
    \          4) result[$i]='\"Four\"';;\n            5) result[$i]='\"Five\"';;\n\
    \            6) result[$i]='\"Six\"';;\n            7) result[$i]='\"Seven\"';;\n\
    \            8) result[$i]='\"Eight\"';;\n            9) result[$i]='\"Nine\"\
    ';;\n        esac\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n\
    \  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local\
    \ gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n\
    \  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local\
    \ rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n\
    \  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local\
    \ ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n\
    \  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n \
    \ local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local\
    \ sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n\
    \  local yyy=0\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort -nr))\n  for i in \"${!arr[@]}\"\
    ; do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"' ;;\n      2) arr[$i]='\"\
    Two\"' ;;\n      3) arr[$i]='\"Three\"' ;;\n      4) arr[$i]='\"Four\"' ;;\n \
    \     5) arr[$i]='\"Five\"' ;;\n      6) arr[$i]='\"Six\"' ;;\n      7) arr[$i]='\"\
    Seven\"' ;;\n      8) arr[$i]='\"Eight\"' ;;\n      9) arr[$i]='\"Nine\"' ;;\n\
    \    esac\n  done\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a result=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local\
    \ -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n \
    \ local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"$@\" | tr ' ' '\\n' | grep -E '^[1-9]$' | sort -r | sed 's/\\([1-9]\\)/\"\\\
    1\"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [ $i -ge 1 ] && [ $i -le 9 ]; then\n      arr+=($i)\n  \
    \  fi\n  done\n  arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort -n | tac))\n  for\
    \ i in \"${!arr[@]}\"; do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"';;\n\
    \      2) arr[$i]='\"Two\"';;\n      3) arr[$i]='\"Three\"';;\n      4) arr[$i]='\"\
    Four\"';;\n      5) arr[$i]='\"Five\"';;\n      6) arr[$i]='\"Six\"';;\n     \
    \ 7) arr[$i]='\"Seven\"';;\n      8) arr[$i]='\"Eight\"';;\n      9) arr[$i]='\"\
    Nine\"';;\n    esac\n  done\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: implement this\
    \ function\n  echo \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted\n    local i\n    local j\n    local number\n\
    \    local name\n\n    for ((i = 0; i < ${#array[@]}; i++)); do\n        number=${array[$i]}\n\
    \        if [[ $number -ge 1 && $number -le 9 ]]; then\n            sorted[${#sorted[@]}]=$number\n\
    \        fi\n    done\n\n    if [[ ${#sorted[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n        return\n    fi\n\n    for ((i = 0; i < ${#sorted[@]}; i++));\
    \ do\n        for ((j = i + 1; j < ${#sorted[@]}; j++)); do\n            if [[\
    \ ${sorted[$i]} -gt ${sorted[$j]} ]]; then\n                number=${sorted[$i]}\n\
    \                sorted[$i]=${sorted[$j]}\n                sorted[$j]=$number\n\
    \            fi\n        done\n    done\n\n    for ((i = 0; i < ${#sorted[@]};\
    \ i++)); do\n        number=${sorted[$i]}\n        name=${numbers[$number - 1]}\n\
    \        result[${#result[@]}]=\"\\\"$name\\\"\"\n    done\n\n    echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a arr2=()\n    local -a arr3=()\n    local -a arr4=()\n    local -a\
    \ arr5=()\n    local -a arr6=()\n    local -a arr7=()\n    local -a arr8=()\n\
    \    local -a arr9=()\n    local -a arr10=()\n    local -a arr11=()\n    local\
    \ -a arr12=()\n    local -a arr13=()\n    local -a arr14=()\n    local -a arr15=()\n\
    \    local -a arr16=()\n    local -a arr17=()\n    local -a arr18=()\n    local\
    \ -a arr19=()\n    local -a arr20=()\n    local -a arr21=()\n    local -a arr22=()\n\
    \    local -a arr23=()\n    local -a arr24=()\n    local -a arr25=()\n    local\
    \ -a arr26=()\n    local -a arr27=()\n    local -a arr28=()\n    local -a arr29=()\n\
    \    local -a arr30=()\n    local -a arr31=()\n    local -a arr32=()\n    local\
    \ -a arr33=()\n    local -a arr34=()\n    local -a arr35=()\n    local -a arr36=()\n\
    \    local -a arr37=()\n    local -a arr38=()\n    local -a arr39=()\n    local\
    \ -a arr40=()\n    local -a arr41=()\n    local -a arr42=()\n    local -a arr43=()\n\
    \    local -a arr44=()\n    local -a arr45=()\n    local -a arr46=()\n    local\
    \ -a arr47=()\n    local -a arr48=()\n    local -a arr49=()\n    local -a arr50=()\n\
    \    local -a arr51=()\n    local -a arr52=()\n    local -a arr53=()\n    local\
    \ -a arr54=()\n    local -a arr55=()\n    local -a arr56=()\n    local -a arr57=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # TODO: your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(\n        [1]=\"One\"\n       \
    \ [2]=\"Two\"\n        [3]=\"Three\"\n        [4]=\"Four\"\n        [5]=\"Five\"\
    \n        [6]=\"Six\"\n        [7]=\"Seven\"\n        [8]=\"Eight\"\n        [9]=\"\
    Nine\"\n    )\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You may use echo\n    # You may use $(...) or `...` to call other functions\n\
    \    # You may use external programs\n    # You may use `return` to return a value\n\
    \    # You may use `exit` to exit with a value\n    # You may use `exit 1` to\
    \ exit with an error\n    # You may use `return 1` to exit with an error\n   \
    \ # You may use `return 0` to exit with success\n    # You may use `exit 0` to\
    \ exit with success\n    # You may use `return` to return a value\n    # You may\
    \ use `exit` to exit with a value\n    # You may use `exit 1` to exit with an\
    \ error\n    # You may use `return 1` to exit with an error\n    # You may use\
    \ `return 0` to exit with success\n    # You may use `exit 0` to exit with success\n\
    \    # You may use `return` to return a value\n    # You may use `exit` to exit\
    \ with a value\n    # You may use `exit 1` to exit with an error\n    # You may\
    \ use `return 1` to exit with an error\n    # You may use `return 0` to exit with\
    \ success\n    # You may use `exit 0` to exit with success\n    # You may use\
    \ `return` to return a value\n    # You may use `exit` to exit with a value\n\
    \    # You may use `exit 1` to exit with an error\n    # You may use `return 1`\
    \ to exit with an error\n    # You may use `return 0` to exit with success\n \
    \   # You may use `exit 0` to exit with success\n    # You may use `return` to\
    \ return a value\n    # You may use `exit` to exit with a value\n    # You may\
    \ use `exit 1` to exit with an error\n    # You may use `return 1` to exit with\
    \ an error\n    # You may use `return 0` to exit with success\n    # You may use\
    \ `exit 0` to exit with success\n    # You may use `return` to return a value\n\
    \    # You may use `exit` to exit with a value\n    # You may use `exit 1` to\
    \ exit with an error\n    # You may use `\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyq_2c05c.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpyq_2c05c.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  for\
    \ i in $1; do\n    case $i in\n      1|2|3|4|5|6|7|8|9) array+=($i) ;;\n    esac\n\
    \  done\n  array=($(for i in ${array[@]}; do echo $i; done | sort -nr))\n  for\
    \ ((i=0; i<${#array[@]}; i++)); do\n    case ${array[$i]} in\n      1) array[$i]='\"\
    One\"' ;;\n      2) array[$i]='\"Two\"' ;;\n      3) array[$i]='\"Three\"' ;;\n\
    \      4) array[$i]='\"Four\"' ;;\n      5) array[$i]='\"Five\"' ;;\n      6)\
    \ array[$i]='\"Six\"' ;;\n      7) array[$i]='\"Seven\"' ;;\n      8) array[$i]='\"\
    Eight\"' ;;\n      9) array[$i]='\"Nine\"' ;;\n    esac\n  done\n  echo ${array[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[$(printf '\"%s\" ' \"${arr[@]}\" | sort -nr\
    \ | sed 's/^/\\x27/g' | sed 's/ /\\x27, \\x27/g')]\"\n    fi\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a arr2=()\n  local -a arr3=()\n  local -a arr4=()\n  local -a arr5=()\n  local\
    \ -a arr6=()\n  local -a arr7=()\n  local -a arr8=()\n  local -a arr9=()\n  local\
    \ -a arr10=()\n  local -a arr11=()\n  local -a arr12=()\n  local -a arr13=()\n\
    \  local -a arr14=()\n  local -a arr15=()\n  local -a arr16=()\n  local -a arr17=()\n\
    \  local -a arr18=()\n  local -a arr19=()\n  local -a arr20=()\n  local -a arr21=()\n\
    \  local -a arr22=()\n  local -a arr23=()\n  local -a arr24=()\n  local -a arr25=()\n\
    \  local -a arr26=()\n  local -a arr27=()\n  local -a arr28=()\n  local -a arr29=()\n\
    \  local -a arr30=()\n  local -a arr31=()\n  local -a arr32=()\n  local -a arr33=()\n\
    \  local -a arr34=()\n  local -a arr35=()\n  local -a arr36=()\n  local -a arr37=()\n\
    \  local -a arr38=()\n  local -a arr39=()\n  local -a arr40=()\n  local -a arr41=()\n\
    \  local -a arr42=()\n  local -a arr43=()\n  local -a arr44=()\n  local -a arr45=()\n\
    \  local -a arr46=()\n  local -a arr47=()\n  local -a arr48=()\n  local -a arr49=()\n\
    \  local -a arr50=()\n  local -a arr51=()\n  local -a arr52=()\n  local -a arr53=()\n\
    \  local -a arr54=()\n  local -a arr55=()\n  local -a arr56=()\n  local -a arr57=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a dict=(\n    [1]=\"One\"\n    [2]=\"Two\"\n    [3]=\"Three\"\
    \n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"Seven\"\n   \
    \ [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  for i in \"${arr[@]}\"; do\n    if [[\
    \ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${dict[$i]})\n    fi\n  done\n  echo\
    \ ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | sort -r\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      array+=(\"$i\")\n\
    \    fi\n  done\n  if [[ ${#array[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[$(printf '\"%s\" ' \"${array[@]}\" | sort -r | sed 's/\\([0-9]\\\
    )/\"\\1\"/g')]\"\n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr \" \" \"\\n\" | sort -n | uniq | grep -E \"^[1-9]$\" | tac |\
    \ sed 's/1/One/g' | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g' | sed\
    \ 's/5/Five/g' | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed\
    \ 's/9/Nine/g' | tr \"\\n\" \" \" | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^\\s*//;s/\\s*$//'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo -n \"[\"\n    for i in $(seq $((${#result[@]}-1)) -1 0); do\n       \
    \ echo -n \"\\\"${result[$i]}\\\"\"\n        if [[ $i -gt 0 ]]; then\n       \
    \     echo -n \", \"\n        fi\n    done\n    echo -n \"]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i n=0\n  local -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local\
    \ -i mmm=0\n  local -i nnn=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a sorted\n  local -a reversed\n  local -a result\n  local -a numbers\n  local\
    \ -a names\n  local i\n  local j\n  local number\n  local name\n\n  array=($1)\n\
    \  numbers=(1 2 3 4 5 6 7 8 9)\n  names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n\n  for i in \"${array[@]}\"; do\n\
    \    for j in \"${numbers[@]}\"; do\n      if [[ $i -eq $j ]]; then\n        sorted+=($i)\n\
    \      fi\n    done\n  done\n\n  for ((i=${#sorted[@]}-1; i>=0; i--)); do\n  \
    \  reversed+=(${sorted[i]})\n  done\n\n  for i in \"${reversed[@]}\"; do\n   \
    \ for j in \"${numbers[@]}\"; do\n      if [[ $i -eq $j ]]; then\n        result+=(${names[j-1]})\n\
    \      fi\n    done\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a sorted=()\n  local -a\
    \ reversed=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_map=([1]=0 [2]=1 [3]=2 [4]=3 [5]=4 [6]=5 [7]=6 [8]=7 [9]=8)\n  local -a\
    \ nums_rev_map=([1]=8 [2]=7 [3]=6 [4]=5 [5]=4 [6]=3 [7]=2 [8]=1 [9]=0)\n  local\
    \ -a nums_map_rev=([0]=1 [1]=2 [2]=3 [3]=4 [4]=5 [5]=6 [6]=7 [7]=8 [8]=9)\n  local\
    \ -a nums_rev_map_rev=([0]=9 [1]=8 [2]=7 [3]=6 [4]=5 [5]=4 [6]=3 [7]=2 [8]=1)\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use echo to print the output\n  # You can use read to get the input\n\
    \  # You can use $(by_length \"1 2 3\") to call the function\n  # You can use\
    \ $1 to get the first parameter\n  # You can use $2 to get the second parameter\n\
    \  # You can use $# to get the number of parameters\n  # You can use $@ to get\
    \ all the parameters\n  # You can use $? to get the exit status of the last command\n\
    \  # You can use $! to get the process id of the last command\n  # You can use\
    \ $$ to get the process id of the current script\n  # You can use $0 to get the\
    \ name of the current script\n  # You can use $LINENO to get the current line\
    \ number\n  # You can use $BASH_VERSION to get the bash version\n  # You can use\
    \ $SECONDS to get the number of seconds since the script was started\n  # You\
    \ can use $RANDOM to get a random number\n  # You can use $UID to get the user\
    \ id\n  # You can use $EUID to get the effective user id\n  # You can use $HOSTNAME\
    \ to get the hostname\n  # You can use $PWD to get the current directory\n  #\
    \ You can use $OLDPWD to get the previous directory\n  # You can use $IFS to get\
    \ the internal field separator\n  # You can use $PATH to get the path\n  # You\
    \ can use $PS1 to get the primary prompt string\n  # You can use $PS2 to get the\
    \ secondary prompt string\n  # You can use $PS3 to get the select prompt string\n\
    \  # You can use $PS4 to get the debug prompt string\n  # You can use $TMOUT to\
    \ get the timeout value\n  # You can use $TMPDIR to get the temporary directory\n\
    \  # You can use $SHELL to get the shell\n  # You can use $HOME to get the home\
    \ directory\n  # You can use $LOGNAME to get the login name\n  # You can use $HISTSIZE\
    \ to get the history size\n  # You can use $HISTFILE to get the history file\n\
    \  # You can use $HISTFILESIZE to get the history file\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk3ku_p_s.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpk3ku_p_s.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ final=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      res+=(\"\
    ${nums[$i-1]}\")\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    for i in \"${arr[@]}\"; do\n        if [[ $i =~ ^[1-9]$\
    \ ]]; then\n            result+=($i)\n        fi\n    done\n    result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -n | tac))\n    for i in \"${!result[@]}\"\
    ; do\n        case ${result[$i]} in\n            1) result[$i]='\"One\"';;\n \
    \           2) result[$i]='\"Two\"';;\n            3) result[$i]='\"Three\"';;\n\
    \            4) result[$i]='\"Four\"';;\n            5) result[$i]='\"Five\"';;\n\
    \            6) result[$i]='\"Six\"';;\n            7) result[$i]='\"Seven\"';;\n\
    \            8) result[$i]='\"Eight\"';;\n            9) result[$i]='\"Nine\"\
    ';;\n        esac\n    done\n    echo \"[${result[*]}]\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  #echo\
    \ \"\\\"$1\\\"\"\n  #echo $1\n  #echo $1 | tr \" \" \"\\n\"\n  #echo $1 | tr \"\
    \ \" \"\\n\" | sort -n\n  #echo $1 | tr \" \" \"\\n\" | sort -n | tr \"1\" \"\
    One\"\n  #echo $1 | tr \" \" \"\\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"\
    Two\"\n  #echo $1 | tr \" \" \"\\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"\
    Two\" | tr \"3\" \"Three\"\n  #echo $1 | tr \" \" \"\\n\" | sort -n | tr \"1\"\
    \ \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\" | tr \"4\" \"Four\"\n  #echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"\
    3\" \"Three\" | tr \"4\" \"Four\" | tr \"5\" \"Five\"\n  #echo $1 | tr \" \" \"\
    \\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\" | tr\
    \ \"4\" \"Four\" | tr \"5\" \"Five\" | tr \"6\" \"Six\"\n  #echo $1 | tr \" \"\
    \ \"\\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\"\
    \ | tr \"4\" \"Four\" | tr \"5\" \"Five\" | tr \"6\" \"Six\" | tr \"7\" \"Seven\"\
    \n  #echo $1 | tr \" \" \"\\n\" | sort -n | tr \"1\" \"One\" | tr \"2\" \"Two\"\
    \ | tr \"3\" \"Three\" | tr \"4\" \"Four\" | tr \"5\" \"Five\" | tr \"6\" \"Six\"\
    \ | tr \"7\" \"Seven\" | tr \"8\" \"Eight\"\n  #echo $1 | tr \" \" \"\\n\" | sort\
    \ -n | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp90u2r4he.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmp90u2r4he.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result\n    local -a tmp\n    local -a tmp2\n    local -a tmp3\n\
    \    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n    local -a tmp7\n\
    \    local -a tmp8\n    local -a tmp9\n    for i in \"${array[@]}\"; do\n    \
    \    if [ $i -eq 1 ]; then\n            tmp+=($i)\n        elif [ $i -eq 2 ];\
    \ then\n            tmp2+=($i)\n        elif [ $i -eq 3 ]; then\n            tmp3+=($i)\n\
    \        elif [ $i -eq 4 ]; then\n            tmp4+=($i)\n        elif [ $i -eq\
    \ 5 ]; then\n            tmp5+=($i)\n        elif [ $i -eq 6 ]; then\n       \
    \     tmp6+=($i)\n        elif [ $i -eq 7 ]; then\n            tmp7+=($i)\n  \
    \      elif [ $i -eq 8 ]; then\n            tmp8+=($i)\n        elif [ $i -eq\
    \ 9 ]; then\n            tmp9+=($i)\n        fi\n    done\n    for i in \"${tmp[@]}\"\
    ; do\n        result+=($i)\n    done\n    for i in \"${tmp2[@]}\"; do\n      \
    \  result+=($i)\n    done\n    for i in \"${tmp3[@]}\"; do\n        result+=($i)\n\
    \    done\n    for i in \"${tmp4[@]}\"; do\n        result+=($i)\n    done\n \
    \   for i in \"${tmp5[@]}\"; do\n        result+=($i)\n    done\n    for i in\
    \ \"${tmp6[@]}\"; do\n        result+=($i)\n    done\n    for i in \"${tmp7[@]}\"\
    ; do\n        result+=($i)\n    done\n    for i in \"${tmp8[@]}\"; do\n      \
    \  result+=($i)\n    done\n    for i in \"${tmp9[@]}\"; do\n        result+=($i)\n\
    \    done\n    for i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8jbvyvg1.sh: line 77: syntax error near unexpected token `}''

    /tmp/tmp8jbvyvg1.sh: line 77: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local result=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=($i)\n\
    \        fi\n    done\n    result=($(echo ${result[@]} | tr ' ' '\\n' | sort -rn\
    \ | tr '\\n' ' '))\n    for i in ${!result[@]}; do\n        case ${result[$i]}\
    \ in\n            1) result[$i]='\"One\"';;\n            2) result[$i]='\"Two\"\
    ';;\n            3) result[$i]='\"Three\"';;\n            4) result[$i]='\"Four\"\
    ';;\n            5) result[$i]='\"Five\"';;\n            6) result[$i]='\"Six\"\
    ';;\n            7) result[$i]='\"Seven\"';;\n            8) result[$i]='\"Eight\"\
    ';;\n            9) result[$i]='\"Nine\"';;\n        esac\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tac | sed -e 's/1/One/g' -e 's/2/Two/g' -e\
    \ 's/3/Three/g' -e 's/4/Four/g' -e 's/5/Five/g' -e 's/6/Six/g' -e 's/7/Seven/g'\
    \ -e 's/8/Eight/g' -e 's/9/Nine/g' | tr \"\\n\" \" \" | sed 's/^/\"/' | sed 's/$/\"\
    /' | sed 's/ /\", \"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for ((i=0; i<${#array[@]}; i++)); do\n    if [[ ${array[$i]} -ge 1\
    \ && ${array[$i]} -le 9 ]]; then\n      result+=(${array[$i]})\n    fi\n  done\n\
    \  result=($(printf \"%s\\n\" \"${result[@]}\" | sort -nr))\n  for ((i=0; i<${#result[@]};\
    \ i++)); do\n    result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\"\"\n  done\n\
    \  echo \"[${result[@]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n\
    \    fi\n  done\n  echo $(sort -r <<< ${res[@]})\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=(\"$i\")\n\
    \    fi\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -nr))\n    local\
    \ -a result=()\n    for i in \"${sorted[@]}\"; do\n      case $i in\n        1)\
    \ result+=('\"One\"') ;;\n        2) result+=('\"Two\"') ;;\n        3) result+=('\"\
    Three\"') ;;\n        4) result+=('\"Four\"') ;;\n        5) result+=('\"Five\"\
    ') ;;\n        6) result+=('\"Six\"') ;;\n        7) result+=('\"Seven\"') ;;\n\
    \        8) result+=('\"Eight\"') ;;\n        9) result+=('\"Nine\"') ;;\n   \
    \   esac\n    done\n    echo \"[${result[*]}]\"\n  fi\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following command to convert a number to its name:\n  \
    \  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n\
    \    # For example:\n    # echo \"One Two Three Four Five Six Seven Eight Nine\"\
    \ | cut -d' ' -f3\n    # Three\n    # echo \"One Two Three Four Five Six Seven\
    \ Eight Nine\" | cut -d' ' -f8\n    # Eight\n    #\n    # You can use the following\
    \ command to convert a name to its number:\n    # echo \"One Two Three Four Five\
    \ Six Seven Eight Nine\" | grep -n $name | cut -d':' -f1\n    # For example:\n\
    \    # echo \"One Two Three Four Five Six Seven Eight Nine\" | grep -n \"Three\"\
    \ | cut -d':' -f1\n    # 3\n    # echo \"One Two Three Four Five Six Seven Eight\
    \ Nine\" | grep -n \"Eight\" | cut -d':' -f1\n    # 8\n    #\n    # You can use\
    \ the following command to reverse an array:\n    # echo \"1 2 3 4 5 6 7 8 9\"\
    \ | rev\n    # 9 8 7 6 5 4 3 2 1\n    #\n    # You can use the following command\
    \ to sort an array:\n    # echo \"1 2 3 4 5 6 7 8 9\" | sort\n    # 1 2 3 4 5\
    \ 6 7 8 9\n    #\n    # You can use the following command to convert an array\
    \ to a string:\n    # echo \"1 2 3 4 5 6 7 8 9\" | tr ' ' ','\n    # 1,2,3,4,5,6,7,8,9\n\
    \    #\n    # You can use the following command to convert a string to an array:\n\
    \    # echo \"1,2,3,4,5,6,7,8,9\" | tr ',' ' '\n    # 1 2 3 4 5 6 7 8 9\n    #\n\
    \    # You can use the following command to convert a string to an array:\n  \
    \  # echo \"1,2,3,4,5,6,7,8,9\" | tr ',' ' '\n    # 1 2 3 4 5 6 7 8 9\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxy3cv2ja.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpxy3cv2ja.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a new_arr\n  local -a result\n  local -a final_result\n  local -a final_result_2\n\
    \  local -a final_result_3\n  local -a final_result_4\n  local -a final_result_5\n\
    \  local -a final_result_6\n  local -a final_result_7\n  local -a final_result_8\n\
    \  local -a final_result_9\n  local -a final_result_10\n  local -a final_result_11\n\
    \  local -a final_result_12\n  local -a final_result_13\n  local -a final_result_14\n\
    \  local -a final_result_15\n  local -a final_result_16\n  local -a final_result_17\n\
    \  local -a final_result_18\n  local -a final_result_19\n  local -a final_result_20\n\
    \  local -a final_result_21\n  local -a final_result_22\n  local -a final_result_23\n\
    \  local -a final_result_24\n  local -a final_result_25\n  local -a final_result_26\n\
    \  local -a final_result_27\n  local -a final_result_28\n  local -a final_result_29\n\
    \  local -a final_result_30\n  local -a final_result_31\n  local -a final_result_32\n\
    \  local -a final_result_33\n  local -a final_result_34\n  local -a final_result_35\n\
    \  local -a final_result_36\n  local -a final_result_37\n  local -a final_result_38\n\
    \  local -a final_result_39\n  local -a final_result_40\n  local -a final_result_41\n\
    \  local -a final_result_42\n  local -a final_result_43\n  local -a final_result_44\n\
    \  local -a final_result_45\n  local -a final_result_46\n  local -a final_result_47\n\
    \  local -a final_result_48\n  local -a final_result_49\n  local -\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Convert the input\
    \ into an array\n    local -a arr=($1)\n    # Sort the array\n    arr=($(printf\
    \ \"%s\\n\" \"${arr[@]}\" | sort -n))\n    # Reverse the array\n    arr=($(printf\
    \ \"%s\\n\" \"${arr[@]}\" | tac))\n    # Convert the array into a string\n   \
    \ local str=\"${arr[@]}\"\n    # Replace each number by its corresponding name\n\
    \    str=${str//1/One}\n    str=${str//2/Two}\n    str=${str//3/Three}\n    str=${str//4/Four}\n\
    \    str=${str//5/Five}\n    str=${str//6/Six}\n    str=${str//7/Seven}\n    str=${str//8/Eight}\n\
    \    str=${str//9/Nine}\n    # Convert the string into an array\n    arr=($str)\n\
    \    # Convert the array into a string\n    str=\"${arr[@]}\"\n    # Surround\
    \ each element with double quotes\n    str=${str// /\\\", \\\"}\n    # Surround\
    \ the whole string with square brackets\n    str=\"[\\\"$str\\\"]\"\n    # Print\
    \ the result\n    echo $str\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(${nums[$i-1]})\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' |\
    \ sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  array=($1)\n\
    \  local -a result\n  local -a sorted\n  local -a reversed\n  local -a final\n\
    \  local -a numbers\n  local -a names\n  local -a temp\n  local -a temp2\n  local\
    \ -a temp3\n  local -a temp4\n  local -a temp5\n  local -a temp6\n  local -a temp7\n\
    \  local -a temp8\n  local -a temp9\n  local -a temp10\n  local -a temp11\n  local\
    \ -a temp12\n  local -a temp13\n  local -a temp14\n  local -a temp15\n  local\
    \ -a temp16\n  local -a temp17\n  local -a temp18\n  local -a temp19\n  local\
    \ -a temp20\n  local -a temp21\n  local -a temp22\n  local -a temp23\n  local\
    \ -a temp24\n  local -a temp25\n  local -a temp26\n  local -a temp27\n  local\
    \ -a temp28\n  local -a temp29\n  local -a temp30\n  local -a temp31\n  local\
    \ -a temp32\n  local -a temp33\n  local -a temp34\n  local -a temp35\n  local\
    \ -a temp36\n  local -a temp37\n  local -a temp38\n  local -a temp39\n  local\
    \ -a temp40\n  local -a temp41\n  local -a temp42\n  local -a temp43\n  local\
    \ -a temp44\n  local -a temp45\n  local -a temp46\n  local -a temp47\n  local\
    \ -a temp48\n  local -a temp49\n  local -a temp50\n  local -a temp51\n  local\
    \ -a temp52\n  local -a temp53\n  local -a temp54\n  local -a temp55\n  local\
    \ -a temp56\n  local -a temp57\n  local -a temp58\n  local -a temp59\n  local\
    \ -a temp60\n  local -a temp61\n  local -a temp62\n  local -a temp63\n  local\
    \ -a temp64\n  local -a temp65\n  local -a temp66\n \n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted\n  local -a reversed\n  local -a final\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint:\n    #   - Use the following command to sort the array:\n\
    \    #     sort -n -t ' ' -k 1.1,1.1\n    #   - Use the following command to reverse\
    \ the array:\n    #     tac\n    #   - Use the following command to replace each\
    \ digit by its corresponding name:\n    #     sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\n\
    \    #   - Use the following command to remove the quotes:\n    #     sed 's/\"\
    //g'\n    #   - Use the following command to remove the brackets:\n    #     sed\
    \ 's/\\[//g;s/\\]//g'\n    #   - Use the following command to remove the spaces:\n\
    \    #     sed 's/ //g'\n    #   - Use the following command to remove the commas:\n\
    \    #     sed 's/,//g'\n    #   - Use the following command to remove the quotes:\n\
    \    #     sed 's/\"//g'\n    #   - Use the following command to remove the brackets:\n\
    \    #     sed 's/\\[//g;s/\\]//g'\n    #   - Use the following command to remove\
    \ the spaces:\n    #     sed 's/ //g'\n    #   - Use the following command to\
    \ remove the commas:\n    #     sed 's/,//g'\n    #   - Use the following command\
    \ to remove the quotes:\n    #     sed 's/\"//g'\n    #   - Use the following\
    \ command to remove the brackets:\n    #     sed 's/\\[//g;s/\\]//g'\n    #  \
    \ - Use the following command to remove the spaces:\n    #     sed 's/ //g'\n\
    \    #   - Use the following command to remove the commas:\n    #     sed 's/,//g'\n\
    \    #   - Use the following command to remove the quotes:\n    #\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0e26uv4u.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmp0e26uv4u.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You may use echo\n    # You may use $(...) or `...` to call other functions\n\
    \    # You may use external programs\n    # You may use the following external\
    \ programs:\n    #   - awk\n    #   - sort\n    #   - head\n    #   - tail\n \
    \   #   - tr\n    #   - sed\n    #   - grep\n    #   - wc\n    #   - cat\n   \
    \ #   - cut\n    #   - uniq\n    #   - expr\n    #   - rev\n    #   - paste\n\
    \    #   - join\n    #   - sort\n    #   - uniq\n    #   - wc\n    #   - cat\n\
    \    #   - cut\n    #   - paste\n    #   - join\n    #   - sort\n    #   - uniq\n\
    \    #   - wc\n    #   - cat\n    #   - cut\n    #   - paste\n    #   - join\n\
    \    #   - sort\n    #   - uniq\n    #   - wc\n    #   - cat\n    #   - cut\n\
    \    #   - paste\n    #   - join\n    #   - sort\n    #   - uniq\n    #   - wc\n\
    \    #   - cat\n    #   - cut\n    #   - paste\n    #   - join\n    #   - sort\n\
    \    #   - uniq\n    #   - wc\n    #   - cat\n    #   - cut\n    #   - paste\n\
    \    #   - join\n    #   - sort\n    #   - uniq\n    #   - wc\n    #   - cat\n\
    \    #   - cut\n    #   - paste\n    #   - join\n    #   - sort\n    #   - uniq\n\
    \    #   - wc\n    #   - cat\n    #   - cut\n    #   - paste\n    #   - join\n\
    \    #   - sort\n    #   - uniq\n    #   - wc\n    #   - cat\n    #   - cut\n\
    \    #   - paste\n    #   - join\n    #   - sort\n    #   - uniq\n    #   -\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2yr646ck.sh: line 96: syntax error near unexpected token `}''

    /tmp/tmp2yr646ck.sh: line 96: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted\n    local -a reversed\n    local -a result\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local i\n\n    for\
    \ i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n    \
    \        sorted+=($i)\n        fi\n    done\n\n    if [[ ${#sorted[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n        return\n    fi\n\n    sorted=($(printf \"\
    %s\\n\" \"${sorted[@]}\" | sort -n))\n    for ((i=${#sorted[@]}-1; i>=0; i--));\
    \ do\n        reversed+=(${sorted[i]})\n    done\n\n    for i in \"${reversed[@]}\"\
    ; do\n        result+=(${numbers[i-1]})\n    done\n\n    echo \"[$(IFS=,; echo\
    \ \"${result[*]}\")]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local i\n  for i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ arr+=($i)\n    fi\n  done\n  for i in $(echo ${arr[@]} | tr ' ' '\\n' | sort\
    \ -rn); do\n    res+=(${nums[$((i-1))]})\n  done\n  echo ${res[@]}\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | grep -E '^[1-9]$' | sort -r | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for number in \"${array[@]}\"; do\n    if [[ $number -ge 1 && $number\
    \ -le 9 ]]; then\n      result+=(${numbers[$number-1]})\n    fi\n  done\n  echo\
    \ \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i length=${#array[@]}\n  local -i max=0\n  local -i min=0\n  local -i\
    \ tmp=0\n  local -i tmp2=0\n  local -i tmp3=0\n  local -i tmp4=0\n  local -i tmp5=0\n\
    \  local -i tmp6=0\n  local -i tmp7=0\n  local -i tmp8=0\n  local -i tmp9=0\n\
    \  local -i tmp10=0\n  local -i tmp11=0\n  local -i tmp12=0\n  local -i tmp13=0\n\
    \  local -i tmp14=0\n  local -i tmp15=0\n  local -i tmp16=0\n  local -i tmp17=0\n\
    \  local -i tmp18=0\n  local -i tmp19=0\n  local -i tmp20=0\n  local -i tmp21=0\n\
    \  local -i tmp22=0\n  local -i tmp23=0\n  local -i tmp24=0\n  local -i tmp25=0\n\
    \  local -i tmp26=0\n  local -i tmp27=0\n  local -i tmp28=0\n  local -i tmp29=0\n\
    \  local -i tmp30=0\n  local -i tmp31=0\n  local -i tmp32=0\n  local -i tmp33=0\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      array+=(\"$i\")\n\
    \    fi\n  done\n  if [[ ${#array[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    local -a array_sorted=($(for i in ${array[@]}; do echo $i; done | sort -n))\n\
    \    local -a array_reversed=($(for i in ${array_sorted[@]}; do echo $i; done\
    \ | tac))\n    local -a array_names=()\n    for i in ${array_reversed[@]}; do\n\
    \      case $i in\n        1)\n          array_names+=('\"One\"')\n          ;;\n\
    \        2)\n          array_names+=('\"Two\"')\n          ;;\n        3)\n  \
    \        array_names+=('\"Three\"')\n          ;;\n        4)\n          array_names+=('\"\
    Four\"')\n          ;;\n        5)\n          array_names+=('\"Five\"')\n    \
    \      ;;\n        6)\n          array_names+=('\"Six\"')\n          ;;\n    \
    \    7)\n          array_names+=('\"Seven\"')\n          ;;\n        8)\n    \
    \      array_names+=('\"Eight\"')\n          ;;\n        9)\n          array_names+=('\"\
    Nine\"')\n          ;;\n      esac\n    done\n    echo \"[${array_names[@]}]\"\
    \n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a digits=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n   \
    \ local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n   \
    \ local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \   \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint:\n    #   - You can use the following function to convert a\
    \ number to its name:\n    #       number_to_name() {\n    #           case $1\
    \ in\n    #               1) echo \"One\" ;;\n    #               2) echo \"Two\"\
    \ ;;\n    #               3) echo \"Three\" ;;\n    #               4) echo \"\
    Four\" ;;\n    #               5) echo \"Five\" ;;\n    #               6) echo\
    \ \"Six\" ;;\n    #               7) echo \"Seven\" ;;\n    #               8)\
    \ echo \"Eight\" ;;\n    #               9) echo \"Nine\" ;;\n    #          \
    \ esac\n    #       }\n    #   - You can use the following function to reverse\
    \ an array:\n    #       reverse() {\n    #           local array=(\"$@\")\n \
    \   #           local reversed=()\n    #           for ((i=${#array[@]}-1; i>=0;\
    \ i--)); do\n    #               reversed+=(\"${array[i]}\")\n    #          \
    \ done\n    #           echo \"${reversed[@]}\"\n    #       }\n    #   - You\
    \ can use the following function to convert an array to a string:\n    #     \
    \  array_to_string() {\n    #           local array=(\"$@\")\n    #          \
    \ local string=\"\"\n    #           for i in \"${array[@]}\"; do\n    #     \
    \          string+=\"$i \"\n    #           done\n    #           echo \"$string\"\
    \n    #       }\n    #   - You can use the following function to convert a string\
    \ to an array:\n    #       string_to_array() {\n    #           local string=\"\
    $1\"\n    #           local array=()\n    #           while read -r line; do\n\
    \    #               array+=(\"$line\")\n    #           done <<< \"$string\"\n\
    \    #           echo \"${array[@]}\"\n    #       }\n    #   - You can use the\
    \ following function to convert an array to a JSON array:\n    #       array_to_json()\
    \ {\n    #           local array=(\"$@\")\n    #           local json=\"[\"\n\
    \    #           for i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjiqajq_c.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpjiqajq_c.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_arr=(1 2 3 4 5 6 7 8 9)\n  local -a nums_rev_arr=(9 8 7 6 5 4 3 2 1)\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            res+=(\"${numbers[$i-1]}\")\n        fi\n    done\n\
    \    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local i=0\n\
    \  for n in $1; do\n    if [[ $n -ge 1 && $n -le 9 ]]; then\n      arr[i]=$n\n\
    \      ((i++))\n    fi\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"\
    []\"\n    return\n  fi\n  IFS=$'\\n' arr=($(sort -n <<<\"${arr[*]}\"))\n  IFS=$'\\\
    n' arr=($(tac <<<\"${arr[*]}\"))\n  for n in ${arr[@]}; do\n    res[i]=\"\\\"\
    ${nums_rev[$((n-1))]}\\\"\"\n    ((i++))\n  done\n  echo \"[${res[*]}]\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr \" \" \"\\n\" | sort -n | uniq | grep -E \"^[1-9]$\" | tac |\
    \ sed 's/1/One/g' | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g' | sed\
    \ 's/5/Five/g' | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed\
    \ 's/9/Nine/g' | tr \"\\n\" \" \" | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a result=()\n  local -a dict=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local\
    \ -i mmm=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a dict=(\n        [1]=\"One\"\n        [2]=\"\
    Two\"\n        [3]=\"Three\"\n        [4]=\"Four\"\n        [5]=\"Five\"\n   \
    \     [6]=\"Six\"\n        [7]=\"Seven\"\n        [8]=\"Eight\"\n        [9]=\"\
    Nine\"\n    )\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            res+=(${dict[$i]})\n        fi\n    done\n    echo \"\
    ${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\"\
    \ [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n  for i\
    \ in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${dict[$i]})\n\
    \    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a numbers\n    local -a names\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i\
    \ n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i l\n    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local\
    \ -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local\
    \ -i k\n   \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -a numbers=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n\
    \  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local\
    \ jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n\
    \  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local\
    \ ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n\
    \  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n\
    \  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n\
    \  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n\
    \  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n\
    \  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local\
    \ gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n\
    \  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local\
    \ rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local w\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($@)\n\
    \  local -a result=()\n  for i in \"${array[@]}\"; do\n    if [[ $i =~ ^[1-9]$\
    \ ]]; then\n      result+=($i)\n    fi\n  done\n  if [[ ${#result[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"$(echo ${result[@]} | tr ' ' '\\n'\
    \ | sort -r | sed 's/^/\\\"/;s/$/\\\"/')\"\n  fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/\"/g;s/$/\"/g'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      array+=($i)\n  \
    \  fi\n  done\n  if [[ ${#array[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[$(echo \"${array[@]}\" | tr ' ' '\\n' | sort -r | sed -e 's/1/One/g'\
    \ -e 's/2/Two/g' -e 's/3/Three/g' -e 's/4/Four/g' -e 's/5/Five/g' -e 's/6/Six/g'\
    \ -e 's/7/Seven/g' -e 's/8/Eight/g' -e 's/9/Nine/g' | tr '\\n' ' ' | sed -e 's/^/\"\
    /' -e 's/$/\"/' -e 's/ /\", \"/g')]\"\n  fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n\
    \  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i l=0\n\
    \  local -i o=0\n  local -i num=0\n  local -i len=0\n  local -i len_arr=0\n  local\
    \ -i len_res=0\n  local -i len_nums=0\n  local -i len_num=0\n  local -i len_str=0\n\
    \  local -i len_str_num=0\n  local -i len_str_nums=0\n  local -i len_str_res=0\n\
    \  local -i len_str_arr=0\n  local -i len_str_arr_num=0\n  local -i len_str_res_num=0\n\
    \  local -i len_str_nums_num=0\n  local -i len_str_arr_nums=0\n  local -i len_str_res_nums=0\n\
    \  local -i len_str_nums_nums=0\n  local -i len_str_arr_nums_num=0\n  local -i\
    \ len_str_res_nums_num=0\n  local -i len_str_nums_nums_num=0\n  local -i len_str_arr_nums\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local i=0\n  local n=0\n  local num=0\n  for i in $1; do\n    if [[ $i -ge\
    \ 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n  done\n  if [[ ${#arr[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  IFS=$'\\n' arr=($(sort\
    \ -n <<<\"${arr[*]}\"))\n  for ((i=${#arr[@]}-1; i>=0; i--)); do\n    num=${arr[$i]}\n\
    \    res+=(${nums[$num-1]})\n  done\n  echo \"[$(IFS=, ; echo \"${res[*]}\")]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | grep -E '^[1-9]$' | sort -r | sed -E 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | sed -E 's/^/\\\"/g;s/$/\\\"/g' | tr '\\n' ' ' | sed -E 's/ $//g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i\n  local -i j\n  local -i temp\n  local -i length=${#array[@]}\n\
    \  for ((i=0; i<length; i++)); do\n    for ((j=i+1; j<length; j++)); do\n    \
    \  if [[ ${array[i]} -gt ${array[j]} ]]; then\n        temp=${array[i]}\n    \
    \    array[i]=${array[j]}\n        array[j]=$temp\n      fi\n    done\n  done\n\
    \  for ((i=0; i<length; i++)); do\n    if [[ ${array[i]} -ge 1 && ${array[i]}\
    \ -le 9 ]]; then\n      result[i]=${numbers[${array[i]}-1]}\n    fi\n  done\n\
    \  for ((i=0; i<length/2; i++)); do\n    temp=${result[i]}\n    result[i]=${result[length-i-1]}\n\
    \    result[length-i-1]=$temp\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a result\n  local -a sorted\n  local -a reversed\n  local -a mapped\n  local\
    \ -a filtered\n  local -a joined\n  local -a trimmed\n  local -a quoted\n  local\
    \ -a escaped\n  local -a json\n  local -a final\n  local -a final_result\n  local\
    \ -a final_result_joined\n  local -a final_result_trimmed\n  local -a final_result_quoted\n\
    \  local -a final_result_escaped\n  local -a final_result_json\n  local -a final_result_final\n\
    \  local -a final_result_final_result\n  local -a final_result_final_result_joined\n\
    \  local -a final_result_final_result_trimmed\n  local -a final_result_final_result_quoted\n\
    \  local -a final_result_final_result_escaped\n  local -a final_result_final_result_json\n\
    \  local -a final_result_final_result_final\n  local -a final_result_final_result_final_result\n\
    \  local -a final_result_final_result_final_result_joined\n  local -a final_result_final_result_final_result_trimmed\n\
    \  local -a final_result_final_result_final_result_quoted\n  local -a final_result_final_result_final_result_escaped\n\
    \  local -a final_result_final_result_final_result_json\n  local -a final_result_final_result_final_result_final\n\
    \  local -a final_result_final_result_final_result_final_result\n  local -a final_result_final_result_final_result_final_result_joined\n\
    \  local -a final_result_final_result_final_result_final_result_trimmed\n  local\
    \ -a final_result_final_result_final_result_final_result_quoted\n  local -a final_result_final_result_final_result_final_result_escaped\n\
    \  local -a final_result_final_result_final_result_final_result_json\n  local\
    \ -a final\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i len=0\n  local -i len_sorted=0\n  local -i\
    \ len_reversed=0\n  local -i len_result=0\n  local -i number=0\n  local -i index=0\n\
    \  local -i index_sorted=0\n  local -i index_reversed=0\n  local -i index_result=0\n\
    \  local -i index_numbers=0\n  local -i is_number=0\n  local -i is_between=0\n\
    \  local -i is_sorted=0\n  local -i is_reversed=0\n  local -i is_result=0\n  local\
    \ -i is_numbers=0\n  local -i is_valid=0\n  local -i is_valid_sorted=0\n  local\
    \ -i is_valid_reversed=0\n  local -i is_valid_result=0\n  local -i is_valid_numbers=0\n\
    \  local -i is_valid_number=0\n  local -i is_valid_index=0\n  local -i is_valid_index_sorted=0\n\
    \  local -i is_valid_index_reversed=0\n  local -i is_valid_index_result=0\n  local\
    \ -i is_valid_index_numbers=0\n  local -i is_valid_is_number=0\n  local -i is_valid_is_between=0\n\
    \  local -i is_valid_is_sorted=0\n  local -i is_valid_is_reversed=0\n  local -i\
    \ is_valid_is_result=0\n  local -i is_valid_is_numbers=0\n  local -i is_valid_is_valid=0\n\
    \  local -i is_valid_is_valid_sorted=0\n  local -i is_\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a res\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i n=0\n  local -i m=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local\
    \ -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i l=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i l=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n \n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | uniq | grep -E \"^[1-9]$\" | tac | sed 's/1/One/g'\
    \ | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g'\
    \ | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g'\
    \ | sed 's/^/\\\"/g' | sed 's/$/\\\"/g' | tr \"\\n\" \" \" | sed 's/^/[/g' | sed\
    \ 's/$/]/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=($i)\n    fi\n  done\n  result=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | sort -nr))\n  for i in \"${result[@]}\"; do\n    result[$i]=${dict[$i]}\n\
    \  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a arr_sorted\n  local -a arr_reversed\n  local -a arr_result\n  local -a arr_numbers\n\
    \  local -a arr_numbers_names\n  local -a arr_numbers_names_result\n  local -a\
    \ arr_result_final\n  local i\n  local j\n  local k\n  local number\n  local number_name\n\
    \  local number_name_result\n  local number_name_result_final\n  arr=($1)\n  arr_numbers=(1\
    \ 2 3 4 5 6 7 8 9)\n  arr_numbers_names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    number=${arr[$i]}\n    for ((j=0; j<${#arr_numbers[@]}; j++)); do\n\
    \      if [[ $number -eq ${arr_numbers[$j]} ]]; then\n        arr_result+=($number)\n\
    \      fi\n    done\n  done\n  if [[ ${#arr_result[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    arr_sorted=($(echo ${arr_result[@]} | tr \" \" \"\\n\" |\
    \ sort -n))\n    arr_reversed=($(echo ${arr_sorted[@]} | tr \" \" \"\\n\" | tac))\n\
    \    for ((k=0; k<${#arr_reversed[@]}; k++)); do\n      number_name=${arr_reversed[$k]}\n\
    \      for ((l=0; l<${#arr_numbers[@]}; l++)); do\n        if [[ $number_name\
    \ -eq ${arr_numbers[$l]} ]]; then\n          arr_numbers_names_result+=(${arr_numbers_names[$l]})\n\
    \        fi\n      done\n    done\n    for ((m=0; m<${#arr_numbers_names_result[@]};\
    \ m++)); do\n      number_name_result=${arr\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpas1t4fp6.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a result=()\n  local -a tmp=()\n  local -a tmp2=()\n  local -a tmp3=()\n  local\
    \ -a tmp4=()\n  local -a tmp5=()\n  local -a tmp6=()\n  local -a tmp7=()\n  local\
    \ -a tmp8=()\n  local -a tmp9=()\n  local -a tmp10=()\n  local -a tmp11=()\n \
    \ local -a tmp12=()\n  local -a tmp13=()\n  local -a tmp14=()\n  local -a tmp15=()\n\
    \  local -a tmp16=()\n  local -a tmp17=()\n  local -a tmp18=()\n  local -a tmp19=()\n\
    \  local -a tmp20=()\n  local -a tmp21=()\n  local -a tmp22=()\n  local -a tmp23=()\n\
    \  local -a tmp24=()\n  local -a tmp25=()\n  local -a tmp26=()\n  local -a tmp27=()\n\
    \  local -a tmp28=()\n  local -a tmp29=()\n  local -a tmp30=()\n  local -a tmp31=()\n\
    \  local -a tmp32=()\n  local -a tmp33=()\n  local -a tmp34=()\n  local -a tmp35=()\n\
    \  local -a tmp36=()\n  local -a tmp37=()\n  local -a tmp38=()\n  local -a tmp39=()\n\
    \  local -a tmp40=()\n  local -a tmp41=()\n  local -a tmp42=()\n  local -a tmp43=()\n\
    \  local -a tmp44=()\n  local -a tmp45=()\n  local -a tmp46=()\n  local -a tmp47=()\n\
    \  local -a tmp48=()\n  local -a tmp49=()\n  local -a tmp50=()\n  local -a tmp51=()\n\
    \  local -a tmp52=()\n  local -a tmp53=()\n  local -a tmp54=()\n  local -a tmp55=()\n\
    \ \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  echo $1 | tr ' ' '\\n'\
    \ | sort -n | tac | sed -e 's/1/One/g' -e 's/2/Two/g' -e 's/3/Three/g' -e 's/4/Four/g'\
    \ -e 's/5/Five/g' -e 's/6/Six/g' -e 's/7/Seven/g' -e 's/8/Eight/g' -e 's/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^ *//' | sed 's/ *$//' | sed 's/ /\", \"/g' | sed 's/^/\"\
    /' | sed 's/$/\"/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a sorted=()\n  local -a reversed=()\n\
    \  local -a final=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local\
    \ e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local\
    \ q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local\
    \ w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local\
    \ c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local\
    \ u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local\
    \ a=0\n  local b=0\n  local c=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo $(echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' ')\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use the following function to convert a number to its name:\n  #\
    \ >>> $(number_to_name 3)\n  # '\"Three\"'\n  # >>> $(number_to_name -1)\n  #\
    \ '\"-1\"'\n  # >>> $(number_to_name 10)\n  # '\"10\"'\n  #\n  # number_to_name()\
    \ {\n  #   case $1 in\n  #     1) echo '\"One\"';;\n  #     2) echo '\"Two\"';;\n\
    \  #     3) echo '\"Three\"';;\n  #     4) echo '\"Four\"';;\n  #     5) echo\
    \ '\"Five\"';;\n  #     6) echo '\"Six\"';;\n  #     7) echo '\"Seven\"';;\n \
    \ #     8) echo '\"Eight\"';;\n  #     9) echo '\"Nine\"';;\n  #     *) echo \"\
    \\\"$1\\\"\";;\n  #   esac\n  # }\n  #\n  # You can use the following function\
    \ to reverse an array:\n  # >>> $(reverse_array \"1 2 3\")\n  # [3, 2, 1]\n  #\n\
    \  # reverse_array() {\n  #   echo \"[$(echo $1 | tr ' ' ',' | rev)]\"\n  # }\n\
    \  #\n  # You can use the following function to sort an array:\n  # >>> $(sort_array\
    \ \"3 2 1\")\n  # [1, 2, 3]\n  #\n  # sort_array() {\n  #   echo \"[$(echo $1\
    \ | tr ' ' ',' | sort -n | tr '\\n' ',' | rev | cut -c 2- | rev)]\"\n  # }\n \
    \ #\n  # You can use the following function to convert an array to a string:\n\
    \  # >>> $(array_to_string \"1 2 3\")\n  # '\"1 2 3\"'\n  #\n  # array_to_string()\
    \ {\n  #   echo \"\\\"$(echo $1 | tr ' ' '\\n' | tr '\\n' ' ')\\\"\"\n  # }\n\
    \  #\n  # You can use the following function to convert\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw4gcyr2f.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpw4gcyr2f.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n   \
    \ local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n   \
    \ local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \   \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a sorted\n  local -a reversed\n  local -a final\n  array=($1)\n\
    \  for i in \"${array[@]}\"; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      result+=(\"\
    $i\")\n    fi\n  done\n  sorted=($(printf '%s\\n' \"${result[@]}\" | sort -n))\n\
    \  reversed=($(printf '%s\\n' \"${sorted[@]}\" | tac))\n  for i in \"${reversed[@]}\"\
    ; do\n    case \"$i\" in\n      1)\n        final+=('\"One\"')\n        ;;\n \
    \     2)\n        final+=('\"Two\"')\n        ;;\n      3)\n        final+=('\"\
    Three\"')\n        ;;\n      4)\n        final+=('\"Four\"')\n        ;;\n   \
    \   5)\n        final+=('\"Five\"')\n        ;;\n      6)\n        final+=('\"\
    Six\"')\n        ;;\n      7)\n        final+=('\"Seven\"')\n        ;;\n    \
    \  8)\n        final+=('\"Eight\"')\n        ;;\n      9)\n        final+=('\"\
    Nine\"')\n        ;;\n    esac\n  done\n  echo \"${final[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    local -a nums=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${nums[$i-1]})\n        fi\n    done\n    echo\
    \ \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local -a sorted\n    local i\n    local j\n    local k\n    local\
    \ n\n    local tmp\n    for ((i=0; i<${#arr[@]}; i++)); do\n        n=${arr[$i]}\n\
    \        if [[ $n -ge 1 && $n -le 9 ]]; then\n            sorted[${#sorted[@]}]=$n\n\
    \        fi\n    done\n    for ((i=0; i<${#sorted[@]}; i++)); do\n        for\
    \ ((j=i+1; j<${#sorted[@]}; j++)); do\n            if [[ ${sorted[$i]} -gt ${sorted[$j]}\
    \ ]]; then\n                tmp=${sorted[$i]}\n                sorted[$i]=${sorted[$j]}\n\
    \                sorted[$j]=$tmp\n            fi\n        done\n    done\n   \
    \ for ((i=0; i<${#sorted[@]}; i++)); do\n        n=${sorted[$i]}\n        for\
    \ ((j=0; j<${#nums[@]}; j++)); do\n            if [[ $n -eq $((j+1)) ]]; then\n\
    \                result[${#result[@]}]=\"\\\"${nums[$j]}\\\"\"\n            fi\n\
    \        done\n    done\n    echo \"[${result[@]}]\"\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=(\"$i\")\n\
    \    fi\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    local -a res=()\n    for i in $(echo ${arr[@]} | tr ' ' '\\n' | sort -r);\
    \ do\n      case $i in\n        1) res+=('\"One\"') ;;\n        2) res+=('\"Two\"\
    ') ;;\n        3) res+=('\"Three\"') ;;\n        4) res+=('\"Four\"') ;;\n   \
    \     5) res+=('\"Five\"') ;;\n        6) res+=('\"Six\"') ;;\n        7) res+=('\"\
    Seven\"') ;;\n        8) res+=('\"Eight\"') ;;\n        9) res+=('\"Nine\"') ;;\n\
    \      esac\n    done\n    echo \"[${res[@]}]\"\n  fi\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a numbers_sorted=(One Two Three Four Five Six Seven Eight Nine)\n  local\
    \ -a numbers_reversed=(Nine Eight Seven Six Five Four Three Two One)\n  local\
    \ -a numbers_sorted_reversed=(Nine Eight Seven Six Five Four Three Two One)\n\
    \  local -a numbers_index=(1 2 3 4 5 6 7 8 9)\n  local -a numbers_sorted_index=(1\
    \ 2 3 4 5 6 7 8 9)\n  local -a numbers_reversed_index=(9 8 7 6 5 4 3 2 1)\n  local\
    \ -a numbers_sorted_reversed_index=(9 8 7 6 5 4 3 2 1)\n  local -a numbers_index_sorted=(1\
    \ 2 3 4 5 6 7 8 9)\n  local -a numbers_index_reversed=(9 8 7 6 5 4 3 2 1)\n  local\
    \ -a numbers_index_sorted_reversed=(9 8 7 6 5 4 3 2 1)\n  local -a numbers_index_sorted_reversed_index=(1\
    \ 2 3 4 5 6 7 8 9)\n  local -a numbers_index_sorted_index=(1 2 3 4 5 6 7 8 9)\n\
    \  local -a numbers_index_reversed_index=(9 8 7 6 5 4 3 2 1)\n  local -a numbers_index_sorted_reversed_index=(1\
    \ 2 3 4 5 6 7 8 9)\n  local -a numbers_sorted_index_sorted=(1 2 3 4 5 6 7 8 9)\n\
    \  local -a numbers_sorted_index_reversed=(9 8 7 6 5 4 3 2 1)\n  local -a numbers_sorted_index_sorted_reversed=(9\
    \ 8 7 6 5 4 3 2 1)\n  local -a numbers_sorted_index_sorted_reversed_index=(1 2\
    \ 3 4 5 6 7 8 9)\n  local -a numbers_sorted_index_sorted_index=(1 2 3 4 5 6 7\
    \ 8 9)\n  local -a numbers_sorted_\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers\n  local -a names\n  local -a sorted\n  local\
    \ -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n\
    \  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local\
    \ -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n\
    \  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local\
    \ -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n\
    \  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local\
    \ -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n\
    \  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local\
    \ -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n\
    \  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local\
    \ -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n\
    \  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local\
    \ -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n\
    \  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local\
    \ -i h\n  local -i i\n  local -i j\n \n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint:\n    #   - Use the following arrays:\n    #       - numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    #       - numbers_index=(1 2\
    \ 3 4 5 6 7 8 9)\n    #   - Use the following functions:\n    #       - array_contains\n\
    \    #       - array_index\n    #       - array_reverse\n    #       - array_join\n\
    \    #       - array_sort\n    #       - array_filter\n    #       - array_map\n\
    \    #       - array_unique\n    #       - array_slice\n    #       - array_length\n\
    \    #       - array_push\n    #       - array_pop\n    #       - array_shift\n\
    \    #       - array_unshift\n    #       - array_to_string\n    #       - array_from_string\n\
    \    #       - array_to_json\n    #       - array_from_json\n    #       - array_to_yaml\n\
    \    #       - array_from_yaml\n    #       - array_to_csv\n    #       - array_from_csv\n\
    \    #       - array_to_xml\n    #       - array_from_xml\n    #       - array_to_html\n\
    \    #       - array_from_html\n    #       - array_to_sql\n    #       - array_from_sql\n\
    \    #       - array_to_php\n    #       - array_from_php\n    #       - array_to_ini\n\
    \    #       - array_from_ini\n    #       - array_to_csv\n    #       - array_from_csv\n\
    \    #       - array_to_xml\n    #       - array_from_xml\n    #       - array_to_html\n\
    \    #       - array_from_html\n    #       - array_to_sql\n    #       - array_from_sql\n\
    \    #       - array_to_php\n    #       - array_from_php\n    #       - array_to_ini\n\
    \    #       - array_from_ini\n    #       - array_to_csv\n    #       - array_from_csv\n\
    \    #      \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpivszdjbx.sh: line 71: syntax error near unexpected token `}''

    /tmp/tmpivszdjbx.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/[/;s/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ final=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i\
    \ l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local\
    \ -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a dict=(\n        [1]=\"One\"\n        [2]=\"Two\"\
    \n        [3]=\"Three\"\n        [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"\
    Six\"\n        [7]=\"Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n  \
    \  )\n    for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \       arr+=($i)\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n\
    \        echo \"[]\"\n        return\n    fi\n    IFS=$'\\n' sorted=($(sort <<<\"\
    ${arr[*]}\"))\n    unset IFS\n    for i in \"${sorted[@]}\"; do\n        res+=(\"\
    \\\"${dict[$i]}\\\"\")\n    done\n    echo \"[${res[*]}]\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n \
    \ local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | sed 's/^/\\\"/g;s/$/\\\"/g' | tr '\\n' ' ' | sed 's/ $//g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  local\
    \ -a res\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n  local\
    \ -a tmp\n  local i\n  local j\n  local k\n  local n\n  local len\n  local num\n\
    \  local str\n  local -i idx\n\n  arr=($1)\n  len=${#arr[@]}\n  for ((i=0; i<len;\
    \ i++)); do\n    num=${arr[i]}\n    if [[ $num =~ ^[1-9]$ ]]; then\n      res+=($num)\n\
    \    fi\n  done\n  len=${#res[@]}\n  for ((i=0; i<len; i++)); do\n    for ((j=i+1;\
    \ j<len; j++)); do\n      if [[ ${res[i]} -gt ${res[j]} ]]; then\n        tmp=${res[i]}\n\
    \        res[i]=${res[j]}\n        res[j]=$tmp\n      fi\n    done\n  done\n \
    \ for ((i=0; i<len; i++)); do\n    num=${res[i]}\n    idx=$num-1\n    res[i]=${nums[idx]}\n\
    \  done\n  for ((i=0; i<len; i++)); do\n    str=${res[i]}\n    res[i]=\"\\\"$str\\\
    \"\"\n  done\n  echo ${res[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local\
    \ -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local\
    \ -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted\n  local -a reversed\n  local i\n  local j\n\n  for\
    \ ((i = 0; i < ${#array[@]}; i++)); do\n    if [[ ${array[$i]} -ge 1 && ${array[$i]}\
    \ -le 9 ]]; then\n      sorted[${#sorted[@]}]=${array[$i]}\n    fi\n  done\n\n\
    \  if [[ ${#sorted[@]} -gt 0 ]]; then\n    sorted=($(echo ${sorted[@]} | tr '\
    \ ' '\\n' | sort -n))\n    for ((i = 0; i < ${#sorted[@]}; i++)); do\n      for\
    \ ((j = 0; j < ${#numbers[@]}; j++)); do\n        if [[ ${sorted[$i]} -eq $((j\
    \ + 1)) ]]; then\n          reversed[${#reversed[@]}]=${numbers[$j]}\n       \
    \ fi\n      done\n    done\n  fi\n\n  if [[ ${#reversed[@]} -gt 0 ]]; then\n \
    \   reversed=($(echo ${reversed[@]} | tr ' ' '\\n' | tac))\n    for ((i = 0; i\
    \ < ${#reversed[@]}; i++)); do\n      result[${#result[@]}]=\"\\\"${reversed[$i]}\\\
    \"\"\n    done\n  fi\n\n  echo ${result[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a new_array\n  local -a sorted_array\n  local -a reversed_array\n  local\
    \ -a result_array\n  local -a numbers=(\n    [1]=\"One\"\n    [2]=\"Two\"\n  \
    \  [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"\
    Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local ee\n \
    \ local ff\n  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n  local\
    \ ll\n  local mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local rr\n\
    \  local ss\n  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n  local\
    \ yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n  local\
    \ eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n  local\
    \ kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n  local\
    \ qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n  local\
    \ www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n  local\
    \ cccc\n  local dddd\n  local eeee\n  local ffff\n  local gggg\n  local hhhh\n\
    \  local iiii\n  local jjjj\n  local kkkk\n  local llll\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a digits=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -i i=0\n    local -i j=0\n  \
    \  local -i k=0\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [[ ${array[$i]}\
    \ -ge 1 && ${array[$i]} -le 9 ]]; then\n            sorted[$j]=${array[$i]}\n\
    \            ((j++))\n        fi\n    done\n    if [[ ${#sorted[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n        return\n    fi\n    for ((i=0; i<${#sorted[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#sorted[@]}; j++)); do\n            if [[\
    \ ${sorted[$i]} -gt ${sorted[$j]} ]]; then\n                local tmp=${sorted[$i]}\n\
    \                sorted[$i]=${sorted[$j]}\n                sorted[$j]=$tmp\n \
    \           fi\n        done\n    done\n    for ((i=${#sorted[@]}-1; i>=0; i--));\
    \ do\n        result[$k]=${digits[${sorted[$i]}-1]}\n        ((k++))\n    done\n\
    \    echo \"[\\\"${result[@]}\\\"]\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=($i)\n    fi\n  done\n  result=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | sort -nr))\n  for i in \"${result[@]}\"; do\n    result[$i]=${dict[$i]}\n\
    \  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_len=(3 4 5 4 3 5 5 5 4)\n  local -a nums_rev_len=(4 5 5 5 3 4 4 4 3)\n\
    \  local -a nums_len_rev=(4 4 4 5 3 3 5 5 4)\n  local -a nums_rev_len_rev=(3 4\
    \ 4 5 5 3 4 4 3)\n  local -a nums_len_rev_rev=(3 3 5 5 4 4 4 5 3)\n  local -a\
    \ nums_rev_len_rev_rev=(4 5 5 4 4 4 3 5 3)\n  local -a nums_len_rev_rev_rev=(3\
    \ 5 5 4 4 4 3 4 3)\n  local -a nums_rev_len_rev_rev_rev=(4 4 4 3 4 4 3 5 3)\n\
    \  local -a nums_len_rev_rev_rev_rev=(3 4 4 3 4 4 3 4 3)\n  local -a nums_rev_len_rev_rev_rev_rev=(4\
    \ 4 4 3 4 4 3 4 3)\n  local -a nums_len_rev_rev_rev_rev_rev=(3 4 4 3 4 4 3 4 3)\n\
    \  local -a nums_rev_len_rev_rev_rev_rev_rev=(4 4 4 3 4 4 3 4 3)\n  local -a nums_len_rev_rev_rev_rev_rev_rev=(3\
    \ 4 4 3 4 4 3 4 3)\n  local -a nums_rev_len_rev_rev_rev_rev_rev_rev=(4 4 4 3 4\
    \ 4 3 4 3)\n  local -a nums_len_rev_rev_rev_rev_rev_rev_rev=(3 4 4 3 4 4 3 4 3)\n\
    \  local -a nums_rev_len_rev_rev_rev_rev_rev_rev_rev=(4 4 4 3 4 4 3 4 3)\n  local\
    \ -a nums_len_\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n\
    \  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  echo $1 | tr ' ' '\\n' | sort -n | tac | sed -E 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^ *//g;s/ *$//g'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  arr=($(echo ${arr[@]} | tr ' ' '\\n' | sort -nr | tr '\\n' ' '))\n\
    \  for i in ${!arr[@]}; do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"\
    ';;\n      2) arr[$i]='\"Two\"';;\n      3) arr[$i]='\"Three\"';;\n      4) arr[$i]='\"\
    Four\"';;\n      5) arr[$i]='\"Five\"';;\n      6) arr[$i]='\"Six\"';;\n     \
    \ 7) arr[$i]='\"Seven\"';;\n      8) arr[$i]='\"Eight\"';;\n      9) arr[$i]='\"\
    Nine\"';;\n    esac\n  done\n  echo ${arr[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a nums\n  local -a words\n  local -a sorted\n  local -a\
    \ reversed\n  local -a final\n  local i\n  local j\n  local k\n  local n\n  local\
    \ w\n  local s\n  local r\n  local f\n  array=($1)\n  result=()\n  nums=(1 2 3\
    \ 4 5 6 7 8 9)\n  words=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"\
    Seven\" \"Eight\" \"Nine\")\n  sorted=()\n  reversed=()\n  final=()\n  for i in\
    \ \"${array[@]}\"; do\n    for j in \"${nums[@]}\"; do\n      if [[ \"$i\" -eq\
    \ \"$j\" ]]; then\n        sorted+=(\"$i\")\n      fi\n    done\n  done\n  for\
    \ k in \"${sorted[@]}\"; do\n    reversed=( \"$k\" \"${reversed[@]}\" )\n  done\n\
    \  for n in \"${reversed[@]}\"; do\n    for w in \"${words[@]}\"; do\n      if\
    \ [[ \"$n\" -eq \"${nums[$w]}\" ]]; then\n        final+=(\"$w\")\n      fi\n\
    \    done\n  done\n  for s in \"${final[@]}\"; do\n    result+=(\"\\\"$s\\\"\"\
    )\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a arr2=()\n    local -a arr3=()\n    local -a arr4=()\n    local -a\
    \ arr5=()\n    local -a arr6=()\n    local -a arr7=()\n    local -a arr8=()\n\
    \    local -a arr9=()\n    local -a arr10=()\n    local -a arr11=()\n    local\
    \ -a arr12=()\n    local -a arr13=()\n    local -a arr14=()\n    local -a arr15=()\n\
    \    local -a arr16=()\n    local -a arr17=()\n    local -a arr18=()\n    local\
    \ -a arr19=()\n    local -a arr20=()\n    local -a arr21=()\n    local -a arr22=()\n\
    \    local -a arr23=()\n    local -a arr24=()\n    local -a arr25=()\n    local\
    \ -a arr26=()\n    local -a arr27=()\n    local -a arr28=()\n    local -a arr29=()\n\
    \    local -a arr30=()\n    local -a arr31=()\n    local -a arr32=()\n    local\
    \ -a arr33=()\n    local -a arr34=()\n    local -a arr35=()\n    local -a arr36=()\n\
    \    local -a arr37=()\n    local -a arr38=()\n    local -a arr39=()\n    local\
    \ -a arr40=()\n    local -a arr41=()\n    local -a arr42=()\n    local -a arr43=()\n\
    \    local -a arr44=()\n    local -a arr45=()\n    local -a arr46=()\n    local\
    \ -a arr47=()\n    local -a arr48=()\n    local -a arr49=()\n    local -a arr50=()\n\
    \    local -a arr51=()\n    local -a arr52=()\n    local -a arr53=()\n    local\
    \ -a arr54=()\n    local -a arr55=()\n    local -a arr56=()\n    local -a arr57=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use the following command to convert a number to a string:\n  # echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n  #\n\
    \  # You can use the following command to convert a string to a number:\n  # echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | grep -n $string | cut -d':'\
    \ -f1\n  #\n  # You can use the following command to sort an array:\n  # echo\
    \ $array | tr ' ' '\\n' | sort | tr '\\n' ' '\n  #\n  # You can use the following\
    \ command to reverse an array:\n  # echo $array | tr ' ' '\\n' | tac | tr '\\\
    n' ' '\n  #\n  # You can use the following command to convert a number to a string:\n\
    \  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n\
    \  #\n  # You can use the following command to convert a string to a number:\n\
    \  # echo \"One Two Three Four Five Six Seven Eight Nine\" | grep -n $string |\
    \ cut -d':' -f1\n  #\n  # You can use the following command to sort an array:\n\
    \  # echo $array | tr ' ' '\\n' | sort | tr '\\n' ' '\n  #\n  # You can use the\
    \ following command to reverse an array:\n  # echo $array | tr ' ' '\\n' | tac\
    \ | tr '\\n' ' '\n  #\n  # You can use the following command to convert a number\
    \ to a string:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut\
    \ -d' ' -f$number\n  #\n  # You can use the following command to convert a string\
    \ to a number:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\" | grep\
    \ -n $string | cut -d':' -f1\n  #\n  # You can use the following command to sort\
    \ an array:\n  # echo $array | tr ' ' '\\n' | sort | tr '\\n' ' '\n  #\n  # You\
    \ can use the following command to reverse an array:\n\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu7y4_z4o.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpu7y4_z4o.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local\
    \ -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(${nums[$i-1]})\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' |\
    \ sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a arr_sorted=()\n  local -a arr_reversed=()\n  local -a arr_result=()\n  local\
    \ -a arr_result_final=()\n  local -a arr_result_final_string=()\n  local -a arr_result_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string=()\n  local -a arr_result_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string=()\n  local -a arr_result_final_string_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string_final_string=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string_final_string_final=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string_final_string_final_string=()\n\
    \  local -a arr_result_final_string_final_string_final_string_final_string_final_string_final_string_final_string_final_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | tac | tr '\\n' ' ' | sed 's/[0-9]/&\" \"\
    /g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g'\
    \ | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' |\
    \ sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed\
    \ 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\"\
    \ \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"\
    /g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g'\
    \ | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' |\
    \ sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed\
    \ 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\" \"/g' | sed 's/[0-9]/&\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps477w9vn.sh: line 18: unexpected EOF while looking for matching
    `''''

    /tmp/tmps477w9vn.sh: line 35: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  echo \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | sort -r\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local i\n  local j\n\n  for ((i\
    \ = 0; i < ${#array[@]}; i++)); do\n    if [[ ${array[$i]} -ge 1 && ${array[$i]}\
    \ -le 9 ]]; then\n      sorted[${#sorted[@]}]=${array[$i]}\n    fi\n  done\n\n\
    \  if [[ ${#sorted[@]} -gt 0 ]]; then\n    sorted=($(for ((i = 0; i < ${#sorted[@]};\
    \ i++)); do echo ${sorted[$i]}; done | sort -n))\n    for ((i = ${#sorted[@]}\
    \ - 1; i >= 0; i--)); do\n      reversed[${#reversed[@]}]=${sorted[$i]}\n    done\n\
    \  fi\n\n  for ((i = 0; i < ${#reversed[@]}; i++)); do\n    for ((j = 0; j < ${#numbers[@]};\
    \ j++)); do\n      if [[ ${reversed[$i]} -eq $((j + 1)) ]]; then\n        result[${#result[@]}]=\"\
    \\\"${numbers[$j]}\\\"\"\n      fi\n    done\n  done\n\n  echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a sorted=()\n    local -a reversed=()\n  \
    \  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\"\
    \ \"Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge\
    \ 1 && $i -le 9 ]]; then\n            sorted+=($i)\n        fi\n    done\n   \
    \ sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for i in \"${sorted[@]}\"\
    ; do\n        reversed+=(${names[$((i-1))]})\n    done\n    reversed=($(printf\
    \ \"%s\\n\" \"${reversed[@]}\" | tac))\n    for i in \"${reversed[@]}\"; do\n\
    \        result+=(\\\"$i\\\")\n    done\n    echo \"[${result[@]}]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # echo \"\\\"$1\\\"\"\n    # echo \"$1\"\n    # echo \"${1// /,}\"\n    #\
    \ echo \"${1// /,}\" | tr -d '\"'\n    # echo \"${1// /,}\" | tr -d '\"' | sed\
    \ 's/^,//'\n    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//' | sed 's/,$//'\n\
    \    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//' | sed 's/,$//' | sed 's/,/\
    \ /g'\n    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//' | sed 's/,$//' | sed\
    \ 's/,/ /g' | sed 's/^[ \\t]*//;s/[ \\t]*$//'\n    # echo \"${1// /,}\" | tr -d\
    \ '\"' | sed 's/^,//' | sed 's/,$//' | sed 's/,/ /g' | sed 's/^[ \\t]*//;s/[ \\\
    t]*$//' | sed 's/ /,/g'\n    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//'\
    \ | sed 's/,$//' | sed 's/,/ /g' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | sed 's/ /,/g'\
    \ | sed 's/^,//'\n    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//' | sed 's/,$//'\
    \ | sed 's/,/ /g' | sed 's/^[ \\t]*//;s/[ \\t]*$//' | sed 's/ /,/g' | sed 's/^,//'\
    \ | sed 's/,$//'\n    # echo \"${1// /,}\" | tr -d '\"' | sed 's/^,//' | sed 's/,$//'\
    \ | sed '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptr_gav32.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmptr_gav32.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n  local\
    \ -i mmm=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a tmp=()\n  local -a tmp2=()\n  local -a tmp3=()\n\
    \  local -a tmp4=()\n  local -a tmp5=()\n  local -a tmp6=()\n  local -a tmp7=()\n\
    \  local -a tmp8=()\n  local -a tmp9=()\n  local -a tmp10=()\n  local -a tmp11=()\n\
    \  local -a tmp12=()\n  local -a tmp13=()\n  local -a tmp14=()\n  local -a tmp15=()\n\
    \  local -a tmp16=()\n  local -a tmp17=()\n  local -a tmp18=()\n  local -a tmp19=()\n\
    \  local -a tmp20=()\n  local -a tmp21=()\n  local -a tmp22=()\n  local -a tmp23=()\n\
    \  local -a tmp24=()\n  local -a tmp25=()\n  local -a tmp26=()\n  local -a tmp27=()\n\
    \  local -a tmp28=()\n  local -a tmp29=()\n  local -a tmp30=()\n  local -a tmp31=()\n\
    \  local -a tmp32=()\n  local -a tmp33=()\n  local -a tmp34=()\n  local -a tmp35=()\n\
    \  local -a tmp36=()\n  local -a tmp37=()\n  local -a tmp38=()\n  local -a tmp39=()\n\
    \  local -a tmp40=()\n  local -a tmp41=()\n  local -a tmp42=()\n  local -a tmp43=()\n\
    \  local -a tmp44=()\n  local -a tmp45=()\n  local -a tmp46=()\n  local -a tmp47=()\n\
    \  local -a tmp48=()\n  local -a tmp49=()\n  local -a tmp50=()\n  local -a tmp51=()\n\
    \  local -a tmp52=()\n  local -a tmp53=()\n  local -a tmp54=()\n  local -a tmp55=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # TODO: implement this\
    \ function\n    # HINT: use the following command to reverse an array:\n    #\
    \       array=(1 2 3 4 5)\n    #       reversed_array=($(echo \"${array[@]}\"\
    \ | rev))\n    #       echo ${reversed_array[@]}\n    #       # prints \"5 4 3\
    \ 2 1\"\n    #\n    # HINT: use the following command to replace a number by its\
    \ name:\n    #       echo \"One Two Three Four Five Six Seven Eight Nine\" | cut\
    \ -d' ' -f1\n    #       # prints \"One\"\n    #\n    # HINT: use the following\
    \ command to get the index of a number:\n    #       echo \"One Two Three Four\
    \ Five Six Seven Eight Nine\" | grep -w \"Five\" | cut -d' ' -f1\n    #      \
    \ # prints \"4\"\n    #\n    # HINT: use the following command to get the index\
    \ of a number:\n    #       echo \"One Two Three Four Five Six Seven Eight Nine\"\
    \ | grep -w \"Five\" | cut -d' ' -f1\n    #       # prints \"4\"\n    #\n    #\
    \ HINT: use the following command to get the index of a number:\n    #       echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | grep -w \"Five\" | cut -d'\
    \ ' -f1\n    #       # prints \"4\"\n    #\n    # HINT: use the following command\
    \ to get the index of a number:\n    #       echo \"One Two Three Four Five Six\
    \ Seven Eight Nine\" | grep -w \"Five\" | cut -d' ' -f1\n    #       # prints\
    \ \"4\"\n    #\n    # HINT: use the following command to get the index of a number:\n\
    \    #       echo \"One Two Three Four Five Six Seven Eight Nine\" | grep -w \"\
    Five\" | cut -d' ' -f1\n    #       # prints \"4\"\n    #\n    # HINT: use the\
    \ following command to get the index of a number:\n    #       echo \"One Two\
    \ Three Four Five Six Seven Eight Nine\" | grep -w \"Five\" | cut -d' ' -f1\n\
    \    #       # prints \"4\"\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqo3z2ifw.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpqo3z2ifw.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr \" \" \"\\n\" | sort -n | tac | tr \"\\n\" \" \" | sed 's/[0-9]/\\\
    '\"$(echo $1 | tr \" \" \"\\n\" | sort -n | tac | tr \"\\n\" \" \" | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\\
    &/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\\&/g' | sed 's/[0-9]/\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplkfn64u2.sh: line 18: unexpected EOF while looking for matching
    `''''

    /tmp/tmplkfn64u2.sh: line 35: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local aa\n  local bb\n  local cc\n  local dd\n  local\
    \ ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local jj\n  local kk\n\
    \  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n  local qq\n  local\
    \ rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local ww\n  local xx\n\
    \  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n  local ddd\n\
    \  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n  local jjj\n\
    \  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n  local ppp\n\
    \  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n  local vvv\n\
    \  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n  local bbbb\n\
    \  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local gggg\n  local\
    \ hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n  local mmmm\n\
    \  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local rrrr\n  local\
    \ ssss\n  local tttt\n  local uuuu\n  local vvvv\n  local wwww\n  local xxxx\n\
    \  local yyy\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=($i)\n\
    \        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo \"[]\"\
    \n    else\n        echo \"[$(printf '\"%s\" ' \"${arr[@]}\" | sort -nr | sed\
    \ 's/^/\\x27/g' | sed 's/ /\\x27, \\x27/g')]\"\n    fi\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a new_array=()\n    local -a result=()\n    local -a dict=([1]=\"\
    One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\"\
    \ [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[\
    \ $i -ge 1 && $i -le 9 ]]; then\n            new_array+=($i)\n        fi\n   \
    \ done\n    new_array=($(printf \"%s\\n\" \"${new_array[@]}\" | sort -n))\n  \
    \  for i in \"${new_array[@]}\"; do\n        result+=(${dict[$i]})\n    done\n\
    \    result=($(printf \"%s\\n\" \"${result[@]}\" | tac))\n    echo \"[\\\"${result[@]//\
    \ /\\\", \\\"}\\\"]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort -r))\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"';;\n      2) arr[$i]='\"\
    Two\"';;\n      3) arr[$i]='\"Three\"';;\n      4) arr[$i]='\"Four\"';;\n    \
    \  5) arr[$i]='\"Five\"';;\n      6) arr[$i]='\"Six\"';;\n      7) arr[$i]='\"\
    Seven\"';;\n      8) arr[$i]='\"Eight\"';;\n      9) arr[$i]='\"Nine\"';;\n  \
    \  esac\n  done\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following command to convert a number to its name:\n  \
    \  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n\
    \    # You can use the following command to reverse an array:\n    # echo \"${array[@]}\"\
    \ | rev\n    # You can use the following command to sort an array:\n    # echo\
    \ \"${array[@]}\" | sort\n    # You can use the following command to convert an\
    \ array to a string:\n    # echo \"${array[@]}\" | tr ' ' ','\n    # You can use\
    \ the following command to convert a string to an array:\n    # echo \"$string\"\
    \ | tr ',' ' '\n    # You can use the following command to convert a string to\
    \ an array:\n    # echo \"$string\" | tr ',' ' '\n    # You can use the following\
    \ command to convert a string to an array:\n    # echo \"$string\" | tr ',' '\
    \ '\n    # You can use the following command to convert a string to an array:\n\
    \    # echo \"$string\" | tr ',' ' '\n    # You can use the following command\
    \ to convert a string to an array:\n    # echo \"$string\" | tr ',' ' '\n    #\
    \ You can use the following command to convert a string to an array:\n    # echo\
    \ \"$string\" | tr ',' ' '\n    # You can use the following command to convert\
    \ a string to an array:\n    # echo \"$string\" | tr ',' ' '\n    # You can use\
    \ the following command to convert a string to an array:\n    # echo \"$string\"\
    \ | tr ',' ' '\n    # You can use the following command to convert a string to\
    \ an array:\n    # echo \"$string\" | tr ',' ' '\n    # You can use the following\
    \ command to convert a string to an array:\n    # echo \"$string\" | tr ',' '\
    \ '\n    # You can use the following command to convert a string to an array:\n\
    \    # echo \"$string\" | tr ',' ' '\n    # You can use the following command\
    \ to convert a string to an array:\n    # echo \"$string\" | tr ',' ' '\n    #\
    \ You can use the following command to convert a string to an\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptimv_o3c.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmptimv_o3c.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(\n    [1]=\"One\"\n    [2]=\"Two\"\n \
    \   [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"\
    Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  for i in \"${array[@]}\"\
    ; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      result+=(\"${dict[$i]}\")\n\
    \    fi\n  done\n  echo \"[$(IFS=,; echo \"${result[*]}\" | rev)]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted\n    local -a reversed\n    local -a result\n    local -a\
    \ numbers=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\n\
    \        [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n\
    \        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort\
    \ -n))\n    for ((i=${#sorted[@]}-1; i>=0; i--)); do\n        reversed+=(${sorted[i]})\n\
    \    done\n    for i in \"${reversed[@]}\"; do\n        result+=(${numbers[$i]})\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local\
    \ -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n\
    \  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local\
    \ -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n\
    \  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local\
    \ -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local -i k\n\
    \  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n\
    \  local -i h\n  local -i i\n  local -i j\n  local\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n      sorted+=($i)\n    fi\n  done\n  sorted=($(printf \"%s\\\
    n\" \"${sorted[@]}\" | sort -n))\n  for i in \"${sorted[@]}\"; do\n    res+=(${nums[$i-1]})\n\
    \  done\n  echo \"[$(printf '\"%s\", ' \"${res[@]}\")]\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tr '\\n' ' '))\n    for i in \"${!arr[@]}\"; do\n        case ${arr[$i]}\
    \ in\n            1) arr[$i]='\"One\"';;\n            2) arr[$i]='\"Two\"';;\n\
    \            3) arr[$i]='\"Three\"';;\n            4) arr[$i]='\"Four\"';;\n \
    \           5) arr[$i]='\"Five\"';;\n            6) arr[$i]='\"Six\"';;\n    \
    \        7) arr[$i]='\"Seven\"';;\n            8) arr[$i]='\"Eight\"';;\n    \
    \        9) arr[$i]='\"Nine\"';;\n        esac\n    done\n    echo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -i i=0\n    local -i j=0\n  \
    \  local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n\
    \    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local\
    \ -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i\
    \ ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i\
    \ iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]];\
    \ then\n            res+=(${nums[$i-1]})\n        fi\n    done\n    echo $(printf\
    \ '%s\\n' \"${res[@]}\" | sort -r)\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n\
    \  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n\
    \  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n\
    \  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n\
    \  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n\
    \  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i\
    \ nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n \
    \ local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i\
    \ ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n \
    \ local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
    \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n\
    \  local -i kkk=0\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in ${arr[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n\
    \    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in ${array[@]}; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${names[$i-1]})\n\
    \        fi\n    done\n    echo $(echo ${result[@]} | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' ')\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local num\n  for num in $1; do\n    if [[ $num -ge 1 && $num -le 9 ]]; then\n\
    \      arr+=($num)\n    fi\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    for num in $(echo ${arr[@]} | tr ' ' '\\n' | sort -nr);\
    \ do\n      res+=(${nums[$num-1]})\n    done\n    echo \"[$(printf '\"%s\", '\
    \ \"${res[@]}\")]\"\n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr ' ' '\\n' | sort -n | uniq | tac | sed 's/1/One/g' | sed 's/2/Two/g'\
    \ | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g' | sed 's/6/Six/g'\
    \ | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g' | sed 's/^/\\\"/g'\
    \ | sed 's/$/\\\"/g' | tr '\\n' ' ' | sed 's/^\\[//g' | sed 's/\\]$//g'\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local i\n\
    \    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            sorted+=($i)\n        fi\n    done\n    sorted=($(printf \"%s\\n\"\
    \ \"${sorted[@]}\" | sort -n))\n    for ((i=${#sorted[@]}-1; i>=0; i--)); do\n\
    \        reversed+=(${sorted[i]})\n    done\n    for i in \"${reversed[@]}\";\
    \ do\n        result+=(${numbers[i-1]})\n    done\n    echo \"[$(printf \"\\\"\
    %s\\\", \" \"${result[@]}\")]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # TODO: Write your code\
    \ here\n    echo \"[]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | grep -E '^[1-9]$' | sort -r | tr '\\n' ' ' | sed 's/[0-9]/&/g'\
    \ | sed 's/[0-9]/\"&\"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result\n  local -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  for i in \"${array[@]}\"; do\n\
    \    if [ \"$i\" -ge 1 ] && [ \"$i\" -le 9 ]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | rev | tr ' ' ',' | sed 's/^/[/' |\
    \ sed 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  echo \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n \
    \ local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8s375ng_.sh: line 187: syntax error near unexpected token `}''

    /tmp/tmp8s375ng_.sh: line 187: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8s375ng_.sh: line 187: syntax error near unexpected token `}''

    /tmp/tmp8s375ng_.sh: line 187: `}''

    '
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local\
    \ -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n\
    \  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local\
    \ -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n\
    \  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i ii\n  local\
    \ -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i\
    \ oo\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n\
    \  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n \
    \ local -i zz\n  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local\
    \ -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n  local -i iii\n  local\
    \ -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local\
    \ -i ooo\n  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local\
    \ -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local\
    \ -i yyy\n  local -i zzz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n  local\
    \ -i ddd\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local array=($1)\n  local\
    \ result=()\n  local number_to_name=(\n    [1]=\"One\"\n    [2]=\"Two\"\n    [3]=\"\
    Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"Seven\"\
    \n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  for number in \"${array[@]}\"; do\n\
    \    if [[ \"$number\" =~ ^[1-9]$ ]]; then\n      result+=(\"${number_to_name[$number]}\"\
    )\n    fi\n  done\n  echo \"[$(IFS=,; echo \"${result[*]/#/\\\"}\")]\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local i\n    for i in \"${array[@]}\"; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n       \
    \ fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010367
