name: HumanEval_63_fibfib
language: sh
prompt: "#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2)\
  \ == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  # >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"\
  8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n"
tests: "}\n\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\
  5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\"\
  ) = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\"\
  ) = \"927\" ]]\n}\n\nrun_test"
completions: ["    local n=$1\n    if [ $n -eq 0 ]; then\n        echo 0\n    elif\
    \ [ $n -eq 1 ]; then\n        echo 0\n    elif [ $n -eq 2 ]; then\n        echo\
    \ 1\n    else\n        echo $(( $(fibfib $((n-1))) + $(fibfib $((n-2))) + $(fibfib\
    \ $((n-3))) ))\n    fi", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif\
    \ [[ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n      \
    \  echo 1\n    else\n        echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1\
    \ - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi", "    if [ $1 -eq 0 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq\
    \ 2 ]; then\n        echo 1\n    else\n        echo $(($(fibfib $(($1-1))) + $(fibfib\
    \ $(($1-2))) + $(fibfib $(($1-3)))))\n    fi", "  if [ $1 -eq 0 ]; then\n    echo\
    \ 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif [ $1 -eq 2 ]; then\n    echo\
    \ 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) +\
    \ $(fibfib $(( $1 - 3 ))) ))\n  fi", "    if [ $1 -eq 0 ]; then\n        echo\
    \ 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n\
    \        echo 1\n    else\n        echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib\
    \ $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi", "    if [ $1 -eq 0 ];\
    \ then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif\
    \ [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(( $(fibfib $((\
    \ $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi",
  "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif\
    \ [ $1 -eq 2 ]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 )))\
    \ + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi", "    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(($(fibfib\
    \ $(($1-1))) + $(fibfib $(($1-2))) + $(fibfib $(($1-3)))))\n    fi", "    if [\
    \ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo\
    \ 0\n    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(( $(fibfib\
    \ $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi",
  "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n      \
    \  echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo\
    \ $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3\
    \ ))) ))\n    fi", "    local n=$1\n    local a=0\n    local b=0\n    local c=1\n\
    \    local d=0\n    for ((i=2; i<=n; i++)); do\n        d=$((a+b+c))\n       \
    \ a=$b\n        b=$c\n        c=$d\n    done\n    echo $d", "  if [ $1 -eq 0 ];\
    \ then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif [ $1 -eq 2 ];\
    \ then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $((\
    \ $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi", "    if [ $1 -eq 0 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq\
    \ 2 ]; then\n        echo 1\n    else\n        echo $(( $(fibfib $(( $1 - 1 )))\
    \ + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi", "  if [ $1\
    \ -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif [ $1\
    \ -eq 2 ]; then\n    echo 1\n  else\n    echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib\
    \ $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n  fi", "    if [[ $1 -eq 0 ]];\
    \ then\n        echo \"0\"\n    elif [[ $1 -eq 1 ]]; then\n        echo \"0\"\n\
    \    elif [[ $1 -eq 2 ]]; then\n        echo \"1\"\n    else\n        echo \"\
    $(( $(fibfib \"$(( $1 - 1 ))\") + $(fibfib \"$(( $1 - 2 ))\") + $(fibfib \"$((\
    \ $1 - 3 ))\") ))\"\n    fi", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n \
    \   elif [[ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n\
    \        echo 1\n    else\n        echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib\
    \ $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi", "    if [ $1 -eq 0 ];\
    \ then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif\
    \ [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(( $(fibfib $((\
    \ $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 ))) ))\n    fi",
  "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n      \
    \  echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo\
    \ $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3\
    \ ))) ))\n    fi", "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq\
    \ 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 1\n   \
    \ else\n        echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib\
    \ $(( $1 - 3 ))) ))\n    fi", "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1\
    \ -eq 1 ]; then\n    echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 1\n  else\n \
    \   echo $(( $(fibfib $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $((\
    \ $1 - 3 ))) ))\n  fi"]
stop_tokens:
- "\n}"
