language: sh
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local\
    \ n=$1\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n   \
    \     a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    ((i++))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n        b=0\n \
    \       c=2\n        d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [[ $i -le $n ]]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n        b=0\n \
    \       c=2\n        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [[ $1 -eq 0 ]]; then\n    echo \"0\"\n  elif [[ $1 -eq 1 ]]; then\n\
    \    echo \"0\"\n  elif [[ $1 -eq 2 ]]; then\n    echo \"2\"\n  elif [[ $1 -eq\
    \ 3 ]]; then\n    echo \"0\"\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4\
    \ $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\
    \ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        fib4_1=0\n        fib4_2=0\n  \
    \      fib4_3=2\n        fib4_4=0\n        for ((i=4; i<=$1; i++)); do\n     \
    \       fib4_5=$((fib4_1 + fib4_2 + fib4_3 + fib4_4))\n            fib4_1=$fib4_2\n\
    \            fib4_2=$fib4_3\n            fib4_3=$fib4_4\n            fib4_4=$fib4_5\n\
    \        done\n        echo $fib4_5\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for i in $(seq 4 $1); do\n            e=$((a+b+c+d))\n \
    \           a=$b\n            b=$c\n            c=$d\n            d=$e\n     \
    \   done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ \"$1\" -lt \"4\" ]; then\n        echo \"0\"\n    else\n  \
    \      echo \"$(($(fib4 \"$(($1-1))\") + $(fib4 \"$(($1-2))\") + $(fib4 \"$(($1-3))\"\
    ) + $(fib4 \"$(($1-4))\")))\"\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    ((i++))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n    elif [[ $1 -eq\
    \ 1 ]]; then\n        echo \"0\"\n    elif [[ $1 -eq 2 ]]; then\n        echo\
    \ \"2\"\n    elif [[ $1 -eq 3 ]]; then\n        echo \"0\"\n    else\n       \
    \ a=0\n        b=0\n        c=2\n        d=0\n        for i in $(seq 4 $1); do\n\
    \            e=$((a+b+c+d))\n            a=$b\n            b=$c\n            c=$d\n\
    \            d=$e\n        done\n        echo \"$e\"\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n\
    \    local fib4_3=0\n    local fib4_4=0\n    local fib4_5=0\n    local fib4_6=0\n\
    \    local fib4_7=0\n    local fib4_8=0\n    local fib4_9=0\n    local fib4_10=0\n\
    \    local fib4_11=0\n    local fib4_12=0\n    local fib4_13=0\n    local fib4_14=0\n\
    \    local fib4_15=0\n    local fib4_16=0\n    local fib4_17=0\n    local fib4_18=0\n\
    \    local fib4_19=0\n    local fib4_20=0\n    local fib4_21=0\n    local fib4_22=0\n\
    \    local fib4_23=0\n    local fib4_24=0\n    local fib4_25=0\n    local fib4_26=0\n\
    \    local fib4_27=0\n    local fib4_28=0\n    local fib4_29=0\n    local fib4_30=0\n\
    \    local fib4_31=0\n    local fib4_32=0\n    local fib4_33=0\n    local fib4_34=0\n\
    \    local fib4_35=0\n    local fib4_36=0\n    local fib4_37=0\n    local fib4_38=0\n\
    \    local fib4_39=0\n    local fib4_40=0\n    local fib4_41=0\n    local fib4_42=0\n\
    \    local fib4_43=0\n    local fib4_44=0\n    local fib4_45=0\n    local fib4_46=0\n\
    \    local fib4_47=0\n    local fib4_48=0\n    local fib4_49=0\n    local fib4_50=0\n\
    \    local fib4_51=0\n    local fib4_52=0\n    local fib4_53=0\n    local fib4_54=0\n\
    \    local fib4_55=0\n   \n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 2
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -lt 0 ]; then\n        echo \"Error: $1 is not a positive\
    \ integer.\"\n        return 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo\
    \ 0\n        return 0\n    fi\n    if [ $1 -eq 1 ]; then\n        echo 0\n   \
    \     return 0\n    fi\n    if [ $1 -eq 2 ]; then\n        echo 2\n        return\
    \ 0\n    fi\n    if [ $1 -eq 3 ]; then\n        echo 0\n        return 0\n   \
    \ fi\n    if [ $1 -eq 4 ]; then\n        echo 2\n        return 0\n    fi\n  \
    \  if [ $1 -eq 5 ]; then\n        echo 4\n        return 0\n    fi\n    if [ $1\
    \ -eq 6 ]; then\n        echo 8\n        return 0\n    fi\n    if [ $1 -eq 7 ];\
    \ then\n        echo 14\n        return 0\n    fi\n    if [ $1 -eq 8 ]; then\n\
    \        echo 24\n        return 0\n    fi\n    if [ $1 -eq 9 ]; then\n      \
    \  echo 42\n        return 0\n    fi\n    if [ $1 -eq 10 ]; then\n        echo\
    \ 70\n        return 0\n    fi\n    if [ $1 -eq 11 ]; then\n        echo 118\n\
    \        return 0\n    fi\n    if [ $1 -eq 12 ]; then\n        echo 196\n    \
    \    return 0\n    fi\n    if [ $1 -eq 13 ]; then\n        echo 322\n        return\
    \ 0\n    fi\n    if [ $1 -eq 14 ]; then\n        echo 528\n        return 0\n\
    \    fi\n    if [ $1 -eq 15 ]; then\n        echo 862\n        return 0\n    fi\n\
    \    if [ $1 -eq 16 ]; then\n        echo 1402\n        return 0\n    fi\n   \
    \ if [ $1 -eq 17 ]; then\n        echo 2290\n        return 0\n    fi\n    if\
    \ [ $1 -eq 18 ]; then\n        echo 3732\n        return 0\n    fi\n    if [ $1\
    \ -eq 19 ]; then\n        echo 6078\n        return 0\n    fi\n    if [ $1 -eq\
    \ 20 ]; then\n        echo 9910\n        return 0\n    fi\n    if [ $1 -eq 21\
    \ ];\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkn7kckax.sh: line 107: syntax error near unexpected token `}''

    /tmp/tmpkn7kckax.sh: line 107: `}''

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local n=$1\n \
    \ if [ $n -eq 0 ]; then\n    echo $a\n  elif [ $n -eq 1 ]; then\n    echo $b\n\
    \  elif [ $n -eq 2 ]; then\n    echo $c\n  elif [ $n -eq 3 ]; then\n    echo $d\n\
    \  else\n    for (( i=4; i<=$n; i++ )); do\n      a=$b\n      b=$c\n      c=$d\n\
    \      d=$((a+b+c))\n    done\n    echo $d\n  fi\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n        b=0\n \
    \       c=2\n        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 2
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        # fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        #\
    \ fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        # fib4(n)\
    \ -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        # fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        # fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        #\
    \ fib4(\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3vdsj363.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmp3vdsj363.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(($(fib4 $(($1-1)))\
    \ + $(fib4 $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n    fi\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local i=0\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local n=$1\n    while [ $i -lt $n ]; do\n        d=$((a+b+c))\n   \
    \     a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $a\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 2
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    # TODO: Implement fib4 function\n    # Hint: You can use bc to evaluate\
    \ arithmetic expressions.\n    # Example:\n    # $ echo \"1 + 1\" | bc\n    #\
    \ 2\n    #\n    # $ echo \"1 + 1\" | bc -l\n    # 2\n    #\n    # $ echo \"1.0/3.0\"\
    \ | bc\n    # 0\n    #\n    # $ echo \"1.0/3.0\" | bc -l\n    # .3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\n\
    \    #\n    # $ echo \"1.0/3.0\" | bc -l | awk '{printf \"%.2f\", $0}'\n    #\
    \ 0.33\n    #\n    # $ echo \"1.0/3.0\" | bc -l | awk '{printf \"%.2f\", $0}'\
    \ | tr -d '\\n'\n    # 0.33\n    #\n    # $ echo \"1.0/3.0\" | bc -l | awk '{printf\
    \ \"%.2f\", $0}' | tr -d '\\n' | tr -d '\\r'\n    # 0.33\n    #\n    # $ echo\
    \ \"1.0/3.0\" | bc -l | awk '{printf \"%.2f\", $0}' | tr -d '\\n' | tr -d '\\\
    r' | tr -d '\\t'\n    # 0.33\n    #\n    # $ echo \"1.0/3.0\" | bc -l | awk '{printf\
    \ \"%.2f\", $0}' | tr -d '\\n' | tr -d '\\r' | tr -d '\\t' | tr -d ' '\n    #\
    \ 0.33\n    #\n    # $ echo \"1.0/3.0\" | bc -l | awk '{printf \"%.2f\", $0}'\
    \ | tr -d '\\n' | tr -d '\\r' | tr -d '\\t' | tr -d ' ' | tr -d '.'\n    # 33\n\
    \    #\n    # $ echo\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi261lt0r.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpi261lt0r.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local fib4_0=0\n  local fib4_1=0\n  local fib4_2=2\n\
    \  local fib4_3=0\n  local fib4_4=0\n  local fib4_5=0\n  local fib4_6=0\n  local\
    \ fib4_7=0\n  local fib4_8=0\n  local fib4_9=0\n  local fib4_10=0\n  local fib4_11=0\n\
    \  local fib4_12=0\n  local fib4_13=0\n  local fib4_14=0\n  local fib4_15=0\n\
    \  local fib4_16=0\n  local fib4_17=0\n  local fib4_18=0\n  local fib4_19=0\n\
    \  local fib4_20=0\n  local fib4_21=0\n  local fib4_22=0\n  local fib4_23=0\n\
    \  local fib4_24=0\n  local fib4_25=0\n  local fib4_26=0\n  local fib4_27=0\n\
    \  local fib4_28=0\n  local fib4_29=0\n  local fib4_30=0\n  local fib4_31=0\n\
    \  local fib4_32=0\n  local fib4_33=0\n  local fib4_34=0\n  local fib4_35=0\n\
    \  local fib4_36=0\n  local fib4_37=0\n  local fib4_38=0\n  local fib4_39=0\n\
    \  local fib4_40=0\n  local fib4_41=0\n  local fib4_42=0\n  local fib4_43=0\n\
    \  local fib4_44=0\n  local fib4_45=0\n  local fib4_46=0\n  local fib4_47=0\n\
    \  local fib4_48=0\n  local fib4_49=0\n  local fib4_50=0\n  local fib4_51=0\n\
    \  local fib4_52=0\n  local fib4_53=0\n  local fib4_54=0\n  local fib4_55=0\n\
    \ \n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -lt 0 ]; then\n        echo \"Invalid input\"\n        return\
    \ 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"0\"\n        return 0\n\
    \    fi\n    if [ $1 -eq 1 ]; then\n        echo \"0\"\n        return 0\n   \
    \ fi\n    if [ $1 -eq 2 ]; then\n        echo \"2\"\n        return 0\n    fi\n\
    \    if [ $1 -eq 3 ]; then\n        echo \"0\"\n        return 0\n    fi\n   \
    \ a=0\n    b=0\n    c=2\n    d=0\n    for i in $(seq 4 $1); do\n        e=$((a+b+c+d))\n\
    \        a=$b\n        b=$c\n        c=$d\n        d=$e\n    done\n    echo \"\
    $e\"\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        ((i++))\n    done\n    echo $d\n\
    }\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local\
    \ D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n\
    \    local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n \
    \   local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n  \
    \  local T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n   \
    \ local Y=0\n    local Z=0\n    local aa=0\n    local ab=0\n    local ac=0\n \
    \   local ad=0\n    local ae=0\n    local af=0\n    local ag=0\n    local ah=0\n\
    \    local ai=0\n    local aj=0\n    local ak=0\n    local al=0\n    local am=0\n\
    \    local an=0\n    local ao=0\n    local ap=0\n    local aq=0\n    local ar=0\n\
    \    local as=0\n    local at=0\n    local au=0\n    local av=0\n    local aw=0\n\
    \    local ax=0\n    local ay=0\n    local az=0\n    local aA=0\n    local aB=0\n\
    \    local aC=0\n    local aD=0\n    local a\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -lt 0 ]]; then\n        echo \"Error: fib4 requires a positive\
    \ integer\"\n        return 1\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo\
    \ 0\n        return 0\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo 0\n \
    \       return 0\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo 2\n      \
    \  return 0\n    fi\n    if [[ $1 -eq 3 ]]; then\n        echo 0\n        return\
    \ 0\n    fi\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local\
    \ i=4\n    while [[ $i -le $1 ]]; do\n        d=$((a+b+c))\n        a=$b\n   \
    \     b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo $d\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(($(fib4 $(($1-1))) + $(fib4\
    \ $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    # TODO: implement this function\n    echo \"0\"\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n  elif [[ $1 -eq 1 ]]; then\n\
    \    echo 0\n  elif [[ $1 -eq 2 ]]; then\n    echo 2\n  elif [[ $1 -eq 3 ]]; then\n\
    \    echo 0\n  else\n    echo $(( $(fib4 \"$(( $1 - 1 ))\") + $(fib4 \"$(( $1\
    \ - 2 ))\") + $(fib4 \"$(( $1 - 3 ))\") + $(fib4 \"$(( $1 - 4 ))\") ))\n  fi\n\
    }\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n\
    \    local fib4_3=0\n    local fib4_n=0\n    if [ $n -eq 0 ]; then\n        echo\
    \ $fib4_0\n    elif [ $n -eq 1 ]; then\n        echo $fib4_1\n    elif [ $n -eq\
    \ 2 ]; then\n        echo $fib4_2\n    elif [ $n -eq 3 ]; then\n        echo $fib4_3\n\
    \    else\n        for ((i=4; i<=n; i++)); do\n            fib4_n=$((fib4_0 +\
    \ fib4_1 + fib4_2 + fib4_3))\n            fib4_0=$fib4_1\n            fib4_1=$fib4_2\n\
    \            fib4_2=$fib4_3\n            fib4_3=$fib4_n\n        done\n      \
    \  echo $fib4_n\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo \"0\"\n    elif [ $1 -eq 1 ];\
    \ then\n        echo \"0\"\n    elif [ $1 -eq 2 ]; then\n        echo \"2\"\n\
    \    elif [ $1 -eq 3 ]; then\n        echo \"0\"\n    else\n        a=0\n    \
    \    b=0\n        c=2\n        d=0\n        for ((i=4; i<=$1; i++)); do\n    \
    \        e=$((a+b+c+d))\n            a=$b\n            b=$c\n            c=$d\n\
    \            d=$e\n        done\n        echo \"$e\"\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  # TODO: Implement me\n  echo \"0\"\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$(($a + $b + $c))\n    a=$b\n  \
    \  b=$c\n    c=$d\n    i=$(($i + 1))\n  done\n  echo $d\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local\
    \ e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local\
    \ zzz=0\n    local\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(($(fib4 $(($1-1))) + $(fib4\
    \ $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local a b c d e\n  a=0\n  b=0\n  c=2\n  d=0\n  e=$1\n  while [ $e\
    \ -gt 3 ]; do\n    a=$b\n    b=$c\n    c=$d\n    d=$((a+b+c+d))\n    e=$((e-1))\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        ((i++))\n    done\n    echo $d\n\
    }\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local e=0\n    local i=2\n    while [ $i -lt $n ]; do\n        e=$((a+b+c+d))\n\
    \        a=$b\n        b=$c\n        c=$d\n        d=$e\n        i=$((i+1))\n\
    \    done\n    echo $e\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n\
    \    local fib4_3=0\n    local fib4_n=0\n    local i=4\n    if [ $n -eq 0 ]; then\n\
    \        echo $fib4_0\n    elif [ $n -eq 1 ]; then\n        echo $fib4_1\n   \
    \ elif [ $n -eq 2 ]; then\n        echo $fib4_2\n    elif [ $n -eq 3 ]; then\n\
    \        echo $fib4_3\n    else\n        while [ $i -le $n ]; do\n           \
    \ fib4_n=$((fib4_0 + fib4_1 + fib4_2 + fib4_3))\n            fib4_0=$fib4_1\n\
    \            fib4_1=$fib4_2\n            fib4_2=$fib4_3\n            fib4_3=$fib4_n\n\
    \            i=$((i+1))\n        done\n        echo $fib4_n\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        fib4_1=0\n        fib4_2=0\n\
    \        fib4_3=2\n        fib4_4=0\n        for (( i=4; i<=$1; i++ )); do\n \
    \           fib4_5=$(( fib4_1 + fib4_2 + fib4_3 + fib4_4 ))\n            fib4_1=$fib4_2\n\
    \            fib4_2=$fib4_3\n            fib4_3=$fib4_4\n            fib4_4=$fib4_5\n\
    \        done\n        echo $fib4_5\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local fib4_0=0\n  local fib4_1=0\n  local fib4_2=2\n\
    \  local fib4_3=0\n  local fib4_n=0\n  local i=0\n  if [[ $n -eq 0 ]]; then\n\
    \    echo $fib4_0\n  elif [[ $n -eq 1 ]]; then\n    echo $fib4_1\n  elif [[ $n\
    \ -eq 2 ]]; then\n    echo $fib4_2\n  elif [[ $n -eq 3 ]]; then\n    echo $fib4_3\n\
    \  else\n    for (( i=4; i<=n; i++ )); do\n      fib4_n=$((fib4_0 + fib4_1 + fib4_2\
    \ + fib4_3))\n      fib4_0=$fib4_1\n      fib4_1=$fib4_2\n      fib4_2=$fib4_3\n\
    \      fib4_3=$fib4_n\n    done\n    echo $fib4_n\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n        b=0\n \
    \       c=2\n        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    # your code here\n    if [ $1 -eq 0 ]; then\n        echo 0\n  \
    \  elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n    \
    \    echo 2\n    elif [ $1 -eq 3 ]; then\n        echo 0\n    else\n        fib4_1=0\n\
    \        fib4_2=0\n        fib4_3=2\n        fib4_4=0\n        for ((i=4; i<=$1;\
    \ i++)); do\n            fib4_5=$(($fib4_1 + $fib4_2 + $fib4_3 + $fib4_4))\n \
    \           fib4_1=$fib4_2\n            fib4_2=$fib4_3\n            fib4_3=$fib4_4\n\
    \            fib4_4=$fib4_5\n        done\n        echo $fib4_5\n    fi\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(($(fib4 $(($1-1))) + $(fib4\
    \ $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n    fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local n=$1\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=0\n  if [ $n -eq 0 ]; then\n    echo $a\n  elif [ $n -eq 1 ]; then\n\
    \    echo $b\n  elif [ $n -eq 2 ]; then\n    echo $c\n  elif [ $n -eq 3 ]; then\n\
    \    echo $d\n  else\n    for ((i=4; i<=n; i++)); do\n      a=$b\n      b=$c\n\
    \      c=$d\n      d=$((a+b+c))\n    done\n    echo $d\n  fi\n}\n\ncandidate()\
    \ {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"\
    104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ for (( i=3; i<=n; i++ )); do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n\
    \  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=0\n  for ((i=3; i<=n; i++)); do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\")\
    \ = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"\
    12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n\tlocal n=$1\n\tlocal a=0\n\tlocal b=0\n\tlocal c=2\n\tlocal d=0\n\t\
    local i=3\n\twhile [ $i -le $n ]; do\n\t\td=$((a+b+c))\n\t\ta=$b\n\t\tb=$c\n\t\
    \tc=$d\n\t\ti=$((i+1))\n\tdone\n\techo $d\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n\
    \    local fib4_3=0\n    local fib4_n=0\n    local i=0\n    if [ $n -eq 0 ]; then\n\
    \        echo $fib4_0\n    elif [ $n -eq 1 ]; then\n        echo $fib4_1\n   \
    \ elif [ $n -eq 2 ]; then\n        echo $fib4_2\n    elif [ $n -eq 3 ]; then\n\
    \        echo $fib4_3\n    else\n        for ((i=4; i<=n; i++)); do\n        \
    \    fib4_n=$((fib4_0 + fib4_1 + fib4_2 + fib4_3))\n            fib4_0=$fib4_1\n\
    \            fib4_1=$fib4_2\n            fib4_2=$fib4_3\n            fib4_3=$fib4_n\n\
    \        done\n        echo $fib4_n\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local n1=0\n    local n2=0\n    local n3=2\n   \
    \ local n4=0\n    local i=3\n    while [ $i -le $n ]; do\n        n4=$((n1+n2+n3))\n\
    \        n1=$n2\n        n2=$n3\n        n3=$n4\n        i=$((i+1))\n    done\n\
    \    echo $n4\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n\
    \    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for i in $(seq 4 $1); do\n            e=$((a+b+c+d))\n \
    \           a=$b\n            b=$c\n            c=$d\n            d=$e\n     \
    \   done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local n=$1\n \
    \ if [ $n -eq 0 ]; then\n    echo 0\n  elif [ $n -eq 1 ]; then\n    echo 0\n \
    \ elif [ $n -eq 2 ]; then\n    echo 2\n  elif [ $n -eq 3 ]; then\n    echo 0\n\
    \  else\n    for (( i=4; i<=n; i++ )); do\n      d=$((a+b+c))\n      a=$b\n  \
    \    b=$c\n      c=$d\n    done\n    echo $d\n  fi\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 )))\
    \ + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n  fi\n}\n\ncandidate() {\n\
    \    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\"\
    \ ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    fib4_1=$(fib4 \"$(( $1 - 1 ))\")\n    fib4_2=$(fib4 \"\
    $(( $1 - 2 ))\")\n    fib4_3=$(fib4 \"$(( $1 - 3 ))\")\n    fib4_4=$(fib4 \"$((\
    \ $1 - 4 ))\")\n    echo \"$(( $fib4_1 + $fib4_2 + $fib4_3 + $fib4_4 ))\"\n  fi\n\
    }\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -lt 0 ]; then\n    echo \"Error: fib4 requires a positive\
    \ integer\"\n    return 1\n  fi\n  if [ $1 -lt 3 ]; then\n    echo \"0\"\n   \
    \ return 0\n  fi\n  if [ $1 -eq 3 ]; then\n    echo \"2\"\n    return 0\n  fi\n\
    \  a=0\n  b=0\n  c=2\n  d=0\n  for ((i=4; i<=$1; i++)); do\n    d=$((a+b+c))\n\
    \    a=$b\n    b=$c\n    c=$d\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n  \
    \  [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n\
    \    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        for ((i=4; i<=$1; i++)); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo \"0\"\n  elif [ $1 -eq 1 ]; then\n\
    \    echo \"0\"\n  elif [ $1 -eq 2 ]; then\n    echo \"2\"\n  elif [ $1 -eq 3\
    \ ]; then\n    echo \"0\"\n  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for\
    \ i in $(seq 4 $1); do\n      e=$((a+b+c+d))\n      a=$b\n      b=$c\n      c=$d\n\
    \      d=$e\n    done\n    echo \"$e\"\n  fi\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\"\
    \ ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"\
    386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n   \
    \ echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n \
    \   echo 0\n  else\n    n=$(($1-4))\n    a=$(fib4 $n)\n    b=$(fib4 $(($n+1)))\n\
    \    c=$(fib4 $(($n+2)))\n    d=$(fib4 $(($n+3)))\n    echo $(($a+$b+$c+$d))\n\
    \  fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local fib4_2=2\n\
    \    local fib4_3=0\n    local fib4_n=0\n    local i=4\n    while [ $i -le $n\
    \ ]; do\n        fib4_n=$((fib4_0 + fib4_1 + fib4_2 + fib4_3))\n        fib4_0=$fib4_1\n\
    \        fib4_1=$fib4_2\n        fib4_2=$fib4_3\n        fib4_3=$fib4_n\n    \
    \    i=$((i+1))\n    done\n    echo $fib4_n\n}\n\ncandidate() {\n    fib4 \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"0\"\n    elif [[ $1 -eq\
    \ 1 ]]; then\n        echo \"0\"\n    elif [[ $1 -eq 2 ]]; then\n        echo\
    \ \"2\"\n    elif [[ $1 -eq 3 ]]; then\n        echo \"0\"\n    else\n       \
    \ a=0\n        b=0\n        c=2\n        d=0\n        for (( i=4; i<=$1; i++ ));\
    \ do\n            e=$((a+b+c+d))\n            a=$b\n            b=$c\n       \
    \     c=$d\n            d=$e\n        done\n        echo \"$e\"\n    fi\n}\n\n\
    candidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n        b=0\n \
    \       c=2\n        d=0\n        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n\
    \            a=$b\n            b=$c\n            c=$d\n            d=$e\n    \
    \    done\n        echo $e\n    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate\
    \ \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n\
    \    c=$d\n    i=$((i+1))\n  done\n  echo $d\n}\n\ncandidate() {\n    fib4 \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"4\" ]]\n    [[\
    \ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"10\") = \"104\" ]]\n  \
    \  [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate\
    \ \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014344
- exit_code: 0
  program: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
    \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>>\
    \ $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\n\
    fib4() {\n    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        echo $(( $(fib4 $(( $1 - 1 )))\
    \ + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n\
    \    fi\n}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[\
    \ $(candidate \"10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014345
