name: HumanEval_139_special_factorial
language: sh
prompt: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
  \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
  \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
  \ {\n"
tests: "}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
  \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
  ) = \"1\" ]]\n}\n\nrun_test"
completions: ["    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n\
    \        result=$((result * i))\n    done\n    echo $result", "  local n=$1\n\
    \  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result * n))\n    n=$((n\
    \ - 1))\n  done\n  echo $result", "  if [[ $1 -eq 0 ]]; then\n    echo \"1\"\n\
    \  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n  fi", "    local\
    \ n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n        result=$((result\
    \ * i))\n    done\n    echo $result", "  # Write your code here\n  # To print\
    \ results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\
    \n  echo \"42\"", "    local n=$1\n    local result=1\n    for (( i=1; i<=$n;\
    \ i++ ))\n    do\n        result=$(( $result * $i ))\n    done\n    echo $result",
  "  # Write your code here\n  # To print results to the standard output you can use\
    \ echo\n  # Example: echo \"Hello world!\"\n  if [ $1 -le 0 ]; then\n    echo\
    \ \"0\"\n  else\n    echo $(($(special_factorial $(($1-1))) * $1))\n  fi", " \
    \ local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result", "    local n=$1\n    local factorial=1\n  \
    \  local i=1\n    while [ $i -le $n ]; do\n        factorial=$((factorial * i))\n\
    \        i=$((i + 1))\n    done\n    local j=$((n - 1))\n    while [ $j -ge 1\
    \ ]; do\n        factorial=$((factorial * j))\n        j=$((j - 1))\n    done\n\
    \    echo $factorial", "    local n=$1\n    local result=1\n    local i=1\n  \
    \  while [ $i -le $n ]; do\n        result=$(($result * $i))\n        i=$(($i\
    \ + 1))\n    done\n    echo $result", "  local n=$1\n  local factorial=1\n  for\
    \ ((i=1; i<=n; i++)); do\n    factorial=$((factorial * i))\n  done\n  echo $factorial",
  "    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result\
    \ * n))\n        n=$((n - 1))\n    done\n    echo $result", "    local n=$1\n\
    \    local result=1\n    while [ $n -gt 0 ]; do\n        result=$((result * n))\n\
    \        n=$((n - 1))\n    done\n    echo $result", "  local n=$1\n  local result=1\n\
    \  local i=1\n  while [ $i -le $n ]; do\n    result=$(($result * $i))\n    i=$(($i\
    \ + 1))\n  done\n  echo $result", "  local n=$1\n  local result=1\n  for ((i=1;\
    \ i<=n; i++)); do\n    result=$((result * i))\n  done\n  for ((i=n-1; i>0; i--));\
    \ do\n    result=$((result * i))\n  done\n  echo $result", "  local -i n=$1\n\
    \  local -i i=1\n  local -i result=1\n  while (( i <= n )); do\n    local -i j=1\n\
    \    local -i factorial=1\n    while (( j <= i )); do\n      factorial=$(( factorial\
    \ * j ))\n      (( j++ ))\n    done\n    result=$(( result * factorial ))\n  \
    \  (( i++ ))\n  done\n  echo \"$result\"", "  local n=$1\n  local factorial=1\n\
    \  for (( i=1; i<=n; i++ )); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial", "  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le\
    \ $n ]; do\n    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result",
  "  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result", "  local n=$1\n  local factorial=1\n  for ((i=1;\
    \ i<=n; i++)); do\n    factorial=$((factorial * i))\n  done\n  echo \"$factorial\""]
stop_tokens:
- "\n}"
