name: HumanEval_68_pluck
language: sh
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n#\
  \ >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n\
  # []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the first\
  \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
  \ 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 1000000000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    local -i node=${nodes[$i]}\n    if ((node\
    \ % 2 == 0)); then\n      if ((node < min_even_value)); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((min_even_value ==\
    \ 10000000000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  local smallest_even_value_index_found=false\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n        smallest_even_value_index_found=true\n\
    \      elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n        smallest_even_value_index_found=true\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ $smallest_even_value_index_found\
    \ == true ]]; then\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "    local -a nodes=($1)\n    local -i\
    \ i=0\n    local -i min_even_value=1000000000\n    local -i min_even_index=1000000000\n\
    \    local -i node_value\n    local -i node_index\n    for node_value in \"${nodes[@]}\"\
    ; do\n        if [[ $((node_value % 2)) -eq 0 ]]; then\n            if [[ $node_value\
    \ -lt $min_even_value ]]; then\n                min_even_value=$node_value\n \
    \               min_even_index=$i\n            fi\n        fi\n        i+=1\n\
    \    done\n    if [[ $min_even_value -eq 1000000000 ]]; then\n        echo \"\
    []\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i node\n  for ((i=0; i<n; i++)); do\n    node=${nodes[i]}\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n     \
    \   min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n  done\n\
    \  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=10000\n  local -i min_even_index=10000\n  local -i\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n \
    \     if (( node < min_even_value )); then\n        min_even_value=$node\n   \
    \     min_even_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_value=0\n\
    \  local -i min_index=0\n  local -i index=0\n  local -i value=0\n  local -i i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n\
    \    value=${nodes[i]}\n    if [[ $((value % 2)) -eq 0 ]]; then\n      if [[ $found\
    \ -eq 0 ]]; then\n        min_value=$value\n        min_index=$i\n        found=1\n\
    \      else\n        if [[ $value -lt $min_value ]]; then\n          min_value=$value\n\
    \          min_index=$i\n        fi\n      fi\n    fi\n  done\n  if [[ $found\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"\
    $min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  for ((i=0; i<n; i++)); do\n \
    \   node_value=${nodes[i]}\n    if ((node_value % 2 == 0)); then\n      if ((node_value\
    \ < min_even_value)); then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if ((min_even_value == 10000000000)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even=\n  local\
    \ min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even=0\n      min_even_index=$i\n      break\n   \
    \ elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if\
    \ [[ -z $min_even ]] || [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local\
    \ -a evens_indices\n  local -a odds_indices\n  local -a evens_indices_sorted\n\
    \  local -a odds_indices_sorted\n  local -a evens_sorted\n  local -a odds_sorted\n\
    \  local -a result\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n \
    \ local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local\
    \ -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n\
    \  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local\
    \ -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i\
    \ hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n\
    \  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n \
    \ local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local\
    \ -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local\
    \ -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local\
    \ -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local\
    \ -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local\
    \ -i rrr\n  local -i sss\n  local -i ttt", "  local nodes=( $1 )\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n\
    \    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      smallest_even_value=0\n\
    \      smallest_even_value_index=$i\n      break\n    elif [[ $node -gt 0 ]] &&\
    \ [[ $(( node % 2 )) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] ||\
    \ [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local i\n  local min_even\n\
    \  local min_even_index\n  for i in $1; do\n    if [[ $i -eq 0 ]]; then\n    \
    \  min_even=0\n      min_even_index=0\n      break\n    elif [[ $i -gt 0 ]] &&\
    \ [[ $((i % 2)) -eq 0 ]]; then\n      if [[ -z $min_even ]] || [[ $i -lt $min_even\
    \ ]]; then\n        min_even=$i\n        min_even_index=$((i + 1))\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "    if [[ -z \"$1\"\
    \ ]]; then\n        echo \"[]\"\n        return\n    fi\n    local -a nodes=($1)\n\
    \    local -a evens=()\n    local -i i=0\n    for node in \"${nodes[@]}\"; do\n\
    \        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n    \
    \    fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n\
    \        return\n    fi\n    local -i min=${evens[0]}\n    local -i min_i=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n        if [[ ${evens[$i]} -lt $min\
    \ ]]; then\n            min=${evens[$i]}\n            min_i=$i\n        fi\n \
    \   done\n    echo \"[\\\"$min\\\", \\\"$min_i\\\"]\"", "  local nodes=\"$1\"\n\
    \  local min_value=\n  local min_index=\n  local index=0\n  for node in $nodes;\
    \ do\n    if [[ $node -eq 0 ]]; then\n      min_value=0\n      min_index=$index\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $(( node % 2 )) -eq 0 ]]; then\n\
    \      if [[ -z $min_value ]] || [[ $node -lt $min_value ]]; then\n        min_value=$node\n\
    \        min_index=$index\n      fi\n    fi\n    index=$(( index + 1 ))\n  done\n\
    \  if [[ -z $min_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n \
    \ local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((value < min_even_value)); then\n\
    \        min_even_value=$value\n        min_even_index=$i\n      elif ((value\
    \ == min_even_value)); then\n        if ((i < min_even_index)); then\n       \
    \   min_even_index=$i\n        fi\n      fi\n    fi\n  done\n\n  if ((min_even_value\
    \ < 1000000000)); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local\
    \ node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    elif [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=$1\n  local evens=$(echo \"$nodes\" | grep -Eo '^[0-9]+$'\
    \ | grep -Eo '^[0-9]+$' | grep -E '^[02468]$')\n  if [ -z \"$evens\" ]; then\n\
    \    echo \"[]\"\n  else\n    local min=$(echo \"$evens\" | sort -n | head -n\
    \ 1)\n    local min_index=$(echo \"$nodes\" | grep -Eo '^[0-9]+$' | grep -Eo '^[0-9]+$'\
    \ | grep -E '^[02468]$' | grep -n \"^$min$\" | cut -d: -f1)\n    echo \"[\\\"\
    $min\\\", \\\"$min_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=999999\n\
    \  local -i min_even_index=999999\n  local -i min_even_count=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  for ((i=0; i<node_count; i++));\
    \ do\n    node_value=${nodes[$i]}\n    if ((node_value % 2 == 0)); then\n    \
    \  if ((node_value < min_even_value)); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n        min_even_count=1\n      elif ((node_value\
    \ == min_even_value)); then\n        ((min_even_count++))\n      fi\n    fi\n\
    \  done\n  if ((min_even_count > 0)); then\n    echo \"[\\\"$min_even_value\\\"\
    , \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "    local -a nodes=($1)\n\
    \    local -a evens=()\n    local -a evens_index=()\n    local -a result=()\n\
    \    local i=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2))\
    \ -eq 0 ]]; then\n            evens+=($node)\n            evens_index+=($i)\n\
    \        fi\n        i=$((i + 1))\n    done\n    if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n    else\n        local min_even=${evens[0]}\n  \
    \      local min_even_index=${evens_index[0]}\n        for i in \"${!evens[@]}\"\
    ; do\n            if [[ ${evens[$i]} -lt $min_even ]]; then\n                min_even=${evens[$i]}\n\
    \                min_even_index=${evens_index[$i]}\n            fi\n        done\n\
    \        result=($min_even $min_even_index)\n        echo \"[\\\"${result[0]}\\\
    \", \\\"${result[1]}\\\"]\"\n    fi", "  local nodes=($1)\n  local min_even_index=\n\
    \  local min_even_value=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "    local -a nodes=($1)\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=-1\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ $node -lt\
    \ $min_even_value ]]; then\n                min_even_value=$node\n           \
    \     min_even_index=$i\n            fi\n        fi\n        i+=1\n    done\n\
    \    if [[ $min_even_index -eq -1 ]]; then\n        echo \"[]\"\n    else\n  \
    \      echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", " \
    \ local nodes=($1)\n  local evens=()\n  local evens_indexes=()\n  local smallest_even=\n\
    \  local smallest_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indexes+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  smallest_even=${evens[0]}\n  smallest_even_index=${evens_indexes[0]}\n\
    \  for i in \"${!evens[@]}\"; do\n    if [[ ${evens[$i]} -lt $smallest_even ]];\
    \ then\n      smallest_even=${evens[$i]}\n      smallest_even_index=${evens_indexes[$i]}\n\
    \    fi\n  done\n  echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"\
    ]\"", "  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i min_even_count=0\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      if ((nodes[i]\
    \ < min_even_value)); then\n        min_even_value=nodes[i]\n        min_even_index=i\n\
    \        min_even_count=1\n      elif ((nodes[i] == min_even_value)); then\n \
    \       min_even_count+=1\n      fi\n    fi\n  done\n  if ((min_even_count ==\
    \ 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i min_even_count=0\n  local -i\
    \ i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if [[ ${nodes[i]}\
    \ =~ ^[0-9]+$ ]]; then\n      if [[ ${nodes[i]} -eq 0 ]]; then\n        min_even_value=0\n\
    \        min_even_index=$i\n        min_even_count=1\n        break\n      elif\
    \ [[ ${nodes[i]} -lt $min_even_value && ${nodes[i]}%2 -eq 0 ]]; then\n       \
    \ min_even_value=${nodes[i]}\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif [[ ${nodes[i]} -eq $min_even_value ]]; then\n        min_even_count=$((min_even_count+1))\n\
    \      fi\n    fi\n  done\n  if [[ $min_even_count -eq 0 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi", "  local -a nodes=($1)\n  local min=\n  local min_index=\n  local i=0\n\
    \  local node=\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $min ]] || [[ $node -lt $min ]]; then\n        min=$node\n\
    \        min_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z\
    \ $min ]]; then\n    echo '[]'\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local\
    \ -a result\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      evens+=($node)\n    else\n      odds+=($node)\n    fi\n  done\n\
    \  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n\
    \    for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min_even ]]; then\n\
    \        min_even=$even\n      fi\n    done\n    local min_even_index=0\n    for\
    \ ((i = 0; i < ${#nodes[@]}; i++)); do\n      if [[ ${nodes[$i]} -eq $min_even\
    \ ]]; then\n        min_even_index=$i\n        break\n      fi\n    done\n   \
    \ result=($min_even $min_even_index)\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_value_index=10000\n  local -i i=0\n  local -i node_value\n  for\
    \ node_value in \"${nodes[@]}\"; do\n    if (( node_value % 2 == 0 )); then\n\
    \      if (( node_value < min_even_value )); then\n        min_even_value=$node_value\n\
    \        min_even_value_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if\
    \ (( min_even_value < 10000 )); then\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_value_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i n=${#nodes[@]}\n  local -i i\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i value\n  local -i index\n  local\
    \ -i found_even=0\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if\
    \ ((value % 2 == 0)); then\n      found_even=1\n      if ((value < min_even_value));\
    \ then\n        min_even_value=$value\n        min_even_index=$i\n      elif ((value\
    \ == min_even_value)); then\n        if ((i < min_even_index)); then\n       \
    \   min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if ((found_even));\
    \ then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi", "    local -a nodes=($1)\n    local -a evens=()\n   \
    \ local -a evens_index=()\n    local -a evens_min=()\n    local -a evens_min_index=()\n\
    \    local -a result=()\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n \
    \   local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n\
    \    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n\
    \    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n\
    \    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n\
    \    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n\
    \    local aaa=0\n    local bbb=0\n    local ccc=0\n    local ddd=0\n    local\
    \ eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n\
    \    local jjj=0\n    local kkk=0\n    local lll=0\n    local mmm=0\n    local\
    \ nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n\
    \    local sss=0\n    local ttt=0\n    local uuu=0\n    local vvv=0\n    local\
    \ www=0\n    local xxx=0\n    local", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value\n  local -i has_even=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[$i]}\n\
    \    if ((value % 2 == 0)); then\n      has_even=1\n      if ((value < min_even_value));\
    \ then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n \
    \   fi\n  done\n  if ((has_even == 0)); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -a evens=()\n  local -a evens_index=()\n  local -a result=()\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local n=${#nodes[@]}\n  local m=0\n  local\
    \ min=0\n  local min_index=0\n  for ((i=0; i<n; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n      evens_index[$j]=$i\n   \
    \   ((j++))\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((nodes[$i] % 2)) -eq 0\
    \ ]]; then\n      evens[$j]=${nodes[$i]}\n      evens_index[$j]=$i\n      ((j++))\n\
    \    fi\n  done\n  m=${#evens[@]}\n  if [[ $m -eq 0 ]]; then\n    result=()\n\
    \  else\n    min=${evens[0]}\n    min_index=0\n    for ((k=1; k<m; k++)); do\n\
    \      if [[ ${evens[$k]} -lt $min ]]; then\n        min=${evens[$k]}\n      \
    \  min_index=$k\n      fi\n    done\n    result=($min ${evens_index[$min_index]})\n\
    \  fi\n  echo ${result[@]}", "  local nodes=($1)\n  local evens=()\n  local evens_indexes=()\n\
    \  local smallest_even=\n  local smallest_even_index=\n  local i=0\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \      evens_indexes+=($i)\n    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    smallest_even=${evens[0]}\n   \
    \ smallest_even_index=${evens_indexes[0]}\n    for ((i = 1; i < ${#evens[@]};\
    \ i++)); do\n      if [[ ${evens[i]} -lt $smallest_even ]]; then\n        smallest_even=${evens[i]}\n\
    \        smallest_even_index=${evens_indexes[i]}\n      fi\n    done\n    echo\
    \ \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"", "  local -a\
    \ nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local -a evens_index_sorted=()\n\
    \  local -a evens_sorted=()\n  local -a evens_sorted_index=()\n  local -a evens_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted=()\n  local -a evens_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_index_sorted=()\n  local -a evens_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_index=()\n  local -a evens_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_index_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_index=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n  local\
    \ -a evens_sorted_sorted", "  local -a nodes=($1)\n  local -a evens=()\n  local\
    \ -a evens_index=()\n  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n\
    \  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n", "    local -a nodes=($1)\n   \
    \ local -i min_even_value=100000000\n    local -i min_even_index=100000000\n \
    \   local -i i=0\n    local -i len=${#nodes[@]}\n    local -i node_value\n   \
    \ local -i node_index\n    local -i has_even=0\n    while [ $i -lt $len ]; do\n\
    \        node_value=${nodes[$i]}\n        node_index=$i\n        if [ $((node_value\
    \ % 2)) -eq 0 ]; then\n            has_even=1\n            if [ $node_value -lt\
    \ $min_even_value ]; then\n                min_even_value=$node_value\n      \
    \          min_even_index=$node_index\n            fi\n        fi\n        i=$((i\
    \ + 1))\n    done\n    if [ $has_even -eq 0 ]; then\n        echo \"[]\"\n   \
    \ else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \    fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0", "  local nodes=($1)\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even ]] ||\
    \ [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n    \
    \    min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local\
    \ -i min_even_index=1000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 1000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i node_value=0\n  local\
    \ -i node_count=${#nodes[@]}\n  local -i found_even=0\n  for ((i=0; i<node_count;\
    \ i++)); do\n    node_value=${nodes[$i]}\n    if (( node_value % 2 == 0 )); then\n\
    \      if (( node_value < min_even_value )); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n        found_even=1\n      fi\n    fi\n  done\n \
    \ if (( found_even )); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "  local -a nodes=($1)\n  local -i min_value=0\n\
    \  local -i min_index=0\n  local -i index=0\n  local -i value=0\n  local -i found=0\n\
    \  for value in \"${nodes[@]}\"; do\n    if (( value % 2 == 0 )); then\n     \
    \ if (( found == 0 )); then\n        min_value=$value\n        min_index=$index\n\
    \        found=1\n      elif (( value < min_value )); then\n        min_value=$value\n\
    \        min_index=$index\n      fi\n    fi\n    (( index++ ))\n  done\n  if ((\
    \ found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if (( node % 2 == 0 )); then\n      if [[ -z $min_even_value ]]; then\n    \
    \    min_even_value=$node\n        min_even_index=$i\n      elif (( node < min_even_value\
    \ )); then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=10000\n  local smallest_even_value_index=10000\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -lt $smallest_even_value && ${nodes[$i]}%2 -eq 0 ]];\
    \ then\n      smallest_even_value=${nodes[$i]}\n      smallest_even_value_index=$i\n\
    \    fi\n  done\n  if [[ $smallest_even_value -eq 10000 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=10000\n  local min_even_index=10000\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]] && [[ $node -lt $min_even_value ]]; then\n      min_even_value=$node\n\
    \      min_even_index=$index\n    fi\n    index=$((index + 1))\n  done\n  if [[\
    \ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local smallest_even_value=\n  local smallest_even_index=\n  local i=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if\
    \ [ -z \"$smallest_even_value\" ] || [ $node -lt $smallest_even_value ]; then\n\
    \        smallest_even_value=$node\n        smallest_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$smallest_even_value\" ]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a arr=(\"$@\")\n  local -i i=0\n  local\
    \ -i min_index=0\n  local -i min_value=0\n  local -i len=${#arr[@]}\n  local -i\
    \ value=0\n  local -i is_first=1\n  for ((i=0; i<len; i++)); do\n    value=${arr[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((is_first == 1)); then\n        min_value=$value\n\
    \        min_index=$i\n        is_first=0\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((is_first == 1)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local\
    \ -i smallest_index=0\n  local -i smallest_value=0\n  local -i is_first_even=1\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n    \
    \  smallest_index=$i\n      smallest_value=0\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ $is_first_even -eq\
    \ 1 ]]; then\n        smallest_index=$i\n        smallest_value=${nodes[$i]}\n\
    \        is_first_even=0\n      elif [[ ${nodes[$i]} -lt $smallest_value ]]; then\n\
    \        smallest_index=$i\n        smallest_value=${nodes[$i]}\n      fi\n  \
    \  fi\n  done\n  if [[ $smallest_value -eq 0 ]]; then\n    echo \"[\\\"0\\\",\
    \ \\\"$smallest_index\\\"]\"\n  elif [[ $smallest_value -gt 0 ]]; then\n    echo\
    \ \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  else\n    echo \"\
    []\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n\
    \  local -i min_value=-1\n  local -i node_value\n  for node_value in \"${nodes[@]}\"\
    ; do\n    if (( node_value % 2 == 0 )); then\n      if (( min_value == -1 || node_value\
    \ < min_value )); then\n        min_value=$node_value\n        min_index=$i\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_index == -1 )); then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\
    \n  fi", "  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  local\
    \ -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [ $((node % 2)) -eq\
    \ 0 ] && [ $node -lt $min_even_value ]; then\n      min_even_value=$node\n   \
    \   min_even_index=$i\n    fi\n    i=$((i + 1))\n  done\n  if [ $min_even_value\
    \ -eq 100000000 ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a odds=()\n  local -a even_indexes=()\n  local -a odd_indexes=()\n \
    \ local -a even_indexes_sorted=()\n  local -a odd_indexes_sorted=()\n  local -a\
    \ even_indexes_sorted_uniq=()\n  local -a odd_indexes_sorted_uniq=()\n  local\
    \ -a even_indexes_sorted_uniq_sorted=()\n  local -a odd_indexes_sorted_uniq_sorted=()\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq=()\n  local -a odd_indexes_sorted_uniq_sorted_uniq=()\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq_sorted=()\n  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted=()\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq=()\n  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq=()\n\
    \  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted=()\n  local\
    \ -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted=()\n  local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq=()\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq=()\n \
    \ local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted=()\n\
    \  local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq", "  local\
    \ nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local nodes=($1)\n\
    \    local min_even_value=\n    local min_even_value_index=\n    for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n            min_even_value=0\n\
    \            min_even_value_index=$i\n            break\n        elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n            if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n                min_even_value=${nodes[$i]}\n\
    \                min_even_value_index=$i\n            fi\n        fi\n    done\n\
    \    if [[ -z $min_even_value ]]; then\n        echo \"[]\"\n    else\n      \
    \  echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n    fi",
  "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local\
    \ index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_is_even=0\n\
    \  local -i node_is_min_even=0\n  local -i node_is_first_min_even=0\n  for ((i=0;\
    \ i<node_count; i++)); do\n    node_value=${nodes[i]}\n    node_is_even=$((node_value\
    \ % 2))\n    if [[ $node_is_even -eq 0 ]]; then\n      if [[ $min_even_count -eq\
    \ 0 ]]; then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \        min_even_count=1\n      else\n        node_is_min_even=$((min_even_value\
    \ - node_value))\n        if [[ $node_is_min_even -gt 0 ]]; then\n          min_even_value=$node_value\n\
    \          min_even_index=$i\n          min_even_count=1\n        elif [[ $node_is_min_even\
    \ -eq 0 ]]; then\n          min_even_count=$((min_even_count + 1))\n        fi\n\
    \      fi\n    fi\n  done\n  if [[ $min_even_count -eq 0 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi", "  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value=0\n  local -i\
    \ found_even=0\n  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n    if\
    \ ((node_value % 2 == 0)); then\n      found_even=1\n      if ((node_value < min_even_value));\
    \ then\n        min_even_value=$node_value\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if ((found_even == 0)); then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n  local i=0\n\
    \  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[\
    \ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z\
    \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a odds=()\n  local -a zeros=()\n  local -a result=()\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i\
    \ cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n \
    \ local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local\
    \ -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n\
    \  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n", "  local -a nodes=($1)\n\
    \  local -a evens\n  local -a odds\n  local -i i\n  local -i j\n  local -i k\n\
    \  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local\
    \ -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i\
    \ gg\n  local -i hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n\
    \  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n \
    \ local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local\
    \ -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local\
    \ -i bbb\n  local -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local\
    \ -i ggg\n  local -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local\
    \ -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local\
    \ -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n  local\
    \ -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n  local\
    \ -i aaaa\n  local -i bbbb\n  local -i cccc\n  local -i", "  local nodes=($1)\n\
    \  local min_even_value=\n  local min_even_value_index=\n  local i=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $((node %\
    \ 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      elif [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_value_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value\n  local -i index\n\
    \  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0 &&\
    \ value < min_even_value)); then\n      min_even_value=$value\n      min_even_index=$i\n\
    \    fi\n  done\n  if ((min_even_value < 1000000000)); then\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_value_index=-1\n\
    \  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n    \
    \  echo \"[\\\"0\\\", \\\"$i\\\"]\"\n      return\n    fi\n    if [[ ${nodes[$i]}\
    \ -lt $min_even_value && ${nodes[$i]} -gt 0 && $(( ${nodes[$i]} % 2 )) -eq 0 ]];\
    \ then\n      min_even_value=${nodes[$i]}\n      min_even_value_index=$i\n   \
    \ fi\n  done\n  if [[ $min_even_value_index -eq -1 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  local -i found=0\n  for ((i=0; i<len; i++));\
    \ do\n    value=${nodes[$i]}\n    if (( value % 2 == 0 && value < min_even_value\
    \ )); then\n      min_even_value=$value\n      min_even_index=$i\n      found=1\n\
    \    fi\n  done\n  if (( found == 1 )); then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local nodes=$1\n\
    \  local evens=$(echo \"$nodes\" | grep -Eo '\\b[02468]\\b')\n  local min_even=$(echo\
    \ \"$evens\" | sort -n | head -n 1)\n  local min_even_index=$(echo \"$nodes\"\
    \ | grep -bo \"$min_even\" | cut -d: -f1)\n  if [[ -z \"$min_even\" ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local min_even_value_index=\n  local i=0\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[\
    \ -z $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      elif [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z\
    \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local evens=()\n\
    \  local even_indexes=()\n  local index=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      even_indexes+=($index)\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    local smallest_even_index=$(index_of_smallest \"\
    ${evens[@]}\")\n    local smallest_even=${evens[$smallest_even_index]}\n    local\
    \ smallest_even_index_index=$(index_of_smallest \"${even_indexes[@]}\")\n    local\
    \ smallest_even_index=${even_indexes[$smallest_even_index_index]}\n    echo \"\
    [\\\"$smallest_even\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local min_even_value=\n  local min_even_index=\n  local index=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo '[]'\n  else\n    echo \"\
    [\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local min_even_value=\n  local min_even_index=\n  local i=0\n  for node in\
    \ \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z\
    \ $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z\
    \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $node =~ ^[0-9]+$ ]]; then\n      if [[ $node -eq 0 ]]; then\n    \
    \    min_even_value=0\n        min_even_index=$i\n        break\n      elif [[\
    \ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n        if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n          min_even_value=$node\n\
    \          min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if [[ -z\
    \ $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  local i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"]\"\n  fi", " \
    \ local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n  local -i min_value=10000000000\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_index=$i\n      min_value=0\n      break\n    elif [[ ${nodes[$i]}\
    \ -lt $min_value && $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      min_index=$i\n\
    \      min_value=${nodes[$i]}\n    fi\n  done\n  if [[ $min_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"${nodes[$min_index]}\\\" \\\"$min_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if (( nodes[i] % 2 == 0 )); then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=${nodes[i]}\n\
    \        min_even_index=$i\n      elif (( nodes[i] < min_even_value )); then\n\
    \        min_even_value=${nodes[i]}\n        min_even_index=$i\n      fi\n   \
    \ fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes=(\"$@\")\n  local -a evens=()\n  local -a evens_index=()\n  local -a\
    \ evens_min_index=()\n  local -a evens_min_value=()\n  local -a evens_min_index_value=()\n\
    \  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local\
    \ -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local\
    \ -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local\
    \ -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local\
    \ -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n\
    \  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i\
    \ jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n \
    \ local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i\
    \ bbb=0\n  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n\
    \  local -i ggg=0", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [ $((node % 2)) -eq 0\
    \ ]; then\n      if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value\
    \ ]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i found_even=0\n  for\
    \ ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n    if ((node_value % 2 ==\
    \ 0)); then\n      found_even=1\n      if ((node_value < min_even_value)); then\n\
    \        min_even_value=$node_value\n        min_even_index=$i\n      fi\n   \
    \ fi\n  done\n  if ((found_even == 0)); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local min_even_value=\n  local min_even_index=\n  local i=0\n  for node in\
    \ \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n      if [[ -z $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      elif\
    \ (( node < min_even_value )); then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_index=${#nodes[@]}\n\
    \  local -i min_even_value=${#nodes[@]}\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_index -lt ${#nodes[@]} ]]; then\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n   \
    \ echo \"[]\"\n  fi", "  local -a nodes=($1)\n  local -i min_index=0\n  local\
    \ -i min_value=0\n  local -i index=0\n  local -i value=0\n  local -i found=0\n\
    \  for value in \"${nodes[@]}\"; do\n    if (( value % 2 == 0 )); then\n     \
    \ if (( found == 0 )); then\n        min_value=$value\n        min_index=$index\n\
    \        found=1\n      elif (( value < min_value )); then\n        min_value=$value\n\
    \        min_index=$index\n      fi\n    fi\n    index=$(( index + 1 ))\n  done\n\
    \  if (( found == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i is_even\n  for ((i=0;\
    \ i<n; i++)); do\n    node_value=${nodes[i]}\n    node_index=$i\n    is_even=$((node_value\
    \ % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if [[ $node_value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node_value\n        min_even_index=$node_index\n\
    \      fi\n    fi\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $smallest_even_value ]] || [[ $node -lt $smallest_even_value ]];\
    \ then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_value=\n\
    \  local smallest_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_value ]] || [[ ${nodes[$i]} -lt $smallest_value ]]; then\n\
    \        smallest_value=${nodes[$i]}\n        smallest_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -i min_even_value=1000000000\n  local -i min_even_index=1000000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 &&\
    \ node < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 1000000000 )); then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n  local\
    \ -i min_index=0\n  local -i min_value=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 )); then\n      evens+=($node)\n    fi\n  done\n  if\
    \ (( ${#evens[@]} == 0 )); then\n    echo \"[]\"\n  else\n    min_value=${evens[0]}\n\
    \    for (( i=1; i<${#evens[@]}; i++ )); do\n      if (( evens[i] < min_value\
    \ )); then\n        min_value=${evens[i]}\n        min_index=$i\n      fi\n  \
    \  done\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi", "  local\
    \ nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$index\n    fi\n    (( index++ ))\n  done\n  if (( min_even_value\
    \ == 1000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_index=\n  local min_even_value=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      if [[ -z $min_even_index ]]; then\n        min_even_index=$i\n        min_even_value=0\n\
    \      fi\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $(( ${nodes[$i]} % 2 )) -eq\
    \ 0 ]]; then\n      if [[ -z $min_even_index ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n        min_even_index=$i\n        min_even_value=${nodes[$i]}\n \
    \     fi\n    fi\n  done\n  if [[ -z $min_even_index ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  local\
    \ min_even_value_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]]; then\n \
    \       min_even_value=$node\n        min_even_index=$i\n      elif [[ $node -lt\
    \ $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "    local -a nodes=($1)\n    local -i min_value=100000000\n   \
    \ local -i min_index=100000000\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i value\n    local -i index\n    for ((i=0; i<n; i++)); do\n     \
    \   value=${nodes[i]}\n        if ((value % 2 == 0 && value < min_value)); then\n\
    \            min_value=$value\n            min_index=$i\n        fi\n    done\n\
    \    if ((min_value == 100000000)); then\n        echo \"[]\"\n    else\n    \
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n    fi", "  local -a nodes=($1)\n\
    \  local -i min_value=0\n  local -i min_index=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value=0\n  local -i index=0\n  local -i found=0\n  for ((i=0; i<len;\
    \ i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0)); then\n      if\
    \ ((found == 0)); then\n        min_value=$value\n        min_index=$i\n     \
    \   found=1\n      elif ((value < min_value)); then\n        min_value=$value\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if ((found == 0)); then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\
    \n  fi", "  local nodes=$1\n  local evens=()\n  local evens_idx=()\n  local min_even=\n\
    \  local min_even_idx=\n  local i=0\n  for node in $nodes; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_idx+=($i)\n    fi\n\
    \    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"[]\"\n \
    \ else\n    min_even=${evens[0]}\n    min_even_idx=${evens_idx[0]}\n    for ((i=1;\
    \ i<${#evens[@]}; i++)); do\n      if [[ ${evens[i]} -lt $min_even ]]; then\n\
    \        min_even=${evens[i]}\n        min_even_idx=${evens_idx[i]}\n      fi\n\
    \    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_idx\\\"]\"\n  fi", " \
    \ local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i min_even_index=10000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n\
    \  local min_even_value=\"\"\n  local min_even_index=\"\"\n  local index=0\n \
    \ for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[\
    \ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i smallest_value=0\n  local -i smallest_index=0\n  local -i index=0\n\
    \  local -i value=0\n  local -i found=0\n  for value in \"${nodes[@]}\"; do\n\
    \    if [[ $((value % 2)) -eq 0 ]]; then\n      if [[ $found -eq 0 ]]; then\n\
    \        smallest_value=$value\n        smallest_index=$index\n        found=1\n\
    \      elif [[ $value -lt $smallest_value ]]; then\n        smallest_value=$value\n\
    \        smallest_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ $found -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i i=0\n  local -i min_even_value=100000000\n  local -i min_even_index=0\n\
    \  local -i min_even_count=0\n  local -i min_even_first_index=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_value=0\n  local -i node_index=0\n  local -i node_first_index=0\n\
    \  local -i node_count=0\n  local -i even_count=0\n  local -i even_first_index=0\n\
    \  local -i even_index=0\n  local -i even_value=0\n  local -i even_count=0\n \
    \ local -i even_first_index=0\n  local -i even_index=0\n  local -i even_value=0\n\
    \  local -i even_count=0\n  local -i even_first_index=0\n  local -i even_index=0\n\
    \  local -i even_value=0\n  local -i even_count=0\n  local -i even_first_index=0\n\
    \  local -i even_index=0\n  local -i even_value=0\n  local -i even_count=0\n \
    \ local -i even_first_index=0\n  local -i even_index=0\n  local -i even_value=0\n\
    \  local -i even_count=0\n  local -i even_first_index=0\n  local -i even_index=0\n\
    \  local -i even_value=0\n  local -i even_count=0\n  local -i even_first_index=0\n\
    \  local -i even_index=0\n  local -i even_value=0\n  local -i even_count=0\n \
    \ local -i even_first_index=0\n  local -i even_index=0\n  local -i even_value=0\n\
    \  local -i even_count=0\n  local -i even_first_index=0\n  local -i even_index=0\n\
    \  local -i even_value=0\n  local -i even_", "  local -a nodes=($1)\n  local -i\
    \ i=0\n  local -i min=0\n  local -i min_index=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_first=1\n  for ((i=0;\
    \ i<len; i++)); do\n    value=${nodes[i]}\n    is_even=$((value % 2))\n    if\
    \ [[ $is_even -eq 0 ]]; then\n      if [[ $is_first -eq 1 ]]; then\n        min=$value\n\
    \        min_index=$i\n        is_first=0\n      elif [[ $value -lt $min ]]; then\n\
    \        min=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if [[ $is_first\
    \ -eq 0 ]]; then\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  else\n  \
    \  echo \"[]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "    local nodes=($1)\n    local min_even_value=\n    local min_even_value_index=\n\
    \    for i in \"${!nodes[@]}\"; do\n        if [[ ${nodes[$i]} =~ ^[0-9]+$ ]];\
    \ then\n            if [[ ${nodes[$i]} -eq 0 ]]; then\n                min_even_value=0\n\
    \                min_even_value_index=$i\n                break\n            elif\
    \ [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n             \
    \   if [[ -z $min_even_value ]]; then\n                    min_even_value=${nodes[$i]}\n\
    \                    min_even_value_index=$i\n                elif [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n                    min_even_value=${nodes[$i]}\n\
    \                    min_even_value_index=$i\n                fi\n           \
    \ fi\n        fi\n    done\n    if [[ -z $min_even_value ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n    fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i index=0\n  for node in \"${nodes[@]}\";\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local\
    \ -i min_index=0\n  local -i min_value=0\n  local -i min_even_index=0\n  local\
    \ -i min_even_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i even_value=0\n  local -i even_index=0\n  local -i is_even=0\n  local -i is_min_even=0\n\
    \  local -i is_min=0\n  local -i is_first_even=0\n  local -i is_first=0\n  local\
    \ -i is_first_min_even=0\n  local -i is_first_min=0\n  local -i is_first_min_even_index=0\n\
    \  local -i is_first_min_index=0\n  local -i is_first_even_index=0\n  local -i\
    \ is_first_index=0\n  local -i is_min_even_index=0\n  local -i is_min_index=0\n\
    \  local -i is_even_index=0\n  local -i is_index=0\n  local -i is_first_even_value=0\n\
    \  local -i is_first_value=0\n  local -i is_first_min_even_value=0\n  local -i\
    \ is_first_min_value=0\n  local -i is_min_even_value=0\n  local -i is_min_value=0\n\
    \  local -i is_even_value=0\n  local -i is_value=0\n  local -i is_first_even_index=0\n\
    \  local -i is_first_index=0\n  local -i is_min_even_index=0\n  local -i is_min_index=0\n\
    \  local -i is_even_index=0\n  local -i is_index=0\n  local -i is_first_even_value=0\n\
    \  local -i is_first_value=0\n  local -i is_first_min_even_value=0\n  local -",
  "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 ));\
    \ then\n      if (( node < min_even_value )); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 100000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_i=0\n  local\
    \ -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local -i\
    \ is_first=1\n  local -i is_even=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n\
    \    is_even=$((value % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if [[ $is_first\
    \ -eq 1 ]]; then\n        min_value=$value\n        min_i=$i\n        is_first=0\n\
    \      elif [[ $value -lt $min_value ]]; then\n        min_value=$value\n    \
    \    min_i=$i\n      fi\n    fi\n  done\n  if [[ $is_first -eq 0 ]]; then\n  \
    \  echo \"[\\\"$min_value\\\", \\\"$min_i\\\"]\"\n  else\n    echo \"[]\"\n  fi",
  "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n\
    \      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[\
    \ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a a=($1)\n  local -i i=0\n  local -i min=0\n  local -i min_i=0\n  local\
    \ -i len=${#a[@]}\n  local -i v\n  for ((i=0; i<len; i++)); do\n    v=${a[i]}\n\
    \    if ((v % 2 == 0)); then\n      if ((v < min)); then\n        min=v\n    \
    \    min_i=i\n      fi\n    fi\n  done\n  if ((min == 0)); then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min\\\", \\\"$min_i\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ $min_even_value -eq 10000000000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  if [ -z \"\
    $1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  local min_even_value=\n  local\
    \ min_even_index=\n  local i=0\n  for value in $1; do\n    if [ $((value % 2))\
    \ -eq 0 ]; then\n      if [ -z \"$min_even_value\" ] || [ $value -lt $min_even_value\
    \ ]; then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i n=${#nodes[@]}\n  local -i i\n\
    \  local -i min_even_value=1000000000\n  local -i min_even_index=0\n  local -i\
    \ min_even_count=0\n  local -i min_even_first_index=0\n  local -i min_even_last_index=0\n\
    \  for ((i=0; i<n; i++)); do\n    local -i node=${nodes[i]}\n    if ((node % 2\
    \ == 0)); then\n      if ((node < min_even_value)); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n        min_even_count=1\n        min_even_first_index=$i\n\
    \        min_even_last_index=$i\n      elif ((node == min_even_value)); then\n\
    \        ((min_even_count++))\n        min_even_last_index=$i\n      fi\n    fi\n\
    \  done\n  if ((min_even_count == 0)); then\n    echo \"[]\"\n  elif ((min_even_count\
    \ == 1)); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_first_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<len; i++)); do\n    value=${nodes[$i]}\n\
    \    if [[ $((value % 2)) -eq 0 ]]; then\n      if [[ $value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i\
    \ min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ < 100000000 )); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "  declare -a arr=(\"$@\")\n  declare -i\
    \ min=10000\n  declare -i min_index=10000\n  declare -i i=0\n  for n in \"${arr[@]}\"\
    ; do\n    if [[ $n -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"0\\\"]\"\n   \
    \   return\n    fi\n    if [[ $n -lt $min && $n -gt 0 && $n%2 -eq 0 ]]; then\n\
    \      min=$n\n      min_index=$i\n    fi\n    i+=1\n  done\n  if [[ $min -lt\
    \ 10000 ]]; then\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  else\n  \
    \  echo \"[]\"\n  fi", "  local -a nodes=($1)\n  local smallest_value=\n  local\
    \ smallest_index=\n  local index=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $node -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$index\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value ]]; then\n\
    \        smallest_value=$node\n        smallest_index=$index\n      fi\n    fi\n\
    \    ((index++))\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi",
  "    local -a nodes=($1)\n    local -i min_even_value=100000000\n    local -i min_even_index=100000000\n\
    \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i value\n    local\
    \ -i index\n    local -i found=0\n    for ((i=0; i<n; i++)); do\n        value=${nodes[i]}\n\
    \        if ((value % 2 == 0)); then\n            if ((value < min_even_value));\
    \ then\n                min_even_value=$value\n                min_even_index=$i\n\
    \                found=1\n            fi\n        fi\n    done\n    if ((found\
    \ == 1)); then\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    else\n        echo \"[]\"\n    fi", "  local -a nodes=($1)\n  local\
    \ -a evens\n  local -a odds\n  local -a result\n  local i\n  local smallest\n\
    \  local index\n  local value\n  for i in \"${nodes[@]}\"; do\n    if (( i % 2\
    \ == 0 )); then\n      evens+=(\"$i\")\n    else\n      odds+=(\"$i\")\n    fi\n\
    \  done\n  if (( ${#evens[@]} == 0 )); then\n    result=()\n  else\n    smallest=\"\
    ${evens[0]}\"\n    for i in \"${evens[@]}\"; do\n      if (( i < smallest ));\
    \ then\n        smallest=\"$i\"\n      fi\n    done\n    index=\"${nodes[@]/${odds[@]}/}\"\
    \n    index=\"${index/${evens[@]/$smallest/}/}\"\n    index=\"${index/$smallest/}\"\
    \n    index=\"${#index}\"\n    result=(\"$smallest\" \"$index\")\n  fi\n  echo\
    \ \"${result[@]}\"", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i node_value=0\n  local -i is_even=0\n  local\
    \ -i is_first_even=0\n  for node in \"${nodes[@]}\"; do\n    node_value=$node\n\
    \    is_even=$((node_value % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if\
    \ [[ $is_first_even -eq 0 ]]; then\n        min_value=$node_value\n        min_index=$i\n\
    \        is_first_even=1\n      else\n        if [[ $node_value -lt $min_value\
    \ ]]; then\n          min_value=$node_value\n          min_index=$i\n        fi\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ $is_first_even -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  fi", "    local nodes=($1)\n    local min_even_index=\n    local min_even_value=\n\
    \    local i=0\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2))\
    \ -eq 0 ]]; then\n            if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        i=$((i + 1))\n    done\n    if [[ -z $min_even_value\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=($1)\n  local smallest_value=\"\
    \"\n  local smallest_index=\"\"\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local\
    \ node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      smallest_value=$node\n\
    \      smallest_index=$i\n      break\n    elif [[ $node -gt 0 ]] && [[ $node%2\
    \ -eq 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value\
    \ ]]; then\n        smallest_value=$node\n        smallest_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n  local -i i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i found_even=0\n  for ((i=0; i<len; i++)); do\n    if [[ ${nodes[i]}\
    \ -lt min_value ]]; then\n      min_value=${nodes[i]}\n      min_index=i\n   \
    \ fi\n    if [[ ${nodes[i]} -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=i\n\
    \      found_even=1\n      break\n    fi\n    if [[ ${nodes[i]} -gt 0 && ${nodes[i]}%2\
    \ -eq 0 && ${nodes[i]} -lt min_even_value ]]; then\n      min_even_value=${nodes[i]}\n\
    \      min_even_index=i\n      found_even=1\n    fi\n  done\n  if [[ $found_even\
    \ -eq 1 ]]; then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  else\n    echo \"[]\"\n  fi", "    local -a nodes=($1)\n    local -i min_even_value=100000000\n\
    \    local -i min_even_index=100000000\n    local -i index=0\n    local -i value\n\
    \    for value in \"${nodes[@]}\"; do\n        if (( value % 2 == 0 )); then\n\
    \            if (( value < min_even_value )); then\n                min_even_value=$value\n\
    \                min_even_index=$index\n            fi\n        fi\n        ((\
    \ index++ ))\n    done\n    if (( min_even_value == 100000000 )); then\n     \
    \   echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ]; then\n\
    \      if [ -z \"$min_even_value\" ] || [ $node -lt $min_even_value ]; then\n\
    \        min_even_value=$node\n        min_even_index=$index\n      fi\n    fi\n\
    \    index=$((index + 1))\n  done\n  if [ -z \"$min_even_value\" ]; then\n   \
    \ echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n   \
    \ if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[\
    \ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$i\n\
    \      fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_index=0\n\
    \  local -i min_even_value=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i value=0\n  local -i min_even_found=0\n  local -i min_even_index_found=0\n\
    \  local -i min_even_value_found=0\n  local -i min_even_index_found_first=0\n\
    \  local -i min_even_value_found_first=0\n  if [[ $n -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if [[ $value -eq 0 ]]; then\n      if [[ $min_even_found -eq 0 ]]; then\n\
    \        min_even_index=$i\n        min_even_value=$value\n        min_even_found=1\n\
    \      fi\n    elif [[ $value -eq 1 ]]; then\n      continue\n    elif [[ $value\
    \ -eq 2 ]]; then\n      if [[ $min_even_found -eq 0 ]]; then\n        min_even_index=$i\n\
    \        min_even_value=$value\n        min_even_found=1\n      elif [[ $min_even_value\
    \ -gt $value ]]; then\n        min_even_index=$i\n        min_even_value=$value\n\
    \      fi\n    elif [[ $value -eq 3 ]]; then\n      continue\n    elif [[ $value\
    \ -eq 4 ]]; then\n      if [[ $min_even_found -eq 0 ]]; then\n        min_even_index=$i\n\
    \        min_even_value=$value\n        min_even_found=1\n      elif [[ $min_even_value\
    \ -gt $value ]]; then\n        min_even_index=$i\n        min_even_value=$value\n\
    \      fi\n    elif [[ $value -eq 5 ]]; then\n      continue\n    elif [[ $value\
    \ -eq 6 ]]; then\n      if [[ $min_even_found -eq 0 ]]; then\n       ", "  local\
    \ -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n  local -i i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i value=0\n  local -i index=0\n  local\
    \ -i min_even_index=0\n  local -i min_even_value=0\n  local -i found_even=0\n\
    \  local -i found_odd=0\n  local -i found_zero=0\n  local -i found_non_zero=0\n\
    \  local -i found_non_zero_even=0\n  local -i found_non_zero_odd=0\n  local -i\
    \ found_zero_even=0\n  local -i found_zero_odd=0\n  local -i found_non_zero_even_min=0\n\
    \  local -i found_non_zero_odd_min=0\n  local -i found_zero_even_min=0\n  local\
    \ -i found_zero_odd_min=0\n  local -i found_non_zero_even_min_index=0\n  local\
    \ -i found_non_zero_odd_min_index=0\n  local -i found_zero_even_min_index=0\n\
    \  local -i found_zero_odd_min_index=0\n  local -i found_non_zero_even_min_index_first=0\n\
    \  local -i found_non_zero_odd_min_index_first=0\n  local -i found_zero_even_min_index_first=0\n\
    \  local -i found_zero_odd_min_index_first=0\n  local -i found_non_zero_even_min_index_first_value=0\n\
    \  local -i found_non_zero_odd_min_index_first_value=0\n  local -i found_zero_even_min_index_first_value=0\n\
    \  local -i found_zero_odd_min_index_first_value=0\n  local -i found_non_zero_even_min_index_first_value_min=0\n\
    \  local -i found_non_zero_odd_min", "  local -a nodes=($1)\n  local -i smallest_even_value=1000000000\n\
    \  local -i smallest_even_index=1000000000\n  local -i index=0\n  for node in\
    \ \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $smallest_even_value\
    \ ]]; then\n      smallest_even_value=$node\n      smallest_even_index=$index\n\
    \    fi\n    ((index++))\n  done\n  if [[ $smallest_even_value -eq 1000000000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i node_value\n  local -i node_index\n  local -i found_even=0\n  local -i found_smaller_even=0\n\
    \  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n    if ((node_value\
    \ % 2 == 0)); then\n      found_even=1\n      if ((node_value < min_even_value));\
    \ then\n        min_even_value=$node_value\n        min_even_index=$i\n      \
    \  found_smaller_even=1\n      fi\n    fi\n  done\n  if ((found_even == 0)); then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n \
    \ local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  for ((i=0; i<n; i++)); do\n    local -i node=${nodes[$i]}\n    if ((node %\
    \ 2 == 0 && node < min_even_value)); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n  done\n  if ((min_even_value < 1000000000)); then\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi",
  "  local nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_value_index=$i\n      fi\n   \
    \ fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_index=$i\n      break\n    elif\
    \ [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z\
    \ $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value ]]; then\n\
    \        smallest_even_value=${nodes[$i]}\n        smallest_even_index=$i\n  \
    \    fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo '[]'\n\
    \  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local min_value=\n  local min_index=\n  local\
    \ i=0\n  for node in $nodes; do\n    if [[ $node -eq 0 ]]; then\n      min_value=0\n\
    \      min_index=$i\n      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2))\
    \ -eq 0 ]]; then\n      if [[ -z $min_value ]] || [[ $node -lt $min_value ]];\
    \ then\n        min_value=$node\n        min_index=$i\n      fi\n    fi\n    i=$((i\
    \ + 1))\n  done\n  if [[ -z $min_value ]]; then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min_even_value=\n  local min_even_index=\n  local node_index=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$node_index\n      fi\n    fi\n    node_index=$((node_index\
    \ + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local min=9999999999\n  local index=0\n  local i=0\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min\
    \ ]]; then\n      min=$node\n      index=$i\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ $min -eq 9999999999 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min\\\", \\\"$index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=9999999999\n\
    \  local -i min_even_index=9999999999\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 )); then\n      if (( node < min_even_value ));\
    \ then\n        min_even_value=$node\n        min_even_index=$i\n      elif ((\
    \ node == min_even_value )); then\n        if (( i < min_even_index )); then\n\
    \          min_even_index=$i\n        fi\n      fi\n    fi\n    (( i++ ))\n  done\n\
    \  if (( min_even_value == 9999999999 )); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local min_even_value=\n  local min_even_value_index=\n  local i=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_value_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min_even_value=\n  local min_even_index=\n  local node_index=0\n  for\
    \ node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if\
    \ [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$node_index\n      fi\n    fi\n    ((node_index++))\n\
    \  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i smallest_even_value=10000000000\n  local -i smallest_even_value_index=-1\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n    ((i++))\n  done\n\
    \  if [[ $smallest_even_value_index -eq -1 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local smallest_even_value_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [ $((node % 2)) -eq 0 ];\
    \ then\n      if [ -z \"$smallest_even_value\" ] || [ $node -lt $smallest_even_value\
    \ ]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local\
    \ -i i\n  local -i smallest_even_value=1000000000\n  local -i smallest_even_index=1000000000\n\
    \  local -i smallest_even_count=0\n  for ((i=0; i<${#nodes[@]}; i++)); do\n  \
    \  if (( nodes[i] % 2 == 0 )); then\n      if (( nodes[i] < smallest_even_value\
    \ )); then\n        smallest_even_value=nodes[i]\n        smallest_even_index=i\n\
    \        smallest_even_count=1\n      elif (( nodes[i] == smallest_even_value\
    \ )); then\n        smallest_even_count+=1\n      fi\n    fi\n  done\n  if ((\
    \ smallest_even_count == 0 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"\
    $smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min=999999\n  local min_index=999999\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if (( ${nodes[$i]} % 2 == 0 && ${nodes[$i]} < $min )); then\n      min=${nodes[$i]}\n\
    \      min_index=$i\n    fi\n  done\n  if (( $min == 999999 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -i i=0\n  local -i min_even_index=-1\n  local -i min_even_value=1000000000\n\
    \  local -i len=${#nodes[@]}\n  while [ $i -lt $len ]; do\n    local -i node=${nodes[$i]}\n\
    \    if [ $((node % 2)) -eq 0 ] && [ $node -lt $min_even_value ]; then\n     \
    \ min_even_value=$node\n      min_even_index=$i\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [ $min_even_index -eq -1 ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"$1\"\
    \n  local min_even_value=\n  local min_even_index=\n  local i=0\n  for node in\
    \ $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n\
    \  local min_even_index=\n  local index=0\n  for node in $nodes; do\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=-1\n  local -i i=0\n  for node in \"${nodes[@]}\";\
    \ do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_index\
    \ >= 0 )); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  else\n    echo \"[]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000001\n\
    \  local -i min_even_index=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   (( i++ ))\n  done\n  if (( min_even_value == 1000000001 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_value=\"\"\n  local smallest_index=\"\
    \"\n  local index=0\n  for node in $nodes; do\n    if [[ $node =~ ^[0-9]+$ ]];\
    \ then\n      if [[ $node -eq 0 ]]; then\n        smallest_value=\"0\"\n     \
    \   smallest_index=\"$index\"\n        break\n      elif [[ $node -gt 0 ]] &&\
    \ [[ $node%2 -eq 0 ]]; then\n        if [[ -z $smallest_value ]]; then\n     \
    \     smallest_value=\"$node\"\n          smallest_index=\"$index\"\n        elif\
    \ [[ $node -lt $smallest_value ]]; then\n          smallest_value=\"$node\"\n\
    \          smallest_index=\"$index\"\n        fi\n      fi\n    fi\n    index=$((index+1))\n\
    \  done\n  if [[ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=10000\n  local -i min_even_index=10000\n  local -i\
    \ i=0\n  local -i len=${#nodes[@]}\n  while (( i < len )); do\n    local -i value=${nodes[i]}\n\
    \    if (( value < min_even_value && value % 2 == 0 )); then\n      min_even_value=$value\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "    local -a nodes=($1)\n    local -i\
    \ min_even_value=10000000000\n    local -i min_even_index=10000000000\n    local\
    \ -i i=0\n    local -i node_value\n    for node_value in \"${nodes[@]}\"; do\n\
    \        if (( node_value % 2 == 0 )); then\n            if (( node_value < min_even_value\
    \ )); then\n                min_even_value=$node_value\n                min_even_index=$i\n\
    \            fi\n        fi\n        (( i++ ))\n    done\n    if (( min_even_value\
    \ == 10000000000 )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "    local -a nodes=($1)\n\
    \    local -i min_even_value=10000000000\n    local -i min_even_index=10000000000\n\
    \    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i node_value\n    local\
    \ -i node_index\n    local -i found_even=0\n    for ((i=0; i<n; i++)); do\n  \
    \      node_value=${nodes[i]}\n        if ((node_value % 2 == 0)); then\n    \
    \        found_even=1\n            if ((node_value < min_even_value)); then\n\
    \                min_even_value=$node_value\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if ((found_even == 0)); then\n    \
    \    echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n\
    \    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo \"\
    []\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=0\n   \
    \ for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[i]}\n        min_even_index=$i\n      fi\n\
    \    done\n    result+=($min_even)\n    result+=(${evens_index[min_even_index]})\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local smallest_even_value=\"\"\n  local smallest_even_index=\"\"\n  local\
    \ index=0\n  for node in $nodes; do\n    if [ \"$node\" -eq 0 ]; then\n      smallest_even_value=\"\
    0\"\n      smallest_even_index=\"$index\"\n      break\n    elif [ \"$((node %\
    \ 2))\" -eq 0 ] && [ -z \"$smallest_even_value\" ] || [ \"$node\" -lt \"$smallest_even_value\"\
    \ ]; then\n      smallest_even_value=\"$node\"\n      smallest_even_index=\"$index\"\
    \n    fi\n    index=$((index + 1))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -lt 10000 ]]; then\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"\
    []\"\n  fi", "    local -a nodes=($1)\n    local -i min_even_value=10000\n   \
    \ local -i min_even_index=10000\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    while ((i < n)); do\n        if ((nodes[i] % 2 == 0 && nodes[i] < min_even_value));\
    \ then\n            min_even_value=nodes[i]\n            min_even_index=i\n  \
    \      fi\n        ((i++))\n    done\n    if ((min_even_value < 10000)); then\n\
    \        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    else\n\
    \        echo \"[]\"\n    fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  for i in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n\
    \        min_even_value=${nodes[$i]}\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "   \
    \ local -a nodes=($1)\n    local -i min_even_value=10000000000\n    local -i min_even_index=10000000000\n\
    \    local -i index=0\n    for node in \"${nodes[@]}\"; do\n        if (( node\
    \ % 2 == 0 )); then\n            if (( node < min_even_value )); then\n      \
    \          min_even_value=$node\n                min_even_index=$index\n     \
    \       fi\n        fi\n        (( index++ ))\n    done\n    if (( min_even_value\
    \ == 10000000000 )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi", "  local nodes=$1\n\
    \  local evens=$(echo \"$nodes\" | grep -Eo '^[0-9]+$' | grep -Eo '^[02468]+$')\n\
    \  local min=$(echo \"$evens\" | sort -n | head -n 1)\n  local index=$(echo \"\
    $nodes\" | grep -Eo '^[0-9]+$' | grep -Eo '^[02468]+$' | grep -n \"$min\" | cut\
    \ -d: -f1)\n  if [ -z \"$min\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min\\\", \\\"$index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ '[]'\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_value=10000\n  local -i min_index=10000\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  local -i value\n  local -i index\n\
    \  for (( i=0; i<len; i++ )); do\n    value=${nodes[$i]}\n    if [[ $((value%2))\
    \ -eq 0 ]]; then\n      if [[ $value -lt $min_value ]]; then\n        min_value=$value\n\
    \        min_index=$i\n      elif [[ $value -eq $min_value ]]; then\n        if\
    \ [[ $i -lt $min_index ]]; then\n          min_index=$i\n        fi\n      fi\n\
    \    fi\n  done\n  if [[ $min_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_index=0\n  local -i min_value=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_first_even=0\n  local\
    \ -i is_first_value=0\n  local -i is_first_index=0\n  local -i is_first_even_index=0\n\
    \  local -i is_first_value_index=0\n  local -i is_first_index_index=0\n  local\
    \ -i is_first_even_index_index=0\n  local -i is_first_value_index_index=0\n  local\
    \ -i is_first_index_index_index=0\n  local -i is_first_even_index_index_index=0\n\
    \  local -i is_first_value_index_index_index=0\n  local -i is_first_index_index_index_index=0\n\
    \  local -i is_first_even_index_index_index_index=0\n  local -i is_first_value_index_index_index_index=0\n\
    \  local -i is_first_index_index_index_index_index=0\n  local -i is_first_even_index_index_index_index_index=0\n\
    \  local -i is_first_value_index_index_index_index_index=0\n  local -i is_first_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_index_index_index_index_index_index=0\n  local -i is_first_value_index_index_index_index_index_index=0\n\
    \  local -i is_first_index_index_index_index_index_index_index=0\n  local -i is_first_even_index_index_index_index_index_index_index=0\n\
    \  local -i is_first_value_index_index_index_index_index_index_index=0\n  local\
    \ -i is_first_index_index", "  local -a nodes=($1)\n  local -i i=0\n  local -i\
    \ min_index=0\n  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i\
    \ value=0\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_value=\n\
    \  local smallest_index=\n  local index=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value ]] ||\
    \ [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n      \
    \  smallest_index=$index\n      fi\n    fi\n    ((index++))\n  done\n  if [[ -z\
    \ $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi", "  local nodes=\"$1\"\n  local smallest_even_value=\"\
    \"\n  local smallest_even_value_index=\"\"\n  local i=0\n  for node in $nodes;\
    \ do\n    if [ \"$((node % 2))\" -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ \"$node\" -lt \"$smallest_even_value\" ]; then\n        smallest_even_value=\"\
    $node\"\n        smallest_even_value_index=\"$i\"\n      fi\n    fi\n    i=$((i\
    \ + 1))\n  done\n  if [ -z \"$smallest_even_value\" ]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=$1\n  local evens=$(echo $nodes | tr ' ' '\\n' | grep\
    \ -E '^[0-9]+$' | grep -E '^[02468]')\n  local smallest_even=$(echo $evens | tr\
    \ ' ' '\\n' | sort -n | head -n 1)\n  local smallest_even_index=$(echo $nodes\
    \ | tr ' ' '\\n' | grep -n $smallest_even | cut -d ':' -f 1 | head -n 1)\n  if\
    \ [ -z \"$smallest_even\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even\\\
    \", \\\"$smallest_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if [[ ${nodes[$i]} -eq 0 ]]; then\n      smallest_even_value=0\n      smallest_even_value_index=$i\n\
    \      break\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=10000\n  local min_even_value_index=-1\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_value_index=$i\n      fi\n   \
    \ fi\n  done\n  if [[ $min_even_value_index -eq -1 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n\
    \  local -i min_value=-1\n  local -i value\n  local -i len=${#nodes[@]}\n  for\
    \ ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0)); then\n\
    \      if ((min_value == -1 || value < min_value)); then\n        min_value=$value\n\
    \        min_index=$i\n      fi\n    fi\n  done\n  if ((min_index == -1)); then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\
    \n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i node_count=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i node_count_even=0\n\
    \  local -i node_count_odd=0\n  local -i node_count_zero=0\n  local -i node_count_nonzero=0\n\
    \  local -i node_count_nonzero_even=0\n  local -i node_count_nonzero_odd=0\n \
    \ local -i node_count_nonzero_even_min=0\n  local -i node_count_nonzero_odd_min=0\n\
    \  local -i node_count_nonzero_even_min_index=0\n  local -i node_count_nonzero_odd_min_index=0\n\
    \  local -i node_count_nonzero_even_min_count=0\n  local -i node_count_nonzero_odd_min_count=0\n\
    \  local -i node_count_nonzero_even_min_index_count=0\n  local -i node_count_nonzero_odd_min_index_count=0\n\
    \  local -i node_count_nonzero_even_min_index_count_min=0\n  local -i node_count_nonzero_odd_min_index_count_min=0\n\
    \  local -i node_count_nonzero_even_min_index_count_min_index=0\n  local -i node_count_nonzero_odd_min_index_count_min_index=0\n\
    \  local -i node_count_nonzero_even_min_index_count_min_index_count=0\n  local\
    \ -i node_count_nonzero_odd_min_index_count_min_index_count=0\n  local -i node_count_nonzero_even_min_index_count_min_index_count_min=0\n\
    \  local -i node_count_nonzero_odd_min", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a odds=()\n  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n\
    \  local n=0\n  local m=0\n  local min=0\n  local min_index=0\n  local min_index_even=0\n\
    \  local min_index_odd=0\n  local min_even=0\n  local min_odd=0\n  local -i len=${#nodes[@]}\n\
    \  if [ $len -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0; i<len;\
    \ i++)); do\n    if [ $((nodes[i] % 2)) -eq 0 ]; then\n      evens[j]=${nodes[i]}\n\
    \      j=$((j+1))\n    else\n      odds[k]=${nodes[i]}\n      k=$((k+1))\n   \
    \ fi\n  done\n  if [ $j -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n\
    \  min_odd=${odds[0]}\n  min_index_even=0\n  min_index_odd=0\n  for ((n=0; n<j;\
    \ n++)); do\n    if [ ${evens[n]} -lt $min_even ]; then\n      min_even=${evens[n]}\n\
    \      min_index_even=$n\n    fi\n  done\n  for ((m=0; m<k; m++)); do\n    if\
    \ [ ${odds[m]} -lt $min_odd ]; then\n      min_odd=${odds[m]}\n      min_index_odd=$m\n\
    \    fi\n  done\n  if [ $min_even -lt $min_odd ]; then\n    min=$min_even\n  \
    \  min_index=$min_index_even\n  else\n    min=$min_odd\n    min_index=$min_index_odd\n\
    \  fi\n  result[0]=$min\n  result[1]=$min_index\n  echo \"[\\\"${result[0]}\\\"\
    ,", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n  local -i min_even_index=100000000\n\
    \  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ $min_even_value -eq 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "    local -a nodes=($1)\n\
    \    local min_even_value=\n    local min_even_index=\n    local i=0\n    local\
    \ node=\n    for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n            if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        ((i++))\n    done\n    if [[ -z $min_even_value\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_index=()\n  local -a result=()\n  local i=0\n  for node in \"\
    ${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n      evens+=($node)\n  \
    \    evens_index+=($i)\n    fi\n    ((i++))\n  done\n  if (( ${#evens[@]} == 0\
    \ )); then\n    echo \"[]\"\n  else\n    local min=${evens[0]}\n    local min_index=0\n\
    \    for (( i=1; i<${#evens[@]}; i++ )); do\n      if (( evens[i] < min )); then\n\
    \        min=${evens[i]}\n        min_index=$i\n      fi\n    done\n    result+=($min)\n\
    \    result+=(${evens_index[min_index]})\n    echo \"[\\\"${result[0]}\\\", \\\
    \"${result[1]}\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_value_index=-1\n  local -i i=0\n  local -i node_value\n \
    \ for node_value in \"${nodes[@]}\"; do\n    if (( node_value % 2 == 0 && node_value\
    \ < min_even_value )); then\n      min_even_value=$node_value\n      min_even_value_index=$i\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_value_index >= 0 )); then\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local\
    \ min_even_value_index=\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node\
    \ -lt $min_even_value ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i value=0\n\
    \  local -i count=0\n  local -i is_even=0\n  local -i is_first_even=0\n  for ((i=0;\
    \ i<${#nodes[@]}; i++)); do\n    value=${nodes[$i]}\n    is_even=$((value % 2))\n\
    \    if [[ $is_even -eq 0 ]]; then\n      if [[ $is_first_even -eq 0 ]]; then\n\
    \        min_even_value=$value\n        min_even_index=$i\n        min_even_count=1\n\
    \        is_first_even=1\n      else\n        if [[ $value -lt $min_even_value\
    \ ]]; then\n          min_even_value=$value\n          min_even_index=$i\n   \
    \       min_even_count=1\n        elif [[ $value -eq $min_even_value ]]; then\n\
    \          min_even_count=$((min_even_count + 1))\n        fi\n      fi\n    fi\n\
    \  done\n  if [[ $is_first_even -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local evens=()\n  local evens_indices=()\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      evens+=(\"${nodes[$i]}\")\n      evens_indices+=(\"$i\")\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens+=(\"${nodes[$i]}\"\
    )\n      evens_indices+=(\"$i\")\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]];\
    \ then\n    echo \"[]\"\n  else\n    min_even=${evens[0]}\n    min_even_index=${evens_indices[0]}\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n      if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n        min_even=${evens[$i]}\n        min_even_index=${evens_indices[$i]}\n\
    \      fi\n    done\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\
    \n  fi", "  local nodes=($1)\n  local min=100000000\n  local min_index=0\n  local\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0)) && ((node <\
    \ min)); then\n      min=$node\n      min_index=$i\n    fi\n    ((i++))\n  done\n\
    \  if ((min == 100000000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_indices=()\n  local -a result=()\n  local i=0\n  for node in\
    \ \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n\
    \      evens_indices+=($i)\n    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local min_even=${evens[0]}\n  \
    \  local min_even_index=${evens_indices[0]}\n    for i in \"${!evens[@]}\"; do\n\
    \      if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n\
    \        min_even_index=${evens_indices[$i]}\n      fi\n    done\n    result+=($min_even)\n\
    \    result+=($min_even_index)\n    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\
    \"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      min_even_value=0\n      min_even_value_index=$i\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_value_index=$i\n      fi\n   \
    \ fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=0\n  local -i min_even_index=0\n\
    \  local -i i=0\n  local -i node_count=${#nodes[@]}\n  local -i node_value=0\n\
    \  local -i found_even=0\n  for ((i=0; i<node_count; i++)); do\n    node_value=${nodes[i]}\n\
    \    if ((node_value % 2 == 0)); then\n      if ((found_even == 0)); then\n  \
    \      min_even_value=$node_value\n        min_even_index=$i\n        found_even=1\n\
    \      elif ((node_value < min_even_value)); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((found_even == 0));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      elif\
    \ [[ $node -eq $min_even_value ]]; then\n        if [[ $i -lt $min_even_index\
    \ ]]; then\n          min_even_index=$i\n        fi\n      fi\n    fi\n    i+=1\n\
    \  done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n    echo \"[]\"\n \
    \ else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local -i min_even_index=10000\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++)); do\n    if\
    \ [[ ${nodes[i]} -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"$i\\\"]\"\n    \
    \  return\n    fi\n    if [[ ${nodes[i]} -lt $min_even_value && ${nodes[i]} -gt\
    \ 0 && ${nodes[i]}%2 -eq 0 ]]; then\n      min_even_value=${nodes[i]}\n      min_even_index=$i\n\
    \    fi\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi",
  "  local nodes=\"$1\"\n  local evens=()\n  local smallest_even\n  local smallest_even_index\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      evens+=($node)\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    smallest_even=${evens[0]}\n    smallest_even_index=0\n\
    \    for node in ${evens[@]}; do\n      if [[ $node -lt $smallest_even ]]; then\n\
    \        smallest_even=$node\n        smallest_even_index=$index\n      fi\n \
    \     index=$((index + 1))\n    done\n    echo \"[\\\"$smallest_even\\\", \\\"\
    $smallest_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n\
    \        min_even_value=${nodes[$i]}\n        min_even_index=$i\n      fi\n  \
    \  fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local\
    \ -a nodes=($1)\n  local -i min_even_value=10000000000\n  local -i min_even_index=10000000000\n\
    \  local -i min_even_count=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n\
    \        min_even_value=$node\n        min_even_index=$i\n        min_even_count=1\n\
    \      elif (( node == min_even_value )); then\n        (( min_even_count++ ))\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_count > 0 )); then\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n   \
    \ echo \"[]\"\n  fi"]
stop_tokens:
- "\n}"
