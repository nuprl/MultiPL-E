name: HumanEval_68_pluck
language: sh
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n#\
  \ >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n\
  # []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the first\
  \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
  \ 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 1000000000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    local -i node=${nodes[$i]}\n    if ((node\
    \ % 2 == 0)); then\n      if ((node < min_even_value)); then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((min_even_value ==\
    \ 10000000000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  local smallest_even_value_index_found=false\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n        smallest_even_value_index_found=true\n\
    \      elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n        smallest_even_value_index_found=true\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ $smallest_even_value_index_found\
    \ == true ]]; then\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi", "    local -a nodes=($1)\n    local -i\
    \ i=0\n    local -i min_even_value=1000000000\n    local -i min_even_index=1000000000\n\
    \    local -i node_value\n    local -i node_index\n    for node_value in \"${nodes[@]}\"\
    ; do\n        if [[ $((node_value % 2)) -eq 0 ]]; then\n            if [[ $node_value\
    \ -lt $min_even_value ]]; then\n                min_even_value=$node_value\n \
    \               min_even_index=$i\n            fi\n        fi\n        i+=1\n\
    \    done\n    if [[ $min_even_value -eq 1000000000 ]]; then\n        echo \"\
    []\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n    fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i node\n  for ((i=0; i<n; i++)); do\n    node=${nodes[i]}\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n     \
    \   min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n  done\n\
    \  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -i min_even_value=10000\n  local -i min_even_index=10000\n  local -i\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n \
    \     if (( node < min_even_value )); then\n        min_even_value=$node\n   \
    \     min_even_index=$i\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_value=0\n\
    \  local -i min_index=0\n  local -i index=0\n  local -i value=0\n  local -i i=0\n\
    \  local -i len=${#nodes[@]}\n  local -i found=0\n  for ((i=0; i<len; i++)); do\n\
    \    value=${nodes[i]}\n    if [[ $((value % 2)) -eq 0 ]]; then\n      if [[ $found\
    \ -eq 0 ]]; then\n        min_value=$value\n        min_index=$i\n        found=1\n\
    \      else\n        if [[ $value -lt $min_value ]]; then\n          min_value=$value\n\
    \          min_index=$i\n        fi\n      fi\n    fi\n  done\n  if [[ $found\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"\
    $min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  for ((i=0; i<n; i++)); do\n \
    \   node_value=${nodes[i]}\n    if ((node_value % 2 == 0)); then\n      if ((node_value\
    \ < min_even_value)); then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if ((min_even_value == 10000000000)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((found == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  fi", "  local nodes=($1)\n  local min_even=\n  local\
    \ min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even=0\n      min_even_index=$i\n      break\n   \
    \ elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if\
    \ [[ -z $min_even ]] || [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens\n  local -a odds\n  local\
    \ -a evens_indices\n  local -a odds_indices\n  local -a evens_indices_sorted\n\
    \  local -a odds_indices_sorted\n  local -a evens_sorted\n  local -a odds_sorted\n\
    \  local -a result\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n \
    \ local -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local\
    \ -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n\
    \  local -i x\n  local -i y\n  local -i z\n  local -i aa\n  local -i bb\n  local\
    \ -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n  local -i gg\n  local -i\
    \ hh\n  local -i ii\n  local -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n\
    \  local -i nn\n  local -i oo\n  local -i pp\n  local -i qq\n  local -i rr\n \
    \ local -i ss\n  local -i tt\n  local -i uu\n  local -i vv\n  local -i ww\n  local\
    \ -i xx\n  local -i yy\n  local -i zz\n  local -i aaa\n  local -i bbb\n  local\
    \ -i ccc\n  local -i ddd\n  local -i eee\n  local -i fff\n  local -i ggg\n  local\
    \ -i hhh\n  local -i iii\n  local -i jjj\n  local -i kkk\n  local -i lll\n  local\
    \ -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n  local -i qqq\n  local\
    \ -i rrr\n  local -i sss\n  local -i ttt", "  local nodes=( $1 )\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  for (( i=0; i<${#nodes[@]}; i++ )); do\n\
    \    local node=${nodes[$i]}\n    if [[ $node -eq 0 ]]; then\n      smallest_even_value=0\n\
    \      smallest_even_value_index=$i\n      break\n    elif [[ $node -gt 0 ]] &&\
    \ [[ $(( node % 2 )) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] ||\
    \ [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_value_index\\\"]\"\n  fi", "  local i\n  local min_even\n\
    \  local min_even_index\n  for i in $1; do\n    if [[ $i -eq 0 ]]; then\n    \
    \  min_even=0\n      min_even_index=0\n      break\n    elif [[ $i -gt 0 ]] &&\
    \ [[ $((i % 2)) -eq 0 ]]; then\n      if [[ -z $min_even ]] || [[ $i -lt $min_even\
    \ ]]; then\n        min_even=$i\n        min_even_index=$((i + 1))\n      fi\n\
    \    fi\n  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "    if [[ -z \"$1\"\
    \ ]]; then\n        echo \"[]\"\n        return\n    fi\n    local -a nodes=($1)\n\
    \    local -a evens=()\n    local -i i=0\n    for node in \"${nodes[@]}\"; do\n\
    \        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n    \
    \    fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n\
    \        return\n    fi\n    local -i min=${evens[0]}\n    local -i min_i=0\n\
    \    for ((i=1; i<${#evens[@]}; i++)); do\n        if [[ ${evens[$i]} -lt $min\
    \ ]]; then\n            min=${evens[$i]}\n            min_i=$i\n        fi\n \
    \   done\n    echo \"[\\\"$min\\\", \\\"$min_i\\\"]\"", "  local nodes=\"$1\"\n\
    \  local min_value=\n  local min_index=\n  local index=0\n  for node in $nodes;\
    \ do\n    if [[ $node -eq 0 ]]; then\n      min_value=0\n      min_index=$index\n\
    \      break\n    elif [[ $node -gt 0 ]] && [[ $(( node % 2 )) -eq 0 ]]; then\n\
    \      if [[ -z $min_value ]] || [[ $node -lt $min_value ]]; then\n        min_value=$node\n\
    \        min_index=$index\n      fi\n    fi\n    index=$(( index + 1 ))\n  done\n\
    \  if [[ -z $min_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n \
    \ local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((value < min_even_value)); then\n\
    \        min_even_value=$value\n        min_even_index=$i\n      elif ((value\
    \ == min_even_value)); then\n        if ((i < min_even_index)); then\n       \
    \   min_even_index=$i\n        fi\n      fi\n    fi\n  done\n\n  if ((min_even_value\
    \ < 1000000000)); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi"]
stop_tokens:
- "\n}"
