language: sh
name: HumanEval_65_circular_shift
results:
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo -n \"$x\" | wc -c)\n    local reversed=$(echo -n \"$x\"\
    \ | rev)\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        echo -n \"$reversed\"\
    \n    else\n        local right=$(echo -n \"$reversed\" | cut -c \"1-$shift\"\
    )\n        local left=$(echo -n \"$reversed\" | cut -c \"$((shift + 1))-$digits\"\
    )\n        echo -n \"$left$right\" | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=$(echo \"$x\" | wc -c)\n  local len=$((len - 1))\n  if [[ $shift\
    \ -gt $len ]]; then\n    echo \"$x\" | rev\n  else\n    local x1=$(echo \"$x\"\
    \ | cut -c1-$shift)\n    local x2=$(echo \"$x\" | cut -c$((shift + 1))-$len)\n\
    \    echo \"$x2$x1\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -ge $len ]; then\n        echo $x | rev\n\
    \    else\n        echo ${x:$shift}${x:0:$shift}\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local n=$((len - shift))\n    if ((n < 0)); then\n  \
    \      n=$((n + len))\n    fi\n    local left=${x:0:n}\n    local right=${x:n}\n\
    \    echo \"${right}${left}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp03ypl_82.sh: line 20: n: substring expression < 0

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        for ((i=0; i<digits; i++)); do\n            result=\"${x:$i:1}$result\"\
    \n        done\n    else\n        for ((i=0; i<digits; i++)); do\n           \
    \ j=$(((i+shift)%digits))\n            result=\"${result}${x:$j:1}\"\n       \
    \ done\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local i\n    local y\n    if (( shift >= len\
    \ )); then\n        y=\"$(rev <<< \"$x\")\"\n    else\n        for (( i = 0; i\
    \ < len; i++ )); do\n            y+=\"${x:((i + shift) % len):1}\"\n        done\n\
    \    fi\n    echo \"$y\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local reversed=$(echo $x | rev)\n  if [ $shift\
    \ -gt $digits ]; then\n    echo $reversed\n  else\n    local first=$(echo $reversed\
    \ | cut -c 1-$shift)\n    local second=$(echo $reversed | cut -c $((shift+1))-$digits)\n\
    \    echo $second$first\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  local shift=$((shift % len))\n  local y=$(echo $x | rev)\n  local\
    \ y=${y:0:$shift}\n  local y=${y}${x:0:$((len - shift))}\n  echo $y\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [[ $shift -gt $digits ]]; then\n        echo $x | rev\n    else\n        local\
    \ first=$(echo $x | cut -c 1-$shift)\n        local last=$(echo $x | cut -c $((shift\
    \ + 1))-$digits)\n        echo $last$first\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  if [[ \"$shift\" -gt \"$digits\" ]]; then\n    echo\
    \ \"$x\" | rev\n  else\n    local left=\"${x:0:$shift}\"\n    local right=\"${x:$shift}\"\
    \n    echo \"$right$left\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        local x_shifted=\"${x:$shift:$digits}${x:0:$shift}\"\
    \n        echo \"$x_shifted\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift- | rev)\n        local left=$(echo $x | cut\
    \ -c 1-$((digits - shift)) | rev)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local i\n    for ((i=0; i<shift; i++)); do\n\
    \        local last=\"${x:len-1:1}\"\n        x=\"${last}${x:0:len-1}\"\n    done\n\
    \    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [[ $shift -gt $digits ]]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift- )\n        local left=$(echo $x | cut -c 1-$((shift\
    \ - 1)) )\n        echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  if [ $shift -ge $len ]; then\n    echo $x | rev\n  else\n    echo\
    \ $x | cut -c $shift- | rev\n    echo $x | cut -c 1-$((shift-1))\n  fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=${#x}\n  local shift=$((shift % digits))\n  if [ $shift -eq 0 ]; then\n\
    \    echo $x\n  else\n    echo $((x % 10**shift))$((x / 10**shift))\n  fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local x_len=$(echo -n \"$x\" | wc -c)\n    if [ $shift -gt $x_len ]; then\n\
    \        echo -n \"$x\" | rev\n    else\n        echo -n \"$x\" | tail -c $shift\n\
    \        echo -n \"$x\" | head -c $(($x_len - $shift))\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:shift}${x:0:shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local y=$(echo \"$x\" | cut\
    \ -c \"$shift-$digits\")\n        local z=$(echo \"$x\" | cut -c \"1-$((shift-1))\"\
    )\n        echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -ge $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$((len-shift))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local shift=$((shift % digits))\n  if [ \"$shift\"\
    \ -eq 0 ]; then\n    echo \"$x\"\n  elif [ \"$shift\" -eq \"$digits\" ]; then\n\
    \    echo \"$x\" | rev\n  else\n    echo \"$x\" | rev | cut -c \"$shift\"-\"$digits\"\
    \ | rev\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$n\" ]; then\n \
    \       echo \"$x\" | rev\n    else\n        local y=$(echo \"$x\" | cut -c \"\
    $shift-$n\")\n        local z=$(echo \"$x\" | cut -c \"1-$((shift-1))\")\n   \
    \     echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local shift=$((shift % digits))\n    if\
    \ [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local shift=$((shift % digits))\n   \
    \ local x=$(echo $x | rev)\n    local x=$(echo $x | cut -c -$shift)\n    local\
    \ x=$(echo $x | rev)\n    local x=$(echo $x | cut -c $((shift + 1)))\n    local\
    \ x=$(echo $x | rev)\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=$(echo -n \"$x\" | wc -c)\n    local shift=$((shift % len))\n  \
    \  local right=$(echo -n \"$x\" | cut -c $shift- | rev)\n    local left=$(echo\
    \ -n \"$x\" | cut -c 1-$((len - shift)) | rev)\n    echo -n \"$right$left\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local shift_len=\"${#shift}\"\n  if [[ $shift -gt $len\
    \ ]]; then\n    echo \"$x\" | rev\n  else\n    echo \"${x:$shift:$len}${x:0:$shift}\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev | cut -c $shift- | rev\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ shift=$((shift % digits))\n        local x=$(echo $x | rev)\n        local x=$(echo\
    \ $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n        local x=$(echo\
    \ $x | cut -c $((shift + 1))-)\n        echo $x$(echo $x | cut -c 1-$shift)\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"$x\" | cut -c \"$shift\"\
    -\"$digits\" | rev\n        echo \"$x\" | cut -c \"1\"-\"$((digits - shift))\"\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if (( shift == 0 ));\
    \ then\n        echo $x\n    else\n        echo $x | rev | cut -c 1-$shift | rev\n\
    \        echo $x | rev | cut -c $((shift + 1))-$len | rev\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift=$((shift % len))\n    local y=\"\
    ${x:shift:len}${x:0:shift}\"\n    echo \"$y\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  if [ $shift -gt $digits ]; then\n    echo $x |\
    \ rev\n  else\n    local y=$(echo $x | rev)\n    echo $(echo $y | cut -c $shift-$digits)$(echo\
    \ $y | cut -c 1-$(($shift-1)))\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    if [ \"$shift\" -ge \"$len\" ]; then\n    \
    \    echo \"$x\" | rev\n    else\n        echo \"${x:$shift:$len}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ x_shift=$(echo $x | cut -c $shift-$digits)\n        local x_shift_rev=$(echo\
    \ $x_shift | rev)\n        local x_shift_rev_len=$(echo $x_shift_rev | wc -c)\n\
    \        local x_shift_rev_len=$((x_shift_rev_len - 1))\n        local x_shift_rev_len_1=$((x_shift_rev_len\
    \ - 1))\n        local x_shift_rev_len_2=$((x_shift_rev_len - 2))\n        local\
    \ x_shift_rev_len_3=$((x_shift_rev_len - 3))\n        local x_shift_rev_len_4=$((x_shift_rev_len\
    \ - 4))\n        local x_shift_rev_len_5=$((x_shift_rev_len - 5))\n        local\
    \ x_shift_rev_len_6=$((x_shift_rev_len - 6))\n        local x_shift_rev_len_7=$((x_shift_rev_len\
    \ - 7))\n        local x_shift_rev_len_8=$((x_shift_rev_len - 8))\n        local\
    \ x_shift_rev_len_9=$((x_shift_rev_len - 9))\n        local x_shift_rev_len_10=$((x_shift_rev_len\
    \ - 10))\n        local x_shift_rev_len_11=$((x_shift_rev_len - 11))\n       \
    \ local x_shift_rev_len_12=$((x_shift_rev_len - 12))\n        local x_shift_rev_len_13=$((x_shift_rev_len\
    \ - 13))\n        local x_shift_rev_len_14=$((x_shift_rev_len - 14))\n       \
    \ local x_shift_rev_len_15=$((x_shift_rev_len - 15))\n        local x_\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprhq5fajb.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmprhq5fajb.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local right=$(echo \"$x\"\
    \ | cut -c \"$shift-$digits\")\n        local left=$(echo \"$x\" | cut -c 1-\"\
    $((digits - shift))\")\n        echo \"$right$left\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local result=\"\"\n  if (( shift >= digits )); then\n\
    \    for (( i = digits - 1; i >= 0; i-- )); do\n      result+=\"${x:i:1}\"\n \
    \   done\n  else\n    result=\"${x:digits - shift}${x:0:digits - shift}\"\n  fi\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local i\n    for ((i=0; i<shift; i++)); do\n        x=${x:1}${x:0:1}\n\
    \    done\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  if (( shift > len )); then\n    echo \"${x:0:len}\" | rev\n  else\n\
    \    echo \"${x:shift:len}${x:0:shift}\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local i\n    for ((i=0; i<shift; i++)); do\n        x=${x:1}${x:0:1}\n\
    \    done\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=${#x}\n    if [ $shift -gt $digits ]; then\n        echo $x |\
    \ rev\n    else\n        local shift_digits=${x:0:$shift}\n        local remaining_digits=${x:$shift}\n\
    \        echo $remaining_digits$shift_digits\n    fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local y=$(echo \"$x\" | rev)\n\
    \        local z=$(echo \"$y\" | cut -c 1-\"$shift\")\n        local w=$(echo\
    \ \"$y\" | cut -c \"$(($shift + 1))-$digits\")\n        echo \"$w$z\" | rev\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if\
    \ [ \"$shift_mod\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo\
    \ \"${x:$shift_mod}${x:0:$shift_mod}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ n=$(echo \"$x\" | wc -c)\n  if [ \"$shift\" -ge \"$n\" ]; then\n    echo \"\
    $x\" | rev\n  else\n    local y=$(echo \"$x\" | cut -c \"$shift-$n\")\n    local\
    \ z=$(echo \"$x\" | cut -c \"1-$((shift-1))\")\n    echo \"$y$z\"\n  fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local y=$(echo $x | cut -c $shift-$digits)\n\
    \        local z=$(echo $x | cut -c 1-$(($shift - 1)))\n        echo $y$z\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local result=\"\"\n    if [ $shift -ge\
    \ $digits ]; then\n        result=$(echo $x | rev)\n    else\n        result=$(echo\
    \ $x | cut -c $shift-$digits)$(echo $x | cut -c 1-$(($shift-1)))\n    fi\n   \
    \ echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo \"$x\" | wc -c)\n  if [[ $shift -gt $digits ]]; then\n    echo\
    \ \"$x\" | rev\n  else\n    local right=$(echo \"$x\" | cut -c $shift-$digits)\n\
    \    local left=$(echo \"$x\" | cut -c 1-$((digits - shift)))\n    echo \"$right$left\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local digits=$((digits - 1))\n  \
    \  if [[ $shift -gt $digits ]]; then\n        echo \"$x\" | rev\n    else\n  \
    \      local x=$(echo \"$x\" | rev)\n        local x=$(echo \"$x\" | cut -c $shift-)\n\
    \        local x=$(echo \"$x\" | rev)\n        local x=$(echo \"$x\" | rev)\n\
    \        local x=$(echo \"$x\" | cut -c $shift-)\n        local x=$(echo \"$x\"\
    \ | rev)\n        echo \"$x\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local i\n  local result=\"\"\n  if (( shift >= len\
    \ )); then\n    for (( i = len - 1; i >= 0; i-- )); do\n      result=\"${result}${x:$i:1}\"\
    \n    done\n  else\n    result=\"${x:$shift:$len}${x:0:$shift}\"\n  fi\n  echo\
    \ \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  local shift=$((shift % len))\n  if [ $shift -eq 0 ]; then\n   \
    \ echo $x\n  else\n    echo $(echo $x | rev | cut -c 1-$shift | rev)$(echo $x\
    \ | rev | cut -c $((shift + 1))- | rev)\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local right=$(echo \"$x\"\
    \ | cut -c \"$shift-\")\n        local left=$(echo \"$x\" | cut -c \"1-$((shift-1))\"\
    )\n        echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift- | rev)\n        local left=$(echo $x | cut\
    \ -c 1-$((digits - shift)) | rev)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  if [ \"$shift\" -ge \"$digits\" ]; then\n    echo\
    \ \"$x\" | rev\n  else\n    local y=\"${x:$shift}\"\n    local z=\"${x:0:$shift}\"\
    \n    echo \"$y$z\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo \"$x\" | wc -c)\n    local n=$((n-1))\n    local x=$(echo \"\
    $x\" | rev)\n    local x=$(echo \"$x\" | cut -c 1-$shift)\n    local x=$(echo\
    \ \"$x\" | rev)\n    local x=$(echo \"$x\" | cut -c $((shift+1))-$n)\n    local\
    \ x=$(echo \"$x\" | rev)\n    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if [ $shift -eq 0 ];\
    \ then\n        echo $x\n    else\n        echo ${x:$shift}${x:0:$shift}\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local shift=$((shift % digits))\n   \
    \ if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        echo $x | cut\
    \ -c $shift- | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local y=$(echo $x | rev)\n        local\
    \ z=$(echo $y | cut -c $shift- | rev)\n        local w=$(echo $y | cut -c 1-$shift)\n\
    \        echo $z$w\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    local i\n    if [\
    \ \"$shift\" -gt \"$digits\" ]; then\n        for ((i = digits - 1; i >= 0; i--));\
    \ do\n            result=\"$result${x:$i:1}\"\n        done\n    else\n      \
    \  result=\"${x:$shift:$digits}\"\n        result=\"$result${x:0:$shift}\"\n \
    \   fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ n=$(echo $x | wc -c)\n  local n=$((n-1))\n  if [ $shift -gt $n ]; then\n   \
    \ echo $x | rev\n  else\n    local first=$(echo $x | cut -c 1-$shift)\n    local\
    \ second=$(echo $x | cut -c $((shift+1))-$n)\n    echo $second$first\n  fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local shift=$((shift % digits))\n  if [ \"$shift\"\
    \ -eq 0 ]; then\n    echo \"$x\"\n  elif [ \"$shift\" -eq \"$digits\" ]; then\n\
    \    echo \"$x\" | rev\n  else\n    local x1=\"${x:0:$shift}\"\n    local x2=\"\
    ${x:$shift}\"\n    echo \"$x2$x1\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    if (( shift > len )); then\n        echo \"\
    $x\" | rev\n    else\n        echo \"${x:shift:len}${x:0:shift}\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -ge $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$((shift-1))\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt\
    \ \"$digits\" ]; then\n        result=\"$(reverse_digits \"$x\")\"\n    else\n\
    \        local i\n        for ((i=0; i<digits; i++)); do\n            local j=$(((i+shift)%digits))\n\
    \            result=\"$result${x:$j:1}\"\n        done\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n  \
    \      echo $x$(echo $x | cut -c 1-$shift)\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local shift=$((shift % len))\n  if ((shift == 0));\
    \ then\n    echo \"$x\"\n  else\n    echo \"${x:$shift}${x:0:$shift}\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local shift=$((shift % digits))\n  if [ \"$shift\"\
    \ -eq 0 ]; then\n    echo \"$x\"\n  elif [ \"$shift\" -eq \"$digits\" ]; then\n\
    \    echo \"$x\" | rev\n  else\n    local a=\"${x:0:$shift}\"\n    local b=\"\
    ${x:$shift}\"\n    echo \"$b$a\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local y=$x\n    if [ $shift -lt $len ]; then\n      \
    \  y=${x:$shift}${x:0:$shift}\n    else\n        y=$(reverse $x)\n    fi\n   \
    \ echo $y\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    if (( shift > len )); then\n        echo \"\
    $x\" | rev\n    else\n        echo \"${x:shift:len}${x:0:shift}\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if\
    \ [ \"$shift_mod\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo\
    \ \"${x:$shift_mod:$len}${x:0:$shift_mod}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if\
    \ [[ $shift_mod -eq 0 ]]; then\n        echo \"$x\"\n    else\n        local first_part=\"\
    ${x:0:len-shift_mod}\"\n        local second_part=\"${x:len-shift_mod}\"\n   \
    \     echo \"${second_part}${first_part}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo $x | wc -c)\n    local m=$((n-1))\n    local y=$(echo $x |\
    \ rev)\n    if [ $shift -gt $m ]; then\n        echo $y\n    else\n        local\
    \ z=$(echo $y | cut -c 1-$shift)\n        local w=$(echo $y | cut -c $((shift+1))-$n)\n\
    \        echo $w$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local shift=$((shift % digits))\n    if\
    \ ((shift == 0)); then\n        echo \"$x\"\n    elif ((shift < digits)); then\n\
    \        echo \"${x:shift}${x:0:shift}\"\n    else\n        echo \"${x:digits-1:1}${x:0:digits-1}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local digits=$((digits - 1))\n  \
    \  if [ $shift -gt $digits ]; then\n        echo \"$x\" | rev\n    else\n    \
    \    local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n        echo\
    \ \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local y=\"\"\n    if [ \"$shift\" -gt \"$len\"\
    \ ]; then\n        for (( i = len - 1; i >= 0; i-- )); do\n            y=\"$y${x:$i:1}\"\
    \n        done\n    else\n        y=\"${x:$shift:$len}${x:0:$shift}\"\n    fi\n\
    \    echo \"$y\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if\
    \ [ \"$shift_mod\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        local\
    \ left=\"${x:0:len-shift_mod}\"\n        local right=\"${x:len-shift_mod}\"\n\
    \        echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  if [[ \"$shift\" -gt \"$digits\" ]]; then\n    echo\
    \ \"$(rev <<< \"$x\")\"\n  else\n    echo \"${x:$shift}${x:0:$shift}\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local i=0\n    local result=\"\"\n    if [ $shift -gt\
    \ $len ]; then\n        for (( i=$len-1; i>=0; i-- )); do\n            result+=\"\
    ${x:$i:1}\"\n        done\n    else\n        result=\"${x:$shift:$len}\"\n   \
    \     result+=\"${x:0:$shift}\"\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -gt $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local right=$(echo $x | cut -c $shift-$digits)\n\
    \        local left=$(echo $x | cut -c 1-$((digits-shift)))\n        echo $right$left\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local y=$(echo $x |\
    \ rev)\n    local y=$(echo $y | cut -c 1-$shift)\n    local y=$(echo $y | rev)\n\
    \    local x=$(echo $x | cut -c $((shift + 1))-$len)\n    echo $y$x\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  local shift=$((shift % len))\n  if (( shift == 0 )); then\n   \
    \ echo \"$x\"\n  else\n    echo \"${x:$shift}${x:0:$shift}\"\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=$(echo -n \"$x\" | wc -c)\n    local shift=$((shift % len))\n  \
    \  if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo -n \"\
    $x\" | tail -c $shift\n        echo -n \"$x\" | head -c $((len - shift))\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local n=\"${#x}\"\n  local shift=$((shift % n))\n  if ((shift == 0)); then\n\
    \    echo \"$x\"\n  else\n    echo \"${x:$shift}${x:0:$shift}\"\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local left=${x:0:len-shift}\n\
    \    local right=${x:len-shift:shift}\n    echo \"${right}${left}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo -n \"$x\" | wc -c)\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo -n \"$x\"\n    else\n        echo\
    \ -n \"$x\" | rev | cut -c -$shift | rev\n        echo -n \"$x\" | rev | cut -c\
    \ $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local digits=$((digits - 1))\n  \
    \  if [ $shift -gt $digits ]; then\n        echo \"$x\" | rev\n    else\n    \
    \    local right=$(echo \"$x\" | cut -c $shift-$digits)\n        local left=$(echo\
    \ \"$x\" | cut -c 1-$((shift - 1)))\n        echo \"$right$left\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  if [ \"$shift\" -gt \"$digits\" ]; then\n    echo\
    \ \"$x\" | rev\n  else\n    local left=\"${x:0:$shift}\"\n    local right=\"${x:$shift}\"\
    \n    echo \"$right$left\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [[ $shift -gt $digits ]]; then\n        echo $x | rev\n    else\n        local\
    \ left=$(echo $x | cut -c 1-$shift)\n        local right=$(echo $x | cut -c $((shift\
    \ + 1))-)\n        echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local x_len=${#x}\n    local shift_mod=$((shift % x_len))\n    if [[ $shift_mod\
    \ -eq 0 ]]; then\n        echo $x\n    else\n        echo ${x:$shift_mod}${x:0:$shift_mod}\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local result=\"\"\n    if (( shift > len )); then\n \
    \       for (( i=len-1; i>=0; i-- )); do\n            result+=${x:$i:1}\n    \
    \    done\n    else\n        result=${x:$shift:$len}${x:0:$shift}\n    fi\n  \
    \  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits_minus_one=$((digits - 1))\n\
    \    if [ $shift -gt $digits_minus_one ]; then\n        echo $x | rev\n    else\n\
    \        local right=$(echo $x | cut -c $shift-$digits_minus_one)\n        local\
    \ left=$(echo $x | cut -c 1-$((shift - 1)))\n        echo $right$left\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift- | rev)\n    \
    \    local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $shift- | rev)\n\
    \        echo $x\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$(rev <<< \"$x\")\"\n    else\n        local left=\"${x:0:$shift}\"\
    \n        local right=\"${x:$shift}\"\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local first=$(echo \"$x\"\
    \ | cut -c 1-$shift)\n        local second=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n\
    \        echo \"$second$first\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    local i=0\n    if\
    \ [ \"$shift\" -gt \"$digits\" ]; then\n        for ((i=digits-1; i>=0; i--));\
    \ do\n            result=\"$result${x:$i:1}\"\n        done\n    else\n      \
    \  result=\"${x:$shift:$digits}${x:0:$shift}\"\n    fi\n    echo \"$result\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -ge\
    \ \"$digits\" ]; then\n        result=\"$(reverse_string \"$x\")\"\n    else\n\
    \        local i=0\n        while [ \"$i\" -lt \"$digits\" ]; do\n           \
    \ local j=$(( (i + shift) % digits ))\n            result=\"$result${x:$j:1}\"\
    \n            i=$(( i + 1 ))\n        done\n    fi\n    echo \"$result\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=${#x}\n  local shift=$((shift % digits))\n  if [ $shift -eq 0 ]; then\n\
    \    echo \"$x\"\n  else\n    local left=${x:0:$((digits - shift))}\n    local\
    \ right=${x:$((digits - shift))}\n    echo \"$right$left\"\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local result=\"\"\n    if [ \"$shift\"\
    \ -ge \"$digits\" ]; then\n        result=$(echo \"$x\" | rev)\n    else\n   \
    \     local right=$(echo \"$x\" | cut -c \"$shift-$digits\")\n        local left=$(echo\
    \ \"$x\" | cut -c \"1-$(($digits - $shift))\")\n        result=\"$right$left\"\
    \n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo -n \"$x\" | wc -c)\n    if [ $shift -gt $n ]; then\n      \
    \  echo -n \"$x\" | rev\n    else\n        echo -n \"$x\" | tail -c $shift\n \
    \       echo -n \"$x\" | head -c $(($n - $shift))\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt\
    \ $digits ]; then\n    echo $x | rev\n  else\n    local x=$(echo $x | rev)\n \
    \   local x=$(echo $x | cut -c $shift- | rev)\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $shift- | rev)\n    echo $x\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo $x | wc -c)\n    local n=$((n-1))\n    if [[ $shift -gt $n\
    \ ]]; then\n        echo $x | rev\n    else\n        local y=$(echo $x | cut -c\
    \ $shift-$n)\n        local z=$(echo $x | cut -c 1-$((shift-1)))\n        echo\
    \ $y$z\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local shift_mod=\"$((shift % len))\"\n  if [ \"$shift_mod\"\
    \ -eq 0 ]; then\n    echo \"$x\"\n  else\n    echo \"${x: -shift_mod}${x:0:len-shift_mod}\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift=$((shift % len))\n    if ((shift\
    \ == 0)); then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local n=\"${#x}\"\n    local m=$((shift % n))\n    local y=\"${x:m}\"\
    \n    local z=\"${x:0:m}\"\n    if [ \"$m\" -eq \"0\" ]; then\n        echo \"\
    $x\"\n    else\n        echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [[ $shift -gt $digits ]]; then\n        echo $x | rev\n    else\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c 1-$shift)\n        local\
    \ x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $((shift + 1))-)\n  \
    \      echo $x$(echo $x | cut -c 1-$shift)\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$((len-shift))\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        local shift_digits=\"$(echo \"$x\"\
    \ | cut -c \"$shift-$digits\")\"\n        local unshift_digits=\"$(echo \"$x\"\
    \ | cut -c \"1-$((digits - shift))\")\"\n        echo \"$shift_digits$unshift_digits\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if (( shift >= digits )); then\n       \
    \ echo \"$x\" | rev\n    else\n        local y=\"${x:shift}\"\n        local z=\"\
    ${x:0:shift}\"\n        echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local shift_mod=\"$((shift % digits))\"\n  if [[\
    \ \"$shift_mod\" -eq 0 ]]; then\n    echo \"$x\"\n  else\n    echo \"${x:digits-shift_mod}${x:0:digits-shift_mod}\"\
    \n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift=$((shift % len))\n    if [ \"$shift\"\
    \ -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift:$len}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ shift=$((digits - shift))\n        echo $x | cut -c $shift- | rev | cut -c $shift-\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo $x | wc -c)\n    local n=$((n-1))\n    if [ $shift -gt $n ];\
    \ then\n        echo $x | rev\n    else\n        local x_shift=$(echo $x | cut\
    \ -c $shift-$n)\n        local x_shift_rev=$(echo $x_shift | rev)\n        local\
    \ x_shift_rev_len=$(echo $x_shift_rev | wc -c)\n        local x_shift_rev_len=$((x_shift_rev_len-1))\n\
    \        local x_shift_rev_pad=$(printf \"%0${x_shift_rev_len}d\" 0)\n       \
    \ local x_shift_rev_pad=$(echo $x_shift_rev_pad | rev)\n        local x_shift_rev_pad_len=$(echo\
    \ $x_shift_rev_pad | wc -c)\n        local x_shift_rev_pad_len=$((x_shift_rev_pad_len-1))\n\
    \        local x_shift_rev_pad_len_diff=$((n-x_shift_rev_pad_len))\n        local\
    \ x_shift_rev_pad_len_diff_pad=$(printf \"%0${x_shift_rev_pad_len_diff}d\" 0)\n\
    \        local x_shift_rev_pad_len_diff_pad=$(echo $x_shift_rev_pad_len_diff_pad\
    \ | rev)\n        local x_shift_rev_pad_len_diff_pad_len=$(echo $x_shift_rev_pad_len_diff_pad\
    \ | wc -c)\n        local x_shift_rev_pad_len_diff_pad_len=$((x_shift_rev_pad_len_diff_pad_len-1))\n\
    \        local x_shift_rev_pad_len_diff_pad_len_diff=$((n-x_shift_rev_pad_len_diff_pad_len))\n\
    \        local x_shift_rev_pad_len_diff_pad_len_diff_pad=$(printf \"%0${x_shift_rev_pad_len_diff_\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptdq0okiw.sh: line 47: unexpected EOF while looking for matching
    `"''

    /tmp/tmptdq0okiw.sh: line 51: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local x=$(echo $x |\
    \ rev)\n    local x=$(echo $x | cut -c -$shift)\n    local x=$(echo $x | rev)\n\
    \    local x=$(echo $x | cut -c $((shift + 1))-)\n    local x=$(echo $x | rev)\n\
    \    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local shift=$((shift % digits))\n    if\
    \ [ \"$shift\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local n=\"${#x}\"\n    local y=\"\"\n    if [ \"$shift\" -gt \"$n\"\
    \ ]; then\n        for (( i=$n-1; i>=0; i-- )); do\n            y=\"$y${x:$i:1}\"\
    \n        done\n    else\n        y=\"${x:$shift:$n}\"\n        y=\"$y${x:0:$shift}\"\
    \n    fi\n    echo \"$y\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if\
    \ [[ \"$shift_mod\" -eq 0 ]]; then\n        echo \"$x\"\n    else\n        echo\
    \ \"${x: -shift_mod}${x:0:len-shift_mod}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local shift=$((shift % digits))\n\
    \    if [ $shift -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"\
    $x\" | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"$digits\" ]; then\n\
    \        echo \"$(rev <<< \"$x\")\"\n    else\n        echo \"${x:$shift:$digits}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local digits=$((digits - 1))\n  \
    \  if [ $shift -gt $digits ]; then\n        echo \"$x\" | rev\n    else\n    \
    \    local left=$(echo \"$x\" | cut -c 1-$shift)\n        local right=$(echo \"\
    $x\" | cut -c $((shift + 1))-$digits)\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local i\n    local result=\"\"\n    if [ \"\
    $shift\" -ge \"$len\" ]; then\n        for ((i=len-1; i>=0; i--)); do\n      \
    \      result=\"$result${x:$i:1}\"\n        done\n    else\n        result=\"\
    ${x:$shift:$len}\"\n        result=\"$result${x:0:$shift}\"\n    fi\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if [ $shift -eq 0 ];\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local shift=$((shift % digits))\n    if\
    \ [ \"$shift\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local x_len=${#x}\n    local shift_mod=$((shift % x_len))\n    local x_rev=$(rev\
    \ \"$x\")\n    local x_rev_shift=$(rev \"${x_rev:0:shift_mod}\")\n    local x_rev_unshift=$(rev\
    \ \"${x_rev:shift_mod}\")\n    echo \"${x_rev_shift}${x_rev_unshift}\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 100: No such file or directory

    rev: cannot open : No such file or directory

    rev: cannot open : No such file or directory

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt\
    \ \"$digits\" ]; then\n        result=\"$(reverse \"$x\")\"\n    else\n      \
    \  result=\"$(echo \"$x\" | cut -c \"$shift\"-\"$digits\")$(echo \"$x\" | cut\
    \ -c \"1\"-\"$((shift-1))\")\"\n    fi\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local shift=$((shift % digits))\n  local y=$(echo\
    \ \"$x\" | rev)\n  local y=$(echo \"$y\" | cut -c 1-$shift)\n  local y=$(echo\
    \ \"$y\" | rev)\n  local x=$(echo \"$x\" | cut -c $((shift + 1))-$digits)\n  echo\
    \ \"$y$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo -n \"$x\" | wc -c)\n    if [ \"$shift\" -gt \"$digits\"\
    \ ]; then\n        echo -n \"$x\" | rev\n    else\n        echo -n \"$x\" | tail\
    \ -c \"$shift\"\n        echo -n \"$x\" | head -c \"$((digits - shift))\"\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev | cut -c $shift- | rev\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local i\n    for ((i=0; i<shift; i++)); do\n        x=${x:1}${x:0:1}\n\
    \    done\n    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt\
    \ $digits ]; then\n    echo $x | rev\n  else\n    local first=$(echo $x | cut\
    \ -c 1-$shift)\n    local last=$(echo $x | cut -c $((shift + 1))-$digits)\n  \
    \  echo $last$first\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo \"$x\" | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift\
    \ % digits))\n  local shift=$((digits - shift))\n  local x=$(echo \"$x\" | rev)\n\
    \  local x=$(echo \"$x\" | cut -c 1-$shift)\n  local x=$(echo \"$x\" | rev)\n\
    \  echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$n\" ]; then\n \
    \       echo \"$x\" | rev\n    else\n        local y=$(echo \"$x\" | cut -c \"\
    $shift-$n\")\n        local z=$(echo \"$x\" | cut -c \"1-$((shift-1))\")\n   \
    \     echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=$(echo -n \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift\
    \ -gt $len ]; then\n        result=$(echo -n \"$x\" | rev)\n    else\n       \
    \ result=$(echo -n \"$x\" | cut -c $shift- | rev)$(echo -n \"$x\" | cut -c 1-$(($shift-1))\
    \ | rev)\n    fi\n    echo -n \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ y=$((x % 10 ** shift))\n        local z=$((x / 10 ** shift))\n        echo $y$z\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift-$digits)\n        local left=$(echo $x | cut\
    \ -c 1-$((shift - 1)))\n        echo $right$left\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local shift_digits=\"$((shift % digits))\"\
    \n    local result=\"${x:shift_digits}\"\n    if [ \"$shift_digits\" -gt 0 ];\
    \ then\n        result=\"${result}${x:0:shift_digits}\"\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local shift_mod=\"$((shift % len))\"\n  if [[ \"$shift_mod\"\
    \ -eq 0 ]]; then\n    echo \"$x\"\n  else\n    echo \"${x: -shift_mod}${x:0:$((len\
    \ - shift_mod))}\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift=$((shift % len))\n    local left=\"\
    ${x:0:len-shift}\"\n    local right=\"${x:len-shift}\"\n    echo \"${right}${left}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    if [ \"$shift\" -ge \"$len\" ]; then\n    \
    \    echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local shift=$((shift % digits))\n   \
    \ if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        local left=$(echo\
    \ $x | cut -c 1-$shift)\n        local right=$(echo $x | cut -c $((shift + 1))-$digits)\n\
    \        echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n        echo $y$z\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=${#x}\n    local shift=$((shift % digits))\n    local head=${x:0:digits-shift}\n\
    \    local tail=${x:digits-shift}\n    echo \"$tail$head\"\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt\
    \ $digits ]; then\n    echo $x | rev\n  else\n    local right=$(echo $x | cut\
    \ -c $shift-$digits)\n    local left=$(echo $x | cut -c 1-$((shift - 1)))\n  \
    \  echo $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt\
    \ $digits ]; then\n    echo $x | rev\n  else\n    local y=$(echo $x | cut -c $shift-$digits)\n\
    \    local z=$(echo $x | cut -c 1-$((shift - 1)))\n    echo $y$z\n  fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local shift_len=\"${#shift}\"\n    if [ \"\
    $shift\" -eq 0 ]; then\n        echo \"$x\"\n    elif [ \"$shift\" -ge \"$len\"\
    \ ]; then\n        echo \"$(rev <<< \"$x\")\"\n    else\n        echo \"${x:$shift:$len}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo ${x:$shift}${x:0:$shift}\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local y=$(echo $x |\
    \ rev)\n    local y=$(echo $y | cut -c 1-$shift)\n    local y=$(echo $y | rev)\n\
    \    local y=$(echo $y | cut -c 1-$len)\n    echo $y\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        local y=\"${x:$shift}\"\n      \
    \  local z=\"${x:0:$shift}\"\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if (( shift >= len )); then\n        # reverse the digits\n\
    \        echo \"${x:$len-1:1}${x:0:$len-1}\"\n    else\n        echo \"${x:$shift:$len-$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ shift=$((digits - shift))\n        local x=$(echo $x | rev)\n        local x=$(echo\
    \ $x | cut -c $shift-)\n        local x=$(echo $x | rev)\n        echo $x\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=${#x}\n    local result=\"\"\n    if [ $shift -gt $digits ];\
    \ then\n        for (( i=$digits-1; i>=0; i-- )); do\n            result+=${x:$i:1}\n\
    \        done\n    else\n        result=${x:$shift:$digits}${x:0:$shift}\n   \
    \ fi\n    echo $result\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local left=$(echo \"$x\"\
    \ | cut -c 1-$shift)\n        local right=$(echo \"$x\" | cut -c $((shift+1))-$digits)\n\
    \        echo \"$right$left\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$n\" ]; then\n \
    \       echo \"$x\" | rev\n    else\n        local y=$(echo \"$x\" | cut -c \"\
    $shift-$n\")\n        local z=$(echo \"$x\" | cut -c \"1-$((shift-1))\")\n   \
    \     echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if ((shift == 0));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:len-shift:shift}${x:0:len-shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local x_len=${#x}\n    local x_rev=$(rev \"$x\")\n    local x_rev_len=${#x_rev}\n\
    \    local x_rev_shift=$(($shift % $x_rev_len))\n    local x_rev_shift_len=$(($x_rev_len\
    \ - $x_rev_shift))\n    local x_rev_shift_len_mod=$(($x_rev_shift_len % $x_rev_len))\n\
    \    local x_rev_shift_len_mod_rev=$(rev \"$x_rev_shift_len_mod\")\n    local\
    \ x_rev_shift_len_mod_rev_len=${#x_rev_shift_len_mod_rev}\n    local x_rev_shift_len_mod_rev_len_mod=$(($x_rev_shift_len_mod_rev_len\
    \ % $x_rev_len))\n    local x_rev_shift_len_mod_rev_len_mod_rev=$(rev \"$x_rev_shift_len_mod_rev_len_mod\"\
    )\n    local x_rev_shift_len_mod_rev_len_mod_rev_len=${#x_rev_shift_len_mod_rev_len_mod_rev}\n\
    \    local x_rev_shift_len_mod_rev_len_mod_rev_len_mod=$(($x_rev_shift_len_mod_rev_len_mod_rev_len\
    \ % $x_rev_len))\n    local x_rev_shift_len_mod_rev_len_mod_rev_len_mod_rev=$(rev\
    \ \"$x_rev_shift_len_mod_rev_len_mod_rev_len_mod\")\n    local x_rev_shift_len_mod_rev_len_mod_rev_len_mod_rev_len=${#x_rev_shift_len_mod_rev_len_mod_rev_len_mod_rev}\n\
    \    local x_rev_shift_len_mod_rev_len_mod_rev_len_mod_rev_len_mod=$(($x_rev_shift_len_\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplcoylhg1.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmplcoylhg1.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=${#x}\n    local shift=$((shift % digits))\n    if ((shift\
    \ == 0)); then\n        echo \"$x\"\n    elif ((shift > digits / 2)); then\n \
    \       echo \"${x:shift:digits}${x:0:shift}\" | rev\n    else\n        echo \"\
    ${x:digits - shift:digits}${x:0:digits - shift}\"\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if (( shift >= digits\
    \ )); then\n        for (( i=digits-1; i>=0; i-- )); do\n            result=\"\
    ${result}${x:$i:1}\"\n        done\n    else\n        result=\"${x:$shift:$digits}${x:0:$shift}\"\
    \n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo $x | wc -c)\n    local m=$(($shift % $n))\n    local y=$(echo\
    \ $x | rev)\n    echo $y | cut -c $m- | rev\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        local right=\"${x:0:$shift}\"\n\
    \        local left=\"${x:$shift}\"\n        echo \"$left$right\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt\
    \ \"$digits\" ]; then\n        result=\"$(rev <<< \"$x\")\"\n    else\n      \
    \  local right=\"${x:0:$shift}\"\n        local left=\"${x:$shift}\"\n       \
    \ result=\"$left$right\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local result=\"\"\n    if [ $shift -gt $len ]; then\n\
    \        result=$(reverse_string \"$x\")\n    else\n        result=${x:$shift:$len}${x:0:$shift}\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local shift=$((shift % digits))\n   \
    \ if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        echo $x | cut\
    \ -c $shift- | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -i x=$1\n  local -i shift=$2\n\
    \  local -i digits=${#x}\n  local -i i\n  local -i j\n  local -i k\n  local -i\
    \ result\n  local -i digit\n  local -i power\n  local -i factor\n  local -i reversed\n\
    \  local -i reversed_digits\n  local -i reversed_digit\n  local -i reversed_power\n\
    \  local -i reversed_factor\n  local -i reversed_result\n\n  if (( shift >= digits\
    \ )); then\n    reversed=0\n    for (( i=0; i<digits; i++ )); do\n      digit=${x:i:1}\n\
    \      power=10**((digits-1)-i)\n      factor=$(( digit * power ))\n      reversed=$((\
    \ reversed + factor ))\n    done\n    reversed_result=0\n    reversed_digits=${#reversed}\n\
    \    for (( i=0; i<reversed_digits; i++ )); do\n      reversed_digit=${reversed:i:1}\n\
    \      reversed_power=10**((reversed_digits-1)-i)\n      reversed_factor=$(( reversed_digit\
    \ * reversed_power ))\n      reversed_result=$(( reversed_result + reversed_factor\
    \ ))\n    done\n    echo \"$reversed_result\"\n  else\n    result=0\n    for ((\
    \ i=0; i<digits; i++ )); do\n      j=$(( (i+shift) % digits ))\n      digit=${x:j:1}\n\
    \      power=10**((digits-1)-i)\n      factor=$(( digit * power ))\n      result=$((\
    \ result + factor ))\n    done\n    echo \"$result\"\n  fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvded4adi.sh: line 34: syntax error near unexpected token `(''

    /tmp/tmpvded4adi.sh: line 34: `      power=10**((digits-1)-i)''

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo -n \"$x\" | wc -c)\n    if [ \"$shift\" -gt \"$digits\"\
    \ ]; then\n        echo -n \"$x\" | rev\n    else\n        echo -n \"$x\" | tail\
    \ -c \"$shift\"\n        echo -n \"$x\" | head -c \"$((digits - shift))\"\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local left=${x:0:len-shift}\n\
    \    local right=${x:len-shift:shift}\n    echo \"${right}${left}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        local x_shifted=$(echo \"\
    $x\" | cut -c \"$shift-$digits\")\n        local x_unshifted=$(echo \"$x\" | cut\
    \ -c \"1-$((digits - shift))\")\n        echo \"$x_shifted$x_unshifted\"\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  if [ $shift -gt\
    \ $digits ]; then\n    echo $x | rev\n  else\n    local left=$(echo $x | cut -c\
    \ 1-$shift)\n    local right=$(echo $x | cut -c $((shift + 1))-$digits)\n    echo\
    \ $right$left\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo \"$x\" | wc -c)\n  if [[ $shift -ge $digits ]]; then\n    echo\
    \ \"$x\" | rev\n  else\n    local y=$(echo \"$x\" | cut -c $shift-$digits)\n \
    \   local z=$(echo \"$x\" | cut -c 1-$((shift-1)))\n    echo \"$y$z\"\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev | cut -c $shift- | rev\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | wc -c)\n    local result=\"\"\n    if [ $shift\
    \ -ge $digits ]; then\n        result=$(echo \"$x\" | rev)\n    else\n       \
    \ result=$(echo \"$x\" | cut -c $shift-$digits)$(echo \"$x\" | cut -c 1-$(($shift-1)))\n\
    \    fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ digits=$(echo $x | wc -c)\n  local digits=$((digits - 1))\n  local shift=$((shift\
    \ % digits))\n  if [ $shift -eq 0 ]; then\n    echo $x\n  else\n    local x=$(echo\
    \ $x | rev)\n    local x=$(echo $x | cut -c $shift- | rev)\n    local x=$(echo\
    \ $x | rev)\n    echo $x\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift- | rev)\n        local left=$(echo $x | cut\
    \ -c 1-$((digits - shift)) | rev)\n        echo $right$left\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local right=$(echo $x | cut -c $shift-\
    \ )\n        local left=$(echo $x | cut -c 1-$(( $digits - $shift )) )\n     \
    \   echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local left=${x:0:len-shift}\n\
    \    local right=${x:len-shift:shift}\n    echo \"$right$left\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if [ $shift -eq 0 ];\
    \ then\n        echo $x\n    else\n        echo ${x:$shift}${x:0:$shift}\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if (( shift >= digits )); then\n       \
    \ echo \"$(rev <<< \"$x\")\"\n    else\n        local left=\"${x:0:digits-shift}\"\
    \n        local right=\"${x:digits-shift}\"\n        echo \"${right}${left}\"\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ len=${#x}\n  local shift=$((shift % len))\n  if [ $shift -eq 0 ]; then\n   \
    \ echo $x\n  else\n    echo $x | rev | cut -c $shift- | rev\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013998
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local x_len=${#x}\n    if [ $shift -gt $x_len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift-$x_len\n        echo $x | cut -c 1-$((shift-1))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n\
    \        echo \"$x\" | rev\n    else\n        local y=\"${x:$shift}\"\n      \
    \  local z=\"${x:0:$shift}\"\n        echo \"$y$z\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    local x1=${x:0:len-shift}\n\
    \    local x2=${x:len-shift}\n    echo \"$x2$x1\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if (( shift >= len )); then\n        echo \"$x\" | rev\n\
    \    else\n        echo \"${x:shift:len}${x:0:shift}\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    local\
    \ shift=$((shift % digits))\n    local shift=$((digits - shift))\n    echo $x\
    \ | cut -c $shift- | rev\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013998
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    local result=\"\"\n    if [ \"$shift\" -gt\
    \ \"$digits\" ]; then\n        result=\"$(rev <<< \"$x\")\"\n    else\n      \
    \  local i\n        for ((i=0; i<digits; i++)); do\n            local j=$(( (i\
    \ + shift) % digits ))\n            result+=\"${x:j:1}\"\n        done\n    fi\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local digits=$((digits - 1))\n    if\
    \ [[ $shift -gt $digits ]]; then\n        echo $x | rev\n    else\n        local\
    \ right=$(echo $x | cut -c $shift- )\n        local left=$(echo $x | cut -c 1-$((shift\
    \ - 1)) )\n        echo $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local shift_mod=\"$((shift % len))\"\n  local shift_mod_rev=\"\
    $((len - shift_mod))\"\n  local x_rev=\"$(rev <<< \"$x\")\"\n  local x_rev_shift=\"\
    ${x_rev:0:shift_mod_rev}\"\n  local x_rev_shift_rev=\"$(rev <<< \"$x_rev_shift\"\
    )\"\n  local x_shift=\"${x:shift_mod}\"\n  echo \"${x_shift}${x_rev_shift_rev}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    local result=\"\"\n    local i\n    if [ \"\
    $shift\" -ge \"$len\" ]; then\n        for ((i=$len-1; i>=0; i--)); do\n     \
    \       result=\"$result${x:$i:1}\"\n        done\n    else\n        result=\"\
    ${x:$shift:$len}\"\n        result=\"$result${x:0:$shift}\"\n    fi\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local right=$(echo $x | cut -c $shift-$digits)\n\
    \        local left=$(echo $x | cut -c 1-$(($digits - $shift)))\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local y=$(echo $x | cut -c $shift-$digits)\n\
    \        local z=$(echo $x | cut -c 1-$(($shift - 1)))\n        echo $y$z\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    local shift=$((shift % digits))\n   \
    \ if [ $shift -eq 0 ]; then\n        echo $x\n    else\n        echo $x | cut\
    \ -c $shift- | rev | cut -c $shift- | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    local shift=$((shift % len))\n    if (( shift == 0 ));\
    \ then\n        echo \"$x\"\n    else\n        echo \"${x:len-shift:shift}${x:0:len-shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -gt $len ]; then\n        echo $x | rev\n\
    \    else\n        echo $x | cut -c $shift- | rev\n        echo $x | cut -c 1-$((len-shift))\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo $x | wc -c)\n    if [ $shift -ge $digits ]; then\n   \
    \     echo $x | rev\n    else\n        local right=$(echo $x | cut -c $shift-$digits)\n\
    \        local left=$(echo $x | cut -c 1-$(($digits - $shift)))\n        echo\
    \ $right$left\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013997
