name: HumanEval_49_modp
language: sh
prompt: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
  \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"\
  0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\"\
  \ \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n"
tests: "}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n   \
  \ [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"\
  8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\"\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
completions: ["  local n=\"$1\"\n  local p=\"$2\"\n  local x=\"1\"\n  local i\n  for\
    \ ((i=0; i<${#n}; i++)); do\n    if [[ \"${n:$i:1}\" == \"1\" ]]; then\n     \
    \ x=$(mul \"$x\" \"$x\" \"$p\")\n    fi\n    x=$(mul \"$x\" \"$x\" \"$p\")\n \
    \ done\n  echo \"$x\"", "    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"\
    $n\"\n    local i=0\n    local l=${#n}\n    local b\n    while [ $i -lt $l ];\
    \ do\n        b=\"${n:$i:1}\"\n        if [ \"$b\" -eq \"1\" ]; then\n       \
    \     r=$(($r*2))\n            r=$(($r%$p))\n        fi\n        i=$(($i+1))\n\
    \    done\n    echo \"$r\"", "    local n=$1\n    local p=$2\n    local r=1\n\
    \    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n\
    \        i=$((i+1))\n    done\n    echo $r", "  local n=\"$1\"\n  local p=\"$2\"\
    \n  local r=\"1\"\n  local i\n  for ((i=0; i<${#n}; i++)); do\n    if [[ \"${n:$i:1}\"\
    \ == \"1\" ]]; then\n      r=$(mul \"$r\" \"$r\" \"$p\")\n    fi\n    r=$(mul\
    \ \"$r\" \"$r\" \"$p\")\n  done\n  echo \"$r\"", "    local n=$1\n    local p=$2\n\
    \    local r=1\n    local i=0\n    local len=${#n}\n    while [ $i -lt $len ];\
    \ do\n        local bit=${n:$i:1}\n        if [ $bit -eq 1 ]; then\n         \
    \   r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n    echo $r", "  \
    \  local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local nlen=${#n}\n\
    \    while [ $i -lt $nlen ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2))\n            r=$((r%p))\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo $r", "    local n=$1\n    local p=$2\n   \
    \ local r=1\n    local i=0\n    local n_len=${#n}\n    for ((i=0; i<n_len; i++));\
    \ do\n        local digit=${n:$i:1}\n        if [ $digit -eq 1 ]; then\n     \
    \       r=$(((r * 2) % p))\n        fi\n        r=$(((r * r) % p))\n    done\n\
    \    echo $r", "    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n \
    \   local i\n    for ((i=0; i<${#n}-1; i++)); do\n        r=$(($r*2))\n      \
    \  r=$(($r%$p))\n    done\n    echo \"$r\"", "    local n=$1\n    local p=$2\n\
    \    local result=1\n    local i=0\n    local len=${#n}\n    while [ $i -lt $len\
    \ ]; do\n        local digit=${n:$i:1}\n        if [ $digit -eq 1 ]; then\n  \
    \          result=$((result * 2 % p))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $result", "    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\
    \n    local i=1\n    while [ $i -lt ${#n} ]; do\n        r=$(($r*$r % $p))\n \
    \       i=$(($i+1))\n    done\n    echo $r", "    local n=\"$1\"\n    local p=\"\
    $2\"\n    local result=\"1\"\n    local i\n    for ((i=0; i<${#n}; i++)); do\n\
    \        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            result=$(($result\
    \ * $result % $p))\n        fi\n        result=$(($result * $result % $p))\n \
    \   done\n    echo \"$result\"", "    local n=\"$1\"\n    local p=\"$2\"\n   \
    \ local r=\"1\"\n    local i\n    for ((i=${#n}-1; i>=0; i--)); do\n        if\
    \ [[ \"${n:$i:1}\" == \"1\" ]]; then\n            r=$(mul \"$r\" \"$r\" \"$p\"\
    )\n        fi\n        r=$(mul \"$r\" \"$r\" \"$p\")\n    done\n    echo \"$r\"",
  "\tlocal n=$1\n\tlocal p=$2\n\tlocal x=1\n\tlocal i\n\tfor ((i=0; i<${#n}; i++));\
    \ do\n\t\tx=$((x*x%p))\n\t\tif [[ ${n:$i:1} == 1 ]]; then\n\t\t\tx=$((x*2%p))\n\
    \t\tfi\n\tdone\n\techo $x", "    local n=\"$1\"\n    local p=\"$2\"\n    local\
    \ r=\"1\"\n    local i\n    for ((i=0; i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\"\
    \ == \"1\" ]]; then\n            r=$(mul \"$r\" \"$r\" \"$p\")\n        fi\n \
    \       r=$(mul \"$r\" \"$r\" \"$p\")\n    done\n    echo \"$r\"", "    local\
    \ n=\"$1\"\n    local p=\"$2\"\n    local res=\"1\"\n    local i\n    for ((i=0;\
    \ i<${#n}; i++)); do\n        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n        \
    \    res=$(mulmod \"$res\" \"$res\" \"$p\")\n        fi\n        res=$(mulmod\
    \ \"$res\" \"$res\" \"$p\")\n    done\n    echo \"$res\"", "    local n=$1\n \
    \   local p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n    while [ $i\
    \ -lt $l ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n            r=$((r*2%p))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $r", "    local n=$1\n   \
    \ local p=$2\n    local r=1\n    while [ \"$n\" -gt 0 ]; do\n        if [ \"$(($n\
    \ & 1))\" -eq 1 ]; then\n            r=$(($r * $r % $p))\n        fi\n       \
    \ n=$(($n >> 1))\n    done\n    echo $r", "    if [ \"$1\" == \"0\" ]; then\n\
    \        echo \"1\"\n        return\n    fi\n    if [ \"$1\" == \"1\" ]; then\n\
    \        echo \"$2\"\n        return\n    fi\n    if [ \"$(($1 % 2))\" == \"0\"\
    \ ]; then\n        echo \"$(($(modp \"$(($1 / 2))\" \"$2\") ** 2 % $2))\"\n  \
    \      return\n    fi\n    echo \"$(($(modp \"$(($1 - 1))\" \"$2\") * $2 % $2))\"",
  "    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local n_len=${#n}\n\
    \    local n_len_minus_1=$((n_len - 1))\n    local n_len_minus_i\n    local n_i\n\
    \    local n_i_int\n    local n_i_int_minus_1\n    local n_i_int_minus_1_pow_2\n\
    \    local n_i_int_minus_1_pow_2_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r\n\
    \    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p\n    local\
    \ n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p_r\n    local n_i_int_minus_1_pow_2_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p_r_mod_p\n\
    \    local n_i_int_minus_1_pow", "    local n=$1\n    local p=$2\n    local r=1\n\
    \    local i=0\n    while [ $i -lt $n ]; do\n        r=$((r*2))\n        r=$((r%p))\n\
    \        i=$((i+1))\n    done\n    echo $r"]
stop_tokens:
- "\n}"
