language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local max_paren_count_list=()\n  local i=0\n  local\
    \ len=${#str}\n  for (( i=0; i<$len; i++ )); do\n    local ch=${str:$i:1}\n  \
    \  if [[ $ch == \"(\" ]]; then\n      (( paren_count++ ))\n      if (( paren_count\
    \ > max_paren_count )); then\n        max_paren_count=$paren_count\n      fi\n\
    \    elif [[ $ch == \")\" ]]; then\n      (( paren_count-- ))\n    elif [[ $ch\
    \ == \" \" ]]; then\n      max_paren_count_list+=($max_paren_count)\n      max_paren_count=0\n\
    \    fi\n  done\n  max_paren_count_list+=($max_paren_count)\n  echo ${max_paren_count_list[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local parens_arr_idx=0\n  local parens_arr_idx_len=0\n  local\
    \ parens_arr_idx_len_prev=0\n  local parens_arr_idx_len_diff=0\n  local parens_arr_idx_len_diff_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \ local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local str_arr=($str)\n\
    \  local max_level=0\n  local level=0\n  local result=()\n  for i in \"${str_arr[@]}\"\
    ; do\n    for (( j=0; j<${#i}; j++ )); do\n      if [[ ${i:$j:1} == \"(\" ]];\
    \ then\n        ((level++))\n        if (( level > max_level )); then\n      \
    \    max_level=$level\n        fi\n      elif [[ ${i:$j:1} == \")\" ]]; then\n\
    \        ((level--))\n      fi\n    done\n    result+=(\"\\\"$max_level\\\"\"\
    )\n    max_level=0\n    level=0\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  for group in $input; do\n    local max_depth=0\n    local curr_depth=0\n  \
    \  for ((i=0; i<${#group}; i++)); do\n      local char=${group:$i:1}\n      if\
    \ [[ $char == \"(\" ]]; then\n        ((curr_depth++))\n        if ((curr_depth\
    \ > max_depth)); then\n          max_depth=$curr_depth\n        fi\n      elif\
    \ [[ $char == \")\" ]]; then\n        ((curr_depth--))\n      fi\n    done\n \
    \   output+=(\"$max_depth\")\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_string=$1\n    local paren_array=($paren_string)\n\
    \    local paren_count\n    local paren_max_count\n    local paren_max_count_array\n\
    \    local paren_max_count_array_index\n    local paren_max_count_array_index_str\n\
    \    local paren_max_count_array_index_str_array\n    local paren_max_count_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str\n    local paren_max_count_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index\n    local\
    \ paren_max_count_array_index_str_array_index_str_array_index_str\n    local paren_max_count_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  # TODO: implement this function\n  #\
    \ Hint: use the following command to get the number of opening parentheses\n \
    \ # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the following command\
    \ to get the number of closing parentheses\n  # $ echo \"(()())\" | grep -o \"\
    )\" | wc -l\n  # Hint: use the following command to get the number of opening\
    \ parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the\
    \ following command to get the number of closing parentheses\n  # $ echo \"(()())\"\
    \ | grep -o \")\" | wc -l\n  # Hint: use the following command to get the number\
    \ of opening parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint:\
    \ use the following command to get the number of closing parentheses\n  # $ echo\
    \ \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the following command to get\
    \ the number of opening parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc\
    \ -l\n  # Hint: use the following command to get the number of closing parentheses\n\
    \  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the following command\
    \ to get the number of opening parentheses\n  # $ echo \"(()())\" | grep -o \"\
    (\" | wc -l\n  # Hint: use the following command to get the number of closing\
    \ parentheses\n  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the\
    \ following command to get the number of opening parentheses\n  # $ echo \"(()())\"\
    \ | grep -o \"(\" | wc -l\n  # Hint: use the following command to get the number\
    \ of closing parentheses\n  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint:\
    \ use the following command to get the number of opening parentheses\n  # $ echo\
    \ \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the following command to get\
    \ the number of closing parentheses\n  # $ echo\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpur4_e3o7.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpur4_e3o7.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ i=0\n  for group in $str; do\n    local count=0\n    local max=0\n    for ((i=0;\
    \ i<${#group}; i++)); do\n      if [[ ${group:$i:1} == \"(\" ]]; then\n      \
    \  ((count++))\n        if ((count > max)); then\n          max=$count\n     \
    \   fi\n      elif [[ ${group:$i:1} == \")\" ]]; then\n        ((count--))\n \
    \     fi\n    done\n    arr+=(\"$max\")\n  done\n  echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_level=0\n\
    \    local level=0\n    local output=()\n    for (( i=0; i<${#str}; i++ )); do\n\
    \        local c=${str:$i:1}\n        if [[ $c == \"(\" ]]; then\n           \
    \ (( level++ ))\n            if (( level > max_level )); then\n              \
    \  max_level=$level\n            fi\n        elif [[ $c == \")\" ]]; then\n  \
    \          (( level-- ))\n        elif [[ $c == \" \" ]]; then\n            output+=(\"\
    \\\"$max_level\\\"\")\n            max_level=0\n            level=0\n        fi\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n    echo \"${output[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_list=()\n\
    \    local parens_count=0\n    local max_parens_count=0\n    local max_parens_list=()\n\
    \    local parens_list_str=\"\"\n    local max_parens_list_str=\"\"\n\n    for\
    \ (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1} == \"(\" ]]; then\n\
    \            ((parens_count++))\n            parens_list+=($parens_count)\n  \
    \      elif [[ ${str:$i:1} == \")\" ]]; then\n            if [[ $parens_count\
    \ -gt $max_parens_count ]]; then\n                max_parens_count=$parens_count\n\
    \                max_parens_list=(\"${parens_list[@]}\")\n            fi\n   \
    \         parens_list=(\"${parens_list[@]:0:$((${#parens_list[@]}-1))}\")\n  \
    \          ((parens_count--))\n        fi\n    done\n\n    parens_list_str=$(printf\
    \ '\"%s\" ' \"${parens_list[@]}\")\n    max_parens_list_str=$(printf '\"%s\" '\
    \ \"${max_parens_list[@]}\")\n    echo \"[$parens_list_str]\"\n    echo \"[$max_parens_list_str]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local parens_depth=0\n\
    \  local max_depth=0\n  local max_depth_list=()\n  local parens_depth_list=()\n\
    \  local parens_depth_list_index=0\n  local max_depth_list_index=0\n  local parens_depth_list_index_list=()\n\
    \  local max_depth_list_index_list=()\n  local parens_depth_list_index_list_index=0\n\
    \  local max_depth_list_index_list_index=0\n  local parens_depth_list_index_list_index_list=()\n\
    \  local max_depth_list_index_list_index_list=()\n  local parens_depth_list_index_list_index_list_index=0\n\
    \  local max_depth_list_index_list_index_list_index=0\n  local parens_depth_list_index_list_index_list_index_list=()\n\
    \  local max_depth_list_index_list_index_list_index_list=()\n  local parens_depth_list_index_list_index_list_index_list_index=0\n\
    \  local max_depth_list_index_list_index_list_index_list_index=0\n  local parens_depth_list_index_list_index_list_index_list_index_list=()\n\
    \  local max_depth_list_index_list_index_list_index_list_index_list=()\n  local\
    \ parens_depth_list_index_list_index_list_index_list_index_list_index=0\n  local\
    \ max_depth_list_index_list_index_list_index_list_index_list_index=0\n  local\
    \ parens_depth_list_index_list_index_list_index_list_index_list_index_list=()\n\
    \  local max_depth_list_index_list_index_list_index_list_index_list_index_list=()\n\
    \  local parens_depth_list_index_list_index_list_index_list_index_list\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=\"$1\"\n    local result=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ local len=${#parens}\n    while [ $i -lt $len ]; do\n        c=${parens:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((depth++))\n            if\
    \ [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((depth--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            result+=(\"$max_depth\")\n \
    \           max_depth=0\n            depth=0\n        fi\n        ((i++))\n  \
    \  done\n    result+=(\"$max_depth\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local char\n  for (( i=0; i<${#input};\
    \ i++ )); do\n    char=\"${input:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n\
    \      (( level++ ))\n      if (( level > max_level )); then\n        max_level=$level\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      (( level-- ))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=\"$1\"\n    local\
    \ result=()\n    local parens_list=($parens_str)\n    for parens in \"${parens_list[@]}\"\
    ; do\n        local max_level=0\n        local current_level=0\n        for ((\
    \ i=0; i<${#parens}; i++ )); do\n            local char=${parens:$i:1}\n     \
    \       if [[ \"$char\" == \"(\" ]]; then\n                ((current_level++))\n\
    \                if ((current_level > max_level)); then\n                    max_level=$current_level\n\
    \                fi\n            elif [[ \"$char\" == \")\" ]]; then\n       \
    \         ((current_level--))\n            fi\n        done\n        result+=(\"\
    $max_level\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_level=0\n\
    \  local level=0\n  local output=()\n  for ((i=0; i<${#str}; i++)); do\n    local\
    \ c=\"${str:$i:1}\"\n    if [[ \"$c\" == \"(\" ]]; then\n      ((level++))\n \
    \     if ((level > max_level)); then\n        max_level=$level\n      fi\n   \
    \ elif [[ \"$c\" == \")\" ]]; then\n      ((level--))\n    elif [[ \"$c\" == \"\
    \ \" ]]; then\n      output+=(\"\\\"$max_level\\\"\")\n      max_level=0\n   \
    \   level=0\n    fi\n  done\n  output+=(\"\\\"$max_level\\\"\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  # TODO: Write your code here\n  # Please\
    \ use the echo command to output the answer (e.g. echo \"1 2 3\")\n  echo \"1\
    \ 2 3\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local result=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n \
    \     ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      result+=(\"\\\"$max_depth\\\"\")\n   \
    \   max_depth=0\n      depth=0\n    fi\n  done\n  result+=(\"\\\"$max_depth\\\"\
    \")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local max_depth=0\n\
    \  local curr_depth=0\n  local parens_arr=()\n  local parens_arr_idx=0\n  for\
    \ (( i=0; i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1} == \"(\" ]]; then\n\
    \      ((curr_depth++))\n      if (( curr_depth > max_depth )); then\n       \
    \ max_depth=$curr_depth\n      fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n\
    \      ((curr_depth--))\n    elif [[ ${parens:$i:1} == \" \" ]]; then\n      parens_arr[$parens_arr_idx]=$max_depth\n\
    \      ((parens_arr_idx++))\n      max_depth=0\n      curr_depth=0\n    fi\n \
    \ done\n  parens_arr[$parens_arr_idx]=$max_depth\n  echo ${parens_arr[@]}\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev\n \
    \ local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local arr=()\n \
    \ local max_level=0\n  local level=0\n  local i=0\n  local len=${#str}\n  local\
    \ c\n  local c_prev\n  local c_next\n  local c_next_next\n  local c_prev_prev\n\
    \  local c_prev_prev_prev\n  local c_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local i=0\n  local c=''\n\
    \  local len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n   \
    \ if [ \"$c\" == \"(\" ]; then\n      current_nesting=$((current_nesting + 1))\n\
    \      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_nesting=$((current_nesting\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"$max_nesting\\\
    \"\")\n      max_nesting=0\n      current_nesting=0\n    fi\n    i=$((i + 1))\n\
    \  done\n  output+=(\"\\\"$max_nesting\\\"\")\n  echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    fi\n   \
    \ ((i++))\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=\"$1\"\n    local parens_arr=($parens)\n\
    \    local max_level=0\n    local level=0\n    local result=()\n    for paren\
    \ in \"${parens_arr[@]}\"; do\n        for ((i=0; i<${#paren}; i++)); do\n   \
    \         if [[ \"${paren:$i:1}\" == \"(\" ]]; then\n                ((level++))\n\
    \                if [[ \"$level\" -gt \"$max_level\" ]]; then\n              \
    \      max_level=\"$level\"\n                fi\n            elif [[ \"${paren:$i:1}\"\
    \ == \")\" ]]; then\n                ((level--))\n            fi\n        done\n\
    \        result+=(\"$max_level\")\n        max_level=0\n        level=0\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local parens_list=$(echo\
    \ $str | tr \" \" \"\\n\")\n  local max_nesting_list=()\n  for parens in $parens_list;\
    \ do\n    local max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#parens};\
    \ i++)); do\n      if [[ ${parens:$i:1} == \"(\" ]]; then\n        nesting=$((nesting+1))\n\
    \        if [[ $nesting -gt $max_nesting ]]; then\n          max_nesting=$nesting\n\
    \        fi\n      elif [[ ${parens:$i:1} == \")\" ]]; then\n        nesting=$((nesting-1))\n\
    \      fi\n    done\n    max_nesting_list+=($max_nesting)\n  done\n  echo ${max_nesting_list[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n  local eeee=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  # TODO: implement this function\n  #\
    \ Hint: use a stack to keep track of the current level of nesting\n  # Hint: use\
    \ a stack to keep track of the current level of nesting\n  # Hint: use a stack\
    \ to keep track of the current level of nesting\n  # Hint: use a stack to keep\
    \ track of the current level of nesting\n  # Hint: use a stack to keep track of\
    \ the current level of nesting\n  # Hint: use a stack to keep track of the current\
    \ level of nesting\n  # Hint: use a stack to keep track of the current level of\
    \ nesting\n  # Hint: use a stack to keep track of the current level of nesting\n\
    \  # Hint: use a stack to keep track of the current level of nesting\n  # Hint:\
    \ use a stack to keep track of the current level of nesting\n  # Hint: use a stack\
    \ to keep track of the current level of nesting\n  # Hint: use a stack to keep\
    \ track of the current level of nesting\n  # Hint: use a stack to keep track of\
    \ the current level of nesting\n  # Hint: use a stack to keep track of the current\
    \ level of nesting\n  # Hint: use a stack to keep track of the current level of\
    \ nesting\n  # Hint: use a stack to keep track of the current level of nesting\n\
    \  # Hint: use a stack to keep track of the current level of nesting\n  # Hint:\
    \ use a stack to keep track of the current level of nesting\n  # Hint: use a stack\
    \ to keep track of the current level of nesting\n  # Hint: use a stack to keep\
    \ track of the current level of nesting\n  # Hint: use a stack to keep track of\
    \ the current level of nesting\n  # Hint: use a stack to keep track of the current\
    \ level of nesting\n  # Hint: use a stack to keep track of the current level of\
    \ nesting\n  # Hint: use a stack to keep track of the current level of nesting\n\
    \  # Hint: use a stack to keep track of the current level of nesting\n  # Hint:\
    \ use a stack to keep track of the current level of nesting\n  # Hint: use a stack\
    \ to keep track of the current level of nesting\n  # Hint: use a stack to keep\
    \ track of the current level of\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp062fa67s.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmp062fa67s.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=\"\"\n\
    \  local paren_count=0\n  local max_paren_count=0\n  local paren_start=0\n  local\
    \ paren_end=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local\
    \ ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n\
    \  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local\
    \ pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n\
    \  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local\
    \ aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n\
    \  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n \
    \ local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local\
    \ qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n\
    \  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n  local\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_idx_max=$((parens_arr_len - 1))\n    local parens_arr_idx_str\n \
    \   local parens_arr_idx_str_len\n    local parens_arr_idx_str_len_max=0\n   \
    \ local parens_arr_idx_str_len_max_str\n    local parens_arr_idx_str_len_max_str_arr\n\
    \    local parens_arr_idx_str_len_max_str_arr_len\n    local parens_arr_idx_str_len_max_str_arr_len_max=0\n\
    \    local parens_arr_idx_str_len_max_str_arr_len_max_str\n    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr\n\
    \    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len\n    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len_max=0\n\
    \    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len_max_str\n  \
    \  local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len_max_str_arr\n\
    \    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len_max_str_arr_len\n\
    \    local parens_arr_idx_str_len_max_str_arr_len_max_str_arr_len_max_str_arr_len_max=0\n\
    \    local parens_arr_idx_str_len_max\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local max_depth=0\n\
    \  local depth=0\n  local output=()\n  for ((i=0; i<${#parens}; i++)); do\n  \
    \  local char=${parens:$i:1}\n    if [[ $char == \"(\" ]]; then\n      ((depth++))\n\
    \      if ((depth > max_depth)); then\n        max_depth=$depth\n      fi\n  \
    \  elif [[ $char == \")\" ]]; then\n      ((depth--))\n    elif [[ $char == \"\
    \ \" ]]; then\n      output+=(\"\\\"$max_depth\\\"\")\n      max_depth=0\n   \
    \   depth=0\n    fi\n  done\n  output+=(\"\\\"$max_depth\\\"\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=\"\"\n  local parens_str_char_prev=\"\"\n  local parens_str_char_next=\"\
    \"\n  local parens_str_char_prev_prev=\"\"\n  local parens_str_char_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_next_next_next_next_next_next_next=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_next_next_next_next_next_next_next_next_next=\"\"\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\
    \n  local parens_str_char_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ i=0\n  local j=0\n  local max=0\n  local curr=0\n  local len=${#str}\n  local\
    \ tmp=''\n  local res=''\n  while [ $i -lt $len ]; do\n    if [ \"${str:$i:1}\"\
    \ == \"(\" ]; then\n      curr=$((curr+1))\n      if [ $curr -gt $max ]; then\n\
    \        max=$curr\n      fi\n    elif [ \"${str:$i:1}\" == \")\" ]; then\n  \
    \    curr=$((curr-1))\n    fi\n    tmp=\"$tmp${str:$i:1}\"\n    if [ \"${str:$i:1}\"\
    \ == \" \" ] || [ $i -eq $((len-1)) ]; then\n      arr[$j]=\"$tmp\"\n      tmp=''\n\
    \      j=$((j+1))\n    fi\n    i=$((i+1))\n  done\n  for i in \"${arr[@]}\"; do\n\
    \    res=\"$res \\\"$max\\\"\"\n  done\n  echo \"[$res]\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n\n  for ((i=0;\
    \ i<${#input}; i++)); do\n    char=\"${input:$i:1}\"\n    if [[ \"$char\" == \"\
    (\" ]]; then\n      ((depth++))\n      ((max_depth=depth>max_depth?depth:max_depth))\n\
    \    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    fi\n  done\n\n\
    \  echo \"[$(printf '\"%s\" ' \"${output[@]}\")]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_level=0\n\
    \    local level=0\n    local result=()\n    for (( i=0; i<${#parens}; i++ ));\
    \ do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            (( level++ ))\n\
    \            (( max_level = level > max_level ? level : max_level ))\n       \
    \ elif [[ ${parens:$i:1} == \")\" ]]; then\n            (( level-- ))\n      \
    \  elif [[ ${parens:$i:1} == \" \" ]]; then\n            result+=(\"\\\"$max_level\\\
    \"\")\n            max_level=0\n            level=0\n        fi\n    done\n  \
    \  result+=(\"\\\"$max_level\\\"\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_str=$1\n  local paren_arr=()\n\
    \  local paren_count=0\n  local max_paren_count=0\n  local paren_arr_len=0\n \
    \ local i=0\n  local j=0\n  local k=0\n  local paren_str_len=0\n  local paren_str_arr=()\n\
    \  local paren_str_arr_len=0\n  local paren_str_arr_i=0\n  local paren_str_arr_j=0\n\
    \  local paren_str_arr_k=0\n  local paren_str_arr_max_paren_count=0\n  local paren_str_arr_max_paren_count_arr=()\n\
    \  local paren_str_arr_max_paren_count_arr_len=0\n  local paren_str_arr_max_paren_count_arr_i=0\n\
    \  local paren_str_arr_max_paren_count_arr_j=0\n  local paren_str_arr_max_paren_count_arr_k=0\n\
    \  local paren_str_arr_max_paren_count_arr_str=0\n  local paren_str_arr_max_paren_count_arr_str_len=0\n\
    \  local paren_str_arr_max_paren_count_arr_str_i=0\n  local paren_str_arr_max_paren_count_arr_str_j=0\n\
    \  local paren_str_arr_max_paren_count_arr_str_k=0\n  local paren_str_arr_max_paren_count_arr_str_paren_count=0\n\
    \  local paren_str_arr_max_paren_count_arr_str_paren_count_arr=()\n  local paren_str_arr_max_paren_count_arr_str_paren_count_arr_len=0\n\
    \  local paren_str_arr_max_paren_count_arr_str_paren_count_arr_i=0\n  local paren_str_arr_max_paren_count_arr_str_paren_count_arr_j=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_level=0\n\
    \    local level=0\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        if [ \"${str:$i:1}\" == \"(\" ]; then\n\
    \            level=$((level+1))\n            if [ $level -gt $max_level ]; then\n\
    \                max_level=$level\n            fi\n        elif [ \"${str:$i:1}\"\
    \ == \")\" ]; then\n            level=$((level-1))\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i=0\n    local\
    \ len=${#input}\n    while [ $i -lt $len ]; do\n        local char=${input:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            ((current_nesting++))\n\
    \            ((max_nesting = max_nesting > current_nesting ? max_nesting : current_nesting))\n\
    \        elif [ \"$char\" == \")\" ]; then\n            ((current_nesting--))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            current_nesting=0\n        fi\n    \
    \    ((i++))\n    done\n    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((\
    \ i=0; i<${parens_arr_len}; i++ )); do\n    local parens_str=\"${parens_arr[$i]}\"\
    \n    local parens_str_len=${#parens_str}\n    local max_nesting=0\n    local\
    \ nesting=0\n    for (( j=0; j<${parens_str_len}; j++ )); do\n      local char=\"\
    ${parens_str:$j:1}\"\n      if [[ \"$char\" == \"(\" ]]; then\n        ((nesting++))\n\
    \        if ((nesting > max_nesting)); then\n          max_nesting=$nesting\n\
    \        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        ((nesting--))\n\
    \      fi\n    done\n    max_nesting_arr+=($max_nesting)\n  done\n  echo \"${max_nesting_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char=''\n  local\
    \ current_group=''\n  local current_group_depth=0\n  local current_group_max_depth=0\n\
    \  local current_group_char=''\n  local current_group_char_depth=0\n  local current_group_char_max_depth=0\n\
    \  local current_group_char_max_depth_index=0\n  local current_group_char_max_depth_char=''\n\
    \  local current_group_char_max_depth_char_depth=0\n  local current_group_char_max_depth_char_max_depth=0\n\
    \  local current_group_char_max_depth_char_max_depth_index=0\n  local current_group_char_max_depth_char_max_depth_char=''\n\
    \  local current_group_char_max_depth_char_max_depth_char_depth=0\n  local current_group_char_max_depth_char_max_depth_char_max_depth=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_index=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char=''\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char_depth=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char_max_depth=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char_max_depth_index=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char_max_depth_char=''\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth_char_max_depth_char_depth=0\n\
    \  local current_group_char_max_depth_char_max_depth_char_max_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local max_level=0\n\
    \  local level=0\n  local result=\"\"\n  local i=0\n  local len=${#input}\n  while\
    \ [ $i -lt $len ]; do\n    local char=${input:$i:1}\n    if [ \"$char\" == \"\
    (\" ]; then\n      level=$((level+1))\n      if [ $level -gt $max_level ]; then\n\
    \        max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ]; then\n \
    \     level=$((level-1))\n    elif [ \"$char\" == \" \" ]; then\n      result=\"\
    $result \\\"$max_level\\\"\"\n      max_level=0\n      level=0\n    fi\n    i=$((i+1))\n\
    \  done\n  result=\"$result \\\"$max_level\\\"\"\n  echo $result\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_nesting=0\n\
    \    local curr_nesting=0\n    local result=\"\"\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            (( curr_nesting++\
    \ ))\n            if (( curr_nesting > max_nesting )); then\n                max_nesting=$curr_nesting\n\
    \            fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n          \
    \  (( curr_nesting-- ))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n  \
    \          result+=\"\\\"$max_nesting\\\" \"\n            max_nesting=0\n    \
    \        curr_nesting=0\n        fi\n    done\n    result+=\"\\\"$max_nesting\\\
    \"\"\n    echo $result\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local paren_groups=($parens)\n\
    \  local paren_group\n  local paren_levels\n  local paren_level\n  local paren_count\n\
    \  local paren_max\n  local paren_max_levels\n  local paren_max_level\n  local\
    \ paren_max_count\n  local paren_max_index\n  local paren_max_group\n  local paren_max_groups\n\
    \  local paren_max_group_index\n  local paren_max_group_indexes\n  local paren_max_group_index_index\n\
    \  local paren_max_group_index_indexes\n  local paren_max_group_index_index_index\n\
    \  local paren_max_group_index_index_indexes\n  local paren_max_group_index_index_index_index\n\
    \  local paren_max_group_index_index_index_indexes\n  local paren_max_group_index_index_index_index_index\n\
    \  local paren_max_group_index_index_index_index_indexes\n  local paren_max_group_index_index_index_index_index_index\n\
    \  local paren_max_group_index_index_index_index_index_indexes\n  local paren_max_group_index_index_index_index_index_index_index\n\
    \  local paren_max_group_index_index_index_index_index_index_indexes\n  local\
    \ paren_max_group_index_index_index_index_index_index_index_index\n  local paren_max_group_index_index_index_index_index_index_index_indexes\n\
    \  local paren_max_group_index_index_index_index_index_index_index_index_index\n\
    \  local paren_max_group_index_index_index_index_index_index_index_index_indexes\n\
    \  local paren_max_group_index_index_index_index_index_index_index_index_index_index\n\
    \  local paren_max_group_index_index_index_index_index_index\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_char_prev\n  local parens_arr_val_char_next\n  local parens_arr_val_char_prev_idx\n\
    \  local parens_arr_val_char_next_idx\n  local parens_arr_val_char_prev_char\n\
    \  local parens_arr_val_char_next_char\n  local parens_arr_val_char_prev_char_prev\n\
    \  local parens_arr_val_char_next_char_next\n  local parens_arr_val_char_prev_char_prev_idx\n\
    \  local parens_arr_val_char_next_char_next_idx\n  local parens_arr_val_char_prev_char_prev_char\n\
    \  local parens_arr_val_char_next_char_next_char\n  local parens_arr_val_char_prev_char_prev_char_prev\n\
    \  local parens_arr_val_char_next_char_next_char_next\n  local parens_arr_val_char_prev_char_prev_char_prev_idx\n\
    \  local parens_arr_val_char_next_char_next_char_next_idx\n  local parens_arr_val_char_prev_char_prev_char_prev_char\n\
    \  local parens_arr_val_char_next_char_next_char_next_char\n  local parens_arr_val_char_prev_char_prev_char_prev_char_prev\n\
    \  local parens_arr_val_char_next_char_next_char_next_char_next\n\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local parens_str=$(echo\
    \ $str | sed -e 's/[^()]//g')\n  local parens_arr=($(echo $parens_str | grep -o\
    \ .))\n  local parens_count=${#parens_arr[@]}\n  local max_depth=0\n  local depth=0\n\
    \  local output=()\n  for ((i=0; i<parens_count; i++)); do\n    if [[ ${parens_arr[$i]}\
    \ == \"(\" ]]; then\n      ((depth++))\n      if [[ $depth -gt $max_depth ]];\
    \ then\n        max_depth=$depth\n      fi\n    elif [[ ${parens_arr[$i]} == \"\
    )\" ]]; then\n      ((depth--))\n    fi\n  done\n  echo $max_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_depth=0\n\
    \  local depth=0\n  local result=()\n  local i=0\n  local c=''\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    c=${str:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n\
    \      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      result+=(\"\\\"$max_depth\\\"\")\n      max_depth=0\n\
    \      depth=0\n    fi\n    ((i++))\n  done\n  result+=(\"\\\"$max_depth\\\"\"\
    )\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[ $c == '(' ]]; then\n\
    \      ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ $c == ')' ]]; then\n      ((level--))\n    elif [[ $c ==\
    \ ' ' ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n      level=0\n\
    \    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_idx_max=$((parens_arr_len - 1))\n    local parens_arr_idx_last=$parens_arr_idx_max\n\
    \    local parens_arr_idx_next=$((parens_arr_idx + 1))\n    local parens_arr_idx_prev=$((parens_arr_idx\
    \ - 1))\n    local parens_arr_idx_curr=$parens_arr_idx\n    local parens_arr_idx_curr_max=$parens_arr_idx_max\n\
    \    local parens_arr_idx_curr_last=$parens_arr_idx_max\n    local parens_arr_idx_curr_next=$((parens_arr_idx_curr\
    \ + 1))\n    local parens_arr_idx_curr_prev=$((parens_arr_idx_curr - 1))\n   \
    \ local parens_arr_idx_curr_max_next=$((parens_arr_idx_curr_max + 1))\n    local\
    \ parens_arr_idx_curr_max_prev=$((parens_arr_idx_curr_max - 1))\n    local parens_arr_idx_curr_last_next=$((parens_arr_idx_curr_last\
    \ + 1))\n    local parens_arr_idx_curr_last_prev=$((parens_arr_idx_curr_last -\
    \ 1))\n    local parens_arr_idx_curr_next_next=$((parens_arr_idx_curr_next + 1))\n\
    \    local parens_arr_idx_curr_next_prev=$((parens_arr_idx_curr_next - 1))\n \
    \   local parens_arr_idx\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a groups\n    local -a depths\n\
    \    local -a output\n    local group\n    local depth\n    local i\n    local\
    \ j\n\n    # Split the string into groups\n    IFS=' ' read -r -a groups <<< \"\
    $1\"\n\n    # For each group, find the maximum depth of nesting\n    for ((i=0;\
    \ i<${#groups[@]}; i++)); do\n        group=\"${groups[$i]}\"\n        depth=0\n\
    \        for ((j=0; j<${#group}; j++)); do\n            if [[ \"${group:$j:1}\"\
    \ == \"(\" ]]; then\n                ((depth++))\n            elif [[ \"${group:$j:1}\"\
    \ == \")\" ]]; then\n                ((depth--))\n            fi\n        done\n\
    \        depths[$i]=\"$depth\"\n    done\n\n    # Convert the array of depths\
    \ to a string\n    output=$(printf '\"%s\" ' \"${depths[@]}\")\n    echo \"[${output:0:-1}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=\"$1\"\n  local\
    \ parens_array=($parens_string)\n  local parens_array_length=${#parens_array[@]}\n\
    \  local parens_array_index=0\n  local parens_array_element\n  local parens_array_element_length\n\
    \  local parens_array_element_index=0\n  local parens_array_element_char\n  local\
    \ parens_array_element_char_index=0\n  local parens_array_element_char_stack_index=0\n\
    \  local parens_array_element_char_stack\n  local parens_array_element_char_stack_length\n\
    \  local parens_array_element_char_stack_max_length=0\n  local parens_array_element_char_stack_max_length_index=0\n\
    \  local parens_array_element_char_stack_max_length_index_array=()\n  local parens_array_element_char_stack_max_length_index_array_length=0\n\
    \  local parens_array_element_char_stack_max_length_index_array_index=0\n  local\
    \ parens_array_element_char_stack_max_length_index_array_element\n  local parens_array_element_char_stack_max_length_index_array_element_length\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_index=0\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_char\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_char_index=0\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_char_stack_index=0\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_char_stack\n\
    \  local parens_array_element_char_stack_max_length_index_array_element_char_stack_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local max_depth=0\n\
    \  local current_depth=0\n  local output=()\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    local char=\"${input:$i:1}\"\n    if [[ \"$char\" == \"(\" ]];\
    \ then\n      ((current_depth++))\n      if ((current_depth > max_depth)); then\n\
    \        max_depth=$current_depth\n      fi\n    elif [[ \"$char\" == \")\" ]];\
    \ then\n      ((current_depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n \
    \     output+=(\"$max_depth\")\n      max_depth=0\n      current_depth=0\n   \
    \ fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_list=$(echo\
    \ $str | tr \" \" \"\\n\")\n    local parens_list_len=$(echo $parens_list | wc\
    \ -w)\n    local max_nesting_levels=()\n    for ((i=0; i<$parens_list_len; i++));\
    \ do\n        local parens=$(echo $parens_list | cut -d \" \" -f $((i+1)))\n \
    \       local parens_len=$(echo $parens | wc -c)\n        local nesting_level=0\n\
    \        local max_nesting_level=0\n        for ((j=0; j<$parens_len; j++)); do\n\
    \            local char=$(echo $parens | cut -c $((j+1)))\n            if [ \"\
    $char\" == \"(\" ]; then\n                nesting_level=$((nesting_level+1))\n\
    \            elif [ \"$char\" == \")\" ]; then\n                nesting_level=$((nesting_level-1))\n\
    \            fi\n            if [ $nesting_level -gt $max_nesting_level ]; then\n\
    \                max_nesting_level=$nesting_level\n            fi\n        done\n\
    \        max_nesting_levels+=($max_nesting_level)\n    done\n    echo ${max_nesting_levels[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local result=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[\
    \ \"$c\" == \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth\
    \ > max_depth)); then\n        max_depth=$current_depth\n      fi\n    elif [[\
    \ \"$c\" == \")\" ]]; then\n      ((current_depth--))\n    elif [[ \"$c\" == \"\
    \ \" ]]; then\n      result+=(\"\\\"$max_depth\\\"\")\n      max_depth=0\n   \
    \   current_depth=0\n    fi\n  done\n  result+=(\"\\\"$max_depth\\\"\")\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char=''\n  local\
    \ i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    current_char=${input:$i:1}\n\
    \    if [ \"$current_char\" == \"(\" ]; then\n      ((current_depth++))\n    \
    \  if [ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n\
    \      fi\n    elif [ \"$current_char\" == \")\" ]; then\n      ((current_depth--))\n\
    \    fi\n    ((i++))\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev\n  local parens_arr_idx_str_len_max_prev_prev_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev_prev_prev\n  local parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_idx_str_len_max_prev_prev_prev\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[\
    \ \"$c\" == \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth\
    \ > max_depth)); then\n        max_depth=$current_depth\n      fi\n    elif [[\
    \ \"$c\" == \")\" ]]; then\n      ((current_depth--))\n    fi\n    if [[ \"$c\"\
    \ == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n     \
    \ current_depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local count=0\n    local max_count=0\n\
    \    local len=${#input}\n    local char=''\n    local group=''\n    local groups=()\n\
    \n    # Split the string into groups\n    for ((i=0; i<len; i++)); do\n      \
    \  char=${input:$i:1}\n        if [[ \"$char\" == \" \" ]]; then\n           \
    \ groups[$j]=$group\n            j=$((j+1))\n            group=''\n        else\n\
    \            group+=$char\n        fi\n    done\n    groups[$j]=$group\n\n   \
    \ # For each group, find the deepest level of nesting\n    for ((i=0; i<=j; i++));\
    \ do\n        group=${groups[$i]}\n        len=${#group}\n        for ((k=0; k<len;\
    \ k++)); do\n            char=${group:$k:1}\n            if [[ \"$char\" == \"\
    (\" ]]; then\n                count=$((count+1))\n            elif [[ \"$char\"\
    \ == \")\" ]]; then\n                count=$((count-1))\n            fi\n    \
    \        if [[ \"$count\" -gt \"$max_count\" ]]; then\n                max_count=$count\n\
    \            fi\n        done\n        output[$i]=$max_count\n        max_count=0\n\
    \        count=0\n    done\n\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local group=\"\"\n  for (( i=0; i<${#input};\
    \ i++ )); do\n    local char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n\
    \      (( level++ ))\n      if (( level > max_level )); then\n        max_level=$level\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      (( level-- ))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=($str)\n \
    \ local result=()\n  for i in \"${arr[@]}\"; do\n    local max_level=0\n    local\
    \ level=0\n    for (( j=0; j<${#i}; j++ )); do\n      if [[ ${i:$j:1} == \"(\"\
    \ ]]; then\n        (( level++ ))\n        if [[ $level -gt $max_level ]]; then\n\
    \          max_level=$level\n        fi\n      elif [[ ${i:$j:1} == \")\" ]];\
    \ then\n        (( level-- ))\n      fi\n    done\n    result+=(\"$max_level\"\
    )\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_array=($(echo\
    \ $str | tr \" \" \"\\n\"))\n    local parens_array_len=${#parens_array[@]}\n\
    \    local max_depth=0\n    local depth=0\n    local max_depth_array=()\n    for\
    \ ((i=0; i<$parens_array_len; i++)); do\n        local parens=${parens_array[$i]}\n\
    \        local parens_len=${#parens}\n        for ((j=0; j<$parens_len; j++));\
    \ do\n            local char=${parens:$j:1}\n            if [ \"$char\" == \"\
    (\" ]; then\n                ((depth++))\n                if [ $depth -gt $max_depth\
    \ ]; then\n                    max_depth=$depth\n                fi\n        \
    \    elif [ \"$char\" == \")\" ]; then\n                ((depth--))\n        \
    \    fi\n        done\n        max_depth_array+=($max_depth)\n        max_depth=0\n\
    \        depth=0\n    done\n    echo ${max_depth_array[@]}\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local arr=()\n \
    \ local max_level=0\n  local level=0\n  local i=0\n  local j=0\n  local len=${#str}\n\
    \  local char=''\n  local result=''\n\n  for ((i=0; i<len; i++)); do\n    char=\"\
    ${str:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n      ((level++))\n    \
    \  if ((level > max_level)); then\n        max_level=$level\n      fi\n    elif\
    \ [[ \"$char\" == \")\" ]]; then\n      ((level--))\n    elif [[ \"$char\" ==\
    \ \" \" ]]; then\n      arr[j]=\"$max_level\"\n      ((j++))\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  arr[j]=\"$max_level\"\n\n  result=\"[\"\n  for\
    \ ((i=0; i<=j; i++)); do\n    result=\"$result\\\"${arr[$i]}\\\",\"\n  done\n\
    \  result=\"${result::-1}]\"\n\n  echo \"$result\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_level=0\n\
    \    local level=0\n    local output=()\n    for ((i=0; i<${#str}; i++)); do\n\
    \        if [[ \"${str:$i:1}\" == \"(\" ]]; then\n            ((level++))\n  \
    \          if ((level > max_level)); then\n                max_level=$level\n\
    \            fi\n        elif [[ \"${str:$i:1}\" == \")\" ]]; then\n         \
    \   ((level--))\n        elif [[ \"${str:$i:1}\" == \" \" ]]; then\n         \
    \   output+=(\"$max_level\")\n            max_level=0\n            level=0\n \
    \       fi\n    done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    fi\n   \
    \ ((i++))\n  done\n  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local max_nesting=0\n\
    \  local current_nesting=0\n  local result=()\n  for (( i=0; i<${#parens}; i++\
    \ )); do\n    if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n      ((current_nesting++))\n\
    \      if ((current_nesting > max_nesting)); then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [[ \"${parens:$i:1}\" == \")\" ]]; then\n      ((current_nesting--))\n\
    \    elif [[ \"${parens:$i:1}\" == \" \" ]]; then\n      result+=(\"\\\"$max_nesting\\\
    \"\")\n      max_nesting=0\n      current_nesting=0\n    fi\n  done\n  result+=(\"\
    \\\"$max_nesting\\\"\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input_str=\"$1\"\n  local output_str=\"\
    \"\n  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input_str}\n\
    \  while [ $i -lt $len ]; do\n    local char=${input_str:$i:1}\n    if [ \"$char\"\
    \ == \"(\" ]; then\n      level=$((level+1))\n      if [ $level -gt $max_level\
    \ ]; then\n        max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ];\
    \ then\n      level=$((level-1))\n    elif [ \"$char\" == \" \" ]; then\n    \
    \  output_str=\"$output_str \\\"$max_level\\\"\"\n      max_level=0\n      level=0\n\
    \    fi\n    i=$((i+1))\n  done\n  output_str=\"$output_str \\\"$max_level\\\"\
    \"\n  echo $output_str\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  # TODO: implement this function\n  local\
    \ result=()\n  local count=0\n  local max=0\n  local temp=0\n  for ((i=0; i<${#1};\
    \ i++)); do\n    if [[ ${1:$i:1} == \"(\" ]]; then\n      ((count++))\n      if\
    \ ((count > max)); then\n        max=$count\n      fi\n    elif [[ ${1:$i:1} ==\
    \ \")\" ]]; then\n      ((count--))\n    elif [[ ${1:$i:1} == \" \" ]]; then\n\
    \      result+=($max)\n      max=0\n      count=0\n    fi\n  done\n  result+=($max)\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local char=${input:$i:1}\n        if [\
    \ \"$char\" == \"(\" ]; then\n            ((level++))\n            if [ $level\
    \ -gt $max_level ]; then\n                max_level=$level\n            fi\n \
    \       elif [ \"$char\" == \")\" ]; then\n            ((level--))\n        fi\n\
    \        ((i++))\n    done\n    echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local max_paren_count_list=()\n  local paren_count_list=()\n\
    \  local paren_count_list_index=0\n  local paren_count_list_index_max=0\n  local\
    \ paren_count_list_index_max_list=()\n  local paren_count_list_index_max_list_index=0\n\
    \  local paren_count_list_index_max_list_index_max=0\n  local paren_count_list_index_max_list_index_max_list=()\n\
    \  local paren_count_list_index_max_list_index_max_list_index=0\n  local paren_count_list_index_max_list_index_max_list_index_max=0\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list=()\n  local\
    \ paren_count_list_index_max_list_index_max_list_index_max_list_index=0\n  local\
    \ paren_count_list_index_max_list_index_max_list_index_max_list_index_max=0\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list_index_max_list=()\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list_index_max_list_index=0\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list_index_max_list_index_max=0\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list_index_max_list_index_max_list=()\n\
    \  local paren_count_list_index_max_list_index_max_list_index_max_list_index_max_list_index_max_list_index=0\n\
    \  local paren_count_list_index_max_list_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ max_depth=0\n  local depth=0\n  local char\n  local i\n  local j\n  local len=${#str}\n\
    \  for ((i=0; i<len; i++)); do\n    char=${str:$i:1}\n    if [[ \"$char\" == \"\
    (\" ]]; then\n      ((depth++))\n      if ((depth > max_depth)); then\n      \
    \  max_depth=$depth\n      fi\n    elif [[ \"$char\" == \")\" ]]; then\n     \
    \ ((depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n      arr+=(\"$max_depth\"\
    )\n      max_depth=0\n      depth=0\n    fi\n  done\n  arr+=(\"$max_depth\")\n\
    \  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_index=0\n\
    \  local parens_array_index_max=$((parens_array_len - 1))\n  local parens_array_index_last=$parens_array_index_max\n\
    \  local parens_array_index_next=$((parens_array_index + 1))\n  local parens_array_index_prev=$((parens_array_index\
    \ - 1))\n  local parens_array_index_last_parens_string=${parens_array[$parens_array_index_last]}\n\
    \  local parens_array_index_next_parens_string=${parens_array[$parens_array_index_next]}\n\
    \  local parens_array_index_prev_parens_string=${parens_array[$parens_array_index_prev]}\n\
    \  local parens_array_index_parens_string=${parens_array[$parens_array_index]}\n\
    \  local parens_array_index_parens_string_len=${#parens_array_index_parens_string}\n\
    \  local parens_array_index_parens_string_len_max=$((parens_array_index_parens_string_len\
    \ - 1))\n  local parens_array_index_parens_string_len_last=$parens_array_index_parens_string_len_max\n\
    \  local parens_array_index_parens_string_len_next=$((parens_array_index_parens_string_len\
    \ + 1))\n  local parens_array_index_parens_string_len_prev=$((parens_array_index_parens_string_len\
    \ - 1))\n  local parens_array_index_parens_string_len_last_parens_string=${parens_array_index_parens_string:$parens_array_index_parens_string_len_last:\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6ltdrun.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local parens_arr=($parens)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_idx_max=$((parens_arr_len - 1))\n    local parens_arr_idx_min=0\n\
    \    local parens_arr_idx_mid=$(((parens_arr_idx_max + parens_arr_idx_min) / 2))\n\
    \    local parens_arr_idx_mid_prev=$parens_arr_idx_mid\n    local parens_arr_idx_mid_next=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_prev_prev=$parens_arr_idx_mid\n    local parens_arr_idx_mid_next_next=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_prev_prev_prev=$parens_arr_idx_mid\n    local parens_arr_idx_mid_next_next_next=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_prev_prev_prev_prev=$parens_arr_idx_mid\n    local\
    \ parens_arr_idx_mid_next_next_next_next=$parens_arr_idx_mid\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_next_next_next_next_next=$parens_arr_idx_mid\n \
    \   local parens_arr_idx_mid_prev_prev_prev_prev_prev_prev=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_next_next_next_next_next_next=$parens_arr_idx_mid\n\
    \    local parens_arr_idx_mid_prev_prev_prev\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting_level=0\n    local current_nesting_level=0\n    local current_group=\"\
    \"\n    local group_start_index=0\n    local group_end_index=0\n    local i=0\n\
    \    local c=''\n    local len=${#input}\n    while [ $i -lt $len ]; do\n    \
    \    c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n            ((current_nesting_level++))\n\
    \            if [ $current_nesting_level -gt $max_nesting_level ]; then\n    \
    \            max_nesting_level=$current_nesting_level\n            fi\n      \
    \  elif [ \"$c\" == \")\" ]; then\n            ((current_nesting_level--))\n \
    \       elif [ \"$c\" == \" \" ]; then\n            if [ $current_nesting_level\
    \ -eq 0 ]; then\n                group_end_index=$i\n                current_group=${input:$group_start_index:$group_end_index-$group_start_index}\n\
    \                output+=(\"\\\"$max_nesting_level\\\"\")\n                max_nesting_level=0\n\
    \                group_start_index=$i+1\n            fi\n        fi\n        ((i++))\n\
    \    done\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i=0\n    local\
    \ c=''\n    local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            current_nesting=$((current_nesting\
    \ + 1))\n            if [ $current_nesting -gt $max_nesting ]; then\n        \
    \        max_nesting=$current_nesting\n            fi\n        elif [ \"$c\" ==\
    \ \")\" ]; then\n            current_nesting=$((current_nesting - 1))\n      \
    \  elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_nesting\")\n  \
    \          max_nesting=0\n            current_nesting=0\n        fi\n        i=$((i\
    \ + 1))\n    done\n    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local curr_depth=0\n  local i=0\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    local char=${input:$i:1}\n    if [ \"$char\"\
    \ == \"(\" ]; then\n      curr_depth=$((curr_depth + 1))\n      if [ $curr_depth\
    \ -gt $max_depth ]; then\n        max_depth=$curr_depth\n      fi\n    elif [\
    \ \"$char\" == \")\" ]; then\n      curr_depth=$((curr_depth - 1))\n    elif [\
    \ \"$char\" == \" \" ]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \      curr_depth=0\n    fi\n    i=$((i + 1))\n  done\n  output+=(\"$max_depth\"\
    )\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_depth=0\n\
    \    local curr_depth=0\n    local output=()\n    for ((i=0; i<${#parens}; i++));\
    \ do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((curr_depth++))\n\
    \            if ((curr_depth > max_depth)); then\n                max_depth=$curr_depth\n\
    \            fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n          \
    \  ((curr_depth--))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n      \
    \      output+=(\"$max_depth\")\n            max_depth=0\n            curr_depth=0\n\
    \        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_array=($parens_str)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_item\n  local parens_array_item_len\n  local parens_array_item_idx\n\
    \  local parens_array_item_char\n  local parens_array_item_char_prev\n  local\
    \ parens_array_item_char_next\n  local parens_array_item_char_prev_idx\n  local\
    \ parens_array_item_char_next_idx\n  local parens_array_item_char_prev_char\n\
    \  local parens_array_item_char_next_char\n  local parens_array_item_char_prev_char_prev\n\
    \  local parens_array_item_char_next_char_next\n  local parens_array_item_char_prev_char_prev_idx\n\
    \  local parens_array_item_char_next_char_next_idx\n  local parens_array_item_char_prev_char_prev_char\n\
    \  local parens_array_item_char_next_char_next_char\n  local parens_array_item_char_prev_char_prev_char_prev\n\
    \  local parens_array_item_char_next_char_next_char_next\n  local parens_array_item_char_prev_char_prev_char_prev_idx\n\
    \  local parens_array_item_char_next_char_next_char_next_idx\n  local parens_array_item_char_prev_char_prev_char_prev_char\n\
    \  local parens_array_item_char_next_char_next_char_next_char\n  local parens_array_item_char_prev_char_prev_char_prev_char_prev\n\
    \  local parens_array_item_char_next_char_next_char_next_char_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_string=\"$1\"\n    local\
    \ paren_array=()\n    local paren_count=0\n    local paren_max=0\n    local paren_string_len=${#paren_string}\n\
    \    local paren_string_idx=0\n    local paren_string_char=\"\"\n    local paren_string_char_prev=\"\
    \"\n    local paren_string_char_next=\"\"\n    local paren_string_char_next_next=\"\
    \"\n    local paren_string_char_next_next_next=\"\"\n    local paren_string_char_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next=\"\"\n    local paren_string_char_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next=\"\"\n    local\
    \ paren_string_char_next_next_next_next_next_next_next_next=\"\"\n    local paren_string_char_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n    local paren_string_char_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  local\
    \ c\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\"\
    \ ]; then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n     \
    \   max_level=$level\n      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n\
    \    elif [ \"$c\" == \" \" ]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_level\")\n  echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_depth=0\n\
    \  local curr_depth=0\n  local max_depth_list=()\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [ \"$c\" == \"(\"\
    \ ]; then\n      curr_depth=$((curr_depth + 1))\n      if [ $curr_depth -gt $max_depth\
    \ ]; then\n        max_depth=$curr_depth\n      fi\n    elif [ \"$c\" == \")\"\
    \ ]; then\n      curr_depth=$((curr_depth - 1))\n      if [ $curr_depth -eq 0\
    \ ]; then\n        max_depth_list+=($max_depth)\n        max_depth=0\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  echo \"${max_depth_list[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char=''\n  local\
    \ i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    current_char=${input:$i:1}\n\
    \    if [ \"$current_char\" == \"(\" ]; then\n      ((current_depth++))\n    \
    \  if [ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n\
    \      fi\n    elif [ \"$current_char\" == \")\" ]; then\n      ((current_depth--))\n\
    \    elif [ \"$current_char\" == \" \" ]; then\n      output+=(\"\\\"$max_depth\\\
    \"\")\n      max_depth=0\n      current_depth=0\n    fi\n    ((i++))\n  done\n\
    \  output+=(\"\\\"$max_depth\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local current_depth=0\n    local current_char\n  \
    \  local current_group=\"\"\n    local current_group_max_depth=0\n    local i=0\n\
    \    local len=${#input}\n    while [ $i -lt $len ]; do\n        current_char=${input:$i:1}\n\
    \        if [ \"$current_char\" == \"(\" ]; then\n            current_depth=$((current_depth\
    \ + 1))\n            if [ $current_depth -gt $max_depth ]; then\n            \
    \    max_depth=$current_depth\n            fi\n        elif [ \"$current_char\"\
    \ == \")\" ]; then\n            current_depth=$((current_depth - 1))\n       \
    \ fi\n        current_group=\"$current_group$current_char\"\n        if [ \"$current_char\"\
    \ == \" \" ]; then\n            current_group_max_depth=$max_depth\n         \
    \   output+=(\"$current_group_max_depth\")\n            current_group=\"\"\n \
    \           max_depth=0\n            current_depth=0\n        fi\n        i=$((i\
    \ + 1))\n    done\n    current_group_max_depth=$max_depth\n    output+=(\"$current_group_max_depth\"\
    )\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_level=0\n\
    \  local cur_level=0\n  local max_levels=()\n  local cur_char\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    cur_char=\"${str:$i:1}\"\n    if [[ \"$cur_char\" == \"(\" ]];\
    \ then\n      (( cur_level++ ))\n      if (( cur_level > max_level )); then\n\
    \        max_level=$cur_level\n      fi\n    elif [[ \"$cur_char\" == \")\" ]];\
    \ then\n      (( cur_level-- ))\n    elif [[ \"$cur_char\" == \" \" ]]; then\n\
    \      max_levels+=(\"$max_level\")\n      max_level=0\n      cur_level=0\n  \
    \  fi\n  done\n  max_levels+=(\"$max_level\")\n  echo \"${max_levels[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    for ((i=0; i<${#input};\
    \ i++)); do\n        local c=${input:$i:1}\n        if [[ $c == \"(\" ]]; then\n\
    \            level=$((level+1))\n            if [[ $level -gt $max_level ]]; then\n\
    \                max_level=$level\n            fi\n        elif [[ $c == \")\"\
    \ ]]; then\n            level=$((level-1))\n        elif [[ $c == \" \" ]]; then\n\
    \            output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n     \
    \       level=0\n        fi\n    done\n    output+=(\"\\\"$max_level\\\"\")\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local parens_list=()\n\
    \  local parens_list_len=0\n  local parens_list_idx=0\n  local parens_list_str=\"\
    \"\n  local parens_list_str_len=0\n  local parens_list_str_idx=0\n  local parens_list_str_parens_count=0\n\
    \  local parens_list_str_parens_count_max=0\n  local parens_list_str_parens_count_max_str=\"\
    \"\n  local parens_list_str_parens_count_max_str_len=0\n  local parens_list_str_parens_count_max_str_idx=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count=0\n  local parens_list_str_parens_count_max_str_parens_count_max=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count_max_str=\"\"\n  local\
    \ parens_list_str_parens_count_max_str_parens_count_max_str_len=0\n  local parens_list_str_parens_count_max_str_parens_count_max_str_idx=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max_str=\"\
    \"\n  local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max_str_len=0\n\
    \  local parens_list_str_parens_count_max_str_parens_count_max_str_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    # TODO: Write your code here\n   \
    \ # Please use the echo command to output the result, e.g.\n    # echo \"hello\
    \ world\"\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local i=0\n  local c=''\n\
    \  local len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n   \
    \ if [ \"$c\" == \"(\" ]; then\n      current_nesting=$((current_nesting + 1))\n\
    \      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_nesting=$((current_nesting\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"$max_nesting\")\n\
    \      max_nesting=0\n      current_nesting=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local groups=($str)\n\
    \  local max_levels=()\n  for group in \"${groups[@]}\"; do\n    local level=0\n\
    \    local max_level=0\n    for (( i=0; i<${#group}; i++ )); do\n      if [[ ${group:$i:1}\
    \ == \"(\" ]]; then\n        ((level++))\n        if ((level > max_level)); then\n\
    \          max_level=$level\n        fi\n      elif [[ ${group:$i:1} == \")\"\
    \ ]]; then\n        ((level--))\n      fi\n    done\n    max_levels+=(\"$max_level\"\
    )\n  done\n  echo \"${max_levels[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local result=\"\"\n  for ((i=0; i<parens_arr_len;\
    \ i++)); do\n    local paren=${parens_arr[$i]}\n    local paren_len=${#paren}\n\
    \    local max_level=0\n    local level=0\n    for ((j=0; j<paren_len; j++));\
    \ do\n      local char=${paren:$j:1}\n      if [[ $char == \"(\" ]]; then\n  \
    \      ((level++))\n        if [[ $level -gt $max_level ]]; then\n          max_level=$level\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        ((level--))\n    \
    \  fi\n    done\n    result=\"$result \\\"$max_level\\\"\"\n  done\n  echo \"\
    [$result]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ $char == \"(\" ]]; then\n     \
    \ ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ $char == \")\" ]]; then\n      ((depth--))\n    elif [[\
    \ $char == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local char=${input:$i:1}\n        if [\
    \ \"$char\" == \"(\" ]; then\n            level=$((level+1))\n            if [\
    \ $level -gt $max_level ]; then\n                max_level=$level\n          \
    \  fi\n        elif [ \"$char\" == \")\" ]; then\n            level=$((level-1))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            output+=(\"\\\"$max_level\\\
    \"\")\n            max_level=0\n            level=0\n        fi\n        i=$((i+1))\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n    echo \"${output[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local groups=$(echo\
    \ $str | sed -e 's/[()]/ /g')\n  local max_nesting=0\n  local max_nesting_group=\"\
    \"\n  for group in $groups; do\n    local nesting=$(echo $group | grep -o \"(\"\
    \ | wc -l)\n    if [ $nesting -gt $max_nesting ]; then\n      max_nesting=$nesting\n\
    \      max_nesting_group=$group\n    fi\n  done\n  echo $max_nesting_group\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_level=0\n\
    \    local level=0\n    local result=\"\"\n    for (( i=0; i<${#str}; i++ ));\
    \ do\n        if [[ \"${str:$i:1}\" == \"(\" ]]; then\n            (( level++\
    \ ))\n            if (( level > max_level )); then\n                max_level=$level\n\
    \            fi\n        elif [[ \"${str:$i:1}\" == \")\" ]]; then\n         \
    \   (( level-- ))\n        elif [[ \"${str:$i:1}\" == \" \" ]]; then\n       \
    \     result=\"$result \\\"$max_level\\\"\"\n            max_level=0\n       \
    \     level=0\n        fi\n    done\n    result=\"$result \\\"$max_level\\\"\"\
    \n    echo \"[$result]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ $char == \"(\" ]]; then\n     \
    \ ((level++))\n      ((max_level = max_level > level ? max_level : level))\n \
    \   elif [[ $char == \")\" ]]; then\n      ((level--))\n    elif [[ $char == \"\
    \ \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n      level=0\n\
    \    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    local i\n    for\
    \ ((i=0; i<${#input}; i++)); do\n        char=${input:$i:1}\n        if [[ $char\
    \ == \"(\" ]]; then\n            ((depth++))\n            ((max_depth = depth\
    \ > max_depth ? depth : max_depth))\n        elif [[ $char == \")\" ]]; then\n\
    \            ((depth--))\n        elif [[ $char == \" \" ]]; then\n          \
    \  output+=($max_depth)\n            max_depth=0\n        fi\n    done\n    output+=($max_depth)\n\
    \    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_idx_max=$((parens_array_len - 1))\n  local parens_array_idx_max_str=$parens_array_idx_max\n\
    \  local parens_array_idx_str\n  local parens_array_idx_str_len\n  local parens_array_idx_str_len_max\n\
    \  local parens_array_idx_str_len_max_str\n  local parens_array_idx_str_len_str\n\
    \  local parens_array_idx_str_len_str_len\n  local parens_array_idx_str_len_str_len_max\n\
    \  local parens_array_idx_str_len_str_len_max_str\n  local parens_array_idx_str_len_str_len_str\n\
    \  local parens_array_idx_str_len_str_len_str_len\n  local parens_array_idx_str_len_str_len_str_len_max\n\
    \  local parens_array_idx_str_len_str_len_str_len_max_str\n  local parens_array_idx_str_len_str_len_str_len_str\n\
    \  local parens_array_idx_str_len_str_len_str_len_str_len\n  local parens_array_idx_str_len_str_len_str_len_str_len_max\n\
    \  local parens_array_idx_str_len_str_len_str_len_str_len_max_str\n  local parens_array_idx_str_len_str_len_str_len_str_len_str\n\
    \  local parens_array_idx_str_len_str_len_str_len_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_char_prev\n  local parens_arr_val_char_prev_prev\n  local\
    \ parens_arr_val_char_prev_prev_prev\n  local parens_arr_val_char_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev\n  local parens_arr_val_char_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev\n  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local\
    \ parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_val_char_prev_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  for ((i=0; i<$parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n\
    \    local parens_len=${#parens}\n    local max_nested_parens=0\n    local curr_nested_parens=0\n\
    \    for ((j=0; j<$parens_len; j++)); do\n      local char=${parens:$j:1}\n  \
    \    if [[ \"$char\" == \"(\" ]]; then\n        ((curr_nested_parens++))\n   \
    \     if [[ \"$curr_nested_parens\" -gt \"$max_nested_parens\" ]]; then\n    \
    \      max_nested_parens=$curr_nested_parens\n        fi\n      elif [[ \"$char\"\
    \ == \")\" ]]; then\n        ((curr_nested_parens--))\n      fi\n    done\n  \
    \  max_nested_parens_arr+=($max_nested_parens)\n  done\n  echo \"${max_nested_parens_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local result=()\n  local\
    \ max_nesting=0\n  local cur_nesting=0\n  local cur_char\n  local i\n  for ((i=0;\
    \ i<${#str}; i++)); do\n    cur_char=${str:$i:1}\n    if [[ $cur_char == \"(\"\
    \ ]]; then\n      ((cur_nesting++))\n      if ((cur_nesting > max_nesting)); then\n\
    \        max_nesting=$cur_nesting\n      fi\n    elif [[ $cur_char == \")\" ]];\
    \ then\n      ((cur_nesting--))\n    elif [[ $cur_char == \" \" ]]; then\n   \
    \   result+=(\"\\\"$max_nesting\\\"\")\n      max_nesting=0\n      cur_nesting=0\n\
    \    fi\n  done\n  result+=(\"\\\"$max_nesting\\\"\")\n  echo ${result[@]}\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local arr=()\n \
    \ local max_nesting=0\n  local cur_nesting=0\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [ \"$c\" == \"(\"\
    \ ]; then\n      cur_nesting=$((cur_nesting + 1))\n      if [ $cur_nesting -gt\
    \ $max_nesting ]; then\n        max_nesting=$cur_nesting\n      fi\n    elif [\
    \ \"$c\" == \")\" ]; then\n      cur_nesting=$((cur_nesting - 1))\n    elif [\
    \ \"$c\" == \" \" ]; then\n      arr+=(\"$max_nesting\")\n      max_nesting=0\n\
    \      cur_nesting=0\n    fi\n    i=$((i + 1))\n  done\n  arr+=(\"$max_nesting\"\
    )\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  local\
    \ c=''\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"\
    (\" ]; then\n      ((level++))\n      ((max_level = level > max_level ? level\
    \ : max_level))\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif\
    \ [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"$max_level\\\"\")\n      max_level=0\n\
    \      level=0\n    fi\n    ((i++))\n  done\n  output+=(\"\\\"$max_level\\\"\"\
    )\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  local max_nested_parens=0\n  local parens_count=0\n  local parens_str_len=0\n\
    \  local parens_str_len_arr=()\n  local parens_str_len_arr_len=0\n  local parens_str_len_arr_idx=0\n\
    \  local parens_str_len_arr_idx_max=0\n  local parens_str_len_arr_idx_max_val=0\n\
    \  local parens_str_len_arr_idx_max_val_idx=0\n  local parens_str_len_arr_idx_max_val_idx_max=0\n\
    \  local parens_str_len_arr_idx_max_val_idx_max_val=0\n  local parens_str_len_arr_idx_max_val_idx_max_val_idx=0\n\
    \  local parens_str_len_arr_idx_max_val_idx_max_val_idx_max=0\n  local parens_str_len_arr_idx_max_val_idx_max_val_idx_max_val=0\n\
    \  local parens_str_len_arr_idx_max_val_idx_max_val_idx_max_val_idx=0\n  local\
    \ parens_str_len_arr_idx_max_val_idx_max_val_idx_max_val_idx_max=0\n  local parens_str_len_arr_idx_max_val_idx_max_val_idx_max_val_idx_max_val=0\n\
    \  local parens_str_len_arr_idx_max_val_idx_max_val_idx_max_val\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local result=()\n  local\
    \ max_depth=0\n  local depth=0\n  local i=0\n  local len=${#str}\n  local paren_start=0\n\
    \  local paren_end=0\n  local paren_str=\"\"\n  local paren_str_len=0\n  local\
    \ paren_str_depth=0\n  local paren_str_max_depth=0\n  local paren_str_depth_arr=()\n\
    \  local paren_str_max_depth_arr=()\n  local paren_str_depth_arr_len=0\n  local\
    \ paren_str_max_depth_arr_len=0\n  local paren_str_depth_arr_idx=0\n  local paren_str_max_depth_arr_idx=0\n\
    \  local paren_str_depth_arr_idx_str=\"\"\n  local paren_str_max_depth_arr_idx_str=\"\
    \"\n  local paren_str_depth_arr_idx_str_len=0\n  local paren_str_max_depth_arr_idx_str_len=0\n\
    \  local paren_str_depth_arr_idx_str_depth=0\n  local paren_str_max_depth_arr_idx_str_depth=0\n\
    \  local paren_str_depth_arr_idx_str_max_depth=0\n  local paren_str_max_depth_arr_idx_str_max_depth=0\n\
    \  local paren_str_depth_arr_idx_str_depth_arr=()\n  local paren_str_max_depth_arr_idx_str_depth_arr=()\n\
    \  local paren_str_depth_arr_idx_str_max_depth_arr=()\n  local paren_str_max_depth_arr_idx_str_max_depth_arr=()\n\
    \  local paren_str_depth_arr_idx_str_depth_arr_len=0\n  local paren_str_max_depth_arr_idx_str_depth_arr_len=0\n\
    \  local p\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local result=()\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local\
    \ u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local\
    \ aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n\
    \  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local\
    \ ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n\
    \  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local\
    \ ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n\
    \  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n \
    \ local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local\
    \ mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n\
    \  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n \
    \ local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n  local eeee=0\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local parens_count=0\n\
    \  local max_parens_count=0\n  local result=\"\"\n  for (( i=0; i<${#str}; i++\
    \ )); do\n    if [[ \"${str:$i:1}\" == \"(\" ]]; then\n      (( parens_count++\
    \ ))\n      if (( parens_count > max_parens_count )); then\n        max_parens_count=$parens_count\n\
    \      fi\n    elif [[ \"${str:$i:1}\" == \")\" ]]; then\n      (( parens_count--\
    \ ))\n    elif [[ \"${str:$i:1}\" == \" \" ]]; then\n      result+=\"\\\"$max_parens_count\\\
    \" \"\n      max_parens_count=0\n      parens_count=0\n    fi\n  done\n  result+=\"\
    \\\"$max_parens_count\\\"\"\n  echo \"$result\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item\n\
    \  local parens_arr_item_len\n  local parens_arr_item_idx\n  local parens_arr_item_char\n\
    \  local parens_arr_item_char_prev\n  local parens_arr_item_char_prev_prev\n \
    \ local parens_arr_item_char_prev_prev_prev\n  local parens_arr_item_char_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev\n  local parens_arr_item_char_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev\n  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev\n \
    \ local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local parens_arr_item_char_prev_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local current_level=0\n  local i=0\n  local len=${#input}\n\
    \  local char\n\n  while [ $i -lt $len ]; do\n    char=${input:$i:1}\n    if [\
    \ \"$char\" == \"(\" ]; then\n      current_level=$((current_level + 1))\n   \
    \   if [ $current_level -gt $max_level ]; then\n        max_level=$current_level\n\
    \      fi\n    elif [ \"$char\" == \")\" ]; then\n      current_level=$((current_level\
    \ - 1))\n    elif [ \"$char\" == \" \" ]; then\n      output+=(\"$max_level\"\
    )\n      max_level=0\n      current_level=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_next_next_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local max=0\n  local temp=0\n  local result=()\n\
    \  local len=${#str}\n  while [ $i -lt $len ]; do\n    if [ \"${str:$i:1}\" ==\
    \ \"(\" ]; then\n      ((j++))\n      if [ $j -gt $max ]; then\n        max=$j\n\
    \      fi\n    elif [ \"${str:$i:1}\" == \")\" ]; then\n      ((j--))\n    elif\
    \ [ \"${str:$i:1}\" == \" \" ]; then\n      arr[$k]=$max\n      ((k++))\n    \
    \  max=0\n    fi\n    ((i++))\n  done\n  arr[$k]=$max\n  for i in \"${arr[@]}\"\
    ; do\n    result+=(\\\"$i\\\")\n  done\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      ((max_level = level > max_level ? level : max_level))\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    fi\n    ((i++))\n\
    \  done\n  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((depth++))\n            if\
    \ [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((depth--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_depth\")\n \
    \           max_depth=0\n            depth=0\n        fi\n        ((i++))\n  \
    \  done\n    output+=(\"$max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_nesting_level=0\n\
    \    local nesting_level=0\n    local result=\"\"\n    for ((i=0; i<${#str}; i++));\
    \ do\n        char=${str:$i:1}\n        if [[ $char == \"(\" ]]; then\n      \
    \      ((nesting_level++))\n            if [[ $nesting_level -gt $max_nesting_level\
    \ ]]; then\n                max_nesting_level=$nesting_level\n            fi\n\
    \        elif [[ $char == \")\" ]]; then\n            ((nesting_level--))\n  \
    \      elif [[ $char == \" \" ]]; then\n            result+=\"\\\"$max_nesting_level\\\
    \" \"\n            max_nesting_level=0\n            nesting_level=0\n        fi\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local groups=$(echo\
    \ $str | sed 's/[()]/ /g')\n    local max_nesting=0\n    local max_nesting_group=0\n\
    \    local nesting=0\n    local i=0\n    for group in $groups; do\n        i=$((i+1))\n\
    \        for char in $(echo $group | sed 's/./& /g'); do\n            if [ \"\
    $char\" == \"(\" ]; then\n                nesting=$((nesting+1))\n           \
    \ elif [ \"$char\" == \")\" ]; then\n                nesting=$((nesting-1))\n\
    \            fi\n        done\n        if [ $nesting -gt $max_nesting ]; then\n\
    \            max_nesting=$nesting\n            max_nesting_group=$i\n        fi\n\
    \        nesting=0\n    done\n    echo $max_nesting_group\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_idx_max=$((parens_array_len - 1))\n  local parens_array_idx_last=$parens_array_idx_max\n\
    \  local parens_array_idx_curr=0\n  local parens_array_idx_next=0\n  local parens_array_idx_prev=0\n\
    \  local parens_array_idx_prev_prev=0\n  local parens_array_idx_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev=0\n  local parens_array_idx_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev=0\n  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_array_idx_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local result=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i=0\n    local\
    \ len=${#str}\n    local c\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            current_nesting=$((current_nesting\
    \ + 1))\n            if [ $current_nesting -gt $max_nesting ]; then\n        \
    \        max_nesting=$current_nesting\n            fi\n        elif [ \"$c\" ==\
    \ \")\" ]; then\n            current_nesting=$((current_nesting - 1))\n      \
    \  elif [ \"$c\" == \" \" ]; then\n            result+=(\"$max_nesting\")\n  \
    \          max_nesting=0\n            current_nesting=0\n        fi\n        i=$((i\
    \ + 1))\n    done\n    result+=(\"$max_nesting\")\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[\
    \ $c == '(' ]]; then\n      ((current_depth++))\n      if ((current_depth > max_depth));\
    \ then\n        max_depth=$current_depth\n      fi\n    elif [[ $c == ')' ]];\
    \ then\n      ((current_depth--))\n    elif [[ $c == ' ' ]]; then\n      output+=(\"\
    $max_depth\")\n      max_depth=0\n      current_depth=0\n    fi\n  done\n  output+=(\"\
    $max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local -a groups=($input)\n\
    \    local -a result\n    for group in \"${groups[@]}\"; do\n        local max_depth=0\n\
    \        local current_depth=0\n        for ((i=0; i<${#group}; i++)); do\n  \
    \          local char=${group:$i:1}\n            if [[ $char == \"(\" ]]; then\n\
    \                ((current_depth++))\n                if ((current_depth > max_depth));\
    \ then\n                    max_depth=$current_depth\n                fi\n   \
    \         elif [[ $char == \")\" ]]; then\n                ((current_depth--))\n\
    \            fi\n        done\n        result+=(\"$max_depth\")\n    done\n  \
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local current_level=0\n    local max_level=0\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        local char=${input:$i:1}\n        if [[ $char == \"(\" ]];\
    \ then\n            ((current_level++))\n            ((max_level = max_level <\
    \ current_level ? current_level : max_level))\n        elif [[ $char == \")\"\
    \ ]]; then\n            ((current_level--))\n        elif [[ $char == \" \" ]];\
    \ then\n            output+=($max_level)\n            max_level=0\n          \
    \  current_level=0\n        fi\n    done\n    output+=($max_level)\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local result=\"\"\n  local i=0\n  local c=\"\"\n\
    \  local len=${#str}\n  for ((i=0; i<len; i++)); do\n    c=${str:$i:1}\n    if\
    \ [[ $c == \"(\" ]]; then\n      ((paren_count++))\n      if ((paren_count > max_paren_count));\
    \ then\n        max_paren_count=$paren_count\n      fi\n    elif [[ $c == \")\"\
    \ ]]; then\n      ((paren_count--))\n    elif [[ $c == \" \" ]]; then\n      result+=\"\
    \\\"$max_paren_count\\\" \"\n      max_paren_count=0\n    fi\n  done\n  result+=\"\
    \\\"$max_paren_count\\\"\"\n  echo $result\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n \
    \     ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((level--))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  local start_idx=0\n  local end_idx=0\n  local group=''\n  local group_len=0\n\
    \  local group_idx=0\n  local group_max_depth=0\n  local group_depth=0\n  local\
    \ group_c=''\n  local group_start_idx=0\n  local group_end_idx=0\n  local group_start_paren_idx=0\n\
    \  local group_end_paren_idx=0\n  local group_start_paren_count=0\n  local group_end_paren_count=0\n\
    \  local group_start_paren_count_idx=0\n  local group_end_paren_count_idx=0\n\
    \  local group_start_paren_count_c=''\n  local group_end_paren_count_c=''\n  local\
    \ group_start_paren_count_len=0\n  local group_end_paren_count_len=0\n  local\
    \ group_start_paren_count_max_depth=0\n  local group_end_paren_count_max_depth=0\n\
    \  local group_start_paren_count_depth=0\n  local group_end_paren_count_depth=0\n\
    \  local group_start_paren_count_start_idx=0\n  local group_end_paren_count_start_idx=0\n\
    \  local group_start_paren_count_end_idx=0\n  local group_end_paren_count_end_idx=0\n\
    \  local group_start_paren_count_start_paren_idx=0\n  local group_end_paren_count_start_paren_idx=0\n\
    \  local group_start_paren_count_end_paren_idx=0\n  local group_end_paren_count_end_paren_idx=0\n\
    \  local group_start_paren_count_start_paren_count=0\n  local group_end_paren_count_start_paren_count=0\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=\"$1\"\n    local\
    \ parens_arr=($parens_str)\n    local max_nesting_arr=()\n    local max_nesting=0\n\
    \    local parens_count=0\n    local parens_count_arr=()\n    local parens_count_arr_idx=0\n\
    \    local parens_count_arr_len=0\n    local parens_count_arr_last_idx=0\n   \
    \ local parens_count_arr_last_val=0\n    local parens_count_arr_last_val_idx=0\n\
    \    local parens_count_arr_last_val_idx_arr=()\n    local parens_count_arr_last_val_idx_arr_len=0\n\
    \    local parens_count_arr_last_val_idx_arr_last_idx=0\n    local parens_count_arr_last_val_idx_arr_last_val=0\n\
    \    local parens_count_arr_last_val_idx_arr_last_val_idx=0\n    local parens_count_arr_last_val_idx_arr_last_val_idx_arr=()\n\
    \    local parens_count_arr_last_val_idx_arr_last_val_idx_arr_len=0\n    local\
    \ parens_count_arr_last_val_idx_arr_last_val_idx_arr_last_idx=0\n    local parens_count_arr_last_val_idx_arr_last_val_idx_arr_last_val=0\n\
    \    local parens_count_arr_last_val_idx_arr_last_val_idx_arr_last_val_idx=0\n\
    \    local parens_count_arr_last_val_idx_arr_last_val_idx_arr_last_val_idx_arr=()\n\
    \    local parens_count_arr_last_val_idx_arr_last_val_idx_arr_last_val\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_depth\n\
    \    local depth\n    local char\n    local i\n    local result\n\n    for ((i=0;\
    \ i<${#str}; i++)); do\n        char=${str:$i:1}\n        if [[ $char == \"(\"\
    \ ]]; then\n            ((depth++))\n            if [[ $depth -gt $max_depth ]];\
    \ then\n                max_depth=$depth\n            fi\n        elif [[ $char\
    \ == \")\" ]]; then\n            ((depth--))\n        fi\n    done\n    echo $max_depth\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local result=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local len=${#str}\n  while\
    \ [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" == \"(\"\
    \ ]; then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n     \
    \   max_depth=$depth\n      fi\n    elif [ \"$char\" == \")\" ]; then\n      ((depth--))\n\
    \    fi\n    ((i++))\n  done\n  result+=(\"$max_depth\")\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_level=0\n\
    \    local level=0\n    local result=()\n    for (( i=0; i<${#str}; i++ )); do\n\
    \        if [[ ${str:$i:1} == \"(\" ]]; then\n            (( level++ ))\n    \
    \        if (( level > max_level )); then\n                max_level=$level\n\
    \            fi\n        elif [[ ${str:$i:1} == \")\" ]]; then\n            ((\
    \ level-- ))\n        elif [[ ${str:$i:1} == \" \" ]]; then\n            result+=(\"\
    \\\"$max_level\\\"\")\n            max_level=0\n            level=0\n        fi\n\
    \    done\n    result+=(\"\\\"$max_level\\\"\")\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_level\")\n      max_level=0\n   \
    \   level=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_level\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_idx_max=$((parens_arr_len - 1))\n    local parens_arr_idx_min=0\n\
    \    local parens_arr_idx_mid=$((parens_arr_idx_max / 2))\n    local parens_arr_idx_mid_prev=0\n\
    \    local parens_arr_idx_mid_next=0\n    local parens_arr_idx_mid_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next=0\n    local parens_arr_idx_mid_prev_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next_next=0\n    local parens_arr_idx_mid_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next_next_next=0\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next_next_next_next=0\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next_next_next_next_next=0\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_mid_next_next_next_next_next_next_next=0\n    local\
    \ parens_arr_idx_mid_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local parens_arr_idx_mid_next_next_next_next_next_next_next_next=0\n\
    \    local p\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_nest=0\n\
    \  local nest=0\n  local output=()\n  for ((i=0; i<${#str}; i++)); do\n    if\
    \ [[ \"${str:$i:1}\" == \"(\" ]]; then\n      ((nest++))\n      if ((nest > max_nest));\
    \ then\n        max_nest=$nest\n      fi\n    elif [[ \"${str:$i:1}\" == \")\"\
    \ ]]; then\n      ((nest--))\n    elif [[ \"${str:$i:1}\" == \" \" ]]; then\n\
    \      output+=(\"$max_nest\")\n      max_nest=0\n      nest=0\n    fi\n  done\n\
    \  output+=(\"$max_nest\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local -a arr\n  local\
    \ -a res\n  local -i i=0\n  local -i j=0\n  local -i max_level=0\n  local -i level=0\n\
    \  local -i len=0\n  local -i len_arr=0\n  local -i len_res=0\n  local -i len_str=0\n\
    \  local -i len_substr=0\n  local -i len_substr_arr=0\n  local -i len_substr_res=0\n\
    \  local -i len_substr_str=0\n  local -i len_substr_substr=0\n  local -i len_substr_substr_arr=0\n\
    \  local -i len_substr_substr_res=0\n  local -i len_substr_substr_str=0\n  local\
    \ -i len_substr_substr_substr=0\n  local -i len_substr_substr_substr_arr=0\n \
    \ local -i len_substr_substr_substr_res=0\n  local -i len_substr_substr_substr_str=0\n\
    \  local -i len_substr_substr_substr_substr=0\n  local -i len_substr_substr_substr_substr_arr=0\n\
    \  local -i len_substr_substr_substr_substr_res=0\n  local -i len_substr_substr_substr_substr_str=0\n\
    \  local -i len_substr_substr_substr_substr_substr=0\n  local -i len_substr_substr_substr_substr_substr_arr=0\n\
    \  local -i len_substr_substr_substr_substr_substr_res=0\n  local -i len_substr_substr_substr_substr_substr_str=0\n\
    \  local -i len_substr_substr_substr_substr_substr_substr=0\n  local -i len_substr_substr_substr_substr_substr_substr_arr\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_len_minus_one=0\n\
    \  local parens_str_len_minus_two=0\n  local parens_str_len_minus_three=0\n  local\
    \ parens_str_len_minus_four=0\n  local parens_str_len_minus_five=0\n  local parens_str_len_minus_six=0\n\
    \  local parens_str_len_minus_seven=0\n  local parens_str_len_minus_eight=0\n\
    \  local parens_str_len_minus_nine=0\n  local parens_str_len_minus_ten=0\n  local\
    \ parens_str_len_minus_eleven=0\n  local parens_str_len_minus_twelve=0\n  local\
    \ parens_str_len_minus_thirteen=0\n  local parens_str_len_minus_fourteen=0\n \
    \ local parens_str_len_minus_fifteen=0\n  local parens_str_len_minus_sixteen=0\n\
    \  local parens_str_len_minus_seventeen=0\n  local parens_str_len_minus_eighteen=0\n\
    \  local parens_str_len_minus_nineteen=0\n  local parens_str_len_minus_twenty=0\n\
    \  local parens_str_len_minus_twenty_one=0\n  local parens_str_len_minus_twenty_two=0\n\
    \  local parens_str_len_minus_twenty_three=0\n  local parens_str_len_minus_twenty_four=0\n\
    \  local parens_str_len_minus_twenty_five=0\n  local parens_str_len_minus_twenty_six=0\n\
    \  local parens_str_len_minus_twenty_seven=0\n \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n   \
    \   depth=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_depth\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_regex='\\\
    ([^()]*\\)'\n    local result=()\n    local max_nesting=0\n    local current_nesting=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n  \
    \  local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local result=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local len=${#str}\n\
    \    local c\n\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n       \
    \ if [ \"$c\" == \"(\" ]; then\n            ((depth++))\n            if [ $depth\
    \ -gt $max_depth ]; then\n                max_depth=$depth\n            fi\n \
    \       elif [ \"$c\" == \")\" ]; then\n            ((depth--))\n        elif\
    \ [ \"$c\" == \" \" ]; then\n            result+=(\"$max_depth\")\n          \
    \  max_depth=0\n            depth=0\n        fi\n        ((i++))\n    done\n \
    \   result+=(\"$max_depth\")\n    echo ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_depth=0\n\
    \  local depth=0\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n\
    \      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      result=\"$result \\\"$max_depth\\\"\"\n      max_depth=0\n\
    \      depth=0\n    fi\n    ((i++))\n  done\n  result=\"$result \\\"$max_depth\\\
    \"\"\n  echo $result\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input_str=\"$1\"\n    local\
    \ output_str=\"\"\n    local max_depth=0\n    local curr_depth=0\n    local i=0\n\
    \    local len=${#input_str}\n    local c=\"\"\n    local c_prev=\"\"\n    local\
    \ c_next=\"\"\n    local is_escaped=false\n    local is_quoted=false\n    local\
    \ is_paren_open=false\n    local is_paren_close=false\n    local is_paren_open_prev=false\n\
    \    local is_paren_close_prev=false\n    local is_paren_open_next=false\n   \
    \ local is_paren_close_next=false\n    local is_paren_open_prev_prev=false\n \
    \   local is_paren_close_prev_prev=false\n    local is_paren_open_next_next=false\n\
    \    local is_paren_close_next_next=false\n    local is_paren_open_prev_prev_prev=false\n\
    \    local is_paren_close_prev_prev_prev=false\n    local is_paren_open_next_next_next=false\n\
    \    local is_paren_close_next_next_next=false\n    local is_paren_open_prev_prev_prev_prev=false\n\
    \    local is_paren_close_prev_prev_prev_prev=false\n    local is_paren_open_next_next_next_next=false\n\
    \    local is_paren_close_next_next_next_next=false\n    local is_paren_open_prev_prev_prev_prev_prev=false\n\
    \    local is_paren_close_prev_prev_prev_prev_prev=false\n    local is_paren_open_next_next_next_next_next=false\n\
    \    local is_paren_close_next_next_next_next_next=false\n    local is_paren_open_prev_prev_prev_prev_prev_prev=false\n\
    \    local is_paren_close_prev_prev_prev_prev_prev_prev=false\n    local is_paren_open_next_next_next_next_next_next=false\n\
    \    local is_paren_close_next_next_next_next_next\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<parens_arr_len; i++)); do\n    local parens_group=\"${parens_arr[$i]}\"\n\
    \    local parens_group_len=${#parens_group}\n    local max_nesting=0\n    local\
    \ nesting=0\n    for ((j=0; j<parens_group_len; j++)); do\n      local parens_char=\"\
    ${parens_group:$j:1}\"\n      if [[ \"$parens_char\" == \"(\" ]]; then\n     \
    \   nesting=$((nesting+1))\n      elif [[ \"$parens_char\" == \")\" ]]; then\n\
    \        nesting=$((nesting-1))\n      fi\n      if [[ \"$nesting\" -gt \"$max_nesting\"\
    \ ]]; then\n        max_nesting=$nesting\n      fi\n    done\n    max_nesting_arr+=(\"\
    $max_nesting\")\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local parens_str=$(echo\
    \ \"$str\" | tr ' ' '\\n' | sed -n 's/^(\\(.*\\))$/\\1/p')\n  local parens_arr=($parens_str)\n\
    \  local max_level=0\n  local level=0\n  local result=\"\"\n  for parens in \"\
    ${parens_arr[@]}\"; do\n    level=0\n    for ((i=0; i<${#parens}; i++)); do\n\
    \      if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n        ((level++))\n     \
    \   if [[ $level -gt $max_level ]]; then\n          max_level=$level\n       \
    \ fi\n      elif [[ \"${parens:$i:1}\" == \")\" ]]; then\n        ((level--))\n\
    \      fi\n    done\n    result=\"$result $max_level\"\n  done\n  echo \"[$result]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local max_paren_counts=()\n  local paren_counts=()\n\
    \  local paren_count_index=0\n  for (( i=0; i<${#parens}; i++ )); do\n    char=\"\
    ${parens:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n      ((paren_count++))\n\
    \      if [[ $paren_count -gt $max_paren_count ]]; then\n        max_paren_count=$paren_count\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((paren_count--))\n\
    \    elif [[ \"$char\" == \" \" ]]; then\n      max_paren_counts+=($max_paren_count)\n\
    \      max_paren_count=0\n      paren_counts+=($paren_count)\n      paren_count=0\n\
    \      ((paren_count_index++))\n    fi\n  done\n  max_paren_counts+=($max_paren_count)\n\
    \  paren_counts+=($paren_count)\n  for (( i=0; i<${#max_paren_counts[@]}; i++\
    \ )); do\n    if [[ ${paren_counts[$i]} -ne 0 ]]; then\n      echo \"\\\"Invalid\\\
    \"\"\n    else\n      echo \"\\\"${max_paren_counts[$i]}\\\"\"\n    fi\n  done\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_nesting_level=0\n\
    \  local nesting_level=0\n  local max_nesting_levels=()\n  local i=0\n  local\
    \ c=''\n  local len=${#str}\n  for ((i=0; i<len; i++)); do\n    c=${str:$i:1}\n\
    \    if [[ \"$c\" == \"(\" ]]; then\n      ((nesting_level++))\n      if ((nesting_level\
    \ > max_nesting_level)); then\n        max_nesting_level=$nesting_level\n    \
    \  fi\n    elif [[ \"$c\" == \")\" ]]; then\n      ((nesting_level--))\n     \
    \ max_nesting_levels+=($max_nesting_level)\n      max_nesting_level=0\n    fi\n\
    \  done\n  echo \"${max_nesting_levels[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local max_paren_count_list=()\n    local i=0\n\
    \    local len=${#str}\n    local c\n    local paren_count_list=()\n    local\
    \ paren_count_list_index=0\n    local paren_count_list_len=0\n    local paren_count_list_item\n\
    \    local paren_count_list_item_index\n    local paren_count_list_item_len\n\
    \    local paren_count_list_item_c\n    local paren_count_list_item_c_index\n\
    \    local paren_count_list_item_c_len\n    local paren_count_list_item_c_c\n\
    \    local paren_count_list_item_c_c_index\n    local paren_count_list_item_c_c_len\n\
    \    local paren_count_list_item_c_c_c\n    local paren_count_list_item_c_c_c_index\n\
    \    local paren_count_list_item_c_c_c_len\n    local paren_count_list_item_c_c_c_c\n\
    \    local paren_count_list_item_c_c_c_c_index\n    local paren_count_list_item_c_c_c_c_len\n\
    \    local paren_count_list_item_c_c_c_c_c\n    local paren_count_list_item_c_c_c_c_c_index\n\
    \    local paren_count_list_item_c_c_c_c_c_len\n    local paren_count_list_item_c_c_c_c_c_c\n\
    \    local paren_count_list_item_c_c_c_c_c_c_index\n    local paren_count_list_item_c_c_c_c_c_c_len\n\
    \    local paren_count_list_item_c_c_c_c_c_c_c\n    local paren_count\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local result=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local len=${#str}\n\
    \    local c=''\n    local start=0\n    local end=0\n    while [ $i -lt $len ];\
    \ do\n        c=${str:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n          \
    \  ((depth++))\n            if [ $depth -gt $max_depth ]; then\n             \
    \   max_depth=$depth\n            fi\n        elif [ \"$c\" == \")\" ]; then\n\
    \            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n           \
    \ if [ $depth -eq 0 ]; then\n                end=$i\n                result+=(\"\
    \\\"$max_depth\\\"\")\n                max_depth=0\n                start=$((i+1))\n\
    \            fi\n        fi\n        ((i++))\n    done\n    if [ $depth -eq 0\
    \ ]; then\n        end=$i\n        result+=(\"\\\"$max_depth\\\"\")\n    fi\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n\
    \    local max_nesting=0\n    local nesting=0\n    for ((j=0; j<parens_len; j++));\
    \ do\n      local char=${parens:$j:1}\n      if [[ $char == \"(\" ]]; then\n \
    \       ((nesting++))\n        if [[ $nesting -gt $max_nesting ]]; then\n    \
    \      max_nesting=$nesting\n        fi\n      elif [[ $char == \")\" ]]; then\n\
    \        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=($max_nesting)\n\
    \  done\n  echo ${max_nesting_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n    local parens_len=${#parens}\n\
    \    local max_nesting=0\n    local nesting=0\n    for ((j=0; j<parens_len; j++));\
    \ do\n      local char=${parens:$j:1}\n      if [[ \"$char\" == \"(\" ]]; then\n\
    \        ((nesting++))\n        if ((nesting > max_nesting)); then\n         \
    \ max_nesting=$nesting\n        fi\n      elif [[ \"$char\" == \")\" ]]; then\n\
    \        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=($max_nesting)\n\
    \  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_level=0\n\
    \    local level=0\n    local result=()\n    for ((i=0; i<${#parens}; i++)); do\n\
    \        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((level++))\n   \
    \         if ((level > max_level)); then\n                max_level=$level\n \
    \           fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n           \
    \ ((level--))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n            result+=(\"\
    \\\"$max_level\\\"\")\n            max_level=0\n            level=0\n        fi\n\
    \    done\n    result+=(\"\\\"$max_level\\\"\")\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n\n  for ((i=0;\
    \ i<${#input}; i++)); do\n    char=${input:$i:1}\n    if [[ $char == \"(\" ]];\
    \ then\n      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ $char == \")\" ]]; then\n      ((depth--))\n    elif [[\
    \ $char == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_level=0\n\
    \  local level=0\n  local res=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    if\
    \ [[ \"${str:$i:1}\" == \"(\" ]]; then\n      level=$((level+1))\n      if [[\
    \ $level -gt $max_level ]]; then\n        max_level=$level\n      fi\n    elif\
    \ [[ \"${str:$i:1}\" == \")\" ]]; then\n      level=$((level-1))\n    fi\n  done\n\
    \  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local max_paren_counts=()\n  local i=0\n  local\
    \ c=''\n  local str_len=${#str}\n  while [ $i -lt $str_len ]; do\n    c=${str:$i:1}\n\
    \    if [ \"$c\" == \"(\" ]; then\n      ((paren_count++))\n      if [ $paren_count\
    \ -gt $max_paren_count ]; then\n        max_paren_count=$paren_count\n      fi\n\
    \    elif [ \"$c\" == \")\" ]; then\n      ((paren_count--))\n    elif [ \"$c\"\
    \ == \" \" ]; then\n      max_paren_counts+=($max_paren_count)\n      max_paren_count=0\n\
    \    fi\n    ((i++))\n  done\n  max_paren_counts+=($max_paren_count)\n  echo \"\
    ${max_paren_counts[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[ \"$c\" == \"(\"\
    \ ]]; then\n      ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ \"$c\" == \")\" ]]; then\n      ((level--))\n    fi\n \
    \   if [[ \"$c\" == \" \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    local c=''\n    local c_prev=''\n    local c_next=''\n    while [ $i -lt\
    \ $len ]; do\n        c=${input:$i:1}\n        c_prev=${input:$((i-1)):1}\n  \
    \      c_next=${input:$((i+1)):1}\n        if [ \"$c\" == \"(\" ]; then\n    \
    \        if [ \"$c_prev\" == \" \" ]; then\n                level=0\n        \
    \    fi\n            level=$((level+1))\n            if [ $level -gt $max_level\
    \ ]; then\n                max_level=$level\n            fi\n        elif [ \"\
    $c\" == \")\" ]; then\n            if [ \"$c_next\" == \" \" ]; then\n       \
    \         output+=(\"\\\"$max_level\\\"\")\n                max_level=0\n    \
    \        fi\n            level=$((level-1))\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char=''\n  local\
    \ i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    current_char=${input:$i:1}\n\
    \    if [ \"$current_char\" == \"(\" ]; then\n      current_depth=$((current_depth\
    \ + 1))\n      if [ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n\
    \      fi\n    elif [ \"$current_char\" == \")\" ]; then\n      current_depth=$((current_depth\
    \ - 1))\n    fi\n    i=$((i + 1))\n  done\n  echo $max_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local max_nesting=0\n  local nesting=0\n  local parens_str_len=0\n  local parens_str_len_max=0\n\
    \  local parens_str_len_min=0\n  local parens_str_len_avg=0\n  local parens_str_len_sum=0\n\
    \  local parens_str_len_count=0\n  local parens_str_len_median=0\n  local parens_str_len_median_idx=0\n\
    \  local parens_str_len_median_idx_1=0\n  local parens_str_len_median_idx_2=0\n\
    \  local parens_str_len_median_1=0\n  local parens_str_len_median_2=0\n  local\
    \ parens_str_len_median_avg=0\n  local parens_str_len_median_avg_1=0\n  local\
    \ parens_str_len_median_avg_2=0\n  local parens_str_len_median_avg_1_idx=0\n \
    \ local parens_str_len_median_avg_2_idx=0\n  local parens_str_len_median_avg_1_idx_1=0\n\
    \  local parens_str_len_median_avg_1_idx_2=0\n  local parens_str_len_median_avg_2_idx_1=0\n\
    \  local parens_str_len_median_avg_2_idx_2=0\n  local parens_str_len_median_avg_1_1=0\n\
    \  local parens_str_len_median_avg_1_2=0\n  local parens_str_len_median_avg_2_1=0\n\
    \  local parens_str_len\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item\n\
    \  local parens_arr_item_len\n  local parens_arr_item_idx\n  local parens_arr_item_char\n\
    \  local parens_arr_item_max_nesting_level\n  local parens_arr_item_nesting_level\n\
    \  local parens_arr_item_nesting_level_arr\n  local parens_arr_item_nesting_level_arr_len\n\
    \  local parens_arr_item_nesting_level_arr_idx\n  local parens_arr_item_nesting_level_arr_item\n\
    \  local parens_arr_item_nesting_level_arr_item_len\n  local parens_arr_item_nesting_level_arr_item_idx\n\
    \  local parens_arr_item_nesting_level_arr_item_char\n  local parens_arr_item_nesting_level_arr_item_max_nesting_level\n\
    \  local parens_arr_item_nesting_level_arr_item_nesting_level\n  local parens_arr_item_nesting_level_arr_item_nesting_level_arr\n\
    \  local parens_arr_item_nesting_level_arr_item_nesting_level_arr_len\n  local\
    \ parens_arr_item_nesting_level_arr_item_nesting_level_arr_idx\n  local parens_arr_item_nesting_level_arr_item_nesting_level_arr_item\n\
    \  local parens_arr_item_nesting_level_arr_item_nesting_level_arr_item_len\n \
    \ local parens_arr_item_nesting_level_arr_item_nesting_level_arr_item_idx\n  local\
    \ parens_arr_item_n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_nesting_level=0\n\
    \  local nesting_level=0\n  local max_nesting_level_str=\"\"\n  local nesting_level_str=\"\
    \"\n  local max_nesting_level_strs=()\n  local nesting_level_strs=()\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local len=${#str}\n  local c=\"\"\n  local\
    \ c_prev=\"\"\n  local c_next=\"\"\n  local c_prev_prev=\"\"\n  local c_next_next=\"\
    \"\n  local c_prev_prev_prev=\"\"\n  local c_next_next_next=\"\"\n  local c_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev=\"\"\
    \n  local c_next_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next_next_next_next_next_next=\"\"\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local c_next_next_next_next_next_next_next_next_next_next=\"\"\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local c_next_next_next_next_next_next_next_next_next_next_next=\"\
    \"\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\
    \n  local c_next\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_item=''\n  local parens_array_item_len=0\n  local parens_array_item_idx=0\n\
    \  local parens_array_item_char=''\n  local parens_array_item_parens_level=0\n\
    \  local parens_array_item_parens_level_max=0\n  local parens_array_item_parens_level_max_str=''\n\
    \  local parens_array_item_parens_level_max_str_array=()\n  local parens_array_item_parens_level_max_str_array_len=0\n\
    \  local parens_array_item_parens_level_max_str_array_idx=0\n  local parens_array_item_parens_level_max_str_array_item=''\n\
    \  local parens_array_item_parens_level_max_str_array_item_len=0\n  local parens_array_item_parens_level_max_str_array_item_idx=0\n\
    \  local parens_array_item_parens_level_max_str_array_item_char=''\n  local parens_array_item_parens_level_max_str_array_item_parens_level=0\n\
    \  local parens_array_item_parens_level_max_str_array_item_parens_level_max=0\n\
    \  local parens_array_item_parens_level_max_str_array_item_parens_level_max_str=''\n\
    \  local parens_array_item_parens_level_max_str_array_item_parens_level_max_str_array=()\n\
    \  local parens_array_item_parens_level_max_str_array_item_parens_level_\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local c=${input:$i:1}\n        if [ \"\
    $c\" == \"(\" ]; then\n            level=$((level+1))\n            if [ $level\
    \ -gt $max_level ]; then\n                max_level=$level\n            fi\n \
    \       elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n     \
    \   elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_level\")\n   \
    \         max_level=0\n            level=0\n        fi\n        i=$((i+1))\n \
    \   done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  local\
    \ c=''\n  local c_prev=''\n  local c_next=''\n  local c_next_next=''\n  local\
    \ c_next_next_next=''\n  local c_next_next_next_next=''\n  local c_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next=''\n  local c_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next=''\n  local c_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next=''\n  local c_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next_next=''\n  local\
    \ c_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n  local\
    \ c_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_next_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local parens_str_len=0\n  local parens_str_len_arr=()\n  local\
    \ parens_str_len_arr_len=0\n  local parens_str_len_arr_len_arr=()\n  local parens_str_len_arr_len_arr_len=0\n\
    \  local parens_str_len_arr_len_arr_len_arr=()\n  local parens_str_len_arr_len_arr_len_arr_len=0\n\
    \  local parens_str_len_arr_len_arr_len_arr_len_arr=()\n  local parens_str_len_arr_len_arr_len_arr_len_arr_len=0\n\
    \  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr=()\n  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len=0\n\
    \  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n  local\
    \ parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=0\n  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len=0\n\
    \  local parens_str_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr=()\n\
    \  local parens_str_len_arr_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_last=$parens_arr_idx_max\n  local parens_arr_idx_next=$((parens_arr_idx\
    \ + 1))\n  local parens_arr_idx_prev=$((parens_arr_idx - 1))\n  local parens_arr_idx_last_prev=$((parens_arr_idx_last\
    \ - 1))\n  local parens_arr_idx_last_next=$((parens_arr_idx_last + 1))\n  local\
    \ parens_arr_idx_next_next=$((parens_arr_idx_next + 1))\n  local parens_arr_idx_prev_prev=$((parens_arr_idx_prev\
    \ - 1))\n  local parens_arr_idx_last_prev_prev=$((parens_arr_idx_last_prev - 1))\n\
    \  local parens_arr_idx_last_next_next=$((parens_arr_idx_last_next + 1))\n  local\
    \ parens_arr_idx_next_next_next=$((parens_arr_idx_next_next + 1))\n  local parens_arr_idx_prev_prev_prev=$((parens_arr_idx_prev_prev\
    \ - 1))\n  local parens_arr_idx_last_prev_prev_prev=$((parens_arr_idx_last_prev_prev\
    \ - 1))\n  local parens_arr_idx_last_next_next_next=$((parens_arr_idx_last_next_next\
    \ + 1))\n  local parens_arr_idx_next_next_next_next=$((parens_arr_idx_next_next_next\
    \ +\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp664vbpzw.sh: line 28: unexpected EOF while looking for matching
    `)''

    /tmp/tmp664vbpzw.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n   \
    \   depth=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_depth\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ for ((i=0; i<${#input}; i++)); do\n        c=${input:$i:1}\n        if [[ $c\
    \ == '(' ]]; then\n            ((depth++))\n            if ((depth > max_depth));\
    \ then\n                max_depth=$depth\n            fi\n        elif [[ $c ==\
    \ ')' ]]; then\n            ((depth--))\n        elif [[ $c == ' ' ]]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local parens_regex=\"\
    \\(([^()]*|(?R))*\\)\"\n  local max_nesting_regex=\"\\(([^()]*|(?R))*\\)\"\n \
    \ local max_nesting=0\n  local current_nesting=0\n  local output=()\n  for group\
    \ in $str; do\n    if [[ $group =~ $parens_regex ]]; then\n      while [[ $group\
    \ =~ $max_nesting_regex ]]; do\n        current_nesting=$((current_nesting+1))\n\
    \        group=${BASH_REMATCH[1]}\n      done\n      output+=(\"\\\"$current_nesting\\\
    \"\")\n      current_nesting=0\n    else\n      output+=(\"\\\"1\\\"\")\n    fi\n\
    \  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a paren_groups=($1)\n    local\
    \ -a paren_levels=()\n    local paren_level=0\n    local paren_group\n    for\
    \ paren_group in \"${paren_groups[@]}\"; do\n        paren_level=0\n        for\
    \ ((i=0; i<${#paren_group}; i++)); do\n            if [[ \"${paren_group:$i:1}\"\
    \ == \"(\" ]]; then\n                ((paren_level++))\n            elif [[ \"\
    ${paren_group:$i:1}\" == \")\" ]]; then\n                ((paren_level--))\n \
    \           fi\n        done\n        paren_levels+=($paren_level)\n    done\n\
    \    echo \"${paren_levels[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    fi\n   \
    \ ((i++))\n  done\n  echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_stack=()\n\
    \    local parens_stack_idx=0\n    local max_nesting_level=0\n    local max_nesting_level_idx=0\n\
    \    local current_nesting_level=0\n    local current_nesting_level_idx=0\n  \
    \  local idx=0\n    local parens_stack_size=0\n    local parens_stack_size_idx=0\n\
    \    local parens_stack_size_idx_old=0\n    local parens_stack_size_idx_new=0\n\
    \    local parens_stack_size_idx_diff=0\n    local parens_stack_size_idx_diff_old=0\n\
    \    local parens_stack_size_idx_diff_new=0\n    local parens_stack_size_idx_diff_max=0\n\
    \    local parens_stack_size_idx_diff_max_idx=0\n    local parens_stack_size_idx_diff_max_idx_old=0\n\
    \    local parens_stack_size_idx_diff_max_idx_new=0\n    local parens_stack_size_idx_diff_max_idx_diff=0\n\
    \    local parens_stack_size_idx_diff_max_idx_diff_old=0\n    local parens_stack_size_idx_diff_max_idx_diff_new=0\n\
    \    local parens_stack_size_idx_diff_max_idx_diff_max=0\n    local parens_stack_size_idx_diff_max_idx_diff_max_idx=0\n\
    \    local parens_stack_size_idx_diff_max_idx_diff_max_idx_old=0\n    local parens_stack_size_idx_diff_max_idx_diff_max_idx_new=0\n\
    \    local parens_stack_size_idx_diff_max_idx_diff_max_idx_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local paren_groups=($parens)\n\
    \  local paren_group\n  local paren_count\n  local paren_max\n  local paren_max_list=()\n\
    \  for paren_group in \"${paren_groups[@]}\"; do\n    paren_count=0\n    paren_max=0\n\
    \    for ((i=0; i<${#paren_group}; i++)); do\n      if [[ \"${paren_group:$i:1}\"\
    \ == \"(\" ]]; then\n        ((paren_count++))\n        ((paren_max = paren_count\
    \ > paren_max ? paren_count : paren_max))\n      elif [[ \"${paren_group:$i:1}\"\
    \ == \")\" ]]; then\n        ((paren_count--))\n      fi\n    done\n    paren_max_list+=(\"\
    $paren_max\")\n  done\n  echo \"${paren_max_list[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local curr_nesting=0\n  local i=0\n  local j=0\n  local char=''\n\
    \  local parens_arr_i=''\n  local parens_arr_j=''\n  local parens_arr_j_len=0\n\
    \  local parens_arr_j_char=''\n  local parens_arr_j_char_ascii=0\n  local parens_arr_j_char_ascii_parens_open=40\n\
    \  local parens_arr_j_char_ascii_parens_close=41\n  local parens_arr_j_char_ascii_space=32\n\
    \  local parens_arr_j_char_ascii_newline=10\n  local parens_arr_j_char_ascii_tab=9\n\
    \  local parens_arr_j_char_ascii_carriage_return=13\n  local parens_arr_j_char_ascii_backspace=8\n\
    \  local parens_arr_j_char_ascii_form_feed=12\n  local parens_arr_j_char_ascii_vertical_tab=11\n\
    \  local parens_arr_j_char_ascii_null=0\n  local parens_arr_j_char_ascii_double_quote=34\n\
    \  local parens_arr_j_char_ascii_single_quote=39\n  local parens_arr_j_char_ascii_backslash=92\n\
    \  local parens_arr_j_char_ascii_open_bracket=91\n  local parens_arr_j_char_ascii_close_bracket=93\n\
    \  local parens_arr_j_char_ascii_open_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local parens_regex='\\\
    ([^()]*\\)'\n  local parens_regex_escaped=$(echo $parens_regex | sed 's/[]\\/$*.^|[]/\\\
    \\&/g')\n  local max_nested_parens=0\n  local max_nested_parens_str=''\n  local\
    \ curr_nested_parens=0\n  local curr_nested_parens_str=''\n  local curr_str=''\n\
    \  local curr_str_escaped=''\n  local curr_str_len=0\n  local curr_str_len_escaped=0\n\
    \  local curr_str_len_escaped_parens=0\n  local curr_str_len_escaped_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens=0\n  local curr_str_len_escaped_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens=0\n  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens=0\n\
    \  local curr_str_len_escaped_parens_parens_parens_parens_parens_parens_parens_parens_parens_parens_paren\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_str_len=${#parens_str}\n\
    \  local parens_str_arr=()\n  local parens_str_arr_idx=0\n  local parens_str_arr_len=0\n\
    \  local parens_str_arr_max_len=0\n  local parens_str_arr_max_len_idx=0\n  local\
    \ parens_str_arr_max_len_val=0\n  local parens_str_arr_max_len_val_arr=()\n  local\
    \ parens_str_arr_max_len_val_arr_idx=0\n  local parens_str_arr_max_len_val_arr_len=0\n\
    \  local parens_str_arr_max_len_val_arr_max_len=0\n  local parens_str_arr_max_len_val_arr_max_len_idx=0\n\
    \  local parens_str_arr_max_len_val_arr_max_len_val=0\n  local parens_str_arr_max_len_val_arr_max_len_val_arr=()\n\
    \  local parens_str_arr_max_len_val_arr_max_len_val_arr_idx=0\n  local parens_str_arr_max_len_val_arr_max_len_val_arr_len=0\n\
    \  local parens_str_arr_max_len_val_arr_max_len_val_arr_max_len=0\n  local parens_str_arr_max_len_val_arr_max_len_val_arr_max_len_idx=0\n\
    \  local parens_str_arr_max_len_val_arr_max_len_val_arr_max_len_val=0\n  local\
    \ parens_str_arr_max_len_val_arr_max_len_val_arr_max_len_val_arr=()\n  local parens_str_arr_max_len_val_arr_max_len\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char\n  local i\n\
    \n  for ((i=0; i<${#input}; i++)); do\n    current_char=${input:$i:1}\n    if\
    \ [[ $current_char == \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth\
    \ > max_depth)); then\n        max_depth=$current_depth\n      fi\n    elif [[\
    \ $current_char == \")\" ]]; then\n      ((current_depth--))\n    elif [[ $current_char\
    \ == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n     \
    \ current_depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_level\")\n      max_level=0\n   \
    \   level=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_level\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#str}\n  local\
    \ c\n  while [ $i -lt $len ]; do\n    c=${str:$i:1}\n    if [ \"$c\" == \"(\"\
    \ ]; then\n      ((level++))\n      ((max_level = level > max_level ? level :\
    \ max_level))\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif\
    \ [ \"$c\" == \" \" ]; then\n      result+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n    ((i++))\n  done\n  result+=(\"$max_level\")\n  echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c\n  for ((i=0; i<${#parens};\
    \ i++)); do\n    c=\"${parens:$i:1}\"\n    if [[ \"$c\" == \"(\" ]]; then\n  \
    \    ((level++))\n      if ((level > max_level)); then\n        max_level=$level\n\
    \      fi\n    elif [[ \"$c\" == \")\" ]]; then\n      ((level--))\n    fi\n \
    \   if [[ \"$c\" == \" \" ]]; then\n      result+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  result+=(\"$max_level\")\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local c=${input:$i:1}\n        if [ \"\
    $c\" == \"(\" ]; then\n            level=$((level+1))\n            if [ $level\
    \ -gt $max_level ]; then\n                max_level=$level\n            fi\n \
    \       elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n     \
    \   elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_level\")\n   \
    \         max_level=0\n            level=0\n        fi\n        i=$((i+1))\n \
    \   done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local result=()\n\
    \    local max_depth=0\n    local cur_depth=0\n    local cur_paren=0\n    local\
    \ cur_paren_str=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt\
    \ $len ]; do\n        local char=${str:$i:1}\n        if [ \"$char\" == \"(\"\
    \ ]; then\n            cur_depth=$((cur_depth+1))\n            if [ $cur_depth\
    \ -gt $max_depth ]; then\n                max_depth=$cur_depth\n            fi\n\
    \        elif [ \"$char\" == \")\" ]; then\n            cur_depth=$((cur_depth-1))\n\
    \        fi\n        cur_paren_str=\"$cur_paren_str$char\"\n        if [ \"$char\"\
    \ == \" \" ]; then\n            result[$cur_paren]=\"$max_depth\"\n          \
    \  max_depth=0\n            cur_depth=0\n            cur_paren=$((cur_paren+1))\n\
    \            cur_paren_str=\"\"\n        fi\n        i=$((i+1))\n    done\n  \
    \  result[$cur_paren]=\"$max_depth\"\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      level=$((level+1))\n      if [ $level -gt $max_level ]; then\n \
    \       max_level=$level\n      fi\n    elif [ \"$c\" == \")\" ]; then\n     \
    \ level=$((level-1))\n    elif [ \"$c\" == \" \" ]; then\n      result+=(\"$max_level\"\
    )\n      max_level=0\n      level=0\n    fi\n    i=$((i+1))\n  done\n  result+=(\"\
    $max_level\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    # TODO: implement this function\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    fi\n   \
    \ ((i++))\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=\"$1\"\n    local\
    \ parens_arr=($parens_str)\n    local parens_arr_len=${#parens_arr[@]}\n    local\
    \ parens_arr_idx=0\n    local parens_arr_idx_max=$((parens_arr_len - 1))\n   \
    \ local parens_arr_idx_curr=0\n    local parens_arr_idx_next=0\n    local parens_arr_idx_prev=0\n\
    \    local parens_arr_idx_prev_prev=0\n    local parens_arr_idx_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev=0\n    local parens_arr_idx_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev=0\n    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local paren\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    # TODO: Implement this function\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local -a arr\n \
    \   local -a result\n    local -i i=0\n    local -i max_depth=0\n    local -i\
    \ depth=0\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i\
    \ l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n \
    \   local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n \
    \   local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n \
    \   local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n \
    \   local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n \
    \   local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n \
    \   local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n\
    \    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n\
    \    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n\
    \    local -i jjj=0\n    local -i kkk=0\n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item\n\
    \  local parens_arr_item_len\n  local parens_arr_item_idx\n  local parens_arr_item_char\n\
    \  local parens_arr_item_char_prev\n  local parens_arr_item_char_next\n  local\
    \ parens_arr_item_char_prev_idx\n  local parens_arr_item_char_next_idx\n  local\
    \ parens_arr_item_char_prev_char\n  local parens_arr_item_char_next_char\n  local\
    \ parens_arr_item_char_prev_char_prev\n  local parens_arr_item_char_next_char_next\n\
    \  local parens_arr_item_char_prev_char_prev_idx\n  local parens_arr_item_char_next_char_next_idx\n\
    \  local parens_arr_item_char_prev_char_prev_char\n  local parens_arr_item_char_next_char_next_char\n\
    \  local parens_arr_item_char_prev_char_prev_char_prev\n  local parens_arr_item_char_next_char_next_char_next\n\
    \  local parens_arr_item_char_prev_char_prev_char_prev_idx\n  local parens_arr_item_char_next_char_next_char_next_idx\n\
    \  local parens_arr_item_char_prev_char_prev_char_prev_char\n  local parens_arr_item_char_next_char_next_char_next_char\n\
    \  local parens_arr_item_char_prev_char_prev_char_prev_char_prev\n  local parens_arr_item_char_next_char_next_char_next_char_next\n\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local i=0\n  local c=''\n\
    \  local len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n   \
    \ if [ \"$c\" == \"(\" ]; then\n      current_nesting=$((current_nesting + 1))\n\
    \      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_nesting=$((current_nesting\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"$max_nesting\")\n\
    \      max_nesting=0\n      current_nesting=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n \
    \   parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_depth=0\n\
    \    local curr_depth=0\n    local max_depth_str=\"\"\n    local curr_depth_str=\"\
    \"\n    local max_depth_str_arr=()\n    local curr_depth_str_arr=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n\
    \    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_next_\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_nesting=0\n    local curr_nesting=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        if [ \"${input:$i:1}\" == \"(\" ]; then\n\
    \            ((curr_nesting++))\n            if [ $curr_nesting -gt $max_nesting\
    \ ]; then\n                max_nesting=$curr_nesting\n            fi\n       \
    \ elif [ \"${input:$i:1}\" == \")\" ]; then\n            ((curr_nesting--))\n\
    \        elif [ \"${input:$i:1}\" == \" \" ]; then\n            output+=(\"\\\"\
    $max_nesting\\\"\")\n            max_nesting=0\n            curr_nesting=0\n \
    \       fi\n        ((i++))\n    done\n    output+=(\"\\\"$max_nesting\\\"\")\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a parens_array\n  local -a parens_depth\n\
    \  local -a parens_max_depth\n  local -a parens_max_depth_index\n  local -a parens_max_depth_index_array\n\
    \  local -a parens_max_depth_index_array_string\n  local -a parens_max_depth_index_array_string_array\n\
    \  local -a parens_max_depth_index_array_string_array_string\n  local -a parens_max_depth_index_array_string_array_string_array\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string\n  local\
    \ -a parens_max_depth_index_array_string_array_string_array_string_array\n  local\
    \ -a parens_max_depth_index_array_string_array_string_array_string_array_string\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string_array_string_array_string\n\
    \  local -a parens_max_depth_index_array_string_array_string_array_string_array_string_array_string_array_string_array_string_array\n\
    \  local -a parens_max_depth_index_array\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local group\n  local\
    \ max_level\n  local level\n  local char\n  local result=()\n  for group in $input;\
    \ do\n    max_level=0\n    level=0\n    for ((i=0; i<${#group}; i++)); do\n  \
    \    char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n        ((level++))\n\
    \        if ((level > max_level)); then\n          max_level=$level\n        fi\n\
    \      elif [[ $char == \")\" ]]; then\n        ((level--))\n      fi\n    done\n\
    \    result+=(\"\\\"$max_level\\\"\")\n  done\n  echo \"[${result[@]}]\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local len=${#input}\n\
    \    local char\n    while [ $i -lt $len ]; do\n        char=${input:$i:1}\n \
    \       if [ \"$char\" == \"(\" ]; then\n            ((depth++))\n           \
    \ if [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n     \
    \       fi\n        elif [ \"$char\" == \")\" ]; then\n            ((depth--))\n\
    \        fi\n        ((i++))\n    done\n    output+=(\"\\\"$max_depth\\\"\")\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a arr=()\n  local -a result=()\n\
    \  local str=$1\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ max=0\n  local temp=0\n  local temp_str=\"\"\n  local temp_str2=\"\"\n  local\
    \ temp_str3=\"\"\n  local temp_str4=\"\"\n  local temp_str5=\"\"\n  local temp_str6=\"\
    \"\n  local temp_str7=\"\"\n  local temp_str8=\"\"\n  local temp_str9=\"\"\n \
    \ local temp_str10=\"\"\n  local temp_str11=\"\"\n  local temp_str12=\"\"\n  local\
    \ temp_str13=\"\"\n  local temp_str14=\"\"\n  local temp_str15=\"\"\n  local temp_str16=\"\
    \"\n  local temp_str17=\"\"\n  local temp_str18=\"\"\n  local temp_str19=\"\"\n\
    \  local temp_str20=\"\"\n  local temp_str21=\"\"\n  local temp_str22=\"\"\n \
    \ local temp_str23=\"\"\n  local temp_str24=\"\"\n  local temp_str25=\"\"\n  local\
    \ temp_str26=\"\"\n  local temp_str27=\"\"\n  local temp_str28=\"\"\n  local temp_str29=\"\
    \"\n  local temp_str30=\"\"\n  local temp_str31=\"\"\n  local temp_str32=\"\"\n\
    \  local temp_str33=\"\"\n  local temp_str34=\"\"\n  local temp_str35=\"\"\n \
    \ local temp_str36=\"\"\n  local temp_str37=\"\"\n  local temp_str38=\"\"\n  local\
    \ temp_str39=\"\"\n  local temp_str40=\"\"\n  local temp_str41=\"\"\n  local temp_str42=\"\
    \"\n  local temp_str43=\"\"\n  local temp_str44=\"\"\n  local temp_str45=\"\"\n\
    \  local temp_str46=\"\"\n  local temp_str47=\"\"\n  local temp_str48=\"\"\n \
    \ local temp_str49=\"\"\n  local temp_str50=\"\"\n  local temp_str51=\"\"\n  local\
    \ temp_str52=\"\"\n  local temp_str53=\"\"\n  local temp_str54=\"\"\n  local temp_str55=\"\
    \"\n  local temp_str56=\"\"\n  local temp_str57\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_string=\"$1\"\n    local\
    \ parens_array=($parens_string)\n    local parens_array_len=${#parens_array[@]}\n\
    \    local max_nesting=0\n    local nesting=0\n    local i=0\n    local j=0\n\
    \    local result=()\n    for ((i=0; i<parens_array_len; i++)); do\n        local\
    \ parens_group=\"${parens_array[$i]}\"\n        local parens_group_len=${#parens_group}\n\
    \        for ((j=0; j<parens_group_len; j++)); do\n            local parens_char=\"\
    ${parens_group:$j:1}\"\n            if [[ \"$parens_char\" == \"(\" ]]; then\n\
    \                nesting=$((nesting+1))\n                if [[ \"$nesting\" -gt\
    \ \"$max_nesting\" ]]; then\n                    max_nesting=$nesting\n      \
    \          fi\n            elif [[ \"$parens_char\" == \")\" ]]; then\n      \
    \          nesting=$((nesting-1))\n            fi\n        done\n        result+=(\"\
    $max_nesting\")\n        max_nesting=0\n        nesting=0\n    done\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n\n  for (( i=0; i<${#input};\
    \ i++ )); do\n    char=\"${input:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n\
    \      (( depth++ ))\n      (( max_depth = depth > max_depth ? depth : max_depth\
    \ ))\n    elif [[ \"$char\" == \")\" ]]; then\n      (( depth-- ))\n    elif [[\
    \ \"$char\" == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local i=0\n  local len=${#input}\n\
    \  local char=''\n  local char_code=0\n  local output_str=''\n\n  for ((i=0; i<len;\
    \ i++)); do\n    char=${input:$i:1}\n    char_code=$(printf '%d' \"'$char\")\n\
    \    if [[ $char_code -eq 40 ]]; then\n      ((current_nesting++))\n      if [[\
    \ $current_nesting -gt $max_nesting ]]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [[ $char_code -eq 41 ]]; then\n      ((current_nesting--))\n\
    \    elif [[ $char_code -eq 32 ]]; then\n      output+=(\"\\\"$max_nesting\\\"\
    \")\n      max_nesting=0\n      current_nesting=0\n    fi\n  done\n  output+=(\"\
    \\\"$max_nesting\\\"\")\n  output_str=$(printf '%s,' \"${output[@]}\")\n  echo\
    \ \"[${output_str%,}]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local result=\"\"\
    \n    local max_level=0\n    local level=0\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [ \"$c\"\
    \ == \"(\" ]; then\n            level=$((level+1))\n            if [ $level -gt\
    \ $max_level ]; then\n                max_level=$level\n            fi\n     \
    \   elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $max_level\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i\n  for ((i=0; i<${#input}; i++));\
    \ do\n    local c=\"${input:$i:1}\"\n    if [[ \"$c\" == \"(\" ]]; then\n    \
    \  ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"$c\" == \")\" ]]; then\n      ((depth--))\n    elif [[\
    \ \"$c\" == \" \" ]]; then\n      output+=(\"\\\"$max_depth\\\"\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"\\\"$max_depth\\\"\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_arr_idx=0\n  local parens_str_len=0\n\
    \  local parens_str_idx=0\n  local parens_str_char=\"\"\n  local parens_str_char_prev=\"\
    \"\n  local parens_str_char_next=\"\"\n  local parens_str_char_next_next=\"\"\n\
    \  local parens_str_char_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local\
    \ parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=\"\
    \"\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local result=()\n  for parens in \"${parens_array[@]}\"; do\n    local parens_stack=()\n\
    \    local max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#parens}; i++));\
    \ do\n      local char=${parens:$i:1}\n      if [[ $char == \"(\" ]]; then\n \
    \       parens_stack+=(\"$char\")\n        nesting=$((nesting+1))\n        if\
    \ [[ $nesting -gt $max_nesting ]]; then\n          max_nesting=$nesting\n    \
    \    fi\n      elif [[ $char == \")\" ]]; then\n        if [[ ${#parens_stack[@]}\
    \ -eq 0 ]]; then\n          echo \"Invalid parentheses string: $parens\"\n   \
    \       return 1\n        fi\n        parens_stack=(\"${parens_stack[@]:0:$((${#parens_stack[@]}-1))}\"\
    )\n        nesting=$((nesting-1))\n      else\n        echo \"Invalid parentheses\
    \ string: $parens\"\n        return 1\n      fi\n    done\n    if [[ ${#parens_stack[@]}\
    \ -ne 0 ]]; then\n      echo \"Invalid parentheses string: $parens\"\n      return\
    \ 1\n    fi\n    result+=(\"$max_nesting\")\n  done\n  echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_nesting=0\n\
    \    local current_nesting=0\n    local result=\"\"\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((current_nesting++))\n\
    \            if ((current_nesting > max_nesting)); then\n                max_nesting=$current_nesting\n\
    \            fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n          \
    \  ((current_nesting--))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n \
    \           result+=\"\\\"$max_nesting\\\" \"\n            max_nesting=0\n   \
    \         current_nesting=0\n        fi\n    done\n    result+=\"\\\"$max_nesting\\\
    \"\"\n    echo $result\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local result=\"\"\n    local paren_level=0\n\
    \    local paren_level_str=\"\"\n    local paren_level_str_list=()\n    local\
    \ paren_level_str_list_str=\"\"\n    local i=0\n    local c=\"\"\n\n    for ((i=0;\
    \ i<${#str}; i++)); do\n        c=${str:$i:1}\n        if [[ $c == \"(\" ]]; then\n\
    \            ((paren_count++))\n            ((paren_level++))\n            if\
    \ ((paren_count > max_paren_count)); then\n                max_paren_count=$paren_count\n\
    \            fi\n        elif [[ $c == \")\" ]]; then\n            ((paren_count--))\n\
    \            ((paren_level--))\n        elif [[ $c == \" \" ]]; then\n       \
    \     paren_level_str_list+=($paren_level)\n            paren_level=0\n      \
    \  fi\n    done\n    paren_level_str_list+=($paren_level)\n\n    paren_level_str_list_str=$(printf\
    \ '\"%s\" ' \"${paren_level_str_list[@]}\")\n    echo \"[${paren_level_str_list_str}]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\
    \  local char=\"\"\n  local group=\"\"\n  local group_count=0\n  local group_max_paren_count=0\n\
    \  local group_result=\"\"\n  local group_i=0\n  local group_len=0\n  local group_char=\"\
    \"\n  local group_paren_count=0\n  local group_max_paren_count=0\n  local group_result=\"\
    \"\n  local group_i=0\n  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n\
    \  local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group_len=0\n  local group_char=\"\"\n  local group_paren_count=0\n \
    \ local group_max_paren_count=0\n  local group_result=\"\"\n  local group_i=0\n\
    \  local group\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input_str=\"$1\"\n  local output_str=\"\
    \"\n  local max_level=0\n  local level=0\n  local paren_count=0\n  local i=0\n\
    \  local len=${#input_str}\n  while [ $i -lt $len ]; do\n    local char=${input_str:$i:1}\n\
    \    if [ \"$char\" == \"(\" ]; then\n      ((level++))\n      ((paren_count++))\n\
    \      if [ $level -gt $max_level ]; then\n        max_level=$level\n      fi\n\
    \    elif [ \"$char\" == \")\" ]; then\n      ((level--))\n      ((paren_count--))\n\
    \    elif [ \"$char\" == \" \" ]; then\n      if [ $paren_count -eq 0 ]; then\n\
    \        output_str+=\"\\\"$max_level\\\" \"\n        max_level=0\n      fi\n\
    \    fi\n    ((i++))\n  done\n  echo \"$output_str\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=\"$1\"\n    local\
    \ parens_arr=()\n    local parens_arr_len=0\n    local parens_max_nesting=0\n\
    \    local parens_max_nesting_idx=0\n    local parens_nesting=0\n    local parens_nesting_idx=0\n\
    \    local parens_nesting_arr=()\n    local parens_nesting_arr_len=0\n    local\
    \ parens_nesting_arr_str=\"\"\n    local parens_nesting_arr_str_len=0\n    local\
    \ parens_nesting_arr_str_idx=0\n    local parens_nesting_arr_str_idx_end=0\n \
    \   local parens_nesting_arr_str_idx_start=0\n    local parens_nesting_arr_str_idx_start_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev=0\n    local parens_nesting_arr_str_idx_start_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev=0\n    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local parens_nesting_arr_str_idx_start_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_parens_count\n  local parens_arr_val_parens_count_max\n\
    \  local parens_arr_val_parens_count_max_arr=()\n  local parens_arr_val_parens_count_max_arr_idx=0\n\
    \  local parens_arr_val_parens_count_max_arr_len=0\n  local parens_arr_val_parens_count_max_arr_val\n\
    \n  while [ $parens_arr_idx -lt $parens_arr_len ]; do\n    parens_arr_val=${parens_arr[$parens_arr_idx]}\n\
    \    parens_arr_val_len=${#parens_arr_val}\n    parens_arr_val_idx=0\n    parens_arr_val_parens_count=0\n\
    \    parens_arr_val_parens_count_max=0\n\n    while [ $parens_arr_val_idx -lt\
    \ $parens_arr_val_len ]; do\n      parens_arr_val_char=${parens_arr_val:$parens_arr_val_idx:1}\n\
    \      if [ \"$parens_arr_val_char\" == \"(\" ]; then\n        ((parens_arr_val_parens_count++))\n\
    \        if [ $parens_arr_val_parens_count -gt $parens_arr_val_parens_count_max\
    \ ]; then\n          parens_arr_val_parens_count_max=$parens_arr_val_parens_count\n\
    \        fi\n      elif [ \"$parens_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7ff4upp2.sh: line 50: unexpected EOF while looking for matching
    `"''

    /tmp/tmp7ff4upp2.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local -a arr=()\n\
    \    local -a result=()\n    local -i i=0\n    local -i max_depth=0\n    local\
    \ -i depth=0\n    local -i len=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n \
    \   local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n \
    \   local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n \
    \   local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n \
    \   local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n \
    \   local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n \
    \   local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n\
    \    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n\
    \    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n\
    \    local -i jjj=0\n    local -i k\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local str_len=${#str}\n\
    \    local i=0\n    local j=0\n    local max_level=0\n    local level=0\n    local\
    \ output=()\n    while [ $i -lt $str_len ]; do\n        if [ \"${str:$i:1}\" ==\
    \ \"(\" ]; then\n            level=$((level+1))\n            if [ $level -gt $max_level\
    \ ]; then\n                max_level=$level\n            fi\n        elif [ \"\
    ${str:$i:1}\" == \")\" ]; then\n            level=$((level-1))\n        fi\n \
    \       if [ \"${str:$i:1}\" == \" \" ] || [ $i -eq $((str_len-1)) ]; then\n \
    \           output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n      \
    \      level=0\n        fi\n        i=$((i+1))\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660014286
