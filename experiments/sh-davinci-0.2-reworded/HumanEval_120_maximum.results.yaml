language: sh
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[-1]}\n    local -i max_num=0\n\
    \    local -i max_index=0\n    local -i max_count=0\n    local -i max_count_index=0\n\
    \    local -i max_count_num=0\n    local -i max_count_len=0\n    local -i max_count_max_len=0\n\
    \    local -i max_count_max_num=0\n    local -i max_count_max_index=0\n    local\
    \ -i max_count_max_count=0\n    local -i max_count_max_count_index=0\n    local\
    \ -i max_count_max_count_num=0\n    local -i max_count_max_count_len=0\n    local\
    \ -i max_count_max_count_max_len=0\n    local -i max_count_max_count_max_num=0\n\
    \    local -i max_count_max_count_max_index=0\n    local -i max_count_max_count_max_count=0\n\
    \    local -i max_count_max_count_max_count_index=0\n    local -i max_count_max_count_max_count_num=0\n\
    \    local -i max_count_max_count_max_count_len=0\n    local -i max_count_max_count_max_count_max_len=0\n\
    \    local -i max_count_max_count_max_count_max_num=0\n    local -i max_count_max_count_max_count_max_index=0\n\
    \    local -i max_count_max_count_max_count_max_count=0\n    local -i max_count_max_count_max_count_max_count_index=0\n\
    \    local -i max_count_max_count_max_count_max_count_num=0\n    local\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local -i k=$2\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_idx=0\n    local -a res=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n        for ((j=1;\
    \ j<n-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n          \
    \      max=${arr[j]}\n                max_idx=$j\n            fi\n        done\n\
    \        res+=($max)\n        arr[$max_idx]=${arr[n-i-1]}\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n    local i\n\
    \    local j\n    local max\n    local max_index\n    local len=${#arr[@]}\n \
    \   for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n  \
    \      for ((j=1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n\
    \                max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        arr_max[i]=$max\n        arr[$max_index]=$((max-1))\n \
    \   done\n    echo ${arr_max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplnbhk007.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i\n    local j\n    local\
    \ temp\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           temp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           temp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a max=()\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i n=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_n=0\n\
    \    local -i max_val=0\n    local -i val=0\n    local -i len=0\n    local -i\
    \ len_max=0\n    local -i len_arr=0\n    local -i len_max_arr=0\n    local -i\
    \ len_max_arr_max=0\n    local -i len_max_arr_max_max=0\n    local -i len_max_arr_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max=0\n    local -i len_max_arr_max_max_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max_max_max=0\n    local -i len_max_arr_max_max_max_max_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max_max_max_max_max=0\n    local -i len_max_arr_max_max_max_max_max_max_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max_max_max_max_max_max_max=0\n    local\
    \ -i len_max_arr_max_max_max_max_max_max_max_max_max_max_max=0\n    local -i len_max_arr_max_max_max_max_max_max_max_max_max_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max_max_max_max_max_max_max_max_max_max=0\n\
    \    local -i len_max_arr_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\")\n    local len=${#arr[@]}\n\
    \    local i\n    local j\n    local tmp\n    for ((i=0; i<len; i++)); do\n  \
    \      for ((j=i+1; j<len; j++)); do\n            if ((${arr[i]} < ${arr[j]}));\
    \ then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n    \
    \            arr[j]=$tmp\n            fi\n        done\n    done\n    echo \"\
    ${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i len=0\n    local -i max_len=0\n\
    \    local -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i\
    \ max_n=0\n    local -i max_m=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local\
    \ -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local\
    \ -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local\
    \ -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local\
    \ -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local\
    \ -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n    local -i max_len=0\n\
    \    local -i max_len=0\n    local -i\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_idx\n    local -i tmp\n    local -i len\n    local -i start\n    local -i\
    \ end\n    local -i mid\n    local -i mid_val\n    local -i mid_val_idx\n    local\
    \ -i mid_val_idx_2\n    local -i mid_val_2\n    local -i mid_val_idx_3\n    local\
    \ -i mid_val_3\n    local -i mid_val_idx_4\n    local -i mid_val_4\n    local\
    \ -i mid_val_idx_5\n    local -i mid_val_5\n    local -i mid_val_idx_6\n    local\
    \ -i mid_val_6\n    local -i mid_val_idx_7\n    local -i mid_val_7\n    local\
    \ -i mid_val_idx_8\n    local -i mid_val_8\n    local -i mid_val_idx_9\n    local\
    \ -i mid_val_9\n    local -i mid_val_idx_10\n    local -i mid_val_10\n    local\
    \ -i mid_val_idx_11\n    local -i mid_val_11\n    local -i mid_val_idx_12\n  \
    \  local -i mid_val_12\n    local -i mid_val_idx_13\n    local -i mid_val_13\n\
    \    local -i mid_val_idx_14\n    local -i mid_val_14\n    local -i mid_val_idx_15\n\
    \    local -i mid_val_15\n    local -i mid_val_idx_16\n    local -i mid_val_16\n\
    \    local -i mid_val_idx_17\n    local -i mid_val_17\n    local -i mid_val_idx_18\n\
    \    local -i mid_val_18\n    local -i mid_val_idx_19\n    local -i mid_val_19\n\
    \    local -i mid_val_id\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i maxlen=0\n    local -i maxidx=0\n \
    \   local -i maxval=0\n    local -i val=0\n    local -i tmp=0\n    local -i idx=0\n\
    \    local -i cnt=0\n    local -i num=0\n    local -i num2=0\n    local -i num3=0\n\
    \    local -i num4=0\n    local -i num5=0\n    local -i num6=0\n    local -i num7=0\n\
    \    local -i num8=0\n    local -i num9=0\n    local -i num10=0\n    local -i\
    \ num11=0\n    local -i num12=0\n    local -i num13=0\n    local -i num14=0\n\
    \    local -i num15=0\n    local -i num16=0\n    local -i num17=0\n    local -i\
    \ num18=0\n    local -i num19=0\n    local -i num20=0\n    local -i num21=0\n\
    \    local -i num22=0\n    local -i num23=0\n    local -i num24=0\n    local -i\
    \ num25=0\n    local -i num26=0\n    local -i num27=0\n    local -i num28=0\n\
    \    local -i num29=0\n    local -i num30=0\n    local -i num31=0\n    local -i\
    \ num32=0\n    local -i num33=0\n    local -i num34=0\n    local -i num35=0\n\
    \    local -i num36=0\n    local -i num37=0\n    local -i num38=0\n    local -i\
    \ num39=0\n    local -i num40=0\n    local -i num41=0\n    local -i num42=0\n\
    \    local -i num43=0\n    local -i num44=0\n\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -a result=()\n    local i=0\n    local k=${arr[-1]}\n\
    \    local len=${#arr[@]}\n    for ((i=0; i<len-1; i++)); do\n        local j=0\n\
    \        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=\"\
    \\\"${max[i]}\\\"\"\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppfdgox32.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmppfdgox32.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    /tmp/tmppfdgox32.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           temp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local result=()\n    local i=0\n    local j=0\n    local\
    \ len=0\n    local max=0\n    local max_index=0\n    local tmp=0\n    local tmp_index=0\n\
    \    local tmp_arr=()\n    local tmp_arr_len=0\n    local tmp_arr_max=0\n    local\
    \ tmp_arr_max_index=0\n    local tmp_arr_tmp=0\n    local tmp_arr_tmp_index=0\n\
    \    local tmp_arr_tmp_arr=()\n    local tmp_arr_tmp_arr_len=0\n    local tmp_arr_tmp_arr_max=0\n\
    \    local tmp_arr_tmp_arr_max_index=0\n    local tmp_arr_tmp_arr_tmp=0\n    local\
    \ tmp_arr_tmp_arr_tmp_index=0\n    local tmp_arr_tmp_arr_tmp_arr=()\n    local\
    \ tmp_arr_tmp_arr_tmp_arr_len=0\n    local tmp_arr_tmp_arr_tmp_arr_max=0\n   \
    \ local tmp_arr_tmp_arr_tmp_arr_max_index=0\n    local tmp_arr_tmp_arr_tmp_arr_tmp=0\n\
    \    local tmp_arr_tmp_arr_tmp_arr_tmp_index=0\n    local tmp_arr_tmp_arr_tmp_arr_tmp_arr=()\n\
    \    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_len=0\n    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_max=0\n\
    \    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_max_index=0\n    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_tmp=0\n\
    \    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_tmp_index=0\n    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_tmp_arr=()\n\
    \    local tmp_arr_tmp_arr_tmp_arr_tmp_arr_tmp_arr_len=0\n   \n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    for ((i=0; i<k; i++)); do\n     \
    \   local max=${arr[0]}\n        local max_index=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result+=($max)\n\
    \        unset arr[$max_index]\n        arr=(${arr[@]})\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[0]}\n        for ((j=1; j<${#arr[@]}; j++)); do\n        \
    \    if [[ ${arr[j]} -gt ${result[i]} ]]; then\n                result[i]=${arr[j]}\n\
    \                unset arr[j]\n            fi\n        done\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a res\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        local max=${arr[0]}\n        local max_i=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if ((${arr[j]} > max)); then\n                max=${arr[j]}\n\
    \                max_i=$j\n            fi\n        done\n        res[i]=$max\n\
    \        unset arr[$max_i]\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd628nzjh.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ n=${#arr[@]}\n    local max_len=${arr[$((n-1))]}\n    for ((i=0; i<n; i++));\
    \ do\n        if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n            max[$j]=${arr[$i]}\n\
    \            j=$((j+1))\n        fi\n        if [[ $j -eq $max_len ]]; then\n\
    \            j=0\n            for ((k=0; k<max_len; k++)); do\n              \
    \  if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n                    max[$j]=${arr[$i]}\n\
    \                fi\n                j=$((j+1))\n            done\n        fi\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf2bp7ama.sh: line 29: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i j k\n    local -i len=${#1}\n    local -i max\n    local -i max_index\n\
    \    local -i max_count=0\n    local -i max_count_index=0\n    local -i max_count_value\n\
    \    local -i max_count_value_index=0\n    local -i max_count_value_count=0\n\
    \    local -i max_count_value_count_index=0\n    local -i max_count_value_count_value\n\
    \    local -i max_count_value_count_value_index=0\n    local -i max_count_value_count_value_count=0\n\
    \    local -i max_count_value_count_value_count_index=0\n    local -i max_count_value_count_value_count_value\n\
    \    local -i max_count_value_count_value_count_value_index=0\n    local -i max_count_value_count_value_count_value_count=0\n\
    \    local -i max_count_value_count_value_count_value_count_index=0\n    local\
    \ -i max_count_value_count_value_count_value_count_value\n    local -i max_count_value_count_value_count_value_count_value_index=0\n\
    \    local -i max_count_value_count_value_count_value_count_value_count=0\n  \
    \  local -i max_count_value_count_value_count_value_count_value_count_index=0\n\
    \    local -i max_count_value_count_value_count_value_count_value_count_value\n\
    \    local -i max_count_value_count_value_count_value_count_value_count_value_index=0\n\
    \    local -i max_count_value_count_value_count_value_count_value_count_value_count=0\n\
    \    local -i max_count_value_count_value_count_value_count_value_count_value_count_index=0\n\
    \    local -i max_count_value_count_value_count_value_count_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr\n   \
    \ IFS=' ' read -r -a arr <<< \"$1\"\n    local len=${#arr[@]}\n    local k=$2\n\
    \    local i\n    local j\n    local tmp\n    for ((i=0; i<len; i++)); do\n  \
    \      for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]}\
    \ ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        echo -n \"\\\"${arr[i]}\\\" \"\n    done\n  \
    \  echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[$len-1]}\n    local -i\
    \ tmp=0\n    local -i tmp_len=0\n    local -i tmp_max=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_idx=0\n    local -i tmp_len_idx=0\n\
    \    local -i tmp_idx=0\n    local -i tmp_max_idx=0\n    local -i tmp_max_len_idx=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i\
    \ tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i\
    \ tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i\
    \ tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i\
    \ tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_idx=0\n\
    \    local -i tmp_max_len_idx=0\n    local -\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i flag\n    local -i flag2\n    local -i\
    \ flag3\n    local -i flag4\n    local -i flag5\n    local -i flag6\n    local\
    \ -i flag7\n    local -i flag8\n    local -i flag9\n    local -i flag10\n    local\
    \ -i flag11\n    local -i flag12\n    local -i flag13\n    local -i flag14\n \
    \   local -i flag15\n    local -i flag16\n    local -i flag17\n    local -i flag18\n\
    \    local -i flag19\n    local -i flag20\n    local -i flag21\n    local -i flag22\n\
    \    local -i flag23\n    local -i flag24\n    local -i flag25\n    local -i flag26\n\
    \    local -i flag27\n    local -i flag28\n    local -i flag29\n    local -i flag30\n\
    \    local -i flag31\n    local -i flag32\n    local -i flag33\n    local -i flag34\n\
    \    local -i flag35\n    local -i flag36\n    local -i flag37\n    local -i flag38\n\
    \    local -i flag39\n    local -i flag40\n    local -i flag41\n    local -i flag42\n\
    \    local -i flag43\n    local -i flag44\n    local -i flag45\n    local -i flag46\n\
    \    local -i flag47\n    local -i flag48\n    local -i flag49\n    local -i flag50\n\
    \    local -i flag51\n    local -i flag52\n    local -i flag53\n    local -i flag54\n\
    \    local -i flag55\n    local -i flag56\n    local -i flag57\n    local -i flag58\n\
    \    local -i flag59\n    local -i flag60\n    local -i flag61\n    local -i flag62\n\
    \    local -i flag63\n    local -\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max_arr=()\n    local -i max_idx=0\n    local -i max_val=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n\
    \    local -i k_val=${arr[$2]}\n    local -i k_idx=$2\n    local -i tmp_val=0\n\
    \    local -i tmp_idx=0\n    local -i tmp_idx_2=0\n    local -i tmp_val_2=0\n\
    \    local -i tmp_idx_3=0\n    local -i tmp_val_3=0\n    local -i tmp_idx_4=0\n\
    \    local -i tmp_val_4=0\n    local -i tmp_idx_5=0\n    local -i tmp_val_5=0\n\
    \    local -i tmp_idx_6=0\n    local -i tmp_val_6=0\n    local -i tmp_idx_7=0\n\
    \    local -i tmp_val_7=0\n    local -i tmp_idx_8=0\n    local -i tmp_val_8=0\n\
    \    local -i tmp_idx_9=0\n    local -i tmp_val_9=0\n    local -i tmp_idx_10=0\n\
    \    local -i tmp_val_10=0\n    local -i tmp_idx_11=0\n    local -i tmp_val_11=0\n\
    \    local -i tmp_idx_12=0\n    local -i tmp_val_12=0\n    local -i tmp_idx_13=0\n\
    \    local -i tmp_val_13=0\n    local -i tmp_idx_14=0\n    local -i tmp_val_14=0\n\
    \    local -i tmp_idx_15=0\n    local -i tmp_val_15=0\n    local -i tmp_idx_16=0\n\
    \    local -i tmp_val_16=0\n    local -i tmp_idx_17\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a result=()\n    local -i k=\"$2\"\n    local -i i=0\n    local -i\
    \ j=0\n    local -i max=0\n    local -i max_index=0\n    local -i len=0\n    local\
    \ -i temp=0\n    local -i temp_index=0\n    local -i temp_len=0\n    local -i\
    \ temp_max=0\n    local -i temp_max_index=0\n    local -i temp_j=0\n    local\
    \ -i temp_i=0\n    local -i temp_arr_len=0\n    local -i arr_len=0\n    local\
    \ -i result_len=0\n    local -i result_max=0\n    local -i result_max_index=0\n\
    \    local -i result_j=0\n    local -i result_i=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_max=0\n    local -i result_arr_max_index=0\n    local\
    \ -i result_arr_j=0\n    local -i result_arr_i=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len=0\n    local -i result_arr_len=0\n    local -i result_arr_len=0\n\
    \    local -i result_arr_len\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_value\n\
    \    local -a max_value_index\n    local -a max_value_index_sorted\n    local\
    \ -a max_value_sorted\n    local -a max_sorted\n    local -a max_index_sorted\n\
    \    local -a max_value_index_sorted_k\n    local -a max_value_sorted_k\n    local\
    \ -a max_sorted_k\n    local -a max_index_sorted_k\n    local i\n    local j\n\
    \    local max_value_index_sorted_k_len\n    local max_value_sorted_k_len\n  \
    \  local max_sorted_k_len\n    local max_index_sorted_k_len\n    local max_value_index_sorted_k_len_minus_1\n\
    \    local max_value_sorted_k_len_minus_1\n    local max_sorted_k_len_minus_1\n\
    \    local max_index_sorted_k_len_minus_1\n    local max_value_index_sorted_k_len_minus_2\n\
    \    local max_value_sorted_k_len_minus_2\n    local max_sorted_k_len_minus_2\n\
    \    local max_index_sorted_k_len_minus_2\n    local max_value_index_sorted_k_len_minus_3\n\
    \    local max_value_sorted_k_len_minus_3\n    local max_sorted_k_len_minus_3\n\
    \    local max_index_sorted_k_len_minus_3\n    local max_value_index_sorted_k_len_minus_4\n\
    \    local max_value_sorted_k_len_minus_4\n    local max_sorted_k_len_minus_4\n\
    \    local max_index_sorted_k_len_minus_4\n    local max_value_index_sorted_k_len_minus_5\n\
    \    local max_value_sorted_k_len_minus_5\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local tmp=0\n    local res=()\n    for ((i=0; i<len; i++)); do\n\
    \        max=i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt ${arr[max]} ]]; then\n                max=j\n            fi\n        done\n\
    \        tmp=${arr[i]}\n        arr[i]=${arr[max]}\n        arr[max]=$tmp\n  \
    \  done\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n    done\n \
    \   echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result\n    local -a tmp\n    local -i i=0\n   \
    \ local -i j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n    local -i\
    \ max_index=0\n    local -i tmp_len=0\n    local -i tmp_max=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n\
    \    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n\
    \    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n\
    \    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n\
    \    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n\
    \    local -i tmp_len=0\n    local -i tmp_len=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_len=0\n    local -i tmp_len=0\n    local -i\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    local -i len\n    local -i len_arr\n    local\
    \ -i len_arr_minus_k\n    local -i len_arr_minus_k_minus_1\n    local -i len_arr_minus_k_minus_2\n\
    \    local -i len_arr_minus_k_minus_3\n    local -i len_arr_minus_k_minus_4\n\
    \    local -i len_arr_minus_k_minus_5\n    local -i len_arr_minus_k_minus_6\n\
    \    local -i len_arr_minus_k_minus_7\n    local -i len_arr_minus_k_minus_8\n\
    \    local -i len_arr_minus_k_minus_9\n    local -i len_arr_minus_k_minus_10\n\
    \    local -i len_arr_minus_k_minus_11\n    local -i len_arr_minus_k_minus_12\n\
    \    local -i len_arr_minus_k_minus_13\n    local -i len_arr_minus_k_minus_14\n\
    \    local -i len_arr_minus_k_minus_15\n    local -i len_arr_minus_k_minus_16\n\
    \    local -i len_arr_minus_k_minus_17\n    local -i len_arr_minus_k_minus_18\n\
    \    local -i len_arr_minus_k_minus_19\n    local -i len_arr_minus_k_minus_20\n\
    \    local -i len_arr_minus_k_minus_21\n    local -i len_arr_minus_k_minus_22\n\
    \    local -i len_arr_minus_k_minus_23\n    local -i len_arr_minus_k_minus_24\n\
    \    local -i len_arr_minus_k_minus_25\n    local -i len_arr_minus_k_minus_26\n\
    \    local -i len_arr_minus_k_minus_27\n    local -i len_arr_minus\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i=0\n    local -i k\n    local -i len\n    local -i max\n    local\
    \ -i max_index\n    local -i temp\n    local -i temp_index\n    local -i temp_index2\n\
    \    local -i temp_index3\n    local -i temp_index4\n    local -i temp_index5\n\
    \    local -i temp_index6\n    local -i temp_index7\n    local -i temp_index8\n\
    \    local -i temp_index9\n    local -i temp_index10\n    local -i temp_index11\n\
    \    local -i temp_index12\n    local -i temp_index13\n    local -i temp_index14\n\
    \    local -i temp_index15\n    local -i temp_index16\n    local -i temp_index17\n\
    \    local -i temp_index18\n    local -i temp_index19\n    local -i temp_index20\n\
    \    local -i temp_index21\n    local -i temp_index22\n    local -i temp_index23\n\
    \    local -i temp_index24\n    local -i temp_index25\n    local -i temp_index26\n\
    \    local -i temp_index27\n    local -i temp_index28\n    local -i temp_index29\n\
    \    local -i temp_index30\n    local -i temp_index31\n    local -i temp_index32\n\
    \    local -i temp_index33\n    local -i temp_index34\n    local -i temp_index35\n\
    \    local -i temp_index36\n    local -i temp_index37\n    local -i temp_index38\n\
    \    local -i temp_index39\n    local -i temp_index40\n    local -i temp_index41\n\
    \    local -i temp_index42\n    local -i temp_index43\n    local -i temp_index44\n\
    \    local -i temp_index45\n    local -i temp_index46\n    local -i temp_index47\n\
    \    local -i temp_index48\n    local -i temp_index49\n    local -i temp_index50\n\
    \    local -i temp_index51\n    local -i temp_index\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_value\n\
    \    local -a max_value_index\n    local -a max_value_index_sorted\n    local\
    \ -a max_value_sorted\n    local -a max_sorted\n    local -a max_index_sorted\n\
    \    local -a sorted\n    local -a sorted_index\n    local -a sorted_index_sorted\n\
    \    local -a sorted_sorted\n    local -a result\n    local i\n    local j\n \
    \   local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local aa\n    local bb\n\
    \    local cc\n    local dd\n    local ee\n    local ff\n    local gg\n    local\
    \ hh\n    local ii\n    local jj\n    local kk\n    local ll\n    local mm\n \
    \   local nn\n    local oo\n    local pp\n    local qq\n    local rr\n    local\
    \ ss\n    local tt\n    local uu\n    local vv\n    local ww\n    local xx\n \
    \   local yy\n    local zz\n    local aaa\n    local bbb\n    local ccc\n    local\
    \ ddd\n    local eee\n    local fff\n    local ggg\n    local hhh\n    local iii\n\
    \    local jjj\n    local kkk\n    local lll\n    local mmm\n    local nnn\n \
    \   local ooo\n    local ppp\n    local qqq\n    local rrr\n    local sss\n  \
    \  local ttt\n    local uuu\n    local vvv\n    local www\n    local xxx\n   \
    \ local yyy\n    local zzz\n    local aaaa\n    local bbbb\n    local cccc\n \
    \   local dddd\n    local eeee\n    local ffff\n    local gggg\n    local hhhh\n\
    \    local iiii\n    local jjjj\n    local\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_arr_len=0\n    local i\n\
    \    local j\n    local tmp\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if\
    \ [[ $max_arr_len -lt $k ]]; then\n            max_arr[$max_arr_len]=${arr[$i]}\n\
    \            ((max_arr_len++))\n        else\n            for ((j=0; j<$max_arr_len;\
    \ j++)); do\n                if [[ ${arr[$i]} -gt ${max_arr[$j]} ]]; then\n  \
    \                  tmp=${max_arr[$j]}\n                    max_arr[$j]=${arr[$i]}\n\
    \                    arr[$i]=$tmp\n                fi\n            done\n    \
    \    fi\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_num\n    local max_index\n\
    \    local i\n    local j\n    for ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n           \
    \ if [[ ${arr[j]} -gt $max_num ]]; then\n                max_num=${arr[j]}\n \
    \               max_index=$j\n            fi\n        done\n        max_arr+=($max_num)\n\
    \        unset arr[$max_index]\n        arr=(${arr[@]})\n    done\n    echo ${max_arr[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -a result=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local n=${#arr[@]}\n    local m=${arr[$((n-1))]}\n    for\
    \ ((i=0; i<n; i++)); do\n        if [[ ${arr[$i]} -gt $m ]]; then\n          \
    \  m=${arr[$i]}\n        fi\n    done\n    for ((i=0; i<n; i++)); do\n       \
    \ if [[ ${arr[$i]} -eq $m ]]; then\n            max[$j]=${arr[$i]}\n         \
    \   j=$((j+1))\n        fi\n    done\n    for ((i=0; i<n; i++)); do\n        if\
    \ [[ ${arr[$i]} -lt $m ]]; then\n            max[$j]=${arr[$i]}\n            j=$((j+1))\n\
    \        fi\n    done\n    for ((i=0; i<$2; i++)); do\n        result[$i]=${max[$i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc7kz4g4_.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpc7kz4g4_.sh: line 35: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    /tmp/tmpc7kz4g4_.sh: line 41: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ local -i i=0\n    local -i j=0\n    local -i l=${#arr[@]}\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local\
    \ -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local\
    \ -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local\
    \ -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \            max[j]=${arr[i]}\n            j=$((j+1))\n        fi\n    done\n\
    \    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmskir_in.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a res=()\n    local -i k=0\n    local -i i=0\n    local -i j=0\n \
    \   local -i max=0\n    local -i len=0\n    local -i tmp=0\n    local -i tmp_idx=0\n\
    \    local -i tmp_max=0\n    local -i tmp_len=0\n    local -i tmp_j=0\n    local\
    \ -i tmp_i=0\n    local -i tmp_k=0\n    local -i tmp_max_idx=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_j=0\n    local -i tmp_max_i=0\n    local -i tmp_max_k=0\n\
    \    local -i tmp_max_tmp=0\n    local -i tmp_max_tmp_idx=0\n    local -i tmp_max_tmp_len=0\n\
    \    local -i tmp_max_tmp_j=0\n    local -i tmp_max_tmp_i=0\n    local -i tmp_max_tmp_k=0\n\
    \    local -i tmp_max_tmp_max=0\n    local -i tmp_max_tmp_max_idx=0\n    local\
    \ -i tmp_max_tmp_max_len=0\n    local -i tmp_max_tmp_max_j=0\n    local -i tmp_max_tmp_max_i=0\n\
    \    local -i tmp_max_tmp_max_k=0\n    local -i tmp_max_tmp_max_max=0\n    local\
    \ -i tmp_max_tmp_max_max_idx=0\n    local -i tmp_max_tmp_max_max_len=0\n    local\
    \ -i tmp_max_tmp_max_max_j=0\n    local -i tmp_max_tmp_max_max_i=0\n    local\
    \ -i tmp_max_tmp_max_max_k=0\n    local -i tmp_max_tmp_max_max_max=0\n    local\
    \ -i tmp_max_tmp_max_max_max_idx=0\n   \n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result\n    local -i i j\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${result[j]}\
    \ ]]; then\n                result[j]=${arr[i]}\n                break\n     \
    \       fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_value\n\
    \    local -a max_value_index\n    local -a max_value_index_value\n    local -a\
    \ max_value_index_value_index\n    local -a max_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index\n    local -a max_value_index_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index_value_index\n    local -a\
    \ max_value_index_value_index_value_index_value_index_value\n    local -a max_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\n\
    \    local -a max_value_index_value_index_value_index_value_index_value_index_value_index_value\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_index=0\n    local temp=0\n    local result=()\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n        for\
    \ ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n \
    \               max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n\
    \        arr[max_index]=$temp\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i len=0\n  \
    \  local -i max=0\n    local -i max_index=0\n    local -i temp=0\n    local -i\
    \ temp_index=0\n    local -i temp_index_2=0\n    local -i temp_index_3=0\n   \
    \ local -i temp_index_4=0\n    local -i temp_index_5=0\n    local -i temp_index_6=0\n\
    \    local -i temp_index_7=0\n    local -i temp_index_8=0\n    local -i temp_index_9=0\n\
    \    local -i temp_index_10=0\n    local -i temp_index_11=0\n    local -i temp_index_12=0\n\
    \    local -i temp_index_13=0\n    local -i temp_index_14=0\n    local -i temp_index_15=0\n\
    \    local -i temp_index_16=0\n    local -i temp_index_17=0\n    local -i temp_index_18=0\n\
    \    local -i temp_index_19=0\n    local -i temp_index_20=0\n    local -i temp_index_21=0\n\
    \    local -i temp_index_22=0\n    local -i temp_index_23=0\n    local -i temp_index_24=0\n\
    \    local -i temp_index_25=0\n    local -i temp_index_26=0\n    local -i temp_index_27=0\n\
    \    local -i temp_index_28=0\n    local -i temp_index_29=0\n    local -i temp_index_30=0\n\
    \    local -i temp_index_31=0\n    local -i temp_index_32=0\n    local -i temp_index_33=0\n\
    \    local -i temp_index_34=0\n    local -i temp_index_35=0\n    local -i temp_index_36=0\n\
    \    local -i temp_index_37=0\n    local -\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_idx=0\n    local tmp=0\n    local tmp_idx=0\n    local\
    \ len=${#arr[@]}\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n       \
    \ max_idx=0\n        for j in $(seq 1 $((len-1))); do\n            tmp=${arr[$j]}\n\
    \            tmp_idx=$j\n            if [ $tmp -gt $max ]; then\n            \
    \    max=$tmp\n                max_idx=$tmp_idx\n            fi\n        done\n\
    \        res[$i]=$max\n        arr[$max_idx]=$((-1*$max))\n        i=$((i+1))\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ max=0\n    local max_i=0\n    local tmp=0\n    local result=()\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr[0]}\n        max_i=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_i=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[len-i-1]}\n        arr[len-i-1]=$max\n        arr[max_i]=$tmp\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max\n    local\
    \ -i i=0\n    while ((i < k)); do\n        local -i max_i=0\n        local -i\
    \ j=0\n        while ((j < ${#arr[@]})); do\n            if ((arr[j] > arr[max_i]));\
    \ then\n                max_i=$j\n            fi\n            ((j++))\n      \
    \  done\n        max[i]=${arr[max_i]}\n        unset arr[max_i]\n        ((i++))\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv62_x_wi.sh: line 30: ((: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n    local\
    \ max_arr_max_len=$k\n    local max_arr_max_len_minus_1=$((k-1))\n    local max_arr_max_len_minus_2=$((k-2))\n\
    \    local max_arr_max_len_minus_3=$((k-3))\n    local max_arr_max_len_minus_4=$((k-4))\n\
    \    local max_arr_max_len_minus_5=$((k-5))\n    local max_arr_max_len_minus_6=$((k-6))\n\
    \    local max_arr_max_len_minus_7=$((k-7))\n    local max_arr_max_len_minus_8=$((k-8))\n\
    \    local max_arr_max_len_minus_9=$((k-9))\n    local max_arr_max_len_minus_10=$((k-10))\n\
    \    local max_arr_max_len_minus_11=$((k-11))\n    local max_arr_max_len_minus_12=$((k-12))\n\
    \    local max_arr_max_len_minus_13=$((k-13))\n    local max_arr_max_len_minus_14=$((k-14))\n\
    \    local max_arr_max_len_minus_15=$((k-15))\n    local max_arr_max_len_minus_16=$((k-16))\n\
    \    local max_arr_max_len_minus_17=$((k-17))\n    local max_arr_max_len_minus_18=$((k-18))\n\
    \    local max_arr_max_len_minus_19=$((k-19))\n    local max_arr_max_len_minus_20=$((k-20))\n\
    \    local max_arr_max_len_minus_21=$((k-21))\n    local max_arr_max_len_minus_22=$((k-22))\n\
    \    local max_arr_max_len_minus_23=$((k-23))\n    local max_arr\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    local -i len\n\n    arr=($1)\n    k=$2\n  \
    \  len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n        max=${arr[i]}\n    \
    \    max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n\
    \        arr[max_index]=$tmp\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max=()\n    local -a max_indices=()\n    local i=0\n\
    \    local j=0\n    local max_index=0\n    local max_value=0\n    local arr_len=${#arr[@]}\n\
    \    local max_len=0\n    local max_indices_len=0\n    local max_indices_str=\"\
    \"\n    local max_str=\"\"\n    local max_indices_str_len=0\n    local max_str_len=0\n\
    \    local max_indices_str_len_prev=0\n    local max_str_len_prev=0\n    local\
    \ max_indices_str_len_diff=0\n    local max_str_len_diff=0\n    local max_indices_str_len_diff_prev=0\n\
    \    local max_str_len_diff_prev=0\n    local max_indices_str_len_diff_diff=0\n\
    \    local max_str_len_diff_diff=0\n    local max_indices_str_len_diff_diff_prev=0\n\
    \    local max_str_len_diff_diff_prev=0\n    local max_indices_str_len_diff_diff_diff=0\n\
    \    local max_str_len_diff_diff_diff=0\n    local max_indices_str_len_diff_diff_diff_prev=0\n\
    \    local max_str_len_diff_diff_diff_prev=0\n    local max_indices_str_len_diff_diff_diff_diff=0\n\
    \    local max_str_len_diff_diff_diff_diff=0\n    local max_indices_str_len_diff_diff_diff_diff_prev=0\n\
    \    local max_str_len_diff_diff_diff_diff_prev=0\n    local max_indices_str_len_diff_diff_diff_diff_diff=0\n\
    \    local max_str_len_diff_diff_diff_diff_diff=0\n    local max_indices_str_len_diff_diff_diff_diff_diff_prev=0\n\
    \   \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=$2\n    if [[ ${#arr[@]}\
    \ -lt $k ]]; then\n        echo \"The length of the array is less than k.\"\n\
    \        return 1\n    fi\n    local -a max\n    local -i i=0\n    local -i j=0\n\
    \    local -i max_i\n    local -i max_j\n    local -i max_val\n    while [[ $i\
    \ -lt $k ]]; do\n        max_val=${arr[0]}\n        max_i=0\n        max_j=0\n\
    \        for (( j=0; j<${#arr[@]}; j++ )); do\n            if [[ ${arr[$j]} -gt\
    \ $max_val ]]; then\n                max_val=${arr[$j]}\n                max_i=$i\n\
    \                max_j=$j\n            fi\n        done\n        max[$i]=$max_val\n\
    \        unset arr[$max_j]\n        arr=( \"${arr[@]}\" )\n        (( i++ ))\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max=()\n    local -a result=()\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    local max_len=0\n    local max_index=0\n\
    \    local max_value=0\n    while [[ $i -lt $len ]]; do\n        if [[ $max_len\
    \ -lt $k ]]; then\n            max[$max_len]=${arr[$i]}\n            max_len=$((max_len+1))\n\
    \        else\n            max_index=0\n            max_value=${max[0]}\n    \
    \        for j in $(seq 1 $((max_len-1))); do\n                if [[ ${max[$j]}\
    \ -gt $max_value ]]; then\n                    max_index=$j\n                \
    \    max_value=${max[$j]}\n                fi\n            done\n            if\
    \ [[ ${arr[$i]} -lt $max_value ]]; then\n                max[$max_index]=${arr[$i]}\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n    for i in $(seq\
    \ 0 $((max_len-1))); do\n        result[$i]=${max[$i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwvhdc5vr.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i max_len\n    local\
    \ -i max_index_len\n    local -i max_index_len_temp\n    local -i max_len_temp\n\
    \    local -i max_temp\n    local -i max_index_temp\n    local -i len_temp\n \
    \   local -i j_temp\n    local -i i_temp\n    local -i k_temp\n    local -i temp_temp\n\
    \    local -i len_temp_temp\n    local -i j_temp_temp\n    local -i i_temp_temp\n\
    \    local -i k_temp_temp\n    local -i temp_temp_temp\n    local -i len_temp_temp_temp\n\
    \    local -i j_temp_temp_temp\n    local -i i_temp_temp_temp\n    local -i k_temp_temp_temp\n\
    \    local -i temp_temp_temp_temp\n    local -i len_temp_temp_temp_temp\n    local\
    \ -i j_temp_temp_temp_temp\n    local -i i_temp_temp_temp_temp\n    local -i k_temp_temp_temp_temp\n\
    \    local -i temp_temp_temp_temp_temp\n    local -i len_temp_temp_temp_temp_temp\n\
    \    local -i j_temp_temp_temp_temp_temp\n    local -i i_temp_temp_temp_temp_temp\n\
    \    local -i k_temp_temp_temp_temp_temp\n    local -i temp_temp_temp_temp_temp_temp\n\
    \    local -i len_temp_temp_temp_temp_temp_temp\n    local -i j_temp_temp_temp_temp_temp_temp\n\
    \    local -i i_temp_temp_temp_temp_temp_temp\n    local -i k_temp_temp_temp_temp_temp_temp\n\
    \    local -i temp_temp_temp_temp_temp_temp_temp\n    local -i len_temp_temp_temp_temp\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i len_arr\n    local\
    \ -i len_arr_minus_k\n    local -i len_arr_minus_k_minus_1\n    local -i len_arr_minus_k_minus_2\n\
    \    local -i len_arr_minus_k_minus_3\n    local -i len_arr_minus_k_minus_4\n\
    \    local -i len_arr_minus_k_minus_5\n    local -i len_arr_minus_k_minus_6\n\
    \    local -i len_arr_minus_k_minus_7\n    local -i len_arr_minus_k_minus_8\n\
    \    local -i len_arr_minus_k_minus_9\n    local -i len_arr_minus_k_minus_10\n\
    \    local -i len_arr_minus_k_minus_11\n    local -i len_arr_minus_k_minus_12\n\
    \    local -i len_arr_minus_k_minus_13\n    local -i len_arr_minus_k_minus_14\n\
    \    local -i len_arr_minus_k_minus_15\n    local -i len_arr_minus_k_minus_16\n\
    \    local -i len_arr_minus_k_minus_17\n    local -i len_arr_minus_k_minus_18\n\
    \    local -i len_arr_minus_k_minus_19\n    local -i len_arr_minus_k_minus_20\n\
    \    local -i len_arr_minus_k_minus_21\n    local -i len_arr_minus_k_minus_22\n\
    \    local -i len_arr_minus_k_minus_23\n    local -i len_arr_minus_k_minus_24\n\
    \    local -i len_arr_minus_k_minus_25\n    local -i len_arr_minus_k_minus_26\n\
    \    local -i len_arr_minus_k_minus_27\n    local -i len_arr_minus\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a result\n   \
    \ for ((i=0; i<k; i++)); do\n        local -i max=${arr[0]}\n        local -i\
    \ max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n            if (( arr[j]\
    \ > max )); then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        result[i]=$max\n        unset arr[max_index]\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgeucms17.sh: line 26: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n  local -a arr=(\"\
    $@\")\n  local -a max_arr=()\n  local max_num=0\n  local max_index=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local len=${#arr[@]}\n  local max_len=$((len\
    \ - 1))\n  local k_len=$((len - 2))\n  local k_max_len=$((len - 3))\n  local k_max_index=0\n\
    \  local k_max_num=0\n  local k_max_arr=()\n  local k_max_arr_len=0\n  local k_max_arr_index=0\n\
    \  local k_max_arr_num=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max_arr_max_index=0\n  local k_max_arr_max_num=0\n\
    \  local k_max_arr_max_len=0\n  local k_max\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local tmp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]:0:$k}\"\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_index_sorted\n\
    \    local -a max_sorted\n    local i\n    local j\n    local max_index_sorted_len\n\
    \    local max_len\n    local max_index_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted_len\n\
    \    local max_sorted_len\n    local max_index_sorted_len\n    local max_sorted_len\n\
    \    local max_index_sorted_len\n    local max_sorted_len\n    local max_index_sorted\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwce7z1uz.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwce7z1uz.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -a sorted=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n   \
    \ local -i max_index=0\n    local -i temp=0\n    local -i temp_index=0\n    local\
    \ -i temp_index2=0\n    local -i temp_index3=0\n    local -i temp_index4=0\n \
    \   local -i temp_index5=0\n    local -i temp_index6=0\n    local -i temp_index7=0\n\
    \    local -i temp_index8=0\n    local -i temp_index9=0\n    local -i temp_index10=0\n\
    \    local -i temp_index11=0\n    local -i temp_index12=0\n    local -i temp_index13=0\n\
    \    local -i temp_index14=0\n    local -i temp_index15=0\n    local -i temp_index16=0\n\
    \    local -i temp_index17=0\n    local -i temp_index18=0\n    local -i temp_index19=0\n\
    \    local -i temp_index20=0\n    local -i temp_index21=0\n    local -i temp_index22=0\n\
    \    local -i temp_index23=0\n    local -i temp_index24=0\n    local -i temp_index25=0\n\
    \    local -i temp_index26=0\n    local -i temp_index27=0\n    local -i temp_index28=0\n\
    \    local -i temp_index29=0\n    local -i temp_index30=0\n    local -i temp_index31=0\n\
    \    local -i temp_index32=0\n    local -i temp_index33=0\n    local -i temp_index34=0\n\
    \    local -i temp_index35=0\n    local -i temp_index36=0\n    local -i temp_index37=0\n\
    \    local -i temp_index38=0\n    local -i temp_index\n}\n\ncandidate() {\n  \
    \  maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ max_num=0\n    local -i max_idx=0\n    local -i max_idx_tmp=0\n    local -i\
    \ max_num_tmp=0\n    local -i max_len_tmp=0\n    local -i max_len_idx=0\n    local\
    \ -i max_len_idx_tmp=0\n    local -i max_len_num=0\n    local -i max_len_num_tmp=0\n\
    \    local -i max_len_num_idx=0\n    local -i max_len_num_idx_tmp=0\n    local\
    \ -i max_len_num_idx_tmp_tmp=0\n    local -i max_len_num_idx_tmp_tmp_tmp=0\n \
    \   local -i max_len_num_idx_tmp_tmp_tmp_tmp=0\n    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i\
    \ max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_len_num_idx_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_len_num_idx_tmp_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i len=0\n    local -i max_len=0\n\
    \    local -i max_idx=0\n    local -i max_val=0\n    local -i cur_val=0\n    local\
    \ -i cur_len=0\n    local -i cur_idx=0\n    local -i cur_max_val=0\n    local\
    \ -i cur_max_idx=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n \
    \   local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    \    local -i cur_max_val=0\n    local -i cur_max_len=0\n    local -i cur_max_idx=0\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    arr=($1)\n    k=$2\n\
    \    echo \"${arr[@]}\" | tr ' ' '\\n' | sort -nr | head -n $k | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a res=()\n    local k=0\n    local i=0\n    local j=0\n    local max=0\n\
    \    local pos=0\n    local len=0\n    local tmp=0\n    arr=($1)\n    k=$2\n \
    \   len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n   \
    \     pos=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                pos=$j\n \
    \           fi\n        done\n        res[i]=$max\n        tmp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[pos]=$tmp\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_index=0\n\
    \    local max_arr_index_arr=()\n    local max_arr_index_arr_len=0\n    local\
    \ max_arr_index_arr_index=0\n    local max_arr_index_arr_index_arr=()\n    local\
    \ max_arr_index_arr_index_arr_len=0\n    local max_arr_index_arr_index_arr_index=0\n\
    \    local max_arr_index_arr_index_arr_index_arr=()\n    local max_arr_index_arr_index_arr_index_arr_len=0\n\
    \    local max_arr_index_arr_index_arr_index_arr_index=0\n    local max_arr_index_arr_index_arr_index_arr_index_arr=()\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_len=0\n    local max_arr_index_arr_index_arr_index_arr_index_arr_index=0\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr=()\n    local\
    \ max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_len=0\n    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index=0\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr=()\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_len=0\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index=0\n\
    \    local max_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr_index_arr=()\n\
    \    local max_arr_index_arr_index_arr_index\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=\"$2\"\n    if [[\
    \ \"${#arr[@]}\" -lt \"$k\" ]]; then\n        echo \"Error: k is greater than\
    \ the length of the array.\"\n        return 1\n    fi\n    if [[ \"$k\" -lt 1\
    \ ]]; then\n        echo \"Error: k must be a positive integer.\"\n        return\
    \ 1\n    fi\n    local -a result\n    local -i i\n    for ((i=0; i<k; i++)); do\n\
    \        result+=(\"${arr[i]}\")\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        local -i j\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ \"${arr[i]}\" -gt \"${result[j]}\" ]]; then\n                result[j]=\"${arr[i]}\"\
    \n                break\n            fi\n        done\n    done\n    echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i k\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++)); do\n   \
    \     echo -n '\"'${arr[i]}'\"'\n        [[ $i -lt $((k-1)) ]] && echo -n ', '\n\
    \    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i len=0\n    local -i max_len=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i max_k=0\n    local -i max_n=0\n    local -i max_m=0\n    local -i\
    \ max_p=0\n    local -i max_q=0\n    local -i max_r=0\n    local -i max_s=0\n\
    \    local -i max_t=0\n    local -i max_u=0\n    local -i max_v=0\n    local -i\
    \ max_w=0\n    local -i max_x=0\n    local -i max_y=0\n    local -i max_z=0\n\
    \    local -i max_len=0\n    local -i max_i=0\n    local -i max_j=0\n    local\
    \ -i max_k=0\n    local -i max_n=0\n    local -i max_m=0\n    local -i max_p=0\n\
    \    local -i max_q=0\n    local -i max_r=0\n    local -i max_s=0\n    local -i\
    \ max_t=0\n    local -i max_u=0\n    local -i max_v=0\n    local -i max_w=0\n\
    \    local -i max_x=0\n    local -i max_y=0\n    local -i max_z=0\n    local -i\
    \ max_len=0\n    local -i max_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[$((len-1))]}\n    local\
    \ -i tmp=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[$i]} -gt $tmp\
    \ ]]; then\n            tmp=${arr[$i]}\n        fi\n    done\n    for ((i=0; i<max_len;\
    \ i++)); do\n        max[$i]=0\n    done\n    for ((i=0; i<len; i++)); do\n  \
    \      max[${arr[$i]}]=$((max[${arr[$i]}]+1))\n    done\n    for ((i=max_len;\
    \ i>=0; i--)); do\n        for ((j=0; j<max[$i]; j++)); do\n            arr[$k]=$i\n\
    \            k=$((k+1))\n        done\n    done\n    echo \"${arr[@]:0:$2}\"\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn9c4kez3.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpn9c4kez3.sh: line 38: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i max=0\n    local -i len=${#arr[@]}\n    local\
    \ -i k=${arr[$len-1]}\n    local -i len=$((len-1))\n    local -i max=$((len-1))\n\
    \    local -i n=$((len-k))\n    for ((i=0; i<=n; i++)); do\n        max=$((len-i))\n\
    \        for ((j=0; j<=max; j++)); do\n            if [[ ${arr[$j]} -gt ${arr[$max]}\
    \ ]]; then\n                max=$j\n            fi\n        done\n        res+=(${arr[$max]})\n\
    \        arr[$max]=${arr[$len-i]}\n    done\n    echo ${res[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_index_sorted\n\
    \    local -a max_sorted\n    local -a arr_sorted\n    local -a arr_index\n  \
    \  local -a arr_index_sorted\n    local -a arr_sorted\n    local i\n    local\
    \ j\n    local temp\n    local temp_index\n    local temp_index_sorted\n    local\
    \ temp_sorted\n    local temp_sorted_index\n    local temp_sorted_index_sorted\n\
    \    local temp_sorted_sorted\n    local temp_sorted_sorted_index\n    local temp_sorted_sorted_index_sorted\n\
    \    local temp_sorted_sorted_sorted\n    local temp_sorted_sorted_sorted_index\n\
    \    local temp_sorted_sorted_sorted_index_sorted\n    local temp_sorted_sorted_sorted_sorted\n\
    \    local temp_sorted_sorted_sorted_sorted_index\n    local temp_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local temp_sorted_sorted_sorted_sorted_sorted\n    local temp_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local temp_sorted_sorted_sorted_sorted_sorted_index_sorted\n    local temp_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local temp_sorted_sorted_sorted_sorted_sorted_sorted_index\n    local temp_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local temp_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local temp_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local temp_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local temp_sorted_sorted_sorted_s\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnbz1y46c.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ max_index=0\n    local -i max_value=0\n    local -i temp_value=0\n    local\
    \ -i temp_index=0\n    local -i temp_len=0\n    local -i temp_max_len=0\n    local\
    \ -i temp_max_index=0\n    local -i temp_max_value=0\n    local -i temp_max_value_index=0\n\
    \    local -i temp_max_value_len=0\n    local -i temp_max_value_max_len=0\n  \
    \  local -i temp_max_value_max_index=0\n    local -i temp_max_value_max_value=0\n\
    \    local -i temp_max_value_max_value_index=0\n    local -i temp_max_value_max_value_len=0\n\
    \    local -i temp_max_value_max_value_max_len=0\n    local -i temp_max_value_max_value_max_index=0\n\
    \    local -i temp_max_value_max_value_max_value=0\n    local -i temp_max_value_max_value_max_value_index=0\n\
    \    local -i temp_max_value_max_value_max_value_len=0\n    local -i temp_max_value_max_value_max_value_max_len=0\n\
    \    local -i temp_max_value_max_value_max_value_max_index=0\n    local -i temp_max_value_max_value_max_value_max_value=0\n\
    \    local -i temp_max_value_max_value_max_value_max_value_index=0\n    local\
    \ -i temp_max_value_max_value_max_value_max_value_len=0\n    local -i temp_max_value_max_value\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i tmp=0\n \
    \   local -i len=0\n    local -i len_max=0\n    local -i len_min=0\n    local\
    \ -i len_mid=0\n    local -i len_mid_i=0\n    local -i len_mid_j=0\n    local\
    \ -i len_mid_max=0\n    local -i len_mid_min=0\n    local -i len_mid_max_i=0\n\
    \    local -i len_mid_max_j=0\n    local -i len_mid_min_i=0\n    local -i len_mid_min_j=0\n\
    \    local -i len_mid_max_tmp=0\n    local -i len_mid_min_tmp=0\n    local -i\
    \ len_mid_max_tmp_i=0\n    local -i len_mid_min_tmp_i=0\n    local -i len_mid_max_tmp_j=0\n\
    \    local -i len_mid_min_tmp_j=0\n    local -i len_mid_max_tmp_max=0\n    local\
    \ -i len_mid_min_tmp_min=0\n    local -i len_mid_max_tmp_max_i=0\n    local -i\
    \ len_mid_min_tmp_min_i=0\n    local -i len_mid_max_tmp_max_j=0\n    local -i\
    \ len_mid_min_tmp_min_j=0\n    local -i len_mid_max_tmp_max_tmp=0\n    local -i\
    \ len_mid_min_tmp_min_tmp=0\n    local -i len_mid_max_tmp_max_tmp_i=0\n    local\
    \ -i len_mid_min_tmp_min_tmp_i=0\n    local -i len_mid_max_tmp_max_tmp_j=0\n \
    \  \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i m=0\n    local -i t=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i u=0\n    local -i l=0\n    local -i o=0\n    local -i max=0\n\
    \    local -i min=0\n    local -i sum=0\n    local -i avg=0\n    local -i len=0\n\
    \    local -i mid=0\n    local -i idx=0\n    local -i cnt=0\n    local -i num=0\n\
    \    local -i tmp=0\n    local -i tmp1=0\n    local -i tmp2=0\n    local -i tmp3=0\n\
    \    local -i tmp4=0\n    local -i tmp5=0\n    local -i tmp6=0\n    local -i tmp7=0\n\
    \    local -i tmp8=0\n    local -i tmp9=0\n    local -i tmp10=0\n    local -i\
    \ tmp11=0\n    local -i tmp12=0\n    local -i tmp13=0\n    local -i tmp14=0\n\
    \    local -i tmp15=0\n    local -i tmp16=0\n    local -i tmp17=0\n    local -i\
    \ tmp18=0\n    local -i tmp19=0\n    local -i tmp20=0\n    local -i tmp21=0\n\
    \    local -i tmp22=0\n    local -i tmp23=0\n    local -i tmp24\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i len=${#arr[@]}\n    local -i temp=0\n    local -i max=0\n    local\
    \ -i max_index=0\n    local -i count=0\n    for ((i=0; i<len; i++)); do\n    \
    \    max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n        result[count]=${arr[i]}\n\
    \        ((count++))\n        if [[ $count -eq $k ]]; then\n            break\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -i i\n    local -i j\n    local -i k\n    local\
    \ -i len=${#arr[@]}\n    local -i max_len=${arr[$len-1]}\n    local -i max_i\n\
    \    local -i max_j\n    local -i max_k\n    local -i max_len_i\n    local -i\
    \ max_len_j\n    local -i max_len_k\n    local -i max_len_len\n    local -i max_len_max_len\n\
    \    local -i max_len_max_i\n    local -i max_len_max_j\n    local -i max_len_max_k\n\
    \    local -i max_len_max_len\n    local -i max_len_max_len_i\n    local -i max_len_max_len_j\n\
    \    local -i max_len_max_len_k\n    local -i max_len_max_len_len\n    local -i\
    \ max_len_max_len_max_len\n    local -i max_len_max_len_max_i\n    local -i max_len_max_len_max_j\n\
    \    local -i max_len_max_len_max_k\n    local -i max_len_max_len_max_len\n  \
    \  local -i max_len_max_len_max_len_i\n    local -i max_len_max_len_max_len_j\n\
    \    local -i max_len_max_len_max_len_k\n    local -i max_len_max_len_max_len_len\n\
    \    local -i max_len_max_len_max_len_max_len\n    local -i max_len_max_len_max_len_max_i\n\
    \    local -i max_len_max_len_max_len_max_j\n    local -i max_len_max_len_max_len_max_k\n\
    \    local -i max_len_max_len_max_len_max_len\n    local -i max_len_max_len_max_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    arr=($1)\n    local k=$2\n    local -a max\n    local -a max_index\n    local\
    \ -a max_index_sorted\n    local -a max_sorted\n    local -a arr_sorted\n    local\
    \ -a arr_index\n    local -a arr_index_sorted\n    local -a arr_sorted\n    local\
    \ -a arr_sorted_index\n    local -a arr_sorted_index_sorted\n    local -a arr_sorted_sorted\n\
    \    local -a arr_sorted_sorted_index\n    local -a arr_sorted_sorted_index_sorted\n\
    \    local -a arr_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_index_sorted\n    local -a arr_sorted_sorted_sorted_sorted\n\
    \    local -a arr_sorted_sorted_sorted_sorted_index\n    local -a arr_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted_index_sorted\n    local -a\
    \ arr_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n   \
    \ local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a\
    \ arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index\n    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local -\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local -a max=()\n    local -a min=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local max_len=0\n\
    \    local min_len=0\n    local max_val=0\n    local min_val=0\n    local tmp=0\n\
    \    local tmp_val=0\n    local tmp_len=0\n    local tmp_max=0\n    local tmp_min=0\n\
    \    local tmp_max_val=0\n    local tmp_min_val=0\n    local tmp_max_len=0\n \
    \   local tmp_min_len=0\n    local tmp_max_arr=()\n    local tmp_min_arr=()\n\
    \    local tmp_res=()\n    local tmp_res_len=0\n    local tmp_res_val=0\n    local\
    \ tmp_res_arr=()\n    local tmp_res_max=0\n    local tmp_res_min=0\n    local\
    \ tmp_res_max_val=0\n    local tmp_res_min_val=0\n    local tmp_res_max_len=0\n\
    \    local tmp_res_min_len=0\n    local tmp_res_max_arr=()\n    local tmp_res_min_arr=()\n\
    \    local tmp_res_arr_len=0\n    local tmp_res_arr_val=0\n    local tmp_res_arr_max=0\n\
    \    local tmp_res_arr_min=0\n    local tmp_res_arr_max_val=0\n    local tmp_res_arr_min_val=0\n\
    \    local tmp_res_arr_max_len=0\n    local tmp_res_arr_min_len=0\n    local tmp_res_arr_max_arr=()\n\
    \    local tmp_res_arr_min_arr=()\n    local tmp_res_arr_arr=()\n    local tmp_res_arr_arr_len=0\n\
    \    local tmp_res_arr_arr_val=0\n    local tmp_res_arr_arr_max=0\n    local\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i temp=0\n    local -i len=0\n\
    \    local -i start=0\n    local -i end=0\n    local -i mid=0\n    local -i mid_value=0\n\
    \    local -i mid_index=0\n    local -i mid_left=0\n    local -i mid_right=0\n\
    \    local -i mid_left_value=0\n    local -i mid_right_value=0\n    local -i mid_left_index=0\n\
    \    local -i mid_right_index=0\n    local -i mid_left_right=0\n    local -i mid_left_right_value=0\n\
    \    local -i mid_left_right_index=0\n    local -i mid_left_right_left=0\n   \
    \ local -i mid_left_right_right=0\n    local -i mid_left_right_left_value=0\n\
    \    local -i mid_left_right_right_value=0\n    local -i mid_left_right_left_index=0\n\
    \    local -i mid_left_right_right_index=0\n    local -i mid_left_right_left_right=0\n\
    \    local -i mid_left_right_left_right_value=0\n    local -i mid_left_right_left_right_index=0\n\
    \    local -i mid_left_right_left_right_left=0\n    local -i mid_left_right_left_right_right=0\n\
    \    local -i mid_left_right_left_right_left_value=0\n    local -i mid_left_right_left_right_right_value=0\n\
    \    local -i mid_left_right_left_right_left_index=0\n    local -i mid_left_right_left_right_right_index=0\n\
    \    local -i mid_left_right_left_right_left_right=0\n    local -i mid\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -a tmp=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local len=${#arr[@]}\n    local max_len=${arr[$((len-1))]}\n\
    \    local max_len_i=$((len-1))\n    local max_len_j=$((len-1))\n    local max_len_k=$((len-1))\n\
    \    local max_len_l=$((len-1))\n    local max_len_m=$((len-1))\n    local max_len_n=$((len-1))\n\
    \    local max_len_o=$((len-1))\n    local max_len_p=$((len-1))\n    local max_len_q=$((len-1))\n\
    \    local max_len_r=$((len-1))\n    local max_len_s=$((len-1))\n    local max_len_t=$((len-1))\n\
    \    local max_len_u=$((len-1))\n    local max_len_v=$((len-1))\n    local max_len_w=$((len-1))\n\
    \    local max_len_x=$((len-1))\n    local max_len_y=$((len-1))\n    local max_len_z=$((len-1))\n\
    \    local max_len_aa=$((len-1))\n    local max_len_ab=$((len-1))\n    local max_len_ac=$((len-1))\n\
    \    local max_len_ad=$((len-1))\n    local max_len_ae=$((len-1))\n    local max_len_af=$((len-1))\n\
    \    local max_len_ag=$((len-1))\n    local max_len_ah=$((len-1))\n    local max_len_ai=$((len-1))\n\
    \    local max_len_aj=$((len-1))\n    local max_len_ak=$((len-1))\n    local max_len_al=$((len-1))\n\
    \    local max_len_am=$((len-1))\n    local max_\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    local -a tmp=()\n    local i=0\n   \
    \ local j=0\n    local len=${#arr[@]}\n    local max=0\n    local max_index=0\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n \
    \       for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        res[i]=$max\n        tmp[i]=${arr[len-i-1]}\n \
    \       arr[len-i-1]=$max\n        arr[max_index]=${tmp[i]}\n    done\n    echo\
    \ ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i max=0\n    local -i tmp=0\n    local -i idx=0\n    local -i len=0\n    local\
    \ -a res=()\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=$2\n    n=${#arr[@]}\n\
    \    len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n  \
    \      idx=0\n        for ((j=1; j<n; j++)); do\n            if [[ ${arr[j]} -gt\
    \ $max ]]; then\n                max=${arr[j]}\n                idx=$j\n     \
    \       fi\n        done\n        res[i]=$max\n        arr[idx]=$((0-2**31))\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a result\n   \
    \ for ((i=0; i<k; i++)); do\n        local -i max=${arr[0]}\n        local -i\
    \ max_idx=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n            if ((arr[j]\
    \ > max)); then\n                max=${arr[j]}\n                max_idx=$j\n \
    \           fi\n        done\n        result+=($max)\n        unset arr[max_idx]\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjirns2lm.sh: line 26: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i found\n    local -i found_index\n   \
    \ local -i found_index_end\n    local -i found_index_start\n    local -i found_index_mid\n\
    \    local -i found_index_mid_end\n    local -i found_index_mid_start\n    local\
    \ -i found_index_mid_mid\n    local -i found_index_mid_mid_end\n    local -i found_index_mid_mid_start\n\
    \    local -i found_index_mid_mid_mid\n    local -i found_index_mid_mid_mid_end\n\
    \    local -i found_index_mid_mid_mid_start\n    local -i found_index_mid_mid_mid_mid\n\
    \    local -i found_index_mid_mid_mid_mid_end\n    local -i found_index_mid_mid_mid_mid_start\n\
    \    local -i found_index_mid_mid_mid_mid_mid\n    local -i found_index_mid_mid_mid_mid_mid_end\n\
    \    local -i found_index_mid_mid_mid_mid_mid_start\n    local -i found_index_mid_mid_mid_mid_mid_mid\n\
    \    local -i found_index_mid_mid_mid_mid_mid_mid_end\n    local -i found_index_mid_mid_mid_mid_mid_mid_start\n\
    \    local -i found_index_mid_mid_mid_mid_mid_mid_mid\n    local -i found_index_mid_mid_mid_mid_mid_mid_mid_end\n\
    \    local -i found_index_mid_mid_mid_mid_mid_mid_mid_start\n    local -i found_index_mid_mid_mid_mid_mid_mid_mid_mid\n\
    \    local -i found_index_mid_mid_mid_mid_mid_mid_mid\n}\n\ncandidate() {\n  \
    \  maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max=()\n    local -a result=()\n    for ((i=0; i<k;\
    \ i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=\"\\\"${max[i]}\\\"\"\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -i i=0 j=0\n  \
    \  local -a max\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n   \
    \ done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_num\n    local i\n    local\
    \ j\n    for ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n        for ((j=1;\
    \ j<${#arr[@]}; j++)); do\n            if ((${arr[j]} > max_num)); then\n    \
    \            max_num=${arr[j]}\n            fi\n        done\n        max_arr+=($max_num)\n\
    \        arr=(${arr[@]/$max_num})\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local max_list=()\n    local max_list_len=0\n    local max_list_len_max=$k\n\
    \    local max_list_len_min=$((k - 1))\n    local max_list_len_diff=$((max_list_len_max\
    \ - max_list_len_min))\n    local max_list_len_diff_half=$((max_list_len_diff\
    \ / 2))\n    local max_list_len_min_half=$((max_list_len_min + max_list_len_diff_half))\n\
    \    local max_list_len_max_half=$((max_list_len_max - max_list_len_diff_half))\n\
    \    local max_list_len_min_half_half=$((max_list_len_min_half / 2))\n    local\
    \ max_list_len_max_half_half=$((max_list_len_max_half / 2))\n    local max_list_len_min_half_half_half=$((max_list_len_min_half\
    \ + max_list_len_min_half_half))\n    local max_list_len_max_half_half_half=$((max_list_len_max_half\
    \ + max_list_len_max_half_half))\n    local max_list_len_min_half_half_half_half=$((max_list_len_min_half_half_half\
    \ / 2))\n    local max_list_len_max_half_half_half_half=$((max_list_len_max_half_half_half\
    \ / 2))\n    local max_list_len_min_half_half_half_half_half=$((max_list_len_min_half_half_half\
    \ + max_list_len_min_half_half_half_half))\n    local max_list_len_max_half_half_half_half_half=$((max_list_len_max_half_half_half\
    \ + max_list_len_max_half_half_half_half))\n    local max_list_len_min_half_half_half_half_half_half=$((max_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp638uc27x.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmp638uc27x.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -a temp=()\n    local -i i=0\n\
    \    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max=0\n    local\
    \ -i max_index=0\n    local -i temp_len=0\n    local -i temp_index=0\n    local\
    \ -i temp_max=0\n    local -i temp_max_index=0\n    local -i temp_max_index_index=0\n\
    \    local -i temp_max_index_index_index=0\n    local -i temp_max_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index=0\n    local -i temp_max_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index=0\n    local\
    \ -i temp_max_index_index_index_index_index_index_index_index=0\n    local -i\
    \ temp_max_index_index_index_index_index_index_index_index_index=0\n    local\
    \ -i temp_max_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \    local -i temp_max_index_index_\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i len=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i max_value=0\n    local -i temp=0\n    local -i temp_index=0\n  \
    \  local -i temp_value=0\n    local -i value=0\n    local -i value_index=0\n \
    \   local -i value_value=0\n    local -i value_value_index=0\n    local -i value_value_value=0\n\
    \    local -i value_value_value_index=0\n    local -i value_value_value_value=0\n\
    \    local -i value_value_value_value_index=0\n    local -i value_value_value_value_value=0\n\
    \    local -i value_value_value_value_value_index=0\n    local -i value_value_value_value_value_value=0\n\
    \    local -i value_value_value_value_value_value_index=0\n    local -i value_value_value_value_value_value_value=0\n\
    \    local -i value_value_value_value_value_value_value_index=0\n    local -i\
    \ value_value_value_value_value_value_value_value=0\n    local -i value_value_value_value_value_value_value_value_index=0\n\
    \    local -i value_value_value_value_value_value_value_value_value=0\n    local\
    \ -i value_value_value_value_value_value_value_value_value_index=0\n    local\
    \ -i value_value_value_value_value_value_value_value_value_value=0\n    local\
    \ -i value_value_value_value_value_value_value_value_value_value_index=0\n   \
    \ local -i value_value_value_value_value_value_value_value_value_value_value=0\n\
    \    local -i value_value_value_value\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_index_sorted\n\
    \    local -a max_sorted\n    local -a arr_sorted\n    local i\n    local j\n\
    \    local max_index_sorted_len\n    local max_index_len\n    local max_len\n\
    \    local arr_len\n    local max_index_sorted_len_minus_1\n    local max_index_len_minus_1\n\
    \    local max_len_minus_1\n    local arr_len_minus_1\n    local max_index_sorted_len_minus_2\n\
    \    local max_index_len_minus_2\n    local max_len_minus_2\n    local arr_len_minus_2\n\
    \    local max_index_sorted_len_minus_3\n    local max_index_len_minus_3\n   \
    \ local max_len_minus_3\n    local arr_len_minus_3\n    local max_index_sorted_len_minus_4\n\
    \    local max_index_len_minus_4\n    local max_len_minus_4\n    local arr_len_minus_4\n\
    \    local max_index_sorted_len_minus_5\n    local max_index_len_minus_5\n   \
    \ local max_len_minus_5\n    local arr_len_minus_5\n    local max_index_sorted_len_minus_6\n\
    \    local max_index_len_minus_6\n    local max_len_minus_6\n    local arr_len_minus_6\n\
    \    local max_index_sorted_len_minus_7\n    local max_index_len_minus_7\n   \
    \ local max_len_minus_7\n    local arr_len_minus_7\n    local max_index_sorted_len_minus_8\n\
    \    local max_index_len_minus_8\n    local max_len_minus_8\n    local arr_len_minus_8\n\
    \    local max_index_sorted_len_minus_9\n    local max_index_len_minus_9\n   \
    \ local max_len_minus_9\n\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i m=0\n    local -i t=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i max=0\n    local -i min=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i w=0\n    local -i v=0\n    local\
    \ -i u=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i l=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n\
    \    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local\
    \ -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n\
    \    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n\
    \    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n   \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a max=()\n    local -i k=0\n    local -i i=0\n    local -i j=0\n \
    \   local -i len=0\n    local -i max_len=0\n    local -i max_i=0\n    local -i\
    \ max_j=0\n    local -i max_val=0\n    local -i val=0\n    local -i tmp=0\n  \
    \  local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_val=0\n    local -i\
    \ tmp_len=0\n    local -i tmp_max_len=0\n    local -i tmp_max_i=0\n    local -i\
    \ tmp_max_j=0\n    local -i tmp_max_val=0\n    local -i tmp_val=0\n    local -i\
    \ tmp_max_val=0\n    local -i tmp_max_len=0\n    local -i tmp_max_i=0\n    local\
    \ -i tmp_max_j=0\n    local -i tmp_val=0\n    local -i tmp_len=0\n    local -i\
    \ tmp_i=0\n    local -i tmp_j=0\n    local -i tmp=0\n    local -i val=0\n    local\
    \ -i max_val=0\n    local -i max_len=0\n    local -i max_i=0\n    local -i max_j=0\n\
    \    local -i j=0\n    local -i i=0\n    local -i k=0\n    local -a max=()\n \
    \   local -a arr=()\n    local -i len=0\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i len=0\n    local -i max_len=0\n    local -i max_i=0\n\
    \    local -i max_j=0\n    local -i max_val=0\n    local -i val=0\n    local -i\
    \ tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_val=0\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ local -i i=0\n    while [[ $i -lt $k ]]; do\n        local -i max_i=0\n    \
    \    local -i max_v=${arr[0]}\n        local -i j=0\n        while [[ $j -lt ${#arr[@]}\
    \ ]]; do\n            if [[ ${arr[$j]} -gt $max_v ]]; then\n                max_i=$j\n\
    \                max_v=${arr[$j]}\n            fi\n            ((j++))\n     \
    \   done\n        max+=($max_v)\n        unset arr[$max_i]\n        ((i++))\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwlms0db6.sh: line 28: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i len=${#arr[@]}\n    local -i k=${arr[-1]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_len=0\n    local -i max_index=0\n\
    \    local -i max_value=0\n    local -i value=0\n    local -i tmp=0\n    local\
    \ -i tmp_index=0\n    local -i tmp_value=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_max_len=0\n    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n\
    \    local -i tmp_value=0\n    local -i tmp_len=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n    local -i tmp_value=0\n\
    \    local -i tmp_len=0\n    local -i tmp_max_len=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_max_value=0\n    local -i tmp_value=0\n    local -i tmp_len=0\n\
    \    local -i tmp_max_len=0\n    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n\
    \    local -i tmp_value=0\n    local -i tmp_len=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n    local -i tmp_value=0\n\
    \    local -i tmp_len=0\n    local -i tmp_max_len=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_max_value=0\n    local -i tmp_value=0\n    local -i tmp_len=0\n\
    \    local -i tmp_max_len=0\n    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n\
    \    local\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i len=${#arr[@]}\n    local -i max=0\n    local -i index=0\n    local\
    \ -i count=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_count=0\n\
    \    local -i temp_max=0\n    while [[ $i -lt $len ]]; do\n        max=${arr[$i]}\n\
    \        index=$i\n        count=1\n        j=$i\n        while [[ $j -lt $len\
    \ ]]; do\n            if [[ ${arr[$j]} -gt $max ]]; then\n                max=${arr[$j]}\n\
    \                index=$j\n                count=1\n            elif [[ ${arr[$j]}\
    \ -eq $max ]]; then\n                count=$((count+1))\n            fi\n    \
    \        j=$((j+1))\n        done\n        if [[ $count -gt 1 ]]; then\n     \
    \       temp_index=$i\n            temp_count=0\n            temp_max=${arr[$i]}\n\
    \            while [[ $temp_index -lt $len ]]; do\n                if [[ ${arr[$temp_index]}\
    \ -gt $temp_max ]]; then\n                    temp_max=${arr[$temp_index]}\n \
    \                   temp_count=1\n                elif [[ ${arr[$temp_index]}\
    \ -eq $temp_max ]]; then\n                    temp_count=$((temp_count+1))\n \
    \               fi\n                temp_index=$((temp_index+1))\n           \
    \ done\n            if [[ $temp_count -eq $count ]]; then\n                result+=($max)\n\
    \                i=$((i+count))\n            else\n                i=$((i+1))\n\
    \            fi\n        else\n            result+=($max)\n            i=$((i+1))\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res=()\n    local -i len=${#arr[@]}\n    local -i k=${arr[$len-1]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i temp=0\n    local -i temp_index=0\n    local -i temp_index_2=0\n\
    \    local -i temp_index_3=0\n    local -i temp_index_4=0\n    local -i temp_index_5=0\n\
    \    local -i temp_index_6=0\n    local -i temp_index_7=0\n    local -i temp_index_8=0\n\
    \    local -i temp_index_9=0\n    local -i temp_index_10=0\n    local -i temp_index_11=0\n\
    \    local -i temp_index_12=0\n    local -i temp_index_13=0\n    local -i temp_index_14=0\n\
    \    local -i temp_index_15=0\n    local -i temp_index_16=0\n    local -i temp_index_17=0\n\
    \    local -i temp_index_18=0\n    local -i temp_index_19=0\n    local -i temp_index_20=0\n\
    \    local -i temp_index_21=0\n    local -i temp_index_22=0\n    local -i temp_index_23=0\n\
    \    local -i temp_index_24=0\n    local -i temp_index_25=0\n    local -i temp_index_26=0\n\
    \    local -i temp_index_27=0\n    local -i temp_index_28=0\n    local -i temp_index_29=0\n\
    \    local -i temp_index_30=0\n    local -i temp_index_31=0\n    local -i temp_index_32=0\n\
    \    local -i temp_index_33=0\n    local -i temp_index_34=0\n    local -i temp_index_35=0\n\
    \    local -i\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a res\n    for\
    \ ((i=0; i<k; i++)); do\n        local -i max=${arr[0]}\n        local -i max_i=0\n\
    \        for ((j=1; j<${#arr[@]}; j++)); do\n            if ((arr[j] > max));\
    \ then\n                max=${arr[j]}\n                max_i=$j\n            fi\n\
    \        done\n        res+=($max)\n        unset arr[max_i]\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2eynbpxi.sh: line 26: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a result\n    local -i i j k=${arr[-1]}\n    for ((i=0; i<k;\
    \ i++)); do\n        result[i]=${arr[i]}\n        for ((j=i+1; j<${#arr[@]}-1;\
    \ j++)); do\n            if [[ ${arr[j]} -gt ${result[i]} ]]; then\n         \
    \       result[i]=${arr[j]}\n                arr[j]=${arr[i]}\n            fi\n\
    \        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result\n    local -i i j\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${result[j]}\
    \ ]]; then\n                result[j]=${arr[i]}\n                break\n     \
    \       fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i len=0\n  \
    \  local -i max=0\n    local -i tmp=0\n    local -i max_index=0\n    local -i\
    \ max_index_tmp=0\n    local -i max_index_tmp_tmp=0\n    local -i max_index_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp=0\n    local -i max_index_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i\
    \ max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local -i max_index_tmp_tmp_tmp\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ for ((i=0; i<k; i++)); do\n        max+=(${arr[i]})\n    done\n    for ((i=k;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n       \
    \         break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i l=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local\
    \ -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local\
    \ -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n    local\
    \ -i ooo=0\n    local -i p\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_index_sorted\n\
    \    local -a max_sorted\n    local i\n    local j\n    local index\n    local\
    \ max_index_len\n    local max_len\n    local max_index_sorted_len\n    local\
    \ max_sorted_len\n    local max_index_sorted_last\n    local max_sorted_last\n\
    \    local max_index_sorted_last_index\n    local max_sorted_last_index\n    local\
    \ max_index_sorted_last_index_len\n    local max_sorted_last_index_len\n    local\
    \ max_index_sorted_last_index_len_last\n    local max_sorted_last_index_len_last\n\
    \    local max_index_sorted_last_index_len_last_index\n    local max_sorted_last_index_len_last_index\n\
    \    local max_index_sorted_last_index_len_last_index_len\n    local max_sorted_last_index_len_last_index_len\n\
    \    local max_index_sorted_last_index_len_last_index_len_last\n    local max_sorted_last_index_len_last_index_len_last\n\
    \    local max_index_sorted_last_index_len_last_index_len_last_index\n    local\
    \ max_sorted_last_index_len_last_index_len_last_index\n    local max_index_sorted_last_index_len_last_index_len_last_index_len\n\
    \    local max_sorted_last_index_len_last_index_len_last_index_len\n    local\
    \ max_index_sorted_last_index_len_last_index_len_last_index_len_last\n    local\
    \ max_sorted_last_index_len_last_index_len_last_index_len_last\n    local max_index_sorted_last_index_len_last_index_len_last_index_len_last_index\n\
    \    local max_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -a temp=()\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_index=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n \
    \       for ((j=1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        result+=($max)\n        temp=(\"${arr[@]:0:$max_index}\"\
    \ \"${arr[@]:$((max_index+1))}\")\n        arr=(\"${temp[@]}\")\n        len=${#arr[@]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i n\n    local -i\
    \ max\n    local -i max_i\n    local -i tmp\n    local -i tmp_i\n    local -i\
    \ tmp_j\n    local -i tmp_n\n    local -i tmp_max\n    local -i tmp_max_i\n  \
    \  local -i tmp_max_j\n    local -i tmp_max_n\n    local -i tmp_max_max\n    local\
    \ -i tmp_max_max_i\n    local -i tmp_max_max_j\n    local -i tmp_max_max_n\n \
    \   local -i tmp_max_max_max\n    local -i tmp_max_max_max_i\n    local -i tmp_max_max_max_j\n\
    \    local -i tmp_max_max_max_n\n    local -i tmp_max_max_max_max\n    local -i\
    \ tmp_max_max_max_max_i\n    local -i tmp_max_max_max_max_j\n    local -i tmp_max_max_max_max_n\n\
    \    local -i tmp_max_max_max_max_max\n    local -i tmp_max_max_max_max_max_i\n\
    \    local -i tmp_max_max_max_max_max_j\n    local -i tmp_max_max_max_max_max_n\n\
    \    local -i tmp_max_max_max_max_max_max\n    local -i tmp_max_max_max_max_max_max_i\n\
    \    local -i tmp_max_max_max_max_max_max_j\n    local -i tmp_max_max_max_max_max_max_n\n\
    \    local -i tmp_max_max_max_max_max_max_max\n    local -i tmp_max_max_max_max_max_max_max_i\n\
    \    local -i tmp_max_max_max_max_max_max_max_j\n    local -i tmp_max_max_max_max_max_max_max_n\n\
    \    local -\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           temp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ temp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           temp=${arr[i]}\n                arr[i]=${arr[j]}\n               \
    \ arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i j k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=$2\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        echo -n \"\\\"\
    ${arr[i]}\\\" \"\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    local result=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n     \
    \           tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -i i j\n    for\
    \ ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res\n    local -i i j\n    for ((i=0; i<k; i++));\
    \ do\n        res[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${res[j]}\
    \ ]]; then\n                res[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ n=${#arr[@]}\n    local m=${arr[$((n-1))]}\n    local -a res\n    for ((i=0;\
    \ i<n; i++)); do\n        if [[ ${arr[$i]} -gt $m ]]; then\n            m=${arr[$i]}\n\
    \        fi\n    done\n    for ((i=0; i<n; i++)); do\n        if [[ ${arr[$i]}\
    \ -eq $m ]]; then\n            max[$j]=${arr[$i]}\n            j=$((j+1))\n  \
    \      fi\n    done\n    for ((i=0; i<j; i++)); do\n        for ((k=i+1; k<j;\
    \ k++)); do\n            if [[ ${max[$i]} -lt ${max[$k]} ]]; then\n          \
    \      m=${max[$i]}\n                max[$i]=${max[$k]}\n                max[$k]=$m\n\
    \            fi\n        done\n    done\n    for ((i=0; i<$2; i++)); do\n    \
    \    res[$i]=${max[$i]}\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc8ex7etp.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpc8ex7etp.sh: line 35: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    local k=$2\n    local -a res\n   \
    \ local -a max\n    local -a tmp\n    local i\n    local j\n    local max_index\n\
    \    local max_value\n    for ((i=0; i<k; i++)); do\n        max_index=0\n   \
    \     max_value=${arr[0]}\n        for ((j=1; j<${#arr[@]}; j++)); do\n      \
    \      if [[ ${arr[j]} -gt $max_value ]]; then\n                max_index=$j\n\
    \                max_value=${arr[j]}\n            fi\n        done\n        res[i]=$max_value\n\
    \        unset arr[$max_index]\n        arr=(${arr[@]})\n    done\n    echo \"\
    ${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    local max=0\n    local max_index=0\n\
    \    local temp=0\n    for ((i=0; i<len; i++)); do\n        arr_sorted[i]=${arr[i]}\n\
    \    done\n    for ((i=0; i<len; i++)); do\n        max=${arr_sorted[i]}\n   \
    \     max_index=$i\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr_sorted[j]}\
    \ -gt $max ]]; then\n                max=${arr_sorted[j]}\n                max_index=$j\n\
    \            fi\n        done\n        temp=${arr_sorted[i]}\n        arr_sorted[i]=${arr_sorted[max_index]}\n\
    \        arr_sorted[max_index]=$temp\n    done\n    for ((i=0; i<k; i++)); do\n\
    \        arr_max[i]=${arr_sorted[i]}\n    done\n    echo ${arr_max[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpka8oqz8s.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a result\n    local -i i\n    local -i j\n    local -i k\n \
    \   local -i len=${#arr[@]}\n    local -i max\n    local -i max_index\n    local\
    \ -i temp\n    for ((i=0; i<$2; i++)); do\n        max=${arr[0]}\n        max_index=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        result[i]=$max\n        temp=${arr[len-i-1]}\n\
    \        arr[len-i-1]=$max\n        arr[max_index]=$temp\n    done\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl7arlbkt.sh: line 31: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max_len=0\n\
    \    local -i max_i=0\n    local -i max_j=0\n    local -i max_num=0\n    local\
    \ -i num=0\n    local -i max_num_i=0\n    local -i max_num_j=0\n    local -i max_num_len=0\n\
    \    local -i max_num_num=0\n    local -i max_num_max_num=0\n    local -i max_num_max_num_i=0\n\
    \    local -i max_num_max_num_j=0\n    local -i max_num_max_num_len=0\n    local\
    \ -i max_num_max_num_num=0\n    local -i max_num_max_num_max_num=0\n    local\
    \ -i max_num_max_num_max_num_i=0\n    local -i max_num_max_num_max_num_j=0\n \
    \   local -i max_num_max_num_max_num_len=0\n    local -i max_num_max_num_max_num_num=0\n\
    \    local -i max_num_max_num_max_num_max_num=0\n    local -i max_num_max_num_max_num_max_num_i=0\n\
    \    local -i max_num_max_num_max_num_max_num_j=0\n    local -i max_num_max_num_max_num_max_num_len=0\n\
    \    local -i max_num_max_num_max_num_max_num_num=0\n    local -i max_num_max_num_max_num_max_num_max_num=0\n\
    \    local -i max_num_max_num_max_num_max_num_max_num_i\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a result\n    for i in ${arr[@]}; do\n        result+=($i)\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<${#result[@]};\
    \ j++)); do\n            if (( ${result[i]} < ${result[j]} )); then\n        \
    \        local tmp=${result[i]}\n                result[i]=${result[j]}\n    \
    \            result[j]=$tmp\n            fi\n        done\n    done\n    echo\
    \ ${result[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpglitv4m8.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local result=()\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_index=0\n    local temp=0\n   \
    \ while [ $i -lt $k ]; do\n        max=${arr[0]}\n        max_index=0\n      \
    \  for ((j=1; j<len; j++)); do\n            if [ ${arr[$j]} -gt $max ]; then\n\
    \                max=${arr[$j]}\n                max_index=$j\n            fi\n\
    \        done\n        result[$i]=$max\n        arr[$max_index]=$((-1000))\n \
    \       ((i++))\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_n=0\n\
    \    local -i max_k=0\n    local -i max_arr=0\n    local -i max_arr_i=0\n    local\
    \ -i max_arr_j=0\n    local -i max_arr_n=0\n    local -i max_arr_k=0\n    local\
    \ -i max_arr_arr=0\n    local -i max_arr_arr_i=0\n    local -i max_arr_arr_j=0\n\
    \    local -i max_arr_arr_n=0\n    local -i max_arr_arr_k=0\n    local -i max_arr_arr_arr=0\n\
    \    local -i max_arr_arr_arr_i=0\n    local -i max_arr_arr_arr_j=0\n    local\
    \ -i max_arr_arr_arr_n=0\n    local -i max_arr_arr_arr_k=0\n    local -i max_arr_arr_arr_arr=0\n\
    \    local -i max_arr_arr_arr_arr_i=0\n    local -i max_arr_arr_arr_arr_j=0\n\
    \    local -i max_arr_arr_arr_arr_n=0\n    local -i max_arr_arr_arr_arr_k=0\n\
    \    local -i max_arr_arr_arr_arr_arr=0\n    local -i max_arr_arr_arr_arr_arr_i=0\n\
    \    local -i max_arr_arr_arr_arr_arr_j=0\n    local -i max_arr_arr_arr_arr_arr_n=0\n\
    \    local -i max_arr_arr_arr_arr_arr_k=0\n    local -i max_arr_arr_arr_arr_arr_arr=0\n\
    \    local -i max_arr_arr_arr_arr\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i tmp=0\n \
    \   local -i tmp_i=0\n    local -i tmp_j=0\n    local -i tmp_n=0\n    local -i\
    \ tmp_max=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local -i\
    \ tmp_max_n=0\n    local -i tmp_max_max=0\n    local -i tmp_max_max_i=0\n    local\
    \ -i tmp_max_max_j=0\n    local -i tmp_max_max_n=0\n    local -i tmp_max_max_max=0\n\
    \    local -i tmp_max_max_max_i=0\n    local -i tmp_max_max_max_j=0\n    local\
    \ -i tmp_max_max_max_n=0\n    local -i tmp_max_max_max_max=0\n    local -i tmp_max_max_max_max_i=0\n\
    \    local -i tmp_max_max_max_max_j=0\n    local -i tmp_max_max_max_max_n=0\n\
    \    local -i tmp_max_max_max_max_max=0\n    local -i tmp_max_max_max_max_max_i=0\n\
    \    local -i tmp_max_max_max_max_max_j=0\n    local -i tmp_max_max_max_max_max_n=0\n\
    \    local -i tmp_max_max_max_max_max_max=0\n    local -i tmp_max_max_max_max_max_max_i=0\n\
    \    local -i tmp_max_max_max_max_max_max_j=0\n    local -i tmp_max_max_max_max_max_max_n=0\n\
    \    local -i tmp_max_max\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ local -i i=0\n    while (( i < k )); do\n        local -i max_i=0\n        local\
    \ -i j=0\n        while (( j < ${#arr[@]} )); do\n            if (( arr[j] > arr[max_i]\
    \ )); then\n                max_i=$j\n            fi\n            (( j++ ))\n\
    \        done\n        max+=(${arr[max_i]})\n        unset arr[max_i]\n      \
    \  (( i++ ))\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb2oio869.sh: line 30: ((: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local res=()\n    local len=${#arr[@]}\n    local i=0\n \
    \   local j=0\n    local max=0\n    local max_index=0\n    local temp=0\n    for\
    \ ((i=0; i<k; i++)); do\n        max=${arr[i]}\n        max_index=$i\n       \
    \ for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n\
    \                max=${arr[j]}\n                max_index=$j\n            fi\n\
    \        done\n        temp=${arr[i]}\n        arr[i]=$max\n        arr[max_index]=$temp\n\
    \        res[i]=$max\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n    local arr_max=$(echo\
    \ $arr | tr ' ' '\\n' | sort -nr | head -n $k)\n    local arr_max_len=$(echo $arr_max\
    \ | wc -w)\n    if [ $arr_len -lt $k ]; then\n        echo $arr_max\n    else\n\
    \        echo $arr_max | tr ' ' '\\n' | sort -n | head -n $arr_max_len\n    fi\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -i i=0 j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i count=0\n    local\
    \ -i temp=0\n    local -i temp_index=0\n    local -i temp_count=0\n    local -i\
    \ temp_max=0\n    local -i temp_max_index=0\n    local -i temp_max_count=0\n \
    \   local -i temp_max_temp=0\n    local -i temp_max_temp_index=0\n    local -i\
    \ temp_max_temp_count=0\n    local -i temp_max_temp_max=0\n    local -i temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_count=0\n\
    \    local -i temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_max_temp_count=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max_temp\n}\n\ncandidate() {\n \
    \   maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local max_num=0\n    local max_num_index=0\n    for ((i=0; i<len; i++));\
    \ do\n        if [[ ${arr[i]} -gt $max_num ]]; then\n            max_num=${arr[i]}\n\
    \            max_num_index=$i\n        fi\n    done\n    max_arr[0]=$max_num\n\
    \    max_arr_len=1\n    for ((i=0; i<len; i++)); do\n        if [[ $i -ne $max_num_index\
    \ ]]; then\n            if [[ ${arr[i]} -gt ${max_arr[max_arr_len-1]} ]]; then\n\
    \                max_arr[max_arr_len]=${arr[i]}\n                max_arr_len=$((max_arr_len+1))\n\
    \            fi\n        fi\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i max=0\n    local -i tmp=0\n\
    \    local -i len=${#arr[@]}\n    local -i k=${arr[$((len-1))]}\n    local -i\
    \ len=$((len-1))\n    for ((i=0; i<len; i++)); do\n        max=${arr[$i]}\n  \
    \      m=$i\n        for ((j=i+1; j<len; j++)); do\n            if ((${arr[$j]}\
    \ > max)); then\n                max=${arr[$j]}\n                m=$j\n      \
    \      fi\n        done\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$m]}\n\
    \        arr[$m]=$tmp\n    done\n    for ((i=0; i<k; i++)); do\n        res[$i]=${arr[$i]}\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgkcss0ij.sh: line 34: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ n=${#arr[@]}\n    local m=${arr[$n-1]}\n    for ((i=0; i<m; i++)); do\n    \
    \    for ((j=0; j<n-1; j++)); do\n            if [[ ${arr[$j]} -eq $i ]]; then\n\
    \                max[$k]=${arr[$j]}\n                ((k++))\n            fi\n\
    \        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc3y57tsq.sh: line 30: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    /tmp/tmpc3y57tsq.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    /tmp/tmpc3y57tsq.sh: line 30: [[: -3 -4 5: syntax error in expression (error token
    is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    if [ $k -gt $len ]; then\n    \
    \    k=$len\n    fi\n    local i=0\n    local j=0\n    local max=0\n    local\
    \ max_index=0\n    local result=()\n    while [ $i -lt $k ]; do\n        max=${arr[0]}\n\
    \        max_index=0\n        for j in \"${!arr[@]}\"; do\n            if [ ${arr[$j]}\
    \ -gt $max ]; then\n                max=${arr[$j]}\n                max_index=$j\n\
    \            fi\n        done\n        result[$i]=$max\n        unset arr[$max_index]\n\
    \        i=$((i+1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbpgaf8vp.sh: line 36: [: -4: unary operator expected

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a arr_sorted\n    local -a arr_sorted_k\n    local\
    \ -a arr_sorted_k_str\n    local i\n    local j\n    local n\n    local tmp\n\
    \    local -i n_arr\n    local -i n_arr_sorted_k\n    local -i n_arr_sorted_k_str\n\
    \    local -i n_arr_sorted\n    local -i n_arr_sorted_k_str_max\n    local -i\
    \ n_arr_sorted_k_str_min\n    local -i n_arr_sorted_k_str_max_index\n    local\
    \ -i n_arr_sorted_k_str_min_index\n    local -i n_arr_sorted_k_str_max_index_tmp\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp\n    local -i n_arr_sorted_k_str_max_index_tmp_2\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_2\n    local -i n_arr_sorted_k_str_max_index_tmp_3\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_3\n    local -i n_arr_sorted_k_str_max_index_tmp_4\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_4\n    local -i n_arr_sorted_k_str_max_index_tmp_5\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_5\n    local -i n_arr_sorted_k_str_max_index_tmp_6\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_6\n    local -i n_arr_sorted_k_str_max_index_tmp_7\n\
    \    local -i n_arr_sorted_k_str_min_index_tmp_7\n    local -i n_arr_sorted_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqnsq_gr2.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i mid_value\n    local -i mid_value_prev\n\
    \    local -i mid_value_next\n    local -i mid_value_prev_index\n    local -i\
    \ mid_value_next_index\n    local -i mid_value_prev_prev\n    local -i mid_value_next_next\n\
    \    local -i mid_value_prev_prev_index\n    local -i mid_value_next_next_index\n\
    \    local -i mid_value_prev_prev_prev\n    local -i mid_value_next_next_next\n\
    \    local -i mid_value_prev_prev_prev_index\n    local -i mid_value_next_next_next_index\n\
    \    local -i mid_value_prev_prev_prev_prev\n    local -i mid_value_next_next_next_next\n\
    \    local -i mid_value_prev_prev_prev_prev_index\n    local -i mid_value_next_next_next_next_index\n\
    \    local -i mid_value_prev_prev_prev_prev_prev\n    local -i mid_value_next_next_next_next_next\n\
    \    local -i mid_value_prev_prev_prev_prev_prev_index\n    local -i mid_value_next_next_next_next_next_index\n\
    \    local -i mid_value_prev_prev_prev_prev_prev_prev\n    local -i mid_value_next_next_next_next_next_next\n\
    \    local -i mid_value_prev_prev_prev_prev_prev_prev_index\n    local -i mid_value_next_next_next_next_next_next_index\n\
    \    local -i mid_value_prev_prev_prev_prev_prev_prev_prev\n    local -i mid_value_next_next_next_next_next_next_next\n\
    \    local -i mid_value\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i middle\n    local -i middle_value\n    local -i middle_index\n\
    \    local -i middle_left_value\n    local -i middle_right_value\n    local -i\
    \ middle_left_index\n    local -i middle_right_index\n    local -i middle_left_value_index\n\
    \    local -i middle_right_value_index\n    local -i middle_left_value_index_left\n\
    \    local -i middle_left_value_index_right\n    local -i middle_right_value_index_left\n\
    \    local -i middle_right_value_index_right\n    local -i middle_left_value_index_left_value\n\
    \    local -i middle_left_value_index_right_value\n    local -i middle_right_value_index_left_value\n\
    \    local -i middle_right_value_index_right_value\n    local -i middle_left_value_index_left_value_index\n\
    \    local -i middle_left_value_index_right_value_index\n    local -i middle_right_value_index_left_value_index\n\
    \    local -i middle_right_value_index_right_value_index\n    local -i middle_left_value_index_left_value_index_left\n\
    \    local -i middle_left_value_index_left_value_index_right\n    local -i middle_left_value_index_right_value_index_left\n\
    \    local -i middle_left_value_index_right_value_index_right\n    local -i middle_right_value_index_left_value_index_left\n\
    \    local -i middle_right_value_index_left_value_index_right\n    local -i middle_right_value_index_right_value_index_left\n\
    \    local -i middle_right_value_index_right_value_index_right\n    local -i middle_left_value_index\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i\
    \ k=0\n    local -i len=${#arr[@]}\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i num=0\n    local -i num_index=0\n    local -i temp=0\n    local\
    \ -i temp_index=0\n    local -i temp_len=0\n    local -i temp_max=0\n    local\
    \ -i temp_max_index=0\n    local -i temp_num=0\n    local -i temp_num_index=0\n\
    \    local -i temp_temp=0\n    local -i temp_temp_index=0\n    local -i temp_temp_len=0\n\
    \    local -i temp_temp_max=0\n    local -i temp_temp_max_index=0\n    local -i\
    \ temp_temp_num=0\n    local -i temp_temp_num_index=0\n    local -i temp_temp_temp=0\n\
    \    local -i temp_temp_temp_index=0\n    local -i temp_temp_temp_len=0\n    local\
    \ -i temp_temp_temp_max=0\n    local -i temp_temp_temp_max_index=0\n    local\
    \ -i temp_temp_temp_num=0\n    local -i temp_temp_temp_num_index=0\n    local\
    \ -i temp_temp_temp_temp=0\n    local -i temp_temp_temp_temp_index=0\n    local\
    \ -i temp_temp_temp_temp_len=0\n    local -i temp_temp_temp_temp_max=0\n    local\
    \ -i temp_temp_temp_temp_max_index=0\n    local -i temp_temp_temp_temp_num=0\n\
    \    local -i temp_temp_temp_temp_num_index=0\n    local -i temp_temp_temp_temp_temp=0\n\
    \    local -i temp_temp_temp_temp_temp_index=0\n    local -i temp_temp_temp_temp_temp\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"$@\"\
    )\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\")\n    local len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local max=0\n    local max_index=0\n    local\
    \ result=()\n    while [ $i -lt $k ]\n    do\n        max=${arr[0]}\n        max_index=0\n\
    \        j=0\n        while [ $j -lt $len ]\n        do\n            if [ ${arr[$j]}\
    \ -gt $max ]\n            then\n                max=${arr[$j]}\n             \
    \   max_index=$j\n            fi\n            j=$((j+1))\n        done\n     \
    \   result+=($max)\n        arr[$max_index]=$((-1000))\n        i=$((i+1))\n \
    \   done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdqfbkpyd.sh: line 37: [: -3: unary operator expected

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_val\n    local i\n    local\
    \ j\n    for ((i=0; i<k; i++)); do\n        max_val=${arr[0]}\n        for ((j=1;\
    \ j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max_val ]]; then\n\
    \                max_val=${arr[j]}\n            fi\n        done\n        max_arr+=($max_val)\n\
    \        arr=(${arr[@]/$max_val})\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a res\n    local\
    \ -i i j\n    for ((i=0; i<k; i++)); do\n        local -i max=${arr[0]}\n    \
    \    local -i max_i=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n          \
    \  if (( arr[j] > max )); then\n                max=${arr[j]}\n              \
    \  max_i=$j\n            fi\n        done\n        res[i]=$max\n        unset\
    \ arr[max_i]\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqr4f7qld.sh: line 27: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_index_arr\n\
    \    local -a max_index_arr_sorted\n    local -a max_index_arr_sorted_k\n    local\
    \ -a max_index_arr_sorted_k_index\n    local -a max_index_arr_sorted_k_index_arr\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted\n    local -a max_index_arr_sorted_k_index_arr_sorted_k\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index\n    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted\n   \
    \ local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k\n    local\
    \ -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index\n    local\
    \ -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index\n\
    \    local -a max_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr_sorted_k_index_arr\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max=()\n    local -a result=()\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n    \
    \    max[i]=${arr[i]}\n    done\n    for ((i=k; i<len; i++)); do\n        for\
    \ ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n\
    \                max[j]=${arr[i]}\n                break\n            fi\n   \
    \     done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=\"\\\"\
    ${max[i]}\\\"\"\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\
    \ $1 )\n    local k=$2\n    local -a max\n    local -i i\n    local -i j\n   \
    \ local -i n=${#arr[@]}\n    local -i m=0\n    for ((i=0; i<n; i++)); do\n   \
    \     for ((j=i+1; j<n; j++)); do\n            if (( arr[i] < arr[j] )); then\n\
    \                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n     \
    \           arr[j]=$tmp\n            fi\n        done\n        if (( m < k ));\
    \ then\n            max[m++]=${arr[i]}\n        fi\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res=()\n    local -i i=0\n    local -i k=${arr[-1]}\n    local\
    \ -i len=${#arr[@]}\n    local -i j=0\n    local -i max=0\n    local -i max_index=0\n\
    \    local -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_index_2=0\n  \
    \  local -i tmp_index_3=0\n    local -i tmp_index_4=0\n    local -i tmp_index_5=0\n\
    \    local -i tmp_index_6=0\n    local -i tmp_index_7=0\n    local -i tmp_index_8=0\n\
    \    local -i tmp_index_9=0\n    local -i tmp_index_10=0\n    local -i tmp_index_11=0\n\
    \    local -i tmp_index_12=0\n    local -i tmp_index_13=0\n    local -i tmp_index_14=0\n\
    \    local -i tmp_index_15=0\n    local -i tmp_index_16=0\n    local -i tmp_index_17=0\n\
    \    local -i tmp_index_18=0\n    local -i tmp_index_19=0\n    local -i tmp_index_20=0\n\
    \    local -i tmp_index_21=0\n    local -i tmp_index_22=0\n    local -i tmp_index_23=0\n\
    \    local -i tmp_index_24=0\n    local -i tmp_index_25=0\n    local -i tmp_index_26=0\n\
    \    local -i tmp_index_27=0\n    local -i tmp_index_28=0\n    local -i tmp_index_29=0\n\
    \    local -i tmp_index_30=0\n    local -i tmp_index_31=0\n    local -i tmp_index_32=0\n\
    \    local -i tmp_index_33=0\n    local -i tmp_index_34=0\n    local -i tmp_index_35=0\n\
    \    local -i tmp_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a res\n    local\
    \ -i i j\n    for ((i=0; i<k; i++)); do\n        local -i max=${arr[0]}\n    \
    \    local -i max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n      \
    \      if ((arr[j] > max)); then\n                max=${arr[j]}\n            \
    \    max_index=j\n            fi\n        done\n        res[i]=${arr[max_index]}\n\
    \        unset arr[max_index]\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0rqvc16f.sh: line 27: local: -3 -4 5: syntax error in expression
    (error token is "5")

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -i k=0\n    local -i i=0\n    local -i j=0\n    local -i len=0\n  \
    \  local -i max_index=0\n    local -i max_value=0\n    local -i tmp=0\n    local\
    \ -a result=()\n    arr=($1)\n    k=$2\n    len=${#arr[@]}\n    for ((i=0; i<k;\
    \ i++)); do\n        max_index=$i\n        max_value=${arr[$i]}\n        for ((j=$i+1;\
    \ j<len; j++)); do\n            tmp=${arr[$j]}\n            if ((tmp > max_value));\
    \ then\n                max_index=$j\n                max_value=$tmp\n       \
    \     fi\n        done\n        tmp=${arr[$i]}\n        arr[$i]=${arr[$max_index]}\n\
    \        arr[$max_index]=$tmp\n        result[$i]=$max_value\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local -a arr_sorted\n    local -a arr_max\n    local\
    \ -i i\n    local -i j\n    local -i n\n    local -i m\n    local -i max_index\n\
    \    local -i max_value\n    local -i arr_len\n    local -i arr_max_len\n    local\
    \ -i arr_max_last_index\n    local -i arr_max_last_value\n    local -i arr_max_last_value_index\n\
    \    local -i arr_max_last_value_index_2\n    local -i arr_max_last_value_index_3\n\
    \    local -i arr_max_last_value_index_4\n    local -i arr_max_last_value_index_5\n\
    \    local -i arr_max_last_value_index_6\n    local -i arr_max_last_value_index_7\n\
    \    local -i arr_max_last_value_index_8\n    local -i arr_max_last_value_index_9\n\
    \    local -i arr_max_last_value_index_10\n    local -i arr_max_last_value_index_11\n\
    \    local -i arr_max_last_value_index_12\n    local -i arr_max_last_value_index_13\n\
    \    local -i arr_max_last_value_index_14\n    local -i arr_max_last_value_index_15\n\
    \    local -i arr_max_last_value_index_16\n    local -i arr_max_last_value_index_17\n\
    \    local -i arr_max_last_value_index_18\n    local -i arr_max_last_value_index_19\n\
    \    local -i arr_max_last_value_index_20\n    local -i arr_max_last_value_index_21\n\
    \    local -i arr_max_last_value_index_22\n    local -i arr_max_last_value_index_23\n\
    \    local -i arr_max_last_value_index_24\n    local -i arr_max_last_value_index_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a max=()\n    local -i k=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i len=0\n    local -i max_len=0\n    local -i max_index=0\n    local\
    \ -i max_value=0\n    local -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_value=0\n\
    \    local -i tmp_len=0\n    local -i tmp_max_index=0\n    local -i tmp_max_value=0\n\
    \    local -i tmp_max_len=0\n    local -i tmp_max_value_index=0\n    local -i\
    \ tmp_max_value_len=0\n    local -i tmp_max_value_max_index=0\n    local -i tmp_max_value_max_value=0\n\
    \    local -i tmp_max_value_max_len=0\n    local -i tmp_max_value_max_value_index=0\n\
    \    local -i tmp_max_value_max_value_len=0\n    local -i tmp_max_value_max_value_max_index=0\n\
    \    local -i tmp_max_value_max_value_max_value=0\n    local -i tmp_max_value_max_value_max_len=0\n\
    \    local -i tmp_max_value_max_value_max_value_index=0\n    local -i tmp_max_value_max_value_max_value_len=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_index=0\n    local -i tmp_max_value_max_value_max_value_max_value=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_len=0\n    local -i tmp_max_value_max_value_max_value_max_value_index=0\n\
    \    local -i tmp_max_value_max_value_max_value_max_value_len=0\n    local -i\
    \ tmp_max_value_max_value_max_value_max\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[max_index]}\n        arr[max_index]=$temp\n    done\n  \
    \  echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" | wc -w)\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local max_arr_index=0\n    local max_arr_value=0\n\
    \    local i=0\n    local j=0\n    local value=0\n    local index=0\n    local\
    \ max_arr_value_index=0\n    local max_arr_value_index_value=0\n    local max_arr_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value=0\n    local max_arr_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value=0\n    local max_arr_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value=0\n \
    \   local max_arr_value_index_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result\n    local -i i=0\n    local -i j=0\n   \
    \ local -i max=0\n    local -i max_index=0\n    local -i len=${#arr[@]}\n    local\
    \ -i count=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_count=0\n\
    \    local -i temp_max=0\n    local -i temp_max_index=0\n    local -i temp_max_count=0\n\
    \    local -i temp_max_temp=0\n    local -i temp_max_temp_index=0\n    local -i\
    \ temp_max_temp_count=0\n    local -i temp_max_temp_max=0\n    local -i temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_count=0\n\
    \    local -i temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_index=0\n    local -i temp_max_temp_max_temp_max_temp_count=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max=0\n    local -i temp_max_temp_max_temp_max_temp_max_index=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_max_count=0\n    local -i temp_max_temp_max_temp_max_temp_max_temp=0\n\
    \    local -i temp_max_temp_max_temp_max_temp_\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[$((len-1))]}\n    local\
    \ -i max_index=0\n    local -i max_value=0\n    local -i value=0\n    local -i\
    \ temp=0\n    local -i temp_index=0\n    local -i temp_value=0\n    local -i temp_len=0\n\
    \    local -i temp_max_len=0\n    local -i temp_max_index=0\n    local -i temp_max_value=0\n\
    \    local -i temp_value=0\n    local -i temp_len=0\n    local -i temp_max_len=0\n\
    \    local -i temp_max_index=0\n    local -i temp_max_value=0\n    local -i temp_value=0\n\
    \    local -i temp_len=0\n    local -i temp_max_len=0\n    local -i temp_max_index=0\n\
    \    local -i temp_max_value=0\n    local -i temp_value=0\n    local -i temp_len=0\n\
    \    local -i temp_max_len=0\n    local -i temp_max_index=0\n    local -i temp_max_value=0\n\
    \    local -i temp_value=0\n    local -i temp_len=0\n    local -i temp_max_len=0\n\
    \    local -i temp_max_index=0\n    local -i temp_max_value=0\n    local -i temp_value=0\n\
    \    local -i temp_len=0\n    local -i temp_max_len=0\n    local -i temp_max_index=0\n\
    \    local -i temp_max_value=0\n    local -i temp_value=0\n    local -i temp_len=0\n\
    \    local -i temp_max_len=0\n    local -i temp_max_index=0\n    local -i temp_max_value=\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local temp=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i\n    local j\n    local max_i\n\
    \    local max_j\n    for ((i=0; i<k; i++)); do\n        max_i=i\n        max_j=arr[i]\n\
    \        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt\
    \ $max_j ]]; then\n                max_i=$j\n                max_j=${arr[j]}\n\
    \            fi\n        done\n        max[i]=$max_j\n        arr[max_i]=${arr[i]}\n\
    \        arr[i]=$max_j\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a res=()\n    local -i k=0\n    local -i i=0\n    local -i j=0\n \
    \   local -i n=0\n    local -i max=0\n    local -i tmp=0\n    local -i idx=0\n\
    \    local -i len=0\n    local -i len_res=0\n    local -i len_arr=0\n    local\
    \ -i len_res_arr=0\n    local -i len_res_arr_1=0\n    local -i len_res_arr_2=0\n\
    \    local -i len_res_arr_3=0\n    local -i len_res_arr_4=0\n    local -i len_res_arr_5=0\n\
    \    local -i len_res_arr_6=0\n    local -i len_res_arr_7=0\n    local -i len_res_arr_8=0\n\
    \    local -i len_res_arr_9=0\n    local -i len_res_arr_10=0\n    local -i len_res_arr_11=0\n\
    \    local -i len_res_arr_12=0\n    local -i len_res_arr_13=0\n    local -i len_res_arr_14=0\n\
    \    local -i len_res_arr_15=0\n    local -i len_res_arr_16=0\n    local -i len_res_arr_17=0\n\
    \    local -i len_res_arr_18=0\n    local -i len_res_arr_19=0\n    local -i len_res_arr_20=0\n\
    \    local -i len_res_arr_21=0\n    local -i len_res_arr_22=0\n    local -i len_res_arr_23=0\n\
    \    local -i len_res_arr_24=0\n    local -i len_res_arr_25=0\n    local -i len_res_arr_26=0\n\
    \    local -i len_res_arr_27=0\n    local -i len_res_arr_28=0\n    local -i len_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_num=0\n\
    \    local -i num=0\n    local -i max_num_i=0\n    local -i max_num_j=0\n    local\
    \ -i max_num_k=0\n    local -i max_num_len=0\n    local -i max_num_num=0\n   \
    \ local -i max_num_max_num=0\n    local -i max_num_max_i=0\n    local -i max_num_max_j=0\n\
    \    local -i max_num_max_k=0\n    local -i max_num_max_len=0\n    local -i max_num_max_num=0\n\
    \    local -i max_num_max_max_num=0\n    local -i max_num_max_max_i=0\n    local\
    \ -i max_num_max_max_j=0\n    local -i max_num_max_max_k=0\n    local -i max_num_max_max_len=0\n\
    \    local -i max_num_max_max_num=0\n    local -i max_num_max_max_max_num=0\n\
    \    local -i max_num_max_max_max_i=0\n    local -i max_num_max_max_max_j=0\n\
    \    local -i max_num_max_max_max_k=0\n    local -i max_num_max_max_max_len=0\n\
    \    local -i max_num_max_max_max_num=0\n    local -i max_num_max_max_max_max_num=0\n\
    \    local -i max_num_max_max_max_max_i=0\n    local -\n}\n\ncandidate() {\n \
    \   maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[$((len-1))]}\n    local\
    \ -i max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_num=0\n\
    \    local -i num=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n\
    \    local -i tmp_k=0\n    local -i tmp_num=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_max_len=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local\
    \ -i tmp_max_k=0\n    local -i tmp_max_num=0\n    local -i tmp_num_len=0\n   \
    \ local -i tmp_max_num_len=0\n    local -i tmp_num_i=0\n    local -i tmp_max_num_i=0\n\
    \    local -i tmp_num_j=0\n    local -i tmp_max_num_j=0\n    local -i tmp_num_k=0\n\
    \    local -i tmp_max_num_k=0\n    local -i tmp_num_num=0\n    local -i tmp_max_num_num=0\n\
    \    local -i tmp_num_len=0\n    local -i tmp_max_num_len=0\n    local -i tmp_num_i=0\n\
    \    local -i tmp_max_num_i=0\n    local -i tmp_num_j=0\n    local -i tmp_max_num_j=0\n\
    \    local -i tmp_num_k=0\n    local -i tmp_max_num_k=0\n    local -i tmp_num_num=0\n\
    \    local -i tmp_max_num_num=0\n    local -i tmp_num_len=0\n\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -a max_idx=()\n    local -a max_val=()\n\
    \    local -a max_val_idx=()\n    local -a max_val_idx_idx=()\n    local -a max_val_idx_val=()\n\
    \    local -a max_val_idx_val_idx=()\n    local -a max_val_idx_val_val=()\n  \
    \  local -a max_val_idx_val_val_idx=()\n    local -a max_val_idx_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_idx=()\n    local -a max_val_idx_val_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_val_idx=()\n    local -a max_val_idx_val_val_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_val_val_idx=()\n    local -a max_val_idx_val_val_val_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_val_val_val_idx=()\n    local -a max_val_idx_val_val_val_val_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_val_val_val_val_idx=()\n    local -a max_val_idx_val_val_val_val_val_val_val_val=()\n\
    \    local -a max_val_idx_val_val_val_val_val_val_val_val_idx=()\n    local -a\
    \ max_val_idx_val_val_val_val_val_val_val_val_val=()\n    local -a max_val_idx_val_val_val_val_val_val_val_val_val_idx=()\n\
    \   \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ tmp=0\n    local -i max_idx=0\n    local -i max_val=0\n    local -i max_idx_tmp=0\n\
    \    local -i max_val_tmp=0\n    local -i max_idx_tmp2=0\n    local -i max_val_tmp2=0\n\
    \    local -i max_idx_tmp3=0\n    local -i max_val_tmp3=0\n    local -i max_idx_tmp4=0\n\
    \    local -i max_val_tmp4=0\n    local -i max_idx_tmp5=0\n    local -i max_val_tmp5=0\n\
    \    local -i max_idx_tmp6=0\n    local -i max_val_tmp6=0\n    local -i max_idx_tmp7=0\n\
    \    local -i max_val_tmp7=0\n    local -i max_idx_tmp8=0\n    local -i max_val_tmp8=0\n\
    \    local -i max_idx_tmp9=0\n    local -i max_val_tmp9=0\n    local -i max_idx_tmp10=0\n\
    \    local -i max_val_tmp10=0\n    local -i max_idx_tmp11=0\n    local -i max_val_tmp11=0\n\
    \    local -i max_idx_tmp12=0\n    local -i max_val_tmp12=0\n    local -i max_idx_tmp13=0\n\
    \    local -i max_val_tmp13=0\n    local -i max_idx_tmp14=0\n    local -i max_val_tmp14=0\n\
    \    local -i max_idx_tmp15=0\n    local -i max_val_tmp15=0\n    local -i max_id\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i len=${#arr[@]}\n    local -i k=${arr[-1]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i max_len=0\n    local -i max_idx=0\n\
    \    local -i max_val=0\n    local -i val=0\n    local -i tmp=0\n    local -i\
    \ tmp_idx=0\n    local -i tmp_val=0\n    local -i tmp_len=0\n    local -i tmp_max_idx=0\n\
    \    local -i tmp_max_val=0\n    local -i tmp_max_len=0\n    local -i tmp_max_idx_2=0\n\
    \    local -i tmp_max_val_2=0\n    local -i tmp_max_len_2=0\n    local -i tmp_max_idx_3=0\n\
    \    local -i tmp_max_val_3=0\n    local -i tmp_max_len_3=0\n    local -i tmp_max_idx_4=0\n\
    \    local -i tmp_max_val_4=0\n    local -i tmp_max_len_4=0\n    local -i tmp_max_idx_5=0\n\
    \    local -i tmp_max_val_5=0\n    local -i tmp_max_len_5=0\n    local -i tmp_max_idx_6=0\n\
    \    local -i tmp_max_val_6=0\n    local -i tmp_max_len_6=0\n    local -i tmp_max_idx_7=0\n\
    \    local -i tmp_max_val_7=0\n    local -i tmp_max_len_7=0\n    local -i tmp_max_idx_8=0\n\
    \    local -i tmp_max_val_8=0\n    local -i tmp_max_len_8=0\n    local -i tmp_max_idx_9=0\n\
    \    local -i tmp_max_val_9=0\n    local -i tmp\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=$2\n    if (( k\
    \ > ${#arr[@]} )); then\n        echo \"Error: k is greater than the length of\
    \ the array.\"\n        exit 1\n    fi\n    # Sort the array in descending order\n\
    \    IFS=$'\\n' arr=($(sort -nr <<< \"${arr[*]}\"))\n    # Print the first k elements\n\
    \    printf '\"%s\"\\n' \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local -a tmp\n    local i\n    local j\n\
    \    local max_num\n    local max_idx\n    for ((i=0; i<k; i++)); do\n       \
    \ max_num=${arr[0]}\n        max_idx=0\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if (( arr[j] > max_num )); then\n                max_num=${arr[j]}\n\
    \                max_idx=j\n            fi\n        done\n        max[i]=$max_num\n\
    \        unset arr[max_idx]\n        arr=(${arr[@]})\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt_cypsq7.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local max_arr=()\n    local max_num\n    local num\n\
    \    local i\n    local j\n    for num in $arr; do\n        if [[ ${#max_arr[@]}\
    \ -lt $k ]]; then\n            max_arr+=(\"$num\")\n        else\n           \
    \ max_num=${max_arr[0]}\n            for i in \"${max_arr[@]}\"; do\n        \
    \        if [[ $i -gt $max_num ]]; then\n                    max_num=$i\n    \
    \            fi\n            done\n            if [[ $num -gt $max_num ]]; then\n\
    \                for j in \"${!max_arr[@]}\"; do\n                    if [[ ${max_arr[$j]}\
    \ -eq $max_num ]]; then\n                        max_arr[$j]=$num\n          \
    \              break\n                    fi\n                done\n         \
    \   fi\n        fi\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_val\n    local max_index\n\
    \    local i\n    local j\n    local tmp\n    for ((i=0; i<k; i++)); do\n    \
    \    max_val=${arr[0]}\n        max_index=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_val ]]; then\n             \
    \   max_val=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        max_arr[i]=$max_val\n        arr[$max_index]=$((-1000000))\n    done\n\
    \    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\" | wc -w)\"\n    local\
    \ max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=\"$k\"\n    local\
    \ max_arr_len_min=\"$((k - 1))\"\n    local max_arr_len_diff=\"$((max_arr_len_max\
    \ - max_arr_len_min))\"\n    local max_arr_len_diff_half=\"$((max_arr_len_diff\
    \ / 2))\"\n    local max_arr_len_min_half=\"$((max_arr_len_min + max_arr_len_diff_half))\"\
    \n    local max_arr_len_max_half=\"$((max_arr_len_max - max_arr_len_diff_half))\"\
    \n    local max_arr_len_min_half_half=\"$((max_arr_len_min_half / 2))\"\n    local\
    \ max_arr_len_max_half_half=\"$((max_arr_len_max_half / 2))\"\n    local max_arr_len_min_half_half_half=\"\
    $((max_arr_len_min_half_half / 2))\"\n    local max_arr_len_max_half_half_half=\"\
    $((max_arr_len_max_half_half / 2))\"\n    local max_arr_len_min_half_half_half_half=\"\
    $((max_arr_len_min_half_half_half / 2))\"\n    local max_arr_len_max_half_half_half_half=\"\
    $((max_arr_len_max_half_half_half / 2))\"\n    local max_arr_len_min_half_half_half_half_half=\"\
    $((max_arr_len_min_half_half_half_half / 2))\"\n    local max_arr_len_max_half_half_half_half_half=\"\
    $((max_arr_len_max_half_half_half_half / 2))\"\n    local max_arr_len_min_half_half_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n   \
    \ local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i m=0\n\
    \    local -i tmp=0\n    for ((i=0; i<n; i++)); do\n        arr[i]=$(echo \"${arr[i]}\"\
    \ | sed 's/^\"//;s/\"$//')\n    done\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<n; i++)); do\n        for ((j=0; j<k; j++)); do\n\
    \            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                tmp=${max[j]}\n\
    \                max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n\
    \        done\n    done\n    for ((i=0; i<k; i++)); do\n        max[i]=\"\\\"\
    ${max[i]}\\\"\"\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i i k\n    IFS=' ' read -r -a arr <<< \"$1\"\n    k=$2\n    for ((i=0;\
    \ i<k; i++)); do\n        echo -n '\"'\n        echo -n \"${arr[$((${#arr[@]}-1))]}\"\
    \n        echo -n '\"'\n        unset arr[$((${#arr[@]}-1))]\n        if ((i<k-1));\
    \ then\n            echo -n ', '\n        fi\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_index\n    local -a max_value\n\
    \    local -a max_value_index\n    local -a max_value_index_index\n    local -a\
    \ max_value_index_value\n    local -a max_value_index_value_index\n    local -a\
    \ max_value_index_value_value\n    local -a max_value_index_value_value_index\n\
    \    local -a max_value_index_value_value_value\n    local -a max_value_index_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value\n    local -a max_value_index_value_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value_value\n    local -a max_value_index_value_value_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value_value_value\n    local -a\
    \ max_value_index_value_value_value_value_value_value_index\n    local -a max_value_index_value_value_value_value_value_value_value\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value_value\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value_value_index\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value_value_value\n\
    \    local -a max_value_index_value_value_value_value_value_value_value_value_value_value_index\n\
    \    local -a max_value_index_value\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n    local\
    \ max=0\n    local max_index=0\n    local result=()\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=${arr[len-i-1]}\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local arr=($arr)\n    local len=${#arr[@]}\n    local\
    \ i=0\n    local j=0\n    local temp=0\n    local result=()\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]; then\n                temp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$temp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    IFS=\" \" read -r -a arr <<< \"$1\"\n    k=$2\n    if [[\
    \ ${#arr[@]} -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n   \
    \ if [[ $k -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n    if\
    \ [[ $k -gt ${#arr[@]} ]]; then\n        k=${#arr[@]}\n    fi\n    local -a res\n\
    \    local -i i\n    for ((i=0; i<k; i++)); do\n        res[i]=${arr[i]}\n   \
    \ done\n    local -i j\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0;\
    \ j<k; j++)); do\n            if [[ ${arr[i]} -gt ${res[j]} ]]; then\n       \
    \         local -i t\n                for ((t=k-1; t>j; t--)); do\n          \
    \          res[t]=${res[t-1]}\n                done\n                res[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"[$(join_by\
    \ \", \" \"${res[@]}\")]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyjcjtqy3.sh: line 54: join_by: command not found

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ max_i=0\n    local -i max_j=0\n    local -i max_k=0\n    local -i max_num=0\n\
    \    local -i num=0\n    local -i tmp=0\n    local -i tmp_i=0\n    local -i tmp_j=0\n\
    \    local -i tmp_k=0\n    local -i tmp_num=0\n    local -i tmp_len=0\n    local\
    \ -i tmp_max_len=0\n    local -i tmp_max_i=0\n    local -i tmp_max_j=0\n    local\
    \ -i tmp_max_k=0\n    local -i tmp_max_num=0\n    local -i tmp_num=0\n    local\
    \ -i tmp_num_i=0\n    local -i tmp_num_j=0\n    local -i tmp_num_k=0\n    local\
    \ -i tmp_num_num=0\n    local -i tmp_num_len=0\n    local -i tmp_num_max_len=0\n\
    \    local -i tmp_num_max_i=0\n    local -i tmp_num_max_j=0\n    local -i tmp_num_max_k=0\n\
    \    local -i tmp_num_max_num=0\n    local -i tmp_num_num=0\n    local -i tmp_num_num_i=0\n\
    \    local -i tmp_num_num_j=0\n    local -i tmp_num_num_k=0\n    local -i tmp_num_num_num=0\n\
    \    local -i tmp_num_num_len=0\n    local -i tmp_num_num_max_len=0\n    local\
    \ -i tmp_num_num_max_i=0\n    local -i tmp_num_num_max_j=0\n    local -\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max_arr\n    local max_num\n    local max_index\n\
    \    local i\n    local j\n    for ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n           \
    \ if [[ ${arr[j]} -gt $max_num ]]; then\n                max_num=${arr[j]}\n \
    \               max_index=$j\n            fi\n        done\n        max_arr[i]=$max_num\n\
    \        unset arr[$max_index]\n        arr=(${arr[@]})\n    done\n    echo ${max_arr[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i len=${#arr[@]}\n    local -i max_len=${arr[len-1]}\n    local -i\
    \ num\n    local -i max_num\n    local -i max_index\n    local -i max_count=0\n\
    \    local -i max_count_index\n    local -i max_count_num\n    local -i max_count_index_num\n\
    \    local -i max_count_index_num_count\n    local -i max_count_index_num_count_index\n\
    \    local -i max_count_index_num_count_index_num\n    local -i max_count_index_num_count_index_num_count\n\
    \    local -i max_count_index_num_count_index_num_count_index\n    local -i max_count_index_num_count_index_num_count_index_num\n\
    \    local -i max_count_index_num_count_index_num_count_index_num_count\n    local\
    \ -i max_count_index_num_count_index_num_count_index_num_count_index\n    local\
    \ -i max_count_index_num_count_index_num_count_index_num_count_index_num\n   \
    \ local -i max_count_index_num_count_index_num_count_index_num_count_index_num_count\n\
    \    local -i max_count_index_num_count_index_num_count_index_num_count_index_num_count_index\n\
    \    local -i max_count_index_num_count_index_num_count_index_num_count_index_num_count_index_num\n\
    \    local -i max_count_index_num_count_index_num_count_index_num_count_index_num_count_index_num_count\n\
    \    local -i max_count_index_num_count_index_num_count_index_num_count_index_num_count_index_num_count_index\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i temp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i found\n    local -i found_index\n   \
    \ local -i count\n    local -i count_index\n    local -i count_max\n    local\
    \ -i count_max_index\n    local -i count_max_index_temp\n    local -i count_max_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp\n    local -i count_max_index_temp_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp_index_temp\n    local -i count_max_index_temp_index_temp_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp\n    local\
    \ -i count_max_index_temp_index_temp_index_temp_index_temp_index\n    local -i\
    \ count_max_index_temp_index_temp_index_temp_index_temp_index_temp\n    local\
    \ -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index\n\
    \    local -i count_max_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp_index_temp\n\
    \    local -i count_max\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -i k=${arr[-1]}\n    unset arr[-1]\n    local -a max\n    local\
    \ -i i=0\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[0]}\n        unset\
    \ arr[0]\n    done\n    for i in \"${arr[@]}\"; do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ $i -gt ${max[j]} ]]; then\n                local -i l=k-1\n\
    \                while ((l>j)); do\n                    max[l]=${max[l-1]}\n \
    \                   ((l--))\n                done\n                max[j]=$i\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local -a sorted\n    local i\n    local\
    \ j\n    local max_num\n    local max_index\n    local len=${#arr[@]}\n    for\
    \ ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n        max_index=0\n    \
    \    for ((j=1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max_num ]];\
    \ then\n                max_num=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        max[$i]=$max_num\n        arr[$max_index]=0\n\
    \    done\n    sorted=($(printf \"%s\\n\" \"${max[@]}\" | sort -nr))\n    echo\
    \ \"${sorted[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmc1cogs3.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_idx\n    local -a max_val\n\
    \    local -a max_idx_val\n    local -a max_idx_val_idx\n    local -a max_idx_val_val\n\
    \    local -a max_idx_val_val_idx\n    local -a max_idx_val_val_val\n    local\
    \ -a max_idx_val_val_val_idx\n    local -a max_idx_val_val_val_val\n    local\
    \ -a max_idx_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val\n \
    \   local -a max_idx_val_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val_val\n\
    \    local -a max_idx_val_val_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val_val_val\n\
    \    local -a max_idx_val_val_val_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val_val_val_val\n\
    \    local -a max_idx_val_val_val_val_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val_val_val_val_val\n\
    \    local -a max_idx_val_val_val_val_val_val_val_val_val_idx\n    local -a max_idx_val_val_val_val_val_val_val_val_val_val\n\
    \    local -a max_idx_val_val_val_val_val_val_val_val_val_val_idx\n    local -a\
    \ max_idx_val_val_val_val_val_val_val_val_val_val_val\n    local -a max_idx_val_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local k=${arr[-1]}\n    unset arr[-1]\n    local -a max=()\n    for\
    \ i in \"${arr[@]}\"; do\n        if [[ ${#max[@]} -lt $k ]]; then\n         \
    \   max+=(\"$i\")\n        else\n            for j in \"${!max[@]}\"; do\n   \
    \             if [[ $i -gt ${max[$j]} ]]; then\n                    max[$j]=$i\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a max_idx\n    local -a max_val\n\
    \    local -a max_idx_val\n    local -a res\n    local i\n    local j\n    local\
    \ idx\n    local val\n    local max_len=${#arr[@]}\n    if [[ $k -gt $max_len\
    \ ]]; then\n        k=$max_len\n    fi\n    for ((i=0; i<k; i++)); do\n      \
    \  max[$i]=0\n        max_idx[$i]=0\n        max_val[$i]=${arr[0]}\n        max_idx_val[$i]=0\n\
    \    done\n    for ((i=0; i<max_len; i++)); do\n        val=${arr[$i]}\n     \
    \   for ((j=0; j<k; j++)); do\n            if [[ $val -gt ${max_val[$j]} ]]; then\n\
    \                idx=$j\n                break\n            fi\n        done\n\
    \        if [[ $idx -lt $k ]]; then\n            for ((j=k-1; j>idx; j--)); do\n\
    \                max[$j]=${max[$((j-1))]}\n                max_idx[$j]=${max_idx[$((j-1))]}\n\
    \                max_val[$j]=${max_val[$((j-1))]}\n                max_idx_val[$j]=${max_idx_val[$((j-1))]}\n\
    \            done\n            max[$idx]=1\n            max_idx[$idx]=$i\n   \
    \         max_val[$idx]=$val\n            max_idx_val[$idx]=$((i+1))\n       \
    \ fi\n    done\n    for ((i=0; i<k; i++)); do\n        res[$i]=${max_val[$i]}\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local i=0\n    local j=0\n    local max_i=0\n\
    \    local max_j=0\n    local max_val=0\n    local val=0\n    local -a result\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        val=${arr[$i]}\n        if [[\
    \ $val -gt $max_val ]]; then\n            max_val=$val\n            max_i=$i\n\
    \            max_j=0\n        elif [[ $val -eq $max_val ]]; then\n           \
    \ max_j=$((max_j+1))\n        fi\n    done\n    max=($max_val)\n    for ((i=0;\
    \ i<$k; i++)); do\n        result[$i]=${max[$((max_j%${#max[@]}))]}\n        max_j=$((max_j+1))\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max=()\n    local -a result=()\n    local i=0\n\
    \    local j=0\n    local n=${#arr[@]}\n    local m=0\n    local max_val=0\n \
    \   local max_idx=0\n    local tmp=0\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    for ((i=k; i<n; i++)); do\n        max_val=${max[0]}\n        max_idx=0\n\
    \        for ((j=1; j<k; j++)); do\n            if [[ ${max[j]} -gt $max_val ]];\
    \ then\n                max_val=${max[j]}\n                max_idx=$j\n      \
    \      fi\n        done\n        if [[ ${arr[i]} -lt $max_val ]]; then\n     \
    \       max[$max_idx]=${arr[i]}\n        fi\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        for ((j=i+1; j<k; j++)); do\n            if [[ ${max[j]} -gt ${max[i]}\
    \ ]]; then\n                tmp=${max[i]}\n                max[i]=${max[j]}\n\
    \                max[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        result[i]=\"\\\"${max[i]}\\\"\"\n    done\n \
    \   echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i max=0\n    local -i index=0\n    local -i len=${#arr[@]}\n    local\
    \ -i count=0\n    local -i temp=0\n    local -i temp_index=0\n    local -i temp_count=0\n\
    \    local -i temp_max=0\n    local -i temp_len=0\n    local -i temp_j=0\n   \
    \ local -i temp_i=0\n    local -i temp_index=0\n    local -i temp_count=0\n  \
    \  local -i temp_max=0\n    local -i temp_len=0\n    local -i temp_j=0\n    local\
    \ -i temp_i=0\n    local -i temp_index=0\n    local -i temp_count=0\n    local\
    \ -i temp_max=0\n    local -i temp_len=0\n    local -i temp_j=0\n    local -i\
    \ temp_i=0\n    local -i temp_index=0\n    local -i temp_count=0\n    local -i\
    \ temp_max=0\n    local -i temp_len=0\n    local -i temp_j=0\n    local -i temp_i=0\n\
    \    local -i temp_index=0\n    local -i temp_count=0\n    local -i temp_max=0\n\
    \    local -i temp_len=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local\
    \ -i temp_index=0\n    local -i temp_count=0\n    local -i temp_max=0\n    local\
    \ -i temp_len=0\n    local -i temp_j=0\n    local -i temp_i=0\n    local -i temp_index=0\n\
    \    local -i temp_count=0\n    local -i temp_max=0\n    local -i temp_len=0\n\
    \    local -i temp_j=0\n    local -i temp_i=0\n    local -i temp_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a result\n    local -a sorted\n    local -a max\n\
    \    local -a max_idx\n    local -a max_idx_sorted\n    local i\n    local j\n\
    \    local tmp\n    local tmp_idx\n    local tmp_idx_sorted\n    local max_idx_sorted_len\n\
    \    local max_len\n    local max_idx_len\n    local sorted_len\n    local result_len\n\
    \    local result_idx\n    local result_idx_sorted\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_idx_len\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_idx_len\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_idx_len\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_idx_len\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_idx_len\n    local result_idx_sorted_len\n\
    \    local result_idx_len\n    local result_idx_sorted_len\n    local result_idx_len\n\
    \    local result_idx_sorted_len\n    local result_\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzg3zn4is.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i flag\n    local -i flag2\n    local -i\
    \ flag3\n    local -i flag4\n    local -i flag5\n    local -i flag6\n    local\
    \ -i flag7\n    local -i flag8\n    local -i flag9\n    local -i flag10\n    local\
    \ -i flag11\n    local -i flag12\n    local -i flag13\n    local -i flag14\n \
    \   local -i flag15\n    local -i flag16\n    local -i flag17\n    local -i flag18\n\
    \    local -i flag19\n    local -i flag20\n    local -i flag21\n    local -i flag22\n\
    \    local -i flag23\n    local -i flag24\n    local -i flag25\n    local -i flag26\n\
    \    local -i flag27\n    local -i flag28\n    local -i flag29\n    local -i flag30\n\
    \    local -i flag31\n    local -i flag32\n    local -i flag33\n    local -i flag34\n\
    \    local -i flag35\n    local -i flag36\n    local -i flag37\n    local -i flag38\n\
    \    local -i flag39\n    local -i flag40\n    local -i flag41\n    local -i flag42\n\
    \    local -i flag43\n    local -i flag44\n    local -i flag45\n    local -i flag46\n\
    \    local -i flag47\n    local -i flag48\n    local -i flag49\n    local -i flag50\n\
    \    local -i flag51\n    local -i flag52\n    local -i flag53\n    local -i flag54\n\
    \    local -i flag55\n    local -i flag56\n    local -i flag57\n    local -i flag58\n\
    \    local -i flag59\n    local -i flag60\n    local -i flag61\n    local -i flag62\n\
    \    local -i flag63\n    local -\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" | wc -w)\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local max_arr_index=0\n    local max_arr_value=0\n\
    \    local i=0\n    local j=0\n    local num=0\n    local num_value=0\n    local\
    \ num_index=0\n    local max_arr_value_index=0\n    local max_arr_value_value=0\n\
    \    local max_arr_value_index_value=0\n    local max_arr_value_index_index=0\n\
    \    local max_arr_value_index_value_index=0\n    local max_arr_value_index_value_value=0\n\
    \    local max_arr_value_index_value_index_value=0\n    local max_arr_value_index_value_index_index=0\n\
    \    local max_arr_value_index_value_index_value_index=0\n    local max_arr_value_index_value_index_value_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value=0\n    local max_arr_value_index_value_index_value_index_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index=0\n    local\
    \ max_arr_value_index_value_index_value_index_value_value=0\n    local max_arr_value_index_value_index_value_index_value_index_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_index=0\n \
    \   local max_arr_value_index_value_index_value_index_value_index_value_index=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_value=0\n\
    \    local max_arr_value_index_value_index_value_index_value_index_value_index_value=0\n\
    \    local max_arr_value_index_value_index_value\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n\
    \            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n    local i\n\
    \    local j\n    local len\n    local max\n    local max_index\n    local tmp\n\
    \    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' | sort -n))\n    len=${#arr_sorted[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr_sorted[0]}\n        max_index=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr_sorted[j]} -gt\
    \ $max ]]; then\n                max=${arr_sorted[j]}\n                max_index=$j\n\
    \            fi\n        done\n        arr_max[i]=$max\n        tmp=${arr_sorted[len-i-1]}\n\
    \        arr_sorted[len-i-1]=$max\n        arr_sorted[max_index]=$tmp\n    done\n\
    \    echo \"${arr_max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7m68_9p9.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    /tmp/tmp7m68_9p9.sh: line 43: arr_sorted: bad array subscript

    /tmp/tmp7m68_9p9.sh: line 44: arr_sorted[len-i-1]: bad array subscript

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local max_arr=()\n    local max_num=0\n\
    \    local max_index=0\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ tmp_index=0\n    local result=()\n    if [[ $len -le $k ]]; then\n        echo\
    \ ${arr[@]}\n        return\n    fi\n    for ((i=0; i<k; i++)); do\n        max_arr[$i]=${arr[$i]}\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        max_num=${max_arr[$i]}\n   \
    \     max_index=$i\n        for ((j=$i+1; j<k; j++)); do\n            if [[ ${max_arr[$j]}\
    \ -gt $max_num ]]; then\n                max_num=${max_arr[$j]}\n            \
    \    max_index=$j\n            fi\n        done\n        tmp=${max_arr[$i]}\n\
    \        tmp_index=$i\n        max_arr[$i]=$max_num\n        max_arr[$max_index]=$tmp\n\
    \    done\n    for ((i=k; i<len; i++)); do\n        if [[ ${arr[$i]} -gt ${max_arr[0]}\
    \ ]]; then\n            max_arr[0]=${arr[$i]}\n            max_num=${max_arr[0]}\n\
    \            max_index=0\n            for ((j=1; j<k; j++)); do\n            \
    \    if [[ ${max_arr[$j]} -gt $max_num ]]; then\n                    max_num=${max_arr[$j]}\n\
    \                    max_index=$j\n                fi\n            done\n    \
    \        tmp=${max_arr[0]}\n            tmp_index=0\n            max_arr[0]=$max_num\n\
    \            max_arr[$max_index]=$tmp\n        fi\n    done\n    for ((i=0; i<k;\
    \ i++)); do\n        result[$i]=\"\\\"${max_arr[$i]}\\\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjxj9v_by.sh: line 90: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjxj9v_by.sh: line 94: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local max_arr=()\n    local max_num=0\n    local max_index=0\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max_num=${arr[0]}\n        max_index=0\n        for ((j=1; j<len;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_num ]]; then\n             \
    \   max_num=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        max_arr+=($max_num)\n        unset arr[$max_index]\n        len=$(($len-1))\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local -i k\n    local -i i\n    local -i j\n    local -i max\n    local -i\
    \ max_index\n    local -i tmp\n    local -i len\n    local -i start\n    local\
    \ -i end\n    local -i mid\n    local -i found\n    local -i found_index\n   \
    \ local -i found_index_tmp\n    local -i found_index_tmp_2\n    local -i found_index_tmp_3\n\
    \    local -i found_index_tmp_4\n    local -i found_index_tmp_5\n    local -i\
    \ found_index_tmp_6\n    local -i found_index_tmp_7\n    local -i found_index_tmp_8\n\
    \    local -i found_index_tmp_9\n    local -i found_index_tmp_10\n    local -i\
    \ found_index_tmp_11\n    local -i found_index_tmp_12\n    local -i found_index_tmp_13\n\
    \    local -i found_index_tmp_14\n    local -i found_index_tmp_15\n    local -i\
    \ found_index_tmp_16\n    local -i found_index_tmp_17\n    local -i found_index_tmp_18\n\
    \    local -i found_index_tmp_19\n    local -i found_index_tmp_20\n    local -i\
    \ found_index_tmp_21\n    local -i found_index_tmp_22\n    local -i found_index_tmp_23\n\
    \    local -i found_index_tmp_24\n    local -i found_index_tmp_25\n    local -i\
    \ found_index_tmp_26\n    local -i found_index_tmp_27\n    local -i found_index_tmp_28\n\
    \    local -i found_index_tmp_29\n    local -i found_index_tmp_30\n    local -i\
    \ found_index_tmp_31\n    local -i found_index_tmp_32\n    local -i found_index_tmp_33\n\
    \    local -i found_index_tmp_34\n    local -i found_index_tmp_35\n    local -i\
    \ found_index_tmp_36\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=()\n\
    \    local -a max=()\n    local i=0\n    local k=0\n    local n=0\n    local -i\
    \ max_i=0\n    local -i max_n=0\n    local -i max_k=0\n    local -i max_j=0\n\
    \    local -i max_l=0\n    local -i max_m=0\n    local -i max_n=0\n    local -i\
    \ max_o=0\n    local -i max_p=0\n    local -i max_q=0\n    local -i max_r=0\n\
    \    local -i max_s=0\n    local -i max_t=0\n    local -i max_u=0\n    local -i\
    \ max_v=0\n    local -i max_w=0\n    local -i max_x=0\n    local -i max_y=0\n\
    \    local -i max_z=0\n    local -i max_aa=0\n    local -i max_ab=0\n    local\
    \ -i max_ac=0\n    local -i max_ad=0\n    local -i max_ae=0\n    local -i max_af=0\n\
    \    local -i max_ag=0\n    local -i max_ah=0\n    local -i max_ai=0\n    local\
    \ -i max_aj=0\n    local -i max_ak=0\n    local -i max_al=0\n    local -i max_am=0\n\
    \    local -i max_an=0\n    local -i max_ao=0\n    local -i max_ap=0\n    local\
    \ -i max_aq=0\n    local -i max_ar=0\n    local -i max_as=0\n    local -i max_at=0\n\
    \    local -i max_au=0\n    local -i max_av=0\n    local -i max_aw=0\n    local\
    \ -i max_ax=0\n    local -i max_ay=0\n    local -i max_az=0\n    local -i max_ba=0\n\
    \    local -i max_bb=0\n    local -i max_bc\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1)\n\
    \    local k=$2\n    local len=${#arr[@]}\n    local result=()\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_index=0\n    local temp=0\n   \
    \ for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n        max_index=$i\n \
    \       for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_index=$j\n        \
    \    fi\n        done\n        temp=${arr[i]}\n        arr[i]=$max\n        arr[max_index]=$temp\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a res\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i n=0\n    local -i m=0\n    local -i t=0\n    local -i len=${#arr[@]}\n\
    \    local -i max=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i\
    \ max_k=0\n    local -i max_n=0\n    local -i max_m=0\n    local -i max_t=0\n\
    \    local -i max_len=0\n    local -i max_max=0\n    local -i max_max_i=0\n  \
    \  local -i max_max_j=0\n    local -i max_max_k=0\n    local -i max_max_n=0\n\
    \    local -i max_max_m=0\n    local -i max_max_t=0\n    local -i max_max_len=0\n\
    \    local -i max_max_max=0\n    local -i max_max_max_i=0\n    local -i max_max_max_j=0\n\
    \    local -i max_max_max_k=0\n    local -i max_max_max_n=0\n    local -i max_max_max_m=0\n\
    \    local -i max_max_max_t=0\n    local -i max_max_max_len=0\n    local -i max_max_max_max=0\n\
    \    local -i max_max_max_max_i=0\n    local -i max_max_max_max_j=0\n    local\
    \ -i max_max_max_max_k=0\n    local -i max_max_max_max_n=0\n    local -i max_max_max_max_m=0\n\
    \    local -i max_max_max_max_t=0\n    local -i max_max_max_max_len=0\n    local\
    \ -i max_max_max_max_max=0\n    local -i max_max_max\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n\
    \    local k\n    local -a max\n    local i\n    local j\n    local max_i\n  \
    \  local max_j\n    local tmp\n    arr=($1)\n    k=$2\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max_i=i\n                max_j=j\n               \
    \ break\n            fi\n        done\n        if [[ -n $max_i ]]; then\n    \
    \        tmp=${max[$max_j]}\n            max[$max_j]=${arr[$max_i]}\n        \
    \    arr[$max_i]=$tmp\n            unset max_i\n            unset max_j\n    \
    \    fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -i i=0\n    local -i j=0\n\
    \    local -i max=0\n    local -i max_index=0\n    local -i len=${#arr[@]}\n \
    \   local -i count=0\n    local -i temp=0\n    local -i temp_index=0\n    local\
    \ -i temp_count=0\n    local -i temp_max=0\n    local -i temp_max_index=0\n  \
    \  if [[ $k -gt $len ]]; then\n        k=$len\n    fi\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[0]}\n        max_index=0\n        for ((j=0; j<len; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=0\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max=()\n    local -a res=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local len=${#arr[@]}\n    local n=${arr[0]}\n    local m=${arr[1]}\n\
    \    local max_len=0\n    local res_len=0\n    local max_index=0\n    local res_index=0\n\
    \    local max_str=\"\"\n    local res_str=\"\"\n    local max_str_len=0\n   \
    \ local res_str_len=0\n    local max_str_index=0\n    local res_str_index=0\n\
    \    local max_str_len_index=0\n    local res_str_len_index=0\n    local max_str_len_index_str=\"\
    \"\n    local res_str_len_index_str=\"\"\n    local max_str_len_index_str_len=0\n\
    \    local res_str_len_index_str_len=0\n    local max_str_len_index_str_len_index=0\n\
    \    local res_str_len_index_str_len_index=0\n    local max_str_len_index_str_len_index_str=\"\
    \"\n    local res_str_len_index_str_len_index_str=\"\"\n    local max_str_len_index_str_len_index_str_len=0\n\
    \    local res_str_len_index_str_len_index_str_len=0\n    local max_str_len_index_str_len_index_str_len_index=0\n\
    \    local res_str_len_index_str_len_index_str_len_index=0\n    local max_str_len_index_str_len_index_str_len_index_str=\"\
    \"\n    local res_str_len_index_str_len_index_str_len_index_str=\"\"\n    local\
    \ max_str_len_index_str_len_index_str_len_index_str_len=0\n    local res_str_len_index_str_len_index_str_len_index_str\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a result=()\n    local -a max=()\n    local -a min=()\n\
    \    local i=0\n    local j=0\n    local index=0\n    local max_index=0\n    local\
    \ min_index=0\n    local max_value=0\n    local min_value=0\n    local temp=0\n\
    \    local temp_index=0\n    local len=${#arr[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max[$i]=${arr[$i]}\n        min[$i]=${arr[$i]}\n    done\n    for\
    \ ((i=k; i<len; i++)); do\n        max_value=${max[0]}\n        max_index=0\n\
    \        for ((j=1; j<k; j++)); do\n            if [[ ${max[$j]} -gt $max_value\
    \ ]]; then\n                max_value=${max[$j]}\n                max_index=$j\n\
    \            fi\n        done\n        if [[ ${arr[$i]} -lt $max_value ]]; then\n\
    \            max[$max_index]=${arr[$i]}\n        fi\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        min_value=${min[0]}\n        min_index=0\n        for\
    \ ((j=1; j<k; j++)); do\n            if [[ ${min[$j]} -lt $min_value ]]; then\n\
    \                min_value=${min[$j]}\n                min_index=$j\n        \
    \    fi\n        done\n        if [[ ${max[$i]} -gt $min_value ]]; then\n    \
    \        min[$min_index]=${max[$i]}\n        fi\n    done\n    for ((i=0; i<k;\
    \ i++)); do\n        result[$i]=${min[$i]}\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        min_value=${result[$i]}\n        min_index=$i\n        for ((j=i+1;\
    \ j<k; j++));\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl9zpsq16.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmpl9zpsq16.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=(\"\
    $@\")\n    local -a max\n    local -a max_idx\n    local -a max_val\n    local\
    \ -a max_val_idx\n    local -a max_val_idx_sorted\n    local -a max_val_sorted\n\
    \    local -a max_sorted\n    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n\
    \    local -a max_val_sorted\n    local -a max_sorted\n    local -a max_idx_sorted\n\
    \    local -a max_val_idx_sorted\n    local -a max_val_sorted\n    local -a max_sorted\n\
    \    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n    local -a max_val_sorted\n\
    \    local -a max_sorted\n    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n\
    \    local -a max_val_sorted\n    local -a max_sorted\n    local -a max_idx_sorted\n\
    \    local -a max_val_idx_sorted\n    local -a max_val_sorted\n    local -a max_sorted\n\
    \    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n    local -a max_val_sorted\n\
    \    local -a max_sorted\n    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n\
    \    local -a max_val_sorted\n    local -a max_sorted\n    local -a max_idx_sorted\n\
    \    local -a max_val_idx_sorted\n    local -a max_val_sorted\n    local -a max_sorted\n\
    \    local -a max_idx_sorted\n    local -a max_val_idx_sorted\n    local -a max_val_sorted\n\
    \    local -a max_sorted\n    local -a max_idx_sorted\n    local -a max_\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a max\n    local -a result\n    local i\n    local\
    \ j\n    local max_index\n    local max_value\n    for ((i=0; i<k; i++)); do\n\
    \        max_index=$i\n        max_value=${arr[$i]}\n        for ((j=i+1; j<${#arr[@]};\
    \ j++)); do\n            if ((${arr[$j]} > max_value)); then\n               \
    \ max_index=$j\n                max_value=${arr[$j]}\n            fi\n       \
    \ done\n        max[$i]=$max_index\n        result[$i]=$max_value\n        arr[$max_index]=${arr[$i]}\n\
    \        arr[$i]=$max_value\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -n arr=$1\n\
    \    local k=$2\n    local -a max\n    local i\n    for ((i=0; i<k; i++)); do\n\
    \        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n\
    \        local j\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n              \
    \  max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n        done\n\
    \    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwce7z1uz.sh: line 21: local: `-3 -4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660010532
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr=($1)\n\
    \    local k=$2\n    local -a res=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        local num=${arr[$i]}\n        if [[ ${#res[@]} -eq 0 ]]; then\n     \
    \       res+=(\"$num\")\n        else\n            local j=0\n            while\
    \ [[ $j -lt ${#res[@]} ]]; do\n                if [[ $num -gt ${res[$j]} ]]; then\n\
    \                    res=(${res[@]:0:$j} $num ${res[@]:$j})\n                \
    \    break\n                fi\n                ((j++))\n            done\n  \
    \          if [[ $j -eq ${#res[@]} ]]; then\n                res+=(\"$num\")\n\
    \            fi\n        fi\n        if [[ ${#res[@]} -gt $k ]]; then\n      \
    \      res=(${res[@]:0:$k})\n        fi\n    done\n    echo ${res[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010532
