name: HumanEval_111_histogram
language: sh
prompt: "#!/bin/bash\n# Given a string representing a space separated lowercase letters,\
  \ return a CSV\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"',\
  \ '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"\
  ': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"\
  2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram\
  \ \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n"
tests: "}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
  ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\\
  ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
  \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
  \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
  }\n\nrun_test"
completions: ["  local -A letters\n  local letter\n  for letter in $(echo \"$1\" |\
    \ tr ' ' '\\n'); do\n    letters[\"$letter\"]=$((letters[\"$letter\"] + 1))\n\
    \  done\n  local max=0\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -gt $max ]]; then\n      max=${letters[$letter]}\n    fi\n  done\n  local -a\
    \ result\n  for letter in \"${!letters[@]}\"; do\n    if [[ ${letters[$letter]}\
    \ -eq $max ]]; then\n      result+=(\"\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \"\")\n    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"", "  local\
    \ -A letters\n  local -a max_letters\n  local max_count=0\n  local letter\n  local\
    \ count\n  local result\n\n  for letter in $1; do\n    ((letters[$letter]++))\n\
    \  done\n\n  for letter in \"${!letters[@]}\"; do\n    count=${letters[$letter]}\n\
    \    if ((count > max_count)); then\n      max_count=$count\n      max_letters=(\"\
    $letter\")\n    elif ((count == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n\n  result=\"{\"\n  for letter in \"${max_letters[@]}\"; do\n\
    \    result+=\"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if ((letter != ${max_letters[-1]}));\
    \ then\n      result+=\", \"\n    fi\n  done\n  result+=\"}\"\n\n  echo $result",
  "  local -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n\
    \    local count=${histogram[$letter]}\n    if ((count > max_count)); then\n \
    \     max_count=$count\n    fi\n  done\n  local result=()\n  for letter in \"\
    ${!histogram[@]}\"; do\n    local count=${histogram[$letter]}\n    if ((count\
    \ == max_count)); then\n      result+=(\"\\\"$letter\\\": \\\"$count\\\"\")\n\
    \    fi\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\")\"}\"", "  if [ -z\
    \ \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -A counts\n  local\
    \ max_count=0\n  for letter in $1; do\n    counts[$letter]=$((counts[$letter]\
    \ + 1))\n    if [ ${counts[$letter]} -gt $max_count ]; then\n      max_count=${counts[$letter]}\n\
    \    fi\n  done\n  local -a max_letters\n  for letter in ${!counts[@]}; do\n \
    \   if [ ${counts[$letter]} -eq $max_count ]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  echo -n \"{\"\n  for letter in ${max_letters[@]}; do\n  \
    \  echo -n \"\\\"$letter\\\": \\\"$max_count\\\"\"\n    if [ \"$letter\" != \"\
    ${max_letters[-1]}\" ]; then\n      echo -n \", \"\n    fi\n  done\n  echo \"\
    }\"", "    local -A histo\n    local -a letters\n    local -a counts\n    local\
    \ -a result\n    local letter\n    local count\n    local i\n    local j\n   \
    \ local max_count\n    local max_count_index\n    local max_count_indexes\n  \
    \  local max_count_indexes_len\n    local max_count_indexes_len_minus_one\n  \
    \  local max_count_indexes_len_minus_one_index\n    local max_count_indexes_len_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index\n    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index\n\
    \    local max_count_indexes_len_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one_index_minus_one\n\
    \    local max_count_indexes_len_minus_", "  local -A letters\n  local letter\n\
    \  local max=0\n  local -a max_letters\n  local -a result\n  for letter in $1;\
    \ do\n    ((letters[$letter]++))\n    if ((letters[$letter] > max)); then\n  \
    \    max=${letters[$letter]}\n      max_letters=(\"$letter\")\n    elif ((letters[$letter]\
    \ == max)); then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  for letter\
    \ in \"${max_letters[@]}\"; do\n    result+=(\"\\\"$letter\\\": \\\"$max\\\"\"\
    )\n  done\n  echo \"{$(IFS=,; echo \"${result[*]}\")}\"", "  local input=$1\n\
    \  local output=\"\"\n  local max=0\n  local max_letters=\"\"\n  local letter=\"\
    \"\n  local count=0\n  local counts=\"\"\n  local letter_count=\"\"\n  local letter_counts=\"\
    \"\n\n  # Count the occurrences of each letter\n  for letter in $(echo $input\
    \ | tr \" \" \"\\n\"); do\n    counts[$letter]=$(( ${counts[$letter]} + 1 ))\n\
    \  done\n\n  # Find the letter(s) with the highest count\n  for letter in ${!counts[@]};\
    \ do\n    count=${counts[$letter]}\n    if [[ $count -gt $max ]]; then\n     \
    \ max=$count\n      max_letters=$letter\n    elif [[ $count -eq $max ]]; then\n\
    \      max_letters=\"$max_letters $letter\"\n    fi\n  done\n\n  # Create the\
    \ output\n  for letter in $max_letters; do\n    letter_counts=\"$letter_counts\
    \ {\\\"$letter\\\": \\\"${counts[$letter]}\\\"}\"\n  done\n  output=\"{$letter_counts}\"\
    \n  echo $output", "    local -A histogram\n    local -a keys\n    local -a values\n\
    \    local -a max_keys\n    local max_value\n    local key\n    local value\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local", "  local -A histogram\n  local\
    \ letter\n  local max_count=0\n  local csv=()\n  for letter in $(echo \"$1\" |\
    \ tr ' ' '\\n'); do\n    ((histogram[$letter]++))\n    if ((histogram[$letter]\
    \ > max_count)); then\n      max_count=${histogram[$letter]}\n    fi\n  done\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max_count));\
    \ then\n      csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n    fi\n\
    \  done\n  echo \"{\"$(IFS=\", \"; echo \"${csv[*]}\")\"}\"", "  local -A histogram\n\
    \  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n  local -a max_letters\n\
    \  local max_count=0\n  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter]\
    \ > max_count)); then\n      max_letters=(\"$letter\")\n      max_count=${histogram[$letter]}\n\
    \    elif ((histogram[$letter] == max_count)); then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  local -a csv\n  for letter in \"${max_letters[@]}\"; do\n\
    \    csv+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n  done\n  echo\
    \ \"{$(IFS=,; echo \"${csv[*]}\")}\"", "  local -A histogram\n  for letter in\
    \ $1; do\n    histogram[$letter]=$((histogram[$letter] + 1))\n  done\n  local\
    \ max=0\n  for letter in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]}\
    \ -gt $max ]]; then\n      max=${histogram[$letter]}\n    fi\n  done\n  local\
    \ result=\"\"\n  for letter in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]}\
    \ -eq $max ]]; then\n      result=\"$result,\\\"$letter\\\": \\\"${histogram[$letter]}\\\
    \"\"\n    fi\n  done\n  echo \"{${result:1}}\"", "  local -a letters=($1)\n  local\
    \ -A letter_counts\n  local -a max_letters\n  local max_count=0\n  local -a csv_letters\n\
    \  local -a csv_counts\n  local csv_result\n\n  for letter in \"${letters[@]}\"\
    ; do\n    letter_counts[$letter]=$((letter_counts[$letter] + 1))\n  done\n\n \
    \ for letter in \"${!letter_counts[@]}\"; do\n    if [[ ${letter_counts[$letter]}\
    \ -gt $max_count ]]; then\n      max_count=${letter_counts[$letter]}\n      max_letters=(\"\
    $letter\")\n    elif [[ ${letter_counts[$letter]} -eq $max_count ]]; then\n  \
    \    max_letters+=(\"$letter\")\n    fi\n  done\n\n  for letter in \"${max_letters[@]}\"\
    ; do\n    csv_letters+=(\"$letter\")\n    csv_counts+=(\"${letter_counts[$letter]}\"\
    )\n  done\n\n  csv_result=$(join_by \":\" \"${csv_letters[@]}\")\n  csv_result=$(join_by\
    \ \":\" \"${csv_result[@]}\" \"${csv_counts[@]}\")\n  echo \"{${csv_result[@]}}\"",
  "  local -A histogram\n  local max_count=0\n  local max_letters=()\n  for letter\
    \ in $(echo \"$1\" | tr ' ' '\\n'); do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n    if [[ ${histogram[$letter]} -gt $max_count ]]; then\n      max_count=${histogram[$letter]}\n\
    \      max_letters=(\"$letter\")\n    elif [[ ${histogram[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n  local -a csv\n\
    \  for letter in \"${max_letters[@]}\"; do\n    csv+=(\"\\\"$letter\\\": \\\"\
    ${histogram[$letter]}\\\"\")\n  done\n  echo \"{\"$(IFS=,; echo \"${csv[*]}\"\
    )\"}\"", "  local -A letters\n  local letter\n  for letter in $1; do\n    letters[$letter]=$((\
    \ ${letters[$letter]} + 1 ))\n  done\n  local max=0\n  for letter in \"${!letters[@]}\"\
    ; do\n    if [[ ${letters[$letter]} -gt $max ]]; then\n      max=${letters[$letter]}\n\
    \    fi\n  done\n  local result=()\n  for letter in \"${!letters[@]}\"; do\n \
    \   if [[ ${letters[$letter]} -eq $max ]]; then\n      result+=(\"$letter\")\n\
    \    fi\n  done\n  echo \"${result[@]}\"", "  local -A histogram\n  local -a letters\n\
    \  local letter\n  local count\n  local -a max_letters\n  local max_count\n  local\
    \ -a result\n  local -a csv_result\n\n  # Convert the string to an array of letters\n\
    \  IFS=' ' read -r -a letters <<< \"$1\"\n\n  # Count the number of occurrences\
    \ of each letter\n  for letter in \"${letters[@]}\"; do\n    ((histogram[$letter]++))\n\
    \  done\n\n  # Find the maximum count\n  max_count=0\n  for count in \"${histogram[@]}\"\
    ; do\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n    fi\n\
    \  done\n\n  # Find the letters with the maximum count\n  max_letters=()\n  for\
    \ letter in \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]} -eq $max_count\
    \ ]]; then\n      max_letters+=(\"$letter\")\n    fi\n  done\n\n  # Convert the\
    \ result to a CSV\n  result=()\n  for letter in \"${max_letters[@]}\"; do\n  \
    \  result+=(\"\\\"$letter\\\": \\\"$max_count\\\"\")\n  done\n  csv_result=$(IFS=,;\
    \ echo \"${result[*]}\")\n\n  # Return the result\n  echo \"{$csv_result}\"",
  "    local -A letters\n    local -a max_letters\n    local max_count=0\n    local\
    \ csv\n    for letter in $1; do\n        ((letters[$letter]++))\n        if ((letters[$letter]\
    \ > max_count)); then\n            max_count=${letters[$letter]}\n           \
    \ max_letters=(\"$letter\")\n        elif ((letters[$letter] == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n    for letter\
    \ in \"${max_letters[@]}\"; do\n        csv+=\"{\\\"$letter\\\": \\\"${letters[$letter]}\\\
    \"},\"\n    done\n    echo \"{${csv%,}}\"", "  local -A letters\n  local -a max_letters\n\
    \  local max_count=0\n  local -a result\n  for letter in $1; do\n    if [[ -z\
    \ ${letters[$letter]} ]]; then\n      letters[$letter]=1\n    else\n      letters[$letter]=$((letters[$letter]\
    \ + 1))\n    fi\n    if [[ ${letters[$letter]} -gt $max_count ]]; then\n     \
    \ max_count=${letters[$letter]}\n      max_letters=(\"$letter\")\n    elif [[\
    \ ${letters[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"$letter\"\
    )\n    fi\n  done\n  for letter in \"${max_letters[@]}\"; do\n    result+=(\"\\\
    \"$letter\\\": \\\"${letters[$letter]}\\\"\")\n  done\n  echo \"{$(IFS=,; echo\
    \ \"${result[*]}\")}\"", "    if [ -z \"$1\" ]; then\n        echo \"{}\"\n  \
    \      return\n    fi\n    local -A letters\n    local max_count=0\n    for letter\
    \ in $1; do\n        letters[$letter]=$((letters[$letter] + 1))\n        if [\
    \ ${letters[$letter]} -gt $max_count ]; then\n            max_count=${letters[$letter]}\n\
    \        fi\n    done\n    local result=\"{\"\n    for letter in ${!letters[@]};\
    \ do\n        if [ ${letters[$letter]} -eq $max_count ]; then\n            result+=\"\
    \\\"$letter\\\": \\\"${letters[$letter]}\\\",\"\n        fi\n    done\n    echo\
    \ \"${result::-1}}\"", "  local letters=\"$1\"\n  local letter_counts=$(echo \"\
    $letters\" | tr ' ' '\\n' | sort | uniq -c)\n  local max_count=$(echo \"$letter_counts\"\
    \ | awk '{print $1}' | sort -n | tail -n 1)\n  local max_letters=$(echo \"$letter_counts\"\
    \ | awk -v max_count=\"$max_count\" '$1 == max_count {print $2}')\n  local csv=$(echo\
    \ \"$max_letters\" | tr '\\n' ',' | sed 's/,$//')\n  echo \"{\\\"$csv\\\": \\\"\
    $max_count\\\"}\"", "    local -A letters\n    local letter\n    for letter in\
    \ $1; do\n        letters[$letter]=$(( ${letters[$letter]} + 1 ))\n    done\n\
    \    local max=0\n    for letter in \"${!letters[@]}\"; do\n        if [[ ${letters[$letter]}\
    \ -gt $max ]]; then\n            max=${letters[$letter]}\n        fi\n    done\n\
    \    local result=\"\"\n    for letter in \"${!letters[@]}\"; do\n        if [[\
    \ ${letters[$letter]} -eq $max ]]; then\n            result+=\"\\\"$letter\\\"\
    : \\\"${letters[$letter]}\\\", \"\n        fi\n    done\n    echo \"{${result%,\
    \ }}\""]
stop_tokens:
- "\n}"
