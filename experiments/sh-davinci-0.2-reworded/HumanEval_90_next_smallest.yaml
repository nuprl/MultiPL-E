name: HumanEval_90_next_smallest
language: sh
prompt: "#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n# Return None if there is\
  \ no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest\
  \ \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest\
  \ \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n"
tests: "}\n\ncandidate() {\n    next_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"1 2 3 4 5\") = \"2\" ]]\n    [[ $(candidate \"5 1 4 3 2\"\
  ) = \"2\" ]]\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"1 1\"\
  ) = \"None\" ]]\n    [[ $(candidate \"1 1 1 1 0\") = \"1\" ]]\n    [[ $(candidate\
  \ \"1 1\") = \"None\" ]]\n    [[ $(candidate \"-35 34 12 -45\") = \"-35\" ]]\n}\n\
  \nrun_test"
completions: ["    if [ -z \"$1\" ]; then\n        echo \"None\"\n        return\n\
    \    fi\n    local smallest=$(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n1)\n\
    \    local second_smallest=$(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n2 |\
    \ tail -n1)\n    if [ \"$smallest\" -eq \"$second_smallest\" ]; then\n       \
    \ echo \"None\"\n    else\n        echo \"$second_smallest\"\n    fi", "  local\
    \ list=($1)\n  local smallest=${list[0]}\n  local next_smallest=${list[0]}\n \
    \ for i in ${list[@]}; do\n    if [[ $i -lt $smallest ]]; then\n      next_smallest=$smallest\n\
    \      smallest=$i\n    elif [[ $i -lt $next_smallest && $i -ne $smallest ]];\
    \ then\n      next_smallest=$i\n    fi\n  done\n  if [[ $next_smallest -eq $smallest\
    \ ]]; then\n    echo \"None\"\n  else\n    echo $next_smallest\n  fi", "    if\
    \ [ -z \"$1\" ]; then\n        echo \"None\"\n        return\n    fi\n    local\
    \ -a arr=($1)\n    local -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort\
    \ -n))\n    if [ ${#sorted[@]} -eq 1 ]; then\n        echo \"None\"\n        return\n\
    \    fi\n    echo ${sorted[1]}", "    local -a arr=($1)\n    local len=${#arr[@]}\n\
    \    if [[ $len -lt 2 ]]; then\n        echo \"None\"\n        return\n    fi\n\
    \    local min=${arr[0]}\n    local next_min=${arr[1]}\n    if [[ $min -gt $next_min\
    \ ]]; then\n        min=$next_min\n        next_min=${arr[0]}\n    fi\n    for\
    \ ((i=2; i<len; i++)); do\n        if [[ ${arr[i]} -lt $min ]]; then\n       \
    \     next_min=$min\n            min=${arr[i]}\n        elif [[ ${arr[i]} -lt\
    \ $next_min ]]; then\n            next_min=${arr[i]}\n        fi\n    done\n \
    \   echo $next_min", "    local -a arr=($1)\n    local min=${arr[0]}\n    local\
    \ min2=${arr[0]}\n    for i in ${arr[@]}; do\n        if (( i < min )); then\n\
    \            min2=$min\n            min=$i\n        elif (( i < min2 )); then\n\
    \            min2=$i\n        fi\n    done\n    if (( min == min2 )); then\n \
    \       echo \"None\"\n    else\n        echo $min2\n    fi", "    local list=($1)\n\
    \    local min=${list[0]}\n    local min2=${list[0]}\n    for i in ${list[@]};\
    \ do\n        if [[ $i -lt $min ]]; then\n            min2=$min\n            min=$i\n\
    \        elif [[ $i -lt $min2 ]]; then\n            min2=$i\n        fi\n    done\n\
    \    if [[ $min2 -eq $min ]]; then\n        echo \"None\"\n    else\n        echo\
    \ $min2\n    fi", "    if [ $# -eq 0 ]; then\n        echo \"None\"\n        return\n\
    \    fi\n    local smallest=$1\n    local second_smallest=\n    shift\n    for\
    \ i in $@; do\n        if [ $i -lt $smallest ]; then\n            second_smallest=$smallest\n\
    \            smallest=$i\n        elif [ -z $second_smallest ] || [ $i -lt $second_smallest\
    \ ]; then\n            second_smallest=$i\n        fi\n    done\n    if [ -z $second_smallest\
    \ ]; then\n        echo \"None\"\n    else\n        echo $second_smallest\n  \
    \  fi", "    local -a arr=($1)\n    local min=${arr[0]}\n    local min2=${arr[0]}\n\
    \    local i=0\n    for i in ${arr[@]}; do\n        if (( $i < $min )); then\n\
    \            min2=$min\n            min=$i\n        elif (( $i < $min2 )); then\n\
    \            min2=$i\n        fi\n    done\n    if (( $min2 == $min )); then\n\
    \        echo \"None\"\n    else\n        echo $min2\n    fi", "    local -a arr\n\
    \    local -i i\n    local -i min\n    local -i min2\n    local -i n\n    local\
    \ -i tmp\n\n    arr=($1)\n    n=${#arr[@]}\n    if ((n < 2)); then\n        echo\
    \ \"None\"\n        return\n    fi\n\n    min=${arr[0]}\n    min2=${arr[1]}\n\
    \    if ((min > min2)); then\n        tmp=min\n        min=min2\n        min2=tmp\n\
    \    fi\n\n    for ((i=2; i<n; i++)); do\n        if ((arr[i] < min)); then\n\
    \            min2=min\n            min=arr[i]\n        elif ((arr[i] < min2));\
    \ then\n            min2=arr[i]\n        fi\n    done\n\n    echo \"$min2\"",
  "  if [ -z \"$1\" ]; then\n    echo \"None\"\n    return\n  fi\n  local smallest=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local second_smallest=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | head -n 2 | tail -n 1)\n  if [ \"$smallest\"\
    \ = \"$second_smallest\" ]; then\n    echo \"None\"\n  else\n    echo \"$second_smallest\"\
    \n  fi", "    if [ $# -eq 0 ]; then\n        echo \"None\"\n        return\n \
    \   fi\n    local -a arr=($@)\n    local -a sorted=($(echo ${arr[@]} | tr ' '\
    \ '\\n' | sort -n))\n    if [ ${#sorted[@]} -eq 1 ]; then\n        echo \"None\"\
    \n        return\n    fi\n    echo ${sorted[1]}", "  local -a arr=($1)\n  local\
    \ -a sorted=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n))\n  local -a uniq=($(echo\
    \ \"${sorted[@]}\" | tr ' ' '\\n' | uniq))\n  if [ ${#uniq[@]} -gt 1 ]; then\n\
    \    echo ${uniq[1]}\n  else\n    echo \"None\"\n  fi", "  local -a array\n  local\
    \ -i i\n  local -i min\n  local -i min2\n  local -i n\n  local -i size\n  local\
    \ -i tmp\n\n  # Convert space-separated list to array\n  array=($1)\n  size=${#array[@]}\n\
    \n  # Check for empty array\n  if [[ $size -eq 0 ]]; then\n    echo \"None\"\n\
    \    return\n  fi\n\n  # Check for single element\n  if [[ $size -eq 1 ]]; then\n\
    \    echo \"None\"\n    return\n  fi\n\n  # Find minimum\n  min=${array[0]}\n\
    \  for ((i=1; i<size; i++)); do\n    tmp=${array[i]}\n    if [[ $tmp -lt $min\
    \ ]]; then\n      min=$tmp\n    fi\n  done\n\n  # Find second minimum\n  min2=${array[0]}\n\
    \  for ((i=1; i<size; i++)); do\n    tmp=${array[i]}\n    if [[ $tmp -gt $min\
    \ ]] && [[ $tmp -lt $min2 ]]; then\n      min2=$tmp\n    fi\n  done\n\n  # Check\
    \ for single minimum\n  if [[ $min2 -eq $min ]]; then\n    echo \"None\"\n   \
    \ return\n  fi\n\n  echo $min2", "    if [ -z \"$1\" ]; then\n        echo \"\
    None\"\n        return\n    fi\n    local smallest=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n | head -n 1)\n    local second_smallest=$(echo \"$1\" | tr ' ' '\\\
    n' | sort -n | head -n 2 | tail -n 1)\n    if [ \"$smallest\" -eq \"$second_smallest\"\
    \ ]; then\n        echo \"None\"\n    else\n        echo \"$second_smallest\"\n\
    \    fi", "    local -a arr=($1)\n    local min=${arr[0]}\n    local min2=${arr[0]}\n\
    \    for i in ${arr[@]}; do\n        if [[ $i -lt $min ]]; then\n            min2=$min\n\
    \            min=$i\n        elif [[ $i -lt $min2 ]]; then\n            min2=$i\n\
    \        fi\n    done\n    if [[ $min2 -eq $min ]]; then\n        echo \"None\"\
    \n    else\n        echo $min2\n    fi", "  local -a arr=($1)\n  local min=${arr[0]}\n\
    \  local min2=${arr[0]}\n  for i in ${arr[@]}; do\n    if (( $i < $min )); then\n\
    \      min2=$min\n      min=$i\n    elif (( $i < $min2 && $i != $min )); then\n\
    \      min2=$i\n    fi\n  done\n  if (( $min2 == $min )); then\n    echo \"None\"\
    \n  else\n    echo $min2\n  fi", "    if [ -z \"$1\" ]; then\n        echo \"\
    None\"\n        return\n    fi\n    local -a arr=($1)\n    local min=${arr[0]}\n\
    \    local min2=${arr[0]}\n    for i in ${arr[@]}; do\n        if [ $i -lt $min\
    \ ]; then\n            min2=$min\n            min=$i\n        elif [ $i -lt $min2\
    \ ]; then\n            min2=$i\n        fi\n    done\n    if [ $min2 -eq $min\
    \ ]; then\n        echo \"None\"\n    else\n        echo $min2\n    fi", "   \
    \ local -a arr=($1)\n    local min=${arr[0]}\n    local next_min=${arr[0]}\n \
    \   for i in ${arr[@]}; do\n        if [[ $i -lt $min ]]; then\n            next_min=$min\n\
    \            min=$i\n        elif [[ $i -lt $next_min && $i -ne $min ]]; then\n\
    \            next_min=$i\n        fi\n    done\n    if [[ $next_min -eq $min ]];\
    \ then\n        echo \"None\"\n    else\n        echo $next_min\n    fi", "  \
    \  if [ $# -eq 0 ]; then\n        echo \"None\"\n        return\n    fi\n    local\
    \ -a arr\n    local -i i=0\n    for x in $1; do\n        arr[i++]=$x\n    done\n\
    \    if [ ${#arr[@]} -eq 1 ]; then\n        echo \"None\"\n        return\n  \
    \  fi\n    local -i min1=${arr[0]}\n    local -i min2=${arr[1]}\n    if [ $min1\
    \ -gt $min2 ]; then\n        min1=$min2\n        min2=${arr[0]}\n    fi\n    for\
    \ ((i=2; i<${#arr[@]}; i++)); do\n        if [ ${arr[i]} -lt $min1 ]; then\n \
    \           min2=$min1\n            min1=${arr[i]}\n        elif [ ${arr[i]} -lt\
    \ $min2 ]; then\n            min2=${arr[i]}\n        fi\n    done\n    echo $min2",
  "    local list=\"$1\"\n    local smallest=\"\"\n    local next_smallest=\"\"\n\
    \    for i in $list; do\n        if [[ -z \"$smallest\" ]]; then\n           \
    \ smallest=\"$i\"\n        elif [[ \"$i\" -lt \"$smallest\" ]]; then\n       \
    \     next_smallest=\"$smallest\"\n            smallest=\"$i\"\n        elif [[\
    \ -z \"$next_smallest\" ]]; then\n            next_smallest=\"$i\"\n        elif\
    \ [[ \"$i\" -lt \"$next_smallest\" ]]; then\n            next_smallest=\"$i\"\n\
    \        fi\n    done\n    if [[ -z \"$next_smallest\" ]]; then\n        echo\
    \ \"None\"\n    else\n        echo \"$next_smallest\"\n    fi"]
stop_tokens:
- "\n}"
