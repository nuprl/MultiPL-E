name: HumanEval_112_reverse_delete
language: sh
prompt: "#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n# then check if\
  \ the result string is palindrome.\n# A string is called palindrome if it reads\
  \ the same backward as forward.\n# You should return a list containing the result\
  \ string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\"\
  \ \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n\
  # ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"\
  cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n"
tests: "}\n\ncandidate() {\n    reverse_delete \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"abcde\" \"ae\") = \"bcd false\" ]]\n    [[ $(candidate \"\
  abcdef\" \"b\") = \"acdef false\" ]]\n    [[ $(candidate \"abcdedcba\" \"ab\") =\
  \ \"cdedc true\" ]]\n    [[ $(candidate \"dwik\" \"w\") = \"dik false\" ]]\n   \
  \ [[ $(candidate \"a\" \"a\") = \" true\" ]]\n    [[ $(candidate \"abcdedcba\" \"\
  \") = \"abcdedcba true\" ]]\n    [[ $(candidate \"abcdedcba\" \"v\") = \"abcdedcba\
  \ true\" ]]\n    [[ $(candidate \"vabba\" \"v\") = \"abba true\" ]]\n    [[ $(candidate\
  \ \"mamma\" \"mia\") = \" true\" ]]\n}\n\nrun_test"
completions: ["    local s=$1\n    local c=$2\n    local res=''\n    for ((i=0; i<${#s};\
    \ i++)); do\n        if [[ ! $c =~ ${s:$i:1} ]]; then\n            res+=\"${s:$i:1}\"\
    \n        fi\n    done\n    local is_palindrome=false\n    if [[ $res == $(rev\
    \ <<< $res) ]]; then\n        is_palindrome=true\n    fi\n    echo \"[\\\"$res\\\
    \", \\\"$is_palindrome\\\"]\"", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    echo \"Hello world\"", "  local s=$1\n  local c=$2\n  local result=\"\"\n\
    \  local is_palindrome=\"false\"\n  for ((i=0; i<${#s}; i++)); do\n    local char=${s:$i:1}\n\
    \    if [[ $c != *\"$char\"* ]]; then\n      result+=\"$char\"\n    fi\n  done\n\
    \  if [[ $result == $(rev <<< $result) ]]; then\n    is_palindrome=\"true\"\n\
    \  fi\n  echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "    local s=\"\
    $1\"\n    local c=\"$2\"\n    local result=\"\"\n    local is_palindrome=\"false\"\
    \n    for ((i=0; i<${#s}; i++)); do\n        local char=${s:$i:1}\n        if\
    \ [[ $c != *\"$char\"* ]]; then\n            result+=\"$char\"\n        fi\n \
    \   done\n    if [[ $result == $(rev <<< $result) ]]; then\n        is_palindrome=\"\
    true\"\n    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "   \
    \ local result=$(echo $1 | tr -d $2)\n    local is_palindrome=$(echo $result |\
    \ rev)\n    if [ \"$result\" == \"$is_palindrome\" ]; then\n        echo \"[\\\
    \"$result\\\", \\\"true\\\"]\"\n    else\n        echo \"[\\\"$result\\\", \\\"\
    false\\\"]\"\n    fi", "    local result=$(echo $1 | tr -d $2)\n    local is_palindrome=$(echo\
    \ $result | rev)\n    if [ \"$result\" == \"$is_palindrome\" ]; then\n       \
    \ echo \"[\\\"$result\\\", \\\"true\\\"]\"\n    else\n        echo \"[\\\"$result\\\
    \", \\\"false\\\"]\"\n    fi", "    local s=$1\n    local c=$2\n    local result=\"\
    \"\n    local is_palindrome=\"false\"\n    for ((i=0; i<${#s}; i++)); do\n   \
    \     local char=${s:$i:1}\n        if [[ $c =~ $char ]]; then\n            continue\n\
    \        fi\n        result+=$char\n    done\n    if [[ $result == $(rev <<< $result)\
    \ ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"$result\\\"\
    , \\\"$is_palindrome\\\"]\"", "    local s=$1\n    local c=$2\n    local res=\"\
    \"\n    for ((i=0; i<${#s}; i++)); do\n        local found=0\n        for ((j=0;\
    \ j<${#c}; j++)); do\n            if [[ ${s:$i:1} == ${c:$j:1} ]]; then\n    \
    \            found=1\n                break\n            fi\n        done\n  \
    \      if [[ $found -eq 0 ]]; then\n            res+=\"${s:$i:1}\"\n        fi\n\
    \    done\n    local is_palindrome=0\n    for ((i=0; i<${#res}; i++)); do\n  \
    \      if [[ ${res:$i:1} != ${res:${#res}-1-$i:1} ]]; then\n            is_palindrome=1\n\
    \            break\n        fi\n    done\n    echo \"[\\\"$res\\\", \\\"$is_palindrome\\\
    \"]\"", "    local s=$1\n    local c=$2\n    local res=\"\"\n    local is_palindrome=\"\
    false\"\n    for (( i=0; i<${#s}; i++ )); do\n        if [[ ! $c =~ ${s:$i:1}\
    \ ]]; then\n            res+=${s:$i:1}\n        fi\n    done\n    if [[ $res ==\
    \ $(rev <<< $res) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"\
    [\\\"$res\\\", \\\"$is_palindrome\\\"]\"", "    local s=$1\n    local c=$2\n \
    \   local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ! $c =~\
    \ ${s:$i:1} ]]; then\n            result+=${s:$i:1}\n        fi\n    done\n  \
    \  local is_palindrome=\"false\"\n    if [[ $result == $(rev <<< $result) ]];\
    \ then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"$result\\\", \\\
    \"$is_palindrome\\\"]\"", "  local s=$1\n  local c=$2\n  local res=\"\"\n  for\
    \ ((i=0; i<${#s}; i++)); do\n    local char=${s:$i:1}\n    if [[ $c != *\"$char\"\
    * ]]; then\n      res+=$char\n    fi\n  done\n  local is_palindrome=\"false\"\n\
    \  if [[ $res == $(rev <<< $res) ]]; then\n    is_palindrome=\"true\"\n  fi\n\
    \  echo \"[\\\"$res\\\", \\\"$is_palindrome\\\"]\"", "  local string=$1\n  local\
    \ chars=$2\n  local result=\"\"\n  for ((i=0; i<${#string}; i++)); do\n    local\
    \ char=${string:$i:1}\n    if [[ $chars != *\"$char\"* ]]; then\n      result+=$char\n\
    \    fi\n  done\n  local is_palindrome=true\n  for ((i=0; i<${#result}; i++));\
    \ do\n    local char=${result:$i:1}\n    local rev_char=${result: -$((i+1)):1}\n\
    \    if [[ $char != $rev_char ]]; then\n      is_palindrome=false\n      break\n\
    \    fi\n  done\n  echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "    local\
    \ result=\"\"\n    local is_palindrome=\"false\"\n    for (( i=0; i<${#1}; i++\
    \ )); do\n        if [[ ! \"$2\" =~ \"${1:$i:1}\" ]]; then\n            result=\"\
    $result${1:$i:1}\"\n        fi\n    done\n    if [[ \"$result\" == $(rev <<< \"\
    $result\") ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"\
    $result\\\", \\\"$is_palindrome\\\"]\"", "    local str=$1\n    local del=$2\n\
    \    local res=''\n    for ((i=0; i<${#str}; i++)); do\n        if [[ $del !=\
    \ *\"${str:$i:1}\"* ]]; then\n            res+=\"${str:$i:1}\"\n        fi\n \
    \   done\n    local palindrome=false\n    for ((i=0; i<${#res}/2; i++)); do\n\
    \        if [[ \"${res:$i:1}\" != \"${res:${#res}-1-$i:1}\" ]]; then\n       \
    \     palindrome=false\n            break\n        else\n            palindrome=true\n\
    \        fi\n    done\n    echo \"[\\\"$res\\\", \\\"$palindrome\\\"]\"", "  \
    \  local str1=$1\n    local str2=$2\n    local res=\"\"\n    local is_palindrome=\"\
    false\"\n    for ((i=0; i<${#str1}; i++)); do\n        local char=${str1:$i:1}\n\
    \        local is_found=false\n        for ((j=0; j<${#str2}; j++)); do\n    \
    \        local char2=${str2:$j:1}\n            if [[ $char == $char2 ]]; then\n\
    \                is_found=true\n                break\n            fi\n      \
    \  done\n        if [[ $is_found == false ]]; then\n            res+=$char\n \
    \       fi\n    done\n    local len=${#res}\n    for ((i=0; i<$len; i++)); do\n\
    \        local char=${res:$i:1}\n        local char2=${res:$((len-i-1)):1}\n \
    \       if [[ $char != $char2 ]]; then\n            is_palindrome=\"false\"\n\
    \            break\n        fi\n    done\n    if [[ $is_palindrome == \"false\"\
    \ ]]; then\n        echo \"[\\\"$res\\\", \\\"$is_palindrome\\\"]\"\n    else\n\
    \        echo \"[\\\"$res\\\", \\\"$is_palindrome\\\"]\"\n    fi", "    local\
    \ result=$(echo $1 | sed \"s/[$2]//g\")\n    local is_palindrome=$(echo $result\
    \ | rev)\n    if [ \"$result\" == \"$is_palindrome\" ]; then\n        echo \"\
    [\\\"$result\\\", \\\"true\\\"]\"\n    else\n        echo \"[\\\"$result\\\",\
    \ \\\"false\\\"]\"\n    fi", "    local result=\"\"\n    local is_palindrome=\"\
    false\"\n    local s=$1\n    local c=$2\n    for (( i=0; i<${#s}; i++ )); do\n\
    \        local char=${s:$i:1}\n        if [[ $c != *\"$char\"* ]]; then\n    \
    \        result+=\"$char\"\n        fi\n    done\n    if [[ $result == $(rev <<<\
    \ $result) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"\
    $result\\\", \\\"$is_palindrome\\\"]\"", "    local result=$(echo $1 | sed \"\
    s/[$2]//g\")\n    local is_palindrome=$(echo $result | rev)\n    if [ \"$result\"\
    \ == \"$is_palindrome\" ]; then\n        echo \"[\\\"$result\\\", \\\"true\\\"\
    ]\"\n    else\n        echo \"[\\\"$result\\\", \\\"false\\\"]\"\n    fi", " \
    \   local result=\"\"\n    for ((i=0; i<${#1}; i++)); do\n        local char=${1:i:1}\n\
    \        if [[ $2 != *\"$char\"* ]]; then\n            result+=\"$char\"\n   \
    \     fi\n    done\n    local is_palindrome=\"false\"\n    if [[ $result == $(rev\
    \ <<< $result) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\
    \"$result\\\", \\\"$is_palindrome\\\"]\"", "    local result=\"\"\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        local char=${1:i:1}\n        if [[ ! $2 =~ $char\
    \ ]]; then\n            result+=$char\n        fi\n    done\n    echo \"[\\\"\
    $result\\\", \\\"$(is_palindrome $result)\\\"]\""]
stop_tokens:
- "\n}"
