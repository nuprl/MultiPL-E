name: HumanEval_47_median
language: sh
prompt: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"\
  3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n#\
  \ $1 is a space-separated list\nmedian() {\n"
tests: "}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
  \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
  \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
completions: ["    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n    local\
    \ s=${l[$m]}\n    if ((n%2==0)); then\n        s=$(echo \"scale=1; (${l[$m-1]}+$s)/2\"\
    \ | bc)\n    fi\n    echo $s", "  local l=($1)\n  local m=$((${#l[@]} / 2))\n\
    \  local s=$(printf \"%s\\n\" \"${l[@]}\" | sort -n)\n  local v=($s)\n  if ((\
    \ ${#l[@]} % 2 == 1 )); then\n    echo ${v[$m]}\n  else\n    echo $(( (${v[$m-1]}\
    \ + ${v[$m]}) / 2 ))\n  fi", "    local l=($1)\n    local m=$((${#l[@]} / 2))\n\
    \    local s=${l[$m]}\n    if ((${#l[@]} % 2 == 0)); then\n        s=$(echo \"\
    scale=1; (${l[$m-1]} + $s) / 2\" | bc)\n    fi\n    echo $s", "    local l=$1\n\
    \    local n=$(echo \"$l\" | wc -w)\n    local m=$((n/2))\n    local s=$(echo\
    \ \"$l\" | tr ' ' '\\n' | sort -n | sed -n \"$m p\")\n    if [ $((n%2)) -eq 0\
    \ ]; then\n        local s2=$(echo \"$l\" | tr ' ' '\\n' | sort -n | sed -n \"\
    $((m-1)) p\")\n        echo \"scale=1; ($s+$s2)/2\" | bc\n    else\n        echo\
    \ \"$s\"\n    fi", "  local l=($1)\n  local m=$((${#l[@]} / 2))\n  local s=$(printf\
    \ \"%s\\n\" \"${l[@]}\" | sort -n)\n  local r=$(echo \"$s\" | sed -n \"${m}p\"\
    )\n  if (( ${#l[@]} % 2 == 0 )); then\n    r=$(echo \"$r + $(echo \"$s\" | sed\
    \ -n \"$((m + 1))p\")\" | bc -l)\n    r=$(echo \"$r / 2\" | bc -l)\n  fi\n  echo\
    \ \"$r\"", "    local l=($1)\n    local m=${#l[@]}\n    local n=$((m/2))\n   \
    \ local o=$((n-1))\n    local p=$((n+1))\n    local q=$((m%2))\n    local r=$(echo\
    \ \"scale=1; (${l[$n]}+${l[$o]})/2\" | bc)\n    local s=$(echo \"scale=1; (${l[$n]}+${l[$p]})/2\"\
    \ | bc)\n    local t=$(echo \"scale=1; ${l[$n]}\" | bc)\n    if [ $q -eq 0 ];\
    \ then\n        echo $r\n    else\n        echo $s\n    fi", "    local l=($1)\n\
    \    local n=${#l[@]}\n    local m=$((n/2))\n    local r\n    if ((n%2==0)); then\n\
    \        r=$(echo \"${l[m-1]} ${l[m]}\" | awk '{print ($1+$2)/2}')\n    else\n\
    \        r=${l[m]}\n    fi\n    echo $r", "    local l=($1)\n    local m=$(( ${#l[@]}\
    \ / 2 ))\n    local s=${l[$m]}\n    (( ${#l[@]} % 2 == 0 )) && s=$(echo \"scale=1;\
    \ (${l[$m-1]} + $s) / 2\" | bc -l)\n    echo $s", "  local l=($1)\n  local m=${#l[@]}\n\
    \  local i=0\n  local sum=0\n  local s=()\n  for i in ${l[@]}; do\n    sum=$(echo\
    \ \"$sum + $i\" | bc)\n    s[${#s[@]}]=$i\n  done\n  local avg=$(echo \"scale=2;\
    \ $sum / $m\" | bc)\n  echo $avg", "    local l=($1)\n    local n=${#l[@]}\n \
    \   local m=$((n/2))\n    local s\n    if ((n%2==0)); then\n        s=$(echo \"\
    scale=1;(${l[m-1]}+${l[m]})/2\" | bc)\n    else\n        s=${l[m]}\n    fi\n \
    \   echo $s", "  local l=($1)\n  local m=${#l[@]}\n  local n=$((m/2))\n  local\
    \ s=${l[$n]}\n  ((m%2==0)) && s=$(echo \"scale=1;(${l[$n-1]}+$s)/2\" | bc)\n \
    \ echo $s", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n / 2))\n\
    \    if ((n % 2 == 0)); then\n        echo \"$(echo \"scale=1; (${l[m - 1]} +\
    \ ${l[m]}) / 2\" | bc -l)\"\n    else\n        echo \"${l[m]}\"\n    fi", "  \
    \  local l=($1)\n    local m=$((${#l[@]}/2))\n    local s=$((${#l[@]}%2))\n  \
    \  local r=$(echo \"${l[@]}\" | tr ' ' '\\n' | sort -n | sed -n \"${m}p\")\n \
    \   if [ $s -eq 0 ]; then\n        local r2=$(echo \"${l[@]}\" | tr ' ' '\\n'\
    \ | sort -n | sed -n \"$((${m}+1))p\")\n        echo \"$(echo \"scale=1; ($r+$r2)/2\"\
    \ | bc -l)\"\n    else\n        echo \"$r\"\n    fi", "    local l=($1)\n    local\
    \ n=$((${#l[@]}-1))\n    local m=$(($n/2))\n    local s=${l[$m]}\n    if (( $n%2\
    \ == 0 )); then\n        s=$(echo \"scale=1; (${l[$m]}+${l[$m+1]})/2\" | bc)\n\
    \    fi\n    echo $s", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n/2))\n\
    \    local s=${l[$m]}\n    if ((n%2==0)); then\n        s=$(echo \"scale=1; (${l[$m-1]}+$s)/2\"\
    \ | bc)\n    fi\n    echo $s", "  local l=($1)\n  local m=$(( ${#l[@]} / 2 ))\n\
    \  local s=${l[$m]}\n  if (( ${#l[@]} % 2 == 0 )); then\n    s=$(echo \"scale=1;(${l[$m-1]}\
    \ + $s) / 2\" | bc)\n  fi\n  echo $s", "    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local t=0\n    local s=0\n \
    \   local r=0\n    local p=0\n    local q=0\n    local n=0\n    local o=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n   \
    \ local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local\
    \ h=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n\
    \    local z=0\n    local aa=0\n    local ab=0\n    local ac=0\n    local ad=0\n\
    \    local ae=0\n    local af=0\n    local ag=0\n    local ah=0\n    local ai=0\n\
    \    local aj=0\n    local ak=0\n    local al=0\n    local am=0\n    local an=0\n\
    \    local ao=0\n    local ap=0\n    local aq=0\n    local ar=0\n    local as=0\n\
    \    local at=0\n    local au=0\n    local av=0\n    local aw=0\n    local ax=0\n\
    \    local ay=0\n    local az=0\n    local ba=0\n    local bb=0\n    local bc=0\n\
    \    local bd=0\n    local be=0\n    local bf=0\n    local bg=0\n    local bh=0\n\
    \    local bi=0\n    local bj=0\n    local bk=0\n    local bl=0\n    local bm=0\n\
    \    local bn=0\n    local bo=0\n    local bp=0\n    local bq=0\n    local br=0\n\
    \    local bs=0\n    local bt=0\n    local bu=0\n    local bv=0\n    local bw=0\n\
    \    local bx=0\n    local by=0\n    local", "    local l=($1)\n    local m=${#l[@]}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local tmp=0\n    local median=0\n\
    \    for ((i=0; i<m; i++)); do\n        for ((j=i; j<m; j++)); do\n          \
    \  if ((${l[i]} > ${l[j]})); then\n                tmp=${l[i]}\n             \
    \   l[i]=${l[j]}\n                l[j]=$tmp\n            fi\n        done\n  \
    \  done\n    if ((m % 2 == 1)); then\n        k=$(((m+1)/2))\n        median=${l[k-1]}\n\
    \    else\n        k=$((m/2))\n        median=$(echo \"scale=1; (${l[k-1]}+${l[k]})/2\"\
    \ | bc)\n    fi\n    echo $median", "    local l=($1)\n    local n=${#l[@]}\n\
    \    local m=$((n / 2))\n    local s=$(printf \"%s\\n\" \"${l[@]}\" | sort -n)\n\
    \    local r\n    if ((n % 2)); then\n        r=$(echo \"$s\" | sed -n \"$((m\
    \ + 1))p\")\n    else\n        r=$(echo \"$s\" | sed -n \"$((m - 1))p\" | awk\
    \ '{print $1 + $2}')\n        r=$(echo \"$r / 2\" | bc -l)\n    fi\n    echo \"\
    $r\"", "    local l=($1)\n    local n=${#l[@]}\n    local m=$((n / 2))\n    local\
    \ s=${l[$m]}\n    if ((n % 2 == 0)); then\n        s=$(echo \"scale=1; (${l[$m\
    \ - 1]} + $s) / 2\" | bc)\n    fi\n    echo $s"]
stop_tokens:
- "\n}"
