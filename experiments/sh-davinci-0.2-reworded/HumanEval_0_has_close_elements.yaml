name: HumanEval_0_has_close_elements
language: sh
prompt: "#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer\
  \ to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\"\
  \ \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\"\
  \ \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\n\
  has_close_elements() {\n"
tests: "}\n\ncandidate() {\n    has_close_elements \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.3\") = \"true\" ]]\n   \
  \ [[ $(candidate \"1.0 2.0 3.9 4.0 5.0 2.2\" \"0.05\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1.0 2.0 5.9 4.0 5.0\" \"0.95\") = \"true\" ]]\n    [[ $(candidate \"1.0 2.0\
  \ 5.9 4.0 5.0\" \"0.8\") = \"false\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\
  \ 2.0\" \"0.1\") = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"1.0\"\
  ) = \"true\" ]]\n    [[ $(candidate \"1.1 2.2 3.1 4.1 5.1\" \"0.5\") = \"false\"\
  \ ]]\n}\n\nrun_test"
completions: ["    local list=\"$1\"\n    local threshold=\"$2\"\n    local -a array=($list)\n\
    \    local -a diffs\n    local i\n    local j\n    local diff\n    local -i n\n\
    \    local -i m\n    local -i k\n    local -i l\n    local -i min_diff_index\n\
    \    local -i min_diff\n    local -i min_diff_i\n    local -i min_diff_j\n   \
    \ local -i min_diff_k\n    local -i min_diff_l\n    local -i min_diff_n\n    local\
    \ -i min_diff_m\n    local -i min_diff_index_i\n    local -i min_diff_index_j\n\
    \    local -i min_diff_index_k\n    local -i min_diff_index_l\n    local -i min_diff_index_n\n\
    \    local -i min_diff_index_m\n    local -i min_diff_index_i_j\n    local -i\
    \ min_diff_index_k_l\n    local -i min_diff_index_n_m\n    local -i min_diff_index_i_j_k_l\n\
    \    local -i min_diff_index_n_m_k_l\n    local -i min_diff_index_i_j_n_m\n  \
    \  local -i min_diff_index_i_j_n_m_k_l\n    local -i min_diff_index_i_j_n_m_k_l_i_j_n_m_k_l\n\
    \    local -i min_diff_index_i_j_n_m_k_l_i_j_n_m_k_l_i_j_n_m_k_l\n    local -i\
    \ min_diff_index_i_j_n_m_k_l_i_j_n_m_k_l_i_j_n_m_k_l_i_j_n_m_k_l\n    local -i\
    \ min_diff_index_i_j_n_m_k_l_i_j_n_m_k_l_i_", "    local numbers=\"$1\"\n    local\
    \ threshold=\"$2\"\n    local i\n    local j\n    local diff\n    for i in $numbers;\
    \ do\n        for j in $numbers; do\n            diff=$(echo \"$i - $j\" | bc\
    \ -l)\n            if [ $(echo \"$diff < 0\" | bc -l) -eq 1 ]; then\n        \
    \        diff=$(echo \"$diff * -1\" | bc -l)\n            fi\n            if [\
    \ $(echo \"$diff < $threshold\" | bc -l) -eq 1 ]; then\n                echo \"\
    true\"\n                return\n            fi\n        done\n    done\n    echo\
    \ \"false\"", "    local list=\"$1\"\n    local threshold=\"$2\"\n    local -a\
    \ numbers=($list)\n    local -i n_numbers=${#numbers[@]}\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i l\n    local -i n_close_elements=0\n\
    \    local -i n_close_elements_max=0\n    local -i n_close_elements_max_i=0\n\
    \    local -i n_close_elements_max_j=0\n    for ((i=0; i<n_numbers; i++)); do\n\
    \        for ((j=i+1; j<n_numbers; j++)); do\n            n_close_elements=0\n\
    \            for ((k=i; k<=j; k++)); do\n                for ((l=k+1; l<=j; l++));\
    \ do\n                    if [[ $(echo \"${numbers[k]} ${numbers[l]} $threshold\"\
    \ | awk '{print ($1-$2)<$3}') == \"1\" ]]; then\n                        n_close_elements=$((n_close_elements+1))\n\
    \                    fi\n                done\n            done\n            if\
    \ [[ $n_close_elements -gt $n_close_elements_max ]]; then\n                n_close_elements_max=$n_close_elements\n\
    \                n_close_elements_max_i=$i\n                n_close_elements_max_j=$j\n\
    \            fi\n        done\n    done\n    if [[ $n_close_elements_max -gt 0\
    \ ]]; then\n        echo \"true\"\n        echo \"n_close_elements_max=$n_close_elements_max\"\
    \n        echo \"n_close_elements_max_i=$n_close_elements_max_i\"\n        echo\
    \ \"n_close_elements_max_j=$n_close_elements_max_j\"\n    else\n        echo \"\
    false\"\n    fi", "  local list=\"$1\"\n  local threshold=\"$2\"\n  local -a nums=($list)\n\
    \  local i\n  local j\n  for ((i=0; i<${#nums[@]}; i++)); do\n    for ((j=i+1;\
    \ j<${#nums[@]}; j++)); do\n      if [[ $(echo \"${nums[$i]} ${nums[$j]} $threshold\"\
    \ | awk '{print ($1-$2)<$3}') == \"1\" ]]; then\n        echo \"true\"\n     \
    \   return\n      fi\n    done\n  done\n  echo \"false\"", "    local list=\"\
    $1\"\n    local threshold=\"$2\"\n    local elements=($list)\n    local i\n  \
    \  local j\n    for ((i=0; i<${#elements[@]}; i++)); do\n        for ((j=i+1;\
    \ j<${#elements[@]}; j++)); do\n            if (( $(echo \"${elements[$i]} - ${elements[$j]}\
    \ < $threshold\" | bc -l) )); then\n                echo \"true\"\n          \
    \      return\n            fi\n        done\n    done\n    echo \"false\"", " \
    \   local list=$1\n    local threshold=$2\n    local i=0\n    local j=0\n    local\
    \ n=$(echo $list | wc -w)\n    local a=()\n    for i in $list; do\n        a[$i]=$i\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            if (( $(echo \"${a[$i]} - ${a[$j]} < $threshold\" | bc -l) )); then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n    done\n    echo \"false\"", "    local -a numbers\n    local -a sorted_numbers\n\
    \    local -a diffs\n    local -a sorted_diffs\n    local -a close_diffs\n   \
    \ local -a close_numbers\n    local -a close_pairs\n    local -a close_pairs_str\n\
    \    local -a close_pairs_str_sorted\n    local -a close_pairs_str_sorted_uniq\n\
    \    local -a close_pairs_str_sorted_uniq_str\n    local -a close_pairs_str_sorted_uniq_str_sorted\n\
    \    local -a close_pairs_str_sorted_uniq_str_sorted_uniq\n    local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str\n\
    \    local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted\n    local\
    \ -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq\n    local -a\
    \ close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str\n    local -a\
    \ close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted\n   \
    \ local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq\n\
    \    local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str\n\
    \    local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted\n\
    \    local -a close_pairs_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq_str_sorted_uniq\n\
    \    local -", "    local list=\"$1\"\n    local threshold=\"$2\"\n    local -a\
    \ array=()\n    local i=0\n    local j=0\n    local n=0\n    local diff=0\n  \
    \  local -a array=($list)\n    n=${#array[@]}\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=i+1; j<n; j++)); do\n            diff=$(echo \"${array[i]} -\
    \ ${array[j]}\" | bc -l)\n            if [[ $(echo \"$diff < 0\" | bc -l) -eq\
    \ 1 ]]; then\n                diff=$(echo \"$diff * -1\" | bc -l)\n          \
    \  fi\n            if [[ $(echo \"$diff < $threshold\" | bc -l) -eq 1 ]]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n    done\n    echo \"false\"", "    local numbers=\"$1\"\n    local\
    \ threshold=\"$2\"\n    local has_close_elements=\"false\"\n    local number_array=($numbers)\n\
    \    local i\n    local j\n    for ((i=0; i<${#number_array[@]}; i++)); do\n \
    \       for ((j=i+1; j<${#number_array[@]}; j++)); do\n            if [[ $(echo\
    \ \"${number_array[$i]} - ${number_array[$j]} < $threshold\" | bc -l) -eq 1 ]];\
    \ then\n                has_close_elements=\"true\"\n                break\n \
    \           fi\n        done\n    done\n    echo \"$has_close_elements\"", " \
    \   local list=$1\n    local threshold=$2\n    local num_elements=$(echo \"$list\"\
    \ | wc -w)\n    local i=1\n    local j=1\n    local a=0\n    local b=0\n    local\
    \ diff=0\n    while [ $i -le $num_elements ]; do\n        a=$(echo \"$list\" |\
    \ cut -d \" \" -f $i)\n        j=$((i + 1))\n        while [ $j -le $num_elements\
    \ ]; do\n            b=$(echo \"$list\" | cut -d \" \" -f $j)\n            diff=$(echo\
    \ \"$a - $b\" | bc -l)\n            if [ $(echo \"$diff < 0\" | bc -l) -eq 1 ];\
    \ then\n                diff=$(echo \"$diff * -1\" | bc -l)\n            fi\n\
    \            if [ $(echo \"$diff < $threshold\" | bc -l) -eq 1 ]; then\n     \
    \           echo \"true\"\n                return\n            fi\n          \
    \  j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo \"false\"",
  "    local list=\"$1\"\n    local threshold=\"$2\"\n    local -a array=($list)\n\
    \    local -i i\n    local -i j\n    local -i n\n    local -i m\n    local -i\
    \ result=0\n    local -i len=${#array[@]}\n    local -i len_minus_1=$((len - 1))\n\
    \    local -i len_minus_2=$((len - 2))\n    local -i len_minus_3=$((len - 3))\n\
    \    local -i len_minus_4=$((len - 4))\n    local -i len_minus_5=$((len - 5))\n\
    \    local -i len_minus_6=$((len - 6))\n    local -i len_minus_7=$((len - 7))\n\
    \    local -i len_minus_8=$((len - 8))\n    local -i len_minus_9=$((len - 9))\n\
    \    local -i len_minus_10=$((len - 10))\n    local -i len_minus_11=$((len - 11))\n\
    \    local -i len_minus_12=$((len - 12))\n    local -i len_minus_13=$((len - 13))\n\
    \    local -i len_minus_14=$((len - 14))\n    local -i len_minus_15=$((len - 15))\n\
    \    local -i len_minus_16=$((len - 16))\n    local -i len_minus_17=$((len - 17))\n\
    \    local -i len_minus_18=$((len - 18))\n    local -i len_minus_19=$((len - 19))\n\
    \    local -i len_minus_20=$((len - 20))\n    local -i len_minus_21=$((len - 21))\n\
    \    local -i len_minus_22=$((len - 22))\n    local -i len_minus_23=$((len - 23))\n\
    \    local -i len_minus_24=$((len - 24))\n    local -i len_minus_25=$((len - 25))\n\
    \    local -i len_minus_26=$((len - 26))\n    local -i len_minus_27=$((len - 27))\n\
    \    local -i len_minus_", "    local list=\"$1\"\n    local threshold=\"$2\"\n\
    \    local -a array=($list)\n    local i\n    local j\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#array[@]}; j++)); do\n            if ((\
    \ $(echo \"${array[$i]} - ${array[$j]} < $threshold\" | bc -l) )); then\n    \
    \            echo \"true\"\n                return\n            fi\n        done\n\
    \    done\n    echo \"false\"", "    local list=\"$1\"\n    local threshold=\"\
    $2\"\n    local -a elements=($list)\n    local -a distances\n    local i\n   \
    \ local j\n    local distance\n    local -i num_elements=${#elements[@]}\n   \
    \ for ((i=0; i<num_elements; i++)); do\n        for ((j=i+1; j<num_elements; j++));\
    \ do\n            distance=$(echo \"${elements[i]} - ${elements[j]}\" | bc -l)\n\
    \            distances+=(\"$distance\")\n        done\n    done\n    for distance\
    \ in \"${distances[@]}\"; do\n        if (( $(echo \"$distance < $threshold\"\
    \ | bc -l) )); then\n            echo \"true\"\n            return\n        fi\n\
    \    done\n    echo \"false\"", "    local numbers=$1\n    local threshold=$2\n\
    \    local prev_number=0.0\n    for number in $numbers; do\n        if [ $(echo\
    \ \"$number - $prev_number < $threshold\" | bc) -eq 1 ]; then\n            echo\
    \ \"true\"\n            return\n        fi\n        prev_number=$number\n    done\n\
    \    echo \"false\"", "    local numbers=\"$1\"\n    local threshold=\"$2\"\n\
    \    local number\n    local number_prev\n    local distance\n    local distance_prev\n\
    \    local distance_min\n    local distance_min_prev\n    local distance_min_prev_prev\n\
    \    local distance_min_prev_prev_prev\n    local distance_min_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev\n    local distance_min_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev\n    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local\
    \ distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local distance_min_prev_prev_prev_prev_prev_prev_prev", "    local list=\"\
    $1\"\n    local threshold=\"$2\"\n    local elements=($list)\n    local n=${#elements[@]}\n\
    \    local i=0\n    local j=0\n    local diff=0\n    local abs_diff=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            diff=$(echo\
    \ \"${elements[i]} - ${elements[j]}\" | bc -l)\n            abs_diff=$(echo \"\
    if ($diff < 0) $diff * -1 else $diff\" | bc -l)\n            if [[ $(echo \"$abs_diff\
    \ < $threshold\" | bc -l) -eq 1 ]]; then\n                echo \"true\"\n    \
    \            return\n            fi\n        done\n    done\n    echo \"false\"",
  "    local -a numbers=($1)\n    local threshold=$2\n    local i\n    local j\n \
    \   for ((i=0; i<${#numbers[@]}; i++)); do\n        for ((j=i+1; j<${#numbers[@]};\
    \ j++)); do\n            if [[ $(echo \"${numbers[$i]} < ${numbers[$j]} ? ${numbers[$j]}\
    \ - ${numbers[$i]} : ${numbers[$i]} - ${numbers[$j]}\" | bc -l) < $threshold ]];\
    \ then\n                echo \"true\"\n                return\n            fi\n\
    \        done\n    done\n    echo \"false\"", "    local list=\"$1\"\n    local\
    \ threshold=\"$2\"\n    local min_diff=\"$(echo \"$list\" | awk '{\n        min_diff\
    \ = 1000000\n        for (i = 1; i <= NF; i++) {\n            for (j = i + 1;\
    \ j <= NF; j++) {\n                diff = $(i) - $(j)\n                if (diff\
    \ < 0) {\n                    diff = -diff\n                }\n              \
    \  if (diff < min_diff) {\n                    min_diff = diff\n             \
    \   }\n            }\n        }\n        print min_diff\n    }')\"\n    if [[\
    \ \"$min_diff\" < \"$threshold\" ]]; then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi", "    local list=\"$1\"\n    local threshold=\"\
    $2\"\n    local min_distance=1.0\n    local distance\n    for i in $list; do\n\
    \        for j in $list; do\n            if [ \"$i\" != \"$j\" ]; then\n     \
    \           distance=$(echo \"$i - $j\" | bc -l)\n                distance=$(echo\
    \ \"$distance < 0 ? -$distance : $distance\" | bc -l)\n                if [ $(echo\
    \ \"$distance < $min_distance\" | bc -l) -eq 1 ]; then\n                    min_distance=$distance\n\
    \                fi\n            fi\n        done\n    done\n    if [ $(echo \"\
    $min_distance < $threshold\" | bc -l) -eq 1 ]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi", "    local list=\"$1\"\n    local threshold=\"\
    $2\"\n    local nums=($list)\n    local num_nums=${#nums[@]}\n    local i\n  \
    \  local j\n    for ((i=0; i<num_nums; i++)); do\n        for ((j=i+1; j<num_nums;\
    \ j++)); do\n            if (( $(echo \"${nums[$i]} - ${nums[$j]} < $threshold\"\
    \ | bc -l) )); then\n                echo \"true\"\n                return\n \
    \           fi\n        done\n    done\n    echo \"false\""]
stop_tokens:
- "\n}"
