name: HumanEval_56_correct_bracketing
language: sh
prompt: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if\
  \ every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
  \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
  \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n\
  # $1 is a string\ncorrect_bracketing() {\n"
tests: "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") =\
  \ \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
  ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
  \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["    local brackets=$1\n    local stack=()\n    local bracket\n    local\
    \ top\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"<\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            top=${stack[-1]}\n\
    \            if [[ \"$top\" == \"<\" ]]; then\n                unset stack[-1]\n\
    \            else\n                return 1\n            fi\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -gt 0 ]]; then\n        return 1\n    fi\n    return 0",
  "    local brackets=$1\n    local stack=()\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\"\
    \ ]]; then\n            stack+=($bracket)\n        elif [[ $bracket == \">\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n\
    \    local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ ${brackets:$i:1} == \"<\" ]]; then\n            (( count++ ))\n        elif\
    \ [[ ${brackets:$i:1} == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if (( count < 0 )); then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if (( count == 0 )); then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local left_count=0\n\
    \    local right_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            left_count=$(( left_count\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n           \
    \ right_count=$(( right_count + 1 ))\n        fi\n    done\n    if [[ $left_count\
    \ -eq $right_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if (( count < 0 )); then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"\
    $1\"\n  local open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      open_brackets=$((open_brackets+1))\n\
    \    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close_brackets=$((close_brackets+1))\n\
    \    fi\n  done\n  if [[ \"$open_brackets\" -eq \"$close_brackets\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local bracket_stack=\"\"\n    local bracket_count=0\n    local i\n \
    \   for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            bracket_stack=\"$bracket_stack<\"\
    \n            bracket_count=$((bracket_count + 1))\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ \"$bracket_stack\" == \"\" ]]; then\n \
    \               echo \"false\"\n                return\n            fi\n     \
    \       bracket_stack=\"${bracket_stack:1}\"\n            bracket_count=$((bracket_count\
    \ - 1))\n        fi\n    done\n    if [[ \"$bracket_count\" == \"0\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"\
    $1\"\n  local open_count=0\n  local close_count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      open_count=$((open_count+1))\n\
    \    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close_count=$((close_count+1))\n\
    \    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            open_brackets=$((open_brackets + 1))\n      \
    \  elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            open_brackets=$((open_brackets\
    \ - 1))\n        fi\n        if [[ $open_brackets -lt 0 ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_brackets\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi", "    local brackets=\"$1\"\n    local count=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n          \
    \  ((count++))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n     \
    \       ((count--))\n        fi\n        if ((count < 0)); then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if ((count == 0));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=$1\n    local count=0\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        local char=${brackets:$i:1}\n        if [[ $char == \"<\" ]]; then\n\
    \            count=$((count + 1))\n        elif [[ $char == \">\" ]]; then\n \
    \           count=$((count - 1))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  local brackets=\"$1\"\n  local count=0\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      ((count++))\n\
    \    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      ((count--))\n    fi\n\
    \    if ((count < 0)); then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if ((count == 0)); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "    local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" ==\
    \ \"<\" ]]; then\n            count=$((count+1))\n        elif [[ \"$char\" ==\
    \ \">\" ]]; then\n            count=$((count-1))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=$1\n\
    \  local open=0\n  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n \
    \   if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( open++ ))\n    elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n      (( close++ ))\n    fi\n    if (( close\
    \ > open )); then\n      return 1\n    fi\n  done\n  if (( open == close )); then\n\
    \    return 0\n  else\n    return 1\n  fi", "  local brackets=$1\n  local stack=()\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ \"$bracket\" == \"<\" ]]; then\n      stack+=($bracket)\n    elif [[\
    \ \"$bracket\" == \">\" ]]; then\n      if [[ \"${#stack[@]}\" -eq 0 ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n      stack=(${stack[@]:0:$((${#stack[@]}-1))})\n\
    \    fi\n  done\n  if [[ \"${#stack[@]}\" -eq 0 ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open_count++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local stack=\"\"\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \ local brackets=\"$1\"\n  local open_brackets=$(echo \"$brackets\" | grep -o\
    \ \"<\" | wc -l)\n  local close_brackets=$(echo \"$brackets\" | grep -o \">\"\
    \ | wc -l)\n  if [ \"$open_brackets\" -eq \"$close_brackets\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            count=$((count+1))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            count=$((count-1))\n        fi\n        if [[\
    \ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n    \
    \    fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"\
    <\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]];\
    \ then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local\
    \ count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\
    \n  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\"\
    \ == \"<\" ]]; then\n            open_count=$((open_count+1))\n        elif [[\
    \ \"$char\" == \">\" ]]; then\n            close_count=$((close_count+1))\n  \
    \      fi\n        if [[ $close_count -gt $open_count ]]; then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if [[ $open_count -eq\
    \ $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if (( count < 0 )); then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local c=\"${brackets:$i:1}\"\n \
    \       if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack$c\"\n     \
    \   elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=$1\n    local open_count=0\n    local close_count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            open_count=$(( open_count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \    done\n    if [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n  local open_brackets=0\n\
    \  local close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[\
    \ ${brackets:$i:1} == \"<\" ]]; then\n      open_brackets=$((open_brackets+1))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      close_brackets=$((close_brackets+1))\n\
    \    fi\n  done\n  if [[ $open_brackets -eq $close_brackets ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local num_open=0\n    local num_close=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((\
    \ num_open++ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n    \
    \        (( num_close++ ))\n        fi\n    done\n    if [[ $num_open -eq $num_close\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n    elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count\
    \ -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  [[ $count\
    \ -eq 0 ]] && echo \"true\" || echo \"false\"", "    local brackets=\"$1\"\n \
    \   local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n         \
    \   (( open_count++ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \            (( close_count++ ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local brackets=$1\n    local stack=()\n    local bracket\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local open_count=0\n\
    \  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n      open_count=$(( open_count + 1 ))\n\
    \    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close_count=$(( close_count\
    \ + 1 ))\n    fi\n  done\n  if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n\
    \    local stack=\"\"\n    local bracket\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]];\
    \ then\n            stack=\"$stack<\"\n        elif [[ $bracket == \">\" ]]; then\n\
    \            if [[ -z $stack ]]; then\n                return 1\n            fi\n\
    \            stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]];\
    \ then\n        return 0\n    else\n        return 1\n    fi", "  local brackets=\"\
    $1\"\n  local open=0\n  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      open=$((open+1))\n  \
    \  elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close=$((close+1))\n\
    \    fi\n    if [[ $close -gt $open ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  if [[ $open -eq $close ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local stack=\"\"\n\
    \    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n   \
    \             return\n            fi\n            stack=\"${stack%?}\"\n     \
    \   fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"<\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ $char == \">\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n        if [[ $close_count -gt $open_count ]]; then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if [[\
    \ $open_count -eq $close_count ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            ((count++))\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            ((count--))\n      \
    \  else\n            echo \"error: invalid character '$char'\"\n            return\
    \ 1\n        fi\n        if ((count < 0)); then\n            echo \"false\"\n\
    \            return 0\n        fi\n    done\n    if ((count == 0)); then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n\
    \    local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ \"$char\" == \"<\" ]]; then\n         \
    \   stack=\"$stack<\"\n        elif [[ \"$char\" == \">\" ]]; then\n         \
    \   if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n           \
    \     return\n            fi\n            stack=${stack:0:-1}\n        fi\n  \
    \  done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi", "    local brackets=$1\n    local count=0\n \
    \   for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for\
    \ ((i=0; i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n      ((count++))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      ((count--))\n    fi\n    if ((count < 0)); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if ((count == 0)); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"\
    <\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]];\
    \ then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n         \
    \   open_count=$(( open_count + 1 ))\n        elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \    done\n    if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    # TODO: implement\
    \ this function\n    # Hint: use a stack\n    local stack=\"\"\n    local brackets=\"\
    $1\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\n     \
    \           return\n            fi\n            stack=\"${stack:0:-1}\"\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            ((count++))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            ((count--))\n        fi\n        if ((count <\
    \ 0)); then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if ((count == 0)); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\" == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    local i\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_brackets=$((open_brackets\
    \ + 1))\n        else\n            close_brackets=$((close_brackets + 1))\n  \
    \      fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n       \
    \     echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_brackets\
    \ -eq $close_brackets ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  local brackets=\"$1\"\n  local open_count=0\n  local\
    \ close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n      open_count=$((open_count\
    \ + 1))\n    elif [[ \"$bracket\" == \">\" ]]; then\n      close_count=$((close_count\
    \ + 1))\n    fi\n    if [[ \"$close_count\" -gt \"$open_count\" ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ \"$open_count\" -eq\
    \ \"$close_count\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "    local brackets=$1\n    local stack=()\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local bracket=${brackets:$i:1}\n        if [[ $bracket ==\
    \ \"<\" ]]; then\n            stack+=($bracket)\n        elif [[ $bracket == \"\
    >\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n\
    \  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local c=${brackets:$i:1}\n\
    \    if [[ \"$c\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$c\" ==\
    \ \">\" ]]; then\n      (( count-- ))\n    else\n      echo \"ERROR: invalid character:\
    \ $c\"\n      return 1\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\
    \n      return 0\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=$1\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            count=$((count + 1))\n   \
    \     elif [[ $char == \">\" ]]; then\n            count=$((count - 1))\n    \
    \    fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n   \
    \         return\n        fi\n    done\n    if [[ $count -gt 0 ]]; then\n    \
    \    echo \"false\"\n    else\n        echo \"true\"\n    fi", "  local brackets=\"\
    $1\"\n  local open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( open_brackets++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( close_brackets++\
    \ ))\n    fi\n    if (( close_brackets > open_brackets )); then\n      echo \"\
    false\"\n      return\n    fi\n  done\n  if (( open_brackets == close_brackets\
    \ )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n     \
    \       count=$((count+1))\n        elif [[ \"$char\" == \">\" ]]; then\n    \
    \        count=$((count-1))\n        fi\n        if [[ \"$count\" -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ \"$count\" -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \            ((count++))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \            ((count--))\n        fi\n        if ((count < 0)); then\n       \
    \     break\n        fi\n    done\n    if ((count == 0)); then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n  local\
    \ stack=\n  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z\
    \ $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ brackets=\"$1\"\n  local open_count=0\n  local close_count=0\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      open_count=$((open_count\
    \ + 1))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      close_count=$((close_count\
    \ + 1))\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local num_open=0\n    local num_close=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        local c=${brackets:$i:1}\n        if [[ \"$c\" == \"<\" ]];\
    \ then\n            (( num_open++ ))\n        elif [[ \"$c\" == \">\" ]]; then\n\
    \            (( num_close++ ))\n        else\n            echo \"error: invalid\
    \ character '$c'\" >&2\n            return 1\n        fi\n    done\n    if [[\
    \ \"$num_open\" -eq \"$num_close\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local char\n    for (( i=0; i<${#brackets}; i++ )); do\n        char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \">\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                echo \"false\"\n                return\n\
    \            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local brackets=\"$1\"\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n        if [[ $close_count -gt $open_count ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if (( count < 0 )); then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]];\
    \ then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]];\
    \ then\n            (( count-- ))\n        fi\n        if (( count < 0 )); then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ (( count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local brackets=\"$1\"\n    local count=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n          \
    \  ((count++))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n     \
    \       ((count--))\n        fi\n        if ((count < 0)); then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if ((count == 0));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local open=0\n    local close=0\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\n    \
    \    if [[ \"$bracket\" == \"<\" ]]; then\n            open=$((open+1))\n    \
    \    elif [[ \"$bracket\" == \">\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ \"$close\" -gt \"$open\" ]]; then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if [[ \"$open\" -eq\
    \ \"$close\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if (( count < 0 )); then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=$1\n    local open_brackets=0\n    local\
    \ closed_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ ${brackets:$i:1} == \"<\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            closed_brackets=$((\
    \ closed_brackets + 1 ))\n        fi\n    done\n    if [[ $open_brackets -eq $closed_brackets\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local brackets=$1\n    local stack=''\n    local i=0\n    local len=${#brackets}\n\
    \    while [ $i -lt $len ]; do\n        local c=${brackets:$i:1}\n        if [\
    \ \"$c\" == \"<\" ]; then\n            stack=\"$stack<\"\n        elif [ \"$c\"\
    \ == \">\" ]; then\n            if [ -z \"$stack\" ]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ -z \"$stack\" ]; then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local open=0\n    local close=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open=$((open+1))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ $close -gt $open ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n\
    \    local stack=\"\"\n    local i=0\n    local char=\"\"\n    local top=\"\"\n\
    \    local len=${#brackets}\n    while [ $i -lt $len ]; do\n        char=${brackets:$i:1}\n\
    \        if [ \"$char\" == \"<\" ]; then\n            stack=\"$stack<\"\n    \
    \    elif [ \"$char\" == \">\" ]; then\n            if [ -z \"$stack\" ]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        top=${stack: -1}\n            if [ \"$top\" == \"<\" ]; then\n      \
    \          stack=${stack:0:-1}\n            else\n                echo \"false\"\
    \n                return\n            fi\n        fi\n        i=$((i+1))\n   \
    \ done\n    if [ -z \"$stack\" ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ $c == \"<\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ $c == \">\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        else\n            echo \"false\"\n            return\n      \
    \  fi\n    done\n    if [[ $open_count == $close_count ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            ((count--))\n\
    \        fi\n        if ((count < 0)); then\n            echo \"false\"\n    \
    \        return\n        fi\n    done\n    if ((count == 0)); then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local stack=()\n  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n \
    \   bracket=${brackets:$i:1}\n    if [[ \"$bracket\" == \"<\" ]]; then\n     \
    \ stack+=(\"$bracket\")\n    elif [[ \"$bracket\" == \">\" ]]; then\n      if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n      fi\n      unset stack[${#stack[@]}-1]\n\
    \    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n \
    \   return 1\n  fi", "  local brackets=\"$1\"\n  local open_count=0\n  local close_count=0\n\
    \  local i\n  for ((i=0; i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      open_count=$((open_count + 1))\n\
    \    elif [[ \"$char\" == \">\" ]]; then\n      close_count=$((close_count + 1))\n\
    \    else\n      echo \"error: invalid character: $char\"\n      return 1\n  \
    \  fi\n  done\n  if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ \"$char\" == \">\" ]]; then\n            (( count--\
    \ ))\n        else\n            echo \"error: invalid character $char\"\n    \
    \        return 1\n        fi\n        if (( count < 0 )); then\n            echo\
    \ \"false\"\n            return 0\n        fi\n    done\n    if (( count == 0\
    \ )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local brackets=\"$1\"\n    local stack=\"\"\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$char\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local open=0\n  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n \
    \   if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( open++ ))\n    elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n      (( close++ ))\n    fi\n    if (( close\
    \ > open )); then\n      echo \"false\"\n      return\n    fi\n  done\n  if ((\
    \ open == close )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "    local brackets=\"$1\"\n    local count=0\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((count++))\n\
    \        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            ((count--))\n\
    \        fi\n        if ((count < 0)); then\n            echo \"false\"\n    \
    \        return\n        fi\n    done\n    if ((count == 0)); then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\
    \n  local open_count=0\n  local close_count=0\n  local i=0\n  local char\n  for\
    \ ((i=0; i<${#brackets}; i++)); do\n    char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      open_count=$((open_count + 1))\n    elif [[ \"\
    $char\" == \">\" ]]; then\n      close_count=$((close_count + 1))\n    fi\n  \
    \  if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "  local brackets=$1\n  local stack=\"\"\n  for\
    \ (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n   \
    \ if [[ $bracket == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \ local brackets=\"$1\"\n  local bracket_stack=\"\"\n  local bracket_stack_size=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      bracket_stack=\"$bracket_stack$bracket\"\
    \n      bracket_stack_size=$((bracket_stack_size+1))\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ \"$bracket_stack_size\" -eq 0 ]]; then\n    \
    \    echo \"false\"\n        return\n      fi\n      bracket_stack=\"${bracket_stack:0:$((bracket_stack_size-1))}\"\
    \n      bracket_stack_size=$((bracket_stack_size-1))\n    fi\n  done\n  if [[\
    \ \"$bracket_stack_size\" -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            open_count=$(( open_count +\
    \ 1 ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_count=$((\
    \ close_count + 1 ))\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0; i<${#brackets}; i++));\
    \ do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"$char\" == \"<\" ]]; then\n\
    \      stack=\"$stack$char\"\n    elif [[ \"$char\" == \">\" ]]; then\n      if\
    \ [[ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n      fi\n\
    \      stack=\"${stack%?}\"\n    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\
    \n  local bracket_stack=\"\"\n  local bracket\n  for ((i=0; i<${#brackets}; i++));\
    \ do\n    bracket=\"${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n\
    \      bracket_stack=\"$bracket_stack<\"\n    elif [[ \"$bracket\" == \">\" ]];\
    \ then\n      if [[ -z \"$bracket_stack\" ]]; then\n        echo \"false\"\n \
    \       return\n      fi\n      bracket_stack=\"${bracket_stack%?}\"\n    fi\n\
    \  done\n  if [[ -z \"$bracket_stack\" ]]; then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi", "    local brackets=$1\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ ${brackets:$i:1} == \"<\" ]]; then\n            open_count=$(( open_count\
    \ + 1 ))\n        else\n            close_count=$(( close_count + 1 ))\n     \
    \   fi\n        if [[ $close_count -gt $open_count ]]; then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if [[ $open_count -eq\
    \ $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  local brackets=$1\n  local open_brackets=0\n  local close_brackets=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n      open_brackets=$((open_brackets+1))\n    elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n      close_brackets=$((close_brackets+1))\n    fi\n  done\n\
    \  if [[ $open_brackets -eq $close_brackets ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local n_open=0\n  local\
    \ n_close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      (( n_open++ ))\n    else\n      (( n_close++ ))\n \
    \   fi\n    if (( n_close > n_open )); then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  if (( n_open == n_close )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=$1\n    local open_count=0\n \
    \   local close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if\
    \ [[ ${brackets:$i:1} == \"<\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=$1\n    local stack=()\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"\
    <\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n  \
    \  for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            open_count=$((open_count+1))\n        elif [[\
    \ \"${brackets:$i:1}\" == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local c=${brackets:$i:1}\n        if [[ \"$c\" == \"<\"\
    \ ]]; then\n            open_count=$(( open_count + 1 ))\n        elif [[ \"$c\"\
    \ == \">\" ]]; then\n            close_count=$(( close_count + 1 ))\n        else\n\
    \            return 1\n        fi\n        if [[ $close_count -gt $open_count\
    \ ]]; then\n            return 1\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        return 0\n    else\n        return 1\n  \
    \  fi", "    local brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"<\" ]]; then\n            ((open_count++))\n      \
    \  elif [[ \"$c\" == \">\" ]]; then\n            ((close_count++))\n        else\n\
    \            echo \"error: invalid character '$c'\"\n            return 1\n  \
    \      fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\"\
    \ == \"<\" ]]; then\n            (( open_count++ ))\n        elif [[ \"$char\"\
    \ == \">\" ]]; then\n            (( close_count++ ))\n        else\n         \
    \   echo \"false\"\n            return\n        fi\n        if [[ \"$close_count\"\
    \ -gt \"$open_count\" ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( count--\
    \ ))\n        fi\n        if (( count < 0 )); then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if (( count == 0 )); then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\
    \n  local count=0\n  for ((i=0; i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      ((count++))\n    elif [[ \"${brackets:$i:1}\" == \"\
    >\" ]]; then\n      ((count--))\n    fi\n    if ((count < 0)); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if ((count == 0)); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local\
    \ open_brackets=$(echo \"$brackets\" | grep -o \"<\" | wc -l)\n  local close_brackets=$(echo\
    \ \"$brackets\" | grep -o \">\" | wc -l)\n  if [ \"$open_brackets\" -eq \"$close_brackets\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=$1\n\
    \  local stack=()\n  for ((i=0; i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      stack+=(\"<\")\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local brackets=$1\n  local count=0\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n  \
    \    ((count++))\n    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      ((count--))\n\
    \    fi\n    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local n_open=0\n   \
    \ local n_close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            (( n_open++ ))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( n_close++ ))\n   \
    \     else\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if [[ \"$n_open\" == \"$n_close\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\
    \"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n\
    \    local open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            close_brackets=$((close_brackets+1))\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=$1\n    local open_brackets=0\n    local close_brackets=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            open_brackets=$(( open_brackets + 1 ))\n        elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n            close_brackets=$(( close_brackets\
    \ + 1 ))\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local stack=\"\"\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local c=${brackets:$i:1}\n        if [[ \"$c\" == \"<\"\
    \ ]]; then\n            open_count=$(( open_count + 1 ))\n        elif [[ \"$c\"\
    \ == \">\" ]]; then\n            close_count=$(( close_count + 1 ))\n        else\n\
    \            echo \"error: invalid character in brackets: $c\"\n            return\
    \ 1\n        fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n  \
    \  for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            (( open_count++ ))\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            (( close_count++\
    \ ))\n        else\n            echo \"error: invalid bracket: $bracket\"\n  \
    \          return 1\n        fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "  local brackets=\"$1\"\n  local stack=\"\"\n  local bracket\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    bracket=\"${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\"\
    \ ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\" == \">\" ]]; then\n\
    \      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if [[ -z \"$stack\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n     \
    \   local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" ==\
    \ \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            count=$((count+1))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            count=$((count-1))\n        fi\n        if [[\
    \ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n    \
    \    fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local open_count=0\n\
    \  local close_count=0\n  local i\n  for ((i=0; i<${#brackets}; i++)); do\n  \
    \  local ch=\"${brackets:$i:1}\"\n    if [[ \"$ch\" == \"<\" ]]; then\n      ((open_count++))\n\
    \    elif [[ \"$ch\" == \">\" ]]; then\n      ((close_count++))\n    else\n  \
    \    echo \"invalid character: $ch\" >&2\n      return 1\n    fi\n  done\n  if\
    \ [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count <\
    \ 0 )); then\n            echo \"false\"\n            return\n        fi\n   \
    \ done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi", "    local brackets=$1\n    local stack=\"\"\n  \
    \  local char=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            stack=\"$stack<\"\n      \
    \  elif [[ $char == \">\" ]]; then\n            if [[ -z $stack ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     stack=${stack%?}\n        fi\n    done\n    if [[ -z $stack ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local open_count=0\n  local close_count=0\n  for (( i=0; i<${#brackets}; i++\
    \ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      open_count=$((open_count+1))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      close_count=$((close_count+1))\n\
    \    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local open_brackets=0\n\
    \  local close_brackets=0\n  local i=0\n  local len=${#brackets}\n  while [ $i\
    \ -lt $len ]; do\n    local char=${brackets:$i:1}\n    if [ \"$char\" == \"<\"\
    \ ]; then\n      open_brackets=$((open_brackets + 1))\n    elif [ \"$char\" ==\
    \ \">\" ]; then\n      close_brackets=$((close_brackets + 1))\n    fi\n    i=$((i\
    \ + 1))\n  done\n  if [ $open_brackets -eq $close_brackets ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for\
    \ (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\"\
    \ ]]; then\n      count=$(( count + 1 ))\n    elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt 0\
    \ ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local\
    \ brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \            open_count=$((open_count + 1))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            close_count=$((close_count + 1))\n        fi\n\
    \    done\n    if [[ $open_count == $close_count ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local\
    \ count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n          \
    \  open_count=$((open_count + 1))\n        elif [[ \"${brackets:$i:1}\" == \"\
    >\" ]]; then\n            close_count=$((close_count + 1))\n        fi\n    done\n\
    \    if [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local num_open=0\n\
    \    local num_close=0\n    local num_total=0\n    local i=0\n    local len=${#brackets}\n\
    \    while [ $i -lt $len ]; do\n        local char=${brackets:$i:1}\n        if\
    \ [ \"$char\" == \"<\" ]; then\n            num_open=$((num_open + 1))\n     \
    \   elif [ \"$char\" == \">\" ]; then\n            num_close=$((num_close + 1))\n\
    \        fi\n        i=$((i + 1))\n    done\n    num_total=$((num_open + num_close))\n\
    \    if [ $num_open -eq $num_close ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=\"${stack%?}\"\
    \n        fi\n    done\n    [[ -z \"$stack\" ]]", "  local brackets=$1\n  local\
    \ stack=\"\"\n  for ((i=0; i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \   local brackets=$1\n    local opening_brackets=0\n    local closing_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            opening_brackets=$((opening_brackets\
    \ + 1))\n        elif [[ $char == \">\" ]]; then\n            closing_brackets=$((closing_brackets\
    \ + 1))\n        fi\n        if [[ $closing_brackets -gt $opening_brackets ]];\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if [[ $opening_brackets -eq $closing_brackets ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\"\
    \ ]]; then\n            open_count=$((open_count+1))\n        elif [[ \"$char\"\
    \ == \">\" ]]; then\n            close_count=$((close_count+1))\n        else\n\
    \            echo \"error: incorrect bracketing\"\n            return 1\n    \
    \    fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"\
    $1\"\n  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n     \
    \   local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]];\
    \ then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]];\
    \ then\n            if [[ \"$stack\" == \"\" ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n\
    \  local open_count=0\n  local close_count=0\n  local i\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"$char\" == \"<\"\
    \ ]]; then\n      open_count=$((open_count + 1))\n    elif [[ \"$char\" == \"\
    >\" ]]; then\n      close_count=$((close_count + 1))\n    fi\n    if [[ \"$close_count\"\
    \ -gt \"$open_count\" ]]; then\n      echo \"false\"\n      return\n    fi\n \
    \ done\n  if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local brackets=$1\n  local stack=()\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open_brackets++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close_brackets++\
    \ ))\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"\
    $1\"\n  local stack=\"\"\n  for (( i=0; i<${#brackets}; i++ )); do\n    local\
    \ bracket=\"${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n   \
    \   stack=\"$stack$bracket\"\n    elif [[ \"$bracket\" == \">\" ]]; then\n   \
    \   if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n   \
    \   fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[ -z \"$stack\" ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n\
    \    local stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ $c == \"<\" ]]; then\n            stack=\"\
    $stack<\"\n        elif [[ $c == \">\" ]]; then\n            if [[ -z $stack ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=$1\n    local stack=()\n    local char\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        char=${brackets:$i:1}\n        if [[ $char == \"<\" ]];\
    \ then\n            stack+=($char)\n        elif [[ $char == \">\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n\
    \    local open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n         \
    \   open_brackets=$((open_brackets+1))\n        elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n            close_brackets=$((close_brackets+1))\n        fi\n\
    \    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n\
    \  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == '<' ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1} == '>' ]];\
    \ then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n  \
    \  local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"<\" ]]; then\n            (( count++ ))\n        elif\
    \ [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( count-- ))\n     \
    \   fi\n        if (( count < 0 )); then\n            echo \"false\"\n       \
    \     return\n        fi\n    done\n    if (( count == 0 )); then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if\
    \ [[ ${brackets:$i:1} == \"<\" ]]; then\n            (( count++ ))\n        elif\
    \ [[ ${brackets:$i:1} == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if (( count < 0 )); then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if (( count == 0 )); then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local open_count=0\n\
    \    local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n       \
    \ local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n\
    \            (( open_count++ ))\n        elif [[ \"$char\" == \">\" ]]; then\n\
    \            (( close_count++ ))\n        else\n            echo \"false\"\n \
    \           return\n        fi\n        if (( close_count > open_count )); then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ (( open_count == close_count )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=$1\n    local open=0\n    local\
    \ close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            (( open++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( close++ ))\n        fi\n        if (( close\
    \ > open )); then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if (( open == close )); then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=$1\n    local stack=\"\"\
    \n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( count--\
    \ ))\n        fi\n        if (( count < 0 )); then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if (( count == 0 )); then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n\
    \    local stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\
    \"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack$char\"\
    \n        elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"\
    $stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi", "    local brackets=\"$1\"\n    local stack=\"\"\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local open_brackets=0\n    local closed_brackets=0\n  \
    \  local i=0\n    local len=${#brackets}\n    while [ $i -lt $len ]; do\n    \
    \    local char=${brackets:$i:1}\n        if [ \"$char\" == \"<\" ]; then\n  \
    \          open_brackets=$((open_brackets + 1))\n        elif [ \"$char\" == \"\
    >\" ]; then\n            closed_brackets=$((closed_brackets + 1))\n        fi\n\
    \        if [ $closed_brackets -gt $open_brackets ]; then\n            echo \"\
    false\"\n            return\n        fi\n        i=$((i + 1))\n    done\n    if\
    \ [ $open_brackets -eq $closed_brackets ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local open_count=0\n\
    \  local close_count=0\n  local i\n  for ((i=0; i<${#brackets}; i++)); do\n  \
    \  local char=\"${brackets:$i:1}\"\n    if [[ \"$char\" == \"<\" ]]; then\n  \
    \    open_count=$((open_count + 1))\n    elif [[ \"$char\" == \">\" ]]; then\n\
    \      close_count=$((close_count + 1))\n    else\n      echo \"error: invalid\
    \ character: $char\"\n      return 1\n    fi\n  done\n  if [[ \"$open_count\"\
    \ -eq \"$close_count\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "    local brackets=\"$1\"\n    local stack=\n    local bracket\n   \
    \ for ((i=0; i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\n\
    \        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  local brackets=\"$1\"\n  local open=0\n  local close=0\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      open=$((open + 1))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      close=$((close + 1))\n    fi\n    if [[ $close -gt $open ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $open -eq $close ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n\
    \    local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n       \
    \     stack=\"$stack<\"\n        elif [[ $bracket == \">\" ]]; then\n        \
    \    if [[ -z $stack ]]; then\n                echo \"false\"\n              \
    \  return\n            fi\n            stack=${stack::-1}\n        fi\n    done\n\
    \    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "  local brackets=\"$1\"\n  local stack=\"\"\n  local i\n  for\
    \ ((i=0; i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n \
    \   if [[ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[\
    \ \"$bracket\" == \">\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n  \
    \      echo \"false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\
    \n    fi\n  done\n  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        else\n            close_brackets=$((close_brackets+1))\n        fi\n\
    \        if [[ $close_brackets -gt $open_brackets ]]; then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $open_brackets -eq\
    \ $close_brackets ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local brackets=\"$1\"\n    local stack=\"\"\n    local char\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n  \
    \      elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n       \
    \     (( count-- ))\n        fi\n        if (( count < 0 )); then\n          \
    \  echo \"false\"\n            return\n        fi\n    done\n    if (( count ==\
    \ 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" ==\
    \ \"<\" ]]; then\n            (( count++ ))\n        elif [[ \"$char\" == \">\"\
    \ ]]; then\n            (( count-- ))\n        else\n            echo \"Invalid\
    \ character: $char\"\n            return 1\n        fi\n        if (( count <\
    \ 0 )); then\n            echo \"false\"\n            return 0\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=$1\n    local stack=\"\"\n\
    \    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=${stack:0:-1}\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count <\
    \ 0 )); then\n            echo \"false\"\n            return\n        fi\n   \
    \ done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\"\n\
    \    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local stack=\"\"\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n  \
    \  for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  local brackets=$1\n  local open=0\n\
    \  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n      open=$(( open + 1 ))\n    elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n      close=$(( close + 1 ))\n    fi\n    if [[ $close -gt\
    \ $open ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[\
    \ $open -eq $close ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "    local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n         \
    \   (( count++ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n  \
    \          (( count-- ))\n        fi\n        if (( count < 0 )); then\n     \
    \       echo \"false\"\n            return\n        fi\n    done\n    if (( count\
    \ == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi", "  local brackets=\"$1\"\n  local open=0\n  local closed=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( open++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n    \
    \  (( closed++ ))\n    fi\n    if [[ $closed -gt $open ]]; then\n      return\
    \ 1\n    fi\n  done\n  return 0", "  local brackets=\"$1\"\n  local stack=\"\"\
    \n  for (( i=0; i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\
    \n    if [[ \"$char\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[\
    \ \"$char\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo\
    \ \"false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n\
    \  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\" == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  local brackets=\"$1\"\n  local open_count=0\n  local\
    \ close_count=0\n  local i=0\n  local len=${#brackets}\n  while [ $i -lt $len\
    \ ]; do\n    local char=${brackets:$i:1}\n    if [ \"$char\" == \"<\" ]; then\n\
    \      open_count=$((open_count + 1))\n    elif [ \"$char\" == \">\" ]; then\n\
    \      close_count=$((close_count + 1))\n    fi\n    i=$((i + 1))\n  done\n  if\
    \ [ $open_count -eq $close_count ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open_count=$(( open_count + 1 ))\n        elif\
    \ [[ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$(( close_count\
    \ + 1 ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local stack=\"\"\n    local i\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local c=\"${brackets:$i:1}\"\n        if [[ \"$c\" == \"\
    <\" ]]; then\n            stack=\"$stack<\"\n        elif [[ \"$c\" == \">\" ]];\
    \ then\n            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=\"${stack%?}\"\n \
    \       fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n           \
    \ stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                return 1\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"$stack\"\
    \ ]]", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if (( count < 0 )); then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ \"${brackets:$i:1}\" ==\
    \ \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count <\
    \ 0 )); then\n            echo \"false\"\n            return\n        fi\n   \
    \ done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for\
    \ (( i=0; i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n  \
    \  if [[ \"$char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ \"$count\" -lt 0 ]];\
    \ then\n      echo \"false\"\n      return\n    fi\n  done\n  [[ \"$count\" -eq\
    \ 0 ]] && echo \"true\" || echo \"false\"", "    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local bracket_stack=\"\
    \"\n    local bracket=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n       \
    \ bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n\
    \            bracket_stack=\"$bracket_stack<\"\n        elif [[ \"$bracket\" ==\
    \ \">\" ]]; then\n            if [[ -z \"$bracket_stack\" ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            bracket_stack=\"\
    ${bracket_stack:1}\"\n        fi\n    done\n    if [[ -z \"$bracket_stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local\
    \ brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n   \
    \ if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n    elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=$1\n\
    \  local open_brackets=0\n  local closed_brackets=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( open_brackets++\
    \ ))\n    else\n      (( closed_brackets++ ))\n    fi\n    if (( closed_brackets\
    \ > open_brackets )); then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if (( open_brackets == closed_brackets )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n  \
    \  for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"\
    <\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    [[ $count -eq 0 ]] && echo \"true\" || echo \"false\"",
  "  local brackets=\"$1\"\n  local open_count=0\n  local close_count=0\n  for ((\
    \ i=0; i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if\
    \ [[ \"$char\" == \"<\" ]]; then\n      (( open_count++ ))\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      (( close_count++ ))\n    fi\n    if [[ $close_count\
    \ -gt $open_count ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local stack=\"\"\n \
    \   for ((i=0; i<${#brackets}; i++)); do\n        local c=\"${brackets:$i:1}\"\
    \n        if [[ \"$c\" == \"<\" ]]; then\n            stack=\"$stack<\"\n    \
    \    elif [[ \"$c\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                return 1\n            fi\n            stack=\"${stack:1}\"\n\
    \        fi\n    done\n    [[ -z \"$stack\" ]]", "    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            (( count++ ))\n        elif\
    \ [[ $char == \">\" ]]; then\n            (( count-- ))\n        fi\n        if\
    \ [[ $count < 0 ]]; then\n            echo \"false\"\n            return\n   \
    \     fi\n    done\n    if [[ $count == 0 ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n     \
    \   elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        else\n\
    \            echo \"error: invalid character: $char\"\n            return 1\n\
    \        fi\n        if (( count < 0 )); then\n            echo \"false\"\n  \
    \          return 0\n        fi\n    done\n    if (( count == 0 )); then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"\
    $1\"\n    local open_count=0\n    local close_count=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\"\
    \ == \"<\" ]]; then\n            open_count=$((open_count + 1))\n        elif\
    \ [[ \"$char\" == \">\" ]]; then\n            close_count=$((close_count + 1))\n\
    \        else\n            echo \"error: invalid character '$char' in brackets\"\
    \ >&2\n            return 1\n        fi\n    done\n    if [[ \"$open_count\" -eq\
    \ \"$close_count\" ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local brackets=\"$1\"\n    local open_brackets=0\n    local\
    \ close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"<\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n           \
    \ close_brackets=$(( close_brackets + 1 ))\n        fi\n    done\n    if [[ $open_brackets\
    \ -eq $close_brackets ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local brackets=$1\n\
    \  local stack=\"\"\n  local bracket\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    bracket=${brackets:$i:1}\n    if [[ \"$bracket\" == \"<\" ]]; then\n    \
    \  stack=\"$stack<\"\n    elif [[ \"$bracket\" == \">\" ]]; then\n      if [[\
    \ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n      fi\n \
    \     stack=${stack%?}\n    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=$1\n    local count=0\n   \
    \ for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"\
    <\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local brackets=$1\n    local stack=\"\"\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n  \
    \      if [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n     \
    \   elif [[ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \            open_count=$((open_count + 1))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            close_count=$((close_count + 1))\n        fi\n\
    \    done\n    if [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local\
    \ open_count=0\n  local close_count=0\n  for ((i=0; i<${#brackets}; i++)); do\n\
    \    local char=\"${brackets:$i:1}\"\n    if [[ \"$char\" == \"<\" ]]; then\n\
    \      open_count=$((open_count + 1))\n    elif [[ \"$char\" == \">\" ]]; then\n\
    \      close_count=$((close_count + 1))\n    fi\n  done\n  if [[ \"$open_count\"\
    \ -eq \"$close_count\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "    local brackets=\"$1\"\n    local count=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n          \
    \  count=$((count+1))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \            count=$((count-1))\n        fi\n        if [[ $count -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local brackets=\"$1\"\n    local count=0\n    local i\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\" == \"<\"\
    \ ]]; then\n            ((count++))\n        elif [[ \"${brackets:$i:1}\" == \"\
    >\" ]]; then\n            ((count--))\n        fi\n        if ((count < 0)); then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ ((count == 0)); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local brackets=$1\n    local stack=\"\"\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local bracket=${brackets:$i:1}\n        if [[ $bracket ==\
    \ \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ $bracket == \"\
    >\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=${stack:0:-1}\n  \
    \      fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    local i=0\n    while [ $i -lt\
    \ ${#brackets} ]; do\n        local char=${brackets:$i:1}\n        if [ \"$char\"\
    \ == \"<\" ]; then\n            ((open_brackets++))\n        elif [ \"$char\"\
    \ == \">\" ]; then\n            ((close_brackets++))\n        else\n         \
    \   echo \"error: invalid character: $char\"\n            return 1\n        fi\n\
    \        ((i++))\n    done\n    if [ $open_brackets -eq $close_brackets ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( count--\
    \ ))\n        fi\n        if (( count < 0 )); then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if (( count == 0 )); then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi"]
stop_tokens:
- "\n}"
