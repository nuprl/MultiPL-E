language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use the $1\
    \ variable to access the list of strings\n    # Please use the echo command to\
    \ return the result\n    # Please use the return command to return the exit code\n\
    \    #\n    # Example:\n    # echo \"Hello World\"\n    # return 0\n    #\n  \
    \  # Example:\n    # echo \"Error\" >&2\n    # return 1\n    #\n    # Example:\n\
    \    # echo \"Hello World\"\n    # echo \"Error\" >&2\n    # return 1\n    #\n\
    \    # Example:\n    # echo \"Hello World\"\n    # return 1\n    #\n    # Example:\n\
    \    # echo \"Error\" >&2\n    # return 0\n    #\n    # Example:\n    # echo \"\
    Hello World\"\n    # echo \"Error\" >&2\n    # return 0\n    #\n    # Example:\n\
    \    # return 1\n    #\n    # Example:\n    # return 0\n    #\n    # Example:\n\
    \    # echo \"Hello World\"\n    # return\n    #\n    # Example:\n    # echo \"\
    Error\" >&2\n    # return\n    #\n    # Example:\n    # echo \"Hello World\"\n\
    \    # echo \"Error\" >&2\n    # return\n    #\n    # Example:\n    # return\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj0bhgij0.sh: line 67: syntax error near unexpected token `}''

    /tmp/tmpj0bhgij0.sh: line 67: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # First, we split the list into an array\n    IFS='\
    \ ' read -r -a array <<< \"$1\"\n    # Then, we sort the array by the number of\
    \ unique characters in each word\n    # and then by lexicographical order\n  \
    \  sorted=($(printf '%s\\n' \"${array[@]}\" | sort -u -k1,1 -k2,2))\n    # Finally,\
    \ we print the last word in the sorted array\n    echo \"${sorted[-1]}\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # it is a good practice to name your function\
    \ as\n    # the name of the task\n    #\n    # You can write additional functions\
    \ if needed\n    #\n    # Your code starts here\n    # Your code ends here\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp899ebswo.sh: line 24: syntax error near unexpected token `}''

    /tmp/tmp899ebswo.sh: line 24: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list of words\n    # according to the number of\
    \ unique characters in each word:\n    # sort -k2 -t: <<< \"$(printf \"%s:%s\\\
    n\" \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -k1 -n)\"\n    # The output\
    \ of the above command is a list of words, each followed by a colon and\n    #\
    \ the number of unique characters in the word.\n    # You can use the cut command\
    \ to extract the word from the output of the above command.\n    # You can use\
    \ the sort command to sort the output of the above command according to the\n\
    \    # number of unique characters in each word.\n    # You can use the head command\
    \ to return the first word in the sorted list.\n    #\n    # Hint: use the following\
    \ command to sort the list of words\n    # according to the number of unique characters\
    \ in each word,\n    # and then according to the lexicographical order:\n    #\
    \ sort -k2 -t: <<< \"$(printf \"%s:%s\\n\" \"$1\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -k1 -n)\"\n    #\n    # Hint: use the following command to sort the\
    \ list of words\n    # according to the lexicographical order,\n    # and then\
    \ according to the number of unique characters in each word:\n    # sort -k2 -t:\
    \ <<< \"$(printf \"%s:%s\\n\" \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -k1\
    \ -n)\"\n    #\n    # Hint: use the following command to sort the list of words\n\
    \    # according to the lexicographical order,\n    # and then according to the\
    \ number of unique characters in each word,\n    # and then according to the length\
    \ of each word:\n    # sort -k2 -t: <<< \"$(printf \"%s:%s\\n\" \"$1\" | tr '\
    \ ' '\\n' | sort | uniq -c | sort -k1 -n)\"\n    #\n    # Hint: use the following\
    \ command to sort the list of words\n    #\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpktq9k_5_.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpktq9k_5_.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo -n $word | grep -o . | sort | uniq | wc\
    \ -l)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n    \
    \        max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # We need to split the list into an array\n    # We\
    \ can use the read command to do this\n    # The -a option tells read to put the\
    \ result in an array\n    # The -d option tells read to use a space as the delimiter\n\
    \    read -a words -d \" \" <<< \"$1\"\n\n    # We need to keep track of the maximum\
    \ number of unique characters\n    # and the word with that number of unique characters\n\
    \    max_unique=0\n    max_word=\"\"\n\n    # Loop through the array of words\n\
    \    for word in \"${words[@]}\"; do\n        # We need to count the number of\
    \ unique characters in the word\n        # We can use the tr command to remove\
    \ duplicate characters\n        # The -d option tells tr to delete the characters\n\
    \        # The -c option tells tr to complement the set of characters\n      \
    \  # The -s option tells tr to squeeze repeated characters\n        # The result\
    \ is the number of unique characters\n        unique=$(tr -d -c -s \"$word\" |\
    \ wc -c)\n\n        # If the number of unique characters is greater than the current\n\
    \        # maximum, update the maximum and the word with that maximum\n      \
    \  if (( unique > max_unique )); then\n            max_unique=$unique\n      \
    \      max_word=$word\n        fi\n    done\n\n    # Return the word with the\
    \ maximum number of unique characters\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: missing operand after \u2018name\u2019\nTwo strings must be given when\
    \ both deleting and squeezing repeats.\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # NOTE: For your convenience, the input string\
    \ is available in $1\n    #       You can access it as ${1}\n    # NOTE: Please\
    \ use echo to print the output string\n    # NOTE: You can use `man ascii` to\
    \ know the ascii value of a character\n    # NOTE: You can use `man sort` to sort\
    \ the output string\n    # NOTE: You can use `man tr` to translate characters\n\
    \    # NOTE: You can use `man wc` to count the number of words\n    # NOTE: You\
    \ can use `man uniq` to remove duplicate words\n    # NOTE: You can use `man head`\
    \ to get the first line\n    # NOTE: You can use `man tail` to get the last line\n\
    \    # NOTE: You can use `man rev` to reverse the string\n    # NOTE: You can\
    \ use `man cut` to cut the string\n    # NOTE: You can use `man expr` to evaluate\
    \ arithmetic expressions\n    # NOTE: You can use `man bc` to evaluate arithmetic\
    \ expressions\n    # NOTE: You can use `man tr` to translate characters\n    #\
    \ NOTE: You can use `man sort` to sort the output string\n    # NOTE: You can\
    \ use `man wc` to count the number of words\n    # NOTE: You can use `man uniq`\
    \ to remove duplicate words\n    # NOTE: You can use `man head` to get the first\
    \ line\n    # NOTE: You can use `man tail` to get the last line\n    # NOTE: You\
    \ can use `man rev` to reverse the string\n    # NOTE: You can use `man cut` to\
    \ cut the string\n    # NOTE: You can use `man expr` to evaluate arithmetic expressions\n\
    \    # NOTE: You can use `man bc` to evaluate arithmetic expressions\n    # NOTE:\
    \ You can use `man tr` to translate characters\n    # NOTE: You can use `man sort`\
    \ to sort the output string\n    # NOTE: You can use `man wc` to count the number\
    \ of words\n    # NOTE: You can use `man uniq` to remove duplicate words\n   \
    \ # NOTE: You can use `man head` to get the first line\n    # NOTE: You can\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu_juuhix.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpu_juuhix.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | sed -e 's/\\(.\\)/\\1\\n/g' | sort | uniq | wc -l)\n        if [ $count -gt\
    \ $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\n    for word in $1;\
    \ do\n        local unique_chars=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $unique_chars -gt $max ]; then\n            max=$unique_chars\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    max=0\n    max_word=\"\"\
    \n    for word in $1; do\n        unique_chars=$(echo $word | grep -o . | sort\
    \ | uniq | wc -l)\n        if [[ $unique_chars -gt $max ]]; then\n           \
    \ max=$unique_chars\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $chars -gt $max_chars ]]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ count=0\n    for word in $1; do\n        count=$(echo $word | grep -o . | sort\
    \ | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word\n    local max_count\n    local word\n\
    \    local count\n    for word in $1; do\n        count=$(echo $word | grep -o\
    \ . | sort | uniq | wc -l)\n        if [[ -z $max_count || $count -gt $max_count\
    \ ]]; then\n            max_count=$count\n            max_word=$word\n       \
    \ fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max ]]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    max_len=0\n    max_word=\"\
    \"\n    for word in $1; do\n        len=$(echo $word | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # The first word is the longest by default\n    max_word=$(echo\
    \ $1 | cut -d ' ' -f 1)\n    max_word_len=$(echo $max_word | wc -c)\n    # Loop\
    \ through the list of words\n    for word in $1; do\n        # Get the length\
    \ of the word\n        word_len=$(echo $word | wc -c)\n        # If the word is\
    \ longer than the current max, update the max\n        if [ $word_len -gt $max_word_len\
    \ ]; then\n            max_word=$word\n            max_word_len=$word_len\n  \
    \      fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    local max_len=0\n\
    \    local max_word=\"\"\n    for word in $1; do\n        local len=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [[ $len -gt $max_len ]]; then\n\
    \            max_len=$len\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word max_count\n    for word in $1; do\n \
    \       local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [[ -z $max_count || $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | sed 's/\\(.\\)/\\1\\\
    n/g' | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n        \
    \    max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=0\n    local max_word=\"\"\n    for word\
    \ in $1; do\n        local len=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        \
    \    max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=0\n        for ((i=0; i<${#word}; i++)); do\n\
    \            local char=${word:$i:1}\n            if [[ $word == *\"$char\"* ]];\
    \ then\n                count=$((count+1))\n            fi\n        done\n   \
    \     if [[ $count -gt $max_count ]]; then\n            max_count=$count\n   \
    \         max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word\n    local count\n    for word in $1; do\n        count=$(echo \"$word\"\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | tr -cd '[[:alnum:]]' | wc -c)\n\
    \        if [ $len -gt $max_len ]; then\n            max_len=$len\n          \
    \  max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local len=$(echo $word | tr -cd '[[:alnum:]]' | wc -c)\n   \
    \     if [[ $len -gt $max ]]; then\n            max=$len\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use the following command to test it.\n\
    \    # echo $(find_max \"name of string\")\n    # echo $(find_max \"name enam\
    \ game\")\n    # echo $(find_max \"aaaaaaa bb cc\")\n    # echo $(find_max \"\
    name of string\" \"name enam game\" \"aaaaaaa bb cc\")\n    # echo $(find_max\
    \ \"name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"name of string\" \"\
    name enam game\" \"aaaaaaa bb cc\")\n    # echo $(find_max \"name of string\"\
    \ \"name enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"\
    aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa bb cc\")\n   \
    \ # echo $(find_max \"name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"\
    name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name\
    \ enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa\
    \ bb cc\")\n    # echo $(find_max \"name of string\" \"name enam game\" \"aaaaaaa\
    \ bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"name of string\"\
    \ \"name enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"\
    aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa bb cc\")\n   \
    \ # echo $(find_max \"name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"\
    name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name\
    \ enam game\" \"aaaaaaa bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa\
    \ bb cc\" \"name of string\" \"name enam game\" \"aaaaaaa bb cc\" \"name of string\"\
    \ \"name enam game\" \"aaaaaaa bb cc\")\n    # echo $(find_max \"name\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkf1l7f2l.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpkf1l7f2l.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # You can use the following\
    \ command to sort the input:\n    # sort -nr -k2\n    # The above command will\
    \ sort based on the second column (-k2)\n    # in reverse numerical order (-nr)\n\
    \    #\n    # For testing purposes, you can comment out all the commands\n   \
    \ # in this function, and manually set the output variable\n    # to a string\
    \ of your choice.\n    # Example:\n    # output=\"string\"\n    #\n    # The following\
    \ command will then print your output variable.\n    # echo $output\n    #\n \
    \   # You can even use the following command to write to a file:\n    # echo $output\
    \ > output.txt\n    #\n    # The following command will read from the file you\
    \ wrote to:\n    # output=$(cat output.txt)\n    #\n    # The following command\
    \ will print your output variable.\n    # echo $output\n    #\n    # You can also\
    \ write your code here to set the output variable.\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfpg0pcca.sh: line 135: syntax error near unexpected token `}''

    /tmp/tmpfpg0pcca.sh: line 135: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # your code here\n    echo \"Not implemented\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # This generates a random exit code from 1 to\
    \ 10\n    exit $(( $RANDOM % 10 + 1 ))\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Write your code here\n  echo \"\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  local word=\"\
    \"\n  local count=0\n  for word in $1; do\n    count=$(echo $word | grep -o .\
    \ | sort | uniq | wc -l)\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: implement this function\n  # Hint: use the following\
    \ command to get the number of unique characters\n  # in a string:\n  # echo $1\
    \ | fold -w1 | sort -u | wc -l\n  #\n  # Hint: use the following command to sort\
    \ the list of strings:\n  # echo $1 | tr ' ' '\\n' | sort\n  #\n  # Hint: use\
    \ the following command to get the first string in the list:\n  # echo $1 | cut\
    \ -d' ' -f1\n  #\n  # Hint: use the following command to get the rest of the list:\n\
    \  # echo $1 | cut -d' ' -f2-\n  #\n  # Hint: use the following command to get\
    \ the first string in the list:\n  # echo $1 | cut -d' ' -f1\n  #\n  # Hint: use\
    \ the following command to get the rest of the list:\n  # echo $1 | cut -d' '\
    \ -f2-\n  #\n  # Hint: use the following command to get the first string in the\
    \ list:\n  # echo $1 | cut -d' ' -f1\n  #\n  # Hint: use the following command\
    \ to get the rest of the list:\n  # echo $1 | cut -d' ' -f2-\n  #\n  # Hint: use\
    \ the following command to get the first string in the list:\n  # echo $1 | cut\
    \ -d' ' -f1\n  #\n  # Hint: use the following command to get the rest of the list:\n\
    \  # echo $1 | cut -d' ' -f2-\n  #\n  # Hint: use the following command to get\
    \ the first string in the list:\n  # echo $1 | cut -d' ' -f1\n  #\n  # Hint: use\
    \ the following command to get the rest of the list:\n  # echo $1 | cut -d' '\
    \ -f2-\n  #\n  # Hint: use the following command to get the first string in the\
    \ list:\n  # echo $1 | cut -d' ' -f1\n  #\n  # Hint: use the following command\
    \ to get the\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsncm1dn1.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpsncm1dn1.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo $word | fold -w1 |\
    \ sort | uniq | wc -l)\n        if [ $unique_chars -gt $max_unique_chars ]; then\n\
    \            max_unique_chars=$unique_chars\n            max_word=$word\n    \
    \    fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $chars -gt $max_chars ]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use echo to return your result\n    echo\
    \ \"name\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # find the word with the maximum number of unique characters\n\
    \    # and store it in the variable max_word\n    max_word=\n    max_count=0\n\
    \    for word in $1; do\n        # count the number of unique characters in $word\n\
    \        count=0\n        for ((i=0; i<${#word}; i++)); do\n            # check\
    \ if the character at index $i is unique\n            is_unique=1\n          \
    \  for ((j=0; j<i; j++)); do\n                if [[ ${word:$i:1} == ${word:$j:1}\
    \ ]]; then\n                    is_unique=0\n                    break\n     \
    \           fi\n            done\n            if [[ $is_unique == 1 ]]; then\n\
    \                count=$((count+1))\n            fi\n        done\n        # update\
    \ max_word and max_count if necessary\n        if [[ $count -gt $max_count ]];\
    \ then\n            max_word=$word\n            max_count=$count\n        fi\n\
    \    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # You can use the following\
    \ command to sort the input:\n    # sort -nr -k2\n    # The -n option tells sort\
    \ to compare according to string numerical value\n    # The -r option reverses\
    \ the result of comparisons\n    # The -k2 option tells sort to compare on the\
    \ second field\n    # (i.e. the number of unique characters in the word)\n   \
    \ #\n    # For example, the following command prints the words in the list\n \
    \   # along with the number of unique characters in each word:\n    # for word\
    \ in $1; do echo $(echo $word | fold -w1 | sort | uniq | wc -l) $word; done\n\
    \    #\n    # You can redirect the output of this command to sort using the \"\
    |\" operator\n    # For example, the following command prints the words in the\
    \ list\n    # along with the number of unique characters in each word\n    # in\
    \ descending order of the number of unique characters:\n    # for word in $1;\
    \ do echo $(echo $word | fold -w1 | sort | uniq | wc -l) $word; done | sort -nr\
    \ -k2\n    #\n    # You can use the head command to get the first word in this\
    \ list\n    # For example, the following command prints the first word in the\
    \ list\n    # along with the number of unique characters in the word:\n    # for\
    \ word in $1; do echo $(echo $word | fold -w1 | sort | uniq | wc -l) $word; done\
    \ | sort -nr -k2 | head -n1\n    #\n    # The following command prints just the\
    \ first word in the list:\n    # for word in $1; do echo $(echo $word | fold -w1\
    \ | sort | uniq | wc -l) $word; done | sort -nr -k2 | head -n1 | cut -d\" \" -f2-\n\
    \    #\n    # The following command prints just the first word in the list\n \
    \   # without leading or trailing whitespace:\n    # for word in $1; do echo $(echo\
    \ $word | fold -w1 | sort | uniq | wc -l) $word; done | sort -nr -k2 | head -n1\
    \ | cut\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp64c1yhth.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmp64c1yhth.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $chars -gt $max_chars ]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  local word=\"\
    \"\n  local count=0\n  for word in $1; do\n    count=$(echo $word | tr -cd '[[:alnum:]]'\
    \ | wc -c)\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort\
    \ -u | wc -l)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_word_len=0\n  local word=\"\
    \"\n  local word_len=0\n  for word in $1; do\n    word_len=$(echo -n \"$word\"\
    \ | tr -cd '[[:alnum:]]' | wc -c)\n    if [ $word_len -gt $max_word_len ]; then\n\
    \      max_word=$word\n      max_word_len=$word_len\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # This is a sample function, please remove it\
    \ when you start your implementation\n    echo \"name of string\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use a for\
    \ loop and a hash table\n    # Hint: use the following command to get the length\
    \ of a string:\n    # ${#string}\n    # Hint: use the following command to sort\
    \ a list of strings:\n    # sort -n\n    # Hint: use the following command to\
    \ sort a list of strings in\n    # reverse order:\n    # sort -nr\n    # Hint:\
    \ use the following command to sort a list of strings in\n    # lexicographical\
    \ order:\n    # sort -nk1\n    # Hint: use the following command to sort a list\
    \ of strings in\n    # reverse lexicographical order:\n    # sort -nrk1\n    #\
    \ Hint: use the following command to get the first element of a list:\n    # head\
    \ -n 1\n    # Hint: use the following command to get the last element of a list:\n\
    \    # tail -n 1\n    # Hint: use the following command to get the first n elements\
    \ of a list:\n    # head -n n\n    # Hint: use the following command to get the\
    \ last n elements of a list:\n    # tail -n n\n    # Hint: use the following command\
    \ to get the n-th element of a list:\n    # head -n n | tail -n 1\n    # Hint:\
    \ use the following command to get the n-th to m-th elements of a list:\n    #\
    \ head -n m | tail -n $(($m - $n + 1))\n    # Hint: use the following command\
    \ to get the first element of a list\n    # without the newline character:\n \
    \   # head -n 1 | tr -d '\\n'\n    # Hint: use the following command to get the\
    \ last element of a list\n    # without the newline character:\n    # tail -n\
    \ 1 | tr -d '\\n'\n    # Hint: use the following command to get the first n elements\
    \ of a list\n    # without the newline characters:\n    # head -n n | tr -d '\\\
    n'\n    # Hint: use the following command to get the last n elements of a list\n\
    \    # without the newline characters:\n    # tail -n\n}\n\ncandidate() {\n  \
    \  find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuo69kvi5.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpuo69kvi5.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u\n    # Hint: use the following\
    \ command to count the number of unique characters\n    # wc -m\n    # Hint: use\
    \ the following command to sort the list by the number of unique\n    # characters\n\
    \    # sort -u -k2\n    # Hint: use the following command to sort the list by\
    \ the number of unique\n    # characters and then by lexicographical order\n \
    \   # sort -u -k2,2 -k1,1\n    # Hint: use the following command to get the first\
    \ line\n    # head -n 1\n    # Hint: use the following command to get the first\
    \ word\n    # cut -d ' ' -f 1\n    # Hint: use the following command to get the\
    \ second word\n    # cut -d ' ' -f 2\n    # Hint: use the following command to\
    \ get the first word of the first line\n    # head -n 1 | cut -d ' ' -f 1\n  \
    \  # Hint: use the following command to get the second word of the first line\n\
    \    # head -n 1 | cut -d ' ' -f 2\n    # Hint: use the following command to get\
    \ the first word of the first line\n    # of the sorted list\n    # sort -u -k2,2\
    \ -k1,1 | head -n 1 | cut -d ' ' -f 1\n    # Hint: use the following command to\
    \ get the second word of the first line\n    # of the sorted list\n    # sort\
    \ -u -k2,2 -k1,1 | head -n 1 | cut -d ' ' -f 2\n    # Hint: use the following\
    \ command to get the first word of the first line\n    # of the sorted list\n\
    \    # sort -u -k2,2 -k1,1 | head -n 1 | cut -d ' ' -f 1\n    # Hint: use the\
    \ following command to get the second word of the first line\n    # of the sorted\
    \ list\n    # sort -u -k2,2 -k1,1 | head -n 1 | cut -d ' ' -f 2\n    # Hint: use\
    \ the following command to get the\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcrcoiv6u.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpcrcoiv6u.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_chars=0\n  for word in\
    \ $1; do\n    local chars=$(echo $word | fold -w1 | sort -u | wc -l)\n    if [\
    \ $chars -gt $max_chars ]; then\n      max_chars=$chars\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Your code here\n    echo \"not implemented\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u\n    # Hint: use the following\
    \ command to count the number of unique characters\n    # wc -c\n    # Hint: use\
    \ the following command to sort the list by the number of unique characters\n\
    \    # sort -k2 -n\n    # Hint: use the following command to sort the list by\
    \ the number of unique characters and then by lexicographical order\n    # sort\
    \ -k2 -n -k1\n    # Hint: use the following command to get the first line of the\
    \ sorted list\n    # head -n 1\n    # Hint: use the following command to get the\
    \ first word of the first line\n    # cut -d \" \" -f 1\n    # Hint: use the following\
    \ command to get the second word of the first line\n    # cut -d \" \" -f 2\n\
    \    # Hint: use the following command to get the first word of the first line\n\
    \    # cut -d \" \" -f 1\n    # Hint: use the following command to get the first\
    \ word of the first line\n    # cut -d \" \" -f 1\n    # Hint: use the following\
    \ command to get the first word of the first line\n    # cut -d \" \" -f 1\n \
    \   # Hint: use the following command to get the first word of the first line\n\
    \    # cut -d \" \" -f 1\n    # Hint: use the following command to get the first\
    \ word of the first line\n    # cut -d \" \" -f 1\n    # Hint: use the following\
    \ command to get the first word of the first line\n    # cut -d \" \" -f 1\n \
    \   # Hint: use the following command to get the first word of the first line\n\
    \    # cut -d \" \" -f 1\n    # Hint: use the following command to get the first\
    \ word of the first line\n    # cut -d \" \" -f 1\n    # Hint: use the following\
    \ command to get the first word of the first line\n    # cut -d \" \" -f 1\n \
    \   # Hint: use the following command to get the first word of the first line\n\
    \    # cut -d \" \" -f 1\n    # Hint\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwo1jbarr.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpwo1jbarr.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO\n    echo \"TODO\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # $1 is a space-separated list\n    # $2 is the word\
    \ to compare\n    # $3 is the current max\n    # $4 is the current max word\n\
    \    # $5 is the current max unique chars\n    # $6 is the current max word unique\
    \ chars\n    # $7 is the current max word lexicographical order\n    # $8 is the\
    \ current max word lexicographical order\n    # $9 is the current max word lexicographical\
    \ order\n    # $10 is the current max word lexicographical order\n    local list=$1\n\
    \    local word=$2\n    local max=$3\n    local max_word=$4\n    local max_unique_chars=$5\n\
    \    local max_word_unique_chars=$6\n    local max_word_lexicographical_order=$7\n\
    \    local max_word_lexicographical_order_unique_chars=$8\n    local max_word_lexicographical_order_unique_chars_max=$9\n\
    \    local max_word_lexicographical_order_unique_chars_max_word=${10}\n    local\
    \ unique_chars=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if [[ $unique_chars\
    \ -gt $max ]]; then\n        max=$unique_chars\n        max_word=$word\n    fi\n\
    \    if [[ $unique_chars -gt $max_unique_chars ]]; then\n        max_unique_chars=$unique_chars\n\
    \        max_word_unique_chars=$word\n    fi\n    if [[ $word < $max_word_lexicographical_order\
    \ ]]; then\n        max_word_lexicographical_order=$word\n        max_word_lexicographical_order_unique_chars=$unique_chars\n\
    \        max_word_lexicographical_order_unique_chars_max=$max\n        max_word_lexicographical_order_unique_chars_max_word=$max_word\n\
    \    fi\n    if [[ $list == *\" \"* ]]; then\n        local first_word=${list%%\
    \ *}\n        local rest_of_list=${list#* }\n        find_max \"$rest_of_list\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmvnazzbr.sh: line 71: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmvnazzbr.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    # Hint:\n    #  \
    \ - Use `echo $1 | tr \" \" \"\\n\"` to convert the space-separated list\n   \
    \ #     to a newline-separated list.\n    #   - Use `sort -u` to sort the characters\
    \ in a string.\n    #   - Use `wc -c` to count the number of characters in a string.\n\
    \    #   - Use `sort -k2,2nr` to sort the strings by the second column.\n    #\
    \   - Use `head -n1` to get the first string.\n    echo $1 | tr \" \" \"\\n\"\
    \ | sort -u | wc -c | sort -k2,2nr | head -n1\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use the following command to test it.\n\
    \    # find_max \"name of string\"\n    # find_max \"name enam game\"\n    # find_max\
    \ \"aaaaaaa bb cc\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_mofmq59.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmp_mofmq59.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    echo \"Write your\
    \ code here\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_word_len=0\n  local word=\"\
    \"\n  local word_len=0\n  for word in $1; do\n    word_len=$(echo \"$word\" |\
    \ grep -o . | sort | uniq | wc -l)\n    if [ $word_len -gt $max_word_len ]; then\n\
    \      max_word_len=$word_len\n      max_word=$word\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # your code here\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use the following command to test it\n \
    \   # ./find_max.sh \"name of string\"\n    # ./find_max.sh \"name enam game\"\
    \n    # ./find_max.sh \"aaaaaaa bb cc\"\n    # ./find_max.sh \"aaaaaaa bb cc aa\"\
    \n    # ./find_max.sh \"aaaaaaa bb cc aa bbb\"\n    # ./find_max.sh \"aaaaaaa\
    \ bb cc aa bbb aaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a\"\n   \
    \ # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa\"\n    # ./find_max.sh \"aaaaaaa\
    \ bb cc aa bbb aaa a aa aaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa\
    \ a aa aaa aaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa\
    \ aaaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa aaaaa\
    \ aaaaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa aaaaa\
    \ aaaaaa aaaaaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa\
    \ aaaaa aaaaaa aaaaaaa aaaaaaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb\
    \ aaa a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa\"\n    # ./find_max.sh\
    \ \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa aaaaa aaaaaa aaaaaaa aaaaaaaa aaaaaaaaa\
    \ aaaaaaaaaa\"\n    # ./find_max.sh \"aaaaaaa bb cc aa bbb aaa a aa aaa aaaa aaaaa\
    \ aaaaaa aaaaaaa aaaaa\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx6tcngeg.sh: line 35: syntax error near unexpected token `}''

    /tmp/tmpx6tcngeg.sh: line 35: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # sort the list by length of unique characters\n   \
    \ # and then by lexicographical order\n    local sorted=$(echo \"$1\" | tr ' '\
    \ '\\n' | sort -u | sort -k1,1 -s -t' ' -k2,2nr)\n    # get the first line\n \
    \   local max=$(echo \"$sorted\" | head -n 1)\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\n    for word in $1;\
    \ do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \      if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use the following command to run test cases:\n\
    \    #   bash find_max_test.sh\n    #\n    # You can write up to 5 test cases\
    \ in find_max_test.sh\n    # Each test case is a bash command which tests your\
    \ function\n    #\n    # The following variables are available to you:\n    #\
    \   $1: space-separated list of strings\n    #   $2: the number of unique characters\
    \ in the longest string\n    #   $3: the longest string\n    #\n    # You can\
    \ use these variables to write your test cases\n    #\n    # You can also use\
    \ the following function to check your answer:\n    #   assert_equal <actual_value>\
    \ <expected_value>\n    #\n    # For example:\n    #   assert_equal \"$(find_max\
    \ \"name of string\")\" \"string\"\n    #   assert_equal \"$(find_max \"name enam\
    \ game\")\" \"enam\"\n    #   assert_equal \"$(find_max \"aaaaaaa bb cc\")\" \"\
    aaaaaaa\"\n    #\n    # If your function works correctly, this will originally\n\
    \    # print: \"All tests passed\"\n    #\n    # The following lines can be uncommented\
    \ to enter debug mode\n    # set -x\n    # set -e\n    #\n    # Your code starts\
    \ on the next line\n    # Your code ends on the next line\n    #\n    # Please\
    \ do not remove the following line\n    # set +x\n    # set +e\n    #\n    # The\
    \ following line is used to check your answer. Modify it to\n    # test your function.\n\
    \    # assert_equal \"$(find_max \"$1\")\" \"$3\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph3a9lb_6.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmph3a9lb_6.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo \"$word\" | grep -o\
    \ . | sort | uniq | wc -l)\n        if [ $unique_chars -gt $max_unique_chars ];\
    \ then\n            max_unique_chars=$unique_chars\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use the following command to run test cases:\n\
    \    #   bash find_max_test.sh\n    #\n    # You can add more test cases in find_max_test.sh\n\
    \    # Good luck!\n    max_word=\"\"\n    max_count=0\n    for word in $1; do\n\
    \        count=0\n        for char in $(echo $word | fold -w1); do\n         \
    \   if [[ ! $word =~ $char ]]; then\n                count=$((count+1))\n    \
    \        fi\n        done\n        if [[ $count -gt $max_count ]]; then\n    \
    \        max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique=0\n    for\
    \ word in $1; do\n        local unique=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $unique -gt $max_unique ]]; then\n            max_unique=$unique\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=''\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | tr -cd '[[:alnum:]]' | wc -c)\n\
    \        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        \
    \    max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # hint: use tr, sort,\
    \ uniq, wc, head, cut, sort, head\n    #       and other commands\n    #     \
    \  to solve this problem\n    #\n    #       Note: You can use the following command\
    \ to sort a string\n    #       in lexicographical order:\n    #       echo \"\
    string\" | tr \" \" \"\\n\" | sort | tr \"\\n\" \" \"\n    #\n    #       Note:\
    \ You can use the following command to get the number\n    #       of unique characters\
    \ in a string:\n    #       echo \"string\" | tr -d \" \" | sort | uniq | wc -l\n\
    \    #\n    #       Note: You can use the following command to get the first\n\
    \    #       word in a string:\n    #       echo \"string\" | cut -d \" \" -f\
    \ 1\n    #\n    #       Note: You can use the following command to get the first\n\
    \    #       line in a string:\n    #       echo \"string\" | head -n 1\n    #\n\
    \    #       Note: You can use the following command to get the last\n    #  \
    \     line in a string:\n    #       echo \"string\" | tail -n 1\n    #\n    #\
    \       Note: You can use the following command to get the last\n    #       word\
    \ in a string:\n    #       echo \"string\" | cut -d \" \" -f $(echo \"string\"\
    \ | wc -w)\n    #\n    #       Note: You can use the following command to get\
    \ the second\n    #       word in a string:\n    #       echo \"string\" | cut\
    \ -d \" \" -f 2\n    #\n    #       Note: You can use the following command to\
    \ get the second\n    #       to last word in a string:\n    #       echo \"string\"\
    \ | cut -d \" \" -f $(echo \"string\" | wc -w | tr -d \" \")\n    #\n    #   \
    \    Note: You can use the following command to get the second\n    #       to\
    \ last line in a string:\n    #       echo \"string\" | tail -n 2 | head -n 1\n\
    \    #\n    #       Note: You can use the following command to get the second\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprb4us282.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmprb4us282.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_word=\"\"\n    max_count=0\n    for word in $1;\
    \ do\n        count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # You can use the following\
    \ command to sort the input:\n    # sort -nr -k2\n    # The -n option tells sort\
    \ to do a numeric sort\n    # The -r option tells sort to do a reverse sort\n\
    \    # The -k2 option tells sort to sort based on the second field\n    # (i.e.\
    \ the number of unique characters)\n    #\n    # For example, the following command:\n\
    \    # sort -nr -k2 <<< \"name of string\"\n    # will output:\n    # string 3\n\
    \    # name 3\n    # of 2\n    #\n    # You can use the following command to get\
    \ the first line of the output:\n    # head -n 1\n    #\n    # For example, the\
    \ following command:\n    # head -n 1 <<< $(sort -nr -k2 <<< \"name of string\"\
    )\n    # will output:\n    # string 3\n    #\n    # You can use the following\
    \ command to get the first word of the output:\n    # cut -d \" \" -f 1\n    #\n\
    \    # For example, the following command:\n    # cut -d \" \" -f 1 <<< $(head\
    \ -n 1 <<< $(sort -nr -k2 <<< \"name of string\"))\n    # will output:\n    #\
    \ string\n    #\n    # You can use the following command to get the first word\
    \ of the output:\n    # cut -d \" \" -f 1\n    #\n    # For example, the following\
    \ command:\n    # cut -d \" \" -f 1 <<< $(head -n 1 <<< $(sort -nr -k2 <<< \"\
    name of string\"))\n    # will output:\n    # string\n    #\n    # You can use\
    \ the following command to get the first word of the output:\n    # cut -d \"\
    \ \" -f 1\n    #\n    # For example, the following command:\n    # cut -d \" \"\
    \ -f 1 <<< $(head -n 1 <<< $(sort -nr -k2 <<< \"name of string\"))\n    # will\
    \ output:\n    # string\n    #\n    # You can use the following command to get\
    \ the first word of the output:\n    # cut -d \" \" -f\n}\n\ncandidate() {\n \
    \   find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcymubxrp.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpcymubxrp.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your solution here\n    echo $1 | tr '\
    \ ' '\\n' | sort -u | sort -r -k1,1 | head -n 1\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_count=0\n    max_word=\"\"\n    for word in $1;\
    \ do\n        count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [[ $count -gt $max_count ]]; then\n            max_count=$count\n          \
    \  max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # your code here\n    echo \"name of string\" | tr '\
    \ ' '\\n' | sort -u | wc -l\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: Write your code here\n  local max_unique_char_count=0\n\
    \  local max_unique_char_word=\"\"\n  for word in $1; do\n    local unique_char_count=0\n\
    \    for (( i=0; i<${#word}; i++ )); do\n      local char=${word:$i:1}\n     \
    \ if [[ ! $word =~ $char ]]; then\n        (( unique_char_count++ ))\n      fi\n\
    \    done\n    if [[ $unique_char_count -gt $max_unique_char_count ]]; then\n\
    \      max_unique_char_count=$unique_char_count\n      max_unique_char_word=$word\n\
    \    fi\n  done\n  echo $max_unique_char_word\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # NOTE: You can add/delete some lines in this\
    \ block and add your code\n    #       between these lines.\n    local max_len=0\n\
    \    local max_str=\"\"\n    for word in $1; do\n        local len=${#word}\n\
    \        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        \
    \    max_str=$word\n        fi\n    done\n    echo $max_str\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=0\n    local max_word=\"\"\n    for word\
    \ in $1; do\n        local len=$(echo -n $word | grep -o . | sort | uniq | wc\
    \ -l)\n        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $len -gt $max_len ]; then\n            max_len=$len\n          \
    \  max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u\n    # Hint: use the following\
    \ command to count the number of unique characters\n    # wc -m\n    # Hint: use\
    \ the following command to sort the list by the number of unique\n    # characters\n\
    \    # sort -u -k2\n    # Hint: use the following command to sort the list by\
    \ the number of unique\n    # characters and then by lexicographical order\n \
    \   # sort -u -k2,2 -k1,1\n    # Hint: use the following command to get the first\
    \ line\n    # head -n 1\n    # Hint: use the following command to get the first\
    \ word\n    # cut -d ' ' -f 1\n    # Hint: use the following command to get the\
    \ first word\n    # cut -d ' ' -f 1\n    # Hint: use the following command to\
    \ get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following command\
    \ to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d ' ' -f 1\n    # Hint: use the following\
    \ command to get the first word\n    # cut -d\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptez13r6g.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmptez13r6g.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: implement this function\n  # Hint: use a for loop\
    \ to iterate over the list\n  # Hint: use the command \"echo\" to print the result\n\
    \  # Hint: use the command \"sort\" to sort the list\n  # Hint: use the command\
    \ \"uniq\" to count the number of unique characters\n  # Hint: use the command\
    \ \"wc\" to count the number of words\n  # Hint: use the command \"cut\" to get\
    \ the first word\n  # Hint: use the command \"head\" to get the first line\n \
    \ # Hint: use the command \"tail\" to get the last line\n  # Hint: use the command\
    \ \"tr\" to replace space with newline\n  # Hint: use the command \"grep\" to\
    \ filter the list\n  # Hint: use the command \"sed\" to replace the first word\
    \ with the number of unique characters\n  # Hint: use the command \"sort\" to\
    \ sort the list\n  # Hint: use the command \"head\" to get the first line\n  #\
    \ Hint: use the command \"cut\" to get the first word\n  # Hint: use the command\
    \ \"grep\" to filter the list\n  # Hint: use the command \"sed\" to replace the\
    \ first word with the number of unique characters\n  # Hint: use the command \"\
    sort\" to sort the list\n  # Hint: use the command \"head\" to get the first line\n\
    \  # Hint: use the command \"cut\" to get the first word\n  # Hint: use the command\
    \ \"grep\" to filter the list\n  # Hint: use the command \"sed\" to replace the\
    \ first word with the number of unique characters\n  # Hint: use the command \"\
    sort\" to sort the list\n  # Hint: use the command \"head\" to get the first line\n\
    \  # Hint: use the command \"cut\" to get the first word\n  # Hint: use the command\
    \ \"grep\" to filter the list\n  # Hint: use the command \"sed\" to replace the\
    \ first word with the number of unique characters\n  # Hint: use the command \"\
    sort\" to sort the list\n  # Hint: use the command \"head\" to get the first line\n\
    \  # H\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8cx4y1m.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmpb8cx4y1m.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # If $1 is empty, return nothing\n    if [ -z \"$1\"\
    \ ]; then\n        echo \"\"\n        return\n    fi\n\n    # Split $1 into an\
    \ array of words\n    words=($1)\n\n    # Find the word with maximum number of\
    \ unique characters\n    max_word=\"\"\n    max_count=0\n    for word in \"${words[@]}\"\
    ; do\n        # Count the number of unique characters in $word\n        count=$(echo\
    \ \"$word\" | grep -o . | sort | uniq | wc -l)\n\n        # If $count is greater\
    \ than $max_count, update $max_word and $max_count\n        if [ $count -gt $max_count\
    \ ]; then\n            max_word=\"$word\"\n            max_count=$count\n    \
    \    fi\n    done\n\n    # Print $max_word\n    echo \"$max_word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_word=\"\"\n    max_count=0\n    for word in $1;\
    \ do\n        if [ ${#word} -gt $max_count ]; then\n            max_count=${#word}\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo $1 | tr ' ' '\\n' |\
    \ sort -u | sort -r -k1,1 -k2,2n | head -n 1\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Write your code here\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_char=0\n    for word\
    \ in $1; do\n        local char_count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $char_count -gt $max_char ]; then\n            max_char=$char_count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_count=0\n    max_word=\"\"\n    for word in $1;\
    \ do\n        count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort | uniq | wc\
    \ -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo $word | grep -o . |\
    \ sort | uniq | wc -l)\n        if [ $unique_chars -gt $max_unique_chars ]; then\n\
    \            max_unique_chars=$unique_chars\n            max_word=$word\n    \
    \    fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $chars -gt $max_chars ]]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique=0\n    for\
    \ word in $1; do\n        local unique=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $unique -gt $max_unique ]; then\n            max_unique=$unique\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max=0\n    max_word=\n    for word in $1; do\n     \
    \   unique_chars=$(echo $word | fold -w1 | sort | uniq | wc -l)\n        if [[\
    \ $unique_chars -gt $max ]]; then\n            max=$unique_chars\n           \
    \ max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\n    for word in $1;\
    \ do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \      if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique=0\n    for\
    \ word in $1; do\n        local unique=$(echo \"$word\" | fold -w1 | sort | uniq\
    \ | wc -l)\n        if [[ $unique -gt $max_unique ]]; then\n            max_unique=$unique\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | sed 's/\\(.\\)/\\1\\\
    n/g' | sort -u | wc -l)\n        if [[ $count -gt $max_count ]]; then\n      \
    \      max_count=$count\n            max_word=$word\n        fi\n    done\n  \
    \  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        \
    \    max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Your code here\n    # Hint: use the following command\
    \ to sort the list\n    # sort -u\n    # Hint: use the following command to get\
    \ the length of a string\n    # ${#string}\n    # Hint: use the following command\
    \ to get the first word of a string\n    # ${string%% *}\n    # Hint: use the\
    \ following command to get the rest of the string\n    # ${string#* }\n    # Hint:\
    \ use the following command to get the unique characters of a string\n    # echo\
    \ $string | fold -w1 | sort -u\n    # Hint: use the following command to get the\
    \ length of the unique characters\n    # ${#string}\n    # Hint: use the following\
    \ command to get the first word of the unique characters\n    # ${string%% *}\n\
    \    # Hint: use the following command to get the rest of the unique characters\n\
    \    # ${string#* }\n    # Hint: use the following command to get the first word\
    \ of the unique characters\n    # ${string%% *}\n    # Hint: use the following\
    \ command to get the rest of the unique characters\n    # ${string#* }\n    #\
    \ Hint: use the following command to get the first word of the unique characters\n\
    \    # ${string%% *}\n    # Hint: use the following command to get the rest of\
    \ the unique characters\n    # ${string#* }\n    # Hint: use the following command\
    \ to get the first word of the unique characters\n    # ${string%% *}\n    # Hint:\
    \ use the following command to get the rest of the unique characters\n    # ${string#*\
    \ }\n    # Hint: use the following command to get the first word of the unique\
    \ characters\n    # ${string%% *}\n    # Hint: use the following command to get\
    \ the rest of the unique characters\n    # ${string#* }\n    # Hint: use the following\
    \ command to get the first word of the unique characters\n    # ${string%% *}\n\
    \    # Hint: use the following command to get the rest of the unique characters\n\
    \    # ${string#* }\n    # Hint: use the following command to get the first word\
    \ of the unique characters\n    # ${string%% *}\n    # Hint: use the\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp84558v_0.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp84558v_0.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwa4ou042.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpwa4ou042.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $len -gt $max_len ]; then\n            max_len=$len\n          \
    \  max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp98q7dw9i.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp98q7dw9i.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n   \
    \ if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ cur_word=\"\"\n    local cur_count=0\n    for cur_word in $1; do\n        cur_count=$(echo\
    \ $cur_word | grep -o . | sort | uniq | wc -l)\n        if [ $cur_count -gt $max_count\
    \ ]; then\n            max_count=$cur_count\n            max_word=$cur_word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo $1 | tr ' ' '\\n' |\
    \ sort -u | sort -r -k1,1 -k2,2 | head -n 1\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  local word=\"\
    \"\n  local count=0\n  for word in $1; do\n    count=$(echo $word | grep -o .\
    \ | sort | uniq | wc -l)\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [[ $count -gt $max_count ]]; then\n         \
    \   max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    # You can use the\
    \ following command to sort the words in lexicographical order:\n    # sort <<<\
    \ \"$1\"\n    #\n    # You can use the following command to get the number of\
    \ unique characters in a word:\n    # $(tr -dc 'a-z' <<< \"word\" | wc -c)\n \
    \   #\n    # You can use the following command to get the number of characters\
    \ in a word:\n    # $(wc -c <<< \"word\")\n    #\n    # You can use the following\
    \ command to get the first word in a list:\n    # head -n 1 <<< \"$1\"\n    #\n\
    \    # You can use the following command to get all but the first word in a list:\n\
    \    # tail -n +2 <<< \"$1\"\n    #\n    # You can use the following command to\
    \ get the first character in a word:\n    # head -c 1 <<< \"word\"\n    #\n  \
    \  # You can use the following command to get all but the first character in a\
    \ word:\n    # tail -c +2 <<< \"word\"\n    #\n    # You can use the following\
    \ command to get the last character in a word:\n    # tail -c 1 <<< \"word\"\n\
    \    #\n    # You can use the following command to get all but the last character\
    \ in a word:\n    # head -c -1 <<< \"word\"\n    #\n    # You can use the following\
    \ command to get the first character in a word:\n    # head -c 1 <<< \"word\"\n\
    \    #\n    # You can use the following command to get all but the first character\
    \ in a word:\n    # tail -c +2 <<< \"word\"\n    #\n    # You can use the following\
    \ command to get the last character in a word:\n    # tail -c 1 <<< \"word\"\n\
    \    #\n    # You can use the following command to get all but the last character\
    \ in a word:\n    # head -c -1 <<< \"word\"\n    #\n    # You can use the following\
    \ command to get the first character in a word:\n    # head -c 1 <<< \"word\"\n\
    \    #\n    # You can use the following command to get all\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3a4qjdn4.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp3a4qjdn4.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: Write your code here\n  echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort a string in lexicographical order:\n    # $ echo \"\
    string\" | sort\n    #\n    # Hint: use the following command to count the number\
    \ of unique characters\n    # in a string:\n    # $ echo \"string\" | fold -w1\
    \ | sort | uniq | wc -l\n    #\n    # Hint: use the following command to get the\
    \ first word in a string:\n    # $ echo \"string\" | cut -d' ' -f1\n    #\n  \
    \  # Hint: use the following command to get the second word in a string:\n   \
    \ # $ echo \"string\" | cut -d' ' -f2\n    #\n    # Hint: use the following command\
    \ to get the third word in a string:\n    # $ echo \"string\" | cut -d' ' -f3\n\
    \    #\n    # Hint: use the following command to get the fourth word in a string:\n\
    \    # $ echo \"string\" | cut -d' ' -f4\n    #\n    # Hint: use the following\
    \ command to get the fifth word in a string:\n    # $ echo \"string\" | cut -d'\
    \ ' -f5\n    #\n    # Hint: use the following command to get the sixth word in\
    \ a string:\n    # $ echo \"string\" | cut -d' ' -f6\n    #\n    # Hint: use the\
    \ following command to get the seventh word in a string:\n    # $ echo \"string\"\
    \ | cut -d' ' -f7\n    #\n    # Hint: use the following command to get the eighth\
    \ word in a string:\n    # $ echo \"string\" | cut -d' ' -f8\n    #\n    # Hint:\
    \ use the following command to get the ninth word in a string:\n    # $ echo \"\
    string\" | cut -d' ' -f9\n    #\n    # Hint: use the following command to get\
    \ the tenth word in a string:\n    # $ echo \"string\" | cut -d' ' -f10\n    #\n\
    \    # Hint: use the following command to get the eleventh word in a string:\n\
    \    # $ echo \"string\" | cut\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf6vuu6sv.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpf6vuu6sv.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # get the number of unique characters in each word\n\
    \    # and store it in an array\n    local -a num_unique_chars\n    local word\n\
    \    for word in $1; do\n        num_unique_chars+=($(echo $word | fold -w1 |\
    \ sort | uniq | wc -l))\n    done\n\n    # get the index of the word with maximum\
    \ number of unique characters\n    local max_index=0\n    local i\n    for ((i=1;\
    \ i<${#num_unique_chars[@]}; i++)); do\n        if [[ ${num_unique_chars[$i]}\
    \ -gt ${num_unique_chars[$max_index]} ]]; then\n            max_index=$i\n   \
    \     fi\n    done\n\n    # return the word at the index\n    local -a words\n\
    \    words=($1)\n    echo ${words[$max_index]}\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: Write your code here\n  # Hint: Use tr to remove\
    \ spaces and sort to sort the words\n  # Hint: Use uniq -c to count the number\
    \ of unique characters\n  # Hint: Use sort -n to sort the words by the number\
    \ of unique characters\n  # Hint: Use cut to get the first word\n  echo \"TODO\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010455
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # This generates a random exit code from 1 to\
    \ 10\n    exit $(( $RANDOM % 10 + 1 ))\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660010454
