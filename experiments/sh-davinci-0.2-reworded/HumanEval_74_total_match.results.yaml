language: sh
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local list1_total=0\n  local list2_total=0\n  for word in $list1; do\n    list1_total=$((list1_total\
    \ + ${#word}))\n  done\n  for word in $list2; do\n    list2_total=$((list2_total\
    \ + ${#word}))\n  done\n  if [ $list1_total -lt $list2_total ]; then\n    echo\
    \ $list1\n  else\n    echo $list2\n  fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -a result=()\n  local -i total1=0\n  local -i total2=0\n  local -i i=0\n\
    \  local -i j=0\n  local -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n\
    \  local -i len=0\n  local -i len_min=0\n  local -i len_max=0\n  local -i total_min=0\n\
    \  local -i total_max=0\n  local -i total=0\n  local -i total_min_index=0\n  local\
    \ -i total_max_index=0\n  local -i total_index=0\n  local -i total_index_min=0\n\
    \  local -i total_index_max=0\n  local -i total_index_min_index=0\n  local -i\
    \ total_index_max_index=0\n  local -i total_index_index=0\n  local -i total_index_index_min=0\n\
    \  local -i total_index_index_max=0\n  local -i total_index_index_min_index=0\n\
    \  local -i total_index_index_max_index=0\n  local -i total_index_index_index=0\n\
    \  local -i total_index_index_index_min=0\n  local -i total_index_index_index_max=0\n\
    \  local -i total_index_index_index_min_index=0\n  local -i total_index_index_index_max_index=0\n\
    \  local -i total_index_index_index_index=0\n  local -i total_index_index_index_index_min=0\n\
    \  local -i total_index_index_index_index_max=0\n  local -i total_index_index_index_index_min_index=0\n\
    \  local -i total_index_index_index_index_max_index=0\n  local -i total_index_index_index_index_index=0\n\
    \  local -i total_index_index_index\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=$(echo \"$list1\" | wc -c)\n    local list2_total_chars=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_total_chars\" -lt \"$list2_total_chars\"\
    \ ]; then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # your code here\n    # echo $1\n\
    \    # echo $2\n    # echo $3\n    # echo $4\n    # echo $5\n    # echo $6\n \
    \   # echo $7\n    # echo $8\n    # echo $9\n    # echo ${10}\n    # echo ${11}\n\
    \    # echo ${12}\n    # echo ${13}\n    # echo ${14}\n    # echo ${15}\n    #\
    \ echo ${16}\n    # echo ${17}\n    # echo ${18}\n    # echo ${19}\n    # echo\
    \ ${20}\n    # echo ${21}\n    # echo ${22}\n    # echo ${23}\n    # echo ${24}\n\
    \    # echo ${25}\n    # echo ${26}\n    # echo ${27}\n    # echo ${28}\n    #\
    \ echo ${29}\n    # echo ${30}\n    # echo ${31}\n    # echo ${32}\n    # echo\
    \ ${33}\n    # echo ${34}\n    # echo ${35}\n    # echo ${36}\n    # echo ${37}\n\
    \    # echo ${38}\n    # echo ${39}\n    # echo ${40}\n    # echo ${41}\n    #\
    \ echo ${42}\n    # echo ${43}\n    # echo ${44}\n    # echo ${45}\n    # echo\
    \ ${46}\n    # echo ${47}\n    # echo ${48}\n    # echo ${49}\n    # echo ${50}\n\
    \    # echo ${51}\n    # echo ${52}\n    # echo ${53}\n    # echo ${54}\n    #\
    \ echo ${55}\n    # echo ${56}\n    # echo ${57}\n    # echo ${58}\n    # echo\
    \ ${59}\n    # echo ${60}\n    # echo ${61}\n    # echo ${62}\n    # echo ${63}\n\
    \    # echo ${64}\n    # echo ${65}\n    # echo ${66}\n    # echo ${67}\n    #\
    \ echo ${68}\n    # echo ${69}\n    # echo ${70}\n    # echo ${71}\n    # echo\
    \ ${72}\n    # echo ${73}\n    # echo\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpurg2d_1d.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpurg2d_1d.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n  \
    \      total1=$((total1 + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++));\
    \ do\n        total2=$((total2 + ${#list2[i]}))\n    done\n\n    if ((total1 <\
    \ total2)); then\n        min=total1\n        max=total2\n        min_index=0\n\
    \        max_index=1\n    else\n        min=total2\n        max=total1\n     \
    \   min_index=1\n        max_index=0\n    fi\n\n    for ((i=0; i<len1; i++));\
    \ do\n        for ((j=0; j<len2; j++)); do\n            if [[ \"${list1[i]}\"\
    \ == \"${list2[j]}\" ]]; then\n                result[${#result[@]}]=\"\\\"${list1[i]}\\\
    \"\"\n            fi\n        done\n    done\n\n    if ((${#result[@]} == 0));\
    \ then\n        if ((min_index == 0)); then\n            echo \"[]\"\n       \
    \ else\n            echo \"[\\\"${list2[0]}\\\"]\"\n        fi\n    else\n   \
    \     echo \"[${result[@]}]\"\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min_len=0\n    local -i max_len=0\n    local -i min_total=0\n  \
    \  local -i max_total=0\n    local -a min_list=()\n    local -a max_list=()\n\
    \    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1\
    \ + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++)); do\n        total2=$((total2\
    \ + ${#list2[i]}))\n    done\n\n    if [[ total1 -lt total2 ]]; then\n       \
    \ min_len=len1\n        max_len=len2\n        min_total=total1\n        max_total=total2\n\
    \        min_list=(\"${list1[@]}\")\n        max_list=(\"${list2[@]}\")\n    else\n\
    \        min_len=len2\n        max_len=len1\n        min_total=total2\n      \
    \  max_total=total1\n        min_list=(\"${list2[@]}\")\n        max_list=(\"\
    ${list1[@]}\")\n    fi\n\n    for ((i=0; i<min_len; i++)); do\n        if [[ ${#min_list[i]}\
    \ -lt ${#max_list[i]} ]]; then\n            result+=(\"${min_list[i]}\")\n   \
    \     else\n            result+=(\"${max_list[i]}\")\n        fi\n    done\n \
    \   for ((i=min_len; i<max_len; i++)); do\n        result+=(\"${max_list[i]}\"\
    )\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_max=0\n    local -i len_min=0\n    local\
    \ -i sum_max=0\n    local -i sum_min=0\n    local -a list_max=()\n    local -a\
    \ list_min=()\n    local -a list_max_tmp=()\n    local -a list_min_tmp=()\n  \
    \  local -a list_max_final=()\n    local -a list_min_final=()\n    local -a list_tmp=()\n\
    \    local -a list_final=()\n    local -a list_tmp_final=()\n    local -a list_tmp_final_final=()\n\
    \    local -a list_tmp_final_final_final=()\n    local -a list_tmp_final_final_final_final=()\n\
    \    local -a list_tmp_final_final_final_final_final=()\n    local -a list_tmp_final_final_final_final_final_final=()\n\
    \    local -a list_tmp_final_final_final_final_final_final_final=()\n    local\
    \ -a list_tmp_final_final_final_final_final_final_final_final=()\n    local -a\
    \ list_tmp_final_final_final_final_final_final_final_final_final=()\n    local\
    \ -a list_tmp_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_tmp_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_tmp_final_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_tmp_final_final_final\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local i=0\n    local j=0\n \
    \   local list1_len=0\n    local list2_len=0\n    local list1_arr=()\n    local\
    \ list2_arr=()\n    local result=()\n    local result_len=0\n    local result_str=\"\
    \"\n\n    # calculate the total number of chars in list1\n    for i in $list1;\
    \ do\n        total1=$((total1 + ${#i}))\n    done\n\n    # calculate the total\
    \ number of chars in list2\n    for i in $list2; do\n        total2=$((total2\
    \ + ${#i}))\n    done\n\n    # split the list1 and list2 into arrays\n    list1_arr=($list1)\n\
    \    list2_arr=($list2)\n    list1_len=${#list1_arr[@]}\n    list2_len=${#list2_arr[@]}\n\
    \n    # compare the total number of chars in list1 and list2\n    if [ $total1\
    \ -lt $total2 ]; then\n        result=(\"${list1_arr[@]}\")\n    elif [ $total1\
    \ -gt $total2 ]; then\n        result=(\"${list2_arr[@]}\")\n    else\n      \
    \  result=(\"${list1_arr[@]}\")\n    fi\n\n    # convert the result array into\
    \ a string\n    result_len=${#result[@]}\n    for ((i=0; i<result_len; i++));\
    \ do\n        result_str=\"$result_str \\\"${result[$i]}\\\"\"\n    done\n\n \
    \   echo \"[$result_str]\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local total1=0\n  local total2=0\n  for word in $list1; do\n    total1=$((total1\
    \ + ${#word}))\n  done\n  for word in $list2; do\n    total2=$((total2 + ${#word}))\n\
    \  done\n  if [ $total1 -lt $total2 ]; then\n    echo \"$list1\"\n  else\n   \
    \ echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2 + ${#list2[j]}))\n\
    \    done\n    if ((total1 < total2)); then\n        echo \"${list1[@]}\"\n  \
    \  else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_len\n  local list2_item_len\n  local list1_item_len_sum=0\n\
    \  local list2_item_len_sum=0\n  local list1_item_len_sum_list=()\n  local list2_item_len_sum_list=()\n\
    \  local list1_item_len_sum_list_len=0\n  local list2_item_len_sum_list_len=0\n\
    \  local list1_item_len_sum_list_len_max=0\n  local list2_item_len_sum_list_len_max=0\n\
    \  local list1_item_len_sum_list_len_max_index=0\n  local list2_item_len_sum_list_len_max_index=0\n\
    \  local list1_item_len_sum_list_len_max_index_list=()\n  local list2_item_len_sum_list_len_max_index_list=()\n\
    \  local list1_item_len_sum_list_len_max_index_list_len=0\n  local list2_item_len_sum_list_len_max_index_list_len=0\n\
    \  local list1_item_len_sum_list_len_max_index_list_len_max=0\n  local list2_item_len_sum_list_len_max_index_list_len_max=0\n\
    \  local list1_item_len_sum_list_len_max_index_list_len_max_index=0\n  local list2_item_len_sum_list_len_max_index_list_len_max_index=0\n\
    \  local list1_item_len_sum_list_len_max_index_list_len_max_index_list=()\n  local\
    \ list2_item_len_sum_list_len_max_index_list_len_max_index_list=()\n  local list\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a a1=($1)\n    local -a\
    \ a2=($2)\n    local -i l1=${#a1[@]}\n    local -i l2=${#a2[@]}\n    local -i\
    \ i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n    local -i\
    \ tmp1=0\n    local -i tmp2=0\n    local -i len1=0\n    local -i len2=0\n    local\
    \ -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i max_index=0\n\
    \    local -a result=()\n    local -a tmp=()\n    local -a tmp_result=()\n   \
    \ local -a tmp_result2=()\n    local -a tmp_result3=()\n    local -a tmp_result4=()\n\
    \    local -a tmp_result5=()\n    local -a tmp_result6=()\n    local -a tmp_result7=()\n\
    \    local -a tmp_result8=()\n    local -a tmp_result9=()\n    local -a tmp_result10=()\n\
    \    local -a tmp_result11=()\n    local -a tmp_result12=()\n    local -a tmp_result13=()\n\
    \    local -a tmp_result14=()\n    local -a tmp_result15=()\n    local -a tmp_result16=()\n\
    \    local -a tmp_result17=()\n    local -a tmp_result18=()\n    local -a tmp_result19=()\n\
    \    local -a tmp_result20=()\n    local -a tmp_result21=()\n    local -a tmp_result22=()\n\
    \    local -a tmp_result23=()\n    local -a tmp_result24=()\n    local -a tmp_result25=()\n\
    \    local -a tmp_result26=()\n    local -a tmp_result27=()\n    local -a tmp_result28=()\n\
    \    local -a tmp_result29=()\n    local -a tmp_result30=()\n    local -a tmp_result31\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_arr\n    local list2_arr\n\
    \    local i\n    local j\n    local str\n    local len\n\n    list1_arr=($list1)\n\
    \    list2_arr=($list2)\n\n    for i in ${list1_arr[@]}; do\n        len=${#i}\n\
    \        total1=$((total1 + len))\n    done\n\n    for j in ${list2_arr[@]}; do\n\
    \        len=${#j}\n        total2=$((total2 + len))\n    done\n\n    if [ $total1\
    \ -lt $total2 ]; then\n        echo \"${list1_arr[@]}\"\n    else\n        echo\
    \ \"${list2_arr[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # TODO: Write your code here\n\
    \    # Hint: You can use the following command to get the length of a string:\n\
    \    #       ${#string}\n    #       For example, ${#\"hi\"} will return 2\n \
    \   #       For more information, please refer to:\n    #       http://tldp.org/LDP/abs/html/string-manipulation.html\n\
    \    # Hint: You can use the following command to convert a string to an array:\n\
    \    #       arr=($string)\n    #       For example, arr=(\"hi\" \"admin\")\n\
    \    #       For more information, please refer to:\n    #       http://tldp.org/LDP/abs/html/arrays.html\n\
    \    # Hint: You can use the following command to convert an array to a string:\n\
    \    #       string=$(printf \"%s \" \"${arr[@]}\")\n    #       For example,\
    \ string=$(printf \"%s \" \"${arr[@]}\")\n    #       For more information, please\
    \ refer to:\n    #       http://tldp.org/LDP/abs/html/arrays.html\n    # Hint:\
    \ You can use the following command to convert an array to a string:\n    #  \
    \     string=$(printf \"%s \" \"${arr[@]}\")\n    #       For example, string=$(printf\
    \ \"%s \" \"${arr[@]}\")\n    #       For more information, please refer to:\n\
    \    #       http://tldp.org/LDP/abs/html/arrays.html\n    # Hint: You can use\
    \ the following command to convert an array to a string:\n    #       string=$(printf\
    \ \"%s \" \"${arr[@]}\")\n    #       For example, string=$(printf \"%s \" \"\
    ${arr[@]}\")\n    #       For more information, please refer to:\n    #      \
    \ http://tldp.org/LDP/abs/html/arrays.html\n    # Hint: You can use the following\
    \ command to convert an array to a string:\n    #       string=$(printf \"%s \"\
    \ \"${arr[@]}\")\n    #       For example, string=$(printf \"%s \" \"${arr[@]}\"\
    )\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz9z1xc15.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpz9z1xc15.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i count1=0\n    local -i count2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min_len=0\n    local -i min_count=0\n    local -i min_index=0\n\
    \    local -i min_count_index=0\n    local -i min_len_index=0\n    local -i min_len_count=0\n\
    \    local -i min_len_count_index=0\n    local -i min_count_len=0\n    local -i\
    \ min_count_len_index=0\n    local -i min_len_count_len=0\n    local -i min_len_count_len_index=0\n\
    \    local -i min_count_len_count=0\n    local -i min_count_len_count_index=0\n\
    \    local -i min_len_count_len_count=0\n    local -i min_len_count_len_count_index=0\n\
    \    local -i min_count_len_count_len=0\n    local -i min_count_len_count_len_index=0\n\
    \    local -i min_len_count_len_count_len=0\n    local -i min_len_count_len_count_len_index=0\n\
    \    local -i min_count_len_count_len_count=0\n    local -i min_count_len_count_len_count_index=0\n\
    \    local -i min_len_count_len_count_len_count=0\n    local -i min_len_count_len_count_len_count_index=0\n\
    \    local -i min_count_len_count_len_count_len=0\n    local -i min_count_len_count_len_count_len_index=0\n\
    \    local -i min_len_count_len_count_len_count_len=0\n    local -i min_len_count\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n  \
    \      total1=$((total1 + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++));\
    \ do\n        total2=$((total2 + ${#list2[i]}))\n    done\n\n    if [[ total1\
    \ -lt total2 ]]; then\n        min=total1\n        min_index=1\n        max=total2\n\
    \        max_index=2\n    else\n        min=total2\n        min_index=2\n    \
    \    max=total1\n        max_index=1\n    fi\n\n    for ((i=0; i<len1; i++));\
    \ do\n        for ((j=0; j<len2; j++)); do\n            if [[ ${list1[i]} == ${list2[j]}\
    \ ]]; then\n                result[${#result[@]}]=${list1[i]}\n            fi\n\
    \        done\n    done\n\n    if [[ ${#result[@]} -eq 0 ]]; then\n        if\
    \ [[ min_index -eq 1 ]]; then\n            echo ${list1[@]}\n        else\n  \
    \          echo ${list2[@]}\n        fi\n    else\n        echo ${result[@]}\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=0\n    local list2_len=0\n    local list1_item\n   \
    \ local list2_item\n    local list1_item_len\n    local list2_item_len\n    local\
    \ list1_item_len_sum=0\n    local list2_item_len_sum=0\n    local list1_item_len_sum_max=0\n\
    \    local list2_item_len_sum_max=0\n    local list1_item_len_sum_max_index=0\n\
    \    local list2_item_len_sum_max_index=0\n    local list1_item_len_sum_max_index_len=0\n\
    \    local list2_item_len_sum_max_index_len=0\n    local list1_item_len_sum_max_index_len_max=0\n\
    \    local list2_item_len_sum_max_index_len_max=0\n    local list1_item_len_sum_max_index_len_max_index=0\n\
    \    local list2_item_len_sum_max_index_len_max_index=0\n    local list1_item_len_sum_max_index_len_max_index_len=0\n\
    \    local list2_item_len_sum_max_index_len_max_index_len=0\n    local list1_item_len_sum_max_index_len_max_index_len_max=0\n\
    \    local list2_item_len_sum_max_index_len_max_index_len_max=0\n    local list1_item_len_sum_max_index_len_max_index_len_max_index=0\n\
    \    local list2_item_len_sum_max_index_len_max_index_len_max_index=0\n    local\
    \ list1_item_len_sum_max_index_len_max_index_len_max_index_len=0\n    local list2_item_len_sum_max_index_len_max_index_len_max_index_len=0\n\
    \    local list\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_array\n    local\
    \ list2_array\n    local i\n    local j\n    local tmp\n    local result\n   \
    \ list1_array=($list1)\n    list2_array=($list2)\n    for ((i=0; i<${#list1_array[@]};\
    \ i++)); do\n        tmp=${list1_array[$i]}\n        total1=$((total1 + ${#tmp}))\n\
    \    done\n    for ((j=0; j<${#list2_array[@]}; j++)); do\n        tmp=${list2_array[$j]}\n\
    \        total2=$((total2 + ${#tmp}))\n    done\n    if [ $total1 -lt $total2\
    \ ]; then\n        result=$list1\n    elif [ $total1 -gt $total2 ]; then\n   \
    \     result=$list2\n    else\n        result=$list1\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # Write your code here\n    # echo\
    \ $1\n    # echo $2\n    # echo $1 | wc -c\n    # echo $2 | wc -c\n    # echo\
    \ $1 | wc -c | awk '{print $1}'\n    # echo $2 | wc -c | awk '{print $1}'\n  \
    \  # echo $1 | wc -c | awk '{print $1}' | tr -d ' '\n    # echo $2 | wc -c | awk\
    \ '{print $1}' | tr -d ' '\n    # echo $1 | wc -c | awk '{print $1}' | tr -d '\
    \ ' | bc\n    # echo $2 | wc -c | awk '{print $1}' | tr -d ' ' | bc\n    # echo\
    \ $1 | wc -c | awk '{print $1}' | tr -d ' ' | bc | echo $?\n    # echo $2 | wc\
    \ -c | awk '{print $1}' | tr -d ' ' | bc | echo $?\n    # echo $1 | wc -c | awk\
    \ '{print $1}' | tr -d ' ' | bc | echo $? | tr -d ' '\n    # echo $2 | wc -c |\
    \ awk '{print $1}' | tr -d ' ' | bc | echo $? | tr -d ' '\n    # echo $1 | wc\
    \ -c | awk '{print $1}' | tr -d ' ' | bc | echo $? | tr -d ' ' | awk '{print $1}'\n\
    \    # echo $2 | wc -c | awk '{print $1}' | tr -d ' ' | bc | echo $? | tr -d '\
    \ ' | awk '{print $1}'\n    # echo $1 | wc -c | awk '{print $1}' | tr -d ' ' |\
    \ bc | echo $? | tr -d ' ' | awk '{print $1}' | tr -d ' '\n    # echo $2 | wc\
    \ -c | awk '{print $1}\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp3ouqylc.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpp3ouqylc.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_len=0\n    local\
    \ list2_len=0\n    local i=0\n    local j=0\n    local temp=0\n    local temp_len=0\n\
    \    local temp_str=\"\"\n    local result=\"\"\n    local result_len=0\n    local\
    \ result_str=\"\"\n    local result_temp=\"\"\n    local result_temp_len=0\n \
    \   local result_temp_str=\"\"\n    local result_temp_temp=\"\"\n    local result_temp_temp_len=0\n\
    \    local result_temp_temp_str=\"\"\n    local result_temp_temp_temp=\"\"\n \
    \   local result_temp_temp_temp_len=0\n    local result_temp_temp_temp_str=\"\"\
    \n    local result_temp_temp_temp_temp=\"\"\n    local result_temp_temp_temp_temp_len=0\n\
    \    local result_temp_temp_temp_temp_str=\"\"\n    local result_temp_temp_temp_temp_temp=\"\
    \"\n    local result_temp_temp_temp_temp_temp_len=0\n    local result_temp_temp_temp_temp_temp_str=\"\
    \"\n    local result_temp_temp_temp_temp_temp_temp=\"\"\n    local result_temp_temp_temp_temp_temp_temp_len=0\n\
    \    local result_temp_temp_temp_temp_temp_temp_str=\"\"\n    local result_temp_temp_temp_temp_temp_temp_temp=\"\
    \"\n    local result_temp_temp_temp_temp_temp_temp_temp_len=0\n    local result_temp_temp_temp_temp_temp_temp_temp_str=\"\
    \"\n    local result_temp_temp_temp_temp_temp_temp_temp_temp=\"\"\n    local result_temp_temp_temp_temp_temp_temp_temp_temp_len=0\n\
    \    local result_temp_temp_temp_temp_temp_temp_temp_temp_str=\"\"\n    local\
    \ result_temp_temp_temp_temp_temp_temp_temp_temp_temp=\"\"\n    local result_temp_temp_temp\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_min_result=()\n    local -a list_max_result=()\n\
    \    local -a list_result=()\n    local -a list_result_final=()\n    local -a\
    \ list_result_final_final=()\n    local -a list_result_final_final_final=()\n\
    \    local -a list_result_final_final_final_final=()\n    local -a list_result_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final=()\n    local -a\
    \ list_result_final_final_final_final_final_final_final=()\n    local -a list_result_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_result_final_final\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local total1=0\n  local total2=0\n\
    \  local list1=$1\n  local list2=$2\n  local i\n  local j\n  local word\n  local\
    \ word_len\n  local list1_len\n  local list2_len\n  local result\n  for i in $list1;\
    \ do\n    word=$(echo $i | tr -d '\"')\n    word_len=${#word}\n    total1=$((total1\
    \ + word_len))\n  done\n  for j in $list2; do\n    word=$(echo $j | tr -d '\"\
    ')\n    word_len=${#word}\n    total2=$((total2 + word_len))\n  done\n  if [ $total1\
    \ -lt $total2 ]; then\n    result=$list1\n  else\n    result=$list2\n  fi\n  echo\
    \ $result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [[ $list1_len -lt $list2_len ]]; then\n        echo\
    \ \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1 list2\n    list1=($1)\n\
    \    list2=($2)\n    local total1 total2\n    total1=0\n    total2=0\n    for\
    \ i in ${list1[@]}; do\n        total1=$((total1 + ${#i}))\n    done\n    for\
    \ i in ${list2[@]}; do\n        total2=$((total2 + ${#i}))\n    done\n    if [\
    \ $total1 -lt $total2 ]; then\n        echo \"${list1[@]}\"\n    else\n      \
    \  echo \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local l1=\"$1\"\n  local l2=\"$2\"\
    \n  local l1_total=0\n  local l2_total=0\n  local l1_list=()\n  local l2_list=()\n\
    \  local i=0\n  local j=0\n  local l1_len=0\n  local l2_len=0\n  local l1_item=\"\
    \"\n  local l2_item=\"\"\n  local l1_item_len=0\n  local l2_item_len=0\n  local\
    \ result=()\n\n  # Get the total number of chars in each list\n  for l1_item in\
    \ $l1; do\n    l1_item_len=${#l1_item}\n    l1_total=$((l1_total + l1_item_len))\n\
    \  done\n  for l2_item in $l2; do\n    l2_item_len=${#l2_item}\n    l2_total=$((l2_total\
    \ + l2_item_len))\n  done\n\n  # If the total number of chars in l1 is less than\
    \ l2, return l1\n  if [ $l1_total -lt $l2_total ]; then\n    echo \"$l1\"\n  \
    \  return\n  fi\n\n  # If the total number of chars in l2 is less than l1, return\
    \ l2\n  if [ $l2_total -lt $l1_total ]; then\n    echo \"$l2\"\n    return\n \
    \ fi\n\n  # If the total number of chars in l1 is equal to l2, return l1\n  if\
    \ [ $l1_total -eq $l2_total ]; then\n    echo \"$l1\"\n    return\n  fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n\
    \    local -i len2=${#list2[@]}\n    local -i sum1=0\n    local -i sum2=0\n  \
    \  local -i len=0\n    local -i sum=0\n    local -a result=()\n    local -i result_len=0\n\
    \    local -i result_sum=0\n    local -a result_list=()\n    local -i result_list_len=0\n\
    \    local -i result_list_sum=0\n    local -a tmp_list=()\n    local -i tmp_list_len=0\n\
    \    local -i tmp_list_sum=0\n    local -a tmp_result=()\n    local -i tmp_result_len=0\n\
    \    local -i tmp_result_sum=0\n    local -a tmp_result_list=()\n    local -i\
    \ tmp_result_list_len=0\n    local -i tmp_result_list_sum=0\n    local -a tmp_result_list_list=()\n\
    \    local -i tmp_result_list_list_len=0\n    local -i tmp_result_list_list_sum=0\n\
    \    local -a tmp_result_list_list_list=()\n    local -i tmp_result_list_list_list_len=0\n\
    \    local -i tmp_result_list_list_list_sum=0\n    local -a tmp_result_list_list_list_list=()\n\
    \    local -i tmp_result_list_list_list_list_len=0\n    local -i tmp_result_list_list_list_list_sum=0\n\
    \    local -a tmp_result_list_list_list_list_list=()\n    local -i tmp_result_list_list_list_list_list_len=0\n\
    \    local -i tmp_result_list_list_list_list_list_sum=0\n    local -a tmp_result_list_list_list_list_list_list\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_length\n  local list2_item_length\n  local list1_item_length_total=0\n\
    \  local list2_item_length_total=0\n  local list1_item_length_total_max=0\n  local\
    \ list2_item_length_total_max=0\n  local list1_item_length_total_max_index=0\n\
    \  local list2_item_length_total_max_index=0\n  local list1_item_length_total_max_index_item\n\
    \  local list2_item_length_total_max_index_item\n  local list1_item_length_total_max_index_item_length\n\
    \  local list2_item_length_total_max_index_item_length\n  local list1_item_length_total_max_index_item_length_total=0\n\
    \  local list2_item_length_total_max_index_item_length_total=0\n  local list1_item_length_total_max_index_item_length_total_max=0\n\
    \  local list2_item_length_total_max_index_item_length_total_max=0\n  local list1_item_length_total_max_index_item_length_total_max_index=0\n\
    \  local list2_item_length_total_max_index_item_length_total_max_index=0\n  local\
    \ list1_item_length_total_max_index_item_length_total_max_index_item\n  local\
    \ list2_item_length_total_max_index_item_length_total_max_index_item\n  local\
    \ list1_item_length_total_max_index_item_length_total_max_index_item_length\n\
    \  local list2_item_length_total_max_index_item_length_total_max_index_item_length\n\
    \  local list1_item_length_total_max_index_item_length_\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local list1_total=0\n  local list2_total=0\n  local list1_array=()\n  local\
    \ list2_array=()\n  local list1_array_index=0\n  local list2_array_index=0\n \
    \ local list1_array_length=0\n  local list2_array_length=0\n  local list1_array_element=\"\
    \"\n  local list2_array_element=\"\"\n  local list1_array_element_length=0\n \
    \ local list2_array_element_length=0\n  local list1_array_element_length_total=0\n\
    \  local list2_array_element_length_total=0\n  local result_array=()\n  local\
    \ result_array_index=0\n  local result_array_length=0\n  local result_array_element=\"\
    \"\n  local result_array_element_length=0\n  local result_array_element_length_total=0\n\
    \  local result_array_element_length_total_max=0\n  local result_array_element_length_total_max_index=0\n\
    \  local result_array_element_length_total_max_index_length=0\n  local result_array_element_length_total_max_index_length_total=0\n\
    \  local result_array_element_length_total_max_index_length_total_max=0\n  local\
    \ result_array_element_length_total_max_index_length_total_max_index=0\n  local\
    \ result_array_element_length_total_max_index_length_total_max_index_length=0\n\
    \  local result_array_element_length_total_max_index_length_total_max_index_length_total=0\n\
    \  local result_array_element_length_total_max_index_length_total_max_index_length_total_max=0\n\
    \  local result_array_element_length_total_max_index_length_total_max_index_length_total_max_index=0\n\
    \  local result_array_element_length_total_max_index_length_total_max_index_length_total_\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # Write your code here\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0rarttiw.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmp0rarttiw.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a list1_len\n    local -a list2_len\n    local -a\
    \ list1_len_sum\n    local -a list2_len_sum\n    local -a list1_len_sum_len\n\
    \    local -a list2_len_sum_len\n    local -a list1_len_sum_len_len\n    local\
    \ -a list2_len_sum_len_len\n    local -a list1_len_sum_len_len_len\n    local\
    \ -a list2_len_sum_len_len_len\n    local -a list1_len_sum_len_len_len_len\n \
    \   local -a list2_len_sum_len_len_len_len\n    local -a list1_len_sum_len_len_len_len_len\n\
    \    local -a list2_len_sum_len_len_len_len_len\n    local -a list1_len_sum_len_len_len_len_len_len\n\
    \    local -a list2_len_sum_len_len_len_len_len_len\n    local -a list1_len_sum_len_len_len_len_len_len_len\n\
    \    local -a list2_len_sum_len_len_len_len_len_len_len\n    local -a list1_len_sum_len_len_len_len_len_len_len_len\n\
    \    local -a list2_len_sum_len_len_len_len_len_len_len_len\n    local -a list1_len_sum_len_len_len_len_len_len_len_len_len\n\
    \    local -a list2_len_sum_len_len_len_len_len_len_len_len_len\n    local -a\
    \ list1_len_sum_len_len_len_len_len_len_len_len_len_len\n    local -a list2_len_sum_len_len_len_len_len_len_len_len_len_len\n\
    \    local -a list1_len_\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i i\n  local\
    \ -i j\n  local -i len\n  local -i sum1=0\n  local -i sum2=0\n  local -i sum\n\
    \  local -a result\n  local -i result_len=0\n  local -i result_sum=0\n  local\
    \ -i result_index=0\n  local -i min_sum=0\n  local -i min_index=0\n  local -i\
    \ min_len=0\n  local -i min_result_len=0\n  local -i min_result_sum=0\n  local\
    \ -i min_result_index=0\n  local -i min_len_index=0\n  local -i min_len_sum=0\n\
    \  local -i min_len_result_len=0\n  local -i min_len_result_sum=0\n  local -i\
    \ min_len_result_index=0\n  local -i min_len_result_index_sum=0\n  local -i min_len_result_index_len=0\n\
    \  local -i min_len_result_index_result_len=0\n  local -i min_len_result_index_result_sum=0\n\
    \  local -i min_len_result_index_result_index=0\n  local -i min_len_result_index_result_index_sum=0\n\
    \  local -i min_len_result_index_result_index_len=0\n  local -i min_len_result_index_result_index_result_len=0\n\
    \  local -i min_len_result_index_result_index_result_sum=0\n  local -i min_len_result_index_result_index_result_index=0\n\
    \  local -i min_len_result_index_result_index_result_index_sum=0\n  local -i min_len_result_index_result_index_result_index_len=0\n\
    \  local -i min_len_result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local total1=0\n    local total2=0\n    local list1_arr=($list1)\n    local\
    \ list2_arr=($list2)\n    local i=0\n    local j=0\n    local result=()\n    for\
    \ i in ${list1_arr[@]}; do\n        total1=$((total1 + ${#i}))\n    done\n   \
    \ for j in ${list2_arr[@]}; do\n        total2=$((total2 + ${#j}))\n    done\n\
    \    if [ $total1 -lt $total2 ]; then\n        result=(\"${list1_arr[@]}\")\n\
    \    elif [ $total1 -gt $total2 ]; then\n        result=(\"${list2_arr[@]}\")\n\
    \    else\n        result=(\"${list1_arr[@]}\")\n    fi\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_arr\n    local list2_arr\n\
    \    local i\n    local j\n    local len1\n    local len2\n    local len\n   \
    \ local tmp\n    local result\n\n    list1_arr=($list1)\n    list2_arr=($list2)\n\
    \    len1=${#list1_arr[@]}\n    len2=${#list2_arr[@]}\n    len=$len1\n    if [\
    \ $len2 -lt $len1 ]; then\n        len=$len2\n    fi\n\n    for ((i=0; i<len;\
    \ i++)); do\n        tmp=${list1_arr[$i]}\n        total1=$((total1 + ${#tmp}))\n\
    \        tmp=${list2_arr[$i]}\n        total2=$((total2 + ${#tmp}))\n    done\n\
    \n    if [ $total1 -lt $total2 ]; then\n        result=$list1\n    elif [ $total1\
    \ -gt $total2 ]; then\n        result=$list2\n    else\n        result=$list1\n\
    \    fi\n\n    echo $result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total_chars=$(echo \"$list1\" | wc -c)\n  local list2_total_chars=$(echo\
    \ \"$list2\" | wc -c)\n  if [ \"$list1_total_chars\" -lt \"$list2_total_chars\"\
    \ ]; then\n    echo \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_total=0\n    local list2_total=0\n    local list1_count=0\n \
    \   local list2_count=0\n    local list1_arr\n    local list2_arr\n    local i\n\
    \    local j\n    local str\n    local str_len\n    local str_len_total\n    local\
    \ str_len_count\n    local str_len_arr\n    local str_len_arr_count\n    local\
    \ str_len_arr_total\n    local str_len_arr_min\n    local str_len_arr_min_index\n\
    \    local str_len_arr_min_count\n    local str_len_arr_min_total\n    local str_len_arr_min_arr\n\
    \    local str_len_arr_min_arr_count\n    local str_len_arr_min_arr_total\n  \
    \  local str_len_arr_min_arr_min\n    local str_len_arr_min_arr_min_index\n  \
    \  local str_len_arr_min_arr_min_count\n    local str_len_arr_min_arr_min_total\n\
    \    local str_len_arr_min_arr_min_arr\n    local str_len_arr_min_arr_min_arr_count\n\
    \    local str_len_arr_min_arr_min_arr_total\n    local str_len_arr_min_arr_min_arr_min\n\
    \    local str_len_arr_min_arr_min_arr_min_index\n    local str_len_arr_min_arr_min_arr_min_count\n\
    \    local str_len_arr_min_arr_min_arr_min_total\n    local str_len_arr_min_arr_min_arr_min_arr\n\
    \    local str_len_arr_min_arr_min_arr_min_arr_count\n    local str_len_arr_min_arr_min_arr_min_arr_total\n\
    \    local str_len_arr_min_arr_min_arr_min_arr_min\n    local str_len_arr_min_arr_min_arr_min_arr_min\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i total_min=0\n    local -i total_max=0\n    local -a list_min=()\n    local\
    \ -a list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local\
    \ -a list_tmp2=()\n    local -a list_tmp3=()\n    local -a list_tmp4=()\n    local\
    \ -a list_tmp5=()\n    local -a list_tmp6=()\n    local -a list_tmp7=()\n    local\
    \ -a list_tmp8=()\n    local -a list_tmp9=()\n    local -a list_tmp10=()\n   \
    \ local -a list_tmp11=()\n    local -a list_tmp12=()\n    local -a list_tmp13=()\n\
    \    local -a list_tmp14=()\n    local -a list_tmp15=()\n    local -a list_tmp16=()\n\
    \    local -a list_tmp17=()\n    local -a list_tmp18=()\n    local -a list_tmp19=()\n\
    \    local -a list_tmp20=()\n    local -a list_tmp21=()\n    local -a list_tmp22=()\n\
    \    local -a list_tmp23=()\n    local -a list_tmp24=()\n    local -a list_tmp25=()\n\
    \    local -a list_tmp26=()\n    local -a list_tmp27=()\n    local -a list_tmp28=()\n\
    \    local -a list_tmp29=()\n    local -a list_tmp30=()\n    local -a list_tmp31=()\n\
    \    local -a list_tmp\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i total1=0\n  local -i total2=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i result=0\n  local\
    \ -i min=0\n  local -i max=0\n  local -i tmp=0\n  local -i tmp1=0\n  local -i\
    \ tmp2=0\n  local -i tmp3=0\n  local -i tmp4=0\n  local -i tmp5=0\n  local -i\
    \ tmp6=0\n  local -i tmp7=0\n  local -i tmp8=0\n  local -i tmp9=0\n  local -i\
    \ tmp10=0\n  local -i tmp11=0\n  local -i tmp12=0\n  local -i tmp13=0\n  local\
    \ -i tmp14=0\n  local -i tmp15=0\n  local -i tmp16=0\n  local -i tmp17=0\n  local\
    \ -i tmp18=0\n  local -i tmp19=0\n  local -i tmp20=0\n  local -i tmp21=0\n  local\
    \ -i tmp22=0\n  local -i tmp23=0\n  local -i tmp24=0\n  local -i tmp25=0\n  local\
    \ -i tmp26=0\n  local -i tmp27=0\n  local -i tmp28=0\n  local -i tmp29=0\n  local\
    \ -i tmp30=0\n  local -i tmp31=0\n  local -i tmp32=0\n  local -i tmp33=0\n  local\
    \ -i tmp34=0\n  local -i tmp35=0\n  local -i tmp36=0\n  local -i tmp37=0\n  local\
    \ -i tmp38=0\n  local -i tmp39=0\n  local -i tmp40=0\n  local -i tmp41=0\n  local\
    \ -i tmp42=0\n  local -i tmp43=0\n  local -i tmp44\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=$(echo \"$list1\" | tr -d ' ' | wc -c)\n   \
    \ local list2_total_chars=$(echo \"$list2\" | tr -d ' ' | wc -c)\n    if [ \"\
    $list1_total_chars\" -lt \"$list2_total_chars\" ]; then\n        echo \"$list1\"\
    \n    elif [ \"$list1_total_chars\" -gt \"$list2_total_chars\" ]; then\n     \
    \   echo \"$list2\"\n    else\n        echo \"$list1\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_len\n  local list2_item_len\n  local result_list=()\n\
    \  local result_list_item\n  local result_list_item_len\n  local result_list_total=0\n\
    \  local result_list_item_len_diff\n  local result_list_item_len_diff_min=0\n\
    \  local result_list_item_len_diff_min_index=0\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local\
    \ q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local\
    \ w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local\
    \ cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n\
    \  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local\
    \ nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n\
    \  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local\
    \ yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n\
    \  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n \
    \ local jjj=0\n  local kkk=0\n  local lll\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_escaped\n    local list2_item_escaped\n    local list1_item_escaped_len\n\
    \    local list2_item_escaped_len\n    local list1_item_escaped_len_diff\n   \
    \ local list2_item_escaped_len_diff\n    local list1_item_escaped_len_diff_total=0\n\
    \    local list2_item_escaped_len_diff_total=0\n    local list1_item_escaped_len_diff_total_min=0\n\
    \    local list2_item_escaped_len_diff_total_min=0\n    local list1_item_escaped_len_diff_total_min_index=0\n\
    \    local list2_item_escaped_len_diff_total_min_index=0\n    local list1_item_escaped_len_diff_total_min_index_list=()\n\
    \    local list2_item_escaped_len_diff_total_min_index_list=()\n    local list1_item_escaped_len_diff_total_min_index_list_index=0\n\
    \    local list2_item_escaped_len_diff_total_min_index_list_index=0\n    local\
    \ list1_item_escaped_len_diff_total_min_index_list_index_item\n    local list2_item_escaped_len_diff_total_min_index_list_index_item\n\
    \    local list1_item_escaped_len_diff_total_min_index_list_index_item_len\n \
    \   local list2_item_escaped_len_diff_total_min_index_list_index_item_len\n  \
    \  local list1_item_escaped_len_diff_total_min_index_list_index_item_len_diff\n\
    \    local list2_item_escaped_len_diff\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    for word\
    \ in $list1; do\n        list1_total_chars=$((list1_total_chars + ${#word}))\n\
    \    done\n    for word in $list2; do\n        list2_total_chars=$((list2_total_chars\
    \ + ${#word}))\n    done\n    if [ $list1_total_chars -lt $list2_total_chars ];\
    \ then\n        echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local -a\
    \ list_tmp2=()\n    local -a list_tmp3=()\n    local -a list_tmp4=()\n    local\
    \ -a list_tmp5=()\n    local -a list_tmp6=()\n    local -a list_tmp7=()\n    local\
    \ -a list_tmp8=()\n    local -a list_tmp9=()\n    local -a list_tmp10=()\n   \
    \ local -a list_tmp11=()\n    local -a list_tmp12=()\n    local -a list_tmp13=()\n\
    \    local -a list_tmp14=()\n    local -a list_tmp15=()\n    local -a list_tmp16=()\n\
    \    local -a list_tmp17=()\n    local -a list_tmp18=()\n    local -a list_tmp19=()\n\
    \    local -a list_tmp20=()\n    local -a list_tmp21=()\n    local -a list_tmp22=()\n\
    \    local -a list_tmp23=()\n    local -a list_tmp24=()\n    local -a list_tmp25=()\n\
    \    local -a list_tmp26=()\n    local -a list_tmp27=()\n    local -a list_tmp28=()\n\
    \    local -a list_tmp29=()\n    local -a list_tmp30=()\n    local -a list_tmp31=()\n\
    \    local -a list_tmp\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local total1=0\n  local total2=0\n  local list1_array=($list1)\n  local list2_array=($list2)\n\
    \  local list1_len=${#list1_array[@]}\n  local list2_len=${#list2_array[@]}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local result=()\n  local result_len=0\n\
    \  local result_str=\"\"\n  local str1=\"\"\n  local str2=\"\"\n  local str1_len=0\n\
    \  local str2_len=0\n  local str1_array=()\n  local str2_array=()\n  local str1_array_len=0\n\
    \  local str2_array_len=0\n  local str1_char=\"\"\n  local str2_char=\"\"\n  local\
    \ str1_char_len=0\n  local str2_char_len=0\n  local str1_char_len_total=0\n  local\
    \ str2_char_len_total=0\n  local str1_char_len_total_max=0\n  local str2_char_len_total_max=0\n\
    \  local str1_char_len_total_max_index=0\n  local str2_char_len_total_max_index=0\n\
    \  local str1_char_len_total_max_index_array=()\n  local str2_char_len_total_max_index_array=()\n\
    \  local str1_char_len_total_max_index_array_len=0\n  local str2_char_len_total_max_index_array_len=0\n\
    \  local str1_char_len_total_max_index_array_len_max=0\n  local str2_char_len_total_max_index_array_len_max=0\n\
    \  local str1_char_len_total_max_index_array_len_max_index=0\n  local str2_char_len_total_max_index_array_len_max_index=0\n\
    \  local str1_char_len_total_max\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_size=$(echo \"$list1\" | awk '{print NF}')\n  local list2_size=$(echo\
    \ \"$list2\" | awk '{print NF}')\n  local list1_total_size=0\n  local list2_total_size=0\n\
    \  local list1_item\n  local list2_item\n  local i\n  for ((i=1; i<=list1_size;\
    \ i++)); do\n    list1_item=$(echo \"$list1\" | awk -v i=$i '{print $i}')\n  \
    \  list1_total_size=$((list1_total_size + ${#list1_item}))\n  done\n  for ((i=1;\
    \ i<=list2_size; i++)); do\n    list2_item=$(echo \"$list2\" | awk -v i=$i '{print\
    \ $i}')\n    list2_total_size=$((list2_total_size + ${#list2_item}))\n  done\n\
    \  if [ $list1_total_size -lt $list2_total_size ]; then\n    echo \"$list1\"\n\
    \  elif [ $list1_total_size -gt $list2_total_size ]; then\n    echo \"$list2\"\
    \n  else\n    echo \"$list1\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    for word\
    \ in $list1; do\n        list1_total_chars=$((list1_total_chars + ${#word}))\n\
    \    done\n    for word in $list2; do\n        list2_total_chars=$((list2_total_chars\
    \ + ${#word}))\n    done\n    if [[ $list1_total_chars -lt $list2_total_chars\
    \ ]]; then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local total1=0\n    local total2=0\n\
    \    local i=0\n    local j=0\n    for i in ${list1[@]}; do\n        total1=$((total1\
    \ + ${#i}))\n    done\n    for j in ${list2[@]}; do\n        total2=$((total2\
    \ + ${#j}))\n    done\n    if [ $total1 -lt $total2 ]; then\n        result=(${list1[@]})\n\
    \    else\n        result=(${list2[@]})\n    fi\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1+=$(echo ${list1[$i]} | wc -c)\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2+=$(echo ${list2[$j]}\
    \ | wc -c)\n    done\n    if [ $total1 -lt $total2 ]; then\n        echo ${list1[@]}\n\
    \    else\n        echo ${list2[@]}\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_total_chars=0\n\
    \    local list2_total_chars=0\n    local list1_item\n    local list2_item\n \
    \   local list1_item_chars\n    local list2_item_chars\n    local list1_item_chars_total=0\n\
    \    local list2_item_chars_total=0\n    local list1_item_chars_total_chars=0\n\
    \    local list2_item_chars_total_chars=0\n    local list1_item_chars_total_chars_total=0\n\
    \    local list2_item_chars_total_chars_total=0\n    local list1_item_chars_total_chars_total_chars=0\n\
    \    local list2_item_chars_total_chars_total_chars=0\n    local list1_item_chars_total_chars_total_chars_total=0\n\
    \    local list2_item_chars_total_chars_total_chars_total=0\n    local list1_item_chars_total_chars_total_chars_total_chars=0\n\
    \    local list2_item_chars_total_chars_total_chars_total_chars=0\n    local list1_item_chars_total_chars_total_chars_total_chars_total=0\n\
    \    local list2_item_chars_total_chars_total_chars_total_chars_total=0\n    local\
    \ list1_item_chars_total_chars_total_chars_total_chars_total_chars=0\n    local\
    \ list2_item_chars_total_chars_total_chars_total_chars_total_chars=0\n    local\
    \ list1_item_chars_total_chars_total_chars_total_chars_total_chars_total=0\n \
    \   local list2_item_chars_total_chars_\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_len=$(echo $list1 | wc -c)\n    local list2_len=$(echo $list2\
    \ | wc -c)\n    if [ $list1_len -lt $list2_len ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local -a\
    \ list_tmp2=()\n    local -a list_tmp3=()\n    local -a list_tmp4=()\n    local\
    \ -a list_tmp5=()\n    local -a list_tmp6=()\n    local -a list_tmp7=()\n    local\
    \ -a list_tmp8=()\n    local -a list_tmp9=()\n    local -a list_tmp10=()\n   \
    \ local -a list_tmp11=()\n    local -a list_tmp12=()\n    local -a list_tmp13=()\n\
    \    local -a list_tmp14=()\n    local -a list_tmp15=()\n    local -a list_tmp16=()\n\
    \    local -a list_tmp17=()\n    local -a list_tmp18=()\n    local -a list_tmp19=()\n\
    \    local -a list_tmp20=()\n    local -a list_tmp21=()\n    local -a list_tmp22=()\n\
    \    local -a list_tmp23=()\n    local -a list_tmp24=()\n    local -a list_tmp25=()\n\
    \    local -a list_tmp26=()\n    local -a list_tmp27=()\n    local -a list_tmp28=()\n\
    \    local -a list_tmp29=()\n    local -a list_tmp30=()\n    local -a list_tmp31=()\n\
    \    local -a list_tmp\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_arr=($list1)\n\
    \    local list2_arr=($list2)\n    local list1_len=${#list1_arr[@]}\n    local\
    \ list2_len=${#list2_arr[@]}\n    local i=0\n    local j=0\n    local list1_str\n\
    \    local list2_str\n    local list1_str_len\n    local list2_str_len\n    local\
    \ list1_str_len_total=0\n    local list2_str_len_total=0\n    local list1_str_len_total_arr=()\n\
    \    local list2_str_len_total_arr=()\n    local list1_str_len_total_arr_len=0\n\
    \    local list2_str_len_total_arr_len=0\n    local list1_str_len_total_arr_min=0\n\
    \    local list2_str_len_total_arr_min=0\n    local list1_str_len_total_arr_min_idx=0\n\
    \    local list2_str_len_total_arr_min_idx=0\n    local list1_str_len_total_arr_min_str\n\
    \    local list2_str_len_total_arr_min_str\n    local list1_str_len_total_arr_min_str_len\n\
    \    local list2_str_len_total_arr_min_str_len\n    local list1_str_len_total_arr_min_str_len_total=0\n\
    \    local list2_str_len_total_arr_min_str_len_total=0\n    local list1_str_len_total_arr_min_str_len_total_arr=()\n\
    \    local list2_str_len_total_arr_min_str_len_total_arr=()\n    local list1_str_len_total_arr_min_str_len_total_arr_len=0\n\
    \    local list2_str_len_total_arr_min\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_len\n  local list2_item_len\n  local list1_item_quoted\n\
    \  local list2_item_quoted\n  local list1_item_len_quoted\n  local list2_item_len_quoted\n\
    \  local list1_item_len_quoted_escaped\n  local list2_item_len_quoted_escaped\n\
    \  local list1_item_len_quoted_escaped_len\n  local list2_item_len_quoted_escaped_len\n\
    \  local list1_item_len_quoted_escaped_len_quoted\n  local list2_item_len_quoted_escaped_len_quoted\n\
    \  local list1_item_len_quoted_escaped_len_quoted_escaped\n  local list2_item_len_quoted_escaped_len_quoted_escaped\n\
    \  local list1_item_len_quoted_escaped_len_quoted_escaped_len\n  local list2_item_len_quoted_escaped_len_quoted_escaped_len\n\
    \  local list1_item_len_quoted_escaped_len_quoted_escaped_len_quoted\n  local\
    \ list2_item_len_quoted_escaped_len_quoted_escaped_len_quoted\n  local list1_item_len_quoted_escaped_len_quoted_escaped_len_quoted_escaped\n\
    \  local list2_item_len_quoted_escaped_len_quoted_escaped_len_quoted_escaped\n\
    \  local list1_item_len_quoted_escaped_len_quoted_escaped_len_quoted_escaped_len\n\
    \  local list2_item_len_quoted_escaped_len_quoted_escaped_len_quoted_escaped_len\n\
    \  local list1_item_len_quoted_escaped_\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_array\n    local\
    \ list2_array\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local aa\n    local bb\n    local cc\n    local dd\n    local\
    \ ee\n    local ff\n    local gg\n    local hh\n    local ii\n    local jj\n \
    \   local kk\n    local ll\n    local mm\n    local nn\n    local oo\n    local\
    \ pp\n    local qq\n    local rr\n    local ss\n    local tt\n    local uu\n \
    \   local vv\n    local ww\n    local xx\n    local yy\n    local zz\n    local\
    \ aaa\n    local bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n\
    \    local ggg\n    local hhh\n    local iii\n    local jjj\n    local kkk\n \
    \   local lll\n    local mmm\n    local nnn\n    local ooo\n    local ppp\n  \
    \  local qqq\n    local rrr\n    local sss\n    local ttt\n    local uuu\n   \
    \ local vvv\n    local www\n    local xxx\n    local yyy\n    local zzz\n    local\
    \ aaaa\n    local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local\
    \ ffff\n    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local\
    \ kkkk\n    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local\
    \ pppp\n    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local\
    \ uuuu\n    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local\
    \ z\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i len=0\n    local -i min=0\n    local -i max=0\n    local -i tmp=0\n\
    \    local -a result=()\n    local -a tmp_result=()\n    local -a tmp_result2=()\n\
    \    local -a tmp_result3=()\n    local -a tmp_result4=()\n    local -a tmp_result5=()\n\
    \    local -a tmp_result6=()\n    local -a tmp_result7=()\n    local -a tmp_result8=()\n\
    \    local -a tmp_result9=()\n    local -a tmp_result10=()\n    local -a tmp_result11=()\n\
    \    local -a tmp_result12=()\n    local -a tmp_result13=()\n    local -a tmp_result14=()\n\
    \    local -a tmp_result15=()\n    local -a tmp_result16=()\n    local -a tmp_result17=()\n\
    \    local -a tmp_result18=()\n    local -a tmp_result19=()\n    local -a tmp_result20=()\n\
    \    local -a tmp_result21=()\n    local -a tmp_result22=()\n    local -a tmp_result23=()\n\
    \    local -a tmp_result24=()\n    local -a tmp_result25=()\n    local -a tmp_result26=()\n\
    \    local -a tmp_result27=()\n    local -a tmp_result28=()\n    local -a tmp_result29=()\n\
    \    local -a tmp_result30=()\n    local -a tmp_result31=()\n    local -a tmp_result32=()\n\
    \    local -a tmp_result33=()\n    local -a tmp_result34=()\n    local -a tmp_result35=()\n\
    \   \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_quoted\n    local list2_item_quoted\n    local list1_item_quoted_len\n\
    \    local list2_item_quoted_len\n    local list1_item_quoted_len_total=0\n  \
    \  local list2_item_quoted_len_total=0\n    local list1_item_quoted_len_total_max=0\n\
    \    local list2_item_quoted_len_total_max=0\n    local list1_item_quoted_len_total_max_item\n\
    \    local list2_item_quoted_len_total_max_item\n    local list1_item_quoted_len_total_max_item_len\n\
    \    local list2_item_quoted_len_total_max_item_len\n    local list1_item_quoted_len_total_max_item_quoted\n\
    \    local list2_item_quoted_len_total_max_item_quoted\n    local list1_item_quoted_len_total_max_item_quoted_len\n\
    \    local list2_item_quoted_len_total_max_item_quoted_len\n    local list1_item_quoted_len_total_max_item_quoted_len_total=0\n\
    \    local list2_item_quoted_len_total_max_item_quoted_len_total=0\n    local\
    \ list1_item_quoted_len_total_max_item_quoted_len_total_max=0\n    local list2_item_quoted_len_total_max_item_quoted_len_total_max=0\n\
    \    local list1_item_quoted_len_total_max_item_quoted_len_total_max_item\n  \
    \  local list2_item_quoted_len_total_max_item_quoted_len_total_max\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_length=0\n\
    \    local list2_length=0\n    local list1_item=\"\"\n    local list2_item=\"\"\
    \n    local list1_item_length=0\n    local list2_item_length=0\n    local list1_item_index=0\n\
    \    local list2_item_index=0\n    local list1_item_index_length=0\n    local\
    \ list2_item_index_length=0\n    local list1_item_index_length_total=0\n    local\
    \ list2_item_index_length_total=0\n    local list1_item_index_length_total_length=0\n\
    \    local list2_item_index_length_total_length=0\n    local list1_item_index_length_total_length_total=0\n\
    \    local list2_item_index_length_total_length_total=0\n    local list1_item_index_length_total_length_total_length=0\n\
    \    local list2_item_index_length_total_length_total_length=0\n    local list1_item_index_length_total_length_total_length_total=0\n\
    \    local list2_item_index_length_total_length_total_length_total=0\n    local\
    \ list1_item_index_length_total_length_total_length_total_length=0\n    local\
    \ list2_item_index_length_total_length_total_length_total_length=0\n    local\
    \ list1_item_index_length_total_length_total_length_total_length_total=0\n   \
    \ local list2_item_index_length_total_length_total_length_total_length_total=0\n\
    \    local list1_item_index_length_total_length_total_length_total_length_total_length=0\n\
    \    local list2_item_index_length_total_length_total_length_total_length_total_length=0\n\
    \    local list1_item_index_length_total_length_total_length_\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_array=()\n\
    \    local list2_array=()\n    local list1_array_len=0\n    local list2_array_len=0\n\
    \    local i=0\n    local j=0\n    local list1_item=\"\"\n    local list2_item=\"\
    \"\n    local list1_item_len=0\n    local list2_item_len=0\n    local list1_item_len_total=0\n\
    \    local list2_item_len_total=0\n    local result_list=()\n    local result_list_len=0\n\
    \    local result_list_item=\"\"\n    local result_list_item_len=0\n    local\
    \ result_list_item_len_total=0\n    local result_list_item_len_total_min=0\n \
    \   local result_list_item_len_total_min_index=0\n    local result_list_item_len_total_min_index_list=\"\
    \"\n    local result_list_item_len_total_min_index_list_array=()\n    local result_list_item_len_total_min_index_list_array_len=0\n\
    \    local result_list_item_len_total_min_index_list_array_item=\"\"\n    local\
    \ result_list_item_len_total_min_index_list_array_item_len=0\n    local result_list_item_len_total_min_index_list_array_item_len_total=0\n\
    \    local result_list_item_len_total_min_index_list_array_item_len_total_min=0\n\
    \    local result_list_item_len_total_min_index_list_array_item_len_total_min_index=0\n\
    \    local result_list_item_len_total_min_index_list_array_item_len_total_min_index_list=\"\
    \"\n    local result_list_item_len_total_min_index_list_array_item_len_total_min_index_list_array=()\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local total1=0\n    local total2=0\n    for word in ${list1[@]}; do\n   \
    \     total1=$((total1 + ${#word}))\n    done\n    for word in ${list2[@]}; do\n\
    \        total2=$((total2 + ${#word}))\n    done\n    if [ $total1 -lt $total2\
    \ ]; then\n        echo \"${list1[@]}\"\n    else\n        echo \"${list2[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    for word in $list1;\
    \ do\n        list1_total=$((list1_total + ${#word}))\n    done\n    for word\
    \ in $list2; do\n        list2_total=$((list2_total + ${#word}))\n    done\n \
    \   if [[ $list1_total -lt $list2_total ]]; then\n        echo \"$list1\"\n  \
    \  else\n        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2 + ${#list2[j]}))\n\
    \    done\n    if [[ $total1 -lt $total2 ]]; then\n        echo \"${list1[@]}\"\
    \n    else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_min_len=()\n    local -a list_max_len=()\n  \
    \  local -a list_min_sum=()\n    local -a list_max_sum=()\n    local -a list_min_len_sum=()\n\
    \    local -a list_max_len_sum=()\n    local -a list_min_len_sum_final=()\n  \
    \  local -a list_max_len_sum_final=()\n    local -a list_min_len_sum_final_str=()\n\
    \    local -a list_max_len_sum_final_str=()\n    local -a list_final=()\n    local\
    \ -a list_final_str=()\n    local -a list_final_str_final=()\n    local -a list_final_str_final_str=()\n\
    \    local -a list_final_str_final_str_final=()\n    local -a list_final_str_final_str_final_str=()\n\
    \    local -a list_final_str_final_str_final_str_final=()\n    local -a list_final_str_final_str_final_str_final_str=()\n\
    \    local -a list_final_str_final_str_final_str_final_str_final=()\n    local\
    \ -a list_final_str_final_str_final_str_final_str_final_str=()\n    local -a list_final_str_final_str_final_str_final_str_final\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_total=0\n    local -i\
    \ max_total=0\n    local -a min_list=()\n    local -a max_list=()\n    local -a\
    \ result=()\n\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((i=0; i<len2; i++)); do\n        total2=$((total2 + ${#list2[i]}))\n\
    \    done\n\n    if [[ $total1 -lt $total2 ]]; then\n        min=$total1\n   \
    \     max=$total2\n        min_list=(\"${list1[@]}\")\n        max_list=(\"${list2[@]}\"\
    )\n    else\n        min=$total2\n        max=$total1\n        min_list=(\"${list2[@]}\"\
    )\n        max_list=(\"${list1[@]}\")\n    fi\n\n    for ((i=0; i<${#min_list[@]};\
    \ i++)); do\n        min_total=$((min_total + ${#min_list[i]}))\n        if [[\
    \ $min_total -le $max ]]; then\n            result+=(\"${min_list[i]}\")\n   \
    \     else\n            break\n        fi\n    done\n\n    echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    local -i len=0\n    local -i min=0\n    local -i max=0\n\
    \    local -i tmp=0\n    local -i index=0\n    local -i count=0\n    local -i\
    \ min_index=0\n    local -i max_index=0\n    local -i min_count=0\n    local -i\
    \ max_count=0\n    local -i min_sum=0\n    local -i max_sum=0\n    local -i min_len=0\n\
    \    local -i max_len=0\n    local -i min_len_index=0\n    local -i max_len_index=0\n\
    \    local -i min_len_count=0\n    local -i max_len_count=0\n    local -i min_len_sum=0\n\
    \    local -i max_len_sum=0\n    local -i min_len_len=0\n    local -i max_len_len=0\n\
    \    local -i min_len_len_index=0\n    local -i max_len_len_index=0\n    local\
    \ -i min_len_len_count=0\n    local -i max_len_len_count=0\n    local -i min_len_len_sum=0\n\
    \    local -i max_len_len_sum=0\n    local -i min_len_len_len=0\n    local -i\
    \ max_len_len_len=0\n    local -i min_len_len_len_index=0\n    local -i max_len_len_len_index=0\n\
    \    local -i min_len_len_len_count=0\n    local -i max_len_len_len_count=0\n\
    \    local -i min_len_len_len_sum=0\n   \n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n  \
    \      total1=$((total1 + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++));\
    \ do\n        total2=$((total2 + ${#list2[i]}))\n    done\n\n    if ((total1 <\
    \ total2)); then\n        min=total1\n        max=total2\n        min_index=0\n\
    \        max_index=1\n    else\n        min=total2\n        max=total1\n     \
    \   min_index=1\n        max_index=0\n    fi\n\n    for ((i=0; i<len1; i++));\
    \ do\n        for ((j=0; j<len2; j++)); do\n            if [[ \"${list1[i]}\"\
    \ == \"${list2[j]}\" ]]; then\n                result[${#result[@]}]=\"\\\"${list1[i]}\\\
    \"\"\n            fi\n        done\n    done\n\n    if ((${#result[@]} == 0));\
    \ then\n        echo \"[]\"\n    else\n        echo \"[${result[@]}]\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_max=0\n    local -i len_min=0\n    local\
    \ -i sum_max=0\n    local -i sum_min=0\n    local -a list_max=()\n    local -a\
    \ list_min=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local -a\
    \ list_tmp2=()\n    local -a list_tmp3=()\n    local -a list_tmp4=()\n    local\
    \ -a list_tmp5=()\n    local -a list_tmp6=()\n    local -a list_tmp7=()\n    local\
    \ -a list_tmp8=()\n    local -a list_tmp9=()\n    local -a list_tmp10=()\n   \
    \ local -a list_tmp11=()\n    local -a list_tmp12=()\n    local -a list_tmp13=()\n\
    \    local -a list_tmp14=()\n    local -a list_tmp15=()\n    local -a list_tmp16=()\n\
    \    local -a list_tmp17=()\n    local -a list_tmp18=()\n    local -a list_tmp19=()\n\
    \    local -a list_tmp20=()\n    local -a list_tmp21=()\n    local -a list_tmp22=()\n\
    \    local -a list_tmp23=()\n    local -a list_tmp24=()\n    local -a list_tmp25=()\n\
    \    local -a list_tmp26=()\n    local -a list_tmp27=()\n    local -a list_tmp28=()\n\
    \    local -a list_tmp29=()\n    local -a list_tmp30=()\n    local -a list_tmp31=()\n\
    \    local -a list_tmp\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  # Write your code here\n  # You can\
    \ use the following command to get the length of a string:\n  # len=$(echo -n\
    \ \"$string\" | wc -m)\n  #\n  # You can use the following command to get the\
    \ length of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n  # You can use the\
    \ following command to get the length of a list:\n  # len=$(echo \"$list\" | wc\
    \ -w)\n  #\n  # You can use the following command to get the length of a list:\n\
    \  # len=$(echo \"$list\" | wc -w)\n  #\n  # You can use the following command\
    \ to get the length of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n  # You\
    \ can use the following command to get the length of a list:\n  # len=$(echo \"\
    $list\" | wc -w)\n  #\n  # You can use the following command to get the length\
    \ of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n  # You can use the following\
    \ command to get the length of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n\
    \  # You can use the following command to get the length of a list:\n  # len=$(echo\
    \ \"$list\" | wc -w)\n  #\n  # You can use the following command to get the length\
    \ of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n  # You can use the following\
    \ command to get the length of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n\
    \  # You can use the following command to get the length of a list:\n  # len=$(echo\
    \ \"$list\" | wc -w)\n  #\n  # You can use the following command to get the length\
    \ of a list:\n  # len=$(echo \"$list\" | wc -w)\n  #\n  # You can use the following\
    \ command to get the length of a list:\n  # len=$(echo \"$list\" | wc -w)\n \n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcwxf9lut.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmpcwxf9lut.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_arr\n\
    \    local list2_arr\n    local i\n    local j\n    local len1\n    local len2\n\
    \    local list1_total_less_than_list2_total=0\n    local list2_total_less_than_list1_total=0\n\
    \    local result\n\n    # split the list1 and list2 into arrays\n    list1_arr=($list1)\n\
    \    list2_arr=($list2)\n\n    # get the length of the list1 and list2\n    len1=${#list1_arr[@]}\n\
    \    len2=${#list2_arr[@]}\n\n    # get the total number of chars in the list1\
    \ and list2\n    for ((i=0; i<len1; i++)); do\n        list1_total=$((list1_total\
    \ + ${#list1_arr[i]}))\n    done\n    for ((j=0; j<len2; j++)); do\n        list2_total=$((list2_total\
    \ + ${#list2_arr[j]}))\n    done\n\n    # compare the total number of chars in\
    \ the list1 and list2\n    if [ $list1_total -lt $list2_total ]; then\n      \
    \  list1_total_less_than_list2_total=1\n    elif [ $list2_total -lt $list1_total\
    \ ]; then\n        list2_total_less_than_list1_total=1\n    fi\n\n    # return\
    \ the result\n    if [ $list1_total_less_than_list2_total -eq 1 ]; then\n    \
    \    result=$list1\n    elif [ $list2_total_less_than_list1_total -eq 1 ]; then\n\
    \        result=$list2\n    else\n        result=$list1\n    fi\n    echo $result\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_item\n    local list2_item\n    local list1_item_chars\n    local list2_item_chars\n\
    \    local list1_item_chars_total=0\n    local list2_item_chars_total=0\n    local\
    \ list1_item_chars_total_list=()\n    local list2_item_chars_total_list=()\n \
    \   local list1_item_chars_total_list_index=0\n    local list2_item_chars_total_list_index=0\n\
    \    local list1_item_chars_total_list_index_max=0\n    local list2_item_chars_total_list_index_max=0\n\
    \    local list1_item_chars_total_list_index_max_value=0\n    local list2_item_chars_total_list_index_max_value=0\n\
    \    local list1_item_chars_total_list_index_max_value_index=0\n    local list2_item_chars_total_list_index_max_value_index=0\n\
    \    local list1_item_chars_total_list_index_max_value_index_value=0\n    local\
    \ list2_item_chars_total_list_index_max_value_index_value=0\n    local list1_item_chars_total_list_index_max_value_index_value_index=0\n\
    \    local list2_item_chars_total_list_index_max_value_index_value_index=0\n \
    \   local list1_item_chars_total_list_index_max_value_index_value_index_value=0\n\
    \    local list2_item_chars_total_list_index_max_value_index_value_index_value=0\n\
    \    local list1_item_chars_total_list_index_max_value_index_value_index_value_index=0\n\
    \    local list2_item_\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local total_len1=0\n    local total_len2=0\n    local len1=0\n    local len2=0\n\
    \    local i=0\n    local j=0\n    local str1=''\n    local str2=''\n    local\
    \ result=''\n    local result_list=''\n    local result_list_len=0\n    local\
    \ result_list_len_min=0\n    local result_list_len_max=0\n    local result_list_len_min_index=0\n\
    \    local result_list_len_max_index=0\n    local result_list_len_min_index_list=''\n\
    \    local result_list_len_max_index_list=''\n    local result_list_len_min_index_list_len=0\n\
    \    local result_list_len_max_index_list_len=0\n    local result_list_len_min_index_list_len_min=0\n\
    \    local result_list_len_max_index_list_len_min=0\n    local result_list_len_min_index_list_len_min_index=0\n\
    \    local result_list_len_max_index_list_len_min_index=0\n    local result_list_len_min_index_list_len_min_index_list=''\n\
    \    local result_list_len_max_index_list_len_min_index_list=''\n    local result_list_len_min_index_list_len_min_index_list_len=0\n\
    \    local result_list_len_max_index_list_len_min_index_list_len=0\n    local\
    \ result_list_len_min_index_list_len_min_index_list_len_min=0\n    local result_list_len_max_index_list_len_min_index_list_len_min=0\n\
    \    local result_list_len_min_index_list_len_min_index_list_len_min_index=0\n\
    \    local result_list_len_max_index_list_len_min_index_list_len_min\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i count1=0\n    local -i count2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    local -i min_len=0\n    local -i max_len=0\n    local\
    \ -i min_count=0\n    local -i max_count=0\n    local -i min_index=0\n    local\
    \ -i max_index=0\n    local -i min_count_index=0\n    local -i max_count_index=0\n\
    \    local -i min_count_index_len=0\n    local -i max_count_index_len=0\n    local\
    \ -i min_count_index_len_count=0\n    local -i max_count_index_len_count=0\n \
    \   local -i min_count_index_len_count_index=0\n    local -i max_count_index_len_count_index=0\n\
    \    local -i min_count_index_len_count_index_count=0\n    local -i max_count_index_len_count_index_count=0\n\
    \    local -i min_count_index_len_count_index_count_index=0\n    local -i max_count_index_len_count_index_count_index=0\n\
    \    local -i min_count_index_len_count_index_count_index_count=0\n    local -i\
    \ max_count_index_len_count_index_count_index_count=0\n    local -i min_count_index_len_count_index_count_index_count_index=0\n\
    \    local -i max_count_index_len_count_index_count_index_count_index=0\n    local\
    \ -i min_count_index_len_count_index_count_index_count_index_count=0\n    local\
    \ -i max_count_index_len_count_index_count_index_count_index_count\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_len_total=0\n    local list2_item_len_total=0\n    local list1_item_len_total_prev=0\n\
    \    local list2_item_len_total_prev=0\n    local list1_item_len_total_diff=0\n\
    \    local list2_item_len_total_diff=0\n    local list1_item_len_total_diff_prev=0\n\
    \    local list2_item_len_total_diff_prev=0\n    local list1_item_len_total_diff_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev_prev_prev=0\n    local\
    \ list1_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev=0\n    local list2_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local list1_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local list2\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total1=0\n  local total2=0\n  local list1_array=()\n  local list2_array=()\n\
    \  local result=()\n  local i=0\n  local j=0\n  local k=0\n  local temp=0\n  local\
    \ temp_array=()\n  local temp_array2=()\n  local temp_array3=()\n  local temp_array4=()\n\
    \  local temp_array5=()\n  local temp_array6=()\n  local temp_array7=()\n  local\
    \ temp_array8=()\n  local temp_array9=()\n  local temp_array10=()\n  local temp_array11=()\n\
    \  local temp_array12=()\n  local temp_array13=()\n  local temp_array14=()\n \
    \ local temp_array15=()\n  local temp_array16=()\n  local temp_array17=()\n  local\
    \ temp_array18=()\n  local temp_array19=()\n  local temp_array20=()\n  local temp_array21=()\n\
    \  local temp_array22=()\n  local temp_array23=()\n  local temp_array24=()\n \
    \ local temp_array25=()\n  local temp_array26=()\n  local temp_array27=()\n  local\
    \ temp_array28=()\n  local temp_array29=()\n  local temp_array30=()\n  local temp_array31=()\n\
    \  local temp_array32=()\n  local temp_array33=()\n  local temp_array34=()\n \
    \ local temp_array35=()\n  local temp_array36=()\n  local temp_array37=()\n  local\
    \ temp_array38=()\n  local temp_array39=()\n  local temp_array40=()\n  local temp_array41=()\n\
    \  local temp_array42=()\n  local temp_array43=()\n  local temp_array44=()\n \
    \ local temp_array45=()\n  local temp_array46=()\n  local temp_array47=()\n  local\
    \ temp_array48=()\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local total1=0\n    local total2=0\n\
    \    for word in $1; do\n        total1=$((total1 + ${#word}))\n    done\n   \
    \ for word in $2; do\n        total2=$((total2 + ${#word}))\n    done\n    if\
    \ [[ $total1 -lt $total2 ]]; then\n        echo \"$1\"\n    else\n        echo\
    \ \"$2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_len=$(echo $list1 | wc -c)\n    local list2_len=$(echo $list2\
    \ | wc -c)\n    if [ $list1_len -lt $list2_len ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_count=0\n\
    \    local list2_count=0\n    local list1_array=()\n    local list2_array=()\n\
    \    local list1_array_count=0\n    local list2_array_count=0\n    local list1_array_index=0\n\
    \    local list2_array_index=0\n    local list1_array_element=\"\"\n    local\
    \ list2_array_element=\"\"\n    local list1_array_element_length=0\n    local\
    \ list2_array_element_length=0\n    local list1_array_element_index=0\n    local\
    \ list2_array_element_index=0\n    local list1_array_element_char=\"\"\n    local\
    \ list2_array_element_char=\"\"\n    local list1_array_element_char_code=0\n \
    \   local list2_array_element_char_code=0\n    local list1_array_element_char_code_hex=\"\
    \"\n    local list2_array_element_char_code_hex=\"\"\n    local list1_array_element_char_code_hex_length=0\n\
    \    local list2_array_element_char_code_hex_length=0\n    local list1_array_element_char_code_hex_index=0\n\
    \    local list2_array_element_char_code_hex_index=0\n    local list1_array_element_char_code_hex_char=\"\
    \"\n    local list2_array_element_char_code_hex_char=\"\"\n    local list1_array_element_char_code_hex_char_code=0\n\
    \    local list2_array_element_char_code_hex_char_code=0\n    local list1_array_element_char_code_hex_char_code_decimal=0\n\
    \    local list2_array_element_char_code_hex_char_code_decimal=0\n    local list1_array_element_char_code_hex_char_code_decimal_total=0\n\
    \    local list2_array_element_\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i total1=0\n  local -i total2=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i min_len=$((len1\
    \ < len2 ? len1 : len2))\n  local -i max_len=$((len1 > len2 ? len1 : len2))\n\
    \  local -i min_total=$((total1 < total2 ? total1 : total2))\n  local -i max_total=$((total1\
    \ > total2 ? total1 : total2))\n  local -a result=()\n  for ((i=0; i<min_len;\
    \ i++)); do\n    total1+=${#list1[i]}\n    total2+=${#list2[i]}\n  done\n  if\
    \ ((total1 == total2)); then\n    echo \"${list1[@]}\"\n  elif ((total1 < total2));\
    \ then\n    echo \"${list1[@]}\"\n  else\n    echo \"${list2[@]}\"\n  fi\n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local total1=0\n    local total2=0\n\
    \    for i in $1; do\n        total1=$((total1 + ${#i}))\n    done\n    for i\
    \ in $2; do\n        total2=$((total2 + ${#i}))\n    done\n    if [[ $total1 -lt\
    \ $total2 ]]; then\n        echo \"$1\"\n    else\n        echo \"$2\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i total1=0\n  local -i total2=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i min_len=0\n \
    \ local -i max_len=0\n  local -i min_total=0\n  local -i max_total=0\n  local\
    \ -a min_list=()\n  local -a max_list=()\n  local -a result=()\n\n  for ((i=0;\
    \ i<len1; i++)); do\n    total1=$((total1 + ${#list1[i]}))\n  done\n  for ((i=0;\
    \ i<len2; i++)); do\n    total2=$((total2 + ${#list2[i]}))\n  done\n\n  if ((total1\
    \ < total2)); then\n    min_len=len1\n    max_len=len2\n    min_total=total1\n\
    \    max_total=total2\n    min_list=(\"${list1[@]}\")\n    max_list=(\"${list2[@]}\"\
    )\n  else\n    min_len=len2\n    max_len=len1\n    min_total=total2\n    max_total=total1\n\
    \    min_list=(\"${list2[@]}\")\n    max_list=(\"${list1[@]}\")\n  fi\n\n  for\
    \ ((i=0; i<min_len; i++)); do\n    if ((${#min_list[i]} < ${#max_list[i]})); then\n\
    \      result+=(\"${min_list[i]}\")\n    else\n      result+=(\"${max_list[i]}\"\
    )\n    fi\n  done\n  for ((i=min_len; i<max_len; i++)); do\n    result+=(\"${max_list[i]}\"\
    )\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local total1=0\n  local total2=0\n\
    \  for i in $1; do\n    total1=$((total1 + ${#i}))\n  done\n  for i in $2; do\n\
    \    total2=$((total2 + ${#i}))\n  done\n  if [[ $total1 -lt $total2 ]]; then\n\
    \    echo \"$1\"\n  else\n    echo \"$2\"\n  fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # TODO: Implement this function\n\
    \    # return a space-separated list\n    #\n    # Hint:\n    #   1. Use the following\
    \ command to get the length of a string\n    #      ${#string}\n    #   2. Use\
    \ the following command to get the length of a list\n    #      ${#list[@]}\n\
    \    #   3. Use the following command to get the length of a list\n    #     \
    \ ${#list[*]}\n    #   4. Use the following command to get the length of a list\n\
    \    #      ${#list[n]}\n    #   5. Use the following command to get the length\
    \ of a list\n    #      ${list[@]:n:m}\n    #   6. Use the following command to\
    \ get the length of a list\n    #      ${list[*]:n:m}\n    #   7. Use the following\
    \ command to get the length of a list\n    #      ${list[@]/pattern/replacement}\n\
    \    #   8. Use the following command to get the length of a list\n    #     \
    \ ${list[*]/pattern/replacement}\n    #   9. Use the following command to get\
    \ the length of a list\n    #      ${list[@]#pattern}\n    #   10. Use the following\
    \ command to get the length of a list\n    #      ${list[*]#pattern}\n    #  \
    \ 11. Use the following command to get the length of a list\n    #      ${list[@]%pattern}\n\
    \    #   12. Use the following command to get the length of a list\n    #    \
    \  ${list[*]%pattern}\n    #   13. Use the following command to get the length\
    \ of a list\n    #      ${list[@]/pattern/replacement}\n    #   14. Use the following\
    \ command to get the length of a list\n    #      ${list[*]/pattern/replacement}\n\
    \    #   15. Use the following command to get the length of a list\n    #    \
    \  ${list[@]/pattern/replacement}\n    #   16. Use the following command to get\
    \ the length of a list\n    #      ${list[*]/pattern/replacement}\n    #   17.\
    \ Use the following command\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph_mgj9k1.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmph_mgj9k1.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_len\n  local list2_item_len\n  for list1_item\
    \ in $list1; do\n    list1_item_len=${#list1_item}\n    list1_total=$((list1_total\
    \ + list1_item_len))\n  done\n  for list2_item in $list2; do\n    list2_item_len=${#list2_item}\n\
    \    list2_total=$((list2_total + list2_item_len))\n  done\n  if [ $list1_total\
    \ -lt $list2_total ]; then\n    echo \"$list1\"\n  else\n    echo \"$list2\"\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a a1=($1)\n    local -a\
    \ a2=($2)\n    local -i len1=${#a1[@]}\n    local -i len2=${#a2[@]}\n    local\
    \ -i i\n    local -i total1=0\n    local -i total2=0\n    local -i len\n    local\
    \ -i min_len\n    local -i min_total\n    local -i min_index\n    local -i min_len_index\n\
    \    local -i min_total_index\n    local -i min_len_total_index\n    local -i\
    \ min_len_total_index_index\n    local -i min_len_total_index_index_index\n  \
    \  local -i min_len_total_index_index_index_index\n    local -i min_len_total_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index\n    local -i\
    \ min_len_total_index_index_index_index_index_index_index\n    local -i min_len_total_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    \    local -i min_len_total_index_index_index_index_index_index_index_index_index_index_index_index_index\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total_chars=$(echo \"$list1\" | sed 's/[^ ]//g' | wc -c)\n\
    \  local list2_total_chars=$(echo \"$list2\" | sed 's/[^ ]//g' | wc -c)\n  if\
    \ [ \"$list1_total_chars\" -lt \"$list2_total_chars\" ]; then\n    echo \"$list1\"\
    \n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local total1=$(echo $list1 | wc -c)\n  local total2=$(echo $list2 | wc -c)\n\
    \  if [[ $total1 -lt $total2 ]]; then\n    echo $list1\n  else\n    echo $list2\n\
    \  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # Write your code here\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpds44ez4m.sh: line 190: syntax error near unexpected token `}''

    /tmp/tmpds44ez4m.sh: line 190: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -a list_of_lengths=()\n   \
    \ local -a list_of_lengths2=()\n    local -a list_of_lengths3=()\n    local -a\
    \ list_of_lengths4=()\n    local -a list_of_lengths5=()\n    local -a list_of_lengths6=()\n\
    \    local -a list_of_lengths7=()\n    local -a list_of_lengths8=()\n    local\
    \ -a list_of_lengths9=()\n    local -a list_of_lengths10=()\n    local -a list_of_lengths11=()\n\
    \    local -a list_of_lengths12=()\n    local -a list_of_lengths13=()\n    local\
    \ -a list_of_lengths14=()\n    local -a list_of_lengths15=()\n    local -a list_of_lengths16=()\n\
    \    local -a list_of_lengths17=()\n    local -a list_of_lengths18=()\n    local\
    \ -a list_of_lengths19=()\n    local -a list_of_lengths20=()\n    local -a list_of_lengths21=()\n\
    \    local -a list_of_lengths22=()\n    local -a list_of_lengths23=()\n    local\
    \ -a list_of_lengths24=()\n    local -a list_of_lengths25=()\n    local -a list_of_lengths26=()\n\
    \    local -a list_of_lengths27=()\n    local -a list_of_lengths28=()\n    local\
    \ -a list_of_lengths29=()\n    local -a list_of_lengths30=()\n    local -a list_of_lengths31=()\n\
    \    local -a list_of_lengths32=()\n    local -a list_of_lengths33=()\n    local\
    \ -a list_of_lengths34=()\n    local -a list_\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local total1=0\n    local total2=0\n    for word in $list1; do\n        total1=$((total1\
    \ + ${#word}))\n    done\n    for word in $list2; do\n        total2=$((total2\
    \ + ${#word}))\n    done\n    if [ $total1 -lt $total2 ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=($1)\n  local list2=($2)\n\
    \  local total1=0\n  local total2=0\n  for i in ${list1[@]}; do\n    total1=$((total1\
    \ + ${#i}))\n  done\n  for i in ${list2[@]}; do\n    total2=$((total2 + ${#i}))\n\
    \  done\n  if [ $total1 -lt $total2 ]; then\n    echo ${list1[@]}\n  else\n  \
    \  echo ${list2[@]}\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local i=0\n    local j=0\n \
    \   local len1=0\n    local len2=0\n    local item1=\"\"\n    local item2=\"\"\
    \n    local result=\"\"\n    local result1=\"\"\n    local result2=\"\"\n    local\
    \ result3=\"\"\n    local result4=\"\"\n    local result5=\"\"\n    local result6=\"\
    \"\n    local result7=\"\"\n    local result8=\"\"\n    local result9=\"\"\n \
    \   local result10=\"\"\n    local result11=\"\"\n    local result12=\"\"\n  \
    \  local result13=\"\"\n    local result14=\"\"\n    local result15=\"\"\n   \
    \ local result16=\"\"\n    local result17=\"\"\n    local result18=\"\"\n    local\
    \ result19=\"\"\n    local result20=\"\"\n    local result21=\"\"\n    local result22=\"\
    \"\n    local result23=\"\"\n    local result24=\"\"\n    local result25=\"\"\n\
    \    local result26=\"\"\n    local result27=\"\"\n    local result28=\"\"\n \
    \   local result29=\"\"\n    local result30=\"\"\n    local result31=\"\"\n  \
    \  local result32=\"\"\n    local result33=\"\"\n    local result34=\"\"\n   \
    \ local result35=\"\"\n    local result36=\"\"\n    local result37=\"\"\n    local\
    \ result38=\"\"\n    local result39=\"\"\n    local result40=\"\"\n    local result41=\"\
    \"\n    local result42=\"\"\n    local result43=\"\"\n    local result44=\"\"\n\
    \    local result45=\"\"\n    local result46=\"\"\n    local result47=\"\"\n \
    \   local result48=\"\"\n    local result49=\"\"\n    local result50=\"\"\n  \
    \  local result51=\"\"\n    local result52=\"\"\n    local result53=\"\"\n   \
    \ local result54=\"\"\n    local result55=\"\"\n    local result56=\"\"\n    local\
    \ result57=\"\"\n    local result58=\"\"\n    local result59=\"\"\n    local result60=\"\
    \"\n    local result61=\"\"\n    local result62=\"\"\n    local result63=\"\"\n\
    \    local result64=\"\"\n    local result65=\"\"\n    local result66=\"\"\n \
    \   local result67=\"\"\n    local result68=\"\"\n    local result69=\"\"\n  \
    \  local result70=\"\"\n    local result71=\"\"\n    local result72=\"\"\n   \
    \ local result73\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2 + ${#list2[j]}))\n\
    \    done\n    if [[ $total1 -lt $total2 ]]; then\n        echo \"${list1[@]}\"\
    \n    else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min_len=0\n    local -i max_len=0\n    local -i min_total=0\n  \
    \  local -i max_total=0\n    local -a min_list=()\n    local -a max_list=()\n\
    \    local -a result=()\n\n    if [[ $len1 -eq 0 && $len2 -eq 0 ]]; then\n   \
    \     echo \"[]\"\n        return\n    fi\n\n    if [[ $len1 -eq 0 ]]; then\n\
    \        echo \"[${list2[@]}]\"\n        return\n    fi\n\n    if [[ $len2 -eq\
    \ 0 ]]; then\n        echo \"[${list1[@]}]\"\n        return\n    fi\n\n    for\
    \ ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n    done\n\
    \n    for ((i=0; i<len2; i++)); do\n        total2=$((total2 + ${#list2[i]}))\n\
    \    done\n\n    if [[ $total1 -eq $total2 ]]; then\n        echo \"[${list1[@]}]\"\
    \n        return\n    fi\n\n    if [[ $total1 -lt $total2 ]]; then\n        min_len=$len1\n\
    \        max_len=$len2\n        min_total=$total1\n        max_total=$total2\n\
    \        min_list=(\"${list1[@]}\")\n        max_list=(\"${list2[@]}\")\n    else\n\
    \        min_len=$len2\n        max_len=$len1\n        min_total=$total2\n   \
    \     max_total=$total1\n        min_list=(\"${list2[@]}\")\n        max_list=(\"\
    ${list1[@]}\")\n    fi\n\n    for ((i=0; i<min_len; i++)); do\n       \n}\n\n\
    candidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpamnk71aq.sh: line 82: syntax error near unexpected token `}''

    /tmp/tmpamnk71aq.sh: line 82: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    for word in $list1;\
    \ do\n        list1_total=$((list1_total + ${#word}))\n    done\n    for word\
    \ in $list2; do\n        list2_total=$((list2_total + ${#word}))\n    done\n \
    \   if [ $list1_total -lt $list2_total ]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result\n    local total1=0\n    local total2=0\n\
    \    local i=0\n    local j=0\n    local len1=${#list1[@]}\n    local len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2 + ${#list2[j]}))\n\
    \    done\n    if [[ $total1 -lt $total2 ]]; then\n        result=(\"${list1[@]}\"\
    )\n    else\n        result=(\"${list2[@]}\")\n    fi\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total1=0\n  local total2=0\n  for word in $list1; do\n    total1=$((total1\
    \ + ${#word}))\n  done\n  for word in $list2; do\n    total2=$((total2 + ${#word}))\n\
    \  done\n  if [ $total1 -lt $total2 ]; then\n    echo \"$list1\"\n  else\n   \
    \ echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total_chars=0\n  local list2_total_chars=0\n  for word in\
    \ $list1; do\n    list1_total_chars=$((list1_total_chars + ${#word}))\n  done\n\
    \  for word in $list2; do\n    list2_total_chars=$((list2_total_chars + ${#word}))\n\
    \  done\n  if [ $list1_total_chars -lt $list2_total_chars ]; then\n    echo \"\
    $list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    for word in $list1; do\n   \
    \     total1=$((total1 + ${#word}))\n    done\n    for word in $list2; do\n  \
    \      total2=$((total2 + ${#word}))\n    done\n    if [ $total1 -lt $total2 ];\
    \ then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_escaped\n    local list2_item_escaped\n    local list1_item_escaped_len\n\
    \    local list2_item_escaped_len\n    local list1_item_escaped_len_diff\n   \
    \ local list2_item_escaped_len_diff\n    local list1_item_escaped_len_diff_total=0\n\
    \    local list2_item_escaped_len_diff_total=0\n    local list1_item_escaped_len_diff_total_abs\n\
    \    local list2_item_escaped_len_diff_total_abs\n    local list1_item_escaped_len_diff_total_abs_diff\n\
    \    local list2_item_escaped_len_diff_total_abs_diff\n    local list1_item_escaped_len_diff_total_abs_diff_abs\n\
    \    local list2_item_escaped_len_diff_total_abs_diff_abs\n    local list1_item_escaped_len_diff_total_abs_diff_abs_diff\n\
    \    local list2_item_escaped_len_diff_total_abs_diff_abs_diff\n    local list1_item_escaped_len_diff_total_abs_diff_abs_diff_abs\n\
    \    local list2_item_escaped_len_diff_total_abs_diff_abs_diff_abs\n    local\
    \ list1_item_escaped_len_diff_total_abs_diff_abs_diff_abs_diff\n    local list2_item_escaped_len_diff_total_abs_diff_abs_diff_abs_diff\n\
    \    local list1_item_escaped_len_diff_total_abs_diff_abs_diff_abs_diff_abs\n\
    \    local list2_item_escaped_len_diff_total_abs_diff_abs_diff_abs_diff_abs\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i total1=0\n  local -i total2=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i min_len=$((len1\
    \ < len2 ? len1 : len2))\n  local -i max_len=$((len1 > len2 ? len1 : len2))\n\
    \  local -i min_total=$((total1 < total2 ? total1 : total2))\n  local -i max_total=$((total1\
    \ > total2 ? total1 : total2))\n  local -a result=()\n  local -i result_len=0\n\
    \  local -i result_total=0\n  local -i result_index=0\n  local -i min_index=0\n\
    \  local -i max_index=0\n  local -i min_total_index=0\n  local -i max_total_index=0\n\
    \  local -i min_len_index=0\n  local -i max_len_index=0\n  local -i min_total_len=0\n\
    \  local -i max_total_len=0\n  local -i min_len_total=0\n  local -i max_len_total=0\n\
    \  local -i min_len_len=0\n  local -i max_len_len=0\n  local -i min_len_index=0\n\
    \  local -i max_len_index=0\n  local -i min_total_len=0\n  local -i max_total_len=0\n\
    \  local -i min_len_total=0\n  local -i max_len_total=0\n  local -i min_len_len=0\n\
    \  local -i max_len_len=0\n  local -i min_len_index=0\n  local -i max_len_index=0\n\
    \  local -i min_total_len=0\n  local -i max_total_len=0\n  local -i min_len_total=0\n\
    \  local -\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local total1=0\n    local total2=0\n    local i=0\n    for\
    \ ((i=0; i<${#list1[@]}; i++)); do\n        total1=$((total1 + ${#list1[$i]}))\n\
    \    done\n    for ((i=0; i<${#list2[@]}; i++)); do\n        total2=$((total2\
    \ + ${#list2[$i]}))\n    done\n    if ((total1 < total2)); then\n        echo\
    \ \"${list1[@]}\"\n    else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local list1_total=0\n  local list2_total=0\n  local list1_count=0\n  local\
    \ list2_count=0\n  local list1_item\n  local list2_item\n  local list1_items\n\
    \  local list2_items\n  local list1_item_count\n  local list2_item_count\n  local\
    \ list1_item_counts\n  local list2_item_counts\n  local list1_item_count_index\n\
    \  local list2_item_count_index\n  local list1_item_count_indexes\n  local list2_item_count_indexes\n\
    \  local list1_item_count_index_count\n  local list2_item_count_index_count\n\
    \  local list1_item_count_index_counts\n  local list2_item_count_index_counts\n\
    \  local list1_item_count_index_count_index\n  local list2_item_count_index_count_index\n\
    \  local list1_item_count_index_count_indexes\n  local list2_item_count_index_count_indexes\n\
    \  local list1_item_count_index_count_index_count\n  local list2_item_count_index_count_index_count\n\
    \  local list1_item_count_index_count_index_counts\n  local list2_item_count_index_count_index_counts\n\
    \  local list1_item_count_index_count_index_count_index\n  local list2_item_count_index_count_index_count_index\n\
    \  local list1_item_count_index_count_index_count_indexes\n  local list2_item_count_index_count_index_count_indexes\n\
    \  local list1_item_count_index_count_index_count_index_count\n  local list2_item_count_index_count_index_count_index_count\n\
    \  local list1_item_count_index_count_index_count_index_counts\n  local list2_item_count_index_count_index_count_index_counts\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # your code here\n    # use echo\
    \ to return the result\n    # use $1 and $2 to access the arguments\n    # use\
    \ $# to access the number of arguments\n    # use $@ to access all the arguments\n\
    \    # use $0 to access the name of the script\n    # use $* to access all the\
    \ arguments as a single string\n    # use $? to access the exit status of the\
    \ last command\n    # use $$ to access the process ID of the current shell\n \
    \   # use $! to access the process ID of the last background command\n    # use\
    \ $- to access the current options set for the shell\n    # use $_ to access the\
    \ last argument of the previous command\n    # use $IFS to access the Internal\
    \ Field Separator\n    # use $LINENO to access the current line number in the\
    \ script\n    # use $PATH to access the search path for commands\n    # use $PS1\
    \ to access the primary prompt string\n    # use $PS2 to access the secondary\
    \ prompt string\n    # use $RANDOM to access a random number between 0 and 32767\n\
    \    # use $SECONDS to access the number of seconds since the shell was started\n\
    \    # use $UID to access the user ID of the user running the current script\n\
    \    # use $CDPATH to access the search path for the cd command\n    # use $HOME\
    \ to access the home directory of the current user\n    # use $HOSTNAME to access\
    \ the name of the current host\n    # use $HOSTTYPE to access the type of machine\
    \ Bash is running on\n    # use $MACHTYPE to access a string that fully describes\
    \ the system type on which Bash is running\n    # use $OSTYPE to access a string\
    \ describing the operating system Bash is running on\n    # use $PIPESTATUS to\
    \ access an array variable containing a list of exit status values from the processes\
    \ in the most-recently-executed foreground pipeline\n    # use $SHELLOPTS to access\
    \ a list of enabled shell options\n    # use $BASH to access the full pathname\
    \ used to execute the current instance of Bash\n    # use $BASH_ALIASES to access\
    \ an associative array variable whose members correspond to the internal list\
    \ of aliases as maintained by the alias builtin\n    # use $BASH_ARGC to access\
    \ an array\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl6c9pfgg.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpl6c9pfgg.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_total_chars_with_quotes=0\n    local list2_total_chars_with_quotes=0\n\
    \    local list1_total_chars_with_quotes_and_spaces=0\n    local list2_total_chars_with_quotes_and_spaces=0\n\
    \    local list1_total_chars_with_quotes_and_spaces_and_brackets=0\n    local\
    \ list2_total_chars_with_quotes_and_spaces_and_brackets=0\n    local list1_total_chars_with_quotes_and_spaces_and_brackets_and_commas=0\n\
    \    local list2_total_chars_with_quotes_and_spaces_and_brackets_and_commas=0\n\
    \    local list1_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes=0\n\
    \    local list2_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes=0\n\
    \    local list1_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes_and_spaces=0\n\
    \    local list2_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes_and_spaces=0\n\
    \    local list1_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes_and_spaces_and_brackets=0\n\
    \    local list2_total_chars_with_quotes_and_spaces_and_brackets_and_commas_and_quotes_and_spaces_and_brackets=0\n\
    \    local list1_total_chars_with_quotes_and_spaces_and\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_items\n    local list2_items\n    local\
    \ list1_item_len\n    local list2_item_len\n    local list1_item_len_total=0\n\
    \    local list2_item_len_total=0\n    local list1_item_len_total_max=0\n    local\
    \ list2_item_len_total_max=0\n    local list1_item_len_total_max_item\n    local\
    \ list2_item_len_total_max_item\n    local list1_item_len_total_max_item_len\n\
    \    local list2_item_len_total_max_item_len\n    local list1_item_len_total_max_item_len_total=0\n\
    \    local list2_item_len_total_max_item_len_total=0\n    local list1_item_len_total_max_item_len_total_max=0\n\
    \    local list2_item_len_total_max_item_len_total_max=0\n    local list1_item_len_total_max_item_len_total_max_item\n\
    \    local list2_item_len_total_max_item_len_total_max_item\n    local list1_item_len_total_max_item_len_total_max_item_len\n\
    \    local list2_item_len_total_max_item_len_total_max_item_len\n    local list1_item_len_total_max_item_len_total_max_item_len_total=0\n\
    \    local list2_item_len_total_max_item_len_total_max_item_len_total=0\n    local\
    \ list1_item_len_total_max_item_len_total_max_item_len_total_max=0\n    local\
    \ list2_item_len_total_max_item_len_total_max_item_len_total_max=0\n    local\
    \ list1_\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_len=$(echo $list1 | awk '{print length}')\n    local list2_len=$(echo\
    \ $list2 | awk '{print length}')\n    if [ $list1_len -lt $list2_len ]; then\n\
    \        echo $list1\n    else\n        echo $list2\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local list1_len=$(echo $list1 | wc -c)\n  local list2_len=$(echo $list2 | wc\
    \ -c)\n  if [ $list1_len -lt $list2_len ]; then\n    echo $list1\n  else\n   \
    \ echo $list2\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_array=()\n\
    \    local list2_array=()\n    local list1_array_len=0\n    local list2_array_len=0\n\
    \    local i=0\n    local j=0\n    local list1_str=\"\"\n    local list2_str=\"\
    \"\n    local list1_str_len=0\n    local list2_str_len=0\n    local list1_str_len_total=0\n\
    \    local list2_str_len_total=0\n    local list1_str_len_total_array=()\n   \
    \ local list2_str_len_total_array=()\n    local list1_str_len_total_array_len=0\n\
    \    local list2_str_len_total_array_len=0\n    local list1_str_len_total_array_min=0\n\
    \    local list2_str_len_total_array_min=0\n    local list1_str_len_total_array_min_index=0\n\
    \    local list2_str_len_total_array_min_index=0\n    local list1_str_len_total_array_min_index_array=()\n\
    \    local list2_str_len_total_array_min_index_array=()\n    local list1_str_len_total_array_min_index_array_len=0\n\
    \    local list2_str_len_total_array_min_index_array_len=0\n    local list1_str_len_total_array_min_index_array_len_array=()\n\
    \    local list2_str_len_total_array_min_index_array_len_array=()\n    local list1_str_len_total_array_min_index_array_len_array_len=0\n\
    \    local list2_str_len_total_array_min_index_array_len_array_len=0\n    local\
    \ list1_str_len_total_array_min_index_array_len_array_len_array=()\n    local\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i total1=0\n    local -i total2=0\n    local -i i=0\n    local -i\
    \ j=0\n    local -i len=0\n    local -i max=0\n    local -i min=0\n    local -i\
    \ max_index=0\n    local -i min_index=0\n    local -a max_list=()\n    local -a\
    \ min_list=()\n    local -a result=()\n    local -a tmp=()\n    local -a tmp2=()\n\
    \    local -a tmp3=()\n    local -a tmp4=()\n    local -a tmp5=()\n    local -a\
    \ tmp6=()\n    local -a tmp7=()\n    local -a tmp8=()\n    local -a tmp9=()\n\
    \    local -a tmp10=()\n    local -a tmp11=()\n    local -a tmp12=()\n    local\
    \ -a tmp13=()\n    local -a tmp14=()\n    local -a tmp15=()\n    local -a tmp16=()\n\
    \    local -a tmp17=()\n    local -a tmp18=()\n    local -a tmp19=()\n    local\
    \ -a tmp20=()\n    local -a tmp21=()\n    local -a tmp22=()\n    local -a tmp23=()\n\
    \    local -a tmp24=()\n    local -a tmp25=()\n    local -a tmp26=()\n    local\
    \ -a tmp27=()\n    local -a tmp28=()\n    local -a tmp29=()\n    local -a tmp30=()\n\
    \    local -a tmp31=()\n    local -a tmp32=()\n    local -a tmp33=()\n    local\
    \ -a tmp34=()\n    local -a tmp35=()\n    local -a tmp36=()\n    local -a tmp37=()\n\
    \    local -a tmp38=()\n    local -a tmp39=()\n    local -\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=($1)\n    local list2=($2)\n\
    \    local list1_total=0\n    local list2_total=0\n    local i=0\n    local j=0\n\
    \    local list1_len=${#list1[@]}\n    local list2_len=${#list2[@]}\n    for ((i=0;\
    \ i<list1_len; i++)); do\n        list1_total=$((list1_total + ${#list1[$i]}))\n\
    \    done\n    for ((j=0; j<list2_len; j++)); do\n        list2_total=$((list2_total\
    \ + ${#list2[$j]}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"${list1[@]}\"\n    else\n        echo \"${list2[@]}\"\n    fi\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i\n\
    \    for ((i=0; i<${#list1[@]}; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((i=0; i<${#list2[@]}; i++)); do\n        total2=$((total2\
    \ + ${#list2[i]}))\n    done\n    if ((total1 < total2)); then\n        echo \"\
    ${list1[@]}\"\n    else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    local -i len=0\n    local -i min_len=0\n    local\
    \ -i max_len=0\n    local -i min_total=0\n    local -i max_total=0\n    local\
    \ -i min_index=0\n    local -i max_index=0\n    local -i min_total_index=0\n \
    \   local -i max_total_index=0\n    local -i min_total_len=0\n    local -i max_total_len=0\n\
    \    local -i min_total_len_index=0\n    local -i max_total_len_index=0\n    local\
    \ -i min_total_len_total=0\n    local -i max_total_len_total=0\n    local -i min_total_len_total_index=0\n\
    \    local -i max_total_len_total_index=0\n    local -i min_total_len_total_len=0\n\
    \    local -i max_total_len_total_len=0\n    local -i min_total_len_total_len_index=0\n\
    \    local -i max_total_len_total_len_index=0\n    local -i min_total_len_total_len_total=0\n\
    \    local -i max_total_len_total_len_total=0\n    local -i min_total_len_total_len_total_index=0\n\
    \    local -i max_total_len_total_len_total_index=0\n    local -i min_total_len_total_len_total_len=0\n\
    \    local -i max_total_len_total_len_total_len=0\n    local -i min_total_len_total_len_total_len_index=0\n\
    \    local -i max_total\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    # your code here\n    # hint: use\
    \ the following command to get the length of a string\n    # ${#string}\n    #\
    \ hint: use the following command to get the length of a list\n    # ${#list[@]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following command to get the length of a list\n    # ${#list[*]}\n\
    \    # hint: use the following\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6icf5i2x.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp6icf5i2x.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_len=$(echo \"$list1\" | wc -c)\n  local list2_len=$(echo \"\
    $list2\" | wc -c)\n  if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n    echo\
    \ \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i\n    local -i j\n    local -i sum1=0\n    local -i sum2=0\n  \
    \  local -i len\n    local -i len_min\n    local -i len_max\n    local -i sum_min\n\
    \    local -i sum_max\n    local -a list_min\n    local -a list_max\n    local\
    \ -a list_min_str\n    local -a list_max_str\n    local -a list_min_str_escaped\n\
    \    local -a list_max_str_escaped\n    local str\n    local str_escaped\n   \
    \ local -i k\n\n    if [ $len1 -eq 0 ] && [ $len2 -eq 0 ]; then\n        echo\
    \ \"[]\"\n        return\n    fi\n\n    if [ $len1 -eq 0 ]; then\n        echo\
    \ \"[$(printf '\"%s\" ' \"${list2[@]}\")]\"\n        return\n    fi\n\n    if\
    \ [ $len2 -eq 0 ]; then\n        echo \"[$(printf '\"%s\" ' \"${list1[@]}\")]\"\
    \n        return\n    fi\n\n    for ((i=0; i<len1; i++)); do\n        len=${#list1[i]}\n\
    \        sum1=$((sum1 + len))\n    done\n\n    for ((i=0; i<len2; i++)); do\n\
    \        len=${#list2[i]}\n        sum2=$((sum2 + len))\n    done\n\n    if [\
    \ $sum1 -lt $sum2 ]; then\n        len_min=$len1\n        len_max=$len2\n    \
    \    sum_min=$sum1\n        sum_max=$sum2\n        list_min=(${list1[@]})\n  \
    \      list_max=(${list2[@]})\n    else\n        len_min=$len2\n        len_max=$len1\n\
    \        sum_min=$sum2\n        sum_max=$sum1\n        list_min=(${list2[\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpug8bptzr.sh: line 83: syntax error near unexpected token `(''

    /tmp/tmpug8bptzr.sh: line 83: `candidate() {''

    /tmp/tmpug8bptzr.sh: line 84: total_match: command not found

    /tmp/tmpug8bptzr.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpug8bptzr.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    for word in $list1; do\n   \
    \     total1=$((total1 + ${#word}))\n    done\n    for word in $list2; do\n  \
    \      total2=$((total2 + ${#word}))\n    done\n    if [ $total1 -lt $total2 ];\
    \ then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\
    \ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\"\
    \ ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi\
    \ hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local i\n    local j\n    for\
    \ i in $list1; do\n        total1=$((total1 + ${#i}))\n    done\n    for j in\
    \ $list2; do\n        total2=$((total2 + ${#j}))\n    done\n    if [ $total1 -lt\
    \ $total2 ]; then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\n\
    \    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i sum=0\n    local -i len=0\n    local -i len_min=0\n    local -i\
    \ len_max=0\n    local -i len_min_sum=0\n    local -i len_max_sum=0\n    local\
    \ -a list_min=()\n    local -a list_max=()\n    local -a list_min_sum=()\n   \
    \ local -a list_max_sum=()\n    local -a list_min_sum_ret=()\n    local -a list_max_sum_ret=()\n\
    \    local -a list_ret=()\n    local -a list_ret_tmp=()\n    local -a list_ret_tmp2=()\n\
    \    local -a list_ret_tmp3=()\n    local -a list_ret_tmp4=()\n    local -a list_ret_tmp5=()\n\
    \    local -a list_ret_tmp6=()\n    local -a list_ret_tmp7=()\n    local -a list_ret_tmp8=()\n\
    \    local -a list_ret_tmp9=()\n    local -a list_ret_tmp10=()\n    local -a list_ret_tmp11=()\n\
    \    local -a list_ret_tmp12=()\n    local -a list_ret_tmp13=()\n    local -a\
    \ list_ret_tmp14=()\n    local -a list_ret_tmp15=()\n    local -a list_ret_tmp16=()\n\
    \    local -a list_ret_tmp17=()\n    local -a list_ret_tmp18=()\n    local -a\
    \ list_ret_tmp19=()\n    local -a list_ret_tmp20=()\n    local -a list_ret_tmp21=()\n\
    \    local -a list_ret_tmp22=\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_total=0\n    local -i\
    \ max_total=0\n    local -a min_list=()\n    local -a max_list=()\n    local -a\
    \ result=()\n\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((i=0; i<len2; i++)); do\n        total2=$((total2 + ${#list2[i]}))\n\
    \    done\n\n    if [[ $total1 -lt $total2 ]]; then\n        min=$total1\n   \
    \     max=$total2\n        min_list=(${list1[@]})\n        max_list=(${list2[@]})\n\
    \    else\n        min=$total2\n        max=$total1\n        min_list=(${list2[@]})\n\
    \        max_list=(${list1[@]})\n    fi\n\n    for ((i=0; i<${#min_list[@]}; i++));\
    \ do\n        min_total=$((min_total + ${#min_list[i]}))\n        if [[ $min_total\
    \ -gt $max ]]; then\n            break\n        fi\n        result+=(${min_list[i]})\n\
    \    done\n\n    echo ${result[@]}\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local l1=\"$1\"\n  local l2=\"$2\"\
    \n  local l1_total=0\n  local l2_total=0\n  for word in $l1; do\n    l1_total=$((l1_total\
    \ + ${#word}))\n  done\n  for word in $l2; do\n    l2_total=$((l2_total + ${#word}))\n\
    \  done\n  if [[ $l1_total -lt $l2_total ]]; then\n    echo \"$l1\"\n  else\n\
    \    echo \"$l2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -a result=()\n  local -i sum1=0\n  local -i sum2=0\n  local -i i=0\n\
    \  local -i j=0\n  local -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n\
    \  local -i min=0\n  local -i max=0\n  local -i min_sum=0\n  local -i max_sum=0\n\
    \  local -i min_len=0\n  local -i max_len=0\n  local -i min_index=0\n  local -i\
    \ max_index=0\n  local -i min_index_len=0\n  local -i max_index_len=0\n  local\
    \ -i min_index_sum=0\n  local -i max_index_sum=0\n  local -i min_index_len_sum=0\n\
    \  local -i max_index_len_sum=0\n  local -i min_index_sum_len=0\n  local -i max_index_sum_len=0\n\
    \  local -i min_index_len_sum_len=0\n  local -i max_index_len_sum_len=0\n  local\
    \ -i min_index_sum_len_len=0\n  local -i max_index_sum_len_len=0\n  local -i min_index_len_sum_len_len=0\n\
    \  local -i max_index_len_sum_len_len=0\n  local -i min_index_sum_len_len_len=0\n\
    \  local -i max_index_sum_len_len_len=0\n  local -i min_index_len_sum_len_len_len=0\n\
    \  local -i max_index_len_sum_len_len_len=0\n  local -i min_index_sum_len_len_len_len=0\n\
    \  local -i max_index_sum_len_len_len_len=0\n  local -i min_index_len_sum_len_len_len_len=0\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i total1=0\n    local -i total2=0\n    local -a result=()\n    local\
    \ -i result_len=0\n    local -i result_index=0\n    local -i result_total=0\n\
    \    local -i result_total_index=0\n    local -i result_total_len=0\n    local\
    \ -a result_total_list=()\n    local -i result_total_list_index=0\n    local -i\
    \ result_total_list_len=0\n    local -a result_total_list_list=()\n    local -i\
    \ result_total_list_list_index=0\n    local -i result_total_list_list_len=0\n\
    \    local -a result_total_list_list_list=()\n    local -i result_total_list_list_list_index=0\n\
    \    local -i result_total_list_list_list_len=0\n    local -a result_total_list_list_list_list=()\n\
    \    local -i result_total_list_list_list_list_index=0\n    local -i result_total_list_list_list_list_len=0\n\
    \    local -a result_total_list_list_list_list_list=()\n    local -i result_total_list_list_list_list_list_index=0\n\
    \    local -i result_total_list_list_list_list_list_len=0\n    local -a result_total_list_list_list_list_list_list=()\n\
    \    local -i result_total_list_list_list_list_list_list_index=0\n    local -i\
    \ result_total_list_list_list_list_list_list_len=0\n    local -a result_total_list_list_list_list\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_item\n  local\
    \ list2_item\n  local list1_item_len\n  local list2_item_len\n  local list1_item_len_total=0\n\
    \  local list2_item_len_total=0\n  local list1_item_len_total_str\n  local list2_item_len_total_str\n\
    \  local list1_item_len_total_str_len\n  local list2_item_len_total_str_len\n\
    \  local list1_item_len_total_str_len_total=0\n  local list2_item_len_total_str_len_total=0\n\
    \  local list1_item_len_total_str_len_total_str\n  local list2_item_len_total_str_len_total_str\n\
    \  local list1_item_len_total_str_len_total_str_len\n  local list2_item_len_total_str_len_total_str_len\n\
    \  local list1_item_len_total_str_len_total_str_len_total=0\n  local list2_item_len_total_str_len_total_str_len_total=0\n\
    \  local list1_item_len_total_str_len_total_str_len_total_str\n  local list2_item_len_total_str_len_total_str_len_total_str\n\
    \  local list1_item_len_total_str_len_total_str_len_total_str_len\n  local list2_item_len_total_str_len_total_str_len_total_str_len\n\
    \  local list1_item_len_total_str_len_total_str_len_total_str_len_total=0\n  local\
    \ list2_item_len_total_str_len_total_str_len_total_str_len_total=0\n  local list1_item_len_total_str_len_total_str_len_total_str_len_\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_len=$(echo \"$list1\" | wc -c)\n    local list2_len=$(echo\
    \ \"$list2\" | wc -c)\n    if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n  \
    \      echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_len=$(echo $list1 | wc -c)\n    local list2_len=$(echo $list2\
    \ | wc -c)\n    if [ $list1_len -lt $list2_len ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local total1=0\n  local total2=0\n\
    \  local list1=$1\n  local list2=$2\n  local list1_array=($list1)\n  local list2_array=($list2)\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local total_1=0\n  local total_2=0\n\
    \  for word in $1; do\n    total_1=$((total_1 + ${#word}))\n  done\n  for word\
    \ in $2; do\n    total_2=$((total_2 + ${#word}))\n  done\n  if [ $total_1 -lt\
    \ $total_2 ]; then\n    echo $1\n  else\n    echo $2\n  fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n\
    \  local list1_total=0\n  local list2_total=0\n  local list1_array=($list1)\n\
    \  local list2_array=($list2)\n  for i in ${list1_array[@]}; do\n    list1_total=$(($list1_total\
    \ + ${#i}))\n  done\n  for i in ${list2_array[@]}; do\n    list2_total=$(($list2_total\
    \ + ${#i}))\n  done\n  if [ $list1_total -lt $list2_total ]; then\n    echo \"\
    ${list1_array[@]}\"\n  else\n    echo \"${list2_array[@]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i char=0\n    local -i res=0\n    local -a result=()\n\
    \    local -a tmp=()\n    local -a tmp2=()\n    local -a tmp3=()\n    local -a\
    \ tmp4=()\n    local -a tmp5=()\n    local -a tmp6=()\n    local -a tmp7=()\n\
    \    local -a tmp8=()\n    local -a tmp9=()\n    local -a tmp10=()\n    local\
    \ -a tmp11=()\n    local -a tmp12=()\n    local -a tmp13=()\n    local -a tmp14=()\n\
    \    local -a tmp15=()\n    local -a tmp16=()\n    local -a tmp17=()\n    local\
    \ -a tmp18=()\n    local -a tmp19=()\n    local -a tmp20=()\n    local -a tmp21=()\n\
    \    local -a tmp22=()\n    local -a tmp23=()\n    local -a tmp24=()\n    local\
    \ -a tmp25=()\n    local -a tmp26=()\n    local -a tmp27=()\n    local -a tmp28=()\n\
    \    local -a tmp29=()\n    local -a tmp30=()\n    local -a tmp31=()\n    local\
    \ -a tmp32=()\n    local -a tmp33=()\n    local -a tmp34=()\n    local -a tmp35=()\n\
    \    local -a tmp36=()\n    local -a tmp37=()\n    local -a tmp38=()\n    local\
    \ -a tmp39=()\n    local -a tmp40=()\n    local -a tmp41=()\n    local -a tmp42=()\n\
    \    local -a tmp43=()\n    local -a tmp44=\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i\n    local -i j\n    local -i sum1=0\n    local -i sum2=0\n  \
    \  local -i len\n    local -i len_min\n    local -i len_max\n    local -i sum_min\n\
    \    local -i sum_max\n    local -a list_min\n    local -a list_max\n    local\
    \ -a list_min_result\n    local -a list_max_result\n    local -i index\n    local\
    \ -i index_min\n    local -i index_max\n    local -i count_min\n    local -i count_max\n\
    \    local -i count\n    local -i count_min_result\n    local -i count_max_result\n\
    \    local -i sum\n    local -i sum_min_result\n    local -i sum_max_result\n\
    \    local -i sum_min_result_tmp\n    local -i sum_max_result_tmp\n    local -i\
    \ sum_min_result_tmp2\n    local -i sum_max_result_tmp2\n    local -i sum_min_result_tmp3\n\
    \    local -i sum_max_result_tmp3\n    local -i sum_min_result_tmp4\n    local\
    \ -i sum_max_result_tmp4\n    local -i sum_min_result_tmp5\n    local -i sum_max_result_tmp5\n\
    \    local -i sum_min_result_tmp6\n    local -i sum_max_result_tmp6\n    local\
    \ -i sum_min_result_tmp7\n    local -i sum_max_result_tmp7\n    local -i sum_min_result_tmp8\n\
    \    local -i sum_max_result_tmp8\n    local -i sum_min_result_tmp9\n    local\
    \ -i sum_max_result_tmp9\n    local -i sum_min_result_tmp10\n    local -i sum_max_result_tmp10\n\
    \    local -i sum_min\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total1=$(echo \"$list1\" | tr -d ' ' | wc -c)\n  local total2=$(echo\
    \ \"$list2\" | tr -d ' ' | wc -c)\n  if [[ $total1 -lt $total2 ]]; then\n    echo\
    \ \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  # your code here\n  # hint: use the\
    \ following command to get the length of a string\n  # ${#string}\n  # hint: use\
    \ the following command to get the length of a list\n  # ${#list[@]}\n  # hint:\
    \ use the following command to get the length of a list\n  # ${#list[*]}\n  #\
    \ hint: use the following command to get the length of a list\n  # ${#list[0]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[1]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[2]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[3]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[4]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[5]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[6]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[7]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[8]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[9]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[10]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[11]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[12]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[13]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[14]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[15]}\n\
    \  # hint: use the following command to get the length of a list\n  # ${#list[16]}\n\
    \  # hint: use the following\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9wptzhhi.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp9wptzhhi.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min=0\n    local -i max=0\n    local -i min_index=0\n    local -i\
    \ max_index=0\n    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n  \
    \      total1=$((total1 + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++));\
    \ do\n        total2=$((total2 + ${#list2[i]}))\n    done\n\n    if [[ $total1\
    \ -lt $total2 ]]; then\n        min=$total1\n        min_index=1\n        max=$total2\n\
    \        max_index=2\n    else\n        min=$total2\n        min_index=2\n   \
    \     max=$total1\n        max_index=1\n    fi\n\n    for ((i=0; i<min; i++));\
    \ do\n        if [[ ${#list1[i]} -lt ${#list2[i]} ]]; then\n            result+=(${list1[i]})\n\
    \        else\n            result+=(${list2[i]})\n        fi\n    done\n\n   \
    \ if [[ $min_index -eq 1 ]]; then\n        for ((i=min; i<len1; i++)); do\n  \
    \          result+=(${list1[i]})\n        done\n    else\n        for ((i=min;\
    \ i<len2; i++)); do\n            result+=(${list2[i]})\n        done\n    fi\n\
    \n    echo ${result[@]}\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_array=($list1)\n\
    \    local list2_array=($list2)\n    local list1_len=${#list1_array[@]}\n    local\
    \ list2_len=${#list2_array[@]}\n    local i=0\n    local j=0\n    local len=0\n\
    \    local str=\"\"\n    local str_len=0\n    local result=\"\"\n    local result_len=0\n\
    \    local result_array=()\n    local result_array_len=0\n    local result_array_index=0\n\
    \    local result_array_str=\"\"\n    local result_array_str_len=0\n    local\
    \ result_array_str_index=0\n    local result_array_str_char=\"\"\n    local result_array_str_char_len=0\n\
    \    local result_array_str_char_index=0\n    local result_array_str_char_ascii=0\n\
    \    local result_array_str_char_ascii_hex=\"\"\n    local result_array_str_char_ascii_hex_len=0\n\
    \    local result_array_str_char_ascii_hex_index=0\n    local result_array_str_char_ascii_hex_char=\"\
    \"\n    local result_array_str_char_ascii_hex_char_len=0\n    local result_array_str_char_ascii_hex_char_index=0\n\
    \    local result_array_str_char_ascii_hex_char_ascii=0\n    local result_array_str_char_ascii_hex_char_ascii_hex=\"\
    \"\n    local result_array_str_char_ascii_hex_char_ascii_hex_len=0\n    local\
    \ result_array_str_char_ascii_hex_char_ascii_hex_index=0\n    local result_array_str_char_ascii_hex_char_ascii_hex_char=\"\
    \"\n    local result_array_str_char\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_len=$(echo \"$list1\" | wc -c)\n  local list2_len=$(echo \"\
    $list2\" | wc -c)\n  if [ \"$list1_len\" -lt \"$list2_len\" ]; then\n    echo\
    \ \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_total_chars_str=\"\"\n    local list2_total_chars_str=\"\"\n    local\
    \ list1_total_chars_str_len=0\n    local list2_total_chars_str_len=0\n    local\
    \ list1_total_chars_str_len_str=\"\"\n    local list2_total_chars_str_len_str=\"\
    \"\n    local list1_total_chars_str_len_str_len=0\n    local list2_total_chars_str_len_str_len=0\n\
    \    local list1_total_chars_str_len_str_len_str=\"\"\n    local list2_total_chars_str_len_str_len_str=\"\
    \"\n    local list1_total_chars_str_len_str_len_str_len=0\n    local list2_total_chars_str_len_str_len_str_len=0\n\
    \    local list1_total_chars_str_len_str_len_str_len_str=\"\"\n    local list2_total_chars_str_len_str_len_str_len_str=\"\
    \"\n    local list1_total_chars_str_len_str_len_str_len_str_len=0\n    local list2_total_chars_str_len_str_len_str_len_str_len=0\n\
    \    local list1_total_chars_str_len_str_len_str_len_str_len_str=\"\"\n    local\
    \ list2_total_chars_str_len_str_len_str_len_str_len_str=\"\"\n    local list1_total_chars_str_len_str_len_str_len_str_len_str_len=0\n\
    \    local list2_total_chars_str_len_str_len_str_len_str_len_str_len=0\n    local\
    \ list1_total_chars_str_len_str_len_str\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -a result=()\n  local -i total1=0\n  local -i total2=0\n  local -i i=0\n\
    \  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n\
    \  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n\
    \  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n\
    \  local -i y=0\n  local -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n\
    \  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n\
    \  local -i I=0\n  local -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n\
    \  local -i N=0\n  local -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n\
    \  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n\
    \  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i n\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i sum1=0\n    local -i sum2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i len=0\n    local -i min=0\n    local -i max=0\n    local -i tmp=0\n\
    \    local -i index=0\n    local -a result=()\n    for ((i=0; i<len1; i++)); do\n\
    \        sum1=$((sum1 + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++));\
    \ do\n        sum2=$((sum2 + ${#list2[i]}))\n    done\n    if ((sum1 > sum2));\
    \ then\n        len=len2\n        min=sum2\n        max=sum1\n        index=1\n\
    \    else\n        len=len1\n        min=sum1\n        max=sum2\n        index=0\n\
    \    fi\n    for ((i=0; i<len; i++)); do\n        if ((index == 0)); then\n  \
    \          tmp=$((tmp + ${#list1[i]}))\n        else\n            tmp=$((tmp +\
    \ ${#list2[i]}))\n        fi\n        if ((tmp > min)); then\n            break\n\
    \        fi\n        result[i]=${!index:i:1}\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local item\n    for item in\
    \ $list1; do\n        total1=$((total1 + ${#item}))\n    done\n    for item in\
    \ $list2; do\n        total2=$((total2 + ${#item}))\n    done\n    if [[ $total1\
    \ -lt $total2 ]]; then\n        echo \"$list1\"\n    else\n        echo \"$list2\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i sum1=0\n    local -i sum2=0\n    local -i i=0\n    local -i j=0\n\
    \    local -i len=0\n    local -i sum=0\n    local -a ret=()\n    for ((i=0; i<len1;\
    \ i++)); do\n        len=${#list1[$i]}\n        sum1=$((sum1+len))\n    done\n\
    \    for ((i=0; i<len2; i++)); do\n        len=${#list2[$i]}\n        sum2=$((sum2+len))\n\
    \    done\n    if [[ $sum1 -lt $sum2 ]]; then\n        ret=(\"${list1[@]}\")\n\
    \    elif [[ $sum1 -gt $sum2 ]]; then\n        ret=(\"${list2[@]}\")\n    else\n\
    \        ret=(\"${list1[@]}\")\n    fi\n    echo \"${ret[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_len=$(echo \"$list1\" | wc -c)\n  local list2_len=$(echo \"\
    $list2\" | wc -c)\n  if [[ $list1_len -lt $list2_len ]]; then\n    echo \"$list1\"\
    \n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_len=$(echo $list1 | wc -c)\n    local list2_len=$(echo $list2\
    \ | wc -c)\n    if [ $list1_len -lt $list2_len ]; then\n        echo $list1\n\
    \    else\n        echo $list2\n    fi\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total1=0\n  local total2=0\n  local result=\"\"\n  local i=0\n \
    \ local j=0\n  local len1=0\n  local len2=0\n  local len=0\n  local str=\"\"\n\
    \  local str1=\"\"\n  local str2=\"\"\n  local str1_len=0\n  local str2_len=0\n\
    \  local str_len=0\n  local str_len1=0\n  local str_len2=0\n  local str_len_min=0\n\
    \  local str_len_max=0\n  local str_len_min_index=0\n  local str_len_max_index=0\n\
    \  local str_len_min_index1=0\n  local str_len_max_index1=0\n  local str_len_min_index2=0\n\
    \  local str_len_max_index2=0\n  local str_len_min_index_tmp=0\n  local str_len_max_index_tmp=0\n\
    \  local str_len_min_index1_tmp=0\n  local str_len_max_index1_tmp=0\n  local str_len_min_index2_tmp=0\n\
    \  local str_len_max_index2_tmp=0\n  local str_len_min_index_tmp1=0\n  local str_len_max_index_tmp1=0\n\
    \  local str_len_min_index1_tmp1=0\n  local str_len_max_index1_tmp1=0\n  local\
    \ str_len_min_index2_tmp1=0\n  local str_len_max_index2_tmp1=0\n  local str_len_min_index_tmp2=0\n\
    \  local str_len_max_index_tmp2=0\n  local str_len_min_index1_tmp2=0\n  local\
    \ str_len_max_index1_tmp2=0\n  local str_len_min_index2_tmp2=0\n  local str_len_max_index2_tmp2=0\n\
    \  local str_len_min_index\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local i=0\n    local j=0\n \
    \   local len1=0\n    local len2=0\n    local str1=''\n    local str2=''\n   \
    \ local result=''\n    local result_list=''\n    local result_list_len=0\n   \
    \ local result_list_str=''\n    local result_list_str_len=0\n    local result_list_str_len_min=0\n\
    \    local result_list_str_len_min_index=0\n    local result_list_str_len_min_str=''\n\
    \    local result_list_str_len_min_str_index=0\n    local result_list_str_len_min_str_index_str=''\n\
    \    local result_list_str_len_min_str_index_str_len=0\n    local result_list_str_len_min_str_index_str_len_min=0\n\
    \    local result_list_str_len_min_str_index_str_len_min_index=0\n    local result_list_str_len_min_str_index_str_len_min_str=''\n\
    \    local result_list_str_len_min_str_index_str_len_min_str_index=0\n    local\
    \ result_list_str_len_min_str_index_str_len_min_str_index_str=''\n    local result_list_str_len_min_str_index_str_len_min_str_index_str_len=0\n\
    \    local result_list_str_len_min_str_index_str_len_min_str_index_str_len_min=0\n\
    \    local result_list_str_len_min_str_index_str_len_min_str_index_str_len_min_index=0\n\
    \    local result_list_str_len_min_str_index_str_len_min_str_index_str_len_min_str=''\n\
    \    local result_list_str_len_min_str_index\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local -a list1=($1)\n  local -a list2=($2)\n\
    \  local -i total1=0\n  local -i total2=0\n  local -i i=0\n  local -i j=0\n  local\
    \ -i len1=${#list1[@]}\n  local -i len2=${#list2[@]}\n  local -i min_len=0\n \
    \ local -i max_len=0\n  local -i min_total=0\n  local -i max_total=0\n  local\
    \ -a min_list=()\n  local -a max_list=()\n  local -a result=()\n\n  # Calculate\
    \ the total number of chars in each list\n  for ((i=0; i<len1; i++)); do\n   \
    \ total1=$((total1 + ${#list1[i]}))\n  done\n  for ((i=0; i<len2; i++)); do\n\
    \    total2=$((total2 + ${#list2[i]}))\n  done\n\n  # Determine the minimum and\
    \ maximum total number of chars\n  if ((total1 < total2)); then\n    min_total=$total1\n\
    \    max_total=$total2\n    min_len=$len1\n    max_len=$len2\n    min_list=(\"\
    ${list1[@]}\")\n    max_list=(\"${list2[@]}\")\n  else\n    min_total=$total2\n\
    \    max_total=$total1\n    min_len=$len2\n    max_len=$len1\n    min_list=(\"\
    ${list2[@]}\")\n    max_list=(\"${list1[@]}\")\n  fi\n\n  # If the minimum total\
    \ number of chars is less than the maximum total number of chars,\n  # then return\
    \ the minimum list.\n  if ((min_total < max_total)); then\n    for ((i=0; i<min_len;\
    \ i++)); do\n      result[i]=\"\\\"${min_list[i]}\\\"\"\n    done\n  # If the\
    \ minimum total number of chars is equal to the maximum total number of chars,\n\
    \  # then return the first list.\n  elif ((min_total == max_total\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjhup3n5n.sh: line 69: unexpected EOF while looking for matching
    `)''

    /tmp/tmpjhup3n5n.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local result=\"\"\n    local\
    \ i=0\n    local j=0\n    local item1=\"\"\n    local item2=\"\"\n    local len1=0\n\
    \    local len2=0\n    local len_list1=0\n    local len_list2=0\n    local len_result=0\n\
    \    local result_item=\"\"\n    local result_item_len=0\n    local result_item_len_max=0\n\
    \    local result_item_max=\"\"\n    local result_item_max_len=0\n    local result_item_max_len_max=0\n\
    \    local result_item_max_max=\"\"\n    local result_item_max_max_len=0\n   \
    \ local result_item_max_max_len_max=0\n    local result_item_max_max_max=\"\"\n\
    \    local result_item_max_max_max_len=0\n    local result_item_max_max_max_len_max=0\n\
    \    local result_item_max_max_max_max=\"\"\n    local result_item_max_max_max_max_len=0\n\
    \    local result_item_max_max_max_max_len_max=0\n    local result_item_max_max_max_max_max=\"\
    \"\n    local result_item_max_max_max_max_max_len=0\n    local result_item_max_max_max_max_max_len_max=0\n\
    \    local result_item_max_max_max_max_max_max=\"\"\n    local result_item_max_max_max_max_max_max_len=0\n\
    \    local result_item_max_max_max_max_max_max_len_max=0\n    local result_item_max_max_max_max_max_max_max=\"\
    \"\n    local result_item_max_max_max_max_max_max_max_len=0\n    local result_item_max_max_max_max_max_max_max_len_max=0\n\
    \    local result_item_max_max_\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_len=0\n    local list2_total_len=0\n    local list1_len=0\n\
    \    local list2_len=0\n    local list1_item\n    local list2_item\n    local\
    \ list1_item_len\n    local list2_item_len\n    local list1_item_len_sum=0\n \
    \   local list2_item_len_sum=0\n    local list1_item_len_sum_list=()\n    local\
    \ list2_item_len_sum_list=()\n    local list1_item_len_sum_list_str\n    local\
    \ list2_item_len_sum_list_str\n    local list1_item_len_sum_list_str_len\n   \
    \ local list2_item_len_sum_list_str_len\n    local list1_item_len_sum_list_str_len_sum=0\n\
    \    local list2_item_len_sum_list_str_len_sum=0\n    local list1_item_len_sum_list_str_len_sum_list=()\n\
    \    local list2_item_len_sum_list_str_len_sum_list=()\n    local list1_item_len_sum_list_str_len_sum_list_str\n\
    \    local list2_item_len_sum_list_str_len_sum_list_str\n    local list1_item_len_sum_list_str_len_sum_list_str_len\n\
    \    local list2_item_len_sum_list_str_len_sum_list_str_len\n    local list1_item_len_sum_list_str_len_sum_list_str_len_sum=0\n\
    \    local list2_item_len_sum_list_str_len_sum_list_str_len_sum=0\n    local list1_item_len_sum_list_str_len_sum_list_str_len_sum_list=()\n\
    \    local list2_item_len_sum_list_str_len_sum_list_str_len_sum_list\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total_chars1=$(echo \"$list1\" | tr -d ' ' | wc -c)\n  local total_chars2=$(echo\
    \ \"$list2\" | tr -d ' ' | wc -c)\n  if [ $total_chars1 -lt $total_chars2 ]; then\n\
    \    echo \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_len_total=0\n    local list2_item_len_total=0\n    local list1_item_len_total_prev=0\n\
    \    local list2_item_len_total_prev=0\n    local list1_item_len_total_diff=0\n\
    \    local list2_item_len_total_diff=0\n    local list1_item_len_total_diff_prev=0\n\
    \    local list2_item_len_total_diff_prev=0\n    local list1_item_len_total_diff_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev_prev=0\n    local list1_item_len_total_diff_prev_prev_prev_prev_prev_prev=0\n\
    \    local list2_item_len_total_diff_prev_prev_prev_prev_prev_prev=0\n    local\
    \ list1_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev=0\n    local list2_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local list1_item_len_total_diff_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local list2\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local i=0\n    local j=0\n \
    \   local list1_array=()\n    local list2_array=()\n    local result=()\n    local\
    \ result_index=0\n    local list1_len=0\n    local list2_len=0\n    local list1_item=0\n\
    \    local list2_item=0\n    local list1_item_len=0\n    local list2_item_len=0\n\
    \    local list1_item_len_sum=0\n    local list2_item_len_sum=0\n    local list1_item_len_sum_max=0\n\
    \    local list2_item_len_sum_max=0\n    local list1_item_len_sum_max_index=0\n\
    \    local list2_item_len_sum_max_index=0\n    local list1_item_len_sum_max_item=0\n\
    \    local list2_item_len_sum_max_item=0\n    local list1_item_len_sum_max_item_len=0\n\
    \    local list2_item_len_sum_max_item_len=0\n    local list1_item_len_sum_max_item_len_sum=0\n\
    \    local list2_item_len_sum_max_item_len_sum=0\n    local list1_item_len_sum_max_item_len_sum_max=0\n\
    \    local list2_item_len_sum_max_item_len_sum_max=0\n    local list1_item_len_sum_max_item_len_sum_max_index=0\n\
    \    local list2_item_len_sum_max_item_len_sum_max_index=0\n    local list1_item_len_sum_max_item_len_sum_max_item=0\n\
    \    local list2_item_len_sum_max_item_len_sum_max_item=0\n    local list1_item_len_sum_max_item_len_sum_max_item_len=0\n\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_total_chars_list=()\n    local list2_total_chars_list=()\n    local list1_total_chars_list_index=0\n\
    \    local list2_total_chars_list_index=0\n    local list1_total_chars_list_index_max=0\n\
    \    local list2_total_chars_list_index_max=0\n    local list1_total_chars_list_index_max_index=0\n\
    \    local list2_total_chars_list_index_max_index=0\n    local list1_total_chars_list_index_max_index_max=0\n\
    \    local list2_total_chars_list_index_max_index_max=0\n    local list1_total_chars_list_index_max_index_max_index=0\n\
    \    local list2_total_chars_list_index_max_index_max_index=0\n    local list1_total_chars_list_index_max_index_max_index_max=0\n\
    \    local list2_total_chars_list_index_max_index_max_index_max=0\n    local list1_total_chars_list_index_max_index_max_index_max_index=0\n\
    \    local list2_total_chars_list_index_max_index_max_index_max_index=0\n    local\
    \ list1_total_chars_list_index_max_index_max_index_max_index_max=0\n    local\
    \ list2_total_chars_list_index_max_index_max_index_max_index_max=0\n    local\
    \ list1_total_chars_list_index_max_index_max_index_max_index_max_index=0\n   \
    \ local list2_total_chars_list_index_max_index_max_index_max_index_max_index=0\n\
    \    local list1_total_chars\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  local list1_item_len_total=0\n    local list2_item_len_total=0\n    local list1_item_len_total_list=\"\
    \"\n    local list2_item_len_total_list=\"\"\n    local list1_item_len_total_list_len=0\n\
    \    local list2_item_len_total_list_len=0\n    local list1_item_len_total_list_len_min=0\n\
    \    local list2_item_len_total_list_len_min=0\n    local list1_item_len_total_list_len_min_list=\"\
    \"\n    local list2_item_len_total_list_len_min_list=\"\"\n    local list1_item_len_total_list_len_min_list_len=0\n\
    \    local list2_item_len_total_list_len_min_list_len=0\n    local list1_item_len_total_list_len_min_list_len_min=0\n\
    \    local list2_item_len_total_list_len_min_list_len_min=0\n    local list1_item_len_total_list_len_min_list_len_min_list=\"\
    \"\n    local list2_item_len_total_list_len_min_list_len_min_list=\"\"\n    local\
    \ list1_item_len_total_list_len_min_list_len_min_list_len=0\n    local list2_item_len_total_list_len_min_list_len_min_list_len=0\n\
    \    local list1_item_len_total_list_len_min_list_len_min_list_len_min=0\n   \
    \ local list2_item_len_total_list_len_min_list_len_min_list_len_min=0\n    local\
    \ list1_item_len_\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local total1=0\n    local total2=0\n    local i=0\n    local\
    \ j=0\n    for ((i=0; i<${#list1[@]}; i++)); do\n        total1=$((total1 + ${#list1[$i]}))\n\
    \    done\n    for ((j=0; j<${#list2[@]}; j++)); do\n        total2=$((total2\
    \ + ${#list2[$j]}))\n    done\n    if [ $total1 -lt $total2 ]; then\n        echo\
    \ ${list1[@]}\n    else\n        echo ${list2[@]}\n    fi\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1\
    \ + ${#list1[i]}))\n    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2\
    \ + ${#list2[j]}))\n    done\n    if [[ $total1 -lt $total2 ]]; then\n       \
    \ result=(\"${list1[@]}\")\n    elif [[ $total1 -gt $total2 ]]; then\n       \
    \ result=(\"${list2[@]}\")\n    else\n        result=(\"${list1[@]}\")\n    fi\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_array=($list1)\n\
    \    local list2_array=($list2)\n    local i=0\n    local j=0\n    local list1_len=${#list1_array[@]}\n\
    \    local list2_len=${#list2_array[@]}\n    local result=\"\"\n    for ((i=0;\
    \ i<list1_len; i++)); do\n        total1=$((total1 + ${#list1_array[$i]}))\n \
    \   done\n    for ((j=0; j<list2_len; j++)); do\n        total2=$((total2 + ${#list2_array[$j]}))\n\
    \    done\n    if [ $total1 -lt $total2 ]; then\n        result=$list1\n    elif\
    \ [ $total1 -gt $total2 ]; then\n        result=$list2\n    else\n        result=$list1\n\
    \    fi\n    echo $result\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=$(echo \"$list1\" | tr -d ' ' | wc -c)\n   \
    \ local list2_total_chars=$(echo \"$list2\" | tr -d ' ' | wc -c)\n    if [ \"\
    $list1_total_chars\" -lt \"$list2_total_chars\" ]; then\n        echo \"$list1\"\
    \n    elif [ \"$list1_total_chars\" -gt \"$list2_total_chars\" ]; then\n     \
    \   echo \"$list2\"\n    else\n        echo \"$list1\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1\
    \ + ${#list1[i]}))\n    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2\
    \ + ${#list2[j]}))\n    done\n    if ((total1 < total2)); then\n        result=(\"\
    ${list1[@]}\")\n    elif ((total1 > total2)); then\n        result=(\"${list2[@]}\"\
    )\n    else\n        result=(\"${list1[@]}\")\n    fi\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_max=0\n    local -i len_min=0\n    local\
    \ -i len_max_index=0\n    local -i len_min_index=0\n    local -a list_max=()\n\
    \    local -a list_min=()\n    local -a list_max_index=()\n    local -a list_min_index=()\n\
    \    local -a list_max_index_len=()\n    local -a list_min_index_len=()\n    local\
    \ -a list_max_index_len_index=()\n    local -a list_min_index_len_index=()\n \
    \   local -a list_max_index_len_index_len=()\n    local -a list_min_index_len_index_len=()\n\
    \    local -a list_max_index_len_index_len_index=()\n    local -a list_min_index_len_index_len_index=()\n\
    \    local -a list_max_index_len_index_len_index_len=()\n    local -a list_min_index_len_index_len_index_len=()\n\
    \    local -a list_max_index_len_index_len_index_len_index=()\n    local -a list_min_index_len_index_len_index_len_index=()\n\
    \    local -a list_max_index_len_index_len_index_len_index_len=()\n    local -a\
    \ list_min_index_len_index_len_index_len_index_len=()\n    local -a list_max_index_len_index_len_index_len_index_len_index=()\n\
    \    local -a list_min_index_len_index_len_index_len_index\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_array=()\n\
    \    local list2_array=()\n    local i=0\n    local j=0\n    local list1_len=0\n\
    \    local list2_len=0\n    local list1_item=\"\"\n    local list2_item=\"\"\n\
    \    local list1_item_len=0\n    local list2_item_len=0\n    local result=()\n\
    \    local result_len=0\n    local result_item=\"\"\n    local result_item_len=0\n\
    \    local result_item_index=0\n    local result_item_index_len=0\n    local result_item_index_item=\"\
    \"\n    local result_item_index_item_len=0\n    local result_item_index_item_index=0\n\
    \    local result_item_index_item_index_len=0\n    local result_item_index_item_index_item=\"\
    \"\n    local result_item_index_item_index_item_len=0\n    local result_item_index_item_index_item_index=0\n\
    \    local result_item_index_item_index_item_index_len=0\n    local result_item_index_item_index_item_index_item=\"\
    \"\n    local result_item_index_item_index_item_index_item_len=0\n    local result_item_index_item_index_item_index_item_index=0\n\
    \    local result_item_index_item_index_item_index_item_index_len=0\n    local\
    \ result_item_index_item_index_item_index_item_index_item=\"\"\n    local result_item_index_item_index_item_index_item_index_item_len=0\n\
    \    local result_item_index_item_index_item_index_item_index_item_index=0\n \
    \   local result_item_index_item_index_item_index_item_index_item_index_len=0\n\
    \    local result_item_index_item_index_item_index_item_index_\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_str=0\n    local -i len_str1=0\n    local\
    \ -i len_str2=0\n    local -i len_str3=0\n    local -i len_str4=0\n    local -i\
    \ len_str5=0\n    local -i len_str6=0\n    local -i len_str7=0\n    local -i len_str8=0\n\
    \    local -i len_str9=0\n    local -i len_str10=0\n    local -i len_str11=0\n\
    \    local -i len_str12=0\n    local -i len_str13=0\n    local -i len_str14=0\n\
    \    local -i len_str15=0\n    local -i len_str16=0\n    local -i len_str17=0\n\
    \    local -i len_str18=0\n    local -i len_str19=0\n    local -i len_str20=0\n\
    \    local -i len_str21=0\n    local -i len_str22=0\n    local -i len_str23=0\n\
    \    local -i len_str24=0\n    local -i len_str25=0\n    local -i len_str26=0\n\
    \    local -i len_str27=0\n    local -i len_str28=0\n    local -i len_str29=0\n\
    \    local -i len_str30=0\n    local -i len_str31=0\n    local -i len_str32=0\n\
    \    local -i len_str33=0\n    local -i len_str34=0\n    local -i len_str35=0\n\
    \    local -i len_str36=0\n    local -i len_str37=0\n\n}\n\ncandidate() {\n  \
    \  total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    local -i len=0\n    local -i minlen=0\n    local -i\
    \ maxlen=0\n    local -i min=0\n    local -i max=0\n    local -i minindex=0\n\
    \    local -i maxindex=0\n    local -i minindex2=0\n    local -i maxindex2=0\n\
    \    local -i minindex3=0\n    local -i maxindex3=0\n    local -i minindex4=0\n\
    \    local -i maxindex4=0\n    local -i minindex5=0\n    local -i maxindex5=0\n\
    \    local -i minindex6=0\n    local -i maxindex6=0\n    local -i minindex7=0\n\
    \    local -i maxindex7=0\n    local -i minindex8=0\n    local -i maxindex8=0\n\
    \    local -i minindex9=0\n    local -i maxindex9=0\n    local -i minindex10=0\n\
    \    local -i maxindex10=0\n    local -i minindex11=0\n    local -i maxindex11=0\n\
    \    local -i minindex12=0\n    local -i maxindex12=0\n    local -i minindex13=0\n\
    \    local -i maxindex13=0\n    local -i minindex14=0\n    local -i maxindex14=0\n\
    \    local -i minindex15=0\n    local -i maxindex15=0\n    local -i minindex16=0\n\
    \    local -i maxindex16=0\n    local -i minindex17=0\n    local -i maxindex17=0\n\
    \    local -i minindex18=0\n    local -i maxindex18=0\n    local -i minindex19=0\n\
    \    local -i maxindex19\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i\n\
    \    for ((i=0; i<${#list1[@]}; i++)); do\n        total1+=${#list1[$i]}\n   \
    \ done\n    for ((i=0; i<${#list2[@]}; i++)); do\n        total2+=${#list2[$i]}\n\
    \    done\n    if ((total1 < total2)); then\n        echo \"${list1[@]}\"\n  \
    \  else\n        echo \"${list2[@]}\"\n    fi\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_array=()\n\
    \    local list2_array=()\n    local list1_array_index=0\n    local list2_array_index=0\n\
    \    local list1_array_len=0\n    local list2_array_len=0\n    local list1_array_item=\"\
    \"\n    local list2_array_item=\"\"\n    local list1_array_item_len=0\n    local\
    \ list2_array_item_len=0\n    local list1_array_item_len_total=0\n    local list2_array_item_len_total=0\n\
    \    local list1_array_item_len_total_max=0\n    local list2_array_item_len_total_max=0\n\
    \    local list1_array_item_len_total_max_index=0\n    local list2_array_item_len_total_max_index=0\n\
    \    local list1_array_item_len_total_max_item=\"\"\n    local list2_array_item_len_total_max_item=\"\
    \"\n    local list1_array_item_len_total_max_item_len=0\n    local list2_array_item_len_total_max_item_len=0\n\
    \    local list1_array_item_len_total_max_item_len_total=0\n    local list2_array_item_len_total_max_item_len_total=0\n\
    \    local list1_array_item_len_total_max_item_len_total_max=0\n    local list2_array_item_len_total_max_item_len_total_max=0\n\
    \    local list1_array_item_len_total_max_item_len_total_max_index=0\n    local\
    \ list2_array_item_len_total_max_item_len_total_max_index=0\n    local list1_array_item_len_total_max_item_len_total_max_item=\"\
    \"\n    local list2_array_item_len_\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_min_final=()\n    local -a list_max_final=()\n\
    \    local -a list_final=()\n    local -a list_final_str=()\n    local -a list_final_str_final=()\n\
    \    local -a list_final_str_final_final=()\n    local -a list_final_str_final_final_final=()\n\
    \    local -a list_final_str_final_final_final_final=()\n    local -a list_final_str_final_final_final_final_final=()\n\
    \    local -a list_final_str_final_final_final_final_final_final=()\n    local\
    \ -a list_final_str_final_final_final_final_final_final_final=()\n    local -a\
    \ list_final_str_final_final_final_final_final_final_final_final=()\n    local\
    \ -a list_final_str_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_final_str_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_final_str_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_final_str_final_final_final_final_final_final_final_final_final_final_final_final=()\n\
    \    local -a list_final_str_final\n}\n\ncandidate() {\n    total_match \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  for list1_item in $list1; do\n        list1_item_len=${#list1_item}\n     \
    \   list1_total=$((list1_total + list1_item_len))\n    done\n    for list2_item\
    \ in $list2; do\n        list2_item_len=${#list2_item}\n        list2_total=$((list2_total\
    \ + list2_item_len))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local str=\"\
    \"\n    local str_tmp=\"\"\n    local -i idx=0\n    local -i idx_tmp=0\n    local\
    \ -i idx_ret=0\n    local -i idx_min=0\n    local -i idx_max=0\n    local -i idx_min_tmp=0\n\
    \    local -i idx_max_tmp=0\n    local -i idx_ret_tmp=0\n    local -i idx_min_ret=0\n\
    \    local -i idx_max_ret=0\n    local -i idx_min_ret_tmp=0\n    local -i idx_max_ret_tmp=0\n\
    \    local -i idx_min_ret_tmp2=0\n    local -i idx_max_ret_tmp2=0\n    local -i\
    \ idx_min_ret_tmp3=0\n    local -i idx_max_ret_tmp3=0\n    local -i idx_min_ret_tmp4=0\n\
    \    local -i idx_max_ret_tmp4=0\n    local -i idx_min_ret_tmp5=0\n    local -i\
    \ idx_max_ret_tmp5=0\n    local -i idx_min_ret_tmp6=0\n    local -i idx_max_ret_tmp6=0\n\
    \    local -i idx_min_ret_tmp7=0\n   \n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_array=()\n    local\
    \ list2_array=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    for ((i=0; i<len1; i++)); do\n        total1=$((total1 + ${#list1[i]}))\n\
    \    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2 + ${#list2[j]}))\n\
    \    done\n    if ((total1 < total2)); then\n        echo ${list1[@]}\n    else\n\
    \        echo ${list2[@]}\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_item\n    local list2_item\n    local list1_item_chars\n    local list2_item_chars\n\
    \    local list1_item_chars_total=0\n    local list2_item_chars_total=0\n    local\
    \ list1_item_chars_total_list=()\n    local list2_item_chars_total_list=()\n \
    \   local list1_item_chars_total_list_index=0\n    local list2_item_chars_total_list_index=0\n\
    \    local list1_item_chars_total_list_index_max=0\n    local list2_item_chars_total_list_index_max=0\n\
    \    local list1_item_chars_total_list_index_max_value=0\n    local list2_item_chars_total_list_index_max_value=0\n\
    \    local list1_item_chars_total_list_index_max_value_list=()\n    local list2_item_chars_total_list_index_max_value_list=()\n\
    \    local list1_item_chars_total_list_index_max_value_list_index=0\n    local\
    \ list2_item_chars_total_list_index_max_value_list_index=0\n    local list1_item_chars_total_list_index_max_value_list_index_max=0\n\
    \    local list2_item_chars_total_list_index_max_value_list_index_max=0\n    local\
    \ list1_item_chars_total_list_index_max_value_list_index_max_value=0\n    local\
    \ list2_item_chars_total_list_index_max_value_list_index_max_value=0\n    local\
    \ list1_item_chars_total_list_index_max_value_list_index_max_value_list=()\n \
    \   local list2_item_\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local total1=$(echo \"$list1\" | wc -c)\n  local total2=$(echo \"$list2\"\
    \ | wc -c)\n  if [ $total1 -lt $total2 ]; then\n    echo \"$list1\"\n  else\n\
    \    echo \"$list2\"\n  fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local str=''\n\
    \    local str_tmp=''\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n   \
    \ local -i bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n   \
    \ local -i ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local a=\"$1\"\n    local b=\"\
    $2\"\n    local a_total=0\n    local b_total=0\n    local a_count=0\n    local\
    \ b_count=0\n    local a_arr\n    local b_arr\n    local a_len\n    local b_len\n\
    \    local i\n    local j\n    local a_str\n    local b_str\n    local a_str_len\n\
    \    local b_str_len\n    local a_str_count\n    local b_str_count\n    local\
    \ a_str_arr\n    local b_str_arr\n    local a_str_len\n    local b_str_len\n \
    \   local a_str_count\n    local b_str_count\n    local a_str_arr\n    local b_str_arr\n\
    \    local a_str_len\n    local b_str_len\n    local a_str_count\n    local b_str_count\n\
    \    local a_str_arr\n    local b_str_arr\n    local a_str_len\n    local b_str_len\n\
    \    local a_str_count\n    local b_str_count\n    local a_str_arr\n    local\
    \ b_str_arr\n    local a_str_len\n    local b_str_len\n    local a_str_count\n\
    \    local b_str_count\n    local a_str_arr\n    local b_str_arr\n    local a_str_len\n\
    \    local b_str_len\n    local a_str_count\n    local b_str_count\n    local\
    \ a_str_arr\n    local b_str_arr\n    local a_str_len\n    local b_str_len\n \
    \   local a_str_count\n    local b_str_count\n    local a_str_arr\n    local b_str_arr\n\
    \    local a_str_len\n    local b_str_len\n    local a_str_count\n    local b_str_count\n\
    \    local a_str_arr\n    local b_str_arr\n    local a_str_len\n    local b_str_len\n\
    \    local a_str_count\n    local b_str_count\n    local a\n}\n\ncandidate() {\n\
    \    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\
    \") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n   \
    \ [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [[ $list1_total -lt $list2_total ]]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    for i in \"${list1[@]}\"; do\n        total1=$((total1 + ${#i}))\n    done\n\
    \    for i in \"${list2[@]}\"; do\n        total2=$((total2 + ${#i}))\n    done\n\
    \    if ((total1 < total2)); then\n        result=(\"${list1[@]}\")\n    else\n\
    \        result=(\"${list2[@]}\")\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local total1=0\n    local total2=0\n\
    \    local i=0\n    local j=0\n    for ((i=0; i<${#list1[@]}; i++)); do\n    \
    \    total1=$((total1 + ${#list1[$i]}))\n    done\n    for ((i=0; i<${#list2[@]};\
    \ i++)); do\n        total2=$((total2 + ${#list2[$i]}))\n    done\n    if [ $total1\
    \ -lt $total2 ]; then\n        for ((i=0; i<${#list1[@]}; i++)); do\n        \
    \    result[$i]=${list1[$i]}\n        done\n    else\n        for ((i=0; i<${#list2[@]};\
    \ i++)); do\n            result[$i]=${list2[$i]}\n        done\n    fi\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_total=0\n  local list2_total=0\n  local list1_len=0\n  local\
    \ list2_len=0\n  local list1_array=()\n  local list2_array=()\n  local list1_array_len=0\n\
    \  local list2_array_len=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local list1_item=\"\"\n  local list2_item=\"\"\n  local list1_item_len=0\n\
    \  local list2_item_len=0\n  local list1_item_total=0\n  local list2_item_total=0\n\
    \  local list1_item_array=()\n  local list2_item_array=()\n  local list1_item_array_len=0\n\
    \  local list2_item_array_len=0\n  local list1_item_array_item=\"\"\n  local list2_item_array_item=\"\
    \"\n  local list1_item_array_item_len=0\n  local list2_item_array_item_len=0\n\
    \  local list1_item_array_item_total=0\n  local list2_item_array_item_total=0\n\
    \  local list1_item_array_item_total_hex=0\n  local list2_item_array_item_total_hex=0\n\
    \  local list1_item_array_item_total_hex_len=0\n  local list2_item_array_item_total_hex_len=0\n\
    \  local list1_item_array_item_total_hex_len_diff=0\n  local list2_item_array_item_total_hex_len_diff=0\n\
    \  local list1_item_array_item_total_hex_len_diff_abs=0\n  local list2_item_array_item_total_hex_len_diff_abs=0\n\
    \  local list1_item_array_item_total_hex_len_diff_abs_total=0\n  local list2_item_array_item_total_hex_len\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -a result=()\n    local -i total1=0\n    local -i total2=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i len1=${#list1[@]}\n    local\
    \ -i len2=${#list2[@]}\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1\
    \ + ${#list1[i]}))\n    done\n    for ((j=0; j<len2; j++)); do\n        total2=$((total2\
    \ + ${#list2[j]}))\n    done\n    if ((total1 < total2)); then\n        result=(\"\
    ${list1[@]}\")\n    elif ((total1 > total2)); then\n        result=(\"${list2[@]}\"\
    )\n    else\n        result=(\"${list1[@]}\")\n    fi\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    for item in $list1;\
    \ do\n        list1_total=$((list1_total + ${#item}))\n    done\n    for item\
    \ in $list2; do\n        list2_total=$((list2_total + ${#item}))\n    done\n \
    \   if [ $list1_total -lt $list2_total ]; then\n        echo \"$list1\"\n    else\n\
    \        echo \"$list2\"\n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i total1=0\n    local -i total2=0\n    local -i i=0\n\
    \    local -i j=0\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i min_len=0\n    local -i max_len=0\n    local -i min_total=0\n  \
    \  local -i max_total=0\n    local -a min_list=()\n    local -a max_list=()\n\
    \    local -a result=()\n\n    for ((i=0; i<len1; i++)); do\n        total1=$((total1\
    \ + ${#list1[i]}))\n    done\n    for ((i=0; i<len2; i++)); do\n        total2=$((total2\
    \ + ${#list2[i]}))\n    done\n\n    if [[ $total1 -lt $total2 ]]; then\n     \
    \   min_total=$total1\n        max_total=$total2\n        min_len=$len1\n    \
    \    max_len=$len2\n        min_list=(\"${list1[@]}\")\n        max_list=(\"${list2[@]}\"\
    )\n    else\n        min_total=$total2\n        max_total=$total1\n        min_len=$len2\n\
    \        max_len=$len1\n        min_list=(\"${list2[@]}\")\n        max_list=(\"\
    ${list1[@]}\")\n    fi\n\n    for ((i=0; i<min_len; i++)); do\n        for ((j=0;\
    \ j<max_len; j++)); do\n            if [[ ${#min_list[i]} -eq ${#max_list[j]}\
    \ ]]; then\n                result+=(\"\\\"${min_list[i]}\\\"\")\n           \
    \     max_total=$((max_total - ${#min_list[i]}))\n                break\n    \
    \        fi\n        done\n    done\n\n    for ((i=0; i<max_len; i++)); do\n \
    \       if [[ ${#max_list[i]} -le $max_\n}\n\ncandidate() {\n    total_match \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n   \
    \ [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"\
    hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\"\
    \ \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI\
    \ Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n \
    \   [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpduax9sm3.sh: line 70: syntax error in conditional expression

    /tmp/tmpduax9sm3.sh: line 71: syntax error near `}''

    /tmp/tmpduax9sm3.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n  local list1=\"$1\"\n  local list2=\"\
    $2\"\n  local list1_chars=$(echo \"$list1\" | tr -d ' ' | wc -c)\n  local list2_chars=$(echo\
    \ \"$list2\" | tr -d ' ' | wc -c)\n  if [ \"$list1_chars\" -lt \"$list2_chars\"\
    \ ]; then\n    echo \"$list1\"\n  else\n    echo \"$list2\"\n  fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    for list1_item in $list1; do\n        list1_total=$((list1_total\
    \ + ${#list1_item}))\n    done\n    for list2_item in $list2; do\n        list2_total=$((list2_total\
    \ + ${#list2_item}))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n\
    \    local list1_total=0\n    local list2_total=0\n    local list1_array=($list1)\n\
    \    local list2_array=($list2)\n    local i\n    local j\n    for ((i=0; i<${#list1_array[@]};\
    \ i++)); do\n        list1_total=$((list1_total + ${#list1_array[$i]}))\n    done\n\
    \    for ((j=0; j<${#list2_array[@]}; j++)); do\n        list2_total=$((list2_total\
    \ + ${#list2_array[$j]}))\n    done\n    if [ $list1_total -lt $list2_total ];\
    \ then\n        echo \"${list1_array[@]}\"\n    else\n        echo \"${list2_array[@]}\"\
    \n    fi\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\"\
    ) = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"\
    hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total=0\n    local list2_total=0\n    local list1_item\n\
    \    local list2_item\n    local list1_item_len\n    local list2_item_len\n  \
    \  for list1_item in $list1; do\n        list1_item_len=${#list1_item}\n     \
    \   list1_total=$((list1_total + list1_item_len))\n    done\n    for list2_item\
    \ in $list2; do\n        list2_item_len=${#list2_item}\n        list2_total=$((list2_total\
    \ + list2_item_len))\n    done\n    if [ $list1_total -lt $list2_total ]; then\n\
    \        echo \"$list1\"\n    else\n        echo \"$list2\"\n    fi\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a min_list=()\n    local -a\
    \ max_list=()\n    local -a result=()\n    local -i result_len=0\n    local -i\
    \ result_i=0\n    local -i result_j=0\n    local -i result_k=0\n    local -i result_l=0\n\
    \    local -i result_m=0\n    local -i result_n=0\n    local -i result_o=0\n \
    \   local -i result_p=0\n    local -i result_q=0\n    local -i result_r=0\n  \
    \  local -i result_s=0\n    local -i result_t=0\n    local -i result_u=0\n   \
    \ local -i result_v=0\n    local -i result_w=0\n    local -i result_x=0\n    local\
    \ -i result_y=0\n    local -i result_z=0\n    local -i result_aa=0\n    local\
    \ -i result_bb=0\n    local -i result_cc=0\n    local -i result_dd=0\n    local\
    \ -i result_ee=0\n    local -i result_ff=0\n    local -i result_gg=0\n    local\
    \ -i result_hh=0\n    local -i result_ii=0\n    local -i result_jj=0\n    local\
    \ -i result_kk=0\n    local -i result_ll=0\n    local -i result_mm=0\n    local\
    \ -i result_nn=0\n    local -i result_oo=0\n    local -i result_pp=0\n}\n\ncandidate()\
    \ {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"\
    hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n\
    \    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i len=0\n    local -i len_min=0\n    local -i len_max=0\n    local\
    \ -i sum_min=0\n    local -i sum_max=0\n    local -a list_min=()\n    local -a\
    \ list_max=()\n    local -a list_ret=()\n    local -a list_tmp=()\n    local -a\
    \ list_tmp2=()\n    local -a list_tmp3=()\n    local -a list_tmp4=()\n    local\
    \ -a list_tmp5=()\n    local -a list_tmp6=()\n    local -a list_tmp7=()\n    local\
    \ -a list_tmp8=()\n    local -a list_tmp9=()\n    local -a list_tmp10=()\n   \
    \ local -a list_tmp11=()\n    local -a list_tmp12=()\n    local -a list_tmp13=()\n\
    \    local -a list_tmp14=()\n    local -a list_tmp15=()\n    local -a list_tmp16=()\n\
    \    local -a list_tmp17=()\n    local -a list_tmp18=()\n    local -a list_tmp19=()\n\
    \    local -a list_tmp20=()\n    local -a list_tmp21=()\n    local -a list_tmp22=()\n\
    \    local -a list_tmp23=()\n    local -a list_tmp24=()\n    local -a list_tmp25=()\n\
    \    local -a list_tmp26=()\n    local -a list_tmp27=()\n    local -a list_tmp28=()\n\
    \    local -a list_tmp29=()\n    local -a list_tmp30=()\n    local -a list_tmp31=()\n\
    \    local -a list_tmp\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi\
    \ admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin\
    \ project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\"\
    \ \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n\
    \    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local -a list1=($1)\n    local\
    \ -a list2=($2)\n    local -i len1=${#list1[@]}\n    local -i len2=${#list2[@]}\n\
    \    local -i i=0\n    local -i j=0\n    local -i sum1=0\n    local -i sum2=0\n\
    \    local -i sum=0\n    local -i len=0\n    local -i len_min=0\n    local -i\
    \ len_max=0\n    local -i len_min_sum=0\n    local -i len_max_sum=0\n    local\
    \ -a list_min=()\n    local -a list_max=()\n    local -a list_min_sum=()\n   \
    \ local -a list_max_sum=()\n    local -a list_min_sum_ret=()\n    local -a list_max_sum_ret=()\n\
    \    local -a list_ret=()\n    local -a list_ret_tmp=()\n    local -a list_ret_tmp2=()\n\
    \    local -a list_ret_tmp3=()\n    local -a list_ret_tmp4=()\n    local -a list_ret_tmp5=()\n\
    \    local -a list_ret_tmp6=()\n    local -a list_ret_tmp7=()\n    local -a list_ret_tmp8=()\n\
    \    local -a list_ret_tmp9=()\n    local -a list_ret_tmp10=()\n    local -a list_ret_tmp11=()\n\
    \    local -a list_ret_tmp12=()\n    local -a list_ret_tmp13=()\n    local -a\
    \ list_ret_tmp14=()\n    local -a list_ret_tmp15=()\n    local -a list_ret_tmp16=()\n\
    \    local -a list_ret_tmp17=()\n    local -a list_ret_tmp18=()\n    local -a\
    \ list_ret_tmp19=()\n    local -a list_ret_tmp20=()\n    local -a list_ret_tmp21=()\n\
    \    local -a list_ret_tmp22=\n}\n\ncandidate() {\n    total_match \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi\
    \ hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\"\
    ) = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[\
    \ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\"\
    ) = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local list1_total_chars=0\n    local list2_total_chars=0\n    local\
    \ list1_item\n    local list2_item\n    local list1_item_len\n    local list2_item_len\n\
    \    local list1_item_len_sum=0\n    local list2_item_len_sum=0\n    local list1_item_len_sum_max=0\n\
    \    local list2_item_len_sum_max=0\n    local list1_item_len_sum_max_item\n \
    \   local list2_item_len_sum_max_item\n    local list1_item_len_sum_max_item_len\n\
    \    local list2_item_len_sum_max_item_len\n    local list1_item_len_sum_max_item_len_max=0\n\
    \    local list2_item_len_sum_max_item_len_max=0\n    local list1_item_len_sum_max_item_len_max_item\n\
    \    local list2_item_len_sum_max_item_len_max_item\n    local list1_item_len_sum_max_item_len_max_item_len\n\
    \    local list2_item_len_sum_max_item_len_max_item_len\n    local list1_item_len_sum_max_item_len_max_item_len_max=0\n\
    \    local list2_item_len_sum_max_item_len_max_item_len_max=0\n    local list1_item_len_sum_max_item_len_max_item_len_max_item\n\
    \    local list2_item_len_sum_max_item_len_max_item_len_max_item\n    local list1_item_len_sum_max_item_len_max_item_len_max_item_len\n\
    \    local list2_item_len_sum_max_item_len_max_item_len_max_item_len\n    local\
    \ list1_item_len_sum_max_item_len_max_item_\n}\n\ncandidate() {\n    total_match\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"\") = \"\" ]]\n\
    \    [[ $(candidate \"hi admin\" \"hi hi\") = \"hi hi\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hi hi admin project\") = \"hi admin\" ]]\n    [[ $(candidate\
    \ \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate \"hi admin\" \"hI Hi\")\
    \ = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hi\") = \"hI hi hi\"\
    \ ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") = \"hi admin\" ]]\n    [[\
    \ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate \"this\" \"\") = \"\
    \" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts two lists of strings and\
    \ returns the list that has \n# total number of chars in the all strings of the\
    \ list less than the other list.\n# if the two lists have the same number of chars,\
    \ return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n#\
    \ >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match\
    \ \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match\
    \ \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is\
    \ a space-separated list\ntotal_match() {\n    local list1=\"$1\"\n    local list2=\"\
    $2\"\n    local total1=0\n    local total2=0\n    local list1_arr\n    local list2_arr\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local aa\n    local bb\n    local cc\n    local dd\n    local ee\n    local\
    \ ff\n    local gg\n    local hh\n    local ii\n    local jj\n    local kk\n \
    \   local ll\n    local mm\n    local nn\n    local oo\n    local pp\n    local\
    \ qq\n    local rr\n    local ss\n    local tt\n    local uu\n    local vv\n \
    \   local ww\n    local xx\n    local yy\n    local zz\n    local aaa\n    local\
    \ bbb\n    local ccc\n    local ddd\n    local eee\n    local fff\n    local ggg\n\
    \    local hhh\n    local iii\n    local jjj\n    local kkk\n    local lll\n \
    \   local mmm\n    local nnn\n    local ooo\n    local ppp\n    local qqq\n  \
    \  local rrr\n    local sss\n    local ttt\n    local uuu\n    local vvv\n   \
    \ local www\n    local xxx\n    local yyy\n    local zzz\n    local aaaa\n   \
    \ local bbbb\n    local cccc\n    local dddd\n    local eeee\n    local ffff\n\
    \    local gggg\n    local hhhh\n    local iiii\n    local jjjj\n    local kkkk\n\
    \    local llll\n    local mmmm\n    local nnnn\n    local oooo\n    local pppp\n\
    \    local qqqq\n    local rrrr\n    local ssss\n    local tttt\n    local uuuu\n\
    \    local vvvv\n    local wwww\n    local xxxx\n    local yyyy\n    local z\n\
    }\n\ncandidate() {\n    total_match \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\" \"\") = \"\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi\"\
    ) = \"hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hi hi admin project\") = \"\
    hi admin\" ]]\n    [[ $(candidate \"4\" \"1 2 3 4 5\") = \"4\" ]]\n    [[ $(candidate\
    \ \"hi admin\" \"hI Hi\") = \"hI Hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI\
    \ hi hi\") = \"hI hi hi\" ]]\n    [[ $(candidate \"hi admin\" \"hI hi hii\") =\
    \ \"hi admin\" ]]\n    [[ $(candidate \"\" \"this\") = \"\" ]]\n    [[ $(candidate\
    \ \"this\" \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011742
