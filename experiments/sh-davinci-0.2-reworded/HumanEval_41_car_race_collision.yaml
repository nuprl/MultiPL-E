name: HumanEval_41_car_race_collision
language: sh
prompt: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
  \ line.\n# n cars are driving left to right;  simultaneously, a different set of\
  \ n cars\n# are driving right to left.   The two sets of cars start out being very\
  \ far from\n# each other.  All cars move in the same speed.  Two cars are said to\
  \ collide\n# when a car that's moving left to right hits a car that's moving right\
  \ to left.\n# However, the cars are infinitely sturdy and strong; as a result, they\
  \ continue moving\n# in their trajectory as if they did not collide.\n# This function\
  \ outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision()\
  \ {\n"
tests: "}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
  \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
  \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
completions: ["    # Write your code here\n    echo \"0\"", "    local n=$1\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n  \
    \      j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "  local n=$1\n  local i\n  local j\n  local count=0\n\
    \  for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=n; j++)); do\n      if ((i <\
    \ j)); then\n        count=$((count + 1))\n      fi\n    done\n  done\n  echo\
    \ $count", "    local n=$1\n    local i\n    local j\n    local count=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i\
    \ < j)); then\n                ((count++))\n            fi\n        done\n   \
    \ done\n    echo $count", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        while [ $j -lt $n ]; do\n\
    \            if [ $i -ne $j ]; then\n                collisions=$((collisions\
    \ + 1))\n            fi\n            j=$((j + 1))\n        done\n        i=$((i\
    \ + 1))\n    done\n    echo $collisions", "    local n=$1\n    local i\n    local\
    \ j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "  local\
    \ n=$1\n  local i=0\n  local j=0\n  local k=0\n  local collisions=0\n  local left_to_right_cars=()\n\
    \  local right_to_left_cars=()\n  while [ $i -lt $n ]; do\n    left_to_right_cars[$i]=$((RANDOM\
    \ % 100))\n    right_to_left_cars[$i]=$((RANDOM % 100))\n    i=$((i + 1))\n  done\n\
    \  i=0\n  while [ $i -lt $n ]; do\n    j=$((i + 1))\n    while [ $j -lt $n ];\
    \ do\n      if [ ${left_to_right_cars[$i]} -gt ${left_to_right_cars[$j]} ]; then\n\
    \        k=${left_to_right_cars[$i]}\n        left_to_right_cars[$i]=${left_to_right_cars[$j]}\n\
    \        left_to_right_cars[$j]=$k\n      fi\n      if [ ${right_to_left_cars[$i]}\
    \ -gt ${right_to_left_cars[$j]} ]; then\n        k=${right_to_left_cars[$i]}\n\
    \        right_to_left_cars[$i]=${right_to_left_cars[$j]}\n        right_to_left_cars[$j]=$k\n\
    \      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  i=0\n  j=0\n\
    \  while [ $i -lt $n ] && [ $j -lt $n ]; do\n    if [ ${left_to_right_cars[$i]}\
    \ -gt ${right_to_left_cars[$j]} ]; then\n      collisions=$((collisions + 1))\n\
    \      j=$((j + 1))\n    else\n      i=$((i + 1))\n    fi\n  done\n  echo $collisions",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n ]; do\n        j=$((i+1))\n        while [ $j -lt $n ]; do\n   \
    \         collisions=$((collisions+1))\n            j=$((j+1))\n        done\n\
    \        i=$((i+1))\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n  \
    \      j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i\n    local j\n    local count=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                ((count++))\n            fi\n        done\n\
    \    done\n    echo $count", "    local n=$1\n    local i\n    local j\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local collisions=0\n    local i=0\n    while [ $i -lt $n ]; do\n \
    \       local j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                ((collisions++))\n            fi\n    \
    \    done\n    done\n    echo $collisions", "  local n=$1\n  local i=0\n  local\
    \ j=0\n  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((n - 1))\n   \
    \ while [ $j -gt $i ]; do\n      collisions=$((collisions + 1))\n      j=$((j\
    \ - 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions", "    if [[ $1\
    \ -lt 1 ]]; then\n        echo \"Error: invalid number of cars\"\n        return\
    \ 1\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo \"0\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 2 ]]; then\n        echo \"1\"\n        return 0\n \
    \   fi\n    if [[ $1 -eq 3 ]]; then\n        echo \"3\"\n        return 0\n  \
    \  fi\n    if [[ $1 -eq 4 ]]; then\n        echo \"6\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 5 ]]; then\n        echo \"10\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 6 ]]; then\n        echo \"15\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 7 ]]; then\n        echo \"21\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 8 ]]; then\n        echo \"28\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 9 ]]; then\n        echo \"36\"\n        return 0\n   \
    \ fi\n    if [[ $1 -eq 10 ]]; then\n        echo \"45\"\n        return 0\n  \
    \  fi\n    if [[ $1 -eq 11 ]]; then\n        echo \"55\"\n        return 0\n \
    \   fi\n    if [[ $1 -eq 12 ]]; then\n        echo \"66\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 13 ]]; then\n        echo \"78\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 14 ]]; then\n        echo \"91\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 15 ]]; then\n        echo \"105\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 16 ]]; then\n        echo \"120\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 17 ]]; then\n        echo \"136\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 18 ]]; then\n        echo \"153\"\n        return 0\n\
    \    fi\n    if [[ $1 -eq 19 ]]; then\n        echo \"171\"\n        return 0\n\
    \    fi\n    if [[ $1 -", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i\n    local j\n    local collisions=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n\
    \                ((collisions++))\n            fi\n        done\n    done\n  \
    \  echo $collisions", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                collisions=$((collisions + 1))\n      \
    \      fi\n        done\n    done\n    echo $collisions", "    local n=$1\n  \
    \  local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ];\
    \ do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        while [ $j -lt $n ]; do\n\
    \            if [ $i -eq $j ]; then\n                j=$((j+1))\n            \
    \    continue\n            fi\n            if [ $i -lt $j ]; then\n          \
    \      collisions=$((collisions+1))\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n        j=0\n    done\n    echo $collisions",
  "    # Write your code here\n    echo 0", "    if [[ $1 -lt 0 ]]; then\n       \
    \ echo \"Error: invalid input\"\n        return 1\n    fi\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo 0\n        return 0\n    fi\n    echo $(( $1 - 1 ))",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n ]; do\n        while [ $j -lt $n ]; do\n            if [ $i -eq\
    \ $j ]; then\n                ((j++))\n                continue\n            fi\n\
    \            ((collisions++))\n            ((j++))\n        done\n        ((i++))\n\
    \    done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n        while\
    \ [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n            j=$((j\
    \ + 1))\n        done\n        i=$((i + 1))\n    done\n    echo $collisions",
  "    local n=$1\n    local i=0\n    local j=0\n    local count=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i<j)); then\n\
    \                count=$((count+1))\n            fi\n        done\n    done\n\
    \    echo $count", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n\
    \  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt $n ]; do\n      collisions=$((collisions\
    \ + 1))\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions",
  "    local n=$1\n    local i\n    local j\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                ((collisions++))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((collisions++))\n     \
    \       fi\n        done\n    done\n    echo $collisions", "    local n=$1\n \
    \   local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if (( i < j )); then\n  \
    \              (( collisions++ ))\n            fi\n        done\n    done\n  \
    \  echo $collisions", "    if [[ $1 -lt 1 ]]; then\n        echo \"error: invalid\
    \ input\"\n        return 1\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo\
    \ 0\n        return 0\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo 1\n \
    \       return 0\n    fi\n    echo $(( $1 * ($1 - 1) / 2 ))", "  local n=$1\n\
    \  local i=0\n  local j=0\n  local collisions=0\n  while (( i < n )); do\n   \
    \ (( j = n - 1 - i ))\n    (( collisions += i * j ))\n    (( i++ ))\n  done\n\
    \  echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collision=0\n    while [ $i -lt $n ]; do\n        j=$((n-1))\n        while\
    \ [ $j -gt $i ]; do\n            collision=$((collision+1))\n            j=$((j-1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collision", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        while [ $j -lt $n ]; do\n            if [ $i -eq $j ]; then\n\
    \                :\n            else\n                collisions=$((collisions+1))\n\
    \            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n  \
    \  done\n    echo $collisions", "    # The first car that's moving left to right\
    \ starts at position 0.\n    # The first car that's moving right to left starts\
    \ at position $1.\n    # The second car that's moving left to right starts at\
    \ position 1.\n    # The second car that's moving right to left starts at position\
    \ $1-1.\n    # The third car that's moving left to right starts at position 2.\n\
    \    # The third car that's moving right to left starts at position $1-2.\n  \
    \  # ...\n    # The nth car that's moving left to right starts at position n-1.\n\
    \    # The nth car that's moving right to left starts at position $1-(n-1).\n\
    \    #\n    # The cars that are moving left to right are at positions 0, 1, 2,\
    \ ..., n-1.\n    # The cars that are moving right to left are at positions $1,\
    \ $1-1, $1-2, ..., $1-(n-1).\n    #\n    # The cars that are moving left to right\
    \ are at positions 0, 1, 2, ..., n-1.\n    # The cars that are moving right to\
    \ left are at positions $1, $1-1, $1-2, ..., $1-(n-1).\n    #\n    # The cars\
    \ that are moving left to right are at positions 0, 1, 2, ..., n-1.\n    # The\
    \ cars that are moving right to left are at positions $1, $1-1, $1-2, ..., $1-(n-1).\n\
    \    #\n    # The cars that are moving left to right are at positions 0, 1, 2,\
    \ ..., n-1.\n    # The cars that are moving right to left are at positions $1,\
    \ $1-1, $1-2, ..., $1-(n-1).\n    #\n    # The cars that are moving left to right\
    \ are at positions 0, 1, 2, ..., n-1.\n    # The cars that are moving right to\
    \ left are at positions $1, $1-1, $1-2, ..., $1-(n-1).\n    #\n    # The cars\
    \ that are moving left to right are at positions 0, 1, 2, ..., n-1.\n   ", " \
    \   local n=$1\n    local i\n    local j\n    local k\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  for ((k=0; k<n; k++)); do\n                if ((i != j && j != k && i != k));\
    \ then\n                    if ((i < j && j < k)); then\n                    \
    \    ((collisions++))\n                    fi\n                fi\n          \
    \  done\n        done\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n         \
    \       collisions=$((collisions + 1))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    # Write your code here\n    echo \"Not implemented\"",
  "    # Write your code here\n    echo \"unimplemented\"", "    local n=$1\n    local\
    \ i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                ((count++))\n\
    \            fi\n        done\n    done\n    echo $count", "    # This is a very\
    \ inefficient algorithm.  It's O(n^2).\n    # It's a brute force algorithm.  It's\
    \ not very smart.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's not very beautiful.\n    # It's not very\
    \ clever.  It's not very elegant.\n    # It's not very sophisticated.  It's not\
    \ very beautiful.\n    # It's not very clever.  It's not very elegant.\n    #\
    \ It's not very sophisticated.  It's", "    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n    \
    \    for ((j=0; j<n; j++)); do\n            for ((k=0; k<n; k++)); do\n      \
    \          for ((l=0; l<n; l++)); do\n                    for ((m=0; m<n; m++));\
    \ do\n                        if [[ $i -eq $j ]] && [[ $k -eq $l ]] && [[ $i -eq\
    \ $k ]]; then\n                            collisions=$((collisions+1))\n    \
    \                    fi\n                    done\n                done\n    \
    \        done\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            collisions=$((collisions + 1))\n            fi\n        done\n  \
    \  done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i != j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n\
    \  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      if ((i < j));\
    \ then\n        collisions=$((collisions + 1))\n      fi\n    done\n  done\n \
    \ echo $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n\
    \  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt $n ]; do\n      collisions=$((collisions\
    \ + 1))\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions",
  '    echo "($1-1)*$1/2" | bc', "    local n=$1\n    local i\n    local j\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        j=$((n-1))\n        while [ $j -gt $i ]; do\n            collisions=$((collisions+1))\n\
    \            j=$((j-1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                collisions=$((collisions + 1))\n      \
    \      fi\n        done\n    done\n    echo $collisions", "    local n=$1\n  \
    \  local i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n  \
    \      for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n           \
    \     ((count++))\n            fi\n        done\n    done\n    echo $count", " \
    \   local n=$1\n    local i\n    local j\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                collisions=$((collisions + 1))\n            fi\n     \
    \   done\n    done\n    echo $collisions", "    local n=$1\n    local i\n    local\
    \ j\n    local collision=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collision=$((collision\
    \ + 1))\n            fi\n        done\n    done\n    echo $collision", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local count=0\n    while [ $i -lt $n\
    \ ]; do\n        while [ $j -lt $n ]; do\n            if [ $i -eq $j ]; then\n\
    \                let j++\n                continue\n            fi\n         \
    \   if [ $i -lt $j ]; then\n                let count++\n            fi\n    \
    \        let j++\n        done\n        let i++\n        j=0\n    done\n    echo\
    \ $count", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                collisions=$((collisions + 1))\n      \
    \      fi\n        done\n    done\n    echo $collisions", "    local n=$1\n  \
    \  local i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n  \
    \      for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n           \
    \     ((count++))\n            fi\n        done\n    done\n    echo $count", " \
    \   local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i\
    \ < j)); then\n                collisions=$((collisions + 1))\n            fi\n\
    \        done\n    done\n    echo $collisions", "    local -i n=$1\n    local\
    \ -i i=0\n    local -i j=0\n    local -i count=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n         \
    \       ((count++))\n            fi\n        done\n    done\n    echo $count",
  "    local n=$1\n    local i=0\n    local j=0\n    local count=0\n    while [ $i\
    \ -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            if\
    \ [ $i -ne $j ]; then\n                count=$((count+1))\n            fi\n  \
    \          j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $count",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n ]; do\n        while [ $j -lt $n ]; do\n            if [ $i -eq\
    \ $j ]; then\n                ((j++))\n                continue\n            fi\n\
    \            collisions=$((collisions + 1))\n            ((j++))\n        done\n\
    \        ((i++))\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n    \
    \    for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n             \
    \   ((collisions++))\n            fi\n        done\n    done\n    echo $collisions",
  "    local n=$1\n    local i\n    local j\n    local count=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n\
    \                ((count++))\n            fi\n        done\n    done\n    echo\
    \ $count", "    local n=$1\n    local i\n    local j\n    local count=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i\
    \ < j)); then\n                ((count++))\n            fi\n        done\n   \
    \ done\n    echo $count", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n\
    \            if ((i < j)); then\n                count=$((count + 1))\n      \
    \      fi\n        done\n    done\n    echo $count", "    # TODO: implement this\
    \ function\n    # Hint: use the modulo operator (%)\n    # Hint: use the bash\
    \ arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression\
    \ syntax\n    # Hint: use the bash arithmetic expression syntax\n    # Hint: use\
    \ the bash arithmetic expression syntax\n    # Hint: use the bash arithmetic expression",
  "    # Write your code here\n    echo \"0\"", "    # Write your code here\n    echo\
    \ \"0\"", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n\
    \            if [ $i -ne $j ]; then\n                collisions=$((collisions\
    \ + 1))\n            fi\n            j=$((j + 1))\n        done\n        i=$((i\
    \ + 1))\n    done\n    echo $collisions", "    local n=$1\n    local i\n    local\
    \ j\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((count++))\n   \
    \         fi\n        done\n    done\n    echo $count", "    local n=$1\n    local\
    \ i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n    \
    \    for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n             \
    \   ((collisions++))\n            fi\n        done\n    done\n    echo $collisions",
  "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n  while [ $i -lt\
    \ $n ]; do\n    while [ $j -lt $n ]; do\n      if [ $i -ne $j ]; then\n      \
    \  collisions=$((collisions + 1))\n      fi\n      j=$((j + 1))\n    done\n  \
    \  i=$((i + 1))\n  done\n  echo $collisions", "    local n=$1\n    local i\n \
    \   local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        j=$((n-1))\n        while\
    \ [ $j -gt $i ]; do\n            collisions=$((collisions+1))\n            j=$((j-1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n\
    \                ((collisions++))\n            fi\n        done\n    done\n  \
    \  echo $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n\
    \  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n      if [ $i -eq $j\
    \ ]; then\n        j=$((j+1))\n        continue\n      fi\n      collisions=$((collisions+1))\n\
    \      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $collisions", "  \
    \  if [[ $1 -lt 0 ]]; then\n        echo \"Error: input must be non-negative\"\
    \n        return 1\n    fi\n    if [[ $1 -eq 0 ]]; then\n        echo 0\n    \
    \    return 0\n    fi\n    if [[ $1 -eq 1 ]]; then\n        echo 0\n        return\
    \ 0\n    fi\n    if [[ $1 -eq 2 ]]; then\n        echo 1\n        return 0\n \
    \   fi\n    # Now we know that $1 is at least 3.\n    # We can use the fact that\
    \ the number of collisions is the sum of the first $1 integers.\n    # We can\
    \ use the fact that the sum of the first $1 integers is $1 * ($1 + 1) / 2.\n \
    \   # We can use the fact that $1 * ($1 + 1) / 2 is equal to $1 * ($1 / 2 + 1\
    \ / 2).\n    # We can use the fact that $1 * ($1 / 2 + 1 / 2) is equal to $1 *\
    \ ($1 / 2) + $1 * (1 / 2).\n    # We can use the fact that $1 * ($1 / 2) is equal\
    \ to $1 * ($1 >> 1).\n    # We can use the fact that $1 * (1 / 2) is equal to\
    \ $1 >> 1.\n    # We can use the fact that $1 * ($1 >> 1) + $1 >> 1 is equal to\
    \ $1 * ($1 >> 1) + ($1 >> 1).\n    # We can use the fact that $1 * ($1 >> 1) +\
    \ ($1 >> 1) is equal to ($1 * $1) >> 1 + ($1 >> 1).\n    # We can use the fact\
    \ that ($1 * $1) >> 1 + ($1 >> 1) is equal to (($1 * $1) + $1) >> 1.\n    echo\
    \ $(( ($1 * $1) + $1 )) >> 1", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n        while [ $j\
    \ -lt $n ]; do\n            collisions=$((collisions + 1))\n            j=$((j\
    \ + 1))\n        done\n        i=$((i + 1))\n    done\n    echo $collisions",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                collisions=$((collisions + 1))\n            fi\n     \
    \   done\n    done\n    echo $collisions", "    if [[ $1 -lt 1 ]]; then\n    \
    \    echo \"Error: invalid input\"\n        return 1\n    fi\n    echo $(( $1\
    \ * ($1 - 1) / 2 ))", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        j=$(( $n - 1 ))\n       \
    \ while [ $j -gt $i ]; do\n            collisions=$(( $collisions + 1 ))\n   \
    \         j=$(( $j - 1 ))\n        done\n        i=$(( $i + 1 ))\n    done\n \
    \   echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n\
    \            if ((i < j)); then\n                ((count++))\n            fi\n\
    \        done\n    done\n    echo $count", "    local n=$1\n    local i\n    local\
    \ j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i\n    local j\n    local count=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            ((count++))\n            fi\n        done\n    done\n    echo $count",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n         \
    \   collisions=$((collisions + 1))\n            j=$((j + 1))\n        done\n \
    \       i=$((i + 1))\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n    \
    \    for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n             \
    \   collisions=$((collisions + 1))\n            fi\n        done\n    done\n \
    \   echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ $i -eq $j ]]; then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ];\
    \ do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "  if [[ $1 -lt 1 ]]; then\n    echo \"Error: $1 is not\
    \ a positive integer\"\n    return 1\n  fi\n  echo $(( $1 * ($1 - 1) / 2 ))",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for ((\
    \ i=0; i<n; i++ )); do\n        for (( j=0; j<n; j++ )); do\n            if ((\
    \ i < j )); then\n                collisions=$(( collisions + 1 ))\n         \
    \   fi\n        done\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n         \
    \       collisions=$((collisions + 1))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for (( i=0; i<n; i++ )); do\n        for (( j=0; j<n; j++\
    \ )); do\n            if (( i < j )); then\n                (( collisions++ ))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            collisions=$((collisions + 1))\n            fi\n        done\n  \
    \  done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    while [ $i -lt $n ]\n    do\n        while [ $j -lt\
    \ $n ]\n        do\n            if [ $i -ne $j ]\n            then\n         \
    \       collisions=$((collisions+1))\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collisions", "  # Write\
    \ your code here\n  if [[ $1 -le 0 ]]; then\n    echo \"0\"\n  else\n    echo\
    \ \"$1\"\n  fi", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n\
    \            collisions=$((collisions + 1))\n            j=$((j + 1))\n      \
    \  done\n        i=$((i + 1))\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            ((collisions++))\n            fi\n        done\n    done\n    echo\
    \ $collisions", "  # Write your code here\n  if [[ $1 -lt 1 ]]; then\n    echo\
    \ \"0\"\n    return\n  fi\n  echo \"$(( $1 * ($1 - 1) / 2 ))\"", "    local n=$1\n\
    \    local i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            ((collisions++))\n            fi\n        done\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                ((collisions++))\n            fi\n    \
    \    done\n    done\n    echo $collisions", "    local -i n=$1\n    local -i i=0\n\
    \    local -i j=0\n    local -i collisions=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i\
    \ dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i\
    \ hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i\
    \ bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local\
    \ -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local\
    \ -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n   ", "  local n=$1\n  local i\n  local j\n  local collision=0\n \
    \ for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=n; j++)); do\n      if ((i !=\
    \ j)); then\n        collision=$((collision + 1))\n      fi\n    done\n  done\n\
    \  echo $collision", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((collisions++))\n     \
    \       fi\n        done\n    done\n    echo $collisions", "    if [[ $1 -lt 1\
    \ ]]; then\n        echo \"Error: invalid input\"\n        return 1\n    fi\n\
    \    echo \"There are $1 cars driving left to right and $1 cars driving right\
    \ to left.\"\n    echo \"The cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\"\n    echo \"in their trajectory as if they did not collide.\"\
    \n    echo \"This function outputs the number of such collisions.\"\n    echo\
    \ \"The number of collisions is $(( $1 * ($1 - 1) / 2 )).\"", "    local n=$1\n\
    \    local i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if [[ $i -lt $j ]]; then\n\
    \                collisions=$((collisions+1))\n            fi\n        done\n\
    \    done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local count=0\n    while [ $i -lt $n ]\n    do\n        j=$i\n        while\
    \ [ $j -lt $n ]\n        do\n            if [ $i -ne $j ]\n            then\n\
    \                ((count++))\n            fi\n            ((j++))\n        done\n\
    \        ((i++))\n    done\n    echo $count", "  local n=$1\n  local i\n  local\
    \ j\n  local collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n\
    \  done\n  echo $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local\
    \ collisions=0\n  while [ $i -lt $n ]; do\n    j=$(( $n - 1 ))\n    while [ $j\
    \ -gt $i ]; do\n      collisions=$(( $collisions + 1 ))\n      j=$(( $j - 1 ))\n\
    \    done\n    i=$(( $i + 1 ))\n  done\n  echo $collisions", "    local n=$1\n\
    \    local collisions=0\n    local i=0\n    while [ $i -lt $n ]; do\n        collisions=$((collisions\
    \ + i))\n        i=$((i + 1))\n    done\n    echo $collisions", "    if [[ $1\
    \ -lt 1 ]]; then\n        echo \"Error: invalid input\"\n        return 1\n  \
    \  fi\n    local -i n=$1\n    local -i i=0\n    local -i j=0\n    local -i count=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if [[ $i -ne $j ]]; then\n                count=$((count+1))\n            fi\n\
    \        done\n    done\n    echo $count", "    local n=$1\n    local i=0\n  \
    \  local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if [[ $i -ne $j ]]; then\n              \
    \  collisions=$((collisions+1))\n            fi\n        done\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                ((collisions++))\n            fi\n    \
    \    done\n    done\n    echo $collisions", "    local n=$1\n    local i=0\n \
    \   local j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((n\
    \ - i - 1))\n        collisions=$((collisions + j))\n        i=$((i + 1))\n  \
    \  done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i + 1))\n \
    \       while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n\
    \            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n\
    \            collisions=$((collisions + 1))\n            j=$((j + 1))\n      \
    \  done\n        i=$((i + 1))\n    done\n    echo $collisions", "    if [ $1 -le\
    \ 0 ]; then\n        echo \"0\"\n    else\n        echo \"$1\"\n    fi", "   \
    \ local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ (( i < n )); do\n        j=$(( n - 1 - i ))\n        collisions=$(( collisions\
    \ + j ))\n        i=$(( i + 1 ))\n    done\n    echo $collisions", "    if [ $1\
    \ -lt 1 ]; then\n        echo \"Error:  the number of cars must be a positive\
    \ integer\"\n        return 1\n    fi\n    echo $(( $1 * ($1 - 1) / 2 ))", " \
    \   local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n         \
    \   collisions=$((collisions + 1))\n            j=$((j + 1))\n        done\n \
    \       i=$((i + 1))\n    done\n    echo $collisions", "    local n=$1\n    local\
    \ i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n    \
    \    for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n             \
    \   collisions=$((collisions + 1))\n            fi\n        done\n    done\n \
    \   echo $collisions", "    local n=$1\n    local i\n    local j\n    local k\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            for ((k=0; k<n; k++)); do\n                if [[ $i -lt\
    \ $j && $j -lt $k ]]; then\n                    collisions=$((collisions+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $collisions",
  "    local n=$1\n    local i=0\n    local j=0\n    local count=0\n    while [ $i\
    \ -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            if\
    \ [ $i -ne $j ]; then\n                count=$((count+1))\n            fi\n  \
    \          j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $count",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    local\
    \ left_to_right_cars=()\n    local right_to_left_cars=()\n    local left_to_right_cars_index=0\n\
    \    local right_to_left_cars_index=0\n    local left_to_right_cars_length=0\n\
    \    local right_to_left_cars_length=0\n    local left_to_right_cars_index_max=0\n\
    \    local right_to_left_cars_index_max=0\n    local left_to_right_cars_index_min=0\n\
    \    local right_to_left_cars_index_min=0\n    local left_to_right_cars_index_min_tmp=0\n\
    \    local right_to_left_cars_index_min_tmp=0\n    local left_to_right_cars_index_max_tmp=0\n\
    \    local right_to_left_cars_index_max_tmp=0\n    local left_to_right_cars_index_min_tmp_2=0\n\
    \    local right_to_left_cars_index_min_tmp_2=0\n    local left_to_right_cars_index_max_tmp_2=0\n\
    \    local right_to_left_cars_index_max_tmp_2=0\n    local left_to_right_cars_index_min_tmp_3=0\n\
    \    local right_to_left_cars_index_min_tmp_3=0\n    local left_to_right_cars_index_max_tmp_3=0\n\
    \    local right_to_left_cars_index_max_tmp_3=0\n    local left_to_right_cars_index_min_tmp_4=0\n\
    \    local right_to_left_cars_index_min_tmp_4=0\n    local left_to_right_cars_index_max_tmp_4=0\n\
    \    local right_to_left_cars_index_max_tmp_4=0\n    local left_to_right_cars_index_min_tmp_5=0\n\
    \    local right_to_left_cars_index", "    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt\
    \ $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i\n    local j\n    local k\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            for ((k=0; k<n; k++)); do\n                if ((i<j &&\
    \ j<k)); then\n                    ((collisions++))\n                fi\n    \
    \        done\n        done\n    done\n    echo $collisions", "    # Your code\
    \ here\n    echo \"Not implemented\"", "    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n\
    \  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n      if [ $i -ne $j\
    \ ]; then\n        collisions=$((collisions + 1))\n      fi\n      j=$((j + 1))\n\
    \    done\n    i=$((i + 1))\n  done\n  echo $collisions", "    local n=$1\n  \
    \  local i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n  \
    \      for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n           \
    \     ((count++))\n            fi\n        done\n    done\n    echo $count", " \
    \   local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i\
    \ < j)); then\n                collisions=$((collisions + 1))\n            fi\n\
    \        done\n    done\n    echo $collisions", "    local n=$1\n    local collisions=0\n\
    \    local i=0\n    local j=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    #\
    \ Write your code here\n    echo \"Not implemented\"", "    local n=$1\n    local\
    \ i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                ((count++))\n\
    \            fi\n        done\n    done\n    echo $count", "    local n=$1\n \
    \   local i=0\n    local j=0\n    local count=0\n    while [ $i -lt $n ]\n   \
    \ do\n        while [ $j -lt $n ]\n        do\n            if [ $i -eq $j ]\n\
    \            then\n                ((j++))\n                continue\n       \
    \     fi\n            ((count++))\n            ((j++))\n        done\n       \
    \ ((i++))\n        j=0\n    done\n    echo $count", "    local n=$1\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    local left_to_right_cars=()\n\
    \    local right_to_left_cars=()\n    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM\
    \ % 100))\n    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM\
    \ % 100))\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]; then\n                collisions=$((collisions + 1))\n            fi\n \
    \       done\n    done\n    echo $collisions", "    local n=$1\n    local i=0\n\
    \    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n      \
    \  for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n               \
    \ collisions=$((collisions + 1))\n            fi\n        done\n    done\n   \
    \ echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((collisions++))\n     \
    \       fi\n        done\n    done\n    echo $collisions", "    local n=$1\n \
    \   local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            ((collisions++))\n            fi\n        done\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local i\n    local j\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                collisions=$((collisions + 1))\n      \
    \      fi\n        done\n    done\n    echo $collisions", "    local n=$1\n  \
    \  local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ];\
    \ do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i\n    local j\n    local k\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            for ((k=0; k<n; k++)); do\n                if ((i < j\
    \ && j < k)); then\n                    ((collisions++))\n                fi\n\
    \            done\n        done\n    done\n    echo $collisions", "    if [ $1\
    \ -lt 1 ]; then\n        echo \"Error: input must be a positive integer\"\n  \
    \      return 1\n    fi\n    echo $(( $1 * ($1 - 1) / 2 ))", "    local n=$1\n\
    \    local i\n    local j\n    local count=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n         \
    \       ((count++))\n            fi\n        done\n    done\n    echo $count",
  "    local n=$1\n    local i\n    local j\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                collisions=$((collisions + 1))\n            fi\n     \
    \   done\n    done\n    echo $collisions", "    local n=$1\n    local i=0\n  \
    \  local j=0\n    local count=0\n    while [ $i -lt $n ]; do\n        j=$i\n \
    \       while [ $j -lt $n ]; do\n            if [ $i -ne $j ]; then\n        \
    \        count=$((count+1))\n            fi\n            j=$((j+1))\n        done\n\
    \        i=$((i+1))\n    done\n    echo $count", "    local n=$1\n    local i=0\n\
    \    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n      \
    \  for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n               \
    \ collisions=$((collisions + 1))\n            fi\n        done\n    done\n   \
    \ echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ count=0\n    while [ $i -lt $n ]; do\n        j=$((n - 1))\n        while [\
    \ $j -gt $i ]; do\n            count=$((count + 1))\n            j=$((j - 1))\n\
    \        done\n        i=$((i + 1))\n    done\n    echo $count", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ];\
    \ do\n        j=$i\n        while [ $j -lt $n ]; do\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    #\
    \ your code here\n    echo \"0\"", "    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for i in $(seq 1 $n); do\n        for j in $(seq 1 $n);\
    \ do\n            if [ $i -eq $j ]; then\n                continue\n         \
    \   fi\n            if [ $i -gt $j ]; then\n                count=$((count+1))\n\
    \            fi\n        done\n    done\n    echo $count", "    local n=$1\n \
    \   local i\n    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n         \
    \       collisions=$((collisions + 1))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n        while\
    \ [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collisions", "    local\
    \ n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n\
    \                collisions=$((collisions + 1))\n            fi\n        done\n\
    \    done\n    echo $collisions", "    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count", "    # Write your code here\n\
    \    local n=$1\n    local collisions=0\n    for ((i=1; i<=n; i++))\n    do\n\
    \        for ((j=1; j<=n; j++))\n        do\n            if [ $i -eq $j ]\n  \
    \          then\n                collisions=$((collisions+1))\n            fi\n\
    \        done\n    done\n    echo $collisions", "    local n=$1\n    local i\n\
    \    local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local collisions=0\n    local i=0\n    local j=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            collisions=$((collisions + 1))\n            fi\n        done\n  \
    \  done\n    echo $collisions", "    local n=$1\n    local i\n    local j\n  \
    \  local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count", "    local n=$1\n    local i\n\
    \    local j\n    local collision=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                ((collision++))\n\
    \            fi\n        done\n    done\n    echo $collision", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local k=0\n    local collisions=0\n    local\
    \ left_to_right_cars=()\n    local right_to_left_cars=()\n    while [ $i -lt $n\
    \ ]; do\n        left_to_right_cars[$i]=$((RANDOM % 100))\n        i=$((i + 1))\n\
    \    done\n    while [ $j -lt $n ]; do\n        right_to_left_cars[$j]=$((RANDOM\
    \ % 100))\n        j=$((j + 1))\n    done\n    while [ $k -lt $n ]; do\n     \
    \   if [ ${left_to_right_cars[$k]} -eq ${right_to_left_cars[$k]} ]; then\n   \
    \         collisions=$((collisions + 1))\n        fi\n        k=$((k + 1))\n \
    \   done\n    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n\
    \    local collisions=0\n    while (( i < n ))\n    do\n        j=$(( n - 1 ))\n\
    \        while (( j > i ))\n        do\n            collisions=$(( collisions\
    \ + 1 ))\n            j=$(( j - 1 ))\n        done\n        i=$(( i + 1 ))\n \
    \   done\n    echo $collisions", "  local n=$1\n  local i=0\n  local j=0\n  local\
    \ collisions=0\n  while [ $i -lt $n ]; do\n    j=$((i+1))\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions+1))\n      j=$((j+1))\n    done\n \
    \   i=$((i+1))\n  done\n  echo $collisions", "    local n=$1\n    local i\n  \
    \  local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions", "    #\
    \ TODO: implement this function\n    # Hint: use the modulo operator\n    # Hint:\
    \ use the seq command\n    # Hint: use the bc command\n    # Hint: use the echo\
    \ command\n    # Hint: use the wc command\n    # Hint: use the tr command\n  \
    \  # Hint: use the sort command\n    # Hint: use the uniq command\n    # Hint:\
    \ use the grep command\n    # Hint: use the head command\n    # Hint: use the\
    \ tail command\n    # Hint: use the cut command\n    # Hint: use the paste command\n\
    \    # Hint: use the tr command\n    # Hint: use the sed command\n    # Hint:\
    \ use the sort command\n    # Hint: use the uniq command\n    # Hint: use the\
    \ wc command\n    # Hint: use the cut command\n    # Hint: use the tr command\n\
    \    # Hint: use the sort command\n    # Hint: use the uniq command\n    # Hint:\
    \ use the wc command\n    # Hint: use the cut command\n    # Hint: use the tr\
    \ command\n    # Hint: use the sort command\n    # Hint: use the uniq command\n\
    \    # Hint: use the wc command\n    # Hint: use the cut command\n    # Hint:\
    \ use the tr command\n    # Hint: use the sort command\n    # Hint: use the uniq\
    \ command\n    # Hint: use the wc command\n    # Hint: use the cut command\n \
    \   # Hint: use the tr command\n    # Hint: use the sort command\n    # Hint:\
    \ use the uniq command\n    # Hint: use the wc command\n    # Hint: use the cut\
    \ command\n    # Hint: use the tr command\n    # Hint: use the sort command\n\
    \    # Hint: use the uniq command\n    # Hint: use the wc command\n    # Hint:\
    \ use the cut command\n    # Hint: use the tr command\n    # Hint: use the sort\
    \ command\n    # Hint: use the uniq command\n    # Hint: use the wc command\n\
    \    # Hint:", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n\
    \            collisions=$((collisions + 1))\n            j=$((j + 1))\n      \
    \  done\n        i=$((i + 1))\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            collisions=$((collisions + 1))\n            fi\n        done\n  \
    \  done\n    echo $collisions", "    local n=$1\n    local collisions=0\n    local\
    \ i\n    for ((i=1; i<=n; i++)); do\n        collisions=$((collisions + i))\n\
    \    done\n    echo $collisions", "  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n \
    \     if [[ $i -ne $j ]]; then\n        collisions=$((collisions + 1))\n     \
    \ fi\n    done\n  done\n  echo $collisions", "    local n=$1\n    local i\n  \
    \  local j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            if ((i<j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions", "  local n=$1\n\
    \  local i=0\n  local j=0\n  local collisions=0\n  while [ $i -lt $n ]; do\n \
    \   j=$i\n    while [ $j -lt $n ]; do\n      if [ $i -ne $j ]; then\n        collisions=$((collisions\
    \ + 1))\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo\
    \ $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if ((i < j)); then\n                collisions=$((collisions + 1))\n      \
    \      fi\n        done\n    done\n    echo $collisions", "    local n=$1\n  \
    \  local i=0\n    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++));\
    \ do\n        for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n    \
    \            collisions=$((collisions + 1))\n            fi\n        done\n  \
    \  done\n    echo $collisions", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n\
    \    else\n        echo $(( $1 - 1 ))\n    fi", "    if [ $1 -lt 1 ]; then\n \
    \       echo \"Error: input must be a positive integer\"\n        return 1\n \
    \   fi\n    echo $1", "    # Write your solution here\n    #\n    # Hint: You\
    \ can use the following command to generate a random number between 0 and 1\n\
    \    # echo $((RANDOM%2))\n    #\n    # Hint: You can use the following command\
    \ to generate a random number between 0 and n\n    # echo $((RANDOM%n))\n    #\n\
    \    # Hint: You can use the following command to generate a random number between\
    \ 1 and n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint: You can use the following\
    \ command to generate a random number between 1 and n\n    # echo $((RANDOM%n+1))\n\
    \    #\n    # Hint: You can use the following command to generate a random number\
    \ between 1 and n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint: You can use\
    \ the following command to generate a random number between 1 and n\n    # echo\
    \ $((RANDOM%n+1))\n    #\n    # Hint: You can use the following command to generate\
    \ a random number between 1 and n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint:\
    \ You can use the following command to generate a random number between 1 and\
    \ n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint: You can use the following\
    \ command to generate a random number between 1 and n\n    # echo $((RANDOM%n+1))\n\
    \    #\n    # Hint: You can use the following command to generate a random number\
    \ between 1 and n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint: You can use\
    \ the following command to generate a random number between 1 and n\n    # echo\
    \ $((RANDOM%n+1))\n    #\n    # Hint: You can use the following command to generate\
    \ a random number between 1 and n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint:\
    \ You can use the following command to generate a random number between 1 and\
    \ n\n    # echo $((RANDOM%n+1))\n    #\n    # Hint: You can use the following\
    \ command", "    # The number of collisions is the number of pairs of cars that\
    \ are\n    # moving in opposite directions.  The number of pairs of cars that\
    \ are\n    # moving in opposite directions is the number of ways to choose 2 cars\n\
    \    # from a set of $1 cars.  The number of ways to choose 2 cars from a set\n\
    \    # of $1 cars is $1 choose 2, which is $1!/(2!($1-2)!) = $1*($1-1)/2.\n  \
    \  echo $(( $1 * ($1 - 1) / 2 ))", "  if [[ $1 -eq 0 ]]; then\n    echo 0\n  else\n\
    \    echo $(( $1 - 1 ))\n  fi", "    if [[ $1 -lt 1 ]]; then\n        echo \"\
    Error: invalid input\"\n        return 1\n    fi\n    echo $(( $1 * ($1 - 1) /\
    \ 2 ))", "    local n=$1\n    local i=0\n    local j=0\n    local count=0\n  \
    \  while [ $i -lt $n ]; do\n        j=$i\n        while [ $j -lt $n ]; do\n  \
    \          count=$((count+1))\n            j=$((j+1))\n        done\n        i=$((i+1))\n\
    \    done\n    echo $count", "    local n=$1\n    local i\n    local j\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((collisions++))\n     \
    \       fi\n        done\n    done\n    echo $collisions", "    if [ $1 -lt 1\
    \ ]; then\n        echo \"Error: the number of cars must be a positive integer\"\
    \n        return 1\n    fi\n    echo $(( $1 * ($1 - 1) / 2 ))", "    if [[ $1\
    \ -lt 1 ]]; then\n        echo \"Error: invalid input\"\n        return 1\n  \
    \  fi\n    echo $(( $1 * ($1 - 1) / 2 ))", "    local n=$1\n    local i\n    local\
    \ j\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local collision=0\n    while [ $i -lt $n ];\
    \ do\n        j=$((n-1))\n        while [ $j -gt $i ]; do\n            collision=$((collision+1))\n\
    \            j=$((j-1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $collision", "    local n=$1\n    local i=0\n    local j=0\n    local count=0\n\
    \    while [ $i -lt $n ]; do\n        j=$((n-1))\n        while [ $j -gt $i ];\
    \ do\n            count=$((count+1))\n            j=$((j-1))\n        done\n \
    \       i=$((i+1))\n    done\n    echo $count", "    local n=$1\n    local i=0\n\
    \    local j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n      \
    \  for ((j=0; j<n; j++)); do\n            if ((i < j)); then\n               \
    \ ((collisions++))\n            fi\n        done\n    done\n    echo $collisions",
  "    local n=$1\n    local i\n    local j\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                collisions=$((collisions + 1))\n            fi\n     \
    \   done\n    done\n    echo $collisions", "    # Write your code here\n    echo\
    \ \"0\"", "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ]\n    do\n        j=$i\n        while [ $j -lt $n ]\n\
    \        do\n            collisions=$((collisions+1))\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collisions", "  local n=$1\n\
    \  local i=0\n  local j=0\n  local collisions=0\n  for ((i=0; i<n; i++)); do\n\
    \    for ((j=0; j<n; j++)); do\n      if ((i < j)); then\n        collisions=$((collisions\
    \ + 1))\n      fi\n    done\n  done\n  echo $collisions", "    local n=$1\n  \
    \  local i\n    local j\n    local k\n    local collisions=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            for ((k=0; k<n; k++));\
    \ do\n                if ((i < j && j < k)); then\n                    ((collisions++))\n\
    \                fi\n            done\n        done\n    done\n    echo $collisions",
  "    local n=$1\n    local i=0\n    local j=0\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((i < j));\
    \ then\n                ((collisions++))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    local n=$1\n    local i=0\n    local j=0\n    local\
    \ collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [ $i -eq $j ]; then\n                ((collisions++))\n \
    \           fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local i=0\n    local j=0\n    local count=0\n    while [ $i -lt $n ]; do\n\
    \        j=$i\n        while [ $j -lt $n ]; do\n            count=$((count+1))\n\
    \            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $count", "  local n=$1\n  local i=0\n  local j=0\n  local collisions=0\n  while\
    \ [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt $n ]; do\n      collisions=$((collisions\
    \ + 1))\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions"]
stop_tokens:
- "\n}"
