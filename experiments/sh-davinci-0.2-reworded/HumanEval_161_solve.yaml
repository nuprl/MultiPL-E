name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n\
  # >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is\
  \ a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["  local s=$1\n  local i=0\n  local len=${#s}\n  local res=\"\"\n  local\
    \ c=\"\"\n  local is_letter=0\n  local is_upper=0\n  local is_lower=0\n  local\
    \ is_digit=0\n  local is_special=0\n  local is_all_special=1\n  local is_all_digit=1\n\
    \  local is_all_upper=1\n  local is_all_lower=1\n  local is_all_letter=1\n  local\
    \ is_all_upper_or_lower=1\n  local is_all_upper_or_digit=1\n  local is_all_lower_or_digit=1\n\
    \  local is_all_upper_or_lower_or_digit=1\n  local is_all_upper_or_lower_or_special=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special=1\n  local is_all_upper_or_lower_or_digit_or_special_or_space=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab=1\n  local\
    \ is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline=1\n  local\
    \ is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab_or",
  "    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            result+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $result", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n   \
    \         else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\"\n\
    \    local u=\"\"\n    local n=\"\"\n    local p=\"\"\n    local t=\"\"\n    local\
    \ d=\"\"\n    local f=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\
    \"\n    local a=\"\"\n    local b=\"\"\n    local g=\"\"\n    local h=\"\"\n \
    \   local j=\"\"\n    local k=\"\"\n    local m=\"\"\n    local o=\"\"\n    local\
    \ q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local e=\"\"\n    local r=\"\
    \"\n    local i=\"\"\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n \
    \   local n=\"\"\n    local p=\"\"\n    local t=\"\"\n    local d=\"\"\n    local\
    \ f=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\
    \"\n    local b=\"\"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n \
    \   local k=\"\"\n    local m=\"\"\n    local o=\"\"\n    local q=\"\"\n    local\
    \ v=\"\"\n    local w=\"\"\n    local e=\"\"\n    local r=\"\"\n    local i=\"\
    \"\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n \
    \   local p=\"\"\n    local t=\"\"\n    local d=\"\"\n    local f=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\
    \"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n \
    \   local m=\"\"\n    local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local\
    \ w=\"\"\n    local e=\"\"\n    local r=\"\"\n    local i=\"\"\n    local c=\"\
    \"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n    local p=\"\"\n \
    \   local t=\"\"\n    local d=\"\"\n    local f=\"\"\n    local x=\"\"\n    local\
    \ y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\"\n    local g=\"\
    \"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local m=\"\"\n \
    \   local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ e=\"\"\n    local r=\"\"", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "  local s=$1\n\
    \  local r=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n    if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        r=$r$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n      else\n        r=$r$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n      fi\n    else\n      r=$r$c\n    fi\n  done\n  if [[ $r =~\
    \ [a-zA-Z] ]]; then\n    echo $r\n  else\n    echo $r | rev\n  fi", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=$1\n   \
    \ local res=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n  \
    \          if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \        let i++\n    done\n    echo $res", "    local s=\"$1\"\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    local c\n    while [ $i -lt $len ];\
    \ do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n           \
    \ if [[ $c =~ [a-z] ]]; then\n                c=$(echo \"$c\" | tr a-z A-Z)\n\
    \            else\n                c=$(echo \"$c\" | tr A-Z a-z)\n           \
    \ fi\n        fi\n        result=\"$result$c\"\n        i=$((i+1))\n    done\n\
    \    echo \"$result\"", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world\"\n\
    \    echo \"\"", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n   \
    \         else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1}\
    \ =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n\
    \        else\n            res+=${s:$i:1}\n        fi\n    done\n    echo $res\
    \ | rev", "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n\
    \    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    local\
    \ s=$1\n    local s_len=${#s}\n    local i=0\n    local res=\"\"\n    local c=\"\
    \"\n    local c_ascii=0\n    local c_ascii_new=0\n    local c_new=\"\"\n    while\
    \ [ $i -lt $s_len ]; do\n        c=${s:$i:1}\n        c_ascii=$(printf \"%d\"\
    \ \"'$c\")\n        if [ $c_ascii -ge 65 -a $c_ascii -le 90 ]; then\n        \
    \    c_ascii_new=$((c_ascii + 32))\n        elif [ $c_ascii -ge 97 -a $c_ascii\
    \ -le 122 ]; then\n            c_ascii_new=$((c_ascii - 32))\n        else\n \
    \           c_ascii_new=$c_ascii\n        fi\n        c_new=$(printf \\\\$(printf\
    \ '%03o' $c_ascii_new))\n        res=$res$c_new\n        i=$((i + 1))\n    done\n\
    \    echo $res", "    local s=$1\n    local i\n    local c\n    local r\n    local\
    \ is_letter=0\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n      \
    \  if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if [[ $c\
    \ =~ [a-z] ]]; then\n                r+=$(echo $c | tr '[a-z]' '[A-Z]')\n    \
    \        else\n                r+=$(echo $c | tr '[A-Z]' '[a-z]')\n          \
    \  fi\n        else\n            r+=$c\n        fi\n    done\n    if [ $is_letter\
    \ -eq 0 ]; then\n        echo $r | rev\n    else\n        echo $r\n    fi", " \
    \ local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n  local c\n\
    \  for ((i=0; i<len; i++)); do\n    c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]];\
    \ then\n      if [[ $c =~ [a-z] ]]; then\n        res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n      else\n        res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \      fi\n    else\n      res+=$c\n    fi\n  done\n  echo $res", "    if [[ $1\
    \ =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=$1\n   \
    \ local r=\"\"\n    local i=0\n    local c=\"\"\n    local n=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                n=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                n=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            n=$c\n        fi\n \
    \       r=\"$n$r\"\n    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=$1\n    local r=\"\"\n\
    \    local i\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1} =~ [a-zA-Z]\
    \ ]]; then\n            r+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n\
    \            r+=${s:$i:1}\n        fi\n    done\n    echo $r | rev", "    local\
    \ s=$1\n    local s_len=${#s}\n    local i=0\n    local result=\"\"\n    local\
    \ char=\"\"\n    local char_code=0\n    local char_code_min=65\n    local char_code_max=90\n\
    \    local char_code_diff=32\n    local char_code_new=0\n    local char_new=\"\
    \"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_letter_found=0\n    local is_upper_found=0\n    local is_lower_found=0\n\
    \    local is_upper_or_lower_found=0\n    local is_upper_or_lower_found_prev=0\n\
    \    local is_upper_or_lower_found_curr=0\n    local is_upper_or_lower_found_next=0\n\
    \    local is_upper_or_lower_found_prev_next=0\n    local is_upper_or_lower_found_curr_next=0\n\
    \    local is_upper_or_lower_found_prev_curr=0\n    local is_upper_or_lower_found_prev_curr_next=0\n\
    \    local is_upper_or_lower_found_prev_curr_next_prev=0\n    local is_upper_or_lower_found_prev_curr_next_curr=0\n\
    \    local is_upper_or_lower_found_prev_curr_next_next=0\n    local is_upper_or_lower_found_prev_curr_next_prev_curr=0\n\
    \    local is_upper_or_lower_found_prev_curr_next_prev_next=0\n    local is_upper_or_lower_found_prev_curr_next_curr_next=0\n\
    \    local is_upper_or_lower_found_prev_curr_next_prev_curr_next=0\n    local\
    \ is_upper_or_lower_found_prev_curr_next_prev_next_curr=0\n    local is_upper_or_lower_found_prev_curr_next_prev_curr_next_",
  "  local s=$1\n  local result=\"\"\n  for (( i=0; i<${#s}; i++ )); do\n    local\
    \ c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]];\
    \ then\n        result+=\"${c^^}\"\n      else\n        result+=\"${c,,}\"\n \
    \     fi\n    else\n      result+=\"$c\"\n    fi\n  done\n  echo \"$result\"",
  "  local str=$1\n  local result=\"\"\n  local i=0\n  local len=${#str}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n\
    \      if [[ $c =~ [a-z] ]]; then\n        result+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n      else\n        result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \      fi\n    else\n      result+=$c\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ $result", "    local str=$1\n    local new_str=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    for ((i=0; i<len; i++)); do\n        local char=${str:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                new_str+=$(echo $char | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                new_str+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            new_str+=$char\n        fi\n    done\n\
    \    echo $new_str", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n    local i=0\n    local\
    \ c=\"\"\n    local l=\"\"\n    local u=\"\"\n    for ((i=0; i<${#s}; i++)); do\n\
    \        c=${s:$i:1}\n        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n    \
    \    u=$(echo $c | tr '[:lower:]' '[:upper:]')\n        if [[ $c == $l ]]; then\n\
    \            res+=$u\n        else\n            res+=$l\n        fi\n    done\n\
    \    echo $res", "    local s=\"$1\"\n    local i=0\n    local j=${#s}\n    local\
    \ tmp=\"\"\n    local res=\"\"\n    while [ $i -lt $j ]; do\n        tmp=${s:$i:1}\n\
    \        if [[ $tmp =~ [a-zA-Z] ]]; then\n            if [[ $tmp =~ [a-z] ]];\
    \ then\n                tmp=${tmp^^}\n            else\n                tmp=${tmp,,}\n\
    \            fi\n        fi\n        res+=$tmp\n        ((i++))\n    done\n  \
    \  echo $res", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s};\
    \ i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo $c\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n            result+=$c\n\
    \        fi\n    done\n    echo $result", "    local str=$1\n    local result=\"\
    \"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n  \
    \      if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                result+=$(echo $char | tr '[:lower:]' '[:upper:]')\n \
    \           else\n                result+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            result+=$char\n        fi\n    done\n\
    \    echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=\"$1\"\n    local t=\"\"\n    local i=0\n    local c=\"\
    \"\n    local l=\"\"\n    local u=\"\"\n    local r=\"\"\n    local n=\"\"\n \
    \   local r=\"\"\n    local len=\"${#s}\"\n    for ((i=0; i<len; i++)); do\n \
    \       c=\"${s:$i:1}\"\n        l=\"$(echo \"$c\" | tr '[:upper:]' '[:lower:]')\"\
    \n        u=\"$(echo \"$c\" | tr '[:lower:]' '[:upper:]')\"\n        if [[ \"\
    $c\" == \"$l\" ]]; then\n            r=\"$r$u\"\n        elif [[ \"$c\" == \"\
    $u\" ]]; then\n            r=\"$r$l\"\n        else\n            r=\"$r$c\"\n\
    \        fi\n    done\n    echo \"$r\"", "  local s=$1\n  local i=0\n  local c\n\
    \  local r=\"\"\n  local l\n  local u\n  local n\n  for ((i=0; i<${#s}; i++));\
    \ do\n    c=${s:$i:1}\n    l=$(echo $c | tr '[:upper:]' '[:lower:]')\n    u=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n    n=$(echo $c | grep -E \"[0-9]\")\n   \
    \ if [[ $c == $l ]]; then\n      r=$r$u\n    elif [[ $c == $u ]]; then\n     \
    \ r=$r$l\n    elif [[ $n ]]; then\n      r=$r$c\n    else\n      r=$r$c\n    fi\n\
    \  done\n  echo $r", "    # write your code here\n    echo \"$1\"", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", " \
    \   if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "\t\
    if [[ $1 =~ [a-zA-Z] ]]; then\n\t\techo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n\telse\n\t\techo $1 | rev\n\tfi", "    local str=$1\n    local\
    \ result=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1}\
    \ =~ [a-zA-Z] ]]; then\n            if [[ ${str:$i:1} =~ [a-z] ]]; then\n    \
    \            result+=${str:$i:1^^}\n            else\n                result+=${str:$i:1,,}\n\
    \            fi\n        else\n            result+=${str:$i:1}\n        fi\n \
    \   done\n    echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local result=\"\"\n    local\
    \ i=0\n    local len=${#s}\n    for ((i=0; i<len; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=${c^^}\n            else\n                c=${c,,}\n      \
    \      fi\n        fi\n        result=\"$c$result\"\n    done\n    echo $result",
  "    local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n   \
    \ while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $result", " \
    \   local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n  \
    \  while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n\
    \            else\n                c=${c,,}\n            fi\n        fi\n    \
    \    result=$result$c\n        i=$((i+1))\n    done\n    echo $result", "  if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi", "  if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n  else\n    echo $1 | rev\n  fi", "    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo $1 | tr '[a-zA-Z]' '[A-Za-z]'\n    else\n        echo $1\
    \ | rev\n    fi", "    local str=$1\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n  \
    \      if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=${c^^}\n            else\n                res+=${c,,}\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=$1\n    local res=\"\"\n    local c=\"\
    \"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n      \
    \  c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=\"$1\"\n    local res=\"\"\n    local\
    \ i=0\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local len=${#s}\n\
    \    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n        l=$(echo $c | tr\
    \ '[:upper:]' '[:lower:]')\n        u=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \        if [ \"$c\" = \"$l\" ]; then\n            res+=\"$u\"\n        elif [\
    \ \"$c\" = \"$u\" ]; then\n            res+=\"$l\"\n        else\n           \
    \ res+=\"$c\"\n        fi\n        i=$((i+1))\n    done\n    echo \"$res\"", " \
    \   local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n \
    \   while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res=$res$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res=$res$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res=$res$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    # write\
    \ your code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | rev", "    local\
    \ s=$1\n    local r=\"\"\n    local i=0\n    local l=${#s}\n    while [ $i -lt\
    \ $l ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                r=$r${c^^}\n        \
    \    else\n                r=$r${c,,}\n            fi\n        else\n        \
    \    r=$r$c\n        fi\n        i=$((i+1))\n    done\n    echo $r", "    local\
    \ string=$1\n    local result=\"\"\n    for (( i=0; i<${#string}; i++ )); do\n\
    \        local char=${string:$i:1}\n        if [[ $char =~ [a-zA-Z] ]]; then\n\
    \            if [[ $char =~ [a-z] ]]; then\n                result+=$(echo $char\
    \ | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n        \
    \    result+=$char\n        fi\n    done\n    echo $result", "    # write your\
    \ code here\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    # write your code here\n    # you can use echo to print the result\n    # you\
    \ can use read to get the input\n    # you can use $1 to get the first argument\n\
    \    # you can use $2 to get the second argument\n    # you can use $# to get\
    \ the number of arguments\n    # you can use $@ to get all the arguments\n   \
    \ # you can use $? to get the exit code of the last command\n    # you can use\
    \ $! to get the pid of the last command\n    # you can use $$ to get the pid of\
    \ the current script\n    # you can use $0 to get the name of the current script\n\
    \    # you can use $LINENO to get the current line number\n    # you can use $FUNCNAME\
    \ to get the name of the current function\n    # you can use $SECONDS to get the\
    \ number of seconds since the script started\n    # you can use $RANDOM to get\
    \ a random number\n    # you can use $RANDOM to get a random number\n    # you\
    \ can use $RANDOM to get a random number\n    # you can use $RANDOM to get a random\
    \ number\n    # you can use $RANDOM to get a random number\n    # you can use\
    \ $RANDOM to get a random number\n    # you can use $RANDOM to get a random number\n\
    \    # you can use $RANDOM to get a random number\n    # you can use $RANDOM to\
    \ get a random number\n    # you can use $RANDOM to get a random number\n    #\
    \ you can use $RANDOM to get a random number\n    # you can use $RANDOM to get\
    \ a random number\n    # you can use $RANDOM to get a random number\n    # you\
    \ can use $RANDOM to get a random number\n    # you can use $RANDOM to get a random\
    \ number\n    # you can use $RANDOM to get a random number\n    # you can use\
    \ $RANDOM to get a random number\n    # you can use $RANDOM to get a random number\n\
    \    # you can use $RANDOM to get a random number\n    # you can use $RANDOM to\
    \ get a random number\n    # you can use $RANDOM to get", "    # write your code\
    \ here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  #\
    \ write your code here\n  echo \"$1\"", "  local s=$1\n  local r=\"\"\n  for ((i=0;\
    \ i<${#s}; i++)); do\n    if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n      r+=${s:$i:1}\
    \ | tr '[:upper:]' '[:lower:]'\n    else\n      r+=${s:$i:1}\n    fi\n  done\n\
    \  echo $r | rev", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo $1 | rev\n  fi",
  "    local s=$1\n    local i=0\n    local res=\"\"\n    while [ $i -lt ${#s} ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $res", "    local s=$1\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n      \
    \  local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            result+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $result", "    local str=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#str}; i++)); do\n        if [[ \"${str:$i:1}\" =~ [a-zA-Z] ]]; then\n \
    \           res+=\"${str:$i:1}\" | tr '[:upper:]' '[:lower:]'\n        else\n\
    \            res+=\"${str:$i:1}\"\n        fi\n    done\n    echo $res", "   \
    \ local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $result", " \
    \   local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n      \
    \  local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                res+=${c^^}\n            else\n      \
    \          res+=${c,,}\n            fi\n        else\n            res+=$c\n  \
    \      fi\n    done\n    echo $res", "    local string=$1\n    local result=\"\
    \"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=${string:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                result+=$(echo $char | tr '[:lower:]' '[:upper:]')\n \
    \           else\n                result+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            result+=$char\n        fi\n    done\n\
    \    echo $result", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi",
  "    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            result+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $result", "  local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n      if [[ $char =~ [a-z] ]]; then\n        res+=$(echo $char | tr\
    \ '[:lower:]' '[:upper:]')\n      else\n        res+=$(echo $char | tr '[:upper:]'\
    \ '[:lower:]')\n      fi\n    else\n      res+=$char\n    fi\n    i=$((i+1))\n\
    \  done\n  echo $res", '    # write your code here', "    local str=$1\n    local\
    \ res=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n\
    \        local c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n        \
    \    if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $res", "    local str=\"$1\"\n    local\
    \ len=${#str}\n    local i=0\n    local res=\"\"\n    local c=\"\"\n    while\
    \ [ $i -lt $len ]; do\n        c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]];\
    \ then\n            if [[ $c =~ [a-z] ]]; then\n                res=$res$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res=$res$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res=$res$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr [a-zA-Z] [A-Za-z]\n    else\n\
    \        echo $1 | rev\n    fi", "    local str=$1\n    local res=\"\"\n    local\
    \ i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n        local ch=${str:$i:1}\n\
    \        if [[ $ch =~ [a-zA-Z] ]]; then\n            if [[ $ch =~ [a-z] ]]; then\n\
    \                res+=$(echo $ch | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $ch | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$ch\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    local s=$1\n    local i=0\n    local len=${#s}\n    local\
    \ res=\"\"\n    local c=\"\"\n    local isLetter=0\n    local isUpper=0\n    local\
    \ isLower=0\n    local isDigit=0\n    local isSymbol=0\n    local isLowerCase=0\n\
    \    local isUpperCase=0\n    local isDigitCase=0\n    local isSymbolCase=0\n\
    \    local isLetterCase=0\n    local isAllLetter=0\n    local isAllLower=0\n \
    \   local isAllUpper=0\n    local isAllDigit=0\n    local isAllSymbol=0\n    local\
    \ isAllLowerCase=0\n    local isAllUpperCase=0\n    local isAllDigitCase=0\n \
    \   local isAllSymbolCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local isAllLetterCase=0\n    local isAllLetterCase=0\n    local isAllLetterCase=0\n\
    \    local", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s};\
    \ i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ a-z A-Z)\n            else\n                result+=$(echo $c | tr A-Z a-z)\n\
    \            fi\n        else\n            result+=$c\n        fi\n    done\n\
    \    echo $result", "    local s=$1\n    local result=\"\"\n    local i=0\n  \
    \  local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n           \
    \ else\n                result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n    \
    \        fi\n        else\n            result+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo\
    \ \"$1\" | rev\n  fi", "    local str=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#str}\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local str=$1\n    local len=${#str}\n    local res=\"\"\n    local\
    \ i=0\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n       \
    \         c=${c^^}\n            else\n                c=${c,,}\n            fi\n\
    \        fi\n        res=\"$res$c\"\n        ((i++))\n    done\n    echo $res",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr a-z A-Z)\n            else\n                res+=$(echo $c | tr A-Z\
    \ a-z)\n            fi\n        else\n            res+=$c\n        fi\n      \
    \  i=$((i+1))\n    done\n    echo $res", "    local str=$1\n    local res=\"\"\
    \n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} =~ [a-zA-Z] ]];\
    \ then\n            res+=${str:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n\
    \            res+=${str:$i:1}\n        fi\n    done\n    echo $res | rev", " \
    \   if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n  \
    \  local ch\n    while [ $i -lt $len ]; do\n        ch=${str:$i:1}\n        if\
    \ [[ $ch =~ [a-zA-Z] ]]; then\n            if [[ $ch =~ [a-z] ]]; then\n     \
    \           res+=$(echo $ch | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $ch | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$ch\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ \"$1\" | rev\n    fi", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    echo $1 | tr -d '[:digit:]' | rev | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local s_len=${#s}\n    local\
    \ s_rev=''\n    local i=0\n    local c=''\n    local c_rev=''\n    local s_rev_len=0\n\
    \    local s_rev_i=0\n    local s_rev_c=''\n    local s_rev_c_rev=''\n    local\
    \ s_rev_c_rev_len=0\n    local s_rev_c_rev_i=0\n    local s_rev_c_rev_c=''\n \
    \   local s_rev_c_rev_c_rev=''\n    local s_rev_c_rev_c_rev_len=0\n    local s_rev_c_rev_c_rev_i=0\n\
    \    local s_rev_c_rev_c_rev_c=''\n    local s_rev_c_rev_c_rev_c_rev=''\n    local\
    \ s_rev_c_rev_c_rev_c_rev_len=0\n    local s_rev_c_rev_c_rev_c_rev_i=0\n    local\
    \ s_rev_c_rev_c_rev_c_rev_c=''\n    local s_rev_c_rev_c_rev_c_rev_c_rev=''\n \
    \   local s_rev_c_rev_c_rev_c_rev_c_rev_len=0\n    local s_rev_c_rev_c_rev_c_rev_c_rev_i=0\n\
    \    local s_rev_c_rev_c_rev_c_rev_c_rev_c=''\n    local s_rev_c_rev_c_rev_c_rev_c_rev_c_rev=''\n\
    \    local s_rev_c_rev_c_rev_c_rev_c_rev_c_rev_len=0\n    local s_rev_c_rev_c_rev_c_rev_c_rev_c_rev_i=0\n\
    \    local s_rev_c_rev_c_rev_c_rev_c_rev_c_rev_c=''\n    local s_rev_", "    local\
    \ s=$1\n    local res=\"\"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n \
    \       local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n           \
    \ if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n   \
    \             c=${c,,}\n            fi\n        fi\n        res+=$c\n    done\n\
    \    echo $res", "    local str=$1\n    local res=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ \"${str:$i:1}\" =~ [a-zA-Z] ]]; then\n            res+=${str:$i:1}\
    \ | tr '[:upper:]' '[:lower:]'\n        else\n            res+=${str:$i:1}\n \
    \       fi\n    done\n    echo $res | rev", "    local str=$1\n    local res=\"\
    \"\n    local char=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                res+=$(echo $char | tr '[:lower:]' '[:upper:]')\n    \
    \        else\n                res+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$char\n        fi\n    done\n\
    \    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ \"$1\" | rev\n    fi", "    local str=$1\n    local result=\"\"\n    for ((\
    \ i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n        if [[ $char\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]]; then\n          \
    \      char=${char^^}\n            else\n                char=${char,,}\n    \
    \        fi\n        fi\n        result=$char$result\n    done\n    echo $result",
  "    local s=$1\n    local i=0\n    local len=${#s}\n    local res=\"\"\n    local\
    \ c=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_special=0\n    local is_reversed=0\n    local\
    \ is_empty=0\n    local is_all_letters=0\n    local is_all_digits=0\n    local\
    \ is_all_special=0\n    local is_all_upper=0\n    local is_all_lower=0\n    local\
    \ is_all_upper_or_lower=0\n    local is_all_upper_or_lower_or_special=0\n    local\
    \ is_all_upper_or_lower_or_digit=0\n    local is_all_upper_or_lower_or_digit_or_special=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty=0\n    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed_or_all_letters=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed_or_all_letters_or_all_digits=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed_or_all_letters_or_all_digits_or_all_special=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed_or_all_letters_or_all_digits_or_all_special_or_all_upper=0\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_reversed_or_all_letters_or_all_digits_or_all_special_or",
  "  local s=$1\n  local res=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ res+=\"${c^^}\"\n      else\n        res+=\"${c,,}\"\n      fi\n    else\n \
    \     res+=\"$c\"\n    fi\n  done\n  echo \"$res\"", "    local s=$1\n    local\
    \ i=0\n    local j=${#s}\n    local t\n    while ((i < j)); do\n        if [[\
    \ ${s:i:1} =~ [a-zA-Z] ]]; then\n            t=${s:i:1}\n            if [[ $t\
    \ =~ [a-z] ]]; then\n                t=${t^^}\n            else\n            \
    \    t=${t,,}\n            fi\n            s=${s:0:i}$t${s:i+1}\n        fi\n\
    \        ((i++))\n    done\n    echo $s", "    local s=$1\n    local result=\"\
    \"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                result+=\"${c^^}\"\n            else\n                result+=\"\
    ${c,,}\"\n            fi\n        else\n            result+=\"$c\"\n        fi\n\
    \    done\n    echo \"$result\"", "    local s=$1\n    local s_len=${#s}\n   \
    \ local i=0\n    local res=\"\"\n    local c=\"\"\n    local c_ascii=\"\"\n  \
    \  local c_ascii_new=\"\"\n    local c_new=\"\"\n    if [[ $s_len -eq 0 ]]; then\n\
    \        echo \"\"\n        return 0\n    fi\n    while [[ $i -lt $s_len ]]; do\n\
    \        c=${s:$i:1}\n        c_ascii=$(printf \"%d\" \"'$c\")\n        if [[\
    \ $c_ascii -ge 65 && $c_ascii -le 90 ]]; then\n            c_ascii_new=$((c_ascii\
    \ + 32))\n        elif [[ $c_ascii -ge 97 && $c_ascii -le 122 ]]; then\n     \
    \       c_ascii_new=$((c_ascii - 32))\n        else\n            c_ascii_new=$c_ascii\n\
    \        fi\n        c_new=$(printf \\\\$(printf '%03o' $c_ascii_new))\n     \
    \   res=$res$c_new\n        i=$((i + 1))\n    done\n    echo $res", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[a-zA-Z]' '[A-Za-z]'\n    else\n\
    \        echo $1 | rev\n    fi", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo \"$1\" | rev\n    fi", "    local s=$1\n    local i=0\n    local\
    \ l=${#s}\n    local t=\"\"\n    local c=\"\"\n    local r=\"\"\n    for ((i=0;\
    \ i<l; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            t=$(echo $c | tr '[:lower:]' '[:upper:]')\n            if [[ $c =\
    \ $t ]]; then\n                r=$r$(echo $c | tr '[:upper:]' '[:lower:]')\n \
    \           else\n                r=$r$t\n            fi\n        else\n     \
    \       r=$r$c\n        fi\n    done\n    echo $r", "    local s=$1\n    local\
    \ result=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n\
    \                c=${c,,}\n            fi\n        fi\n        result=\"$result$c\"\
    \n        i=$((i+1))\n    done\n    echo $result", "  local s=$1\n  local result=\"\
    \"\n  for (( i=0; i<${#s}; i++ )); do\n    if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n\
    \      result+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n    else\n      result+=${s:$i:1}\n\
    \    fi\n  done\n  echo $result | rev", "    if [[ $1 =~ [a-zA-Z] ]]; then\n \
    \       echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    local str=$1\n    local res=\"\
    \"\n    for ((i=0; i<${#str}; i++)); do\n        local char=${str:$i:1}\n    \
    \    if [[ $char =~ [a-zA-Z] ]]; then\n            res+=$(echo $char | tr '[:lower:]'\
    \ '[:upper:]')\n        else\n            res+=$char\n        fi\n    done\n \
    \   echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=$1\n    local res=\"\"\n    local i=0\n    local c=\"\"\
    \n    local l=\"\"\n    local u=\"\"\n    while [ $i -lt ${#s} ]; do\n       \
    \ c=${s:$i:1}\n        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n        u=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n        if [ \"$c\" == \"$l\" ]; then\n  \
    \          res+=$u\n        else\n            res+=$l\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local i=0\n    local len=${#s}\n    local res=\"\"\n    while [ $i\
    \ -lt $len ]; do\n        if [[ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n         \
    \   if [[ \"${s:$i:1}\" =~ [a-z] ]]; then\n                res+=\"${s:$i:1^^}\"\
    \n            else\n                res+=\"${s:$i:1,,}\"\n            fi\n   \
    \     else\n            res+=\"${s:$i:1}\"\n        fi\n        i=$((i+1))\n \
    \   done\n    echo $res", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n         \
    \   res+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n            res+=${s:$i:1}\n\
    \        fi\n    done\n    echo $res | rev", "    local s=$1\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    local c=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_other=0\n\
    \    local is_all_other=1\n    local is_all_digit=1\n    local is_all_letter=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_upper_or_digit=1\n    local is_all_lower_or_digit=1\n    local\
    \ is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_other=1\n\
    \    local is_all_upper_or_lower_or_digit_or_other=1\n    local is_all_upper_or_lower_or_digit_or_other_or_space=1\n\
    \    local is_all_upper_or_lower_or_digit_or_other_or_space_or_tab=1\n    local\
    \ is_all_upper_or_lower_or_digit_or_other_or_space_or_tab_or_newline=1\n    local\
    \ is_all_upper_or_lower_or_digit_or_other_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_digit_or_other_or_space_or_tab_or_newline_or_carriage_return_or_form_feed=1\n\
    \    local is_all_upper_or_lower_or_digit_or_other_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab=1\n\
    \    local is_all_upper_or_lower_or_digit_or_other_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab_or",
  "    local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n   \
    \ while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $result", " \
    \   local str=$1\n    local result=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n\
    \        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z] ]]; then\n  \
    \          if [[ $char =~ [a-z] ]]; then\n                result+=${char^^}\n\
    \            else\n                result+=${char,,}\n            fi\n       \
    \ else\n            result+=$char\n        fi\n    done\n    echo $result", " \
    \   # Write your code here\n    # To print results to the standard output you\
    \ can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"",
  "    local str=$1\n    local len=${#str}\n    local i=0\n    local res=\"\"\n  \
    \  while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    local\
    \ s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++ )); do\n        local\
    \ c=${s:$i:1}\n        if [[ \"$c\" =~ [a-zA-Z] ]]; then\n            if [[ \"\
    $c\" =~ [a-z] ]]; then\n                result+=\"${c^^}\"\n            else\n\
    \                result+=\"${c,,}\"\n            fi\n        else\n          \
    \  result+=\"$c\"\n        fi\n    done\n    echo \"$result\"", "    local s=$1\n\
    \    local r=\"\"\n    local i=0\n    local l=${#s}\n    while [ $i -lt $l ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                r=$r$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                r=$r$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            r=$r$c\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $r", "  local s=$1\n  local result=\"\"\
    \n  for (( i=0; i<${#s}; i++ )); do\n    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        result+=\"${c^^}\"\n   \
    \   else\n        result+=\"${c,,}\"\n      fi\n    else\n      result+=\"$c\"\
    \n    fi\n  done\n  echo \"$result\"", "    local s=$1\n    local res=\"\"\n \
    \   local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    echo \"Hello world\"", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    if [[ $res =~ [a-zA-Z] ]]; then\n        echo $res\n    else\n        echo\
    \ $(echo $res | rev)\n    fi", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ -d '[:digit:]' | rev", "    local s=$1\n    local i\n    local c\n    local\
    \ res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n       \
    \         res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n   \
    \             res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            res+=$c\n        fi\n    done\n    echo $res", "   \
    \ if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n  \
    \  local char=\"\"\n    local char_code=\"\"\n    local char_code_new=\"\"\n \
    \   local char_new=\"\"\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n\
    \        char_code=$(printf \"%d\" \"'$char\")\n        if [ $char_code -ge 65\
    \ ] && [ $char_code -le 90 ]; then\n            char_code_new=$((char_code + 32))\n\
    \        elif [ $char_code -ge 97 ] && [ $char_code -le 122 ]; then\n        \
    \    char_code_new=$((char_code - 32))\n        else\n            char_code_new=$char_code\n\
    \        fi\n        char_new=$(printf \\\\$(printf '%03o' $char_code_new))\n\
    \        res=$res$char_new\n        i=$((i + 1))\n    done\n    echo $res", " \
    \   local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n \
    \   while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n\
    \            else\n                c=${c,,}\n            fi\n        fi\n    \
    \    res=$res$c\n        i=$((i+1))\n    done\n    echo $res", "    local s=$1\n\
    \    local res=\"\"\n    local i=0\n    local l=${#s}\n    while [ $i -lt $l ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $res", "    local s=$1\n    local r=\"\
    \"\n    local i=0\n    local l=${#s}\n    while [ $i -lt $l ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                r=$r$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                r=$r$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            r=$r$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $r", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n    echo $1 | rev\n  fi",
  "    local s=$1\n    local i=0\n    local l=${#s}\n    local res=\"\"\n    local\
    \ c=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_symbol=0\n    local is_space=0\n    local\
    \ is_empty=0\n    local is_other=0\n    local is_all_letter=1\n    local is_all_digit=1\n\
    \    local is_all_symbol=1\n    local is_all_space=1\n    local is_all_empty=1\n\
    \    local is_all_other=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_mixed=1\n    local is_all_mixed_upper=1\n    local is_all_mixed_lower=1\n\
    \    local is_all_mixed_digit=1\n    local is_all_mixed_symbol=1\n    local is_all_mixed_space=1\n\
    \    local is_all_mixed_empty=1\n    local is_all_mixed_other=1\n    local is_all_mixed_upper_digit=1\n\
    \    local is_all_mixed_upper_symbol=1\n    local is_all_mixed_upper_space=1\n\
    \    local is_all_mixed_upper_empty=1\n    local is_all_mixed_upper_other=1\n\
    \    local is_all_mixed_lower_digit=1\n    local is_all_mixed_lower_symbol=1\n\
    \    local is_all_mixed_lower_space=1\n    local is_all_mixed_lower_empty=1\n\
    \    local is_all_mixed_lower_other=1\n    local is_all_mixed_digit_symbol=1\n\
    \    local is_all_mixed_digit_space=1\n    local is_all_mixed_digit_empty=1\n\
    \    local is_all_mixed_digit_other=1\n    local is_all_mixed_symbol_space=1\n\
    \    local", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n  else\n    echo \"$1\" | rev\n  fi", "    local\
    \ str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n    while\
    \ [ $i -lt $len ]; do\n        local ch=${str:$i:1}\n        if [[ $ch =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $ch =~ [a-z] ]]; then\n                res+=${ch^^}\n\
    \            else\n                res+=${ch,,}\n            fi\n        else\n\
    \            res+=$ch\n        fi\n        i=$((i+1))\n    done\n    echo $res",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"", " \
    \   if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local r=\"\"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n\
    \        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n          \
    \  if [[ $c =~ [a-z] ]]; then\n                r+=${c^^}\n            else\n \
    \               r+=${c,,}\n            fi\n        else\n            r+=$c\n \
    \       fi\n    done\n    echo $r", "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n \
    \   echo \"$1\" | rev\n  fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n    done\n    echo $res", "    local s=$1\n    local i\n\
    \    local r=\"\"\n    for ((i=${#s}-1; i>=0; i--)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                r+=${c^^}\n            else\n                r+=${c,,}\n    \
    \        fi\n        else\n            r+=$c\n        fi\n    done\n    echo $r",
  "    local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n   \
    \ local c\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   c=${c^^}\n            else\n                c=${c,,}\n            fi\n   \
    \     fi\n        result=\"$result$c\"\n        i=$((i+1))\n    done\n    echo\
    \ $result", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++));\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n        \
    \    else\n                res+=\"${c,,}\"\n            fi\n        else\n   \
    \         res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local str=$1\n\
    \    local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        local ch=${str:$i:1}\n\
    \        if [[ $ch =~ [a-zA-Z] ]]; then\n            if [[ $ch =~ [a-z] ]]; then\n\
    \                res+=$(echo $ch | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $ch | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$ch\n        fi\n    done\n    echo $res", " \
    \   local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    local\
    \ c=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_special=0\n    local is_all_special=1\n  \
    \  local is_all_digit=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_letter=1\n    local is_all_upper_or_lower=1\n    local is_all_upper_or_digit=1\n\
    \    local is_all_lower_or_digit=1\n    local is_all_letter_or_digit=1\n    local\
    \ is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special=1\n    local is_all_letter_or_digit_or_special=1\n\
    \    local is_all_letter_or_special=1\n    local is_all_digit_or_special=1\n \
    \   local is_all_upper_or_special=1\n    local is_all_lower_or_special=1\n   \
    \ local is_all_upper_or_lower_or_special=1\n    local is_all_upper_or_digit_or_special=1\n\
    \    local is_all_lower_or_digit_or_special=1\n    local is_all_letter_or_digit_or_special=1\n\
    \    local is_all_letter_or_special=1\n    local is_all_digit_or_special=1\n \
    \   local is_all_upper_or_special=1\n    local is_all_lower_or_special=1\n   \
    \ local is_all_upper_or_lower_or_special=1\n    local is_all_upper_or_digit_or_special=1\n\
    \    local is_all_lower_or_digit_or_special=1\n    local is_all_letter_or_digit_or_special=1\n\
    \    local", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++));\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \    done\n    echo $res", "    local s=$1\n    local i=0\n    local len=${#s}\n\
    \    local res=\"\"\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  local s=$1\n  local i\n  local c\n  local r\n  local t\n  local u\n  local l\n\
    \  local n\n  local m\n\n  n=${#s}\n  m=$((n - 1))\n  r=''\n  for ((i = 0; i <\
    \ n; i++)); do\n    c=${s:i:1}\n    u=${c^^}\n    l=${c,,}\n    if [[ $c == $u\
    \ ]]; then\n      t=$l\n    elif [[ $c == $l ]]; then\n      t=$u\n    else\n\
    \      t=$c\n    fi\n    r=\"$t$r\"\n  done\n  echo $r", "    local s=$1\n   \
    \ local res=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n  \
    \          if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n\
    \                c=${c,,}\n            fi\n        fi\n        res+=$c\n     \
    \   i=$((i+1))\n    done\n    echo $res", "    local s=$1\n    local res=\"\"\n\
    \    local i=0\n    local len=${#s}\n    local c\n    while [ $i -lt $len ]; do\n\
    \        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo \"$1\" | rev\n    fi", "    local s=$1\n    local res=\"\"\n    local\
    \ i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "  local str=$1\n  local res=\"\"\n  local i\n  for ((i=0; i<${#str};\
    \ i++)); do\n    local c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $c =~ [a-z] ]]; then\n        res+=\"${c^^}\"\n      else\n        res+=\"\
    ${c,,}\"\n      fi\n    else\n      res+=\"$c\"\n    fi\n  done\n  echo \"$res\"",
  "    local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n   \
    \ while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr a-z A-Z)\n            else\n                result+=$(echo $c | tr A-Z\
    \ a-z)\n            fi\n        else\n            result+=$c\n        fi\n   \
    \     i=$((i+1))\n    done\n    echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n\
    \    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   res+=$(echo $c | tr [a-z] [A-Z])\n            else\n                res+=$(echo\
    \ $c | tr [A-Z] [a-z])\n            fi\n        else\n            res+=$c\n  \
    \      fi\n    done\n    echo $res", "    local str=$1\n    local res=\"\"\n \
    \   local i=0\n    local len=${#str}\n    local c=\"\"\n    while [ $i -lt $len\
    \ ]; do\n        c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n      \
    \      if [[ $c =~ [a-z] ]]; then\n                res=$res$(echo $c | tr a-z\
    \ A-Z)\n            else\n                res=$res$(echo $c | tr A-Z a-z)\n  \
    \          fi\n        else\n            res=$res$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=$1\n    local s_len=${#s}\n    local i=0\n\
    \    local res=\"\"\n    local c=\"\"\n    local c_ascii=\"\"\n    local c_ascii_new=\"\
    \"\n    local c_new=\"\"\n    if [[ $s_len -eq 0 ]]; then\n        echo \"\"\n\
    \        return\n    fi\n    while [[ $i -lt $s_len ]]; do\n        c=${s:$i:1}\n\
    \        c_ascii=$(printf \"%d\" \"'$c\")\n        if [[ $c_ascii -ge 65 && $c_ascii\
    \ -le 90 ]]; then\n            c_ascii_new=$((c_ascii + 32))\n        elif [[\
    \ $c_ascii -ge 97 && $c_ascii -le 122 ]]; then\n            c_ascii_new=$((c_ascii\
    \ - 32))\n        else\n            c_ascii_new=$c_ascii\n        fi\n       \
    \ c_new=$(printf \\\\$(printf '%03o' $c_ascii_new))\n        res=$res$c_new\n\
    \        i=$((i + 1))\n    done\n    echo $res", "    local str=$1\n    local\
    \ i=0\n    local len=${#str}\n    local res=\"\"\n    while [ $i -lt $len ]; do\n\
    \        if [[ ${str:$i:1} =~ [a-zA-Z] ]]; then\n            res+=${str:$i:1}\
    \ | tr '[:upper:]' '[:lower:]'\n        else\n            res+=${str:$i:1}\n \
    \       fi\n        ((i++))\n    done\n    echo $res | rev", "  local str=$1\n\
    \  local res=\"\"\n  local i=0\n  local len=${#str}\n  while [ $i -lt $len ];\
    \ do\n    local ch=${str:$i:1}\n    if [[ $ch =~ [a-zA-Z] ]]; then\n      if [[\
    \ $ch =~ [a-z] ]]; then\n        res=$res$(echo $ch | tr '[:lower:]' '[:upper:]')\n\
    \      else\n        res=$res$(echo $ch | tr '[:upper:]' '[:lower:]')\n      fi\n\
    \    else\n      res=$res$ch\n    fi\n    i=$((i+1))\n  done\n  echo $res", " \
    \ local str=$1\n  local len=${#str}\n  local i=0\n  local res=\"\"\n  local chr=\"\
    \"\n  local chr_code=0\n  local chr_code_new=0\n  local chr_new=\"\"\n  local\
    \ is_letter=0\n  while [ $i -lt $len ]; do\n    chr=${str:$i:1}\n    chr_code=$(printf\
    \ \"%d\" \"'$chr\")\n    if [ $chr_code -ge 65 -a $chr_code -le 90 ]; then\n \
    \     chr_code_new=$((chr_code + 32))\n      chr_new=$(printf \"\\x$(printf %x\
    \ $chr_code_new)\")\n      is_letter=1\n    elif [ $chr_code -ge 97 -a $chr_code\
    \ -le 122 ]; then\n      chr_code_new=$((chr_code - 32))\n      chr_new=$(printf\
    \ \"\\x$(printf %x $chr_code_new)\")\n      is_letter=1\n    else\n      chr_new=$chr\n\
    \    fi\n    res=$res$chr_new\n    i=$((i + 1))\n  done\n  if [ $is_letter -eq\
    \ 0 ]; then\n    res=$(echo $res | rev)\n  fi\n  echo $res", "    local s=$1\n\
    \    local i=0\n    local l=${#s}\n    local t=\"\"\n    while [ $i -lt $l ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                t+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                t+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            t+=$c\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $t", "    # write your code here\n   \
    \ echo \"$1\"", "    local str=$1\n    local res=\"\"\n    for ((i=0; i<${#str};\
    \ i++)); do\n        if [[ ${str:$i:1} =~ [a-zA-Z] ]]; then\n            if [[\
    \ ${str:$i:1} =~ [a-z] ]]; then\n                res+=${str:$i:1^^}\n        \
    \    else\n                res+=${str:$i:1,,}\n            fi\n        else\n\
    \            res+=${str:$i:1}\n        fi\n    done\n    echo $res", "    echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | rev", "    local str=$1\n\
    \    local result=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n\
    \        if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]];\
    \ then\n                result+=$(echo $char | tr '[:lower:]' '[:upper:]')\n \
    \           else\n                result+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            result+=$char\n        fi\n    done\n\
    \    echo $result", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s};\
    \ i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n          \
    \  else\n                c=${c,,}\n            fi\n        fi\n        result=$c$result\n\
    \    done\n    echo $result", "    local s=$1\n    local result=\"\"\n    local\
    \ i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                c=${c^^}\n            else\n                c=${c,,}\n      \
    \      fi\n        fi\n        result=$result$c\n        i=$((i+1))\n    done\n\
    \    echo $result", "    local str=$1\n    local res=\"\"\n    local i=0\n   \
    \ local len=${#str}\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "  local str=$1\n  local result=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local char=${str:$i:1}\n    if [[ $char =~ [a-zA-Z] ]]; then\n\
    \      if [[ $char =~ [a-z] ]]; then\n        result+=$(echo $char | tr '[:lower:]'\
    \ '[:upper:]')\n      else\n        result+=$(echo $char | tr '[:upper:]' '[:lower:]')\n\
    \      fi\n    else\n      result+=$char\n    fi\n  done\n  echo $result", " \
    \   if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local i=0\n    local len=${#s}\n    local res=\"\"\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    local\
    \ str=$1\n    local len=${#str}\n    local i=0\n    local res=\"\"\n    while\
    \ [ $i -lt $len ]; do\n        local ch=${str:$i:1}\n        if [[ $ch =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $ch =~ [a-z] ]]; then\n                res=$res$(echo\
    \ $ch | tr '[:lower:]' '[:upper:]')\n            else\n                res=$res$(echo\
    \ $ch | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n          \
    \  res=$res$ch\n        fi\n        i=$((i+1))\n    done\n    echo $res", "  \
    \  local s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\
    \"\n    local u=\"\"\n    local n=\"\"\n    local t=\"\"\n    local p=\"\"\n \
    \   local a=\"\"\n    local b=\"\"\n    local d=\"\"\n    local e=\"\"\n    local\
    \ f=\"\"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\
    \"\n    local m=\"\"\n    local o=\"\"\n    local q=\"\"\n    local r=\"\"\n \
    \   local v=\"\"\n    local w=\"\"\n    local x=\"\"\n    local y=\"\"\n    local\
    \ z=\"\"\n    local A=\"\"\n    local B=\"\"\n    local C=\"\"\n    local D=\"\
    \"\n    local E=\"\"\n    local F=\"\"\n    local G=\"\"\n    local H=\"\"\n \
    \   local J=\"\"\n    local K=\"\"\n    local M=\"\"\n    local O=\"\"\n    local\
    \ Q=\"\"\n    local R=\"\"\n    local V=\"\"\n    local W=\"\"\n    local X=\"\
    \"\n    local Y=\"\"\n    local Z=\"\"\n    local _=\"\"\n    local -i len=${#s}\n\
    \    for ((i=0; i<len; i++)); do\n        c=${s:i:1}\n        l=${c,,}\n     \
    \   u=${c^^}\n        n=$(printf \"%d\" \"'$c\")\n        t=$(printf \"%d\" \"\
    '$l\")\n        p=$(printf \"%d\" \"'$u\")\n        a=$(printf \"%d\" \"'a\")\n\
    \        b=$(printf \"%d\" \"'b\")\n        d=$(printf \"%d\" \"'d\")\n      \
    \  e=$(printf \"%d\" \"'e\")\n        f=$(printf \"%d\" \"'f\")\n        g=$(printf\
    \ \"%d\" \"'g\")\n        h=$(printf \"%d\" \"'h\")\n        j=$(printf \"%d\"\
    \ \"'j\")\n        k=$(printf \"%d\" \"'k\")\n        m=$(printf \"%d\" \"'m\"\
    )\n        o=$(printf \"%d\" \"'o\")\n        q=$(printf \"%d\" \"'q\")\n    \
    \    r=$(printf \"%d\" \"'r\")\n        v=$(printf \"%d\" \"'v\")\n        w=$(printf\
    \ \"%d\" \"'w\")\n       ", "    local s=$1\n    local r=\"\"\n    local i=0\n\
    \    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n    local\
    \ t=\"\"\n    local d=\"\"\n    local p=\"\"\n    local f=\"\"\n    local g=\"\
    \"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local m=\"\"\n \
    \   local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local A=\"\"\n    local B=\"\
    \"\n    local C=\"\"\n    local D=\"\"\n    local E=\"\"\n    local F=\"\"\n \
    \   local G=\"\"\n    local H=\"\"\n    local I=\"\"\n    local J=\"\"\n    local\
    \ K=\"\"\n    local L=\"\"\n    local M=\"\"\n    local N=\"\"\n    local O=\"\
    \"\n    local P=\"\"\n    local Q=\"\"\n    local R=\"\"\n    local S=\"\"\n \
    \   local T=\"\"\n    local U=\"\"\n    local V=\"\"\n    local W=\"\"\n    local\
    \ X=\"\"\n    local Y=\"\"\n    local Z=\"\"\n    local _=\"\"\n    local a=\"\
    \"\n    local b=\"\"\n    local c=\"\"\n    local d=\"\"\n    local e=\"\"\n \
    \   local f=\"\"\n    local g=\"\"\n    local h=\"\"\n    local i=\"\"\n    local\
    \ j=\"\"\n    local k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\
    \"\n    local o=\"\"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n \
    \   local s=\"\"\n    local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local\
    \ w=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local A=\"\
    \"\n    local B=\"\"\n    local C=\"\"\n    local D=\"\"\n    local E=\"\"\n \
    \   local F=\"\"\n    local G=\"\"\n    local H=\"\"\n    local I=\"\"\n    local\
    \ J=\"\"\n    local K=\"\"\n    local L=\"\"\n    local M=\"\"\n    local N=\"\
    \"\n    local O=\"\"\n    local P=\"\"\n    local Q=\"\"\n    local R=\"\"\n \
    \   local S=\"\"\n    local T=\"\"\n    local U=\"\"\n    local V=\"\"\n    local\
    \ W=\"\"\n    local X=\"\"\n    local Y=\"\"\n    local Z=\"\"", "    local str=$1\n\
    \    local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1}\
    \ =~ [a-zA-Z] ]]; then\n            res+=${str:$i:1} | tr '[:upper:]' '[:lower:]'\n\
    \        else\n            res+=${str:$i:1}\n        fi\n    done\n    echo $res\
    \ | rev", "    local str=\"$1\"\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#str}\n    local c\n    while [[ $i -lt $len ]]; do\n        c=${str:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res=\"${res}$(echo $c | tr '[:lower:]' '[:upper:]')\"\n     \
    \       else\n                res=\"${res}$(echo $c | tr '[:upper:]' '[:lower:]')\"\
    \n            fi\n        else\n            res=\"${res}$c\"\n        fi\n   \
    \     i=$((i+1))\n    done\n    echo $res", "    local s=$1\n    local i\n   \
    \ local c\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr a-z A-Z)\n            else\n            \
    \    res+=$(echo $c | tr A-Z a-z)\n            fi\n        else\n            res+=$c\n\
    \        fi\n    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n  \
    \      echo \"$1\" | tr 'a-zA-Z' 'A-Za-z'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   res+=$(echo $c | tr [a-z] [A-Z])\n            else\n                res+=$(echo\
    \ $c | tr [A-Z] [a-z])\n            fi\n        else\n            res+=$c\n  \
    \      fi\n        i=$((i+1))\n    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local str=$1\n \
    \   local result=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt\
    \ $len ]; do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $char =~ [a-z] ]]; then\n                char=$(echo\
    \ $char | tr '[:lower:]' '[:upper:]')\n            else\n                char=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n            fi\n        fi\n        result=\"\
    $result$char\"\n        i=$((i+1))\n    done\n    echo $result", "    if [[ $1\
    \ =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo $1 | rev\n    fi", "    local str=\"$1\"\n    local len=${#str}\n\
    \    local i=0\n    local res=\"\"\n    local c=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_symbol=0\n\
    \    local is_space=0\n    local is_empty=0\n    local is_all_letter=1\n    local\
    \ is_all_digit=1\n    local is_all_symbol=1\n    local is_all_space=1\n    local\
    \ is_all_empty=1\n    local is_all_upper=1\n    local is_all_lower=1\n    local\
    \ is_all_upper_or_lower=1\n    local is_all_upper_or_lower_or_digit=1\n    local\
    \ is_all_upper_or_lower_or_digit_or_symbol=1\n    local is_all_upper_or_lower_or_digit_or_symbol_or_space=1\n\
    \    local is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty=1\n    local\
    \ is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty_or_letter=1\n   \
    \ local is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty_or_letter_or_lower=1\n\
    \    local is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty_or_letter_or_lower_or_upper=1\n\
    \    local is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty_or_letter_or_lower_or_upper_or_digit=1\n\
    \    local is_all_upper_or_lower_or_digit_or_symbol_or_space_or_empty_or_letter_or_lower_or_upper_or_digit_or_symbol=1\n\
    \    local is_all_upper_or_lower_or_digit_or_symbol_"]
stop_tokens:
- "\n}"
