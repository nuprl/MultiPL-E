name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n\
  # >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is\
  \ a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["  local s=$1\n  local i=0\n  local len=${#s}\n  local res=\"\"\n  local\
    \ c=\"\"\n  local is_letter=0\n  local is_upper=0\n  local is_lower=0\n  local\
    \ is_digit=0\n  local is_special=0\n  local is_all_special=1\n  local is_all_digit=1\n\
    \  local is_all_upper=1\n  local is_all_lower=1\n  local is_all_letter=1\n  local\
    \ is_all_upper_or_lower=1\n  local is_all_upper_or_digit=1\n  local is_all_lower_or_digit=1\n\
    \  local is_all_upper_or_lower_or_digit=1\n  local is_all_upper_or_lower_or_special=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special=1\n  local is_all_upper_or_lower_or_digit_or_special_or_space=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab=1\n  local\
    \ is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline=1\n  local\
    \ is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab=1\n\
    \  local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed_or_vertical_tab_or",
  "    local str=$1\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            result+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $result", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n   \
    \         else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\"\n\
    \    local u=\"\"\n    local n=\"\"\n    local p=\"\"\n    local t=\"\"\n    local\
    \ d=\"\"\n    local f=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\
    \"\n    local a=\"\"\n    local b=\"\"\n    local g=\"\"\n    local h=\"\"\n \
    \   local j=\"\"\n    local k=\"\"\n    local m=\"\"\n    local o=\"\"\n    local\
    \ q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local e=\"\"\n    local r=\"\
    \"\n    local i=\"\"\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n \
    \   local n=\"\"\n    local p=\"\"\n    local t=\"\"\n    local d=\"\"\n    local\
    \ f=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\
    \"\n    local b=\"\"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n \
    \   local k=\"\"\n    local m=\"\"\n    local o=\"\"\n    local q=\"\"\n    local\
    \ v=\"\"\n    local w=\"\"\n    local e=\"\"\n    local r=\"\"\n    local i=\"\
    \"\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n \
    \   local p=\"\"\n    local t=\"\"\n    local d=\"\"\n    local f=\"\"\n    local\
    \ x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\
    \"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n \
    \   local m=\"\"\n    local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local\
    \ w=\"\"\n    local e=\"\"\n    local r=\"\"\n    local i=\"\"\n    local c=\"\
    \"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n    local p=\"\"\n \
    \   local t=\"\"\n    local d=\"\"\n    local f=\"\"\n    local x=\"\"\n    local\
    \ y=\"\"\n    local z=\"\"\n    local a=\"\"\n    local b=\"\"\n    local g=\"\
    \"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local m=\"\"\n \
    \   local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local\
    \ e=\"\"\n    local r=\"\"", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "  local s=$1\n\
    \  local r=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    local c=${s:$i:1}\n    if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n        r=$r$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n      else\n        r=$r$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n      fi\n    else\n      r=$r$c\n    fi\n  done\n  if [[ $r =~\
    \ [a-zA-Z] ]]; then\n    echo $r\n  else\n    echo $r | rev\n  fi", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=$1\n   \
    \ local res=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n  \
    \          if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \        let i++\n    done\n    echo $res", "    local s=\"$1\"\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    local c\n    while [ $i -lt $len ];\
    \ do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n           \
    \ if [[ $c =~ [a-z] ]]; then\n                c=$(echo \"$c\" | tr a-z A-Z)\n\
    \            else\n                c=$(echo \"$c\" | tr A-Z a-z)\n           \
    \ fi\n        fi\n        result=\"$result$c\"\n        i=$((i+1))\n    done\n\
    \    echo \"$result\"", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world\"\n\
    \    echo \"\"", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n   \
    \         else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1}\
    \ =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n\
    \        else\n            res+=${s:$i:1}\n        fi\n    done\n    echo $res\
    \ | rev", "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n\
    \    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    local\
    \ s=$1\n    local s_len=${#s}\n    local i=0\n    local res=\"\"\n    local c=\"\
    \"\n    local c_ascii=0\n    local c_ascii_new=0\n    local c_new=\"\"\n    while\
    \ [ $i -lt $s_len ]; do\n        c=${s:$i:1}\n        c_ascii=$(printf \"%d\"\
    \ \"'$c\")\n        if [ $c_ascii -ge 65 -a $c_ascii -le 90 ]; then\n        \
    \    c_ascii_new=$((c_ascii + 32))\n        elif [ $c_ascii -ge 97 -a $c_ascii\
    \ -le 122 ]; then\n            c_ascii_new=$((c_ascii - 32))\n        else\n \
    \           c_ascii_new=$c_ascii\n        fi\n        c_new=$(printf \\\\$(printf\
    \ '%03o' $c_ascii_new))\n        res=$res$c_new\n        i=$((i + 1))\n    done\n\
    \    echo $res", "    local s=$1\n    local i\n    local c\n    local r\n    local\
    \ is_letter=0\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n      \
    \  if [[ $c =~ [a-zA-Z] ]]; then\n            is_letter=1\n            if [[ $c\
    \ =~ [a-z] ]]; then\n                r+=$(echo $c | tr '[a-z]' '[A-Z]')\n    \
    \        else\n                r+=$(echo $c | tr '[A-Z]' '[a-z]')\n          \
    \  fi\n        else\n            r+=$c\n        fi\n    done\n    if [ $is_letter\
    \ -eq 0 ]; then\n        echo $r | rev\n    else\n        echo $r\n    fi", " \
    \ local str=$1\n  local res=\"\"\n  local i=0\n  local len=${#str}\n  local c\n\
    \  for ((i=0; i<len; i++)); do\n    c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]];\
    \ then\n      if [[ $c =~ [a-z] ]]; then\n        res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n      else\n        res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \      fi\n    else\n      res+=$c\n    fi\n  done\n  echo $res", "    if [[ $1\
    \ =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=$1\n   \
    \ local r=\"\"\n    local i=0\n    local c=\"\"\n    local n=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                n=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                n=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            n=$c\n        fi\n \
    \       r=\"$n$r\"\n    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=$1\n    local r=\"\"\n\
    \    local i\n    for ((i=0; i<${#s}; i++)); do\n        if [[ ${s:$i:1} =~ [a-zA-Z]\
    \ ]]; then\n            r+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n\
    \            r+=${s:$i:1}\n        fi\n    done\n    echo $r | rev"]
stop_tokens:
- "\n}"
