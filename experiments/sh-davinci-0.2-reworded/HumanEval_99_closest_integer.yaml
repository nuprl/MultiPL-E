name: HumanEval_99_closest_integer
language: sh
prompt: "#!/bin/bash\n# Create a function that takes a value (string) representing\
  \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
  # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
  \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
  \ away from zero means that if the given number is equidistant\n# from two integers,\
  \ the one you should return is the one that is the\n# farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should\
  \ return -15.\n#\n# $1 is a string\nclosest_integer() {\n"
tests: "}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
  \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\"\
  \ ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
completions: ["    # your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  "  # Your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "    local num=$1\n\
    \    local int=$(printf \"%.0f\" $num)\n    local dec=$(printf \"%.1f\" $num)\n\
    \    if (( $(echo \"$dec - $int\" | bc -l) >= 0.5 )); then\n        (( int++ ))\n\
    \    fi\n    echo $int", "    # If the number is equidistant from two integers,\
    \ round it away from zero.\n    # Rounding away from zero means that if the given\
    \ number is equidistant\n    # from two integers, the one you should return is\
    \ the one that is the\n    # farthest from zero. For example closest_integer(\"\
    14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    #\n    # If the number is equidistant from two integers, round it away from\
    \ zero.\n    # Rounding away from zero means that if the given number is equidistant\n\
    \    # from two integers, the one you should return is the one that is the\n \
    \   # farthest from zero. For example closest_integer(\"14.5\") should\n    #\
    \ return 15 and closest_integer(\"-14.5\") should return -15.\n    #\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # If the number is\
    \ equidistant from two integers, round it away from zero.\n    # Rounding away\
    \ from zero means that if the given number is equidistant\n    # from two integers,\
    \ the one you should return is the one that is the\n    # farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"\
    -14.5\") should return -15.\n    #\n    # If the number is equidistant from two\
    \ integers, round it away from zero.\n    # Rounding away from zero means that\
    \ if the given number is equidistant\n    # from two integers, the one you should\
    \ return is the one that is the\n    # farthest from zero. For example closest_integer(\"\
    14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    #\n    # If the number is equidistant from two integers, round it away from\
    \ zero.\n   ", "    # Use bc to do floating point arithmetic.\n    # The scale=0\
    \ option sets the number of digits after the decimal\n    # point to 0, so that\
    \ bc will round the number to the nearest\n    # integer.\n    # The printf command\
    \ formats the number as a string.\n    printf \"%d\" $(echo \"scale=0; $1/1\"\
    \ | bc)", "  # Your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", " \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # Example: echo \"Hello world!\"\n  echo \"Not implemented\"", " \
    \   # Your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"", "  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "  # Write your\
    \ code here\n  # To print results to the standard output you can use echo\n  #\
    \ Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "    # The following\
    \ is a one-liner, but it's easier to read if we break it\n    # down into several\
    \ lines.\n    #\n    # First, we use bc to convert the string to a number.\n \
    \   # Then, we use printf to convert the number to a string.\n    # Finally, we\
    \ use sed to remove the decimal point.\n    #\n    # The sed command is a bit\
    \ tricky. It uses a regular expression to\n    # match a decimal point, and then\
    \ replaces it with an empty string.\n    #\n    # The regular expression is:\n\
    \    #\n    # ^[0-9]*\\.\n    #\n    # The ^ means \"beginning of line\".\n  \
    \  # The [0-9]* means \"any number of digits\".\n    # The \\. means \"a decimal\
    \ point\".\n    #\n    # The ^[0-9]*\\. matches the beginning of the string, followed\
    \ by any\n    # number of digits, followed by a decimal point.\n    #\n    # The\
    \ replacement string is empty, so the decimal point is removed.\n    #\n    #\
    \ The -r flag to sed tells it to use extended regular expressions.\n    #\n  \
    \  # The -i flag to sed tells it to edit the file in place.\n    #\n    # The\
    \ -e flag to sed tells it to use the following string as the\n    # regular expression.\n\
    \    #\n    # The -e flag to sed tells it to use the following string as the\n\
    \    # replacement string.\n    #\n    # The -e flag to sed tells it to use the\
    \ following string as the\n    # replacement string.\n    #\n    # The -e flag\
    \ to sed tells it to use the following string as the\n    # replacement string.\n\
    \    #\n    # The -e flag to sed tells it to use the following string as the\n\
    \    # replacement string.\n    #\n    # The -e flag to sed tells it to use the\
    \ following string as the\n    # replacement string.\n    #\n    # The -e flag\
    \ to sed tells it to use the following string as the\n    # replacement string.\n\
    \    #\n    # The -e flag to sed tells it to use the following string as the\n\
    \    # replacement string.\n    #\n    # The -e flag to sed tells it", "    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  "    # Write your code here\n    echo $1 | awk '{print int($1+0.5)}'", "  # TODO:\
    \ Your code here\n  echo \"$1\"", "    local number=\"$1\"\n    local integer=$(printf\
    \ \"%.0f\" \"$number\")\n    local decimal=$(printf \"%.1f\" \"$number\")\n  \
    \  local diff=$(echo \"$decimal - $integer\" | bc)\n    if [[ \"$diff\" == \"\
    0.5\" ]]; then\n        if [[ \"$number\" -ge 0 ]]; then\n            echo \"\
    $((integer + 1))\"\n        else\n            echo \"$((integer - 1))\"\n    \
    \    fi\n    else\n        echo \"$integer\"\n    fi", "    # your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'", '  # Your code here', "    # your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code\
    \ here\n  # To print results to the standard output you can use echo\n  # Example:\
    \ echo \"Hello world!\"\n  echo \"Hello world!\"", "  # Write your code here\n\
    \  # To print results to the standard output you can use echo\n  # Example: echo\
    \ \"Hello world!\"\n  echo \"Hello world!\"", "    # echo \"$1\" | awk '{print\
    \ int($1+0.5)}'\n    echo \"$1\" | awk '{printf(\"%d\\n\", $1+0.5)}'", "  # Your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Your code goes here\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "  # TODO:\
    \ implement this function\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "    # your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Your code here\n    echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'", "    # Use awk to round the number\n  \
    \  # Use printf to remove the trailing newline\n    printf \"%d\" $(awk \"BEGIN\
    \ {print int($1+0.5)}\")", "    # TODO: implement this function\n    # Hint: use\
    \ the bc utility to do floating point arithmetic\n    # Hint: use the printf utility\
    \ to format the output\n    # Hint: use the abs function to get the absolute value\n\
    \    # Hint: use the round function to round the number\n    # Hint: use the if\
    \ statement to compare the number with 0\n    # Hint: use the if statement to\
    \ compare the number with the next integer\n    # Hint: use the if statement to\
    \ compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with the previous integer\n    # Hint: use the if statement\
    \ to compare the number with the next integer\n    # Hint: use the if statement\
    \ to compare the number with", "    # Your code here\n    if [[ $1 == *.* ]];\
    \ then\n        echo $1 | awk '{printf \"%d\\n\", $1}'\n    else\n        echo\
    \ $1\n    fi", "    # If the number is equidistant from two integers, round it\
    \ away from zero.\n    # If the number is negative, round it away from zero.\n\
    \    # If the number is positive, round it away from zero.\n    # If the number\
    \ is zero, return zero.\n    if [ $(echo \"$1 < 0\" | bc -l) -eq 1 ]; then\n \
    \       echo \"$(echo \"$1 - 0.5\" | bc -l | cut -d '.' -f 1)\"\n    elif [ $(echo\
    \ \"$1 > 0\" | bc -l) -eq 1 ]; then\n        echo \"$(echo \"$1 + 0.5\" | bc -l\
    \ | cut -d '.' -f 1)\"\n    else\n        echo \"0\"\n    fi", "    # The following\
    \ line is the only one that matters.\n    # It uses the printf command to print\
    \ the number\n    # with the %.0f format specifier, which means\n    # \"print\
    \ the number with no decimal places\".\n    printf \"%.0f\" \"$1\"", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"", "    # If the\
    \ number is equidistant from two integers, round it away from zero.\n    # The\
    \ number is equidistant from two integers if the fractional part is 0.5.\n   \
    \ # If the number is equidistant from two integers, the one you should return\n\
    \    # is the one that is the farthest from zero.\n    # For example closest_integer(\"\
    14.5\") should return 15 and\n    # closest_integer(\"-14.5\") should return -15.\n\
    \    #\n    # The number is equidistant from two integers if the fractional part\
    \ is 0.5.\n    # The fractional part is the part after the decimal point.\n  \
    \  #\n    # The fractional part is 0.5 if the number is equidistant from two integers.\n\
    \    # The fractional part is not 0.5 if the number is not equidistant from two\
    \ integers.\n    #\n    # The fractional part is 0.5 if the number is equidistant\
    \ from two integers.\n    # The fractional part is not 0.5 if the number is not\
    \ equidistant from two integers.\n    #\n    # The fractional part is 0.5 if the\
    \ number is equidistant from two integers.\n    # The fractional part is not 0.5\
    \ if the number is not equidistant from two integers.\n    #\n    # The fractional\
    \ part is 0.5 if the number is equidistant from two integers.\n    # The fractional\
    \ part is not 0.5 if the number is not equidistant from two integers.\n    #\n\
    \    # The fractional part is 0.5 if the number is equidistant from two integers.\n\
    \    # The fractional part is not 0.5 if the number is not equidistant from two\
    \ integers.\n    #\n    # The fractional part is 0.5 if the number is equidistant\
    \ from two integers.\n    # The fractional part is not 0.5 if the number is not\
    \ equidistant from two integers.\n    #\n    # The fractional part is 0.5 if the\
    \ number is equidistant from two integers.\n    # The fractional part is not 0.5\
    \ if the number is not equidistant from two integers.\n    #\n    # The fractional\
    \ part is 0.5 if the number is equid", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo \"Hello world!\"", "  # Write your code here\n  # To debug:\
    \ echo \"Debug messages...\" >&2\n  echo \"$1\"", "  # Write your code here\n\
    \  # To debug: echo \"Debug messages...\" >&2\n  echo $(printf \"%.0f\" $1)",
  "  # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your\
    \ code here\n  # To print results to the standard output you can use echo\n  #\
    \ Example: echo \"Hello world!\"\n  echo \"15\"", "    # The number is equidistant\
    \ from two integers, round it away from zero.\n    if [[ $(echo \"$1 > 0\" | bc\
    \ -l) -eq 1 ]]; then\n        echo \"$(echo \"$1 + 0.5\" | bc -l | cut -d'.' -f1)\"\
    \n    else\n        echo \"$(echo \"$1 - 0.5\" | bc -l | cut -d'.' -f1)\"\n  \
    \  fi", "  # Write your code here\n  # To print results to the standard output\
    \ you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"",
  "  echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # Write your code here\n  # To\
    \ print results to the standard output you can use echo\n  # Example: echo \"\
    Hello world!\"\n  echo \"Hello world!\"", "    # Write your code here\n    # To\
    \ print results to the standard output you can use echo\n    # Example: echo \"\
    Hello world!\"\n    echo \"Hello world!\"", "    # If the number is equidistant\
    \ from two integers, round it away from zero.\n    # If the number is negative,\
    \ round it down.\n    # If the number is positive, round it up.\n    # If the\
    \ number is zero, return zero.\n    # If the number is not a number, return the\
    \ number.\n    # If the number is a number, return the closest integer.\n    #\n\
    \    # $1 is a string\n    if [[ $1 =~ ^[0-9]+\\.[5]$ ]]; then\n        # If the\
    \ number is negative, round it down.\n        if [[ $1 =~ ^- ]]; then\n      \
    \      echo $(( $1 - 1 ))\n        # If the number is positive, round it up.\n\
    \        else\n            echo $(( $1 + 1 ))\n        fi\n    # If the number\
    \ is zero, return zero.\n    elif [[ $1 =~ ^0$ ]]; then\n        echo 0\n    #\
    \ If the number is not a number, return the number.\n    elif [[ $1 =~ ^[^0-9]\
    \ ]]; then\n        echo $1\n    # If the number is a number, return the closest\
    \ integer.\n    else\n        echo $1 | cut -d. -f1\n    fi", "  # Write your\
    \ code here\n  # To print results to the standard output you can use echo\n  #\
    \ Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "  # Your code here\n\
    \  echo $1 | awk '{print int($1+0.5)}'", "  # Your code here\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "  # TODO: implement this function\n  # Hint: use bc\n  # Hint: use awk\n\
    \  # Hint: use printf\n  # Hint: use sed\n  # Hint: use echo\n  # Hint: use test\n\
    \  # Hint: use if\n  # Hint: use else\n  # Hint: use elif\n  # Hint: use >\n \
    \ # Hint: use <\n  # Hint: use >=\n  # Hint: use <=\n  # Hint: use ==\n  # Hint:\
    \ use !=\n  # Hint: use &&\n  # Hint: use ||\n  # Hint: use !\n  # Hint: use -eq\n\
    \  # Hint: use -ne\n  # Hint: use -gt\n  # Hint: use -lt\n  # Hint: use -ge\n\
    \  # Hint: use -le\n  # Hint: use -a\n  # Hint: use -o\n  # Hint: use -z\n  #\
    \ Hint: use -n\n  # Hint: use -f\n  # Hint: use -d\n  # Hint: use -e\n  # Hint:\
    \ use -s\n  # Hint: use -r\n  # Hint: use -w\n  # Hint: use -x\n  # Hint: use\
    \ -p\n  # Hint: use -L\n  # Hint: use -S\n  # Hint: use -b\n  # Hint: use -c\n\
    \  # Hint: use -g\n  # Hint: use -k\n  # Hint: use -O\n  # Hint: use -G\n  # Hint:\
    \ use -N\n  # Hint: use -nt\n  # Hint: use -ot\n  # Hint: use -ef\n  # Hint: use\
    \ -o\n  # Hint: use -t\n  # Hint: use -u\n  # Hint: use -g\n  # Hint: use -k\n\
    \  # Hint: use -p\n  # Hint: use -s\n  # Hint: use -t\n  # Hint: use -z\n  # Hint:",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  '  # your code here', "    # your code here\n    echo $1 | awk '{printf \"%d\\n\"\
    , $1}'", "    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  "    # Fill in the code here\n    # Hint: use the bc command\n    # Hint: use the\
    \ printf command\n    # Hint: use the awk command\n    # Hint: use the sed command\n\
    \    # Hint: use the grep command\n    # Hint: use the expr command\n    # Hint:\
    \ use the test command\n    # Hint: use the if command\n    # Hint: use the else\
    \ command\n    # Hint: use the fi command\n    # Hint: use the echo command\n\
    \    # Hint: use the return command\n    # Hint: use the -eq operator\n    # Hint:\
    \ use the -ne operator\n    # Hint: use the -lt operator\n    # Hint: use the\
    \ -gt operator\n    # Hint: use the -le operator\n    # Hint: use the -ge operator\n\
    \    # Hint: use the -z operator\n    # Hint: use the -n operator\n    # Hint:\
    \ use the -o operator\n    # Hint: use the -a operator\n    # Hint: use the -e\
    \ operator\n    # Hint: use the -f operator\n    # Hint: use the -d operator\n\
    \    # Hint: use the -r operator\n    # Hint: use the -w operator\n    # Hint:\
    \ use the -x operator\n    # Hint: use the -s operator\n    # Hint: use the -t\
    \ operator\n    # Hint: use the -p operator\n    # Hint: use the -c operator\n\
    \    # Hint: use the -b operator\n    # Hint: use the -u operator\n    # Hint:\
    \ use the -g operator\n    # Hint: use the -k operator\n    # Hint: use the -l\
    \ operator\n    # Hint: use the -S operator\n    # Hint: use the -nt operator\n\
    \    # Hint: use the -ot operator\n    # Hint: use the -ef operator\n    # Hint:\
    \ use the -o operator\n    # Hint: use the -a operator\n    # Hint: use the -o\
    \ operator\n    # Hint: use the -a operator\n    # Hint: use the -o operator\n\
    \    # Hint: use the -", "  # Write your code here\n  # To debug: echo \"Debug\
    \ messages...\" >&2\n  echo \"$1\"", "  # your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "    # Check if the number is positive or negative\n    if\
    \ [[ $1 =~ ^- ]]; then\n        # Negative number\n        echo $1 | awk '{printf(\"\
    %d\\n\", $1 - 0.5)}'\n    else\n        # Positive number\n        echo $1 | awk\
    \ '{printf(\"%d\\n\", $1 + 0.5)}'\n    fi", "  # Write your code here\n  # To\
    \ print results to the standard output you can use echo\n  # Example: echo \"\
    Hello world!\"\n  echo \"Hello world!\"", "  # Write your code here\n  # To print\
    \ results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\
    \n  echo \"Hello world!\"", "  # your code here\n  echo $1 | awk '{printf \"%.0f\"\
    , $1}'", "  # Write your code here\n  # To print results to the standard output\
    \ you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"",
  "  # Your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # your code\
    \ here\n    # use the printf command to round the number\n    # use the echo command\
    \ to print the result\n    printf \"%.0f\" $1", "  # TODO: Write your solution\
    \ here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Your code here\n  echo\
    \ \"$1\" | awk '{printf \"%.0f\", $1}'", "  # TODO: implement this function\n\
    \  echo \"Not implemented\"", "  # your code here\n  echo $1 | awk '{printf \"\
    %d\\n\", $1}'", "  # If the number is equidistant from two integers, round it\
    \ away from zero.\n  # Rounding away from zero means that if the given number\
    \ is equidistant\n  # from two integers, the one you should return is the one\
    \ that is the\n  # farthest from zero. For example closest_integer(\"14.5\") should\n\
    \  # return 15 and closest_integer(\"-14.5\") should return -15.\n  #\n  # $1\
    \ is a string\n  #\n  # Example:\n  # >>> closest_integer \"14.5\"\n  # 15\n \
    \ # >>> closest_integer \"-14.5\"\n  # -15\n  # >>> closest_integer \"14.4\"\n\
    \  # 14\n  # >>> closest_integer \"-14.4\"\n  # -14\n  # >>> closest_integer \"\
    14.6\"\n  # 15\n  # >>> closest_integer \"-14.6\"\n  # -15\n  # >>> closest_integer\
    \ \"14.5\"\n  # 15\n  # >>> closest_integer \"-14.5\"\n  # -15\n  # >>> closest_integer\
    \ \"14.4\"\n  # 14\n  # >>> closest_integer \"-14.4\"\n  # -14\n  # >>> closest_integer\
    \ \"14.6\"\n  # 15\n  # >>> closest_integer \"-14.6\"\n  # -15\n  # >>> closest_integer\
    \ \"14.5\"\n  # 15\n  # >>> closest_integer \"-14.5\"\n  # -15\n  # >>> closest_integer\
    \ \"14.4\"\n  # 14\n  # >>> closest_integer \"-14.4\"\n  # -14\n  # >>> closest_integer\
    \ \"14.6\"\n  # 15\n  # >>> closest_integer \"-14.6\"\n  # -15\n  # >>> closest_integer\
    \ \"14.5\"\n  # 15\n  # >>> closest_integer \"-14.5\"\n  # -15\n  # >>> closest_integer\
    \ \"14.4\"\n  # 14\n  # >>> closest_integer \"-14.4\"\n  # -14\n  # >>> closest_integer\
    \ \"14.6\"\n  # 15\n  # >>> closest_integer \"-14.6\"\n  # -15\n ", "    # your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code\
    \ here\n  # To print results to the standard output you can use echo\n  # Example:\
    \ echo \"Hello world!\"\n  echo \"Hello world!\"", "    # your code here\n   \
    \ echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Your code here\n    echo \"\
    $1\"", "  # Your code here\n  echo $1", "  # Write your code here\n  # To print\
    \ results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\
    \n  echo \"Hello world!\"", "    # Your code here\n    echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # TODO: implement this function\n  # Hint: use awk\n  #\
    \ Hint: use printf\n  # Hint: use printf to convert a string to a number\n  #\
    \ Hint: use printf to convert a number to a string\n  # Hint: use printf to round\
    \ a number\n  # Hint: use printf to round a number away from zero\n  # Hint: use\
    \ printf to round a number to the nearest integer\n  # Hint: use printf to round\
    \ a number to the nearest integer away from zero\n  # Hint: use printf to round\
    \ a number to the nearest integer towards zero\n  # Hint: use printf to round\
    \ a number to the nearest integer towards infinity\n  # Hint: use printf to round\
    \ a number to the nearest integer towards negative infinity\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest integer towards zero\n  # Hint: use printf\
    \ to round a number to the nearest", "  # Write your code here\n  echo $1 | awk\
    \ '{printf(\"%d\\n\", $1)}'", "    # Your code here\n    if [[ $1 =~ ^[-+]?[0-9]+\\\
    .[0-9]+$ ]]; then\n        if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n        \
    \    if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                if [[ $1 =~ ^[-+]?[0-9]+\\\
    .[5]$ ]]; then\n                    if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n\
    \                        if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n          \
    \                  if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                \
    \                if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                  \
    \                  if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                \
    \                        if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n          \
    \                                  if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n\
    \                                                if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$\
    \ ]]; then\n                                                    if [[ $1 =~ ^[-+]?[0-9]+\\\
    .[5]$ ]]; then\n                                                        if [[\
    \ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                                       \
    \                     if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n             \
    \                                                   if [[ $1 =~ ^[-+]?[0-9]+\\\
    .[5]$ ]]; then\n                                                             \
    \       if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$ ]]; then\n                           \
    \                                             if [[ $1 =~ ^[-+]?[0-9]+\\.[5]$\
    \ ]]; then\n                                                                 \
    \           if [[ $1 =~", "    local number=\"$1\"\n    local integer=\"${number%.*}\"\
    \n    local decimal=\"${number#*.}\"\n    if [ \"$decimal\" -lt \"5\" ]; then\n\
    \        echo \"$integer\"\n    else\n        echo \"$((integer + 1))\"\n    fi",
  "    # This is a bit of a hack, but it works.\n    # First, we use printf to print\
    \ the number with a precision of 0.\n    # This will round the number to the nearest\
    \ integer.\n    # Then, we use sed to remove the leading 0s.\n    # Finally, we\
    \ use sed to remove the leading space.\n    printf \"%.0f\" \"$1\" | sed 's/^0*//'\
    \ | sed 's/^ //'", "  # Write your code here\n  # To print results to the standard\
    \ output you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello\
    \ world!\"", "    # Your code here\n    if [ $1 -ge 0 ]; then\n        echo $((\
    \ $1 + 0.5 )) | cut -d. -f1\n    else\n        echo $(( $1 - 0.5 )) | cut -d.\
    \ -f1\n    fi", "  # your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  local num=\"$1\"\n  local int=${num%.*}\n  local dec=${num#*.}\n  if [ \"$dec\"\
    \ -ge 5 ]; then\n    echo $((int + 1))\n  else\n    echo $int\n  fi", "  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "  # Your code\
    \ here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # your code here\n  if [[\
    \ $1 =~ ^[0-9]+$ ]]; then\n    echo $1\n  else\n    echo $1 | awk '{printf \"\
    %.0f\", $1}'\n  fi", "  # Write your code here\n  # To print results to the standard\
    \ output you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello\
    \ world!\"", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello\
    \ world!\"", "    # Your code here\n    echo $1 | awk '{printf \"%.0f\", $1}'",
  "  # Write your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo\
    \ \"$1\"", "  # Your code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'",
  "    # The following command prints the closest integer to the given number\n  \
    \  # and then removes the decimal point.\n    printf \"%.0f\" \"$1\"", "  # Your\
    \ code here\n  # Hint: use the bash builtin command bc\n  # http://www.gnu.org/software/bc/manual/html_mono/bc.html\n\
    \  # Hint: use the bash builtin command printf\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command echo\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command cut\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command grep\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command sed\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command tr\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command wc\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command expr\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command test\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command [\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command [[\n  # http://www.tldp.org/LDP/abs/html/string-manipulation.html\n\
    \  # Hint: use the bash builtin command let\n  # http://www.tldp.org/", "    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world!\"\n    echo \"Not implemented yet\"",
  "  # if the number is equidistant from two integers, round it away from zero\n \
    \ # if the number is positive, round it up\n  # if the number is negative, round\
    \ it down\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number, return it\n  # if the number is a decimal, return the whole\
    \ number\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number, return it\n  # if the number is a decimal, return the whole\
    \ number\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number, return it\n  # if the number is a decimal, return the whole\
    \ number\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number, return it\n  # if the number is a decimal, return the whole\
    \ number\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number, return it\n  # if the number is a decimal, return the whole\
    \ number\n  # if the number is a whole number, return it\n  # if the number is\
    \ a decimal, return the whole number\n  # if the number is a whole number, return\
    \ it\n  # if the number is a decimal, return the whole number\n  # if the number\
    \ is a whole number", "  # TODO: Implement this function\n  # Hint: Use the bash\
    \ builtin command `bc` to perform floating point\n  # arithmetic.\n  # Hint: Use\
    \ the bash builtin command `printf` to format the output.\n  # Hint: Use the bash\
    \ builtin command `echo` to output the result.\n  # Hint: Use the bash builtin\
    \ command `test` to check if a string is a\n  # number.\n  # Hint: Use the bash\
    \ builtin command `expr` to perform arithmetic\n  # operations.\n  # Hint: Use\
    \ the bash builtin command `cut` to extract a substring.\n  # Hint: Use the bash\
    \ builtin command `sed` to remove the decimal part\n  # of a number.\n  # Hint:\
    \ Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n  # operations.\n\
    \  # Hint: Use the bash builtin command `expr` to perform arithmetic\n", "   \
    \ # Your code here\n    # Hint: Use the bc command\n    # Hint: Use the printf\
    \ command\n    # Hint: Use the cut command\n    # Hint: Use the abs function\n\
    \    # Hint: Use the round function\n    # Hint: Use the floor function\n    #\
    \ Hint: Use the ceil function\n    # Hint: Use the if command\n    # Hint: Use\
    \ the else command\n    # Hint: Use the fi command\n    # Hint: Use the return\
    \ command\n    # Hint: Use the -eq operator\n    # Hint: Use the -ne operator\n\
    \    # Hint: Use the -gt operator\n    # Hint: Use the -lt operator\n    # Hint:\
    \ Use the -ge operator\n    # Hint: Use the -le operator\n    # Hint: Use the\
    \ -a operator\n    # Hint: Use the -o operator\n    # Hint: Use the -z operator\n\
    \    # Hint: Use the -n operator\n    # Hint: Use the -f operator\n    # Hint:\
    \ Use the -d operator\n    # Hint: Use the -e operator\n    # Hint: Use the -s\
    \ operator\n    # Hint: Use the -r operator\n    # Hint: Use the -w operator\n\
    \    # Hint: Use the -x operator\n    # Hint: Use the -L operator\n    # Hint:\
    \ Use the -O operator\n    # Hint: Use the -G operator\n    # Hint: Use the -S\
    \ operator\n    # Hint: Use the -nt operator\n    # Hint: Use the -ot operator\n\
    \    # Hint: Use the -ef operator\n    # Hint: Use the -o operator\n    # Hint:\
    \ Use the -a operator\n    # Hint: Use the -o operator\n    # Hint: Use the -o\
    \ operator\n    # Hint: Use the -o operator\n    # Hint: Use the -o operator\n\
    \    # Hint: Use the -o operator\n    # Hint: Use the -o operator\n    # Hint:\
    \ Use the -o operator\n    # Hint: Use the -o operator\n    # Hint: Use the -o\
    \ operator\n    # Hint: Use the -o", "  # Write your code here\n  # To print results\
    \ to the standard output you can use echo\n  # Example: echo \"Hello world!\"\n\
    \  echo \"Hello world!\"", "  # your code here\n  # echo \"$1\"\n  # echo \"${1%.*}\"\
    \n  # echo \"${1#*.}\"\n  # echo \"${1%.*}${1#*.}\"\n  # echo \"${1%.*}${1#*.}0\"\
    \n  # echo \"${1%.*}${1#*.}0\" | sed 's/^-//'\n  # echo \"${1%.*}${1#*.}0\" |\
    \ sed 's/^-//' | sed 's/^0//'\n  # echo \"${1%.*}${1#*.}0\" | sed 's/^-//' | sed\
    \ 's/^0//' | sed 's/^$/0/'\n  # echo \"${1%.*}${1#*.}0\" | sed 's/^-//' | sed\
    \ 's/^0//' | sed 's/^$/0/' | sed 's/^-0$/0/'\n  # echo \"${1%.*}${1#*.}0\" | sed\
    \ 's/^-//' | sed 's/^0//' | sed 's/^$/0/' | sed 's/^-0$/0/' | sed 's/^-//'\n \
    \ # echo \"${1%.*}${1#*.}0\" | sed 's/^-//' | sed 's/^0//' | sed 's/^$/0/' | sed\
    \ 's/^-0$/0/' | sed 's/^-//' | sed 's/^$/0/'\n  # echo \"${1%.*}${1#*.}0\" | sed\
    \ 's/^-//' | sed 's/^0//' | sed 's/^$/0/' | sed 's/^-0$/0/' | sed 's/^-//' | sed\
    \ 's/^$/0/' | sed 's/^-0$/0/'\n  # echo \"${1%.*}${1#*.}0\" | sed 's/^-//' | sed\
    \ 's/^0//' | sed 's/^$", "  # TODO: implement this function\n  # Hint: use the\
    \ bash built-in command `bc`\n  #       to perform floating point arithmetic.\n\
    \  #       See the man page for bc for more info.\n  #       You can also use\
    \ the `awk` command to\n  #       perform floating point arithmetic.\n  #    \
    \   See the man page for awk for more info.\n  #       You can also use the `printf`\
    \ command to\n  #       perform floating point arithmetic.\n  #       See the\
    \ man page for printf for more info.\n  #       You can also use the `perl` command\
    \ to\n  #       perform floating point arithmetic.\n  #       See the man page\
    \ for perl for more info.\n  #       You can also use the `python` command to\n\
    \  #       perform floating point arithmetic.\n  #       See the man page for\
    \ python for more info.\n  #       You can also use the `ruby` command to\n  #\
    \       perform floating point arithmetic.\n  #       See the man page for ruby\
    \ for more info.\n  #       You can also use the `lua` command to\n  #       perform\
    \ floating point arithmetic.\n  #       See the man page for lua for more info.\n\
    \  #       You can also use the `node` command to\n  #       perform floating\
    \ point arithmetic.\n  #       See the man page for node for more info.\n  # \
    \      You can also use the `java` command to\n  #       perform floating point\
    \ arithmetic.\n  #       See the man page for java for more info.\n  #       You\
    \ can also use the `javac` command to\n  #       perform floating point arithmetic.\n\
    \  #       See the man page for javac for more info.\n  #       You can also use\
    \ the `c++` command to\n  #       perform floating point arithmetic.\n  #    \
    \   See the man page for c++ for more info.\n  #       You can also use the `g++`\
    \ command to\n  #       perform floating point arithmetic.\n  #       See the\
    \ man page for g++ for more info.\n  #       You can also use the `go` command\
    \ to\n  #       perform floating point arithmetic.\n  #       See the man page\
    \ for go for more info.\n  #       You can also use", "  # Write your code here\n\
    \  # Use echo to print to stdout\n  echo \"15\"", "    # your code here\n    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # Your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo\
    \ \"15\"", "    # Your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "    # Check if the number is negative\n    if [[ $1 =~ ^- ]]; then\n        # If\
    \ it is, remove the minus sign and store the result in a\n        # temporary\
    \ variable\n        local tmp=$(echo $1 | sed 's/-//')\n        # Check if the\
    \ number is a whole number\n        if [[ $tmp =~ ^[0-9]+$ ]]; then\n        \
    \    # If it is, return the number with the minus sign\n            echo \"-$tmp\"\
    \n        else\n            # If it isn't, return the number rounded down with\
    \ the\n            # minus sign\n            echo \"-$(echo $tmp | cut -d '.'\
    \ -f 1)\"\n        fi\n    else\n        # If the number is positive, check if\
    \ it is a whole number\n        if [[ $1 =~ ^[0-9]+$ ]]; then\n            # If\
    \ it is, return the number\n            echo $1\n        else\n            # If\
    \ it isn't, return the number rounded down\n            echo $(echo $1 | cut -d\
    \ '.' -f 1)\n        fi\n    fi", "  # If the number is equidistant from two integers,\
    \ round it away from zero.\n  # Rounding away from zero means that if the given\
    \ number is equidistant\n  # from two integers, the one you should return is the\
    \ one that is the\n  # farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n  # return 15 and closest_integer(\"-14.5\") should return -15.\n  #\n\
    \  # The following command will round the number to the nearest integer.\n  #\
    \ If the number is equidistant from two integers, it will round it to\n  # the\
    \ nearest even integer.\n  #\n  #   $ echo \"14.5\" | awk '{printf \"%d\\n\",\
    \ $1}'\n  #   14\n  #   $ echo \"-14.5\" | awk '{printf \"%d\\n\", $1}'\n  # \
    \  -14\n  #\n  # To round the number to the nearest integer, we can use the following\n\
    \  # command:\n  #\n  #   $ echo \"14.5\" | awk '{printf \"%d\\n\", $1+0.5}'\n\
    \  #   15\n  #   $ echo \"-14.5\" | awk '{printf \"%d\\n\", $1-0.5}'\n  #   -15\n\
    \  #\n  # To round the number to the nearest integer, we can use the following\n\
    \  # command:\n  #\n  #   $ echo \"14.5\" | awk '{printf \"%d\\n\", $1+0.5}'\n\
    \  #   15\n  #   $ echo \"-14.5\" | awk '{printf \"%d\\n\", $1-0.5}'\n  #   -15\n\
    \  #\n  # To round the number to the nearest integer, we can use the following\n\
    \  # command:\n  #\n  #   $ echo \"14.5\" | awk '{printf \"%d\\n\", $1+0.5}'\n\
    \  #   15\n  #   $ echo \"-14.5\" | awk '{printf \"%d\\n\", $1-0.5}'\n  #   -15\n\
    \  #\n  # To round the", "  # Write your code here\n  # To print results to the\
    \ standard output you can use echo\n  # Example: echo \"Hello world!\"\n  echo\
    \ \"\"", "  # Get the integer part of the number\n  integer_part=$(echo $1 | cut\
    \ -d. -f1)\n  # Get the decimal part of the number\n  decimal_part=$(echo $1 |\
    \ cut -d. -f2)\n  # If the decimal part is greater than or equal to 5, add 1 to\
    \ the\n  # integer part. Otherwise, just return the integer part.\n  if [ \"$decimal_part\"\
    \ -ge 5 ]; then\n    echo $((integer_part + 1))\n  else\n    echo $integer_part\n\
    \  fi", "  # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Use\
    \ bc to do floating point arithmetic\n  # Use printf to print the result with\
    \ no decimal point\n  printf \"%d\" $(echo \"$1\" | bc -l)", "    # Write your\
    \ code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"", "  # Your code\
    \ here\n  # Hint: use the bc command\n  # Hint: use the printf command\n  # Hint:\
    \ use the abs function\n  # Hint: use the round function\n  # Hint: use the ceil\
    \ function\n  # Hint: use the floor function\n  # Hint: use the if command\n \
    \ # Hint: use the test command\n  # Hint: use the -eq operator\n  # Hint: use\
    \ the -lt operator\n  # Hint: use the -gt operator\n  # Hint: use the -le operator\n\
    \  # Hint: use the -ge operator\n  # Hint: use the -ne operator\n  # Hint: use\
    \ the -o operator\n  # Hint: use the -a operator\n  # Hint: use the -z operator\n\
    \  # Hint: use the -n operator\n  # Hint: use the -e operator\n  # Hint: use the\
    \ -f operator\n  # Hint: use the -d operator\n  # Hint: use the -r operator\n\
    \  # Hint: use the -w operator\n  # Hint: use the -x operator\n  # Hint: use the\
    \ -s operator\n  # Hint: use the -t operator\n  # Hint: use the -p operator\n\
    \  # Hint: use the -u operator\n  # Hint: use the -g operator\n  # Hint: use the\
    \ -k operator\n  # Hint: use the -O operator\n  # Hint: use the -G operator\n\
    \  # Hint: use the -L operator\n  # Hint: use the -S operator\n  # Hint: use the\
    \ -N operator\n  # Hint: use the -nt operator\n  # Hint: use the -ot operator\n\
    \  # Hint: use the -ef operator\n  # Hint: use the -o operator\n  # Hint: use\
    \ the -a operator\n  # Hint: use the -z operator\n  # Hint: use the -n operator\n\
    \  # Hint: use the -e operator\n  # Hint: use the -f operator\n  # Hint: use the\
    \ -d operator\n  # Hint: use the -r operator\n  # Hint: use", "  # your code here\n\
    \  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "    # TODO: implement this function\n\
    \    echo $1", "    # your code here\n    echo $1", "  # your code here\n  echo\
    \ $1 | awk '{printf(\"%d\\n\", $1)}'", "    # TODO: implement this function\n\
    \    echo \"Not implemented\"", "  # your code here\n  echo \"$1\" | awk '{printf(\"\
    %d\\n\", $1)}'", "    # your code here\n    echo $1 | awk '{printf \"%d\\n\",\
    \ $1}'", "  # TODO: Implement this function\n  echo $1 | awk '{printf \"%.0f\"\
    , $1}'", "    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"",
  "    if [[ $1 == *.* ]]; then\n        echo $1 | awk '{printf \"%.0f\", $1}'\n \
    \   else\n        echo $1\n    fi", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo \"Hello world!\"", "  # Your code here\n  echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world!\"\
    \n    echo \"Hello world!\"", "  # Your code here\n  echo $1 | awk '{printf(\"\
    %d\\n\", $1)}'", "    # TODO: implement this function\n    # Hint: you can use\
    \ bc to do floating point arithmetic\n    # For example:\n    # echo \"5.5 + 2.5\"\
    \ | bc\n    # will print \"8\"\n    echo \"$1\" | bc", "    local number=\"$1\"\
    \n    local int_number=$(printf \"%.0f\" \"$number\")\n    local decimal_part=$(printf\
    \ \"%.3f\" \"$number\" | cut -d. -f2)\n    if [ \"$decimal_part\" -eq \"5\" ];\
    \ then\n        if [ \"$number\" -lt \"0\" ]; then\n            echo \"$((int_number\
    \ - 1))\"\n        else\n            echo \"$((int_number + 1))\"\n        fi\n\
    \    else\n        echo \"$int_number\"\n    fi", "    # If the number is equidistant\
    \ from two integers, round it away from zero.\n    # Rounding away from zero means\
    \ that if the given number is equidistant\n    # from two integers, the one you\
    \ should return is the one that is the\n    # farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    #\n    # If the number is equidistant from two integers,\
    \ round it away from zero.\n    # Rounding away from zero means that if the given\
    \ number is equidistant\n    # from two integers, the one you should return is\
    \ the one that is the\n    # farthest from zero. For example closest_integer(\"\
    14.5\") should\n    # return 15 and closest_integer(\"-14.5\") should return -15.\n\
    \    #\n    # If the number is equidistant from two integers, round it away from\
    \ zero.\n    # Rounding away from zero means that if the given number is equidistant\n\
    \    # from two integers, the one you should return is the one that is the\n \
    \   # farthest from zero. For example closest_integer(\"14.5\") should\n    #\
    \ return 15 and closest_integer(\"-14.5\") should return -15.\n    #\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # If the number is\
    \ equidistant from two integers, round it away from zero.\n    # Rounding away\
    \ from zero means that if the given number is equidistant\n    # from two integers,\
    \ the one you should return is the one that is the\n    # farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"\
    -14.5\") should return -15.\n    #\n    # If the number is equidistant from two\
    \ integers, round it away from zero.\n   ", "  # Write your code here\n  # To\
    \ print results to the standard output you can use echo\n  # Example: echo \"\
    Hello world!\"\n  echo \"Hello world!\"", "  # Write your code here\n  # To print\
    \ results to the standard output you can use echo\n  # Example: echo \"Hello world!\"\
    \n  echo \"Hello world!\"", "  # your code here\n  echo $1 | awk '{printf \"%d\\\
    n\", $1}'", "  # your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", " \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "  \
    \  # TODO: Write your code here\n    # Hint: You can use the following command\
    \ to round a number\n    #       to the nearest integer:\n    #       printf \"\
    %.0f\" $1\n    printf \"%.0f\" $1", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world!\"\n    echo \"Hello world!\"", "  # Your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "    # Your code here\n    echo $1 | awk '{printf(\"%d\\n\"\
    , $1)}'", "  # Write your code here\n  # To print results to the standard output\
    \ you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"",
  "  # TODO: implement this function\n  # Hint: you can use the following command\
    \ to convert a string to a number:\n  # num=$(echo \"$1\" | sed 's/^[+-]//')\n\
    \  #\n  # Hint: you can use the following command to convert a number to a string:\n\
    \  # str=$(printf \"%0.f\" \"$num\")\n  #\n  # Hint: you can use the following\
    \ command to get the absolute value of a number:\n  # abs=$(echo \"$num\" | sed\
    \ 's/^-//')\n  #\n  # Hint: you can use the following command to get the sign\
    \ of a number:\n  # sign=$(echo \"$num\" | sed 's/^\\([+-]\\).*/\\1/')\n  #\n\
    \  # Hint: you can use the following command to round a number up:\n  # rounded=$(echo\
    \ \"$num\" | sed 's/\\..*//')\n  #\n  # Hint: you can use the following command\
    \ to round a number down:\n  # rounded=$(echo \"$num\" | sed 's/\\..*//; s/^-//')\n\
    \  #\n  # Hint: you can use the following command to get the fractional part of\
    \ a number:\n  # fraction=$(echo \"$num\" | sed 's/^[^.]*\\.//')\n  #\n  # Hint:\
    \ you can use the following command to get the integer part of a number:\n  #\
    \ integer=$(echo \"$num\" | sed 's/\\..*//')\n  #\n  # Hint: you can use the following\
    \ command to get the number of digits in an integer:\n  # digits=$(echo \"$integer\"\
    \ | wc -c)\n  #\n  # Hint: you can use the following command to get the first\
    \ digit of an integer:\n  # first_digit=$(echo \"$integer\" | sed 's/^\\(.\\).*/\\\
    1/')\n  #\n  # Hint: you can use the following command to get the last digit of\
    \ an integer:\n  # last_digit=$(echo \"$integer\" | sed 's/.*\\(.\\)$/\\1/')\n\
    \  #\n", "    # Your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'", " \
    \ # Write your code here\n  # To print results to the standard output you can\
    \ use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"", "  \
    \  # If the number is equidistant from two integers, round it away from zero.\n\
    \    # The number is equidistant from two integers if the fractional part is 0.5\n\
    \    # and the integer part is even.\n    # If the number is equidistant from\
    \ two integers, round it away from zero.\n    # The number is equidistant from\
    \ two integers if the fractional part is 0.5\n    # and the integer part is even.\n\
    \    if [[ $(echo \"$1\" | awk '{print $1-int($1)}') == 0.5 ]] && \\\n       \
    \ [[ $(echo \"$1\" | awk '{print int($1)%2}') == 0 ]]; then\n        echo \"$1\"\
    \ | awk '{print int($1)+1}'\n    else\n        echo \"$1\" | awk '{print int($1)}'\n\
    \    fi", "    # Your code here\n    echo $1 | awk '{print int($1+0.5)}'", " \
    \ # Write your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo\
    \ \"15\"", '  # your code here', "    # Use awk to round the number\n    # The\
    \ number is rounded to the nearest integer\n    # The number is rounded away from\
    \ zero\n    # The number is rounded to the nearest integer\n    # The number is\
    \ rounded away from zero\n    # The number is rounded to the nearest integer\n\
    \    # The number is rounded away from zero\n    # The number is rounded to the\
    \ nearest integer\n    # The number is rounded away from zero\n    # The number\
    \ is rounded to the nearest integer\n    # The number is rounded away from zero\n\
    \    # The number is rounded to the nearest integer\n    # The number is rounded\
    \ away from zero\n    # The number is rounded to the nearest integer\n    # The\
    \ number is rounded away from zero\n    # The number is rounded to the nearest\
    \ integer\n    # The number is rounded away from zero\n    # The number is rounded\
    \ to the nearest integer\n    # The number is rounded away from zero\n    # The\
    \ number is rounded to the nearest integer\n    # The number is rounded away from\
    \ zero\n    # The number is rounded to the nearest integer\n    # The number is\
    \ rounded away from zero\n    # The number is rounded to the nearest integer\n\
    \    # The number is rounded away from zero\n    # The number is rounded to the\
    \ nearest integer\n    # The number is rounded away from zero\n    # The number\
    \ is rounded to the nearest integer\n    # The number is rounded away from zero\n\
    \    # The number is rounded to the nearest integer\n    # The number is rounded\
    \ away from zero\n    # The number is rounded to the nearest integer\n    # The\
    \ number is rounded away from zero\n    # The number is rounded to the nearest\
    \ integer\n    # The number is rounded away from zero\n    # The number is rounded\
    \ to the nearest integer\n    # The number is rounded away from zero\n    # The\
    \ number is rounded to the nearest integer\n    # The number is rounded away from\
    \ zero\n    # The number is rounded to the nearest integer\n    # The number is\
    \ rounded away from zero\n    # The number is rounded to the nearest integer\n\
    \    # The number is rounded away from zero\n    # The number is rounded to the\
    \ nearest integer\n    # The number is rounded away from zero\n    # The number\
    \ is rounded to the nearest integer\n    # The number is rounded away from zero\n\
    \    # The number is rounded to the nearest integer\n    # The number is rounded\
    \ away", "    echo \"$1\" | awk '{printf \"%d\\n\", $1}'", "  # TODO: implement\
    \ this function\n  # Hint: use the bash builtin command `bc` to perform floating\
    \ point\n  # arithmetic.\n  #\n  # Hint: use the bash builtin command `printf`\
    \ to format the output.\n  #\n  # Hint: use the bash builtin command `echo` to\
    \ print the result.\n  #\n  # Hint: use the bash builtin command `test` to check\
    \ if a number is\n  # positive or negative.\n  #\n  # Hint: use the bash builtin\
    \ command `expr` to perform integer\n  # arithmetic.\n  #\n  # Hint: use the bash\
    \ builtin command `seq` to generate a sequence of\n  # numbers.\n  #\n  # Hint:\
    \ use the bash builtin command `sort` to sort a list of numbers.\n  #\n  # Hint:\
    \ use the bash builtin command `head` to get the first element\n  # of a list.\n\
    \  #\n  # Hint: use the bash builtin command `tail` to get all but the first\n\
    \  # element of a list.\n  #\n  # Hint: use the bash builtin command `wc` to count\
    \ the number of\n  # elements in a list.\n  #\n  # Hint: use the bash builtin\
    \ command `tr` to remove the newline\n  # character from the end of a string.\n\
    \  #\n  # Hint: use the bash builtin command `cut` to remove the decimal\n  #\
    \ point from a number.\n  #\n  # Hint: use the bash builtin command `paste` to\
    \ join two strings\n  # together.\n  #\n  # Hint: use the bash builtin command\
    \ `rev` to reverse a string.\n  #\n  # Hint: use the bash builtin command `sed`\
    \ to remove the minus sign\n  # from a number.\n  #\n  # Hint: use the bash builtin\
    \ command `grep` to find the first number\n  # in a string.\n  #\n  # Hint: use\
    \ the bash builtin command `expr` to perform integer\n  # arithmetic.\n  #\n \
    \ # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \ ", "    # If the number is equidistant from two integers, round it away from\
    \ zero.\n    # Rounding away from zero means that if the given number is equidistant\n\
    \    # from two integers, the one you should return is the one that is the\n \
    \   # farthest from zero. For example closest_integer(\"14.5\") should\n    #\
    \ return 15 and closest_integer(\"-14.5\") should return -15.\n    #\n    # The\
    \ following command will round the number to the nearest integer.\n    # The -l\
    \ option is for long integer.\n    # The -r option is for round away from zero.\n\
    \    # The -n option is for no leading zeros.\n    # The -z option is for zero\
    \ padding.\n    # The -w option is for width.\n    # The -E option is for scientific\
    \ notation.\n    # The -f option is for floating point.\n    # The -e option is\
    \ for exponential notation.\n    # The -g option is for general format.\n    #\
    \ The -i option is for integer.\n    # The -o option is for octal.\n    # The\
    \ -x option is for hexadecimal.\n    # The -X option is for uppercase hexadecimal.\n\
    \    # The -u option is for unsigned decimal.\n    # The -t option is for two's\
    \ complement.\n    # The -b option is for binary.\n    # The -c option is for\
    \ character.\n    # The -d option is for decimal.\n    # The -s option is for\
    \ string.\n    # The -p option is for pointer.\n    # The -a option is for address.\n\
    \    # The -j option is for job control.\n    # The -n option is for numeric user\
    \ or group ID.\n    # The -P option is for port number.\n    # The -I option is\
    \ for IP address.\n    # The -T option is for TCP port number.\n    # The -U option\
    \ is for UDP port number.\n    # The -H option is for hostname.\n    # The -F\
    \ option is for FQDN.\n    # The -v option is for variable.\n    # The -V option\
    \ is for verbose variable.\n    # The -r option is for reverse.\n    # The -R",
  "  # Write your code here\n  # To print results to the standard output you can use\
    \ echo\n  # Example: echo \"Hello world!\"\n  echo \"15\"", "    # Your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'", "  # if the number is equidistant\
    \ from two integers, round it away from zero\n  # if the number is negative, round\
    \ it down\n  # if the number is positive, round it up\n  # if the number is zero,\
    \ return zero\n  # if the number is not a number, return an error\n  # if the\
    \ number is a number, return the closest integer\n  if [[ $1 == *.* ]]; then\n\
    \    # if the number is a decimal\n    if [[ $1 == -* ]]; then\n      # if the\
    \ number is negative\n      echo \"$(echo \"$1\" | cut -d. -f1)\"\n    else\n\
    \      # if the number is positive\n      echo \"$(echo \"$1\" | cut -d. -f1)\"\
    \n    fi\n  else\n    # if the number is an integer\n    echo \"$1\"\n  fi", " \
    \ # your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "  # your code\
    \ here\n  echo \"$1\" | awk '{printf \"%.0f\", $1}'", "    # Get the integer part\
    \ of the number\n    int_part=${1%.*}\n    # Get the decimal part of the number\n\
    \    dec_part=${1#*.}\n    # If the decimal part is greater than or equal to 0.5,\
    \ add 1 to the\n    # integer part and return it. Otherwise, return the integer\
    \ part.\n    if [ $dec_part -ge 5 ]; then\n        echo $((int_part + 1))\n  \
    \  else\n        echo $int_part\n    fi", "    # Write your code here\n    # To\
    \ print results to the standard output you can use echo\n    # Example: echo \"\
    Hello world!\"\n    echo \"Hello world!\"", "  # Write your code here\n  # To\
    \ print results to the standard output you can use echo\n  # Example: echo \"\
    Hello world!\"\n  echo \"15\"", "  # Your code here\n  echo \"Not yet implemented\"",
  "    # TODO: Implement this function\n    # Hint: Use the bash built-in command\
    \ `bc`\n    # Hint: Use the bash built-in command `awk`\n    # Hint: Use the bash\
    \ built-in command `printf`\n    # Hint: Use the bash built-in command `echo`\n\
    \    # Hint: Use the bash built-in command `test`\n    # Hint: Use the bash built-in\
    \ command `expr`\n    # Hint: Use the bash built-in command `cut`\n    # Hint:\
    \ Use the bash built-in command `sed`\n    # Hint: Use the bash built-in command\
    \ `grep`\n    # Hint: Use the bash built-in command `wc`\n    # Hint: Use the\
    \ bash built-in command `sort`\n    # Hint: Use the bash built-in command `uniq`\n\
    \    # Hint: Use the bash built-in command `head`\n    # Hint: Use the bash built-in\
    \ command `tail`\n    # Hint: Use the bash built-in command `tr`\n    # Hint:\
    \ Use the bash built-in command `rev`\n    # Hint: Use the bash built-in command\
    \ `xargs`\n    # Hint: Use the bash built-in command `tee`\n    # Hint: Use the\
    \ bash built-in command `cat`\n    # Hint: Use the bash built-in command `tac`\n\
    \    # Hint: Use the bash built-in command `yes`\n    # Hint: Use the bash built-in\
    \ command `seq`\n    # Hint: Use the bash built-in command `yes`\n    # Hint:\
    \ Use the bash built-in command `seq`\n    # Hint: Use the bash built-in command\
    \ `yes`\n    # Hint: Use the bash built-in command `seq`\n    # Hint: Use the\
    \ bash built-in command `yes`\n    # Hint: Use the bash built-in command `seq`\n\
    \    # Hint: Use the bash built-in command `yes`\n    # Hint: Use the bash built-in\
    \ command `seq`\n    # Hint: Use the bash built-in command `yes`\n", "  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Your code here\n  echo $1 |\
    \ awk '{printf \"%d\\n\", $1}'", "  # your code here\n  echo \"$1\" | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Your code here\n  echo $1 | awk '{print int($1 + 0.5)}'",
  "  # TODO: Implement this function\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'",
  "  # Write your code here\n  # Use echo to print to stdout\n  echo \"15\"", "  \
    \  echo $1 | awk '{printf \"%d\\n\", $1}'", "    # If the number is equidistant\
    \ from two integers, round it away from zero.\n    # Rounding away from zero means\
    \ that if the given number is equidistant\n    # from two integers, the one you\
    \ should return is the one that is the\n    # farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    # return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    #\n    # The bash builtin command `printf` can be used\
    \ to format numbers.\n    #\n    # The bash builtin command `bc` can be used to\
    \ perform calculations.\n    #\n    # The bash builtin command `echo` can be used\
    \ to print strings.\n    #\n    # The bash builtin command `test` can be used\
    \ to compare numbers.\n    #\n    # The bash builtin command `expr` can be used\
    \ to perform calculations.\n    #\n    # The bash builtin command `read` can be\
    \ used to read input.\n    #\n    # The bash builtin command `cut` can be used\
    \ to extract parts of strings.\n    #\n    # The bash builtin command `seq` can\
    \ be used to generate a sequence of numbers.\n    #\n    # The bash builtin command\
    \ `sort` can be used to sort numbers.\n    #\n    # The bash builtin command `head`\
    \ can be used to get the first line of a file.\n    #\n    # The bash builtin\
    \ command `tail` can be used to get the last line of a file.\n    #\n    # The\
    \ bash builtin command `wc` can be used to count lines in a file.\n    #\n   \
    \ # The bash builtin command `tr` can be used to translate characters.\n    #\n\
    \    # The bash builtin command `sed` can be used to replace parts of strings.\n\
    \    #\n    # The bash builtin command `grep` can be used to find strings in files.\n\
    \    #\n    # The bash builtin command `xargs` can be used to execute commands.\n\
    \    #\n    # The bash builtin command `tee` can be used to write to multiple\
    \ files.\n    #\n    # The bash builtin command `cat` can be used to read files.\n\
    \    #\n    # The bash builtin command", "  if [[ $1 == *.* ]]; then\n    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'\n  else\n    echo $1\n  fi", "  # Your code\
    \ here\n  echo \"Not yet implemented\"", "    # Your code here\n    echo $1 |\
    \ awk '{printf \"%d\\n\", $1}'", "  # Use bc to convert the string to a number\
    \ and then round it.\n  # The -l flag is needed to use the standard math library.\n\
    \  # The -0 flag is needed to return an integer.\n  # The -e flag is needed to\
    \ execute the following string.\n  # The \"scale=0\" is needed to round to the\
    \ nearest integer.\n  # The \"if\" statement is needed to round away from zero.\n\
    \  # The \"print\" statement is needed to return the result.\n  # The \"quit\"\
    \ statement is needed to exit bc.\n  # The \"|\" is needed to pipe the result\
    \ to the \"tr\" command.\n  # The \"tr\" command is needed to remove the trailing\
    \ newline.\n  echo \"$1\" | bc -l -0 -e \"scale=0; if ($1 < 0) { print ($1 - 0.5);\
    \ } else { print ($1 + 0.5); }\" -e quit | tr -d '\\n'", "  # your code here\n\
    \  echo $1 | awk '{printf(\"%d\\n\", $1)}'", "  # Write your code here\n  # To\
    \ print results to the standard output you can use echo\n  # Example: echo \"\
    Hello world!\"\n  echo \"Hello world!\"", "  # your code here\n  # You can use\
    \ the following command to round a number to the nearest integer:\n  # echo \"\
    scale=0; $1/1\" | bc\n  # You can use the following command to round a number\
    \ to the nearest integer\n  # away from zero:\n  # echo \"scale=0; $1/1 + ( $1\
    \ > 0 ) - ( $1 < 0 )\" | bc\n  # You can use the following command to round a\
    \ number to the nearest integer\n  # towards zero:\n  # echo \"scale=0; $1/1 -\
    \ ( $1 < 0 )\" | bc\n  # You can use the following command to round a number to\
    \ the nearest integer\n  # towards infinity:\n  # echo \"scale=0; $1/1 + ( $1\
    \ > 0 )\" | bc\n  # You can use the following command to round a number to the\
    \ nearest integer\n  # towards negative infinity:\n  # echo \"scale=0; $1/1 -\
    \ ( $1 > 0 )\" | bc\n  # You can use the following command to round a number to\
    \ the nearest integer\n  # towards zero or away from zero:\n  # echo \"scale=0;\
    \ $1/1 + ( $1 > 0 ) - ( $1 < 0 )\" | bc\n  # You can use the following command\
    \ to round a number to the nearest integer\n  # towards zero or towards infinity:\n\
    \  # echo \"scale=0; $1/1 + ( $1 > 0 ) - ( $1 < 0 )\" | bc\n  # You can use the\
    \ following command to round a number to the nearest integer\n  # towards zero\
    \ or towards negative infinity:\n  # echo \"scale=0; $1/1 + ( $1 > 0 ) - ( $1\
    \ < 0 )\" | bc\n  # You can use the following command to round a number to the\
    \ nearest integer\n  # towards infinity or away from zero:\n  # echo \"scale=0;\
    \ $1/1 + ( $1 > 0 ) - ( $1 < 0 )\" | bc\n  # You can use the following command\
    \ to round a number to the nearest integer\n  # towards negative infinity or away\
    \ from zero:\n  # echo \"scale=0; $1/1 + ( $1 > 0 ) - ( $1", "  # Your code here\n\
    \  # Use echo to print result\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'", '  #
    your code here', "  # Your code here\n  echo \"$1\" | awk '{printf \"%d\\n\",\
    \ $1}'", "  # Write your code here\n  # To debug: echo \"Debug messages...\" >&2\n\
    \  echo \"$1\"", "  # Write your code here\n  # To debug: echo \"Debug messages...\"\
    \ >&2\n  echo \"$1\"", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world!\"\n\
    \    echo \"Hello world!\"", "  # Write your code here\n  # To debug: echo \"\
    Debug messages...\" >&2\n  echo \"Not implemented\"", "    # Your code here\n\
    \    echo $1 | awk '{printf \"%d\\n\", $1}'", "    # Your code here\n    echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'", "  # your code here\n  # hint: use awk\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #", "    echo \"$1\" | awk\
    \ '{printf \"%d\\n\", $1}'", "  # Write your code here\n  echo $1 | awk '{printf\
    \ \"%d\\n\", $1}'", "  # Write your code here\n  # To print results to the standard\
    \ output you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello\
    \ world!\"", "  # Write your code here\n  # To print results to the standard output\
    \ you can use echo\n  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"",
  "    # Your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'", "  # Write your\
    \ code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"15\""]
stop_tokens:
- "\n}"
