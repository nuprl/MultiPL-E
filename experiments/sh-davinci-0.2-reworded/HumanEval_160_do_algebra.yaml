name: HumanEval_160_do_algebra
language: sh
prompt: "#!/bin/bash\n# Given two lists operator, and operand. The first list has\
  \ basic algebra operations, and \n# the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n# expression and return the evaluation\
  \ of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal\
  \ to the length of operand list minus one.\n# Operand is a list of of non-negative\
  \ integers.\n# Operator list has at least one operator, and operand list has at\
  \ least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
  \ list\ndo_algebra() {\n"
tests: "}\n\ncandidate() {\n    do_algebra \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"** * +\" \"2 3 4 5\") = \"37\" ]]\n    [[ $(candidate \"+ * -\"\
  \ \"2 3 4 5\") = \"9\" ]]\n    [[ $(candidate \"// *\" \"7 3 4\") = \"8\" ]]\n}\n\
  \nrun_test"
completions: ["  local -a operator=(\"$1\")\n  local -a operand=(\"$2\")\n  local\
    \ -i result=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n\
    \  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n\
    \  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i\
    \ kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n \
    \ local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i\
    \ tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n \
    \ local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i\
    \ cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n \
    \ local -i hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local\
    \ -i lll=0\n  local -i mmm=0\n  local -", "    local -a operator=(\"$1\")\n  \
    \  local -a operand=(\"$2\")\n    local result=${operand[0]}\n    local i=0\n\
    \    while [ $i -lt ${#operator[@]} ]; do\n        case ${operator[$i]} in\n \
    \           '+') result=$((result + ${operand[$((i+1))]}));;\n            '-')\
    \ result=$((result - ${operand[$((i+1))]}));;\n            '*') result=$((result\
    \ * ${operand[$((i+1))]}));;\n            '//') result=$((result / ${operand[$((i+1))]}));;\n\
    \            '**') result=$((result ** ${operand[$((i+1))]}));;\n        esac\n\
    \        ((i++))\n    done\n    echo $result", "    local -a operator=($1)\n \
    \   local -a operand=($2)\n    local result=${operand[0]}\n    local i=0\n   \
    \ local j=1\n    while [ $i -lt ${#operator[@]} ]; do\n        case ${operator[$i]}\
    \ in\n            '+')\n                result=$((result + ${operand[$j]}))\n\
    \                ;;\n            '-')\n                result=$((result - ${operand[$j]}))\n\
    \                ;;\n            '*')\n                result=$((result * ${operand[$j]}))\n\
    \                ;;\n            '//')\n                result=$((result / ${operand[$j]}))\n\
    \                ;;\n            '**')\n                result=$((result ** ${operand[$j]}))\n\
    \                ;;\n        esac\n        i=$((i + 1))\n        j=$((j + 1))\n\
    \    done\n    echo $result", "    local operator=\"$1\"\n    local operand=\"\
    $2\"\n    local result=0\n    local i=0\n    local j=0\n    local op=()\n    local\
    \ opr=()\n    local op_len=0\n    local opr_len=0\n    local op_str=\"\"\n   \
    \ local opr_str=\"\"\n    local op_arr=()\n    local opr_arr=()\n    local op_arr_len=0\n\
    \    local opr_arr_len=0\n    local op_arr_str=\"\"\n    local opr_arr_str=\"\"\
    \n    local op_arr_str_len=0\n    local opr_arr_str_len=0\n    local op_arr_str_len_1=0\n\
    \    local opr_arr_str_len_1=0\n    local op_arr_str_len_2=0\n    local opr_arr_str_len_2=0\n\
    \    local op_arr_str_len_3=0\n    local opr_arr_str_len_3=0\n    local op_arr_str_len_4=0\n\
    \    local opr_arr_str_len_4=0\n    local op_arr_str_len_5=0\n    local opr_arr_str_len_5=0\n\
    \    local op_arr_str_len_6=0\n    local opr_arr_str_len_6=0\n    local op_arr_str_len_7=0\n\
    \    local opr_arr_str_len_7=0\n    local op_arr_str_len_8=0\n    local opr_arr_str_len_8=0\n\
    \    local op_arr_str_len_9=0\n    local opr_arr_str_len_9=0\n    local op_arr_str_len_10=0\n\
    \    local opr_arr_str_len_10=0\n    local op_arr_str_len_11=0\n    local opr_arr_str_len_11=0\n\
    \    local op_arr_str_len_12=0\n    local opr_arr_str_len_12=0\n   ", "    local\
    \ -a operator=($1)\n    local -a operand=($2)\n    local result=${operand[0]}\n\
    \    local i=0\n    while [ $i -lt ${#operator[@]} ]; do\n        case ${operator[$i]}\
    \ in\n            \"+\") result=$((result + ${operand[$((i+1))]}));;\n       \
    \     \"-\") result=$((result - ${operand[$((i+1))]}));;\n            \"*\") result=$((result\
    \ * ${operand[$((i+1))]}));;\n            \"//\") result=$((result / ${operand[$((i+1))]}));;\n\
    \            \"**\") result=$((result ** ${operand[$((i+1))]}));;\n        esac\n\
    \        i=$((i+1))\n    done\n    echo $result", "  local -a operator=(\"$1\"\
    )\n  local -a operand=(\"$2\")\n  local result=${operand[0]}\n  local i=0\n  local\
    \ op=${operator[0]}\n  local operand=${operand[1]}\n  for op in \"${operator[@]}\"\
    ; do\n    operand=${operand[$i]}\n    case $op in\n      '+')\n        result=$((result\
    \ + operand))\n        ;;\n      '-')\n        result=$((result - operand))\n\
    \        ;;\n      '*')\n        result=$((result * operand))\n        ;;\n  \
    \    '//')\n        result=$((result / operand))\n        ;;\n      '**')\n  \
    \      result=$((result ** operand))\n        ;;\n    esac\n    i=$((i + 1))\n\
    \  done\n  echo $result", "    local op=$1\n    local array=$2\n    local result=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local op_arr=()\n    local array_arr=()\n\
    \    local op_arr_len=0\n    local array_arr_len=0\n    local op_arr_len_minus_one=0\n\
    \    local op_arr_len_minus_two=0\n    local op_arr_len_minus_three=0\n    local\
    \ op_arr_len_minus_four=0\n    local op_arr_len_minus_five=0\n    local op_arr_len_minus_six=0\n\
    \    local op_arr_len_minus_seven=0\n    local op_arr_len_minus_eight=0\n    local\
    \ op_arr_len_minus_nine=0\n    local op_arr_len_minus_ten=0\n    local op_arr_len_minus_eleven=0\n\
    \    local op_arr_len_minus_twelve=0\n    local op_arr_len_minus_thirteen=0\n\
    \    local op_arr_len_minus_fourteen=0\n    local op_arr_len_minus_fifteen=0\n\
    \    local op_arr_len_minus_sixteen=0\n    local op_arr_len_minus_seventeen=0\n\
    \    local op_arr_len_minus_eighteen=0\n    local op_arr_len_minus_nineteen=0\n\
    \    local op_arr_len_minus_twenty=0\n    local op_arr_len_minus_twenty_one=0\n\
    \    local op_arr_len_minus_twenty_two=0\n    local op_arr_len_minus_twenty_three=0\n\
    \    local op_arr_len_minus_twenty_four=0\n    local op_arr_len_minus_twenty_five=0\n\
    \    local op_arr_len_minus_twenty_six=0\n    local op_arr_len_minus_twenty_seven=0\n\
    \    local op_arr_len_minus_twenty_eight=0\n    local op_arr_len_minus_twenty",
  "  local -a operator=(\"$1\")\n  local -a operand=(\"$2\")\n  local -a result\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm", "  local -a operator=($1)\n  local -a operand=($2)\n  local\
    \ -a result=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n\
    \  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n\
    \  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n\
    \  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n\
    \  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i\
    \ ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n \
    \ local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n\
    \  local -i ccc=0\n  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local\
    \ -i ggg=0\n  local -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n\
    \  local -i lll=0\n  local -i mmm", "  local -a operator=($1)\n  local -a operand=($2)\n\
    \  local result=${operand[0]}\n  for ((i=0; i<${#operator[@]}; i++)); do\n   \
    \ case ${operator[$i]} in\n      '+') result=$((result + ${operand[$((i+1))]}))\
    \ ;;\n      '-') result=$((result - ${operand[$((i+1))]})) ;;\n      '*') result=$((result\
    \ * ${operand[$((i+1))]})) ;;\n      '//') result=$((result / ${operand[$((i+1))]}))\
    \ ;;\n      '**') result=$((result ** ${operand[$((i+1))]})) ;;\n    esac\n  done\n\
    \  echo $result", "    local -a operator=($1)\n    local -a operand=($2)\n   \
    \ local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n \
    \   local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local\
    \ -i mmm", "    local -a operator=(\"$1\")\n    local -a operand=(\"$2\")\n  \
    \  local result=${operand[0]}\n    local i=0\n    local j=1\n    local op\n  \
    \  local opd\n    while [ $i -lt ${#operator[@]} ]; do\n        op=${operator[$i]}\n\
    \        opd=${operand[$j]}\n        case $op in\n            '+')\n         \
    \       result=$((result + opd))\n                ;;\n            '-')\n     \
    \           result=$((result - opd))\n                ;;\n            '*')\n \
    \               result=$((result * opd))\n                ;;\n            '//')\n\
    \                result=$((result / opd))\n                ;;\n            '**')\n\
    \                result=$((result ** opd))\n                ;;\n        esac\n\
    \        ((i++))\n        ((j++))\n    done\n    echo $result", "    local operator=($1)\n\
    \    local operand=($2)\n    local result=${operand[0]}\n    local i=0\n    local\
    \ j=1\n    while [ $i -lt ${#operator[@]} ]; do\n        case ${operator[$i]}\
    \ in\n            '+') result=$((result + ${operand[$j]}));;\n            '-')\
    \ result=$((result - ${operand[$j]}));;\n            '*') result=$((result * ${operand[$j]}));;\n\
    \            '//') result=$((result / ${operand[$j]}));;\n            '**') result=$((result\
    \ ** ${operand[$j]}));;\n        esac\n        i=$((i + 1))\n        j=$((j +\
    \ 1))\n    done\n    echo $result", "  local -a operator=($1)\n  local -a operand=($2)\n\
    \  local -i i=0\n  local -i result=${operand[0]}\n  local -i len=${#operator[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    case ${operator[i]} in\n      '+') result=$((result\
    \ + ${operand[i+1]})) ;;\n      '-') result=$((result - ${operand[i+1]})) ;;\n\
    \      '*') result=$((result * ${operand[i+1]})) ;;\n      '//') result=$((result\
    \ / ${operand[i+1]})) ;;\n      '**') result=$((result ** ${operand[i+1]})) ;;\n\
    \    esac\n  done\n  echo $result", "  local -a operator=($1)\n  local -a operand=($2)\n\
    \  local result=${operand[0]}\n  local i=0\n  while [ $i -lt ${#operator[@]} ];\
    \ do\n    case ${operator[$i]} in\n      '+') result=$((result + ${operand[$((i+1))]}));;\n\
    \      '-') result=$((result - ${operand[$((i+1))]}));;\n      '*') result=$((result\
    \ * ${operand[$((i+1))]}));;\n      '//') result=$((result / ${operand[$((i+1))]}));;\n\
    \      '**') result=$((result ** ${operand[$((i+1))]}));;\n    esac\n    ((i++))\n\
    \  done\n  echo $result", "  local -a operator=($1)\n  local -a operand=($2)\n\
    \  local result=${operand[0]}\n  local i=0\n  local j=1\n  while [ $i -lt ${#operator[@]}\
    \ ]; do\n    case ${operator[$i]} in\n      '+') result=$((result + operand[$j]))\
    \ ;;\n      '-') result=$((result - operand[$j])) ;;\n      '*') result=$((result\
    \ * operand[$j])) ;;\n      '//') result=$((result / operand[$j])) ;;\n      '**')\
    \ result=$((result ** operand[$j])) ;;\n    esac\n    i=$((i + 1))\n    j=$((j\
    \ + 1))\n  done\n  echo $result", "  local -a operator=($1)\n  local -a operand=($2)\n\
    \  local result=${operand[0]}\n  local i=0\n  local j=1\n  while [ $i -lt ${#operator[@]}\
    \ ]; do\n    case ${operator[$i]} in\n      '+') result=$((result + operand[$j]))\
    \ ;;\n      '-') result=$((result - operand[$j])) ;;\n      '*') result=$((result\
    \ * operand[$j])) ;;\n      '//') result=$((result / operand[$j])) ;;\n      '**')\
    \ result=$((result ** operand[$j])) ;;\n    esac\n    ((i++))\n    ((j++))\n \
    \ done\n  echo $result", "    local operator=($1)\n    local operand=($2)\n  \
    \  local result=${operand[0]}\n    local i=0\n    local j=1\n    while [ $i -lt\
    \ ${#operator[@]} ]; do\n        case ${operator[$i]} in\n            \"+\")\n\
    \                result=$((result + ${operand[$j]}))\n                ;;\n   \
    \         \"-\")\n                result=$((result - ${operand[$j]}))\n      \
    \          ;;\n            \"*\")\n                result=$((result * ${operand[$j]}))\n\
    \                ;;\n            \"//\")\n                result=$((result / ${operand[$j]}))\n\
    \                ;;\n            \"**\")\n                result=$((result **\
    \ ${operand[$j]}))\n                ;;\n        esac\n        i=$((i + 1))\n \
    \       j=$((j + 1))\n    done\n    echo $result", "  local -a operator=(\"$1\"\
    )\n  local -a operand=(\"$2\")\n  local result=0\n  local i=0\n  local op=0\n\
    \  local op1=0\n  local op2=0\n  local op_len=${#operator[@]}\n  local opd_len=${#operand[@]}\n\
    \  local opd_len_minus_one=$((opd_len - 1))\n  if [ $op_len -ne $opd_len_minus_one\
    \ ]; then\n    echo \"operator list length is not equal to operand list length\
    \ minus one\"\n    return 1\n  fi\n  if [ $op_len -lt 1 ]; then\n    echo \"operator\
    \ list has at least one operator\"\n    return 1\n  fi\n  if [ $opd_len -lt 2\
    \ ]; then\n    echo \"operand list has at least two operands\"\n    return 1\n\
    \  fi\n  result=${operand[0]}\n  for ((i=0; i<$op_len; i++)); do\n    op=${operator[$i]}\n\
    \    op1=${operand[$i]}\n    op2=${operand[$((i+1))]}\n    case $op in\n     \
    \ \"+\")\n        result=$((result + op2))\n        ;;\n      \"-\")\n       \
    \ result=$((result - op2))\n        ;;\n      \"*\")\n        result=$((result\
    \ * op2))\n        ;;\n      \"//\")\n        result=$((result / op2))\n     \
    \   ;;\n      \"**\")\n        result=$((result ** op2))\n        ;;\n      *)\n\
    \        echo \"unknown operator $op\"\n        return 1\n        ;;\n    esac\n\
    \  done\n  echo $result", "  local -a operator=(\"$1\")\n  local -a operand=(\"\
    $2\")\n  local result=${operand[0]}\n  local i=0\n  while [ $i -lt ${#operator[@]}\
    \ ]; do\n    case ${operator[$i]} in\n      '+') result=$((result + ${operand[$((i+1))]}));;\n\
    \      '-') result=$((result - ${operand[$((i+1))]}));;\n      '*') result=$((result\
    \ * ${operand[$((i+1))]}));;\n      '//') result=$((result / ${operand[$((i+1))]}));;\n\
    \      '**') result=$((result ** ${operand[$((i+1))]}));;\n    esac\n    i=$((i+1))\n\
    \  done\n  echo $result"]
stop_tokens:
- "\n}"
