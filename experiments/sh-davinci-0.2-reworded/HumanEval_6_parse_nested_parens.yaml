name: HumanEval_6_parse_nested_parens
language: sh
prompt: "#!/bin/bash\n# Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n# For each of the group, output the\
  \ deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((()))\
  \ () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\n\
  parse_nested_parens() {\n"
tests: "}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
  \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
  \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
completions: ["  local str=$1\n  local paren_count=0\n  local max_paren_count=0\n\
    \  local max_paren_count_list=()\n  local i=0\n  local len=${#str}\n  for (( i=0;\
    \ i<$len; i++ )); do\n    local ch=${str:$i:1}\n    if [[ $ch == \"(\" ]]; then\n\
    \      (( paren_count++ ))\n      if (( paren_count > max_paren_count )); then\n\
    \        max_paren_count=$paren_count\n      fi\n    elif [[ $ch == \")\" ]];\
    \ then\n      (( paren_count-- ))\n    elif [[ $ch == \" \" ]]; then\n      max_paren_count_list+=($max_paren_count)\n\
    \      max_paren_count=0\n    fi\n  done\n  max_paren_count_list+=($max_paren_count)\n\
    \  echo ${max_paren_count_list[@]}", "  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local parens_arr_idx=0\n  local parens_arr_idx_len=0\n  local\
    \ parens_arr_idx_len_prev=0\n  local parens_arr_idx_len_diff=0\n  local parens_arr_idx_len_diff_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev=0\n  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \ local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_arr_idx_len_diff_prev_prev_prev_prev", "  local str=\"$1\"\n \
    \ local str_arr=($str)\n  local max_level=0\n  local level=0\n  local result=()\n\
    \  for i in \"${str_arr[@]}\"; do\n    for (( j=0; j<${#i}; j++ )); do\n     \
    \ if [[ ${i:$j:1} == \"(\" ]]; then\n        ((level++))\n        if (( level\
    \ > max_level )); then\n          max_level=$level\n        fi\n      elif [[\
    \ ${i:$j:1} == \")\" ]]; then\n        ((level--))\n      fi\n    done\n    result+=(\"\
    \\\"$max_level\\\"\")\n    max_level=0\n    level=0\n  done\n  echo \"${result[@]}\"",
  "  local input=$1\n  local output=()\n  for group in $input; do\n    local max_depth=0\n\
    \    local curr_depth=0\n    for ((i=0; i<${#group}; i++)); do\n      local char=${group:$i:1}\n\
    \      if [[ $char == \"(\" ]]; then\n        ((curr_depth++))\n        if ((curr_depth\
    \ > max_depth)); then\n          max_depth=$curr_depth\n        fi\n      elif\
    \ [[ $char == \")\" ]]; then\n        ((curr_depth--))\n      fi\n    done\n \
    \   output+=(\"$max_depth\")\n  done\n  echo \"${output[@]}\"", "    local paren_string=$1\n\
    \    local paren_array=($paren_string)\n    local paren_count\n    local paren_max_count\n\
    \    local paren_max_count_array\n    local paren_max_count_array_index\n    local\
    \ paren_max_count_array_index_str\n    local paren_max_count_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index\n    local paren_max_count_array_index_str_array_index_str\n\
    \    local paren_max_count_array_index_str_array_index_str_array\n    local paren_max_count_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str\n \
    \   local paren_max_count_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str_array\n\
    \    local paren_max_count_array_index_str_array_index_str_array_index_str_array_index_str_array_index_str_array_index\n\
    \    local paren_max_count_array_index_str", "  # TODO: implement this function\n\
    \  # Hint: use the following command to get the number of opening parentheses\n\
    \  # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the following command\
    \ to get the number of closing parentheses\n  # $ echo \"(()())\" | grep -o \"\
    )\" | wc -l\n  # Hint: use the following command to get the number of opening\
    \ parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the\
    \ following command to get the number of closing parentheses\n  # $ echo \"(()())\"\
    \ | grep -o \")\" | wc -l\n  # Hint: use the following command to get the number\
    \ of opening parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc -l\n  # Hint:\
    \ use the following command to get the number of closing parentheses\n  # $ echo\
    \ \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the following command to get\
    \ the number of opening parentheses\n  # $ echo \"(()())\" | grep -o \"(\" | wc\
    \ -l\n  # Hint: use the following command to get the number of closing parentheses\n\
    \  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the following command\
    \ to get the number of opening parentheses\n  # $ echo \"(()())\" | grep -o \"\
    (\" | wc -l\n  # Hint: use the following command to get the number of closing\
    \ parentheses\n  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint: use the\
    \ following command to get the number of opening parentheses\n  # $ echo \"(()())\"\
    \ | grep -o \"(\" | wc -l\n  # Hint: use the following command to get the number\
    \ of closing parentheses\n  # $ echo \"(()())\" | grep -o \")\" | wc -l\n  # Hint:\
    \ use the following command to get the number of opening parentheses\n  # $ echo\
    \ \"(()())\" | grep -o \"(\" | wc -l\n  # Hint: use the following command to get\
    \ the number of closing parentheses\n  # $ echo", "  local str=$1\n  local arr=()\n\
    \  local i=0\n  for group in $str; do\n    local count=0\n    local max=0\n  \
    \  for ((i=0; i<${#group}; i++)); do\n      if [[ ${group:$i:1} == \"(\" ]]; then\n\
    \        ((count++))\n        if ((count > max)); then\n          max=$count\n\
    \        fi\n      elif [[ ${group:$i:1} == \")\" ]]; then\n        ((count--))\n\
    \      fi\n    done\n    arr+=(\"$max\")\n  done\n  echo ${arr[@]}", "    local\
    \ str=$1\n    local max_level=0\n    local level=0\n    local output=()\n    for\
    \ (( i=0; i<${#str}; i++ )); do\n        local c=${str:$i:1}\n        if [[ $c\
    \ == \"(\" ]]; then\n            (( level++ ))\n            if (( level > max_level\
    \ )); then\n                max_level=$level\n            fi\n        elif [[\
    \ $c == \")\" ]]; then\n            (( level-- ))\n        elif [[ $c == \" \"\
    \ ]]; then\n            output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n\
    \            level=0\n        fi\n    done\n    output+=(\"\\\"$max_level\\\"\"\
    )\n    echo \"${output[@]}\"", "    local str=$1\n    local parens_list=()\n \
    \   local parens_count=0\n    local max_parens_count=0\n    local max_parens_list=()\n\
    \    local parens_list_str=\"\"\n    local max_parens_list_str=\"\"\n\n    for\
    \ (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1} == \"(\" ]]; then\n\
    \            ((parens_count++))\n            parens_list+=($parens_count)\n  \
    \      elif [[ ${str:$i:1} == \")\" ]]; then\n            if [[ $parens_count\
    \ -gt $max_parens_count ]]; then\n                max_parens_count=$parens_count\n\
    \                max_parens_list=(\"${parens_list[@]}\")\n            fi\n   \
    \         parens_list=(\"${parens_list[@]:0:$((${#parens_list[@]}-1))}\")\n  \
    \          ((parens_count--))\n        fi\n    done\n\n    parens_list_str=$(printf\
    \ '\"%s\" ' \"${parens_list[@]}\")\n    max_parens_list_str=$(printf '\"%s\" '\
    \ \"${max_parens_list[@]}\")\n    echo \"[$parens_list_str]\"\n    echo \"[$max_parens_list_str]\"",
  "  local str=$1\n  local parens_depth=0\n  local max_depth=0\n  local max_depth_list=()\n\
    \  local parens_depth_list=()\n  local parens_depth_list_index=0\n  local max_depth_list_index=0\n\
    \  local parens_depth_list_index_list=()\n  local max_depth_list_index_list=()\n\
    \  local parens_depth_list_index_list_index=0\n  local max_depth_list_index_list_index=0\n\
    \  local parens_depth_list_index_list_index_list=()\n  local max_depth_list_index_list_index_list=()\n\
    \  local parens_depth_list_index_list_index_list_index=0\n  local max_depth_list_index_list_index_list_index=0\n\
    \  local parens_depth_list_index_list_index_list_index_list=()\n  local max_depth_list_index_list_index_list_index_list=()\n\
    \  local parens_depth_list_index_list_index_list_index_list_index=0\n  local max_depth_list_index_list_index_list_index_list_index=0\n\
    \  local parens_depth_list_index_list_index_list_index_list_index_list=()\n  local\
    \ max_depth_list_index_list_index_list_index_list_index_list=()\n  local parens_depth_list_index_list_index_list_index_list_index_list_index=0\n\
    \  local max_depth_list_index_list_index_list_index_list_index_list_index=0\n\
    \  local parens_depth_list_index_list_index_list_index_list_index_list_index_list=()\n\
    \  local max_depth_list_index_list_index_list_index_list_index_list_index_list=()\n\
    \  local parens_depth_list_index_list_index_list_index_list_index_list", "   \
    \ local parens=\"$1\"\n    local result=()\n    local max_depth=0\n    local depth=0\n\
    \    local i=0\n    local c=''\n    local len=${#parens}\n    while [ $i -lt $len\
    \ ]; do\n        c=${parens:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n    \
    \        ((depth++))\n            if [ $depth -gt $max_depth ]; then\n       \
    \         max_depth=$depth\n            fi\n        elif [ \"$c\" == \")\" ];\
    \ then\n            ((depth--))\n        elif [ \"$c\" == \" \" ]; then\n    \
    \        result+=(\"$max_depth\")\n            max_depth=0\n            depth=0\n\
    \        fi\n        ((i++))\n    done\n    result+=(\"$max_depth\")\n    echo\
    \ \"${result[@]}\"", "  local input=\"$1\"\n  local output=()\n  local max_level=0\n\
    \  local level=0\n  local char\n  for (( i=0; i<${#input}; i++ )); do\n    char=\"\
    ${input:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n      (( level++ ))\n\
    \      if (( level > max_level )); then\n        max_level=$level\n      fi\n\
    \    elif [[ \"$char\" == \")\" ]]; then\n      (( level-- ))\n    elif [[ \"\
    $char\" == \" \" ]]; then\n      output+=(\"$max_level\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  output+=(\"$max_level\")\n  echo \"${output[@]}\"",
  "    local parens_str=\"$1\"\n    local result=()\n    local parens_list=($parens_str)\n\
    \    for parens in \"${parens_list[@]}\"; do\n        local max_level=0\n    \
    \    local current_level=0\n        for (( i=0; i<${#parens}; i++ )); do\n   \
    \         local char=${parens:$i:1}\n            if [[ \"$char\" == \"(\" ]];\
    \ then\n                ((current_level++))\n                if ((current_level\
    \ > max_level)); then\n                    max_level=$current_level\n        \
    \        fi\n            elif [[ \"$char\" == \")\" ]]; then\n               \
    \ ((current_level--))\n            fi\n        done\n        result+=(\"$max_level\"\
    )\n    done\n    echo \"${result[@]}\"", "  local str=\"$1\"\n  local max_level=0\n\
    \  local level=0\n  local output=()\n  for ((i=0; i<${#str}; i++)); do\n    local\
    \ c=\"${str:$i:1}\"\n    if [[ \"$c\" == \"(\" ]]; then\n      ((level++))\n \
    \     if ((level > max_level)); then\n        max_level=$level\n      fi\n   \
    \ elif [[ \"$c\" == \")\" ]]; then\n      ((level--))\n    elif [[ \"$c\" == \"\
    \ \" ]]; then\n      output+=(\"\\\"$max_level\\\"\")\n      max_level=0\n   \
    \   level=0\n    fi\n  done\n  output+=(\"\\\"$max_level\\\"\")\n  echo \"${output[@]}\"",
  "  # TODO: Write your code here\n  # Please use the echo command to output the answer\
    \ (e.g. echo \"1 2 3\")\n  echo \"1 2 3\"", "  local input=$1\n  local result=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n \
    \     ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      result+=(\"\\\"$max_depth\\\"\")\n   \
    \   max_depth=0\n      depth=0\n    fi\n  done\n  result+=(\"\\\"$max_depth\\\"\
    \")\n  echo \"${result[@]}\"", "  local parens=$1\n  local max_depth=0\n  local\
    \ curr_depth=0\n  local parens_arr=()\n  local parens_arr_idx=0\n  for (( i=0;\
    \ i<${#parens}; i++ )); do\n    if [[ ${parens:$i:1} == \"(\" ]]; then\n     \
    \ ((curr_depth++))\n      if (( curr_depth > max_depth )); then\n        max_depth=$curr_depth\n\
    \      fi\n    elif [[ ${parens:$i:1} == \")\" ]]; then\n      ((curr_depth--))\n\
    \    elif [[ ${parens:$i:1} == \" \" ]]; then\n      parens_arr[$parens_arr_idx]=$max_depth\n\
    \      ((parens_arr_idx++))\n      max_depth=0\n      curr_depth=0\n    fi\n \
    \ done\n  parens_arr[$parens_arr_idx]=$max_depth\n  echo ${parens_arr[@]}", " \
    \ local parens=$1\n  local parens_arr=($parens)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len - 1))\n\
    \  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev\n \
    \ local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str", "  local str=\"\
    $1\"\n  local arr=()\n  local max_level=0\n  local level=0\n  local i=0\n  local\
    \ len=${#str}\n  local c\n  local c_prev\n  local c_next\n  local c_next_next\n\
    \  local c_prev_prev\n  local c_prev_prev_prev\n  local c_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
  "  local input=$1\n  local output=()\n  local max_nesting=0\n  local current_nesting=0\n\
    \  local i=0\n  local c=''\n  local len=${#input}\n  while [ $i -lt $len ]; do\n\
    \    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ]; then\n      current_nesting=$((current_nesting\
    \ + 1))\n      if [ $current_nesting -gt $max_nesting ]; then\n        max_nesting=$current_nesting\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      current_nesting=$((current_nesting\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"$max_nesting\\\
    \"\")\n      max_nesting=0\n      current_nesting=0\n    fi\n    i=$((i + 1))\n\
    \  done\n  output+=(\"\\\"$max_nesting\\\"\")\n  echo ${output[@]}"]
stop_tokens:
- "\n}"
