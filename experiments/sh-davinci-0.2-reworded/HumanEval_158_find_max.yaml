name: HumanEval_158_find_max
language: sh
prompt: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list\
  \ contains different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> $(find_max \"name of string\"\
  )\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max\
  \ \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max()\
  \ {\n"
tests: "}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
  \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
  \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game\
  \ of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") =\
  \ \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n  \
  \  [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") =\
  \ \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
completions: ["  local max_word=\"\"\n  local max_count=0\n  for word in $1; do\n\
    \    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if [[ $count\
    \ -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n    fi\n\
    \  done\n  echo $max_word", "    # TODO: Write your code here\n    # Please use\
    \ the $1 variable to access the list of strings\n    # Please use the echo command\
    \ to return the result\n    # Please use the return command to return the exit\
    \ code\n    #\n    # Example:\n    # echo \"Hello World\"\n    # return 0\n  \
    \  #\n    # Example:\n    # echo \"Error\" >&2\n    # return 1\n    #\n    # Example:\n\
    \    # echo \"Hello World\"\n    # echo \"Error\" >&2\n    # return 1\n    #\n\
    \    # Example:\n    # echo \"Hello World\"\n    # return 1\n    #\n    # Example:\n\
    \    # echo \"Error\" >&2\n    # return 0\n    #\n    # Example:\n    # echo \"\
    Hello World\"\n    # echo \"Error\" >&2\n    # return 0\n    #\n    # Example:\n\
    \    # return 1\n    #\n    # Example:\n    # return 0\n    #\n    # Example:\n\
    \    # echo \"Hello World\"\n    # return\n    #\n    # Example:\n    # echo \"\
    Error\" >&2\n    # return\n    #\n    # Example:\n    # echo \"Hello World\"\n\
    \    # echo \"Error\" >&2\n    # return\n    #\n    # Example:\n    # return",
  "    # First, we split the list into an array\n    IFS=' ' read -r -a array <<<\
    \ \"$1\"\n    # Then, we sort the array by the number of unique characters in\
    \ each word\n    # and then by lexicographical order\n    sorted=($(printf '%s\\\
    n' \"${array[@]}\" | sort -u -k1,1 -k2,2))\n    # Finally, we print the last word\
    \ in the sorted array\n    echo \"${sorted[-1]}\"", "    # TODO: Write your code\
    \ here\n    # Please use find_max to declare your function\n    # it is a good\
    \ practice to name your function as\n    # the name of the task\n    #\n    #\
    \ You can write additional functions if needed\n    #\n    # Your code starts\
    \ here\n    # Your code ends here", "    # TODO: implement this function\n   \
    \ # Hint: use the following command to sort the list of words\n    # according\
    \ to the number of unique characters in each word:\n    # sort -k2 -t: <<< \"\
    $(printf \"%s:%s\\n\" \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -k1 -n)\"\n\
    \    # The output of the above command is a list of words, each followed by a\
    \ colon and\n    # the number of unique characters in the word.\n    # You can\
    \ use the cut command to extract the word from the output of the above command.\n\
    \    # You can use the sort command to sort the output of the above command according\
    \ to the\n    # number of unique characters in each word.\n    # You can use the\
    \ head command to return the first word in the sorted list.\n    #\n    # Hint:\
    \ use the following command to sort the list of words\n    # according to the\
    \ number of unique characters in each word,\n    # and then according to the lexicographical\
    \ order:\n    # sort -k2 -t: <<< \"$(printf \"%s:%s\\n\" \"$1\" | tr ' ' '\\n'\
    \ | sort | uniq -c | sort -k1 -n)\"\n    #\n    # Hint: use the following command\
    \ to sort the list of words\n    # according to the lexicographical order,\n \
    \   # and then according to the number of unique characters in each word:\n  \
    \  # sort -k2 -t: <<< \"$(printf \"%s:%s\\n\" \"$1\" | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -k1 -n)\"\n    #\n    # Hint: use the following command to sort the\
    \ list of words\n    # according to the lexicographical order,\n    # and then\
    \ according to the number of unique characters in each word,\n    # and then according\
    \ to the length of each word:\n    # sort -k2 -t: <<< \"$(printf \"%s:%s\\n\"\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -k1 -n)\"\n    #\n    # Hint:\
    \ use the following command to sort the list of words\n    #", "    local max_word=\"\
    \"\n    local max_count=0\n    for word in $1; do\n        local count=$(echo\
    \ $word | grep -o . | sort | uniq | wc -l)\n        if [[ $count -gt $max_count\
    \ ]]; then\n            max_count=$count\n            max_word=$word\n       \
    \ fi\n    done\n    echo $max_word", "    local max_word=\"\"\n    local max_len=0\n\
    \    for word in $1; do\n        local len=$(echo -n $word | grep -o . | sort\
    \ | uniq | wc -l)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word", "    #\
    \ We need to split the list into an array\n    # We can use the read command to\
    \ do this\n    # The -a option tells read to put the result in an array\n    #\
    \ The -d option tells read to use a space as the delimiter\n    read -a words\
    \ -d \" \" <<< \"$1\"\n\n    # We need to keep track of the maximum number of\
    \ unique characters\n    # and the word with that number of unique characters\n\
    \    max_unique=0\n    max_word=\"\"\n\n    # Loop through the array of words\n\
    \    for word in \"${words[@]}\"; do\n        # We need to count the number of\
    \ unique characters in the word\n        # We can use the tr command to remove\
    \ duplicate characters\n        # The -d option tells tr to delete the characters\n\
    \        # The -c option tells tr to complement the set of characters\n      \
    \  # The -s option tells tr to squeeze repeated characters\n        # The result\
    \ is the number of unique characters\n        unique=$(tr -d -c -s \"$word\" |\
    \ wc -c)\n\n        # If the number of unique characters is greater than the current\n\
    \        # maximum, update the maximum and the word with that maximum\n      \
    \  if (( unique > max_unique )); then\n            max_unique=$unique\n      \
    \      max_word=$word\n        fi\n    done\n\n    # Return the word with the\
    \ maximum number of unique characters\n    echo \"$max_word\"", "    local max_word=\"\
    \"\n    local max_count=0\n    for word in $1; do\n        local count=$(echo\
    \ $word | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "    # TODO: Write your code here\n    # Please\
    \ use find_max to declare your function\n    # NOTE: For your convenience, the\
    \ input string is available in $1\n    #       You can access it as ${1}\n   \
    \ # NOTE: Please use echo to print the output string\n    # NOTE: You can use\
    \ `man ascii` to know the ascii value of a character\n    # NOTE: You can use\
    \ `man sort` to sort the output string\n    # NOTE: You can use `man tr` to translate\
    \ characters\n    # NOTE: You can use `man wc` to count the number of words\n\
    \    # NOTE: You can use `man uniq` to remove duplicate words\n    # NOTE: You\
    \ can use `man head` to get the first line\n    # NOTE: You can use `man tail`\
    \ to get the last line\n    # NOTE: You can use `man rev` to reverse the string\n\
    \    # NOTE: You can use `man cut` to cut the string\n    # NOTE: You can use\
    \ `man expr` to evaluate arithmetic expressions\n    # NOTE: You can use `man\
    \ bc` to evaluate arithmetic expressions\n    # NOTE: You can use `man tr` to\
    \ translate characters\n    # NOTE: You can use `man sort` to sort the output\
    \ string\n    # NOTE: You can use `man wc` to count the number of words\n    #\
    \ NOTE: You can use `man uniq` to remove duplicate words\n    # NOTE: You can\
    \ use `man head` to get the first line\n    # NOTE: You can use `man tail` to\
    \ get the last line\n    # NOTE: You can use `man rev` to reverse the string\n\
    \    # NOTE: You can use `man cut` to cut the string\n    # NOTE: You can use\
    \ `man expr` to evaluate arithmetic expressions\n    # NOTE: You can use `man\
    \ bc` to evaluate arithmetic expressions\n    # NOTE: You can use `man tr` to\
    \ translate characters\n    # NOTE: You can use `man sort` to sort the output\
    \ string\n    # NOTE: You can use `man wc` to count the number of words\n    #\
    \ NOTE: You can use `man uniq` to remove duplicate words\n    # NOTE: You can\
    \ use `man head` to get the first line\n    # NOTE: You can", "    local max_word=\"\
    \"\n    local max_count=0\n    local word=\"\"\n    local count=0\n    for word\
    \ in $1; do\n        count=$(echo $word | sed -e 's/\\(.\\)/\\1\\n/g' | sort |\
    \ uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word", "    local\
    \ max_word=\"\"\n    local max_count=0\n    for word in $1; do\n        local\
    \ count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if [[ $count\
    \ -gt $max_count ]]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word", "    local max_word=\"\"\n    local\
    \ max_count=0\n    for word in $1; do\n        local count=$(echo \"$word\" |\
    \ grep -o . | sort | uniq | wc -l)\n        if [[ $count -gt $max_count ]]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo \"$max_word\"", "    local max_word=\"\"\n    local max_count=0\n  \
    \  for word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort\
    \ -u | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"", " \
    \   local max=0\n    local max_word=\n    for word in $1; do\n        local unique_chars=$(echo\
    \ $word | fold -w1 | sort | uniq | wc -l)\n        if [ $unique_chars -gt $max\
    \ ]; then\n            max=$unique_chars\n            max_word=$word\n       \
    \ fi\n    done\n    echo $max_word", "    local max=0\n    local max_word=\"\"\
    \n    for word in $1; do\n        local count=$(echo $word | grep -o . | sort\
    \ | uniq | wc -l)\n        if [ $count -gt $max ]; then\n            max=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word", "    #\
    \ Write your code here\n    max=0\n    max_word=\"\"\n    for word in $1; do\n\
    \        unique_chars=$(echo $word | grep -o . | sort | uniq | wc -l)\n      \
    \  if [[ $unique_chars -gt $max ]]; then\n            max=$unique_chars\n    \
    \        max_word=$word\n        fi\n    done\n    echo $max_word", "    local\
    \ max_word=\"\"\n    local max_chars=0\n    for word in $1; do\n        local\
    \ chars=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n        if [[ $chars\
    \ -gt $max_chars ]]; then\n            max_chars=$chars\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"", "    local max_word=\"\"\n   \
    \ local max_count=0\n    local count=0\n    for word in $1; do\n        count=$(echo\
    \ $word | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "    local max_count=0\n    local max_word=\n\
    \    for word in $1; do\n        local count=$(echo $word | grep -o . | sort |\
    \ uniq | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word"]
stop_tokens:
- "\n}"
