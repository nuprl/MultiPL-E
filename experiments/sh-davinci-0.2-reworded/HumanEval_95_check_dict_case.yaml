name: HumanEval_95_check_dict_case
language: sh
prompt: "#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower\
  \ \n# case or all keys are strings in upper case, else return false.\n# The function\
  \ should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case\
  \ \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\\
  nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"\
  false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\
  \n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two\
  \ column CSV in key,value order\ncheck_dict_case() {\n"
tests: "}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
  \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
  n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
  nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") =\
  \ \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n\
  \    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local csv=\"$1\"\n    local result=\"true\"\n    local key\n  \
    \  local value\n    local upper_keys=0\n    local lower_keys=0\n    local upper_values=0\n\
    \    local lower_values=0\n    while IFS=, read -r key value; do\n        if [[\
    \ \"$key\" =~ [A-Z] ]]; then\n            upper_keys=$((upper_keys + 1))\n   \
    \     fi\n        if [[ \"$key\" =~ [a-z] ]]; then\n            lower_keys=$((lower_keys\
    \ + 1))\n        fi\n        if [[ \"$value\" =~ [A-Z] ]]; then\n            upper_values=$((upper_values\
    \ + 1))\n        fi\n        if [[ \"$value\" =~ [a-z] ]]; then\n            lower_values=$((lower_values\
    \ + 1))\n        fi\n    done <<< \"$csv\"\n    if [[ $upper_keys -gt 0 && $lower_keys\
    \ -gt 0 ]]; then\n        result=\"false\"\n    fi\n    if [[ $upper_values -gt\
    \ 0 && $lower_values -gt 0 ]]; then\n        result=\"false\"\n    fi\n    echo\
    \ \"$result\"", "  local csv=\"$1\"\n  local all_lower=false\n  local all_upper=false\n\
    \  local all_lower_regex=\"^[a-z]+,.*$\"\n  local all_upper_regex=\"^[A-Z]+,.*$\"\
    \n  local all_lower_count=0\n  local all_upper_count=0\n  local all_lower_lines=$(echo\
    \ \"$csv\" | grep -E \"$all_lower_regex\")\n  local all_upper_lines=$(echo \"\
    $csv\" | grep -E \"$all_upper_regex\")\n  local all_lower_count=$(echo \"$all_lower_lines\"\
    \ | wc -l)\n  local all_upper_count=$(echo \"$all_upper_lines\" | wc -l)\n  local\
    \ csv_count=$(echo \"$csv\" | wc -l)\n  if [[ $all_lower_count -eq $csv_count\
    \ ]]; then\n    all_lower=true\n  fi\n  if [[ $all_upper_count -eq $csv_count\
    \ ]]; then\n    all_upper=true\n  fi\n  if [[ $all_lower == \"true\" ]] || [[\
    \ $all_upper == \"true\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  # TODO: Implement this function\n  # Hint: Use the `tr` command to\
    \ convert the CSV to lower case\n  # and then compare it to the original CSV.\n\
    \  # Hint: Use the `tr` command to convert the CSV to upper case\n  # and then\
    \ compare it to the original CSV.\n  # Hint: Use the `wc` command to count the\
    \ number of lines in the CSV.\n  # Hint: Use the `cut` command to get the first\
    \ column of the CSV.\n  # Hint: Use the `sort` command to sort the first column\
    \ of the CSV.\n  # Hint: Use the `uniq` command to remove duplicate lines from\
    \ the CSV.\n  # Hint: Use the `wc` command to count the number of lines in the\
    \ CSV.\n  # Hint: Use the `cut` command to get the second column of the CSV.\n\
    \  # Hint: Use the `sort` command to sort the second column of the CSV.\n  # Hint:\
    \ Use the `uniq` command to remove duplicate lines from the CSV.\n  # Hint: Use\
    \ the `wc` command to count the number of lines in the CSV.\n  # Hint: Use the\
    \ `cut` command to get the first column of the CSV.\n  # Hint: Use the `sort`\
    \ command to sort the first column of the CSV.\n  # Hint: Use the `uniq` command\
    \ to remove duplicate lines from the CSV.\n  # Hint: Use the `wc` command to count\
    \ the number of lines in the CSV.\n  # Hint: Use the `cut` command to get the\
    \ second column of the CSV.\n  # Hint: Use the `sort` command to sort the second\
    \ column of the CSV.\n  # Hint: Use the `uniq` command to remove duplicate lines\
    \ from the CSV.\n  # Hint: Use the `wc` command to count the number of lines in\
    \ the CSV.\n  # Hint: Use the `cut` command to get the first column of the CSV.\n\
    \  # Hint: Use the `sort` command to sort the first column of the CSV.\n  # Hint:\
    \ Use the `uniq` command to remove duplicate lines from the CSV.\n  # Hint: Use\
    \ the `wc", "    # TODO: Implement this function\n    # Hint: Use the awk command\
    \ to split the input CSV into two columns\n    # Hint: Use the tr command to convert\
    \ the first column to lower case\n    # Hint: Use the tr command to convert the\
    \ first column to upper case\n    # Hint: Use the diff command to compare the\
    \ two columns\n    # Hint: Use the wc command to count the number of lines in\
    \ the diff output\n    # Hint: Use the test command to compare the count to 0\n\
    \    # Hint: Use the echo command to return the result\n    # Hint: Use the return\
    \ command to return the result\n    # Hint: Use the exit command to return the\
    \ result\n    # Hint: Use the exit command to return the result\n    # Hint: Use\
    \ the exit command to return the result\n    # Hint: Use the exit command to return\
    \ the result\n    # Hint: Use the exit command to return the result\n    # Hint:\
    \ Use the exit command to return the result\n    # Hint: Use the exit command\
    \ to return the result\n    # Hint: Use the exit command to return the result\n\
    \    # Hint: Use the exit command to return the result\n    # Hint: Use the exit\
    \ command to return the result\n    # Hint: Use the exit command to return the\
    \ result\n    # Hint: Use the exit command to return the result\n    # Hint: Use\
    \ the exit command to return the result\n    # Hint: Use the exit command to return\
    \ the result\n    # Hint: Use the exit command to return the result\n    # Hint:\
    \ Use the exit command to return the result\n    # Hint: Use the exit command\
    \ to return the result\n    # Hint: Use the exit command to return the result\n\
    \    # Hint: Use the exit command to return the result\n    # Hint: Use the exit\
    \ command to return the result\n    # Hint: Use the exit command to return the\
    \ result\n    # Hint: Use the exit command to return the result\n    # Hint: Use\
    \ the exit command to return the result\n    # Hint: Use the exit command to return\
    \ the result\n    # Hint: Use the exit command to return the result\n    # Hint:\
    \ Use the exit command to return the result\n    # H", "  # TODO: implement this\
    \ function\n  # Hint: use the `tr` command to convert to lower case\n  # and the\
    \ `grep` command to check if all keys are lower case\n  # or all keys are upper\
    \ case.\n  # Hint: use the `cut` command to get the first column of the CSV.\n\
    \  # Hint: use the `wc` command to count the number of lines in the CSV.\n  #\
    \ Hint: use the `grep` command to check if the CSV is empty.\n  # Hint: use the\
    \ `echo` command to return the result.\n  # Hint: use the `exit` command to return\
    \ true or false.\n  # Hint: use the `test` command to check if a string is empty.\n\
    \  # Hint: use the `test` command to check if a string is equal to another string.\n\
    \  # Hint: use the `test` command to check if a string is not equal to another\
    \ string.\n  # Hint: use the `test` command to check if a string is equal to another\
    \ string.\n  # Hint: use the `test` command to check if a string is not equal\
    \ to another string.\n  # Hint: use the `test` command to check if a string is\
    \ equal to another string.\n  # Hint: use the `test` command to check if a string\
    \ is not equal to another string.\n  # Hint: use the `test` command to check if\
    \ a string is equal to another string.\n  # Hint: use the `test` command to check\
    \ if a string is not equal to another string.\n  # Hint: use the `test` command\
    \ to check if a string is equal to another string.\n  # Hint: use the `test` command\
    \ to check if a string is not equal to another string.\n  # Hint: use the `test`\
    \ command to check if a string is equal to another string.\n  # Hint: use the\
    \ `test` command to check if a string is not equal to another string.\n  # Hint:\
    \ use the `test` command to check if a string is equal to another string.\n  #\
    \ Hint: use the `test` command to check if a string is not equal to another string.\n\
    \  # Hint: use the `", "  # TODO: implement this function\n  # Hint: use the following\
    \ commands to check if a string is\n  # in lower case or upper case:\n  #   [[\
    \ $string =~ ^[a-z]+$ ]]\n  #   [[ $string =~ ^[A-Z]+$ ]]\n  #\n  # Hint: use\
    \ the following command to split a string into an array\n  #   IFS=',' read -r\
    \ -a array <<< \"$string\"\n  #\n  # Hint: use the following command to get the\
    \ first element of an array\n  #   ${array[0]}\n  #\n  # Hint: use the following\
    \ command to get the second element of an array\n  #   ${array[1]}\n  #\n  # Hint:\
    \ use the following command to get the length of an array\n  #   ${#array[@]}\n\
    \  #\n  # Hint: use the following command to get the length of a string\n  # \
    \  ${#string}\n  #\n  # Hint: use the following command to get the first character\
    \ of a string\n  #   ${string:0:1}\n  #\n  # Hint: use the following command to\
    \ get the last character of a string\n  #   ${string: -1}\n  #\n  # Hint: use\
    \ the following command to get the substring of a string\n  #   ${string:start:length}\n\
    \  #\n  # Hint: use the following command to get the substring of a string\n \
    \ #   ${string:start}\n  #\n  # Hint: use the following command to get the substring\
    \ of a string\n  #   ${string:0: -1}\n  #\n  # Hint: use the following command\
    \ to get the substring of a string\n  #   ${string:0: -2}\n  #\n  # Hint: use\
    \ the following command to get the substring of a string\n  #   ${string:0: -3}\n\
    \  #\n  # Hint: use the following command to get the substring of a string\n \
    \ #   ${string:0: -4}\n  #\n  # Hint: use the following command to get the substring\
    \ of a string\n  #   ${string", "    if [ -z \"$1\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n    # Check if all keys are lower case\n    if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '\\n')\" == \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n\
    \        echo \"true\"\n        return\n    fi\n    # Check if all keys are upper\
    \ case\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' |\
    \ tr '[:upper:]' '[:lower:]' | tr -d '\\n')\" == \"$(echo \"$1\" | cut -d, -f1\
    \ | tr -d '\\n')\" ]; then\n        echo \"true\"\n        return\n    fi\n  \
    \  echo \"false\"", "  # Check if the CSV is empty\n  if [ -z \"$1\" ]; then\n\
    \    echo \"false\"\n    return\n  fi\n\n  # Check if all keys are upper case\n\
    \  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '\\\
    n')\" == \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n    echo \"true\"\
    \n    return\n  fi\n\n  # Check if all keys are lower case\n  if [ \"$(echo \"\
    $1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '\\n')\" == \"$(echo \"\
    $1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n    echo \"true\"\n    return\n \
    \ fi\n\n  # If we get here, the keys are not all upper or lower case\n  echo \"\
    false\"", "  # check if the CSV is empty\n  if [ -z \"$1\" ]; then\n    echo \"\
    false\"\n    return\n  fi\n\n  # check if the CSV has only one key\n  if [ $(echo\
    \ \"$1\" | awk -F, '{print NF}' | sort -nu | tail -n 1) -eq 1 ]; then\n    echo\
    \ \"true\"\n    return\n  fi\n\n  # check if all keys are in lower case\n  if\
    \ [ $(echo \"$1\" | awk -F, '{print tolower($1)}' | sort -u | wc -l) -eq 1 ];\
    \ then\n    echo \"true\"\n    return\n  fi\n\n  # check if all keys are in upper\
    \ case\n  if [ $(echo \"$1\" | awk -F, '{print toupper($1)}' | sort -u | wc -l)\
    \ -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n\n  echo \"false\"", " \
    \   # TODO: implement this function\n    # Hint: use the following bash functions:\n\
    \    #   - awk\n    #   - tr\n    #   - grep\n    #   - sed\n    #   - cut\n \
    \   #   - sort\n    #   - uniq\n    #   - head\n    #   - tail\n    #   - wc\n\
    \    #   - expr\n    #   - echo\n    #   - return\n    #\n    # Hint: use the\
    \ following bash operators:\n    #   - -z\n    #   - -eq\n    #   - -ne\n    #\
    \   - -gt\n    #   - -lt\n    #   - -ge\n    #   - -le\n    #   - -a\n    #  \
    \ - -o\n    #   - !\n    #   - &&\n    #   - ||\n    #\n    # Hint: use the following\
    \ bash special variables:\n    #   - $#\n    #   - $@\n    #   - $?\n    #   -\
    \ $0\n    #   - $1\n    #   - $2\n    #   - $3\n    #   - $4\n    #   - $5\n \
    \   #   - $6\n    #   - $7\n    #   - $8\n    #   - $9\n    #   - $10\n    # \
    \  - $11\n    #   - $12\n    #   - $13\n    #   - $14\n    #   - $15\n    #  \
    \ - $16\n    #   - $17\n    #   - $18\n    #   - $19\n    #   - $20\n    #   -\
    \ $21\n    #   - $22\n    #   - $23\n    #   - $24\n    #   - $25\n    #   - $26\n\
    \    #   - $27\n    #   - $28\n    #   - $29\n    #   - $30\n    #   - $31\n \
    \   #   - $32\n    #   - $33\n    #   - $34\n    #   - $35\n    #   - $36\n  \
    \  #   - $37\n    #   - $38\n    #  ", "    # TODO: Implement this function\n\
    \    # Hint: You can use the following bash functions:\n    #   - tr: https://linux.die.net/man/1/tr\n\
    \    #   - grep: https://linux.die.net/man/1/grep\n    #   - cut: https://linux.die.net/man/1/cut\n\
    \    #   - sort: https://linux.die.net/man/1/sort\n    #   - uniq: https://linux.die.net/man/1/uniq\n\
    \    #   - wc: https://linux.die.net/man/1/wc\n    #   - head: https://linux.die.net/man/1/head\n\
    \    #   - tail: https://linux.die.net/man/1/tail\n    #   - cat: https://linux.die.net/man/1/cat\n\
    \    #   - echo: https://linux.die.net/man/1/echo\n    #   - test: https://linux.die.net/man/1/test\n\
    \    #   - if: https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\n\
    \    #   - for: https://www.gnu.org/software/bash/manual/html_node/The-for-Statement.html\n\
    \    #   - while: https://www.gnu.org/software/bash/manual/html_node/The-while-Statement.html\n\
    \    #   - case: https://www.gnu.org/software/bash/manual/html_node/The-case-Statement.html\n\
    \    #   - [[: https://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html\n\
    \    #   - ((: https://www.gnu.org/software/bash/manual/html_node/Arithmetic-Expansion.html\n\
    \    #   - [: https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\n\
    \    #   - : https://www.gnu.org/software/bash/manual/html_node/Bour", "  # TODO:\
    \ Implement this function\n  # Hint: Use the `tr` command to convert the input\
    \ to lower case\n  # and then compare it to the original input.\n  # Hint: Use\
    \ the `tr` command to convert the input to upper case\n  # and then compare it\
    \ to the original input.\n  # Hint: Use the `wc` command to count the number of\
    \ lines in the input.\n  # Hint: Use the `cut` command to get the first column\
    \ of the input.\n  # Hint: Use the `cut` command to get the second column of the\
    \ input.\n  # Hint: Use the `grep` command to find the number of lines that contain\n\
    \  # a number.\n  # Hint: Use the `grep` command to find the number of lines that\
    \ contain\n  # a lower case letter.\n  # Hint: Use the `grep` command to find\
    \ the number of lines that contain\n  # an upper case letter.\n  # Hint: Use the\
    \ `grep` command to find the number of lines that contain\n  # a comma.\n  # Hint:\
    \ Use the `grep` command to find the number of lines that contain\n  # a colon.\n\
    \  # Hint: Use the `grep` command to find the number of lines that contain\n \
    \ # a semicolon.\n  # Hint: Use the `grep` command to find the number of lines\
    \ that contain\n  # a tab.\n  # Hint: Use the `grep` command to find the number\
    \ of lines that contain\n  # a space.\n  # Hint: Use the `grep` command to find\
    \ the number of lines that contain\n  # a newline.\n  # Hint: Use the `grep` command\
    \ to find the number of lines that contain\n  # a backslash.\n  # Hint: Use the\
    \ `grep` command to find the number of lines that contain\n  # a single quote.\n\
    \  # Hint: Use the `grep` command to find the number of lines that contain\n \
    \ # a double quote.\n  # Hint: Use the `grep` command to find the number of lines\
    \ that contain\n  # a backtick.\n  # Hint: Use the `grep` command", "    # TODO:\
    \ implement this function\n    # Hint: use the tr command to convert upper case\
    \ to lower case\n    # and the grep command to check if all keys are in lower\
    \ case\n    # or all keys are in upper case.\n    #\n    # Hint: use the cut command\
    \ to extract the first column of the CSV\n    # and the tr command to convert\
    \ upper case to lower case.\n    #\n    # Hint: use the grep command to check\
    \ if all keys are in lower case\n    # or all keys are in upper case.\n    #\n\
    \    # Hint: use the cut command to extract the first column of the CSV\n    #\
    \ and the tr command to convert lower case to upper case.\n    #\n    # Hint:\
    \ use the grep command to check if all keys are in lower case\n    # or all keys\
    \ are in upper case.\n    #\n    # Hint: use the wc command to count the number\
    \ of lines in the CSV.\n    #\n    # Hint: use the test command to check if the\
    \ number of lines in the CSV\n    # is greater than zero.\n    #\n    # Hint:\
    \ use the test command to check if the number of lines in the CSV\n    # is greater\
    \ than zero.\n    #\n    # Hint: use the test command to check if the number of\
    \ lines in the CSV\n    # is greater than zero.\n    #\n    # Hint: use the test\
    \ command to check if the number of lines in the CSV\n    # is greater than zero.\n\
    \    #\n    # Hint: use the test command to check if the number of lines in the\
    \ CSV\n    # is greater than zero.\n    #\n    # Hint: use the test command to\
    \ check if the number of lines in the CSV\n    # is greater than zero.\n    #\n\
    \    # Hint: use the test command to check if the number of lines in the CSV\n\
    \    # is greater than zero.\n    #\n    # Hint: use the test command to check\
    \ if the number of lines in the CSV\n    # is greater than zero.\n    #\n    #\
    \ Hint: use the test command to check if the number of lines in the CSV\n    #\
    \ is greater than zero.\n    #\n    # Hint: use the test command to check if the\
    \ number", "  # TODO: implement this function\n  # Hint: use the following command\
    \ to convert a string to lower case:\n  # echo \"${string,,}\"\n  # Hint: use\
    \ the following command to convert a string to upper case:\n  # echo \"${string^^}\"\
    \n  # Hint: use the following command to check if a string is all lower case:\n\
    \  # [[ \"$string\" == \"${string,,}\" ]]\n  # Hint: use the following command\
    \ to check if a string is all upper case:\n  # [[ \"$string\" == \"${string^^}\"\
    \ ]]\n  # Hint: use the following command to check if a string is empty:\n  #\
    \ [[ -z \"$string\" ]]\n  # Hint: use the following command to check if a string\
    \ is all digits:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: use the following\
    \ command to check if a string is all letters:\n  # [[ \"$string\" =~ ^[a-zA-Z]+$\
    \ ]]\n  # Hint: use the following command to check if a string is all letters\
    \ or digits:\n  # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n  # Hint: use the following\
    \ command to check if a string is all letters or digits or underscores:\n  # [[\
    \ \"$string\" =~ ^[a-zA-Z0-9_]+$ ]]\n  # Hint: use the following command to check\
    \ if a string is all letters or digits or underscores or dashes:\n  # [[ \"$string\"\
    \ =~ ^[a-zA-Z0-9_-]+$ ]]\n  # Hint: use the following command to check if a string\
    \ is all letters or digits or underscores or dashes or periods:\n  # [[ \"$string\"\
    \ =~ ^[a-zA-Z0-9_.-]+$ ]]\n  # Hint: use the following command to check if a string\
    \ is all letters or digits or underscores or dashes or periods or slashes:\n \
    \ # [[ \"$string\" =~ ^[a-zA-Z0-9_.-/]+$ ]]\n  # Hint: use the following command\
    \ to check if a string is all", "    # TODO: Implement this function\n    # Hint:\
    \ use the following commands to check if a string is upper case\n    # or lower\
    \ case:\n    # [[ $string == *[[:upper:]]* ]]\n    # [[ $string == *[[:lower:]]*\
    \ ]]\n    #\n    # Hint: use the following command to split a string into an array\n\
    \    # using a delimiter:\n    # IFS=',' read -r -a array <<< \"$string\"\n  \
    \  #\n    # Hint: use the following command to get the number of elements in an\
    \ array:\n    # ${#array[@]}\n    #\n    # Hint: use the following command to\
    \ get the length of a string:\n    # ${#string}\n    #\n    # Hint: use the following\
    \ command to get the first element of an array:\n    # ${array[0]}\n    #\n  \
    \  # Hint: use the following command to get the last element of an array:\n  \
    \  # ${array[-1]}\n    #\n    # Hint: use the following command to get the first\
    \ character of a string:\n    # ${string:0:1}\n    #\n    # Hint: use the following\
    \ command to get the last character of a string:\n    # ${string: -1}\n    #\n\
    \    # Hint: use the following command to get the substring of a string:\n   \
    \ # ${string:start:length}\n    #\n    # Hint: use the following command to get\
    \ the substring of a string:\n    # ${string:start}\n    #\n    # Hint: use the\
    \ following command to get the substring of a string:\n    # ${string:0:${#string}-1}\n\
    \    #\n    # Hint: use the following command to get the substring of a string:\n\
    \    # ${string::${#string}-1}\n    #\n    # Hint: use the following command to\
    \ get the substring of a string:\n    # ${string::-1}\n    #\n    # Hint: use\
    \ the following command to get the substring of a string:\n    # ${string:0:-1}\n\
    \    #\n    # Hint: use the following command to get the substring of", "    #\
    \ check if the input is empty\n    if [ -z \"$1\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n\n    # check if the first key is in lower case\n  \
    \  if [[ \"$1\" =~ ^[a-z].* ]]; then\n        # check if all keys are in lower\
    \ case\n        if [[ \"$1\" =~ ^[a-z].*$ ]]; then\n            echo \"true\"\n\
    \            return\n        fi\n    fi\n\n    # check if the first key is in\
    \ upper case\n    if [[ \"$1\" =~ ^[A-Z].* ]]; then\n        # check if all keys\
    \ are in upper case\n        if [[ \"$1\" =~ ^[A-Z].*$ ]]; then\n            echo\
    \ \"true\"\n            return\n        fi\n    fi\n\n    echo \"false\"", " \
    \ # TODO: Implement this function\n  # Hint: You can use the following bash functions:\n\
    \  #   - tr: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - cut: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - grep: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - wc: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - sort: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - uniq: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - expr: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - sed: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - awk: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - head: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - tail: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - expr: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - echo: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - test: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \  #   - [: https://www", "    # Get the first column of the CSV\n    local keys=$(echo\
    \ \"$1\" | cut -d, -f1)\n    # Get the first key\n    local first_key=$(echo \"\
    $keys\" | head -n1)\n    # Get the first key's case\n    local first_key_case=$(echo\
    \ \"$first_key\" | tr '[:upper:]' '[:lower:]')\n    # If the first key's case\
    \ is the same as the first key, then\n    # the first key is lower case, else\
    \ it is upper case\n    if [ \"$first_key\" == \"$first_key_case\" ]; then\n \
    \       # The first key is lower case, so check if all keys are lower case\n \
    \       if [ \"$keys\" == \"$(echo \"$keys\" | tr '[:upper:]' '[:lower:]')\" ];\
    \ then\n            # All keys are lower case\n            echo \"true\"\n   \
    \     else\n            # Not all keys are lower case\n            echo \"false\"\
    \n        fi\n    else\n        # The first key is upper case, so check if all\
    \ keys are upper case\n        if [ \"$keys\" == \"$(echo \"$keys\" | tr '[:lower:]'\
    \ '[:upper:]')\" ]; then\n            # All keys are upper case\n            echo\
    \ \"true\"\n        else\n            # Not all keys are upper case\n        \
    \    echo \"false\"\n        fi\n    fi", "  # TODO: implement this function\n\
    \  # Hint: use the following command to check if a string is in upper case:\n\
    \  # [[ \"$string\" == *[[:upper:]]* ]]\n  # Hint: use the following command to\
    \ check if a string is in lower case:\n  # [[ \"$string\" == *[[:lower:]]* ]]\n\
    \  # Hint: use the following command to check if a string is empty:\n  # [[ -z\
    \ \"$string\" ]]\n  # Hint: use the following command to get the first column\
    \ of a CSV:\n  # cut -d ',' -f 1\n  # Hint: use the following command to get the\
    \ second column of a CSV:\n  # cut -d ',' -f 2\n  # Hint: use the following command\
    \ to get the number of lines in a CSV:\n  # wc -l\n  # Hint: use the following\
    \ command to check if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n\
    \  # Hint: use the following command to check if a string is a string:\n  # [[\
    \ \"$string\" =~ ^[a-zA-Z]+$ ]]\n  # Hint: use the following command to check\
    \ if a string is a string in lower case:\n  # [[ \"$string\" =~ ^[a-z]+$ ]]\n\
    \  # Hint: use the following command to check if a string is a string in upper\
    \ case:\n  # [[ \"$string\" =~ ^[A-Z]+$ ]]\n  # Hint: use the following command\
    \ to check if a string is a string in lower case or upper case:\n  # [[ \"$string\"\
    \ =~ ^[a-zA-Z]+$ ]]\n  # Hint: use the following command to check if a string\
    \ is a string in lower case and upper case:\n  # [[ \"$string\" =~ ^[a-z]+$ &&\
    \ \"$string\" =~ ^[A-Z]+$ ]]\n  # Hint: use the following command to check if\
    \ a string is a string in lower case or upper case:\n  # [[ \"$string\" =~ ^[a-z]+$\
    \ || \"$string\" =~ ^[A-Z]+$", "    # TODO: Implement this function\n    # Hint:\
    \ You can use the following bash functions:\n    # - awk\n    # - tr\n    # -\
    \ grep\n    # - sed\n    # - cut\n    # - sort\n    # - uniq\n    # - head\n \
    \   # - tail\n    # - wc\n    # - echo\n    # - test\n    # - [[ ]]\n    # - [[\
    \ ]] && [[ ]]\n    # - [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]]\n    #\
    \ - [[ ]] && [[ ]] && [[ ]]\n    # - [[ ]] || [[ ]] || [[ ]]\n    # - [[ ]] ||\
    \ [[ ]] && [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] || [[\
    \ ]] && [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n  \
    \  # - [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] && [[ ]] || [[\
    \ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[\
    \ ]] || [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[\
    \ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[\
    \ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[\
    \ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[\
    \ ]] && [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[\
    \ ]] && [[ ]] || [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] &&", "  if [\
    \ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local csv=\"$1\"\n\
    \  local keys=\"$(echo \"$csv\" | cut -d, -f1)\"\n  local lower_keys=\"$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\"\n  local upper_keys=\"$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n  if [ \"$keys\" = \"$lower_keys\" ] || [ \"\
    $keys\" = \"$upper_keys\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    # Get the first key\n    first_key=$(echo \"$1\" | head -n 1 | cut\
    \ -d, -f1)\n    # Get the second key\n    second_key=$(echo \"$1\" | head -n 2\
    \ | tail -n 1 | cut -d, -f1)\n    # Check if the first key is upper case\n   \
    \ if [[ \"$first_key\" =~ ^[A-Z]+$ ]]; then\n        # Check if the second key\
    \ is upper case\n        if [[ \"$second_key\" =~ ^[A-Z]+$ ]]; then\n        \
    \    # Both keys are upper case\n            echo \"true\"\n        else\n   \
    \         # First key is upper case, second key is not\n            echo \"false\"\
    \n        fi\n    else\n        # Check if the first key is lower case\n     \
    \   if [[ \"$first_key\" =~ ^[a-z]+$ ]]; then\n            # Check if the second\
    \ key is lower case\n            if [[ \"$second_key\" =~ ^[a-z]+$ ]]; then\n\
    \                # Both keys are lower case\n                echo \"true\"\n \
    \           else\n                # First key is lower case, second key is not\n\
    \                echo \"false\"\n            fi\n        else\n            # First\
    \ key is not upper or lower case\n            echo \"false\"\n        fi\n   \
    \ fi", "  # TODO: Implement this function\n  # Hint: Use the tr command to convert\
    \ the case of a string\n  # Hint: Use the cut command to extract the first column\n\
    \  # Hint: Use the grep command to check if a string is all upper or lower case\n\
    \  # Hint: Use the wc command to count the number of lines\n  # Hint: Use the\
    \ sort command to sort the lines\n  # Hint: Use the uniq command to remove duplicates\n\
    \  # Hint: Use the wc command to count the number of lines\n  # Hint: Use the\
    \ test command to check if a number is equal to 1\n  # Hint: Use the echo command\
    \ to return true or false\n  # Hint: Use the exit command to return true or false\n\
    \  # Hint: Use the return command to return true or false\n  # Hint: Use the set\
    \ command to return true or false\n  # Hint: Use the declare command to return\
    \ true or false\n  # Hint: Use the export command to return true or false\n  #\
    \ Hint: Use the readonly command to return true or false\n  # Hint: Use the typeset\
    \ command to return true or false\n  # Hint: Use the local command to return true\
    \ or false\n  # Hint: Use the read command to return true or false\n  # Hint:\
    \ Use the printf command to return true or false\n  # Hint: Use the echo command\
    \ to return true or false\n  # Hint: Use the exit command to return true or false\n\
    \  # Hint: Use the return command to return true or false\n  # Hint: Use the set\
    \ command to return true or false\n  # Hint: Use the declare command to return\
    \ true or false\n  # Hint: Use the export command to return true or false\n  #\
    \ Hint: Use the readonly command to return true or false\n  # Hint: Use the typeset\
    \ command to return true or false\n  # Hint: Use the local command to return true\
    \ or false\n  # Hint: Use the read command to return true or false\n  # Hint:\
    \ Use the printf command to return true or false\n  # Hint: Use the echo command\
    \ to return true or false\n  # Hint: Use the exit command to return true or false\n\
    \  # H", "  local csv=\"$1\"\n  local csv_len=$(echo \"$csv\" | wc -l)\n  if [[\
    \ $csv_len -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local first_key=$(echo\
    \ \"$csv\" | head -n 1 | cut -d, -f1)\n  local first_key_len=$(echo \"$first_key\"\
    \ | wc -c)\n  local first_key_lower=$(echo \"$first_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  local first_key_upper=$(echo \"$first_key\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ $first_key_len -eq $(echo \"$first_key_lower\" | wc -c) ]]; then\n  \
    \  # first key is lower case\n    local all_lower=$(echo \"$csv\" | cut -d, -f1\
    \ | tr '[:upper:]' '[:lower:]' | sort -u)\n    local all_lower_len=$(echo \"$all_lower\"\
    \ | wc -l)\n    if [[ $all_lower_len -eq $csv_len ]]; then\n      echo \"true\"\
    \n    else\n      echo \"false\"\n    fi\n  elif [[ $first_key_len -eq $(echo\
    \ \"$first_key_upper\" | wc -c) ]]; then\n    # first key is upper case\n    local\
    \ all_upper=$(echo \"$csv\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort\
    \ -u)\n    local all_upper_len=$(echo \"$all_upper\" | wc -l)\n    if [[ $all_upper_len\
    \ -eq $csv_len ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n\
    \    fi\n  else\n    echo \"false\"\n  fi", "    # TODO: Implement this function\n\
    \    # Hint: You can use the following functions:\n    #   - $(is_lower_case $str)\n\
    \    #   - $(is_upper_case $str)\n    #   - $(is_empty_csv $csv)\n    #   - $(get_csv_col\
    \ $csv $col)\n    #   - $(get_csv_col_count $csv)\n    #   - $(get_csv_row_count\
    \ $csv)\n    #   - $(get_csv_row $csv $row)\n    #   - $(get_csv_row_col $csv\
    \ $row $col)\n    #   - $(get_csv_row_col_count $csv $row)\n    #   - $(get_csv_row_col_count\
    \ $csv $col)\n    #   - $(get_csv_row_col_count $csv)\n    #   - $(get_csv_row_col_count\
    \ $csv $row $col)\n    #   - $(get_csv_row_col_count $csv $row $col)\n    #  \
    \ - $(get_csv_row_col_count $csv $row $col)\n    #   - $(get_csv_row_col_count\
    \ $csv $row $col)\n    #   - $(get_csv_row_col_count $csv $row $col)\n    #  \
    \ - $(get_csv_row_col_count $csv $row $col)\n    #   - $(get_csv_row_col_count\
    \ $csv $row $col)\n    #   - $(get_csv_row_col_count $csv $row $col)\n    #  \
    \ - $(get_csv_row_col_count $csv $row $col)\n    #   - $(get_csv_row_col_count\
    \ $csv $row $col)\n    #   - $(get_csv_row_col_count $csv $row $col)\n    #  \
    \ - $(get_csv_row_col_count $csv $row $col)\n    #   - $(get_csv_row_col_count\
    \ $csv $row $col)\n    #   - $(get_csv_row_col_count $csv $row $", "  # TODO:\
    \ Implement this function\n  # Hint: Use the following command to convert a string\
    \ to lower case:\n  #       echo \"$1\" | tr '[:upper:]' '[:lower:]'\n  #    \
    \   Use the following command to convert a string to upper case:\n  #       echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]'\n  #       Use the following command to\
    \ check if a string is empty:\n  #       [[ -z \"$1\" ]]\n  #       Use the following\
    \ command to check if a string is all lower case:\n  #       [[ \"$1\" == *[[:lower:]]*\
    \ ]]\n  #       Use the following command to check if a string is all upper case:\n\
    \  #       [[ \"$1\" == *[[:upper:]]* ]]\n  #       Use the following command\
    \ to check if a string contains a lower case:\n  #       [[ \"$1\" == *[[:lower:]]*\
    \ ]]\n  #       Use the following command to check if a string contains an upper\
    \ case:\n  #       [[ \"$1\" == *[[:upper:]]* ]]\n  #       Use the following\
    \ command to check if a string contains a digit:\n  #       [[ \"$1\" == *[[:digit:]]*\
    \ ]]\n  #       Use the following command to check if a string contains a non-digit:\n\
    \  #       [[ \"$1\" == *[^[:digit:]]* ]]\n  #       Use the following command\
    \ to check if a string contains a non-alpha:\n  #       [[ \"$1\" == *[^[:alpha:]]*\
    \ ]]\n  #       Use the following command to check if a string contains a non-alnum:\n\
    \  #       [[ \"$1\" == *[^[:alnum:]]* ]]\n  #       Use the following command\
    \ to check if a string contains a non-blank:\n  #       [[ \"$1\" == *[^[:blank:]]*\
    \ ]]\n  #       Use the following command to check if a string contains a non-space:\n\
    \  #       [[ \"$1\" == *[^[:space:]]* ]]\n  #       Use the following command\
    \ to check if a string contains a non-print:\n  #       [[ \"$", "  # TODO: implement\
    \ this function\n  # Hint: use awk\n  # Hint: use the following command to check\
    \ if a string is in lower case:\n  # [[ $string =~ [a-z]+ ]]\n  # Hint: use the\
    \ following command to check if a string is in upper case:\n  # [[ $string =~\
    \ [A-Z]+ ]]\n  # Hint: use the following command to check if a string is empty:\n\
    \  # [[ -z $string ]]\n  # Hint: use the following command to check if a string\
    \ is not empty:\n  # [[ -n $string ]]\n  # Hint: use the following command to\
    \ check if a string is a number:\n  # [[ $string =~ [0-9]+ ]]\n  # Hint: use the\
    \ following command to check if a string is not a number:\n  # [[ ! $string =~\
    \ [0-9]+ ]]\n  # Hint: use the following command to check if a string is a number:\n\
    \  # [[ $string =~ [0-9]+ ]]\n  # Hint: use the following command to check if\
    \ a string is not a number:\n  # [[ ! $string =~ [0-9]+ ]]\n  # Hint: use the\
    \ following command to check if a string is a number:\n  # [[ $string =~ [0-9]+\
    \ ]]\n  # Hint: use the following command to check if a string is not a number:\n\
    \  # [[ ! $string =~ [0-9]+ ]]\n  # Hint: use the following command to check if\
    \ a string is a number:\n  # [[ $string =~ [0-9]+ ]]\n  # Hint: use the following\
    \ command to check if a string is not a number:\n  # [[ ! $string =~ [0-9]+ ]]\n\
    \  # Hint: use the following command to check if a string is a number:\n  # [[\
    \ $string =~ [0-9]+ ]]\n  # Hint: use the following command to check if a string\
    \ is not a number:\n  # [[ ! $string =~ [0-9]+ ]]\n  # Hint: use the following\
    \ command to check if a string is a", "    # Check if the CSV is empty\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n\n    #\
    \ Check if all keys are in lower case\n    echo \"$1\" | awk -F, '{print $1}'\
    \ | grep -q '[A-Z]'\n    if [ $? -eq 0 ]; then\n        # Check if all keys are\
    \ in upper case\n        echo \"$1\" | awk -F, '{print $1}' | grep -q '[a-z]'\n\
    \        if [ $? -eq 0 ]; then\n            echo \"false\"\n            return\n\
    \        fi\n    fi\n    echo \"true\"", "  # TODO: implement this function\n\
    \  # Hint: use the following command to check if a string is in lower case\n \
    \ # [[ \"$string\" =~ ^[a-z]+$ ]]\n  # Hint: use the following command to check\
    \ if a string is in upper case\n  # [[ \"$string\" =~ ^[A-Z]+$ ]]\n  # Hint: use\
    \ the following command to check if a string is empty\n  # [[ -z \"$string\" ]]\n\
    \  # Hint: use the following command to check if a string is not empty\n  # [[\
    \ -n \"$string\" ]]\n  # Hint: use the following command to check if a string\
    \ is a number\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: use the following\
    \ command to check if a string is not a number\n  # [[ ! \"$string\" =~ ^[0-9]+$\
    \ ]]\n  # Hint: use the following command to check if a string is a number or\
    \ empty\n  # [[ \"$string\" =~ ^[0-9]*$ ]]\n  # Hint: use the following command\
    \ to check if a string is not a number or empty\n  # [[ ! \"$string\" =~ ^[0-9]*$\
    \ ]]\n  # Hint: use the following command to check if a string is a number or\
    \ not empty\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: use the following command\
    \ to check if a string is not a number or not empty\n  # [[ ! \"$string\" =~ ^[0-9]+$\
    \ ]]\n  # Hint: use the following command to check if a string is a number or\
    \ empty or upper case\n  # [[ \"$string\" =~ ^[0-9A-Z]*$ ]]\n  # Hint: use the\
    \ following command to check if a string is not a number or empty or upper case\n\
    \  # [[ ! \"$string\" =~ ^[0-9A-Z]*$ ]]\n  # Hint: use the following command to\
    \ check if a string is a number or not empty or upper case\n  # [[ \"$string\"\
    \ =~ ^[0-9A-Z]+$ ]]\n", "  # TODO: Write your code here\n  # Hint: Use the following\
    \ command to check if a string is in upper case:\n  # [[ \"$string\" == *[[:upper:]]*\
    \ ]]\n  # Hint: Use the following command to check if a string is in lower case:\n\
    \  # [[ \"$string\" == *[[:lower:]]* ]]\n  # Hint: Use the following command to\
    \ check if a string is empty:\n  # [[ -z \"$string\" ]]\n  # Hint: Use the following\
    \ command to check if a string is not empty:\n  # [[ -n \"$string\" ]]\n  # Hint:\
    \ Use the following command to convert a string to lower case:\n  # string=$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\n  # Hint: Use the following command\
    \ to convert a string to upper case:\n  # string=$(echo \"$string\" | tr '[:lower:]'\
    \ '[:upper:]')\n  # Hint: Use the following command to split a string into an\
    \ array:\n  # IFS=',' read -r -a array <<< \"$string\"\n  # Hint: Use the following\
    \ command to get the length of an array:\n  # length=${#array[@]}\n  # Hint: Use\
    \ the following command to get the first element of an array:\n  # first=${array[0]}\n\
    \  # Hint: Use the following command to get the last element of an array:\n  #\
    \ last=${array[-1]}\n  # Hint: Use the following command to get the nth element\
    \ of an array:\n  # nth=${array[n]}\n  # Hint: Use the following command to get\
    \ the first n elements of an array:\n  # first_n=${array[@]:0:n}\n  # Hint: Use\
    \ the following command to get the last n elements of an array:\n  # last_n=${array[@]:(-n)}\n\
    \  # Hint: Use the following command to get the elements of an array except the\
    \ first n elements:\n  # except_first_n=${array[@]:n}\n  # Hint: Use the following\
    \ command to get the elements of an array except the last n elements:\n", "  \
    \  # TODO: implement this function\n    # Hint: use the following commands to\
    \ convert a string to lower case:\n    # $ echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n\
    \    # hello\n    # $ echo \"hello\" | tr '[:lower:]' '[:upper:]'\n    # HELLO\n\
    \    #\n    # Hint: use the following command to check if a string is all upper\
    \ case:\n    # $ echo \"HELLO\" | grep -q '[^[:upper:]]' && echo \"false\" ||\
    \ echo \"true\"\n    # true\n    # $ echo \"hello\" | grep -q '[^[:upper:]]' &&\
    \ echo \"false\" || echo \"true\"\n    # false\n    #\n    # Hint: use the following\
    \ command to check if a string is all lower case:\n    # $ echo \"HELLO\" | grep\
    \ -q '[^[:lower:]]' && echo \"false\" || echo \"true\"\n    # false\n    # $ echo\
    \ \"hello\" | grep -q '[^[:lower:]]' && echo \"false\" || echo \"true\"\n    #\
    \ true\n    #\n    # Hint: use the following command to check if a string is all\
    \ digits:\n    # $ echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" ||\
    \ echo \"true\"\n    # true\n    # $ echo \"hello\" | grep -q '[^[:digit:]]' &&\
    \ echo \"false\" || echo \"true\"\n    # false\n    #\n    # Hint: use the following\
    \ command to get the first column of a CSV:\n    # $ echo \"a,apple\\nb,banana\"\
    \ | cut -d ',' -f 1\n    # a\n    # b\n    #\n    # Hint: use the following command\
    \ to get the second column of a CSV:\n    # $ echo \"a,apple\\nb,banana\" | cut\
    \ -d ',' -f 2\n    # apple\n    # banana\n    #\n    # Hint: use the following\
    \ command to check if a string is empty:\n    # $ echo -n \"\" | grep -q '^$'\
    \ && echo \"true\" || echo \"false\"\n   ", "    # TODO: Write your code here\n\
    \    # Hint: You can use the following bash functions:\n    # - tr: https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \    # - grep: https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html\n\
    \    # - awk: https://www.gnu.org/software/gawk/manual/gawk.html\n    # - sed:\
    \ https://www.gnu.org/software/sed/manual/sed.html\n    # - sort: https://www.gnu.org/software/coreutils/manual/html_node/sort-invocation.html\n\
    \    # - uniq: https://www.gnu.org/software/coreutils/manual/html_node/uniq-invocation.html\n\
    \    # - wc: https://www.gnu.org/software/coreutils/manual/html_node/wc-invocation.html\n\
    \    # - head: https://www.gnu.org/software/coreutils/manual/html_node/head-invocation.html\n\
    \    # - tail: https://www.gnu.org/software/coreutils/manual/html_node/tail-invocation.html\n\
    \    # - cut: https://www.gnu.org/software/coreutils/manual/html_node/cut-invocation.html\n\
    \    # - paste: https://www.gnu.org/software/coreutils/manual/html_node/paste-invocation.html\n\
    \    # - join: https://www.gnu.org/software/coreutils/manual/html_node/join-invocation.html\n\
    \    # - tr: https://www.gnu.org/software/coreutils/manual/html_node/tr-invocation.html\n\
    \    # - expr: https://www.gnu.org/software/coreutils/manual/html_node/expr-invocation.html\n\
    \    # - bc: https://www.gnu.org/software/bc/manual/html_mono/bc.html\n    # -\
    \ factor: https://www.gnu.org/software/coreutils/man", "  # TODO: Implement this\
    \ function\n  # Hint: Use the following command to check if a string is all upper\
    \ case:\n  # if [[ \"${str^^}\" == \"$str\" ]]; then echo \"true\"; else echo\
    \ \"false\"; fi\n  # Hint: Use the following command to check if a string is all\
    \ lower case:\n  # if [[ \"${str,,}\" == \"$str\" ]]; then echo \"true\"; else\
    \ echo \"false\"; fi\n  # Hint: Use the following command to get the first column\
    \ of a CSV:\n  # cut -d, -f1\n  # Hint: Use the following command to get the second\
    \ column of a CSV:\n  # cut -d, -f2\n  # Hint: Use the following command to get\
    \ the number of columns in a CSV:\n  # awk -F, '{print NF}'\n  # Hint: Use the\
    \ following command to get the number of rows in a CSV:\n  # wc -l\n  # Hint:\
    \ Use the following command to get the first row of a CSV:\n  # head -n 1\n  #\
    \ Hint: Use the following command to get the last row of a CSV:\n  # tail -n 1\n\
    \  # Hint: Use the following command to get the first column of the first row\
    \ of a CSV:\n  # head -n 1 | cut -d, -f1\n  # Hint: Use the following command\
    \ to get the first column of the last row of a CSV:\n  # tail -n 1 | cut -d, -f1\n\
    \  # Hint: Use the following command to get the second column of the first row\
    \ of a CSV:\n  # head -n 1 | cut -d, -f2\n  # Hint: Use the following command\
    \ to get the second column of the last row of a CSV:\n  # tail -n 1 | cut -d,\
    \ -f2\n  # Hint: Use the following command to get the first column of all rows\
    \ of a CSV:\n  # cut -d, -f1\n  # Hint: Use the following command to get the second\
    \ column of all rows of a CSV:\n  # cut -d, -f2\n  # Hint: Use the following command\
    \ to get the first column of all rows except the first row", "    # TODO: Implement\
    \ this function\n    # Hint: Use the following command to convert a string to\
    \ lower case:\n    # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # Hint:\
    \ Use the following command to convert a string to upper case:\n    # echo \"\
    hello\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the following command to\
    \ check if a string is all upper case:\n    # echo \"HELLO\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all lower case:\n    # echo \"hello\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all digits:\n    # echo \"12345\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is empty:\n    # echo -n \"\" | grep -q '^$' && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a string\
    \ is not empty:\n    # echo -n \"hello\" | grep -q '^$' && echo \"false\" || echo\
    \ \"true\"\n    # Hint: Use the following command to check if a file is empty:\n\
    \    # test -s file.txt && echo \"false\" || echo \"true\"\n    # Hint: Use the\
    \ following command to check if a file is not empty:\n    # test -s file.txt &&\
    \ echo \"true\" || echo \"false\"\n    # Hint: Use the following command to check\
    \ if a file exists:\n    # test -e file.txt && echo \"true\" || echo \"false\"\
    \n    # Hint: Use the following command to check if a file does not exist:\n \
    \   # test -e file.txt && echo \"false\" || echo \"true\"\n    # Hint: Use the\
    \ following command to check if a file is a regular file:\n    # test -f file.txt\
    \ && echo \"true\" || echo \"false\"\n", "    # TODO: implement this function\n\
    \    # Hint: use the following command to check if a string is in upper case:\n\
    \    # [[ \"$string\" == *[[:upper:]]* ]]\n    # Hint: use the following command\
    \ to check if a string is in lower case:\n    # [[ \"$string\" == *[[:lower:]]*\
    \ ]]\n    # Hint: use the following command to check if a string is empty:\n \
    \   # [[ -z \"$string\" ]]\n    # Hint: use the following command to check if\
    \ a string is not empty:\n    # [[ -n \"$string\" ]]\n    # Hint: use the following\
    \ command to get the first column of a CSV:\n    # cut -d, -f1\n    # Hint: use\
    \ the following command to get the second column of a CSV:\n    # cut -d, -f2\n\
    \    # Hint: use the following command to get the number of lines in a CSV:\n\
    \    # wc -l\n    # Hint: use the following command to check if a string is a\
    \ number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following\
    \ command to check if a string is not a number:\n    # [[ ! \"$string\" =~ ^[0-9]+$\
    \ ]]\n    # Hint: use the following command to check if a string is a number:\n\
    \    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following command to\
    \ check if a string is not a number:\n    # [[ ! \"$string\" =~ ^[0-9]+$ ]]\n\
    \    # Hint: use the following command to check if a string is a number:\n   \
    \ # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following command to check\
    \ if a string is not a number:\n    # [[ ! \"$string\" =~ ^[0-9]+$ ]]\n    # Hint:\
    \ use the following command to check if a string is a number:\n    # [[ \"$string\"\
    \ =~ ^[0-9]+$ ]]\n    # Hint: use the following command to check if a string is\
    \ not a number:", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  local csv=\"$1\"\n  local upper_keys=$(echo \"$csv\" | cut -d, -f1 |\
    \ grep -v '[a-z]')\n  local lower_keys=$(echo \"$csv\" | cut -d, -f1 | grep -v\
    \ '[A-Z]')\n  if [ -z \"$upper_keys\" ] && [ -z \"$lower_keys\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  # TODO: Implement this function\n\
    \  # Hint: Use the following command to get the first column\n  # of a CSV:\n\
    \  #   echo \"a,apple\\nb,banana\" | cut -d, -f1\n  # Hint: Use the following\
    \ command to get the second column\n  # of a CSV:\n  #   echo \"a,apple\\nb,banana\"\
    \ | cut -d, -f2\n  # Hint: Use the following command to check if a string is\n\
    \  # all upper case:\n  #   echo \"ABC\" | grep -q '^[A-Z]*$' && echo \"true\"\
    \ || echo \"false\"\n  # Hint: Use the following command to check if a string\
    \ is\n  # all lower case:\n  #   echo \"abc\" | grep -q '^[a-z]*$' && echo \"\
    true\" || echo \"false\"\n  # Hint: Use the following command to check if a string\
    \ is\n  # empty:\n  #   echo \"\" | grep -q '^$' && echo \"true\" || echo \"false\"\
    \n  # Hint: Use the following command to check if a string is\n  # not empty:\n\
    \  #   echo \"abc\" | grep -q '^$' && echo \"true\" || echo \"false\"\n  # Hint:\
    \ Use the following command to check if a string is\n  # a number:\n  #   echo\
    \ \"123\" | grep -q '^[0-9]*$' && echo \"true\" || echo \"false\"\n  # Hint: Use\
    \ the following command to check if a string is\n  # not a number:\n  #   echo\
    \ \"abc\" | grep -q '^[0-9]*$' && echo \"true\" || echo \"false\"\n  # Hint: Use\
    \ the following command to check if a string is\n  # a number:\n  #   echo \"\
    123\" | grep -q '^[0-9]*$' && echo \"true\" || echo \"false\"\n  # Hint: Use the\
    \ following command to check if a string is\n  # not a number:\n  #   echo \"\
    abc\" | grep -q '^[0-9]*$' && echo", "  local csv=\"$1\"\n  local keys=$(echo\
    \ \"$csv\" | cut -d, -f1)\n  local lower_keys=$(echo \"$keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local upper_keys=$(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [ \"$keys\" = \"$lower_keys\" ] || [ \"$keys\" = \"$upper_keys\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  # TODO: implement this\
    \ function\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n \
    \ # check if all keys are upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ '[:lower:]' '[:upper:]' | tr -d '\\n')\" = \"$(echo \"$1\" | cut -d, -f1 | tr\
    \ -d '\\n')\" ]; then\n    echo \"true\"\n    return\n  fi\n  # check if all keys\
    \ are lower case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]'\
    \ | tr -d '\\n')\" = \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  echo \"false\"", "  # TODO: implement\
    \ this function\n  echo \"false\"", "    # TODO: Implement this function\n   \
    \ # Hint: Use the `tr` command to convert upper case to lower case\n    # and\
    \ vice versa.\n    # Hint: Use the `grep` command to check if a string matches\
    \ a\n    # regular expression.\n    # Hint: Use the `cut` command to extract the\
    \ first column of the\n    # CSV.\n    # Hint: Use the `wc` command to count the\
    \ number of lines in a\n    # file.\n    # Hint: Use the `head` command to get\
    \ the first line of a file.\n    # Hint: Use the `tail` command to get all but\
    \ the first line of\n    # a file.\n    # Hint: Use the `sort` command to sort\
    \ a file.\n    # Hint: Use the `uniq` command to remove duplicate lines from a\n\
    \    # file.\n    # Hint: Use the `comm` command to compare two files.\n    #\
    \ Hint: Use the `tr` command to remove all newlines from a file.\n    # Hint:\
    \ Use the `wc` command to count the number of characters\n    # in a file.\n \
    \   # Hint: Use the `cut` command to extract the first field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the second field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the third field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the fourth field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the fifth field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the sixth field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the seventh field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the eighth field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the ninth field of a\n    # CSV.\n\
    \    # Hint: Use the `cut` command to extract the tenth field of a\n    # CSV.\n\
    \    # Hint: Use the `", "    # TODO: Implement this function\n    # Hint: Use\
    \ the `tr` command to convert upper case to lower case\n    # and vice versa.\n\
    \    # Hint: Use the `grep` command to check if a string is all upper\n    # case\
    \ or all lower case.\n    # Hint: Use the `cut` command to get the first column\
    \ of the CSV.\n    # Hint: Use the `wc` command to count the number of lines in\
    \ a file.\n    # Hint: Use the `head` command to get the first line of a file.\n\
    \    # Hint: Use the `tail` command to get all but the first line of a file.\n\
    \    # Hint: Use the `sort` command to sort a file.\n    # Hint: Use the `uniq`\
    \ command to remove duplicate lines from a file.\n    # Hint: Use the `wc` command\
    \ to count the number of lines in a file.\n    # Hint: Use the `tr` command to\
    \ remove the newline character from a string.\n    # Hint: Use the `wc` command\
    \ to count the number of characters in a string.\n    # Hint: Use the `expr` command\
    \ to do arithmetic.\n    # Hint: Use the `read` command to read a variable from\
    \ a string.\n    # Hint: Use the `if` statement to check if a condition is true.\n\
    \    # Hint: Use the `else` statement to check if a condition is false.\n    #\
    \ Hint: Use the `echo` command to print a string.\n    # Hint: Use the `exit`\
    \ command to exit the script.\n    # Hint: Use the `return` command to return\
    \ a value from a function.\n    # Hint: Use the `$()` syntax to run a command\
    \ and capture its output.\n    # Hint: Use the `$1` syntax to access the first\
    \ argument of a function.\n    # Hint: Use the `$#` syntax to access the number\
    \ of arguments of a function.\n    # Hint: Use the `$@` syntax to access all arguments\
    \ of a function.\n    # Hint: Use the `$?` syntax to access the exit status of\
    \ a command.\n    # Hint: Use the `$0` syntax", "    # TODO: Implement this function\n\
    \    # Hint: Use the following commands to convert a string to lower case:\n \
    \   #   $ echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    #   hello\n    # Hint:\
    \ Use the following commands to convert a string to upper case:\n    #   $ echo\
    \ \"hello\" | tr '[:lower:]' '[:upper:]'\n    #   HELLO\n    # Hint: Use the following\
    \ commands to check if a string is in lower case:\n    #   $ echo \"hello\" |\
    \ grep -q '[^[:lower:]]' && echo \"false\" || echo \"true\"\n    #   true\n  \
    \  # Hint: Use the following commands to check if a string is in upper case:\n\
    \    #   $ echo \"HELLO\" | grep -q '[^[:upper:]]' && echo \"false\" || echo \"\
    true\"\n    #   true\n    # Hint: Use the following commands to check if a string\
    \ is empty:\n    #   $ echo -n \"\" | grep -q '^$' && echo \"true\" || echo \"\
    false\"\n    #   true\n    # Hint: Use the following commands to check if a string\
    \ is not empty:\n    #   $ echo -n \"hello\" | grep -q '^$' && echo \"true\" ||\
    \ echo \"false\"\n    #   false\n    # Hint: Use the following commands to check\
    \ if a string is a number:\n    #   $ echo \"123\" | grep -q '^[0-9]*$' && echo\
    \ \"true\" || echo \"false\"\n    #   true\n    # Hint: Use the following commands\
    \ to check if a string is not a number:\n    #   $ echo \"123\" | grep -q '^[0-9]*$'\
    \ && echo \"false\" || echo \"true\"\n    #   false\n    # Hint: Use the following\
    \ commands to check if a string is a number:\n    #   $ echo \"123\" | grep -q\
    \ '^[0-9]*$' && echo \"true\" || echo \"false\"\n    #   true\n    # Hint: Use\
    \ the following commands to check if a string is not a number:\n    #", "    if\
    \ [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n    local\
    \ csv=$1\n    local lower_case_keys=$(echo \"$csv\" | awk -F, '{print tolower($1)}')\n\
    \    local upper_case_keys=$(echo \"$csv\" | awk -F, '{print toupper($1)}')\n\
    \    if [ \"$csv\" == \"$lower_case_keys\" ]; then\n        echo \"true\"\n  \
    \  elif [ \"$csv\" == \"$upper_case_keys\" ]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "  # TODO: Implement this function\n\
    \  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  IFS=',' read\
    \ -ra arr <<< \"$1\"\n  if [[ ${arr[0]} =~ ^[a-z]+$ ]]; then\n    for i in \"\
    ${arr[@]}\"; do\n      if [[ ! $i =~ ^[a-z]+$ ]]; then\n        echo \"false\"\
    \n        return\n      fi\n    done\n    echo \"true\"\n    return\n  elif [[\
    \ ${arr[0]} =~ ^[A-Z]+$ ]]; then\n    for i in \"${arr[@]}\"; do\n      if [[\
    \ ! $i =~ ^[A-Z]+$ ]]; then\n        echo \"false\"\n        return\n      fi\n\
    \    done\n    echo \"true\"\n    return\n  else\n    echo \"false\"\n    return\n\
    \  fi", "    # TODO: implement this function\n    # Hint: use the tr command to\
    \ convert upper case to lower case\n    # and vice versa\n    # Hint: use the\
    \ cut command to extract the first column\n    # Hint: use the grep command to\
    \ check if the first column\n    # contains any non-alphabetic characters\n  \
    \  # Hint: use the grep command to check if the first column\n    # contains any\
    \ lower case characters\n    # Hint: use the grep command to check if the first\
    \ column\n    # contains any upper case characters\n    # Hint: use the test command\
    \ to check if the first column\n    # contains any non-alphabetic characters\n\
    \    # Hint: use the test command to check if the first column\n    # contains\
    \ any lower case characters\n    # Hint: use the test command to check if the\
    \ first column\n    # contains any upper case characters\n    # Hint: use the\
    \ test command to check if the first column\n    # contains any characters\n \
    \   # Hint: use the test command to check if the first column\n    # contains\
    \ any characters\n    # Hint: use the test command to check if the first column\n\
    \    # contains any characters\n    # Hint: use the test command to check if the\
    \ first column\n    # contains any characters\n    # Hint: use the test command\
    \ to check if the first column\n    # contains any characters\n    # Hint: use\
    \ the test command to check if the first column\n    # contains any characters\n\
    \    # Hint: use the test command to check if the first column\n    # contains\
    \ any characters\n    # Hint: use the test command to check if the first column\n\
    \    # contains any characters\n    # Hint: use the test command to check if the\
    \ first column\n    # contains any characters\n    # Hint: use the test command\
    \ to check if the first column\n    # contains any characters\n    # Hint: use\
    \ the test command to check if the first column\n    # contains any characters\n\
    \    # Hint: use the test command to check if the first column\n    # contains\
    \ any characters\n    # Hint: use the test command to check if the first column\n\
    \    # contains any characters\n    # Hint: use the test command to check if the\
    \ first column\n    # contains any characters\n    # Hint: use the test", "  local\
    \ csv=\"$1\"\n  local keys=$(echo \"$csv\" | cut -d, -f1)\n  local lower_keys=$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\n  if [ \"$keys\" == \"$lower_keys\" ] || [ \"\
    $keys\" == \"$upper_keys\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  # TODO: implement this function\n  # Hint: use the following commands\
    \ to check if a string is in upper case\n  # or lower case:\n  # [[ $str =~ ^[A-Z]+$\
    \ ]]\n  # [[ $str =~ ^[a-z]+$ ]]\n  #\n  # Hint: use the following command to\
    \ split a string by a delimiter:\n  # IFS=',' read -ra arr <<< \"$str\"\n  #\n\
    \  # Hint: use the following command to check if a string is empty:\n  # [[ -z\
    \ $str ]]\n  #\n  # Hint: use the following command to check if a string is a\
    \ number:\n  # [[ $str =~ ^[0-9]+$ ]]\n  #\n  # Hint: use the following command\
    \ to check if a string is a letter:\n  # [[ $str =~ ^[a-zA-Z]+$ ]]\n  #\n  # Hint:\
    \ use the following command to check if a string is a letter or a number:\n  #\
    \ [[ $str =~ ^[a-zA-Z0-9]+$ ]]\n  #\n  # Hint: use the following command to check\
    \ if a string is a letter or a number\n  # or a space:\n  # [[ $str =~ ^[a-zA-Z0-9\
    \ ]+$ ]]\n  #\n  # Hint: use the following command to check if a string is a letter\
    \ or a number\n  # or a space or a comma:\n  # [[ $str =~ ^[a-zA-Z0-9 ,]+$ ]]\n\
    \  #\n  # Hint: use the following command to check if a string is a letter or\
    \ a number\n  # or a space or a comma or a newline:\n  # [[ $str =~ ^[a-zA-Z0-9\
    \ ,\\n]+$ ]]\n  #\n  # Hint: use the following command to check if a string is\
    \ a letter or a number\n  # or a space or a comma or a newline or a colon:\n \
    \ # [[ $str =~ ^[a-zA-Z0-9 ,\\n:]+$ ]]", "    # TODO: Implement this function\n\
    \    # Hint: You can use the following bash functions:\n    #   - awk\n    # \
    \  - tr\n    #   - grep\n    #   - sed\n    #   - sort\n    #   - uniq\n    #\
    \   - head\n    #   - tail\n    #   - wc\n    #   - expr\n    #   - echo\n   \
    \ #   - read\n    #   - set\n    #   - declare\n    #   - local\n    #   - readonly\n\
    \    #   - typeset\n    #   - [[\n    #   - test\n    #   - [\n    #   - ]\n \
    \   #   - if\n    #   - then\n    #   - else\n    #   - fi\n    #   - for\n  \
    \  #   - do\n    #   - done\n    #   - case\n    #   - in\n    #   - esac\n  \
    \  #   - function\n    #   - return\n    #   - :\n    #   - true\n    #   - false\n\
    \    #   - exit\n    #   - trap\n    #   - readonly\n    #   - local\n    #  \
    \ - declare\n    #   - typeset\n    #   - export\n    #   - read\n    #   - printf\n\
    \    #   - echo\n    #   - cat\n    #   - seq\n    #   - echo\n    #   - printf\n\
    \    #   - pushd\n    #   - popd\n    #   - cd\n    #   - pwd\n    #   - type\n\
    \    #   - which\n    #   - man\n    #   - time\n    #   - time\n    #   - read\n\
    \    #   - echo\n    #   - printf\n    #   - pushd\n    #   - popd\n    #   -\
    \ cd\n    #   - pwd\n    #   - type\n    #   - which\n    #   - man\n    #   -\
    \ time\n    #   - time\n    #   - read\n    #   - echo\n    #   - printf\n   \
    \ #   - pushd\n    #   - popd\n    #   - cd\n    #   - pwd\n    #  ", "    # TODO:\
    \ Implement this function\n    # Hint: Use the following command to check if a\
    \ string is all upper case\n    # [[ \"$string\" == *[[:upper:]]* ]]\n    # Hint:\
    \ Use the following command to check if a string is all lower case\n    # [[ \"\
    $string\" == *[[:lower:]]* ]]\n    # Hint: Use the following command to check\
    \ if a string is all digits\n    # [[ \"$string\" == *[[:digit:]]* ]]\n    # Hint:\
    \ Use the following command to check if a string is empty\n    # [[ -z \"$string\"\
    \ ]]\n    # Hint: Use the following command to check if a string is not empty\n\
    \    # [[ -n \"$string\" ]]\n    # Hint: Use the following command to convert\
    \ a string to lower case\n    # string=$(echo \"$string\" | tr '[:upper:]' '[:lower:]')\n\
    \    # Hint: Use the following command to convert a string to upper case\n   \
    \ # string=$(echo \"$string\" | tr '[:lower:]' '[:upper:]')\n    # Hint: Use the\
    \ following command to get the first column of a CSV\n    # column=$(echo \"$csv\"\
    \ | cut -d ',' -f 1)\n    # Hint: Use the following command to get the second\
    \ column of a CSV\n    # column=$(echo \"$csv\" | cut -d ',' -f 2)\n    # Hint:\
    \ Use the following command to get the number of columns in a CSV\n    # columns=$(echo\
    \ \"$csv\" | awk -F ',' '{print NF}')\n    # Hint: Use the following command to\
    \ get the number of rows in a CSV\n    # rows=$(echo \"$csv\" | wc -l)\n    #\
    \ Hint: Use the following command to get the number of rows in a CSV\n    # rows=$(echo\
    \ \"$csv\" | wc -l)\n    # Hint: Use the following command to get the number of\
    \ rows in a CSV\n    # rows=$(echo \"$csv\" | wc -l)\n    # Hint: Use the following\
    \ command to get the number of rows in a CSV\n    # rows=$(echo \"$csv\" | wc\
    \ -l)\n    #", "  # TODO: Implement this function\n  # Hint: Use the tr command\
    \ to convert the case of the keys\n  # Hint: Use the cut command to get the first\
    \ column of the CSV\n  # Hint: Use the sort command to sort the keys\n  # Hint:\
    \ Use the uniq command to get the unique keys\n  # Hint: Use the wc command to\
    \ count the number of unique keys\n  # Hint: Use the sed command to remove the\
    \ newline character\n  # Hint: Use the head command to get the first line of the\
    \ CSV\n  # Hint: Use the tail command to get the last line of the CSV\n  # Hint:\
    \ Use the diff command to compare the first and last lines\n  # Hint: Use the\
    \ grep command to check if the diff output is empty\n  # Hint: Use the wc command\
    \ to count the number of lines in the diff output\n  # Hint: Use the test command\
    \ to check if the count is zero\n  # Hint: Use the echo command to print the result\n\
    \  # Hint: Use the return command to return the result\n  # Hint: Use the exit\
    \ command to exit with the result\n  # Hint: Use the exit command to exit with\
    \ the result\n  # Hint: Use the exit command to exit with the result\n  # Hint:\
    \ Use the exit command to exit with the result\n  # Hint: Use the exit command\
    \ to exit with the result\n  # Hint: Use the exit command to exit with the result\n\
    \  # Hint: Use the exit command to exit with the result\n  # Hint: Use the exit\
    \ command to exit with the result\n  # Hint: Use the exit command to exit with\
    \ the result\n  # Hint: Use the exit command to exit with the result\n  # Hint:\
    \ Use the exit command to exit with the result\n  # Hint: Use the exit command\
    \ to exit with the result\n  # Hint: Use the exit command to exit with the result\n\
    \  # Hint: Use the exit command to exit with the result\n  # Hint: Use the exit\
    \ command to exit with the result\n  # Hint: Use the exit command to exit with\
    \ the result\n  # Hint: Use the exit command to exit with the result\n  # Hint:\
    \ Use the exit command to exit", "  # Write your code here\n  #\n  # Hint: You\
    \ can use the following bash functions:\n  #   - tr: translate characters\n  #\
    \   - cut: cut out selected fields of each line of a file\n  #   - sort: sort\
    \ lines of text files\n  #   - uniq: report or omit repeated lines\n  #   - wc:\
    \ print newline, word, and byte counts for each file\n  #\n  # Hint: You can use\
    \ the following bash operators:\n  #   - -eq: equal\n  #   - -ne: not equal\n\
    \  #   - -gt: greater than\n  #   - -lt: less than\n  #   - -ge: greater than\
    \ or equal\n  #   - -le: less than or equal\n  #\n  # Hint: You can use the following\
    \ bash control flow statements:\n  #   - if\n  #   - then\n  #   - else\n  # \
    \  - fi\n  #\n  # Hint: You can use the following bash redirection operators:\n\
    \  #   - >: redirect standard output\n  #   - >>: append standard output\n  #\
    \   - <: redirect standard input\n  #   - <<: here document\n  #   - >&: redirect\
    \ standard output and standard error\n  #   - <>: redirect both standard output\
    \ and standard error\n  #   - <<-: here document, strip leading tabs\n  #   -\
    \ <<<: here string\n  #\n  # Hint: You can use the following bash special parameters:\n\
    \  #   - $#: number of arguments\n  #   - $@: all arguments\n  #   - $*: all arguments\n\
    \  #   - $?: exit status of the last command\n  #   - $$: process ID of the current\
    \ shell\n  #   - $!: process ID of the last background command\n  #   - $0: name\
    \ of the shell or shell script\n  #   - $n: nth argument\n  #   - $#n: length\
    \ of nth argument\n  #   - $FUNCNAME: name of the current function\n  #   - $LINENO:\
    \ line number of the current statement\n  #   - $BASH_VERSION: version number\
    \ of current instance of Bash\n  #   - $B", "    # TODO: implement this function\n\
    \    # Hint: use awk\n    # Hint: use the tolower() and toupper() functions\n\
    \    # Hint: use the length() function\n    # Hint: use the substr() function\n\
    \    # Hint: use the index() function\n    # Hint: use the match() function\n\
    \    # Hint: use the split() function\n    # Hint: use the exit() function\n \
    \   # Hint: use the system() function\n    # Hint: use the printf() function\n\
    \    # Hint: use the print() function\n    # Hint: use the getline() function\n\
    \    # Hint: use the ENVIRON array\n    # Hint: use the FILENAME variable\n  \
    \  # Hint: use the FNR variable\n    # Hint: use the FS variable\n    # Hint:\
    \ use the NF variable\n    # Hint: use the NR variable\n    # Hint: use the OFS\
    \ variable\n    # Hint: use the ORS variable\n    # Hint: use the RS variable\n\
    \    # Hint: use the ARGC variable\n    # Hint: use the ARGV variable\n    # Hint:\
    \ use the ARGIND variable\n    # Hint: use the ERRNO variable\n    # Hint: use\
    \ the IGNORECASE variable\n    # Hint: use the RLENGTH variable\n    # Hint: use\
    \ the RSTART variable\n    # Hint: use the SUBSEP variable\n    # Hint: use the\
    \ BEGIN block\n    # Hint: use the END block\n    # Hint: use the BEGINFILE block\n\
    \    # Hint: use the ENDFILE block\n    # Hint: use the BEGINLINE block\n    #\
    \ Hint: use the ENDLINE block\n    # Hint: use the BEGINWORD block\n    # Hint:\
    \ use the ENDWORD block\n    # Hint: use the BEGINTEXT block\n    # Hint: use\
    \ the ENDTEXT block\n    # Hint: use the BEGINFIELD block\n    # Hint: use the\
    \ ENDFIELD block\n    # Hint: use the BEGINRECORD block\n    # Hint: use the ENDRECORD\
    \ block\n    # Hint: use the B", "  # TODO: Implement this function\n  # HINT:\
    \ Use the `tr` command to convert the CSV to lower case\n  #       and then compare\
    \ the two strings\n  # HINT: Use the `tr` command to convert the CSV to upper\
    \ case\n  #       and then compare the two strings\n  # HINT: Use the `wc` command\
    \ to count the number of lines in the CSV\n  #       and then compare the number\
    \ of lines to 1\n  # HINT: Use the `cut` command to extract the first column of\
    \ the CSV\n  #       and then compare the two strings\n  # HINT: Use the `cut`\
    \ command to extract the second column of the CSV\n  #       and then compare\
    \ the two strings\n  # HINT: Use the `grep` command to check if the CSV contains\
    \ any numbers\n  #       and then compare the number of lines to 0\n  # HINT:\
    \ Use the `grep` command to check if the CSV contains any uppercase\n  #     \
    \  letters and then compare the number of lines to 0\n  # HINT: Use the `grep`\
    \ command to check if the CSV contains any lowercase\n  #       letters and then\
    \ compare the number of lines to 0\n  # HINT: Use the `grep` command to check\
    \ if the CSV contains any non-alphanumeric\n  #       characters and then compare\
    \ the number of lines to 0\n  # HINT: Use the `grep` command to check if the CSV\
    \ contains any non-alphanumeric\n  #       characters and then compare the number\
    \ of lines to 0\n  # HINT: Use the `grep` command to check if the CSV contains\
    \ any non-alphanumeric\n  #       characters and then compare the number of lines\
    \ to 0\n  # HINT: Use the `grep` command to check if the CSV contains any non-alphanumeric\n\
    \  #       characters and then compare the number of lines to 0\n  # HINT: Use\
    \ the `grep` command to check if the CSV contains any non-alphanumeric\n  #  \
    \     characters and then compare the number of lines to 0\n  # HINT: Use the\
    \ `grep` command to check if the CSV contains any non-alphanumeric\n  #      \
    \ characters and then compare the number of lines to 0\n  # HINT: Use the `",
  "    # TODO: Implement this function\n    # Hint: Use the following command to check\
    \ if a string is in upper case:\n    # [[ $string == *[[:upper:]]* ]]\n    # Hint:\
    \ Use the following command to check if a string is in lower case:\n    # [[ $string\
    \ == *[[:lower:]]* ]]\n    # Hint: Use the following command to split a string\
    \ into an array:\n    # IFS=',' read -r -a array <<< \"$string\"\n    # Hint:\
    \ Use the following command to get the length of an array:\n    # ${#array[@]}\n\
    \    # Hint: Use the following command to get the first element of an array:\n\
    \    # ${array[0]}\n    # Hint: Use the following command to get the second element\
    \ of an array:\n    # ${array[1]}\n    # Hint: Use the following command to get\
    \ the last element of an array:\n    # ${array[-1]}\n    # Hint: Use the following\
    \ command to get the second to last element of an array:\n    # ${array[-2]}\n\
    \    # Hint: Use the following command to get the first two elements of an array:\n\
    \    # ${array[@]:0:2}\n    # Hint: Use the following command to get the last\
    \ two elements of an array:\n    # ${array[@]: -2}\n    # Hint: Use the following\
    \ command to get the first two elements of an array:\n    # ${array[@]:2}\n  \
    \  # Hint: Use the following command to get the first two elements of an array:\n\
    \    # ${array[@]:2}\n    # Hint: Use the following command to get the first two\
    \ elements of an array:\n    # ${array[@]:2}\n    # Hint: Use the following command\
    \ to get the first two elements of an array:\n    # ${array[@]:2}\n    # Hint:\
    \ Use the following command to get the first two elements of an array:\n    #\
    \ ${array[@]:2}\n    # Hint: Use the following command to get the first two elements\
    \ of an array:\n    # ${array[@]:2}\n    # Hint: Use the following command to\
    \ get the", "    # TODO: Implement this function\n    if [ -z \"$1\" ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    # if [ \"$(echo \"$1\" |\
    \ tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\" != \"$1\"\
    \ ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n    # if [ \"\
    $(echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\"\
    \ != \"$1\" ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n  \
    \  # if [ \"$(echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\"\
    \ != \"$1\" ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n  \
    \  # if [ \"$(echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\"\
    \ != \"$1\" ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n  \
    \  # if [ \"$(echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\"\
    \ != \"$1\" ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n  \
    \  # if [ \"$(echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -E '^[a-zA-Z0-9,]*$')\"\
    \ != \"$1\" ]; then\n    #     echo \"false\"\n    #     return\n    # fi\n  \
    \  # if [ \"$(echo \"$1\" |", "    # Write your code here\n    if [ -z \"$1\"\
    \ ]; then\n        echo \"false\"\n        return\n    fi\n    IFS=',' read -ra\
    \ arr <<< \"$1\"\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"false\"\n\
    \        return\n    fi\n    if [[ \"${arr[0]}\" =~ ^[a-z]+$ ]]; then\n      \
    \  for i in \"${arr[@]}\"; do\n            if [[ ! \"$i\" =~ ^[a-z]+$ ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \    done\n        echo \"true\"\n        return\n    fi\n    if [[ \"${arr[0]}\"\
    \ =~ ^[A-Z]+$ ]]; then\n        for i in \"${arr[@]}\"; do\n            if [[\
    \ ! \"$i\" =~ ^[A-Z]+$ ]]; then\n                echo \"false\"\n            \
    \    return\n            fi\n        done\n        echo \"true\"\n        return\n\
    \    fi\n    echo \"false\"", "  # TODO: Implement this function\n  # Hint: Use\
    \ the following command to get the first column\n  # echo \"a,apple\\nb,banana\"\
    \ | cut -d, -f1\n  # Hint: Use the following command to get the second column\n\
    \  # echo \"a,apple\\nb,banana\" | cut -d, -f2\n  # Hint: Use the following command\
    \ to convert a string to lower case\n  # echo \"ABC\" | tr '[:upper:]' '[:lower:]'\n\
    \  # Hint: Use the following command to convert a string to upper case\n  # echo\
    \ \"abc\" | tr '[:lower:]' '[:upper:]'\n  # Hint: Use the following command to\
    \ check if a string is empty\n  # [[ -z \"$string\" ]]\n  # Hint: Use the following\
    \ command to check if a string is all upper case\n  # [[ \"$string\" == \"$(echo\
    \ \"$string\" | tr '[:lower:]' '[:upper:]')\" ]]\n  # Hint: Use the following\
    \ command to check if a string is all lower case\n  # [[ \"$string\" == \"$(echo\
    \ \"$string\" | tr '[:upper:]' '[:lower:]')\" ]]\n  # Hint: Use the following\
    \ command to check if a string is all alphabetic\n  # [[ \"$string\" =~ ^[a-zA-Z]+$\
    \ ]]\n  # Hint: Use the following command to check if a string is all numeric\n\
    \  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is all alphanumeric\n  # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n \
    \ # Hint: Use the following command to check if a string is all alphabetic\n \
    \ # or numeric\n  # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n  # Hint: Use the following\
    \ command to check if a string is all alphabetic\n  # or numeric or underscore\n\
    \  # [[ \"$string\" =~ ^[a-zA-Z0-9_]+$ ]]\n  # Hint: Use the following command\
    \ to", "  # TODO: Implement this function\n  # Hint: Use the following command\
    \ to convert a string to lower case:\n  # $(echo \"STRING\" | tr '[:upper:]' '[:lower:]')\n\
    \  # Hint: Use the following command to convert a string to upper case:\n  # $(echo\
    \ \"STRING\" | tr '[:lower:]' '[:upper:]')\n  # Hint: Use the following command\
    \ to check if a string is all upper case:\n  # [[ \"STRING\" == *[[:upper:]]*\
    \ ]]\n  # Hint: Use the following command to check if a string is all lower case:\n\
    \  # [[ \"STRING\" == *[[:lower:]]* ]]\n  # Hint: Use the following command to\
    \ check if a string is all digits:\n  # [[ \"STRING\" == *[[:digit:]]* ]]\n  #\
    \ Hint: Use the following command to check if a string is empty:\n  # [[ -z \"\
    STRING\" ]]\n  # Hint: Use the following command to check if a string is not empty:\n\
    \  # [[ -n \"STRING\" ]]\n  # Hint: Use the following command to check if a string\
    \ is not empty and\n  # all characters are digits:\n  # [[ -n \"STRING\" && \"\
    STRING\" == *[[:digit:]]* ]]\n  # Hint: Use the following command to check if\
    \ a string is not empty and\n  # all characters are upper case:\n  # [[ -n \"\
    STRING\" && \"STRING\" == *[[:upper:]]* ]]\n  # Hint: Use the following command\
    \ to check if a string is not empty and\n  # all characters are lower case:\n\
    \  # [[ -n \"STRING\" && \"STRING\" == *[[:lower:]]* ]]\n  # Hint: Use the following\
    \ command to check if a string is not empty and\n  # all characters are upper\
    \ case or all characters are lower case:\n  # [[ -n \"STRING\" && (\"STRING\"\
    \ == *[[:upper:]]* || \"STRING\" == *[[:lower:]]*) ]]\n  # Hint: Use the following\
    \ command to check if a string is not empty and\n ", "  if [ -z \"$1\" ]; then\n\
    \    echo \"false\"\n    return\n  fi\n  # Get the first key\n  first_key=$(echo\
    \ \"$1\" | cut -d, -f1)\n  # Get the first key's case\n  first_key_case=$(echo\
    \ \"$first_key\" | tr '[:upper:]' '[:lower:]')\n  # If the first key's case is\
    \ the same as the first key,\n  # then the first key is lower case\n  if [ \"\
    $first_key\" == \"$first_key_case\" ]; then\n    # Check if all keys are lower\
    \ case\n    echo \"$1\" | awk -F, '{print tolower($1)}' | grep -v \"$first_key\"\
    \ | grep -q .\n    if [ $? -eq 0 ]; then\n      echo \"false\"\n      return\n\
    \    fi\n  else\n    # Check if all keys are upper case\n    echo \"$1\" | awk\
    \ -F, '{print toupper($1)}' | grep -v \"$first_key\" | grep -q .\n    if [ $?\
    \ -eq 0 ]; then\n      echo \"false\"\n      return\n    fi\n  fi\n  echo \"true\"",
  "    # Check if the CSV is empty\n    if [ -z \"$1\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n\n    # Check if the first key is upper case\n    if\
    \ [[ \"$(echo \"$1\" | cut -d ',' -f 1 | head -n 1)\" =~ ^[A-Z]+$ ]]; then\n \
    \       # Check if all keys are upper case\n        if [[ \"$(echo \"$1\" | cut\
    \ -d ',' -f 1)\" =~ ^[A-Z]+$ ]]; then\n            echo \"true\"\n           \
    \ return\n        fi\n    fi\n\n    # Check if the first key is lower case\n \
    \   if [[ \"$(echo \"$1\" | cut -d ',' -f 1 | head -n 1)\" =~ ^[a-z]+$ ]]; then\n\
    \        # Check if all keys are lower case\n        if [[ \"$(echo \"$1\" | cut\
    \ -d ',' -f 1)\" =~ ^[a-z]+$ ]]; then\n            echo \"true\"\n           \
    \ return\n        fi\n    fi\n\n    echo \"false\"", "    # TODO: implement this\
    \ function\n    echo \"false\"", "  # TODO: Implement this function\n  # Hint:\
    \ You can use the following bash functions:\n  #   - awk\n  #   - tr\n  #   -\
    \ grep\n  #   - sed\n  #   - cut\n  #   - wc\n  #   - sort\n  #   - uniq\n  #\
    \   - head\n  #   - tail\n  #   - expr\n  #   - if\n  #   - for\n  #   - while\n\
    \  #   - case\n  #   - echo\n  #   - printf\n  #   - read\n  #   - return\n  #\
    \   - etc.\n  # Hint: You can use the following bash built-in variables:\n  #\
    \   - $#\n  #   - $@\n  #   - $?\n  #   - $$\n  #   - $!\n  #   - $0\n  #   -\
    \ $1\n  #   - $2\n  #   - etc.\n  # Hint: You can use the following bash built-in\
    \ operators:\n  #   - [[ ]]\n  #   - [ ]\n  #   - (( ))\n  #   - (( ))\n  #  \
    \ - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   -\
    \ (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - ((\
    \ ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n\
    \  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n \
    \ #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #\
    \   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  #   - (( ))\n  # \
    \  - (( ))\n  #   - (( ))\n  #   - (( ))\n ", "    # TODO: implement this function\n\
    \    echo \"false\"", "  local csv=\"$1\"\n  local csv_len=$(echo \"$csv\" | wc\
    \ -l)\n  local csv_keys=$(echo \"$csv\" | cut -d, -f1)\n  local csv_values=$(echo\
    \ \"$csv\" | cut -d, -f2)\n  local csv_keys_len=$(echo \"$csv_keys\" | wc -l)\n\
    \  local csv_values_len=$(echo \"$csv_values\" | wc -l)\n  local csv_keys_upper=$(echo\
    \ \"$csv_keys\" | tr '[:lower:]' '[:upper:]')\n  local csv_keys_lower=$(echo \"\
    $csv_keys\" | tr '[:upper:]' '[:lower:]')\n  local csv_keys_upper_len=$(echo \"\
    $csv_keys_upper\" | wc -l)\n  local csv_keys_lower_len=$(echo \"$csv_keys_lower\"\
    \ | wc -l)\n  if [ $csv_len -eq 0 ]; then\n    echo \"false\"\n  elif [ $csv_keys_len\
    \ -eq $csv_keys_upper_len ]; then\n    echo \"true\"\n  elif [ $csv_keys_len -eq\
    \ $csv_keys_lower_len ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "    # Check if the CSV is empty\n    if [ -z \"$1\" ]; then\n       \
    \ echo \"false\"\n        return\n    fi\n\n    # Check if all keys are strings\
    \ in lower case\n    if [[ $1 =~ ^[a-z]*,[a-z]*$ ]]; then\n        echo \"true\"\
    \n        return\n    fi\n\n    # Check if all keys are strings in upper case\n\
    \    if [[ $1 =~ ^[A-Z]*,[A-Z]*$ ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # Return false if the above conditions are not met\n    echo \"\
    false\"", "  # TODO: implement this function\n  echo \"true\"", "    if [ -z \"\
    $1\" ]; then\n        echo \"false\"\n        return\n    fi\n    # get the first\
    \ key\n    first_key=$(echo \"$1\" | cut -d, -f1)\n    # check if it is all lower\
    \ case\n    if [[ \"$first_key\" =~ ^[a-z]+$ ]]; then\n        # if so, check\
    \ if all keys are lower case\n        if [[ \"$1\" =~ ^[a-z]+,[a-z]+$ ]]; then\n\
    \            echo \"true\"\n            return\n        fi\n    # check if it\
    \ is all upper case\n    elif [[ \"$first_key\" =~ ^[A-Z]+$ ]]; then\n       \
    \ # if so, check if all keys are upper case\n        if [[ \"$1\" =~ ^[A-Z]+,[A-Z]+$\
    \ ]]; then\n            echo \"true\"\n            return\n        fi\n    fi\n\
    \    echo \"false\"", "    # Your code here\n    if [ -z \"$1\" ]; then\n    \
    \    echo \"false\"\n        return\n    fi\n    IFS=\",\"\n    read -ra arr <<<\
    \ \"$1\"\n    if [ ${#arr[@]} -eq 2 ]; then\n        if [[ ${arr[0]} =~ [A-Z]\
    \ ]]; then\n            echo \"true\"\n            return\n        elif [[ ${arr[0]}\
    \ =~ [a-z] ]]; then\n            echo \"true\"\n            return\n        else\n\
    \            echo \"false\"\n            return\n        fi\n    fi\n    IFS=\"\
    \\n\"\n    read -ra arr <<< \"$1\"\n    for i in \"${arr[@]}\"; do\n        IFS=\"\
    ,\"\n        read -ra arr2 <<< \"$i\"\n        if [[ ${arr2[0]} =~ [A-Z] ]]; then\n\
    \            for i in \"${arr[@]}\"; do\n                IFS=\",\"\n         \
    \       read -ra arr2 <<< \"$i\"\n                if [[ ${arr2[0]} =~ [a-z] ]];\
    \ then\n                    echo \"false\"\n                    return\n     \
    \           fi\n            done\n            echo \"true\"\n            return\n\
    \        elif [[ ${arr2[0]} =~ [a-z] ]]; then\n            for i in \"${arr[@]}\"\
    ; do\n                IFS=\",\"\n                read -ra arr2 <<< \"$i\"\n  \
    \              if [[ ${arr2[0]} =~ [A-Z] ]]; then\n                    echo \"\
    false\"\n                    return\n                fi\n            done\n  \
    \          echo \"true\"\n            return\n        else\n            echo \"\
    false\"\n            return\n        fi\n    done", "    # TODO: Implement this\
    \ function\n    # Hint: Use the following commands to convert a string to lower\
    \ case:\n    # $ echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # hello\n  \
    \  # $ echo \"hello\" | tr '[:lower:]' '[:upper:]'\n    # HELLO\n    #\n    #\
    \ Hint: Use the following command to check if a string is in upper case:\n   \
    \ # $ [[ \"HELLO\" == *[[:upper:]]* ]] && echo \"true\" || echo \"false\"\n  \
    \  # true\n    # $ [[ \"hello\" == *[[:upper:]]* ]] && echo \"true\" || echo \"\
    false\"\n    # false\n    #\n    # Hint: Use the following command to check if\
    \ a string is in lower case:\n    # $ [[ \"HELLO\" == *[[:lower:]]* ]] && echo\
    \ \"true\" || echo \"false\"\n    # false\n    # $ [[ \"hello\" == *[[:lower:]]*\
    \ ]] && echo \"true\" || echo \"false\"\n    # true\n    #\n    # Hint: Use the\
    \ following command to check if a string is empty:\n    # $ [[ -z \"\" ]] && echo\
    \ \"true\" || echo \"false\"\n    # true\n    # $ [[ -z \"hello\" ]] && echo \"\
    true\" || echo \"false\"\n    # false\n    #\n    # Hint: Use the following command\
    \ to check if a string is not empty:\n    # $ [[ -n \"\" ]] && echo \"true\" ||\
    \ echo \"false\"\n    # false\n    # $ [[ -n \"hello\" ]] && echo \"true\" ||\
    \ echo \"false\"\n    # true\n    #\n    # Hint: Use the following command to\
    \ check if a string is a number:\n    # $ [[ \"123\" =~ ^[0-9]+$ ]] && echo \"\
    true\" || echo \"false\"\n    # true\n    # $ [[ \"123a\" =~ ^[0-9]+$ ]] && echo\
    \ \"true\" || echo \"false\"\n    # false\n    #\n    # Hint: Use the following\
    \ command to check if a string is not a number:\n", "    # TODO: Implement this\
    \ function\n    # Hint: Use the `tr` command to convert the CSV to lower case\n\
    \    #       and then compare it to the original CSV.\n    #       See the man\
    \ page for `tr` for more information.\n    #       You can use the `wc` command\
    \ to count the number of lines\n    #       in the CSV.\n    #       You can use\
    \ the `cut` command to extract the first column\n    #       of the CSV.\n   \
    \ #       You can use the `grep` command to check if the first column\n    # \
    \      of the CSV contains only upper case letters.\n    #       You can use the\
    \ `grep` command to check if the first column\n    #       of the CSV contains\
    \ only lower case letters.\n    #       You can use the `grep` command to check\
    \ if the first column\n    #       of the CSV contains only digits.\n    #   \
    \    You can use the `grep` command to check if the first column\n    #      \
    \ of the CSV contains only letters.\n    #       You can use the `grep` command\
    \ to check if the first column\n    #       of the CSV contains only letters and\
    \ digits.\n    #       You can use the `grep` command to check if the first column\n\
    \    #       of the CSV contains only letters and digits and underscore.\n   \
    \ #       You can use the `grep` command to check if the first column\n    # \
    \      of the CSV contains only letters and digits and underscore\n    #     \
    \  and dash.\n    #       You can use the `grep` command to check if the first\
    \ column\n    #       of the CSV contains only letters and digits and underscore\n\
    \    #       and dash and period.\n    #       You can use the `grep` command\
    \ to check if the first column\n    #       of the CSV contains only letters and\
    \ digits and underscore\n    #       and dash and period and plus.\n    #    \
    \   You can use the `grep` command to check if the first column\n    #       of\
    \ the CSV contains only letters and digits and underscore\n    #       and dash\
    \ and period and plus and slash.\n    #       You can use the `grep` command to\
    \ check if the first column\n    #       of the CSV contains only letters and\
    \ digits and underscore\n    #       and dash and period", "    # TODO: Implement\
    \ this function\n    # Hint: Use the function is_upper_case() and is_lower_case()\n\
    \    # Hint: Use the function is_csv_empty()\n    # Hint: Use the function is_csv_two_columns()\n\
    \    # Hint: Use the function get_csv_column()\n    # Hint: Use the function get_csv_row()\n\
    \    # Hint: Use the function get_csv_row_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get_csv_column_count()\n    # Hint: Use the function\
    \ get_csv_column_count()\n    # Hint: Use the function get_csv_column_count()\n\
    \    # Hint: Use the function get", "    # TODO: implement the function\n    #\
    \ Hint: use the following command to check if a string is all upper case\n   \
    \ # echo \"ABC\" | grep -q '^[[:upper:]]*$' && echo \"true\" || echo \"false\"\
    \n    # Hint: use the following command to check if a string is all lower case\n\
    \    # echo \"abc\" | grep -q '^[[:lower:]]*$' && echo \"true\" || echo \"false\"\
    \n    # Hint: use the following command to get the first column of a CSV\n   \
    \ # echo \"a,apple\\nb,banana\" | cut -d, -f1\n    # Hint: use the following command\
    \ to get the second column of a CSV\n    # echo \"a,apple\\nb,banana\" | cut -d,\
    \ -f2\n    # Hint: use the following command to check if a string is empty\n \
    \   # echo \"\" | grep -q '^$' && echo \"true\" || echo \"false\"\n    # Hint:\
    \ use the following command to check if a string is not empty\n    # echo \"abc\"\
    \ | grep -q '^$' && echo \"true\" || echo \"false\"\n    # Hint: use the following\
    \ command to check if a string is a number\n    # echo \"123\" | grep -q '^[0-9]*$'\
    \ && echo \"true\" || echo \"false\"\n    # Hint: use the following command to\
    \ check if a string is not a number\n    # echo \"abc\" | grep -q '^[0-9]*$' &&\
    \ echo \"true\" || echo \"false\"\n    # Hint: use the following command to check\
    \ if a string is a number\n    # echo \"123\" | grep -q '^[0-9]*$' && echo \"\
    true\" || echo \"false\"\n    # Hint: use the following command to check if a\
    \ string is not a number\n    # echo \"abc\" | grep -q '^[0-9]*$' && echo \"true\"\
    \ || echo \"false\"\n    # Hint: use the following command to check if a string\
    \ is a number\n    # echo \"123\" | grep -q '^[0-9]*$' && echo \"", "  # Write\
    \ your code here\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n \
    \ fi\n  local IFS=\",\"\n  local lower=0\n  local upper=0\n  for line in $1; do\n\
    \    local key=$(echo $line | cut -d, -f1)\n    if [[ $key =~ [A-Z] ]]; then\n\
    \      upper=$((upper+1))\n    elif [[ $key =~ [a-z] ]]; then\n      lower=$((lower+1))\n\
    \    fi\n  done\n  if [ $lower -eq 0 ] || [ $upper -eq 0 ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "    # TODO: implement this function\n\
    \    # Hint: use the following commands:\n    #   - awk\n    #   - grep\n    #\
    \   - tr\n    #   - sed\n    #   - cut\n    #   - head\n    #   - tail\n    #\
    \   - wc\n    #   - sort\n    #   - uniq\n    #   - expr\n    #   - test\n   \
    \ #   - echo\n    #   - cat\n    #   - tr\n    #   - cut\n    #   - sort\n   \
    \ #   - uniq\n    #   - wc\n    #   - expr\n    #   - test\n    #   - echo\n \
    \   #   - cat\n    #   - tr\n    #   - cut\n    #   - sort\n    #   - uniq\n \
    \   #   - wc\n    #   - expr\n    #   - test\n    #   - echo\n    #   - cat\n\
    \    #   - tr\n    #   - cut\n    #   - sort\n    #   - uniq\n    #   - wc\n \
    \   #   - expr\n    #   - test\n    #   - echo\n    #   - cat\n    #   - tr\n\
    \    #   - cut\n    #   - sort\n    #   - uniq\n    #   - wc\n    #   - expr\n\
    \    #   - test\n    #   - echo\n    #   - cat\n    #   - tr\n    #   - cut\n\
    \    #   - sort\n    #   - uniq\n    #   - wc\n    #   - expr\n    #   - test\n\
    \    #   - echo\n    #   - cat\n    #   - tr\n    #   - cut\n    #   - sort\n\
    \    #   - uniq\n    #   - wc\n    #   - expr\n    #   - test\n    #   - echo\n\
    \    #   - cat\n    #   - tr\n    #   - cut\n    #   - sort\n    #   - uniq\n\
    \    #   - wc\n    #   - expr\n    #   - test\n    #   - echo\n    #   - cat\n\
    \    #   - tr\n    #   - cut\n", "  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  # check if all keys are lower case\n  if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | tr -d '\\n'\
    \ | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:space:]' | tr -d '\\\
    n' | wc -c)\" ]; then\n    echo \"true\"\n    return\n  fi\n  # check if all keys\
    \ are upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '[:space:]' | tr -d '\\n' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1\
    \ | tr -d '[:space:]' | tr -d '\\n' | wc -c)\" ]; then\n    echo \"true\"\n  \
    \  return\n  fi\n  echo \"false\"", "    if [ -z \"$1\" ]; then\n        echo\
    \ \"false\"\n        return\n    fi\n    local csv=\"$1\"\n    local keys=$(echo\
    \ \"$csv\" | cut -d, -f1)\n    local lower_keys=$(echo \"$keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n    local upper_keys=$(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    if [ \"$keys\" == \"$lower_keys\" ] || [ \"$keys\" == \"$upper_keys\" ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  if\
    \ [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  # Get the first\
    \ key\n  first_key=$(echo \"$1\" | head -n 1 | cut -d, -f1)\n  # Get the first\
    \ key's case\n  first_key_case=$(echo \"$first_key\" | tr '[:upper:]' '[:lower:]')\n\
    \  # If the first key's case is the same as the first key,\n  # then the first\
    \ key is lower case, else it is upper case\n  if [ \"$first_key\" == \"$first_key_case\"\
    \ ]; then\n    # The first key is lower case\n    # Check if all keys are lower\
    \ case\n    echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | diff - \"\
    $1\" | grep -q \"^>\"\n    if [ $? -eq 0 ]; then\n      # Not all keys are lower\
    \ case\n      echo \"false\"\n    else\n      # All keys are lower case\n    \
    \  echo \"true\"\n    fi\n  else\n    # The first key is upper case\n    # Check\
    \ if all keys are upper case\n    echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | diff - \"$1\" | grep -q \"^>\"\n    if [ $? -eq 0 ]; then\n      # Not all\
    \ keys are upper case\n      echo \"false\"\n    else\n      # All keys are upper\
    \ case\n      echo \"true\"\n    fi\n  fi", "  # TODO: Implement this function\n\
    \  # Hint: Use the following command to check if a string is in lower case:\n\
    \  # [[ \"$string\" =~ ^[a-z]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is in upper case:\n  # [[ \"$string\" =~ ^[A-Z]+$ ]]\n  # Hint:\
    \ Use the following command to check if a string is empty:\n  # [[ -z \"$string\"\
    \ ]]\n  # Hint: Use the following command to split a string into an array:\n \
    \ # IFS=',' read -r -a array <<< \"$string\"\n  # Hint: Use the following command\
    \ to get the first element of an array:\n  # echo \"${array[0]}\"\n  # Hint: Use\
    \ the following command to get the second element of an array:\n  # echo \"${array[1]}\"\
    \n  # Hint: Use the following command to get the length of an array:\n  # echo\
    \ \"${#array[@]}\"\n  # Hint: Use the following command to get the length of a\
    \ string:\n  # echo \"${#string}\"\n  # Hint: Use the following command to get\
    \ the first character of a string:\n  # echo \"${string:0:1}\"\n  # Hint: Use\
    \ the following command to get the last character of a string:\n  # echo \"${string:\
    \ -1}\"\n  # Hint: Use the following command to get the substring of a string:\n\
    \  # echo \"${string:1:${#string}-2}\"\n  # Hint: Use the following command to\
    \ get the substring of a string:\n  # echo \"${string:1:${#string}-2}\"\n  # Hint:\
    \ Use the following command to get the substring of a string:\n  # echo \"${string:1:${#string}-2}\"\
    \n  # Hint: Use the following command to get the substring of a string:\n  # echo\
    \ \"${string:1:${#string}-2}\"\n  # Hint: Use the following command to get the\
    \ substring of a string:\n  # echo \"${string:1:${#string}-2}\"\n  # H", "   \
    \ # TODO: implement this function\n    # Hint: use awk\n    # Hint: use the built-in\
    \ function tolower() and toupper()\n    # Hint: use the built-in function length()\n\
    \    # Hint: use the built-in function match()\n    # Hint: use the built-in function\
    \ substr()\n    # Hint: use the built-in function index()\n    # Hint: use the\
    \ built-in function tolower() and toupper()\n    # Hint: use the built-in function\
    \ length()\n    # Hint: use the built-in function match()\n    # Hint: use the\
    \ built-in function substr()\n    # Hint: use the built-in function index()\n\
    \    # Hint: use the built-in function tolower() and toupper()\n    # Hint: use\
    \ the built-in function length()\n    # Hint: use the built-in function match()\n\
    \    # Hint: use the built-in function substr()\n    # Hint: use the built-in\
    \ function index()\n    # Hint: use the built-in function tolower() and toupper()\n\
    \    # Hint: use the built-in function length()\n    # Hint: use the built-in\
    \ function match()\n    # Hint: use the built-in function substr()\n    # Hint:\
    \ use the built-in function index()\n    # Hint: use the built-in function tolower()\
    \ and toupper()\n    # Hint: use the built-in function length()\n    # Hint: use\
    \ the built-in function match()\n    # Hint: use the built-in function substr()\n\
    \    # Hint: use the built-in function index()\n    # Hint: use the built-in function\
    \ tolower() and toupper()\n    # Hint: use the built-in function length()\n  \
    \  # Hint: use the built-in function match()\n    # Hint: use the built-in function\
    \ substr()\n    # Hint: use the built-in function index()\n    # Hint: use the\
    \ built-in function tolower() and toupper()\n    # Hint: use the built-in function\
    \ length()\n    # Hint: use the built-in", "    # TODO: implement this function\n\
    \    # Hint: use awk\n    # Hint: use the following command to check if a string\
    \ is all lower case:\n    # echo \"hello\" | awk '{print tolower($0) == $0}'\n\
    \    # Hint: use the following command to check if a string is all upper case:\n\
    \    # echo \"HELLO\" | awk '{print toupper($0) == $0}'\n    # Hint: use the following\
    \ command to check if a string is empty:\n    # echo \"\" | awk '{print length($0)\
    \ == 0}'\n    # Hint: use the following command to check if a string is a number:\n\
    \    # echo \"123\" | awk '{print $0 + 0 == $0}'\n    # Hint: use the following\
    \ command to check if a string is a letter:\n    # echo \"a\" | awk '{print $0\
    \ ~ /[a-zA-Z]/}'\n    # Hint: use the following command to check if a string is\
    \ a letter or a number:\n    # echo \"a\" | awk '{print $0 ~ /[a-zA-Z0-9]/}'\n\
    \    # Hint: use the following command to check if a string is a letter or a number\
    \ or an underscore:\n    # echo \"a\" | awk '{print $0 ~ /[a-zA-Z0-9_]/}'\n  \
    \  # Hint: use the following command to check if a string is a letter or a number\
    \ or an underscore or a dash:\n    # echo \"a\" | awk '{print $0 ~ /[a-zA-Z0-9_-]/}'\n\
    \    # Hint: use the following command to check if a string is a letter or a number\
    \ or an underscore or a dash or a dot:\n    # echo \"a\" | awk '{print $0 ~ /[a-zA-Z0-9_-.]/}'\n\
    \    # Hint: use the following command to check if a string is a letter or a number\
    \ or an underscore or a dash or a dot or a colon:\n    # echo \"a\" | awk '{print\
    \ $", "    # TODO: Implement this function\n    # Hint: Use awk to split the CSV\
    \ into two columns\n    # Hint: Use awk to check if all keys are in upper case\n\
    \    # Hint: Use awk to check if all keys are in lower case\n    # Hint: Use awk\
    \ to check if the CSV is empty\n    # Hint: Use awk to return true or false\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint: Use awk to print the result\n    # Hint: Use awk to print the result\n\
    \    # Hint", "    # TODO: implement this function\n    # Hint: use awk to split\
    \ the CSV into two columns\n    # Hint: use awk to check if the first column is\
    \ all upper case\n    # Hint: use awk to check if the first column is all lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use awk to check if the first column is all upper or lower\
    \ case\n    # Hint: use aw", "    # check if the CSV is empty\n    if [ -z \"\
    $1\" ]; then\n        echo \"false\"\n        return\n    fi\n\n    # check if\
    \ all keys are lower case\n    if [ \"$(echo \"$1\" | cut -d',' -f1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr -d '\\n')\" = \"$(echo \"$1\"\
    \ | cut -d',' -f1 | tr -d '\\n')\" ]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # check if all keys are upper case\n    if [ \"$(echo \"$1\" |\
    \ cut -d',' -f1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr\
    \ -d '\\n')\" = \"$(echo \"$1\" | cut -d',' -f1 | tr -d '\\n')\" ]; then\n   \
    \     echo \"true\"\n        return\n    fi\n\n    # if none of the above, return\
    \ false\n    echo \"false\"", "    # TODO: implement this function\n    # Hint:\
    \ use the function is_upper_case and is_lower_case\n    # Hint: use the function\
    \ is_empty_csv\n    # Hint: use the function get_csv_column\n    # Hint: use the\
    \ function get_csv_column_count\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row_count\n    # Hint: use the function\
    \ get_csv_row_count\n    # Hint: use the function get_csv_row_count\n    # Hint:\
    \ use the function get_csv_row_count\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row_count\n    # Hint: use the function\
    \ get_csv_row_count\n    # Hint: use the function get_csv_row_count\n    # Hint:\
    \ use the function get_csv_row_count\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row_count\n    # Hint: use the function\
    \ get_csv_row_count\n    # Hint: use the function get_csv_row_count\n    # Hint:\
    \ use the function get_csv_row_count\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row_count\n    # Hint: use the function\
    \ get_csv_row_count\n    # Hint: use the function get_csv_row_count\n    # Hint:\
    \ use the function get_csv_row_count\n    # Hint: use the function get_csv_row_count\n\
    \    # Hint: use the function get_csv_row_count\n    # Hint: use the function\
    \ get_csv_row_count\n    # Hint: use the function get_csv_row_count\n    # Hint:\
    \ use the function get_csv_row_count\n    # Hint: use the function", "  # TODO:\
    \ Implement this function\n  # Hint: Use the following command to get the first\
    \ column of a CSV:\n  # cut -d, -f1\n  # Hint: Use the following command to get\
    \ the second column of a CSV:\n  # cut -d, -f2\n  # Hint: Use the following command\
    \ to check if a string is all lower case:\n  # [[ \"$string\" =~ ^[a-z]+$ ]]\n\
    \  # Hint: Use the following command to check if a string is all upper case:\n\
    \  # [[ \"$string\" =~ ^[A-Z]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is empty:\n  # [[ -z \"$string\" ]]\n  # Hint: Use the following\
    \ command to check if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n\
    \  # Hint: Use the following command to check if a string is a number:\n  # [[\
    \ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check if\
    \ a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the\
    \ following command to check if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$\
    \ ]]\n  # Hint: Use the following command to check if a string is a number:\n\
    \  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the\
    \ following command to check if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$\
    \ ]]\n  # Hint: Use the following command to check if a string is a number:\n\
    \  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is a number:\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\n  # Hint: Use",
  "    if [ $# -ne 1 ]; then\n        echo \"Usage: $0 <csv>\"\n        exit 1\n \
    \   fi\n    csv=$1\n    if [ -z \"$csv\" ]; then\n        echo \"false\"\n   \
    \     exit 0\n    fi\n    # Check if all keys are lower case\n    if [[ $csv =~\
    \ ^[a-z]+,[^,]+$ ]]; then\n        echo \"true\"\n        exit 0\n    fi\n   \
    \ # Check if all keys are upper case\n    if [[ $csv =~ ^[A-Z]+,[^,]+$ ]]; then\n\
    \        echo \"true\"\n        exit 0\n    fi\n    echo \"false\"", "    # TODO:\
    \ Implement this function\n    # Hint: Use the following command to get the first\
    \ column of a CSV:\n    # echo \"a,apple\\nb,banana\" | cut -d, -f1\n    # Hint:\
    \ Use the following command to get the second column of a CSV:\n    # echo \"\
    a,apple\\nb,banana\" | cut -d, -f2\n    # Hint: Use the following command to check\
    \ if a string is all lower case:\n    # echo \"apple\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all upper case:\n    # echo \"APPLE\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all numeric:\n    # echo \"12345\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all alphabetic:\n    # echo \"abcde\" | grep -q '[^[:alpha:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all alphanumeric:\n    # echo \"abcde12345\" | grep -q\
    \ '[^[:alnum:]]' && echo \"false\" || echo \"true\"\n    # Hint: Use the following\
    \ command to check if a string is all alphanumeric:\n    # echo \"abcde12345\"\
    \ | grep -q '[^[:alnum:]]' && echo \"false\" || echo \"true\"\n    # Hint: Use\
    \ the following command to check if a string is all alphanumeric:\n    # echo\
    \ \"abcde12345\" | grep -q '[^[:alnum:]]' && echo \"false\" || echo \"true\"\n\
    \    # Hint: Use the following command to check if a string is all alphanumeric:\n\
    \    # echo \"abcde12345\" | grep -q '[^[:alnum:]]' && echo \"false\" || echo\
    \ \"true\"\n    # Hint:", "    # TODO: implement this function\n    # Hint: use\
    \ the following command to check if a string is in lower case:\n    # [[ \"$string\"\
    \ =~ ^[a-z]+$ ]]\n    # Hint: use the following command to check if a string is\
    \ in upper case:\n    # [[ \"$string\" =~ ^[A-Z]+$ ]]\n    # Hint: use the following\
    \ command to get the first column of a CSV:\n    # cut -d',' -f1\n    # Hint:\
    \ use the following command to get the second column of a CSV:\n    # cut -d','\
    \ -f2\n    # Hint: use the following command to check if a string is empty:\n\
    \    # [[ -z \"$string\" ]]\n    # Hint: use the following command to check if\
    \ a string is not empty:\n    # [[ -n \"$string\" ]]\n    # Hint: use the following\
    \ command to check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$\
    \ ]]\n    # Hint: use the following command to check if a string is not a number:\n\
    \    # [[ ! \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following command\
    \ to check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n   \
    \ # Hint: use the following command to check if a string is not a number:\n  \
    \  # [[ ! \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following command to\
    \ check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint:\
    \ use the following command to check if a string is not a number:\n    # [[ !\
    \ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following command to check if\
    \ a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use\
    \ the following command to check if a string is not a number:\n    # [[ ! \"$string\"\
    \ =~ ^[0-9]+$ ]]\n    # Hint:", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  # Check if all keys are lower case\n  if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr\
    \ -d '\\n')\" == \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n    echo\
    \ \"true\"\n    return\n  fi\n  # Check if all keys are upper case\n  if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr -d '\\n')\" == \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  echo \"false\"", "    # TODO: implement\
    \ this function\n    # Hint: use the following command to convert a string to\
    \ lower case\n    # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # Hint: use\
    \ the following command to convert a string to upper case\n    # echo \"hello\"\
    \ | tr '[:lower:]' '[:upper:]'\n    # Hint: use the following command to check\
    \ if a string is all upper case\n    # echo \"HELLO\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: use the following command to\
    \ check if a string is all lower case\n    # echo \"hello\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: use the following command to\
    \ check if a string is all digits\n    # echo \"12345\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: use the following command to\
    \ check if a string is empty\n    # echo -n \"\" | grep -q '^$' && echo \"true\"\
    \ || echo \"false\"\n    # Hint: use the following command to check if a string\
    \ is not empty\n    # echo -n \"hello\" | grep -q '^$' && echo \"false\" || echo\
    \ \"true\"\n    # Hint: use the following command to check if a string is all\
    \ digits\n    # echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n    # Hint: use the following command to check if a string is all\
    \ digits\n    # echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n    # Hint: use the following command to check if a string is all\
    \ digits\n    # echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n    # Hint: use the following command to check if a string is all\
    \ digits\n    # echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n    # H", "    # TODO: implement this function\n    # Hint: use the\
    \ following commands to check if a string is upper case or lower case\n    # [[\
    \ \"$string\" =~ [A-Z]+ ]]\n    # [[ \"$string\" =~ [a-z]+ ]]\n    #\n    # Hint:\
    \ use the following command to split the CSV into lines\n    # IFS=$'\\n' read\
    \ -d '' -r -a lines <<< \"$csv\"\n    #\n    # Hint: use the following command\
    \ to split a line into key and value\n    # IFS=',' read -r -a line_array <<<\
    \ \"$line\"\n    #\n    # Hint: use the following command to check if an array\
    \ is empty\n    # [[ ${#array[@]} -eq 0 ]]\n    #\n    # Hint: use the following\
    \ command to check if a string is empty\n    # [[ -z \"$string\" ]]\n    #\n \
    \   # Hint: use the following command to check if a string is a number\n    #\
    \ [[ \"$string\" =~ ^[0-9]+$ ]]\n    #\n    # Hint: use the following command\
    \ to check if a string is a letter\n    # [[ \"$string\" =~ ^[a-zA-Z]+$ ]]\n \
    \   #\n    # Hint: use the following command to check if a string is a letter\
    \ or number\n    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n    #\n    # Hint: use\
    \ the following command to check if a string is a letter or number or underscore\n\
    \    # [[ \"$string\" =~ ^[a-zA-Z0-9_]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a string is a letter or number or underscore or dash\n \
    \   # [[ \"$string\" =~ ^[a-zA-Z0-9_-]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a string is a letter or number or underscore or dash or\
    \ space\n    # [[ \"$string\" =~ ^[a-zA-Z0-9_- ]+$ ]]\n    #\n    # Hint: use\
    \ the following command to check", "    # TODO: Implement this function\n    #\
    \ Hint: Use awk\n    # Hint: Use the following command to convert a string to\
    \ lower case:\n    # echo \"STRING\" | tr '[:upper:]' '[:lower:]'\n    # Hint:\
    \ Use the following command to convert a string to upper case:\n    # echo \"\
    STRING\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the following command to\
    \ check if a string is all lower case:\n    # echo \"STRING\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all upper case:\n    # echo \"STRING\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all digits:\n    # echo \"STRING\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all alphabetic:\n    # echo \"STRING\" | grep -q '[^[:alpha:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all alphanumeric:\n    # echo \"STRING\" | grep -q '[^[:alnum:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all alphanumeric or underscore:\n    # echo \"STRING\"\
    \ | grep -q '[^[:alnum:]_]' && echo \"false\" || echo \"true\"\n    # Hint: Use\
    \ the following command to check if a string is all alphanumeric or underscore\
    \ or dash:\n    # echo \"STRING\" | grep -q '[^[:alnum:]_-]' && echo \"false\"\
    \ || echo \"true\"\n    # Hint: Use the following command to check if a string\
    \ is all alphanumeric or underscore or dash or dot:\n    # echo \"STRING\" | grep\
    \ -q '[^[:alnum:]_-.]' && echo \"false\" || echo", "    if [ -z \"$1\" ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    # Check if all keys are lower\
    \ case\n    if echo \"$1\" | grep -q \"^[a-z]\"; then\n        if echo \"$1\"\
    \ | grep -q \"^[A-Z]\"; then\n            echo \"false\"\n            return\n\
    \        fi\n        echo \"true\"\n        return\n    fi\n    # Check if all\
    \ keys are upper case\n    if echo \"$1\" | grep -q \"^[A-Z]\"; then\n       \
    \ if echo \"$1\" | grep -q \"^[a-z]\"; then\n            echo \"false\"\n    \
    \        return\n        fi\n        echo \"true\"\n        return\n    fi\n \
    \   echo \"false\"", "    # TODO: implement this function\n    # Hint: use the\
    \ following commands to check if a string is upper case or lower case:\n    #\
    \ [[ $str =~ ^[A-Z]+$ ]] && echo \"upper\" || echo \"lower\"\n    # [[ $str =~\
    \ ^[a-z]+$ ]] && echo \"lower\" || echo \"upper\"\n    #\n    # Hint: use the\
    \ following command to get the first column of a CSV:\n    # cut -d, -f1\n   \
    \ #\n    # Hint: use the following command to get the second column of a CSV:\n\
    \    # cut -d, -f2\n    #\n    # Hint: use the following command to get the number\
    \ of rows of a CSV:\n    # wc -l\n    #\n    # Hint: use the following command\
    \ to get the number of columns of a CSV:\n    # head -n 1 | tr ',' '\\n' | wc\
    \ -l\n    #\n    # Hint: use the following command to check if a string is empty:\n\
    \    # [[ -z $str ]] && echo \"empty\" || echo \"not empty\"\n    #\n    # Hint:\
    \ use the following command to check if a string is a number:\n    # [[ $str =~\
    \ ^[0-9]+$ ]] && echo \"number\" || echo \"not number\"\n    #\n    # Hint: use\
    \ the following command to check if a string is a number:\n    # [[ $str =~ ^[0-9]+$\
    \ ]] && echo \"number\" || echo \"not number\"\n    #\n    # Hint: use the following\
    \ command to check if a string is a number:\n    # [[ $str =~ ^[0-9]+$ ]] && echo\
    \ \"number\" || echo \"not number\"\n    #\n    # Hint: use the following command\
    \ to check if a string is a number:\n    # [[ $str =~ ^[0-9]+$ ]] && echo \"number\"\
    \ || echo \"not number\"\n    #\n    # Hint: use the following command to check\
    \ if a string is a number:\n    # [[ $str =~ ^[0-9]+$ ]] && echo \"number\" ||\
    \ echo \"not", "  # TODO: implement this function\n  # HINT: use the following\
    \ commands to get the first column\n  # and the second column of the CSV.\n  #\
    \ first_col=$(echo \"$1\" | cut -d ',' -f 1)\n  # second_col=$(echo \"$1\" | cut\
    \ -d ',' -f 2)\n  # HINT: use the following command to check if a string is in\n\
    \  # lower case.\n  # echo \"$string\" | grep -q '[^[:lower:]]' && echo \"false\"\
    \ || echo \"true\"\n  # HINT: use the following command to check if a string is\
    \ in\n  # upper case.\n  # echo \"$string\" | grep -q '[^[:upper:]]' && echo \"\
    false\" || echo \"true\"\n  # HINT: use the following command to check if a string\
    \ is empty.\n  # [[ -z \"$string\" ]] && echo \"true\" || echo \"false\"\n  #\
    \ HINT: use the following command to check if a string is not empty.\n  # [[ -n\
    \ \"$string\" ]] && echo \"true\" || echo \"false\"\n  # HINT: use the following\
    \ command to check if a string is a number.\n  # [[ \"$string\" =~ ^[0-9]+$ ]]\
    \ && echo \"true\" || echo \"false\"\n  # HINT: use the following command to check\
    \ if a string is a letter.\n  # [[ \"$string\" =~ ^[a-zA-Z]+$ ]] && echo \"true\"\
    \ || echo \"false\"\n  # HINT: use the following command to check if a string\
    \ is a letter\n  # or a number.\n  # [[ \"$string\" =~ ^[a-zA-Z0-9]+$ ]] && echo\
    \ \"true\" || echo \"false\"\n  # HINT: use the following command to check if\
    \ a string is a letter\n  # or a number or a space.\n  # [[ \"$string\" =~ ^[a-zA-Z0-9\
    \ ]+$ ]] && echo \"true\" || echo \"false\"\n  # HINT: use the following command\
    \ to check if a string is a letter\n  # or a number or a space or a comma.", " \
    \ # Check if the CSV is empty\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n\
    \    return\n  fi\n\n  # Check if all keys are strings in lower case\n  echo \"\
    $1\" | awk -F, '{print $1}' | grep -q '[A-Z]'\n  if [ $? -eq 0 ]; then\n    #\
    \ Check if all keys are strings in upper case\n    echo \"$1\" | awk -F, '{print\
    \ $1}' | grep -q '[a-z]'\n    if [ $? -eq 0 ]; then\n      echo \"false\"\n  \
    \    return\n    fi\n  fi\n\n  echo \"true\"", "  # Check if the CSV is empty\n\
    \  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\n  # Check if\
    \ all keys are in lower case\n  if [[ \"$1\" =~ ^[a-z][a-z]*,[a-zA-Z0-9]*$ ]];\
    \ then\n    echo \"true\"\n    return\n  fi\n\n  # Check if all keys are in upper\
    \ case\n  if [[ \"$1\" =~ ^[A-Z][A-Z]*,[a-zA-Z0-9]*$ ]]; then\n    echo \"true\"\
    \n    return\n  fi\n\n  # If none of the above, return false\n  echo \"false\"",
  "    # TODO: Implement this function.\n    # Hint: Use the tr command to convert\
    \ a string to lower or upper case.\n    # Hint: Use the grep command to test if\
    \ a string is in lower or upper case.\n    # Hint: Use the cut command to extract\
    \ the first column of the CSV.\n    # Hint: Use the wc command to count the number\
    \ of lines in the CSV.\n    # Hint: Use the echo command to return a string.\n\
    \    # Hint: Use the test command to check if a string is empty.\n    # Hint:\
    \ Use the exit command to return an exit status.\n    # Hint: Use the set command\
    \ to set a variable.\n    # Hint: Use the read command to read a variable.\n \
    \   # Hint: Use the if command to check if a condition is true.\n    # Hint: Use\
    \ the && and || operators to combine conditions.\n    # Hint: Use the return command\
    \ to return a value.\n    # Hint: Use the $() operator to capture the output of\
    \ a command.\n    # Hint: Use the $1 variable to access the first argument to\
    \ the function.\n    # Hint: Use the $? variable to access the exit status of\
    \ the last command.\n    # Hint: Use the $LINENO variable to access the current\
    \ line number.\n    # Hint: Use the $FUNCNAME variable to access the current function\
    \ name.\n    # Hint: Use the $0 variable to access the name of the script.\n \
    \   # Hint: Use the $# variable to access the number of arguments to the script.\n\
    \    # Hint: Use the $@ variable to access the arguments to the script.\n    #\
    \ Hint: Use the $* variable to access the arguments to the script.\n    # Hint:\
    \ Use the $n variable to access the nth argument to the script.\n    # Hint: Use\
    \ the $IFS variable to access the field separator.\n    # Hint: Use the $PS1 variable\
    \ to access the primary prompt string.\n    # Hint: Use the $PS2 variable to access\
    \ the secondary prompt string.\n    # Hint: Use the $RANDOM variable to access\
    \ a random number.\n    # Hint: Use the $SECONDS variable to access the number",
  "    # TODO: implement this function\n    # Hint: use the following functions:\n\
    \    # - is_upper_case\n    # - is_lower_case\n    # - is_all_upper_case\n   \
    \ # - is_all_lower_case\n    # - is_empty\n    # - get_column\n    # - get_num_columns\n\
    \    # - get_num_rows\n    # - get_row\n    # - get_rows\n    # - get_columns\n\
    \    # - get_column_names\n    # - get_column_values\n    # - get_column_value\n\
    \    # - get_column_values_by_name\n    # - get_column_value_by_name\n    # -\
    \ get_column_index_by_name\n    # - get_column_name_by_index\n    # - get_column_values_by_index\n\
    \    # - get_column_value_by_index\n    # - get_column_values_by_indexes\n   \
    \ # - get_column_value_by_indexes\n    # - get_column_values_by_names\n    # -\
    \ get_column_value_by_names\n    # - get_column_indexes_by_names\n    # - get_column_index_by_name\n\
    \    # - get_column_names_by_indexes\n    # - get_column_name_by_index\n    #\
    \ - get_column_values_by_indexes\n    # - get_column_value_by_indexes\n    # -\
    \ get_column_values_by_names\n    # - get_column_value_by_names\n    # - get_column_indexes_by_names\n\
    \    # - get_column_index_by_name\n    # - get_column_names_by_indexes\n    #\
    \ - get_column_name_by_index\n    # - get_column_values_by_indexes\n    # - get_column_value_by_indexes\n\
    \    # - get_column_values_by_names\n    # - get_column_value_by_names\n    #\
    \ - get_column_indexes_by_names\n    # - get_column_", "    # TODO: Implement\
    \ this function\n    # Hint: You can use the following bash functions:\n    #\
    \   - tr\n    #   - grep\n    #   - wc\n    #   - awk\n    #   - sed\n    #  \
    \ - head\n    #   - tail\n    #   - cut\n    #   - sort\n    #   - uniq\n    #\
    \   - expr\n    #   - echo\n    #   - cat\n    #   - read\n    #   - [\n    #\
    \   - test\n    #   - [ -z STRING ]\n    #   - [ -n STRING ]\n    #   - [ STRING1\
    \ = STRING2 ]\n    #   - [ STRING1 != STRING2 ]\n    #   - [ STRING1 < STRING2\
    \ ]\n    #   - [ STRING1 > STRING2 ]\n    #   - [ STRING1 -le STRING2 ]\n    #\
    \   - [ STRING1 -ge STRING2 ]\n    #   - [ STRING1 -lt STRING2 ]\n    #   - [\
    \ STRING1 -gt STRING2 ]\n    #   - [ -e FILE ]\n    #   - [ -d FILE ]\n    # \
    \  - [ -f FILE ]\n    #   - [ -x FILE ]\n    #   - [ -s FILE ]\n    #   - [ -r\
    \ FILE ]\n    #   - [ -w FILE ]\n    #   - [ -L FILE ]\n    #   - [ -p FILE ]\n\
    \    #   - [ -S FILE ]\n    #   - [ -b FILE ]\n    #   - [ -c FILE ]\n    #  \
    \ - [ -g FILE ]\n    #   - [ -u FILE ]\n    #   - [ -k FILE ]\n    #   - [ -t\
    \ FD ]\n    #   - [ -o OPTIONNAME ]\n    #   - [ -z STRING ]\n    #   - [ -n STRING\
    \ ]\n    #   - [ STRING1 = STRING2 ]\n    #   - [ STRING1 != STRING2 ]\n    #\
    \   - [ STRING1 < STRING2 ]\n    #   - [ STRING1 > STRING2 ]\n   ", "    # Check\
    \ if the CSV is empty\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n  \
    \      return\n    fi\n\n    # Check if all keys are strings in lower case\n \
    \   if [[ $1 =~ ^[a-z]+,[a-zA-Z0-9]+$ ]]; then\n        echo \"true\"\n      \
    \  return\n    fi\n\n    # Check if all keys are strings in upper case\n    if\
    \ [[ $1 =~ ^[A-Z]+,[a-zA-Z0-9]+$ ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # If none of the above conditions are met, return false\n    echo\
    \ \"false\"", "    # Check if the CSV is empty\n    if [ -z \"$1\" ]; then\n \
    \       echo \"false\"\n        return\n    fi\n\n    # Check if the first key\
    \ is lower case\n    if [[ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$(echo \"$1\" | cut -d, -f1)\" ]]; then\n        # Check if all keys are\
    \ lower case\n        if [[ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$(echo \"$1\" | cut -d, -f1)\" ]]; then\n            echo \"true\"\n  \
    \          return\n        fi\n    else\n        # Check if all keys are upper\
    \ case\n        if [[ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\"\
    \ == \"$(echo \"$1\" | cut -d, -f1)\" ]]; then\n            echo \"true\"\n  \
    \          return\n        fi\n    fi\n\n    echo \"false\"", "    # Check if\
    \ the CSV is empty\n    if [[ -z \"$1\" ]]; then\n        echo \"false\"\n   \
    \     return\n    fi\n\n    # Check if all keys are in lower case\n    if [[ \"\
    $1\" =~ ^[a-z]*,[a-zA-Z0-9]*$ ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # Check if all keys are in upper case\n    if [[ \"$1\" =~ ^[A-Z]*,[a-zA-Z0-9]*$\
    \ ]]; then\n        echo \"true\"\n        return\n    fi\n\n    # If all keys\
    \ are not in lower case or upper case, return false\n    echo \"false\"", "  \
    \  # TODO: implement this function\n    # HINT: use the tr command to convert\
    \ upper case to lower case\n    # and vice versa\n    # HINT: use the cut command\
    \ to extract the first column\n    # HINT: use the grep command to check if all\
    \ keys are upper case\n    # or all keys are lower case\n    # HINT: use the wc\
    \ command to count the number of lines\n    # HINT: use the test command to check\
    \ if the number of lines\n    # is greater than 0\n    # HINT: use the test command\
    \ to check if the number of lines\n    # is equal to the number of lines containing\
    \ upper case keys\n    # or the number of lines containing lower case keys\n \
    \   # HINT: use the test command to check if the number of lines\n    # is equal\
    \ to the number of lines containing lower case keys\n    # or the number of lines\
    \ containing upper case keys\n    # HINT: use the test command to check if the\
    \ number of lines\n    # is equal to the number of lines containing lower case\
    \ keys\n    # and the number of lines containing upper case keys\n    # HINT:\
    \ use the test command to check if the number of lines\n    # is equal to the\
    \ number of lines containing upper case keys\n    # and the number of lines containing\
    \ lower case keys\n    # HINT: use the test command to check if the number of\
    \ lines\n    # is equal to the number of lines containing lower case keys\n  \
    \  # or the number of lines containing upper case keys\n    # HINT: use the test\
    \ command to check if the number of lines\n    # is equal to the number of lines\
    \ containing upper case keys\n    # or the number of lines containing lower case\
    \ keys\n    # HINT: use the test command to check if the number of lines\n   \
    \ # is equal to the number of lines containing lower case keys\n    # and the\
    \ number of lines containing upper case keys\n    # HINT: use the test command\
    \ to check if the number of lines\n    # is equal to the number of lines containing\
    \ upper case keys\n    # and the number of lines containing lower case keys\n\
    \    # HINT: use the test command to check if the number of lines\n    # is equal\
    \ to the number of lines containing lower case keys\n    # or the number of lines\
    \ containing upper case keys\n    # HINT: use the test command", "    # TODO:\
    \ Implement this function\n    # Hint: Use awk to split the CSV into two columns\n\
    \    # Hint: Use awk to check if the first column is all upper case\n    # Hint:\
    \ Use awk to check if the first column is all lower case\n    # Hint: Use awk\
    \ to check if the first column is all upper case\n    # Hint: Use awk to check\
    \ if the first column is all lower case\n    # Hint: Use awk to check if the first\
    \ column is all upper case\n    # Hint: Use awk to check if the first column is\
    \ all lower case\n    # Hint: Use awk to check if the first column is all upper\
    \ case\n    # Hint: Use awk to check if the first column is all lower case\n \
    \   # Hint: Use awk to check if the first column is all upper case\n    # Hint:\
    \ Use awk to check if the first column is all lower case\n    # Hint: Use awk\
    \ to check if the first column is all upper case\n    # Hint: Use awk to check\
    \ if the first column is all lower case\n    # Hint: Use awk to check if the first\
    \ column is all upper case\n    # Hint: Use awk to check if the first column is\
    \ all lower case\n    # Hint: Use awk to check if the first column is all upper\
    \ case\n    # Hint: Use awk to check if the first column is all lower case\n \
    \   # Hint: Use awk to check if the first column is all upper case\n    # Hint:\
    \ Use awk to check if the first column is all lower case\n    # Hint: Use awk\
    \ to check if the first column is all upper case\n    # Hint: Use awk to check\
    \ if the first column is all lower case\n    # Hint: Use awk to check if the first\
    \ column is all upper case\n    # Hint: Use awk to check if the first column is\
    \ all lower case\n    # Hint: Use awk to check if the first column is all upper\
    \ case\n    # Hint: Use awk to check if the first column is all lower case\n \
    \   # Hint: Use awk to check if the first column is all upper case\n    # Hint:\
    \ Use awk to check if", "    # TODO: Implement this function\n    # Hint: You\
    \ can use the following bash built-in functions:\n    #   - awk\n    #   - tr\n\
    \    #   - grep\n    #   - cut\n    #   - sort\n    #   - uniq\n    #   - wc\n\
    \    #   - head\n    #   - tail\n    #   - echo\n    #   - expr\n    #   - test\n\
    \    #   - [\n    #   - [[\n    #   - ]]\n    #   - ]\n    #   - return\n    #\
    \   - true\n    #   - false\n    #   - exit\n    #   - declare\n    #   - local\n\
    \    #   - readonly\n    #   - read\n    #   - IFS\n    #   - set\n    #   - set\
    \ -f\n    #   - set +f\n    #   - set -e\n    #   - set +e\n    #   - set -u\n\
    \    #   - set +u\n    #   - set -o pipefail\n    #   - set +o pipefail\n    #\
    \   - set -o errexit\n    #   - set +o errexit\n    #   - set -o nounset\n   \
    \ #   - set +o nounset\n    #   - set -o noclobber\n    #   - set +o noclobber\n\
    \    #   - set -o xtrace\n    #   - set +o xtrace\n    #   - set -o posix\n  \
    \  #   - set +o posix\n    #   - set -o functrace\n    #   - set +o functrace\n\
    \    #   - set -o monitor\n    #   - set +o monitor\n    #   - set -o history\n\
    \    #   - set +o history\n    #   - set -o verbose\n    #   - set +o verbose\n\
    \    #   - set -o notify\n    #   - set +o notify\n    #   - set -o nolog\n  \
    \  #   - set +o nolog\n    #   - set -o physical\n    #   - set +o physical\n\
    \    #   - set -o interactive-comments\n    #", "    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n", "  # TODO: Implement this function\n  # Hint: Use the\
    \ following command to convert a string to lower case:\n  # echo \"STRING\" |\
    \ tr '[:upper:]' '[:lower:]'\n  # Hint: Use the following command to convert a\
    \ string to upper case:\n  # echo \"STRING\" | tr '[:lower:]' '[:upper:]'\n  #\
    \ Hint: Use the following command to check if a string is all lower case:\n  #\
    \ echo \"STRING\" | grep -q '[^[:lower:]]' && echo \"false\" || echo \"true\"\n\
    \  # Hint: Use the following command to check if a string is all upper case:\n\
    \  # echo \"STRING\" | grep -q '[^[:upper:]]' && echo \"false\" || echo \"true\"\
    \n  # Hint: Use the following command to check if a string is empty:\n  # echo\
    \ \"STRING\" | grep -q '^$' && echo \"true\" || echo \"false\"\n  # Hint: Use\
    \ the following command to check if a file is empty:\n  # if [ ! -s \"FILE\" ];\
    \ then echo \"true\"; else echo \"false\"; fi\n  # Hint: Use the following command\
    \ to get the first column of a CSV:\n  # cut -d, -f1\n  # Hint: Use the following\
    \ command to get the second column of a CSV:\n  # cut -d, -f2\n  # Hint: Use the\
    \ following command to get the number of columns in a CSV:\n  # awk -F, '{print\
    \ NF}'\n  # Hint: Use the following command to get the number of rows in a CSV:\n\
    \  # awk -F, 'END {print NR}'\n  # Hint: Use the following command to get the\
    \ number of rows in a file:\n  # wc -l\n  # Hint: Use the following command to\
    \ get the number of columns in a file:\n  # awk '{print NF}'\n  # Hint: Use the\
    \ following command to get the number of columns in a file:\n  # awk '{print NF}'\n\
    \  # Hint: Use the following command to get the number of columns in a file:\n\
    \  # awk '", "    if [[ -z \"$1\" ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    local lower_count=0\n    local upper_count=0\n    local key\n   \
    \ while IFS=, read -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \            ((lower_count++))\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \            ((upper_count++))\n        else\n            echo \"false\"\n   \
    \         return\n        fi\n    done <<< \"$1\"\n    if [[ \"$lower_count\"\
    \ -eq 0 || \"$upper_count\" -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    # TODO: Implement this function\n    #\
    \ Hint: Use awk\n    # Hint: Use the following command to convert a string to\
    \ lower case:\n    # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # Hint:\
    \ Use the following command to convert a string to upper case:\n    # echo \"\
    hello\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the following command to\
    \ check if a string is all lower case:\n    # echo \"hello\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all upper case:\n    # echo \"HELLO\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all digits:\n    # echo \"123\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all letters:\n    # echo \"abc\" | grep -q '[^[:alpha:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is all letters or digits:\n    # echo \"abc123\" | grep -q\
    \ '[^[:alnum:]]' && echo \"false\" || echo \"true\"\n    # Hint: Use the following\
    \ command to check if a string is all letters, digits, or underscores:\n    #\
    \ echo \"abc_123\" | grep -q '[^[:alnum:]_]' && echo \"false\" || echo \"true\"\
    \n    # Hint: Use the following command to check if a string is all letters, digits,\
    \ underscores, or dashes:\n    # echo \"abc-123\" | grep -q '[^[:alnum:]_-]' &&\
    \ echo \"false\" || echo \"true\"\n    # Hint: Use the following command to check\
    \ if a string is all letters, digits, underscores, dashes, or periods:\n    #\
    \ echo \"abc.123\" | grep -q '[^[:alnum:]_.-]' && echo \"", "    # TODO: implement\
    \ this function\n    # Hint: use the following commands to get the first column\n\
    \    # and the second column of a CSV:\n    #\n    # first_column=$(echo \"$1\"\
    \ | cut -d, -f1)\n    # second_column=$(echo \"$1\" | cut -d, -f2)\n    #\n  \
    \  # You can use the following command to check if a string is\n    # all upper\
    \ case:\n    #\n    # echo \"$string\" | grep -q '[^[:upper:]]'\n    #\n    #\
    \ The above command will return 0 if the string is all upper\n    # case, else\
    \ it will return 1.\n    #\n    # You can use the following command to check if\
    \ a string is\n    # all lower case:\n    #\n    # echo \"$string\" | grep -q\
    \ '[^[:lower:]]'\n    #\n    # The above command will return 0 if the string is\
    \ all lower\n    # case, else it will return 1.\n    #\n    # You can use the\
    \ following command to check if a string is\n    # all digits:\n    #\n    # echo\
    \ \"$string\" | grep -q '[^[:digit:]]'\n    #\n    # The above command will return\
    \ 0 if the string is all digits,\n    # else it will return 1.\n    #\n    # You\
    \ can use the following command to check if a string is\n    # empty:\n    #\n\
    \    # echo \"$string\" | grep -q '^$'\n    #\n    # The above command will return\
    \ 0 if the string is empty,\n    # else it will return 1.\n    #\n    # You can\
    \ use the following command to check if a string is\n    # not empty:\n    #\n\
    \    # echo \"$string\" | grep -q '^.$'\n    #\n    # The above command will return\
    \ 0 if the string is not empty,\n    # else it will return 1.\n    #\n    # You\
    \ can use the following command to check if a string is\n    # empty or all digits:\n\
    \    #\n    # echo \"$string\" | grep -q '^$\\|^[0-9]*$'\n    #\n    # The above\
    \ command will return 0 if the", "    # TODO: implement this function\n    # Hint:\
    \ use the following commands to check if a string is in lower case\n    # $ echo\
    \ \"abc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\n    #\
    \ $ echo \"ABC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\n\
    \    # $ echo \"123\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"aBc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"AbC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"abC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"aBC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"Abc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"aBc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"abC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"ABC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"Abc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"aBC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"abC\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"aBc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo \"Abc\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\
    \n    # $ echo", "    # TODO: implement this function\n    # Hint: use the following\
    \ commands to check if a string is in lower case\n    # or upper case:\n    #\
    \ $ echo \"hello\" | tr '[:upper:]' '[:lower:]'\n    # hello\n    # $ echo \"\
    HELLO\" | tr '[:upper:]' '[:lower:]'\n    # hello\n    # $ echo \"HELLO\" | tr\
    \ '[:lower:]' '[:upper:]'\n    # HELLO\n    # $ echo \"hello\" | tr '[:lower:]'\
    \ '[:upper:]'\n    # HELLO\n    # $ echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    # HELLO\n    # $ echo \"hello\" | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'\n    # hello\n    #\n    # Hint: use\
    \ the following command to check if a string is empty:\n    # $ [[ -z \"$string\"\
    \ ]] && echo \"empty\" || echo \"not empty\"\n    #\n    # Hint: use the following\
    \ command to check if a string is a number:\n    # $ [[ \"$string\" =~ ^[0-9]+$\
    \ ]] && echo \"number\" || echo \"not number\"\n    #\n    # Hint: use the following\
    \ command to check if a string is a letter:\n    # $ [[ \"$string\" =~ ^[a-zA-Z]+$\
    \ ]] && echo \"letter\" || echo \"not letter\"\n    #\n    # Hint: use the following\
    \ command to check if a string is a letter or number:\n    # $ [[ \"$string\"\
    \ =~ ^[a-zA-Z0-9]+$ ]] && echo \"letter or number\" || echo \"not letter or number\"\
    \n    #\n    # Hint: use the following command to check if a string is a letter\
    \ or number or underscore:\n    # $ [[ \"$string\" =~ ^[a-zA-Z0-9_]+$ ]] && echo\
    \ \"letter or number or underscore\" || echo \"not letter or number or underscore\"\
    \n    #\n    # Hint: use the following command to", "    # TODO: Implement this\
    \ function\n    # Hint: use the following commands to get the first column of\
    \ a CSV\n    # and to convert a string to lower case:\n    #\n    # first_col=$(echo\
    \ \"$1\" | cut -d, -f1)\n    # lower_case=$(echo \"$first_col\" | tr '[:upper:]'\
    \ '[:lower:]')\n    #\n    # You can use the following command to check if a string\
    \ is all\n    # lower case:\n    #\n    # [[ \"$lower_case\" == \"$first_col\"\
    \ ]]\n    #\n    # You can use the following command to check if a string is all\n\
    \    # upper case:\n    #\n    # [[ \"$upper_case\" == \"$first_col\" ]]\n   \
    \ #\n    # You can use the following command to check if a string is empty:\n\
    \    #\n    # [[ -z \"$string\" ]]\n    #\n    # You can use the following command\
    \ to check if a string is a number:\n    #\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n\
    \    #\n    # You can use the following command to check if a string is a letter:\n\
    \    #\n    # [[ \"$string\" =~ ^[a-zA-Z]+$ ]]\n    #\n    # You can use the following\
    \ command to check if a string is all\n    # letters:\n    #\n    # [[ \"$string\"\
    \ =~ ^[a-zA-Z]+$ ]] && [[ \"$string\" == \"${string,,}\" ]]\n    #\n    # You\
    \ can use the following command to check if a string is all\n    # upper case\
    \ letters:\n    #\n    # [[ \"$string\" =~ ^[a-zA-Z]+$ ]] && [[ \"$string\" ==\
    \ \"${string^^}\" ]]\n    #\n    # You can use the following command to check\
    \ if a string is all\n    # lower case letters:\n    #\n    # [[ \"$string\" =~\
    \ ^[a-zA-Z]+$ ]] && [[ \"$string\" == \"${string,,}\" ]]\n    #\n    # You can\
    \ use the following command to check if a string is all\n    # letters or numbers",
  "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  # check if all\
    \ keys are upper case\n  if [[ \"$1\" =~ ^[A-Z][A-Z]*,[^,]*$ ]]; then\n    echo\
    \ \"true\"\n    return\n  fi\n  # check if all keys are lower case\n  if [[ \"\
    $1\" =~ ^[a-z][a-z]*,[^,]*$ ]]; then\n    echo \"true\"\n    return\n  fi\n  echo\
    \ \"false\"", "    # TODO: Implement this function\n    # Hint: Use the following\
    \ command to convert a string to lower case:\n    # echo \"string\" | tr '[:upper:]'\
    \ '[:lower:]'\n    # Hint: Use the following command to convert a string to upper\
    \ case:\n    # echo \"string\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the\
    \ following command to check if a string is in lower case:\n    # [[ \"string\"\
    \ =~ ^[a-z]+$ ]]\n    # Hint: Use the following command to check if a string is\
    \ in upper case:\n    # [[ \"string\" =~ ^[A-Z]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is empty:\n    # [[ -z \"string\" ]]\n    # Hint:\
    \ Use the following command to check if a string is not empty:\n    # [[ -n \"\
    string\" ]]\n    # Hint: Use the following command to check if a string is in\
    \ lower case:\n    # [[ \"string\" =~ ^[a-z]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is in upper case:\n    # [[ \"string\" =~ ^[A-Z]+$\
    \ ]]\n    # Hint: Use the following command to check if a string is empty:\n \
    \   # [[ -z \"string\" ]]\n    # Hint: Use the following command to check if a\
    \ string is not empty:\n    # [[ -n \"string\" ]]\n    # Hint: Use the following\
    \ command to check if a string is in lower case:\n    # [[ \"string\" =~ ^[a-z]+$\
    \ ]]\n    # Hint: Use the following command to check if a string is in upper case:\n\
    \    # [[ \"string\" =~ ^[A-Z]+$ ]]\n    # Hint: Use the following command to\
    \ check if a string is empty:\n    # [[ -z \"string\" ]]\n    # Hint: Use the\
    \ following command to check if a string is not empty:\n    # [[ -n \"string\"\
    \ ]]\n    # Hint: Use the following command to check if a string is in lower case:\n\
    \    # [[", "    # TODO: Implement this function\n    # Hint: You can use the\
    \ following bash commands:\n    #   - awk\n    #   - grep\n    #   - tr\n    #\
    \   - sed\n    #   - cut\n    #   - head\n    #   - tail\n    #   - wc\n    #\
    \   - sort\n    #   - uniq\n    #   - expr\n    #   - echo\n    #   - cat\n  \
    \  #   - tr\n    #   - read\n    #   - set\n    #   - IFS\n    #   - [\n    #\
    \   - [[\n    #   - test\n    #   - [[ ]]\n    #   - (( ))\n    #   - [ ]\n  \
    \  #   - [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]]\n    #   - [[ ]] && [[ ]] ||\
    \ [[ ]]\n    #   - [[ ]] && { [[ ]] || [[ ]]; }\n    #   - [[ ]] && { [[ ]] ||\
    \ [[ ]]; } || [[ ]]\n    #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]]\n\
    \    #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]]\n    #   -\
    \ [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    #   -\
    \ [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n\
    \    #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]] ||\
    \ [[ ]] && [[ ]]\n    #   - [[ ]] && { [[ ]] || [[ ]]; } || [[ ]] && [[ ]] ||\
    \ [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    #   - [[ ]] && { [[ ]] || [[\
    \ ]]; } || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] &&", " \
    \   local csv=\"$1\"\n    local all_upper=1\n    local all_lower=1\n    local\
    \ csv_len=$(echo \"$csv\" | wc -l)\n    if [ $csv_len -eq 0 ]; then\n        echo\
    \ \"false\"\n        return\n    fi\n    for key in $(echo \"$csv\" | cut -d,\
    \ -f1); do\n        if [[ $key =~ [A-Z] ]]; then\n            all_lower=0\n  \
    \      fi\n        if [[ $key =~ [a-z] ]]; then\n            all_upper=0\n   \
    \     fi\n    done\n    if [ $all_upper -eq 1 ] || [ $all_lower -eq 1 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  # TODO:\
    \ Implement this function\n  # Hint: Use awk to split the CSV into two columns\n\
    \  # Hint: Use awk to check if all keys are in lower case\n  # Hint: Use awk to\
    \ check if all keys are in upper case\n  # Hint: Use awk to check if the CSV is\
    \ empty\n  # Hint: Use awk to print \"true\" or \"false\"\n  # Hint: Use awk to\
    \ print the result of the comparison\n  # Hint: Use awk to print the result of\
    \ the comparison\n  # Hint: Use awk to print the result of the comparison\n  #\
    \ Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to print\
    \ the result of the comparison\n  # Hint: Use awk to print the result of the comparison\n\
    \  # Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to\
    \ print the result of the comparison\n  # Hint: Use awk to print the result of\
    \ the comparison\n  # Hint: Use awk to print the result of the comparison\n  #\
    \ Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to print\
    \ the result of the comparison\n  # Hint: Use awk to print the result of the comparison\n\
    \  # Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to\
    \ print the result of the comparison\n  # Hint: Use awk to print the result of\
    \ the comparison\n  # Hint: Use awk to print the result of the comparison\n  #\
    \ Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to print\
    \ the result of the comparison\n  # Hint: Use awk to print the result of the comparison\n\
    \  # Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to\
    \ print the result of the comparison\n  # Hint: Use awk to print the result of\
    \ the comparison\n  # Hint: Use awk to print the result of the comparison\n  #\
    \ Hint: Use awk to print the result of the comparison\n  # Hint: Use awk to print\
    \ the result of the comparison\n", "  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  local lower_keys=$(echo \"$1\" | cut -d \",\" -f 1 | tr\
    \ '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo \"$1\" | cut -d \",\" -f\
    \ 1 | tr '[:lower:]' '[:upper:]')\n  if [ \"$1\" = \"$lower_keys\" ]; then\n \
    \   echo \"true\"\n  elif [ \"$1\" = \"$upper_keys\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  # TODO: implement this function\n  echo\
    \ \"false\"", "    # TODO: implement this function\n    echo \"false\"", "   \
    \ # TODO: Implement this function\n    # Hint: Use awk to split the CSV into two\
    \ columns\n    # Hint: Use awk to check if all keys are in lower case\n    # Hint:\
    \ Use awk to check if all keys are in upper case\n    # Hint: Use awk to check\
    \ if the CSV is empty\n    # Hint: Use awk to print true or false\n    # Hint:\
    \ Use awk to print the number of rows\n    # Hint: Use awk to print the number\
    \ of columns\n    # Hint: Use awk to print the first column\n    # Hint: Use awk\
    \ to print the second column\n    # Hint: Use awk to print the first row\n   \
    \ # Hint: Use awk to print the second row\n    # Hint: Use awk to print the first\
    \ field of the first row\n    # Hint: Use awk to print the second field of the\
    \ first row\n    # Hint: Use awk to print the first field of the second row\n\
    \    # Hint: Use awk to print the second field of the second row\n    # Hint:\
    \ Use awk to print the first field of the first row in lower case\n    # Hint:\
    \ Use awk to print the first field of the first row in upper case\n    # Hint:\
    \ Use awk to print the second field of the first row in lower case\n    # Hint:\
    \ Use awk to print the second field of the first row in upper case\n    # Hint:\
    \ Use awk to print the first field of the second row in lower case\n    # Hint:\
    \ Use awk to print the first field of the second row in upper case\n    # Hint:\
    \ Use awk to print the second field of the second row in lower case\n    # Hint:\
    \ Use awk to print the second field of the second row in upper case\n    # Hint:\
    \ Use awk to print the first field of the first row in lower case\n    # Hint:\
    \ Use awk to print the first field of the first row in upper case\n    # Hint:\
    \ Use awk to print the second field of the first row in lower case\n    # Hint:\
    \ Use awk to print the second field of the first row in upper case\n    # Hint:\
    \ Use awk to print", "    # TODO: Implement this function\n    echo \"false\"",
  "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local lower_keys=$(echo\
    \ \"$1\" | cut -d, -f1 | grep -v '[A-Z]')\n  local upper_keys=$(echo \"$1\" |\
    \ cut -d, -f1 | grep -v '[a-z]')\n  if [ -z \"$lower_keys\" ] && [ -z \"$upper_keys\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  # TODO: Implement\
    \ this function\n  # Hint: Use awk to split the CSV into two columns\n  # Hint:\
    \ Use awk to check if all keys are in lower case\n  # Hint: Use awk to check if\
    \ all keys are in upper case\n  # Hint: Use awk to check if the CSV is empty\n\
    \  # Hint: Use awk to return true or false\n  # Hint: Use awk to print the result\n\
    \  awk -F, '\n  BEGIN {\n    lower = 1;\n    upper = 1;\n    empty = 1;\n  }\n\
    \  {\n    empty = 0;\n    if ($1 ~ /[A-Z]/) {\n      lower = 0;\n    }\n    if\
    \ ($1 ~ /[a-z]/) {\n      upper = 0;\n    }\n  }\n  END {\n    if (empty) {\n\
    \      print \"false\";\n    } else if (lower || upper) {\n      print \"true\"\
    ;\n    } else {\n      print \"false\";\n    }\n  }\n  ' <<< \"$1\"", "    # TODO:\
    \ implement this function\n    echo \"false\"", "    # TODO: implement this function\n\
    \    # Hint: use the following command to check if a string is upper case\n  \
    \  # [[ $string == *[[:upper:]]* ]]\n    # Hint: use the following command to\
    \ check if a string is lower case\n    # [[ $string == *[[:lower:]]* ]]\n    #\
    \ Hint: use the following command to split a string into an array\n    # IFS=','\
    \ read -r -a array <<< \"$string\"\n    # Hint: use the following command to get\
    \ the first element of an array\n    # echo ${array[0]}\n    # Hint: use the following\
    \ command to get the second element of an array\n    # echo ${array[1]}\n    #\
    \ Hint: use the following command to get the length of an array\n    # echo ${#array[@]}\n\
    \    # Hint: use the following command to get the number of lines in a string\n\
    \    # echo \"$string\" | wc -l\n    # Hint: use the following command to get\
    \ the number of lines in a file\n    # wc -l < $file\n    # Hint: use the following\
    \ command to get the first line of a file\n    # head -n 1 $file\n    # Hint:\
    \ use the following command to get the last line of a file\n    # tail -n 1 $file\n\
    \    # Hint: use the following command to get the first line of a string\n   \
    \ # echo \"$string\" | head -n 1\n    # Hint: use the following command to get\
    \ the last line of a string\n    # echo \"$string\" | tail -n 1\n    # Hint: use\
    \ the following command to get the first character of a string\n    # echo \"\
    $string\" | head -c 1\n    # Hint: use the following command to get the last character\
    \ of a string\n    # echo \"$string\" | tail -c 1\n    # Hint: use the following\
    \ command to check if a string is empty\n    # [[ -z $string ]]\n    # Hint: use\
    \ the following command to check if a file is empty\n    # [[ ! -s $file ]]\n\
    \    # Hint: use the following command to check if a string is a number\n    #\
    \ [[ $string =~ ^[0-", "  # TODO: implement this function\n  # Hint: use the following\
    \ command to convert a string to lower case:\n  # echo \"HELLO\" | tr '[:upper:]'\
    \ '[:lower:]'\n  # Hint: use the following command to convert a string to upper\
    \ case:\n  # echo \"hello\" | tr '[:lower:]' '[:upper:]'\n  # Hint: use the following\
    \ command to check if a string is in upper case:\n  # echo \"HELLO\" | grep -q\
    \ '[^[:upper:]]' && echo \"false\" || echo \"true\"\n  # Hint: use the following\
    \ command to check if a string is in lower case:\n  # echo \"hello\" | grep -q\
    \ '[^[:lower:]]' && echo \"false\" || echo \"true\"\n  # Hint: use the following\
    \ command to check if a string is empty:\n  # echo -n \"\" | grep -q '^$' && echo\
    \ \"true\" || echo \"false\"\n  # Hint: use the following command to check if\
    \ a string is not empty:\n  # echo -n \"hello\" | grep -q '^$' && echo \"false\"\
    \ || echo \"true\"\n  # Hint: use the following command to check if a string is\
    \ a number:\n  # echo \"123\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n  # Hint: use the following command to check if a string is not a\
    \ number:\n  # echo \"123\" | grep -q '[^[:digit:]]' && echo \"true\" || echo\
    \ \"false\"\n  # Hint: use the following command to check if a string is a letter:\n\
    \  # echo \"a\" | grep -q '[^[:alpha:]]' && echo \"false\" || echo \"true\"\n\
    \  # Hint: use the following command to check if a string is not a letter:\n \
    \ # echo \"a\" | grep -q '[^[:alpha:]]' && echo \"true\" || echo \"false\"\n \
    \ # Hint: use the following command to check if a string is a letter or number:\n\
    \  # echo \"a\" | grep -q '[^[:alnum:]]' && echo \"", "  # TODO: Implement this\
    \ function\n  # Hint: You can use the following bash functions:\n  #   - awk\n\
    \  #   - tr\n  #   - grep\n  #   - wc\n  #   - cut\n  #   - sort\n  #   - uniq\n\
    \  #   - head\n  #   - tail\n  #   - expr\n  #   - echo\n  #   - return\n  #\n\
    \  # Hint: You can use the following bash operators:\n  #   - -eq\n  #   - -ne\n\
    \  #   - -lt\n  #   - -gt\n  #   - -le\n  #   - -ge\n  #   - -z\n  #   - -n\n\
    \  #   - -a\n  #   - -o\n  #   - !\n  #   - &&\n  #   - ||\n  #\n  # Hint: You\
    \ can use the following bash built-in variables:\n  #   - $0\n  #   - $1\n  #\
    \   - $2\n  #   - $#\n  #   - $@\n  #   - $?\n  #   - $$\n  #   - $!\n  #   -\
    \ $IFS\n  #   - $LINENO\n  #   - $BASH_VERSION\n  #   - $SECONDS\n  #   - $RANDOM\n\
    \  #   - $EUID\n  #   - $UID\n  #   - $PPID\n  #   - $SHELLOPTS\n  #   - $PIPESTATUS\n\
    \  #   - $MACHTYPE\n  #   - $HOSTNAME\n  #   - $OSTYPE\n  #   - $BASH_VERSINFO\n\
    \  #   - $BASH_SUBSHELL\n  #   - $BASHPID\n  #   - $SHLVL\n  #   - $BASH_SOURCE\n\
    \  #   - $BASH_LINENO\n  #   - $BASH_REMATCH\n  #   - $BASH_ARGC\n  #   - $BASH_ARGV\n\
    \  #   - $BASH_EXECUTION_STRING\n  #  ", "  if [ -z \"$1\" ]; then\n    echo \"\
    false\"\n    return\n  fi\n  # Check if all keys are lower case\n  if [ \"$(echo\
    \ \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '\\n')\" = \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  # Check if all keys are upper case\n \
    \ if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]' | tr -d '\\n')\" = \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\"\
    \ ]; then\n    echo \"true\"\n    return\n  fi\n  echo \"false\"", "  local csv=\"\
    $1\"\n  local keys=\"$(echo \"$csv\" | cut -d, -f1)\"\n  local lower_keys=\"$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\"\n  local upper_keys=\"$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$keys\" == \"$lower_keys\" ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$keys\" == \"$upper_keys\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    # TODO: Implement this function\n\
    \    # Hint: Use the following command to convert a string to lower case\n   \
    \ # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # Hint: Use the following\
    \ command to convert a string to upper case\n    # echo \"hello\" | tr '[:lower:]'\
    \ '[:upper:]'\n    # Hint: Use the following command to check if a string is all\
    \ upper case\n    # echo \"HELLO\" | grep -q '[^[:upper:]]' && echo \"false\"\
    \ || echo \"true\"\n    # Hint: Use the following command to check if a string\
    \ is all lower case\n    # echo \"hello\" | grep -q '[^[:lower:]]' && echo \"\
    false\" || echo \"true\"\n    # Hint: Use the following command to check if a\
    \ string is empty\n    # echo \"hello\" | grep -q '^$' && echo \"true\" || echo\
    \ \"false\"\n    # Hint: Use the following command to check if a string is not\
    \ empty\n    # echo \"hello\" | grep -q '^$' && echo \"false\" || echo \"true\"\
    \n    # Hint: Use the following command to check if a string is a number\n   \
    \ # echo \"123\" | grep -q '[^[:digit:]]' && echo \"false\" || echo \"true\"\n\
    \    # Hint: Use the following command to check if a string is not a number\n\
    \    # echo \"123\" | grep -q '[^[:digit:]]' && echo \"true\" || echo \"false\"\
    \n    # Hint: Use the following command to check if a string is a letter\n   \
    \ # echo \"a\" | grep -q '[^[:alpha:]]' && echo \"false\" || echo \"true\"\n \
    \   # Hint: Use the following command to check if a string is not a letter\n \
    \   # echo \"a\" | grep -q '[^[:alpha:]]' && echo \"true\" || echo \"false\"\n\
    \    # Hint: Use the following command to check if a string is a letter or number\n\
    \    # echo \"a\" | grep -q '[^[:alnum:]]' && echo \"false\" || echo \"true\"\n\
    \    # Hint:", "  # TODO: Implement this function\n  # Hint: Use the `tr` command\
    \ to convert the CSV to a list of keys\n  # Hint: Use the `grep` command to check\
    \ if all keys are upper case\n  # Hint: Use the `grep` command to check if all\
    \ keys are lower case\n  # Hint: Use the `wc` command to count the number of lines\
    \ in the CSV\n  # Hint: Use the `wc` command to count the number of lines in the\
    \ list of keys\n  # Hint: Use the `test` command to compare the number of lines\
    \ in the CSV\n  #       and the number of lines in the list of keys\n  # Hint:\
    \ Use the `test` command to compare the number of lines in the CSV\n  #      \
    \ and the number of lines in the list of keys\n  # Hint: Use the `test` command\
    \ to compare the number of lines in the CSV\n  #       and the number of lines\
    \ in the list of keys\n  # Hint: Use the `test` command to compare the number\
    \ of lines in the CSV\n  #       and the number of lines in the list of keys\n\
    \  # Hint: Use the `test` command to compare the number of lines in the CSV\n\
    \  #       and the number of lines in the list of keys\n  # Hint: Use the `test`\
    \ command to compare the number of lines in the CSV\n  #       and the number\
    \ of lines in the list of keys\n  # Hint: Use the `test` command to compare the\
    \ number of lines in the CSV\n  #       and the number of lines in the list of\
    \ keys\n  # Hint: Use the `test` command to compare the number of lines in the\
    \ CSV\n  #       and the number of lines in the list of keys\n  # Hint: Use the\
    \ `test` command to compare the number of lines in the CSV\n  #       and the\
    \ number of lines in the list of keys\n  # Hint: Use the `test` command to compare\
    \ the number of lines in the CSV\n  #       and the number of lines in the list\
    \ of keys\n  # Hint: Use the `test` command to compare the number of lines in\
    \ the CSV\n  #       and the number of lines in the list of keys\n  # Hint: Use\
    \ the `", "    # TODO: Implement this function\n    return 1", "    # Check if\
    \ the CSV is empty\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n     \
    \   return\n    fi\n\n    # Check if all keys are strings in lower case\n    if\
    \ [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]'\
    \ | wc -l)\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n        echo \"true\"\n \
    \       return\n    fi\n\n    # Check if all keys are strings in upper case\n\
    \    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]'\
    \ | wc -l)\" -eq \"$(echo \"$1\" | wc -l)\" ]; then\n        echo \"true\"\n \
    \       return\n    fi\n\n    # If none of the above conditions are true, return\
    \ false\n    echo \"false\"", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  local lowercase=$(echo \"$1\" | cut -d, -f1 | grep -v '[A-Z]'\
    \ | wc -l)\n  local uppercase=$(echo \"$1\" | cut -d, -f1 | grep -v '[a-z]' |\
    \ wc -l)\n  if [ \"$lowercase\" -eq \"$uppercase\" ]; then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi", "    # TODO: Implement me!\n    # Hint: You\
    \ can use the following bash functions:\n    #   - `tr`: https://linux.die.net/man/1/tr\n\
    \    #   - `grep`: https://linux.die.net/man/1/grep\n    #   - `wc`: https://linux.die.net/man/1/wc\n\
    \    #   - `cut`: https://linux.die.net/man/1/cut\n    #   - `sort`: https://linux.die.net/man/1/sort\n\
    \    #   - `uniq`: https://linux.die.net/man/1/uniq\n    #   - `rev`: https://linux.die.net/man/1/rev\n\
    \    #   - `head`: https://linux.die.net/man/1/head\n    #   - `tail`: https://linux.die.net/man/1/tail\n\
    \    #   - `echo`: https://linux.die.net/man/1/echo\n    #   - `expr`: https://linux.die.net/man/1/expr\n\
    \    #   - `test`: https://linux.die.net/man/1/test\n    #   - `if`: https://linux.die.net/man/1/bash\n\
    \    #   - `then`: https://linux.die.net/man/1/bash\n    #   - `else`: https://linux.die.net/man/1/bash\n\
    \    #   - `fi`: https://linux.die.net/man/1/bash\n    #   - `true`: https://linux.die.net/man/1/true\n\
    \    #   - `false`: https://linux.die.net/man/1/false\n    #   - `return`: https://linux.die.net/man/1/bash\n\
    \    #   - `$()`: https://linux.die.net/man/1/bash\n    #   - `$1`: https://linux.die.net/man/1/bash\n\
    \    #   - `$?`: https://linux.die.net/man", "    # Check if the CSV is empty\n\
    \    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n\n\
    \    # Check if the first key is lower case\n    if [[ \"$(echo \"$1\" | cut -d,\
    \ -f1 | tr '[:upper:]' '[:lower:]')\" == \"$(echo \"$1\" | cut -d, -f1)\" ]];\
    \ then\n        # Check if all keys are lower case\n        if [[ \"$(echo \"\
    $1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]')\" == \"$(echo \"$1\" | cut -d,\
    \ -f1)\" ]]; then\n            echo \"true\"\n            return\n        fi\n\
    \    fi\n\n    # Check if the first key is upper case\n    if [[ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\" == \"$(echo \"$1\" | cut -d, -f1)\"\
    \ ]]; then\n        # Check if all keys are upper case\n        if [[ \"$(echo\
    \ \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\" == \"$(echo \"$1\" | cut\
    \ -d, -f1)\" ]]; then\n            echo \"true\"\n            return\n       \
    \ fi\n    fi\n\n    # If we get here, the CSV is not a dictionary\n    echo \"\
    false\"", "    # TODO: Implement this function\n    # Hint: Use the following\
    \ command to convert a string to lower case:\n    # echo \"STRING\" | tr '[:upper:]'\
    \ '[:lower:]'\n    # Hint: Use the following command to convert a string to upper\
    \ case:\n    # echo \"STRING\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the\
    \ following command to check if a string is in lower case:\n    # [[ \"STRING\"\
    \ =~ ^[a-z]+$ ]]\n    # Hint: Use the following command to check if a string is\
    \ in upper case:\n    # [[ \"STRING\" =~ ^[A-Z]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is empty:\n    # [[ -z \"STRING\" ]]\n    # Hint:\
    \ Use the following command to check if a string is not empty:\n    # [[ -n \"\
    STRING\" ]]\n    # Hint: Use the following command to check if a file is empty:\n\
    \    # [[ ! -s \"FILE\" ]]\n    # Hint: Use the following command to check if\
    \ a file is not empty:\n    # [[ -s \"FILE\" ]]\n    # Hint: Use the following\
    \ command to check if a file exists:\n    # [[ -f \"FILE\" ]]\n    # Hint: Use\
    \ the following command to check if a file does not exist:\n    # [[ ! -f \"FILE\"\
    \ ]]\n    # Hint: Use the following command to check if a directory exists:\n\
    \    # [[ -d \"DIRECTORY\" ]]\n    # Hint: Use the following command to check\
    \ if a directory does not exist:\n    # [[ ! -d \"DIRECTORY\" ]]\n    # Hint:\
    \ Use the following command to check if a command exists:\n    # type \"COMMAND\"\
    \ > /dev/null 2>&1\n    # Hint: Use the following command to check if a command\
    \ does not exist:\n    # ! type \"COMMAND\" > /dev/null 2>&1\n    # Hint: Use\
    \ the following command to check if a command exists and is an alias:\n    # type\
    \ \"COMMAND\" > /dev", "    # TODO: implement this function\n    # Hint: use awk\
    \ to get the first column of the CSV\n    # Hint: use awk to get the second column\
    \ of the CSV\n    # Hint: use awk to get the length of the first column of the\
    \ CSV\n    # Hint: use awk to get the length of the second column of the CSV\n\
    \    # Hint: use awk to get the number of rows in the CSV\n    # Hint: use awk\
    \ to get the number of columns in the CSV\n    # Hint: use awk to get the number\
    \ of fields in the CSV\n    # Hint: use awk to get the number of lines in the\
    \ CSV\n    # Hint: use awk to get the number of characters in the CSV\n    # Hint:\
    \ use awk to get the number of characters in the first column of the CSV\n   \
    \ # Hint: use awk to get the number of characters in the second column of the\
    \ CSV\n    # Hint: use awk to get the number of characters in the first row of\
    \ the CSV\n    # Hint: use awk to get the number of characters in the second row\
    \ of the CSV\n    # Hint: use awk to get the number of characters in the first\
    \ field of the CSV\n    # Hint: use awk to get the number of characters in the\
    \ second field of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the first line of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the second line of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the first key of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the second key of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the first value of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the second value of the CSV\n    # Hint: use awk to get the number of characters\
    \ in the first key of the first row of the CSV\n    # Hint: use awk to get the\
    \ number of characters in the second key of the first row of the CSV\n    # Hint:\
    \ use awk to get the number of characters in the first value of the first row",
  "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  # Check if all\
    \ keys are lower case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]'\
    \ | tr -d '[:digit:]' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]'\
    \ | wc -c)\" ]; then\n    echo \"true\"\n    return\n  fi\n  # Check if all keys\
    \ are upper case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '[:digit:]' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]'\
    \ | wc -c)\" ]; then\n    echo \"true\"\n    return\n  fi\n  echo \"false\"",
  "    if [[ -z \"$1\" ]]; then\n        echo \"false\"\n        return\n    fi\n\
    \    # Get the first key\n    key=$(echo \"$1\" | cut -d, -f1)\n    # Check if\
    \ it is all lower case\n    if [[ \"$key\" == \"$(echo \"$key\" | tr '[:upper:]'\
    \ '[:lower:]')\" ]]; then\n        # If so, check if all keys are lower case\n\
    \        if [[ \"$1\" == \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\" ]]; then\n\
    \            echo \"true\"\n            return\n        fi\n    fi\n    # Check\
    \ if it is all upper case\n    if [[ \"$key\" == \"$(echo \"$key\" | tr '[:lower:]'\
    \ '[:upper:]')\" ]]; then\n        # If so, check if all keys are upper case\n\
    \        if [[ \"$1\" == \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" ]]; then\n\
    \            echo \"true\"\n            return\n        fi\n    fi\n    echo \"\
    false\"", "    # TODO: implement this function\n    # Hint: use awk\n    awk -F,\
    \ '{\n        if (NR == 1) {\n            if ($1 ~ /[a-z]/) {\n              \
    \  lower = 1;\n            } else if ($1 ~ /[A-Z]/) {\n                upper =\
    \ 1;\n            } else {\n                print \"false\";\n               \
    \ exit;\n            }\n        } else {\n            if (lower == 1 && $1 ~ /[A-Z]/)\
    \ {\n                print \"false\";\n                exit;\n            } else\
    \ if (upper == 1 && $1 ~ /[a-z]/) {\n                print \"false\";\n      \
    \          exit;\n            }\n        }\n    } END {\n        if (NR == 0)\
    \ {\n            print \"false\";\n        } else {\n            print \"true\"\
    ;\n        }\n    }' <(echo \"$1\")", "    # TODO: Implement this function\n \
    \   # Hint: Use the following command to convert a string to lower case\n    #\
    \       echo $string | tr '[:upper:]' '[:lower:]'\n    # Hint: Use the following\
    \ command to convert a string to upper case\n    #       echo $string | tr '[:lower:]'\
    \ '[:upper:]'\n    # Hint: Use the following command to check if a string is all\
    \ upper case\n    #       [[ $string == *[[:upper:]]* ]]\n    # Hint: Use the\
    \ following command to check if a string is all lower case\n    #       [[ $string\
    \ == *[[:lower:]]* ]]\n    # Hint: Use the following command to check if a string\
    \ is all digits\n    #       [[ $string == *[[:digit:]]* ]]\n    # Hint: Use the\
    \ following command to check if a string is all letters\n    #       [[ $string\
    \ == *[[:alpha:]]* ]]\n    # Hint: Use the following command to check if a string\
    \ is all alphanumeric\n    #       [[ $string == *[[:alnum:]]* ]]\n    # Hint:\
    \ Use the following command to check if a string is all alphanumeric\n    #  \
    \     [[ $string == *[[:alnum:]]* ]]\n    # Hint: Use the following command to\
    \ check if a string is all alphanumeric\n    #       [[ $string == *[[:alnum:]]*\
    \ ]]\n    # Hint: Use the following command to check if a string is all alphanumeric\n\
    \    #       [[ $string == *[[:alnum:]]* ]]\n    # Hint: Use the following command\
    \ to check if a string is all alphanumeric\n    #       [[ $string == *[[:alnum:]]*\
    \ ]]\n    # Hint: Use the following command to check if a string is all alphanumeric\n\
    \    #       [[ $string == *[[:alnum:]]* ]]\n    # Hint: Use the following command\
    \ to check if a string is all alphanumeric\n    #       [[ $string == *[[:alnum:]]*\
    \ ]]\n    # Hint: Use the following command to check if a string is all alphanumeric\n\
    \    #", "  # TODO: Implement this function\n  # Hint: Use the following command\
    \ to convert a string to lower case:\n  # echo \"string\" | tr '[:upper:]' '[:lower:]'\n\
    \  # Hint: Use the following command to convert a string to upper case:\n  # echo\
    \ \"string\" | tr '[:lower:]' '[:upper:]'\n  # Hint: Use the following command\
    \ to check if a string is all lower case:\n  # echo \"string\" | grep -q \"[[:upper:]]\"\
    \ && echo \"false\" || echo \"true\"\n  # Hint: Use the following command to check\
    \ if a string is all upper case:\n  # echo \"string\" | grep -q \"[[:lower:]]\"\
    \ && echo \"false\" || echo \"true\"\n  # Hint: Use the following command to check\
    \ if a string is empty:\n  # echo \"string\" | grep -q \"^$\" && echo \"true\"\
    \ || echo \"false\"\n  # Hint: Use the following command to check if a string\
    \ is a number:\n  # echo \"string\" | grep -q \"[[:digit:]]\" && echo \"true\"\
    \ || echo \"false\"\n  # Hint: Use the following command to check if a string\
    \ is a letter:\n  # echo \"string\" | grep -q \"[[:alpha:]]\" && echo \"true\"\
    \ || echo \"false\"\n  # Hint: Use the following command to check if a string\
    \ is a letter or number:\n  # echo \"string\" | grep -q \"[[:alnum:]]\" && echo\
    \ \"true\" || echo \"false\"\n  # Hint: Use the following command to check if\
    \ a string is a letter or number or underscore:\n  # echo \"string\" | grep -q\
    \ \"[[:alnum:]_]\" && echo \"true\" || echo \"false\"\n  # Hint: Use the following\
    \ command to check if a string is a letter or number or underscore or dash:\n\
    \  # echo \"string\" | grep -q \"[[:alnum:]_-]\" && echo \"true\" || echo \"false\"\
    \n  # Hint: Use the following command to check if a string is a letter or number\
    \ or underscore or dash or space:\n  # echo \"string\" | grep -q \"[[", "  # TODO:\
    \ Write your code here\n  # Hint: Use the following command to convert a string\
    \ to lower case:\n  #       echo \"STRING\" | tr '[:upper:]' '[:lower:]'\n  #\
    \ Hint: Use the following command to convert a string to upper case:\n  #    \
    \   echo \"STRING\" | tr '[:lower:]' '[:upper:]'\n  # Hint: Use the following\
    \ command to check if a string is in lower case:\n  #       [[ \"STRING\" =~ ^[a-z]+$\
    \ ]]\n  # Hint: Use the following command to check if a string is in upper case:\n\
    \  #       [[ \"STRING\" =~ ^[A-Z]+$ ]]\n  # Hint: Use the following command to\
    \ check if a string is empty:\n  #       [[ -z \"STRING\" ]]\n  # Hint: Use the\
    \ following command to check if a string is not empty:\n  #       [[ -n \"STRING\"\
    \ ]]\n  # Hint: Use the following command to check if a string is a number:\n\
    \  #       [[ \"STRING\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to\
    \ check if a string is not a number:\n  #       [[ ! \"STRING\" =~ ^[0-9]+$ ]]\n\
    \  # Hint: Use the following command to check if a string is a number:\n  #  \
    \     [[ \"STRING\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is not a number:\n  #       [[ ! \"STRING\" =~ ^[0-9]+$ ]]\n  #\
    \ Hint: Use the following command to check if a string is a number:\n  #     \
    \  [[ \"STRING\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is not a number:\n  #       [[ ! \"STRING\" =~ ^[0-9]+$ ]]\n  #\
    \ Hint: Use the following command to check if a string is a number:\n  #     \
    \  [[ \"STRING\" =~ ^[0-9]+$ ]]\n ", "    # TODO: Implement this function\n  \
    \  # Hint: Use the `tr` command to convert upper case to lower case\n    # and\
    \ vice versa.\n    # Hint: Use the `cut` command to get the first column of the\
    \ CSV.\n    # Hint: Use the `grep` command to check if a string is all upper\n\
    \    # case or all lower case.\n    # Hint: Use the `wc` command to count the\
    \ number of lines in the\n    # CSV.\n    # Hint: Use the `sort` command to sort\
    \ the CSV.\n    # Hint: Use the `uniq` command to remove duplicate lines in the\n\
    \    # CSV.\n    # Hint: Use the `wc` command to count the number of lines in\
    \ the\n    # CSV.\n    # Hint: Use the `test` command to compare the number of\
    \ lines in\n    # the CSV before and after sorting and removing duplicates.\n\
    \    # Hint: Use the `test` command to compare the number of lines in\n    # the\
    \ CSV before and after sorting and removing duplicates.\n    # Hint: Use the `test`\
    \ command to compare the number of lines in\n    # the CSV before and after sorting\
    \ and removing duplicates.\n    # Hint: Use the `test` command to compare the\
    \ number of lines in\n    # the CSV before and after sorting and removing duplicates.\n\
    \    # Hint: Use the `test` command to compare the number of lines in\n    # the\
    \ CSV before and after sorting and removing duplicates.\n    # Hint: Use the `test`\
    \ command to compare the number of lines in\n    # the CSV before and after sorting\
    \ and removing duplicates.\n    # Hint: Use the `test` command to compare the\
    \ number of lines in\n    # the CSV before and after sorting and removing duplicates.\n\
    \    # Hint: Use the `test` command to compare the number of lines in\n    # the\
    \ CSV before and after sorting and removing duplicates.\n    # Hint: Use the `test`\
    \ command to compare the number of lines in\n    # the CSV before and after sorting\
    \ and removing duplicates.\n    # Hint: Use the `test` command to compare the\
    \ number of lines in\n    # the CSV before and after sorting and removing duplicates.\n\
    \    #", "  # TODO: implement this function\n  # Hint: use the following command\
    \ to convert a string to lower case:\n  # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n\
    \  # Hint: use the following command to convert a string to upper case:\n  # echo\
    \ \"hello\" | tr '[:lower:]' '[:upper:]'\n  # Hint: use the following command\
    \ to check if a string is all upper case:\n  # echo \"HELLO\" | grep -q '[^[:upper:]]'\
    \ && echo \"false\" || echo \"true\"\n  # Hint: use the following command to check\
    \ if a string is all lower case:\n  # echo \"hello\" | grep -q '[^[:lower:]]'\
    \ && echo \"false\" || echo \"true\"\n  # Hint: use the following command to check\
    \ if a string is empty:\n  # [[ -z \"$string\" ]] && echo \"true\" || echo \"\
    false\"\n  # Hint: use the following command to check if a file is empty:\n  #\
    \ [[ -s \"$file\" ]] && echo \"false\" || echo \"true\"\n  # Hint: use the following\
    \ command to get the first column of a CSV:\n  # cut -d, -f1\n  # Hint: use the\
    \ following command to get the second column of a CSV:\n  # cut -d, -f2\n  # Hint:\
    \ use the following command to get the number of lines in a CSV:\n  # wc -l\n\
    \  # Hint: use the following command to get the number of columns in a CSV:\n\
    \  # head -n1 | tr ',' '\\n' | wc -l\n  # Hint: use the following command to get\
    \ the number of columns in a CSV:\n  # head -n1 | tr ',' '\\n' | wc -l\n  # Hint:\
    \ use the following command to get the number of columns in a CSV:\n  # head -n1\
    \ | tr ',' '\\n' | wc -l\n  # Hint: use the following command to get the number\
    \ of columns in a CSV:\n  # head -n1 | tr ',' '\\n' | wc -l\n  # H", "    # TODO:\
    \ implement this function\n    echo \"false\"", "  # TODO: implement this function\n\
    \  # Hint: use the following commands to extract the keys and values\n  # from\
    \ the CSV:\n  # keys=$(echo \"$1\" | cut -d, -f1)\n  # values=$(echo \"$1\" |\
    \ cut -d, -f2)\n  #\n  # Hint: use the following command to check if a string\
    \ is in lower\n  # case:\n  # [[ \"$string\" =~ ^[a-z]+$ ]]\n  #\n  # Hint: use\
    \ the following command to check if a string is in upper\n  # case:\n  # [[ \"\
    $string\" =~ ^[A-Z]+$ ]]\n  #\n  # Hint: use the following command to return true\
    \ or false:\n  # echo \"$bool\"\n  keys=$(echo \"$1\" | cut -d, -f1)\n  values=$(echo\
    \ \"$1\" | cut -d, -f2)\n  if [[ \"$keys\" =~ ^[a-z]+$ ]]; then\n    echo \"true\"\
    \n  elif [[ \"$keys\" =~ ^[A-Z]+$ ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  # TODO: implement this function\n  # Hint: use the following\
    \ commands to check if a string is in lower case\n  #   if [[ \"$string\" == *[[:lower:]]*\
    \ ]]; then\n  #   fi\n  # Hint: use the following commands to check if a string\
    \ is in upper case\n  #   if [[ \"$string\" == *[[:upper:]]* ]]; then\n  #   fi\n\
    \  # Hint: use the following command to get the first column of a CSV\n  #   echo\
    \ \"$csv\" | cut -d, -f1\n  # Hint: use the following command to get the second\
    \ column of a CSV\n  #   echo \"$csv\" | cut -d, -f2\n  # Hint: use the following\
    \ command to get the number of columns in a CSV\n  #   echo \"$csv\" | awk -F,\
    \ '{print NF}'\n  # Hint: use the following command to get the number of rows\
    \ in a CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use the following command to\
    \ get the number of rows in a CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use\
    \ the following command to get the number of rows in a CSV\n  #   echo \"$csv\"\
    \ | wc -l\n  # Hint: use the following command to get the number of rows in a\
    \ CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use the following command to get\
    \ the number of rows in a CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use the\
    \ following command to get the number of rows in a CSV\n  #   echo \"$csv\" |\
    \ wc -l\n  # Hint: use the following command to get the number of rows in a CSV\n\
    \  #   echo \"$csv\" | wc -l\n  # Hint: use the following command to get the number\
    \ of rows in a CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use the following command\
    \ to get the number of rows in a CSV\n  #   echo \"$csv\" | wc -l\n  # Hint: use\
    \ the following command to get the number of rows in a CSV\n", "    local csv=\"\
    $1\"\n    local lower_case_keys=$(echo \"$csv\" | cut -d, -f1 | grep -v '[A-Z]')\n\
    \    local upper_case_keys=$(echo \"$csv\" | cut -d, -f1 | grep -v '[a-z]')\n\
    \    if [ -z \"$csv\" ]; then\n        echo \"false\"\n    elif [ -z \"$lower_case_keys\"\
    \ ] && [ -z \"$upper_case_keys\" ]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi", "    # TODO: Implement this function\n    # Hint:\
    \ Use the following command to convert a string to lower case:\n    # echo \"\
    Hello\" | tr '[:upper:]' '[:lower:]'\n    # Hint: Use the following command to\
    \ convert a string to upper case:\n    # echo \"Hello\" | tr '[:lower:]' '[:upper:]'\n\
    \    # Hint: Use the following command to check if a string is in lower case:\n\
    \    # [[ \"hello\" =~ ^[a-z]+$ ]] && echo \"true\" || echo \"false\"\n    # Hint:\
    \ Use the following command to check if a string is in upper case:\n    # [[ \"\
    HELLO\" =~ ^[A-Z]+$ ]] && echo \"true\" || echo \"false\"\n    # Hint: Use the\
    \ following command to check if a string is empty:\n    # [[ -z \"$string\" ]]\
    \ && echo \"true\" || echo \"false\"\n    # Hint: Use the following command to\
    \ check if a string is not empty:\n    # [[ -n \"$string\" ]] && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a file\
    \ is empty:\n    # [[ -s \"$file\" ]] && echo \"true\" || echo \"false\"\n   \
    \ # Hint: Use the following command to check if a file is not empty:\n    # [[\
    \ ! -s \"$file\" ]] && echo \"true\" || echo \"false\"\n    # Hint: Use the following\
    \ command to check if a file exists:\n    # [[ -e \"$file\" ]] && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a file\
    \ does not exist:\n    # [[ ! -e \"$file\" ]] && echo \"true\" || echo \"false\"\
    \n    # Hint: Use the following command to check if a file is a regular file:\n\
    \    # [[ -f \"$file\" ]] && echo \"true\" || echo \"false\"\n    # Hint: Use\
    \ the following command to check if a file is not a regular file:\n    # [[ !\
    \ -f \"$file\" ]] && echo \"true\" || echo \"false\"\n    # Hint: Use the following",
  "    local csv=$1\n    local keys=$(echo \"$csv\" | cut -d, -f1)\n    local lower_keys=$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\n    local upper_keys=$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\n    if [ \"$keys\" == \"$lower_keys\" ] || [\
    \ \"$keys\" == \"$upper_keys\" ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "    # TODO: Implement this function\n    # Hint:\
    \ Use the following command to check if a string is in lower case:\n    # [[ \"\
    $string\" =~ ^[a-z]+$ ]]\n    # Hint: Use the following command to check if a\
    \ string is in upper case:\n    # [[ \"$string\" =~ ^[A-Z]+$ ]]\n    # Hint: Use\
    \ the following command to check if a string is empty:\n    # [[ -z \"$string\"\
    \ ]]\n    # Hint: Use the following command to check if a string is not empty:\n\
    \    # [[ -n \"$string\" ]]\n    # Hint: Use the following command to check if\
    \ a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: Use\
    \ the following command to check if a string is a number:\n    # [[ \"$string\"\
    \ =~ ^[0-9]+$ ]]\n    # Hint: Use the following command to check if a string is\
    \ a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$\
    \ ]]\n    # Hint: Use the following command to check if a string is a number:\n\
    \    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: Use the following command to\
    \ check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint:\
    \ Use the following command to check if a string is a number:\n    # [[ \"$string\"\
    \ =~ ^[0-9]+$ ]]\n    # Hint: Use the following command to check if a string is\
    \ a number:\n    # [[ \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is a number:\n    # [[ \"$string\" =~ ^[0-9]+$\
    \ ]]\n    # Hint: Use the following command to check if a string is a number:\n\
    \    # [[ \"$string\" =~ ^[0-9]+$", "  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  # get the first key\n  first_key=$(echo \"$1\" | cut -d,\
    \ -f1)\n  # get the first key's case\n  first_key_case=$(echo \"$first_key\" |\
    \ tr '[:upper:]' '[:lower:]')\n  # if the first key's case is the same as the\
    \ first key,\n  # then the first key is lower case\n  if [ \"$first_key\" == \"\
    $first_key_case\" ]; then\n    # check if all keys are lower case\n    echo \"\
    $1\" | awk -F, '{if ($1 != tolower($1)) {print \"false\"; exit}}; END {print \"\
    true\"}'\n  else\n    # check if all keys are upper case\n    echo \"$1\" | awk\
    \ -F, '{if ($1 != toupper($1)) {print \"false\"; exit}}; END {print \"true\"}'\n\
    \  fi", "    # TODO: Write your code here\n    # Hint: You can use the following\
    \ bash functions:\n    # - awk\n    # - tr\n    # - grep\n    # - sed\n    # -\
    \ cut\n    # - wc\n    # - sort\n    # - uniq\n    # - tolower\n    # - toupper\n\
    \    # - expr\n    # - head\n    # - tail\n    # - cat\n    # - echo\n    # -\
    \ printf\n    # - test\n    # - [\n    # - [[\n    # - ]]\n    # - [[ ]]\n   \
    \ # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[\
    \ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n  \
    \  # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # -\
    \ [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n\
    \    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # -\
    \ [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n\
    \    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    #\
    \ - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n\
    \    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # -\
    \ [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n    # - [[ ]]\n    # - [ ]\n\
    \    # - [[ ]]\n    # - [ ]\n    # - [[", "    local csv=\"$1\"\n    local csv_len=$(echo\
    \ \"$csv\" | wc -l)\n    if [[ $csv_len -eq 0 ]]; then\n        echo \"false\"\
    \n        return\n    fi\n    local csv_keys=$(echo \"$csv\" | cut -d, -f1)\n\
    \    local csv_keys_len=$(echo \"$csv_keys\" | wc -l)\n    local csv_keys_lower=$(echo\
    \ \"$csv_keys\" | tr '[:upper:]' '[:lower:]')\n    local csv_keys_upper=$(echo\
    \ \"$csv_keys\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$csv_keys\" == \"$csv_keys_lower\"\
    \ ]]; then\n        echo \"true\"\n    elif [[ \"$csv_keys\" == \"$csv_keys_upper\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    # TODO: implement this function\n    # Hint: use the following command to check\
    \ if a string is in lower case\n    # [[ \"$string\" =~ ^[a-z]+$ ]]\n    # Hint:\
    \ use the following command to check if a string is in upper case\n    # [[ \"\
    $string\" =~ ^[A-Z]+$ ]]\n    # Hint: use the following command to check if a\
    \ string is empty\n    # [[ -z \"$string\" ]]\n    # Hint: use the following command\
    \ to check if a string is not empty\n    # [[ -n \"$string\" ]]\n    # Hint: use\
    \ the following command to check if a string is a number\n    # [[ \"$string\"\
    \ =~ ^[0-9]+$ ]]\n    # Hint: use the following command to check if a string is\
    \ not a number\n    # [[ ! \"$string\" =~ ^[0-9]+$ ]]\n    # Hint: use the following\
    \ command to check if a string is a string\n    # [[ \"$string\" =~ ^[a-zA-Z]+$\
    \ ]]\n    # Hint: use the following command to check if a string is not a string\n\
    \    # [[ ! \"$string\" =~ ^[a-zA-Z]+$ ]]\n    # Hint: use the following command\
    \ to check if a string is a string or a number\n    # [[ \"$string\" =~ ^[a-zA-Z0-9]+$\
    \ ]]\n    # Hint: use the following command to check if a string is not a string\
    \ or a number\n    # [[ ! \"$string\" =~ ^[a-zA-Z0-9]+$ ]]\n    # Hint: use the\
    \ following command to check if a string is a string or a number or a space\n\
    \    # [[ \"$string\" =~ ^[a-zA-Z0-9 ]+$ ]]\n    # Hint: use the following command\
    \ to check if a string is not a string or a number or a space\n    # [[ ! \"$string\"\
    \ =~ ^[a-zA-Z0-9 ]+$ ]]\n    # Hint: use the following command to check if a string\
    \ is a string or a number or a space or a", "    # TODO: Implement this function\n\
    \    # Hint: You can use the following bash functions:\n    # - awk\n    # - tr\n\
    \    # - grep\n    # - sed\n    # - echo\n    # - test\n    # - [\n    # - [[\n\
    \    # - ]]\n    # - [[\"$var\" == \"foo\"]]\n    # - [[\"$var\" == \"foo\"]]\
    \ && echo \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo\
    \ \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\"\
    \ || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo\
    \ \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\
    \n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\n    # -\
    \ [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\"\
    \ == \"foo\"]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"\
    ]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo\
    \ \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\"\
    \ || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo\
    \ \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\
    \n    # - [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\n    # -\
    \ [[\"$var\" == \"foo\"]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\"\
    \ == \"foo\"]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"\
    ]] && echo \"true\" || echo \"false\"\n    # - [[\"$var\" == \"foo\"]] && echo\
    \ \"true\" ||", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\
    \  # Check if all keys are lower case\n  if [ \"$(echo \"$1\" | cut -d, -f1 |\
    \ tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | wc -c)\" -eq \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr -d '[:digit:]' | wc -c)\" ]; then\n    echo \"true\"\n  \
    \  return\n  fi\n  # Check if all keys are upper case\n  if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]' | wc -c)\" -eq\
    \ \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]' | wc -c)\" ]; then\n    echo\
    \ \"true\"\n    return\n  fi\n  echo \"false\"", "  local csv=\"$1\"\n  local\
    \ keys=\"$(echo \"$csv\" | cut -d, -f1)\"\n  local lower_keys=\"$(echo \"$keys\"\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local upper_keys=\"$(echo \"$keys\" | tr\
    \ '[:lower:]' '[:upper:]')\"\n  if [[ \"$keys\" == \"$lower_keys\" ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$keys\" == \"$upper_keys\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  # Write your code here\n  #\n\
    \  # Hint:\n  # 1. Use the following command to get the first column of a CSV:\n\
    \  #    cut -d, -f1\n  # 2. Use the following command to get the second column\
    \ of a CSV:\n  #    cut -d, -f2\n  # 3. Use the following command to check if\
    \ a string is in lower case:\n  #    [[ \"$string\" =~ ^[a-z]+$ ]]\n  # 4. Use\
    \ the following command to check if a string is in upper case:\n  #    [[ \"$string\"\
    \ =~ ^[A-Z]+$ ]]\n  # 5. Use the following command to check if a string is empty:\n\
    \  #    [[ -z \"$string\" ]]\n  # 6. Use the following command to check if a string\
    \ is not empty:\n  #    [[ -n \"$string\" ]]\n  # 7. Use the following command\
    \ to check if a string is a number:\n  #    [[ \"$string\" =~ ^[0-9]+$ ]]\n  #\
    \ 8. Use the following command to check if a string is not a number:\n  #    [[\
    \ ! \"$string\" =~ ^[0-9]+$ ]]\n  # 9. Use the following command to check if a\
    \ string is a number:\n  #    [[ \"$string\" =~ ^[0-9]+$ ]]\n  # 10. Use the following\
    \ command to check if a string is not a number:\n  #    [[ ! \"$string\" =~ ^[0-9]+$\
    \ ]]\n  # 11. Use the following command to check if a string is a number:\n  #\
    \    [[ \"$string\" =~ ^[0-9]+$ ]]\n  # 12. Use the following command to check\
    \ if a string is not a number:\n  #    [[ ! \"$string\" =~ ^[0-9]+$ ]]\n  # 13.\
    \ Use the following command to check if a string is a number:\n  #    [[ \"$string\"\
    \ =~ ^[0-9]+$ ]]\n  # 14. Use the following command to check if a string is not\
    \ a number:\n  #    [[ ! \"$string\" =~ ^[0-9]+$ ]", "    # TODO: Implement this\
    \ function\n    # Hint: You can use the following bash functions:\n    #   - tr:\
    \ https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \    #   - grep: https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html\n\
    \    #   - sed: https://www.gnu.org/software/bash/manual/html_node/Stream-Editor.html\n\
    \    #   - awk: https://www.gnu.org/software/gawk/manual/gawk.html\n    #   -\
    \ wc: https://www.gnu.org/software/coreutils/manual/html_node/wc-invocation.html\n\
    \    #   - cut: https://www.gnu.org/software/coreutils/manual/html_node/cut-invocation.html\n\
    \    #   - sort: https://www.gnu.org/software/coreutils/manual/html_node/sort-invocation.html\n\
    \    #   - uniq: https://www.gnu.org/software/coreutils/manual/html_node/uniq-invocation.html\n\
    \    #   - head: https://www.gnu.org/software/coreutils/manual/html_node/head-invocation.html\n\
    \    #   - tail: https://www.gnu.org/software/coreutils/manual/html_node/tail-invocation.html\n\
    \    #   - expr: https://www.gnu.org/software/coreutils/manual/html_node/expr-invocation.html\n\
    \    #   - test: https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\n\
    \    #   - if: https://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html\n\
    \    #   - echo: https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html\n\
    \    #   - return: https://www.gnu.org/software/bash/manual/html_", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the following bash functions:\n\
    \    # - awk\n    # - tr\n    # - grep\n    # - wc\n    # - expr\n    # - cut\n\
    \    # - sort\n    # - uniq\n    # - head\n    # - tail\n    # - echo\n    # -\
    \ return\n    # - [[ ]]\n    # - [[ ]] && [[ ]]\n    # - [[ ]] || [[ ]]\n    #\
    \ - [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]] && [[ ]]\n    # - [[ ]] ||\
    \ [[ ]] || [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] && [[ ]] || [[\
    \ ]] && [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]]\
    \ || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n\
    \    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] ||\
    \ [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] &&\
    \ [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] &&\
    \ [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] && [[ ]] ||\
    \ [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] || [[ ]] && [[ ]] || [[ ]] &&\
    \ [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    # - [[ ]] && [[ ]] || [[ ]] &&\
    \ [[ ]] || [[ ]] && [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    # - [[ ]] || [[ ]] &&\
    \ [[ ]] || [[ ]] &&", "  # TODO: implement this function\n  # Hint: use awk\n\
    \  # Hint: use the tolower() and toupper() functions\n  # Hint: use the length()\
    \ function\n  # Hint: use the substr() function\n  # Hint: use the exit() function\n\
    \  # Hint: use the system() function\n  # Hint: use the print() function\n  #\
    \ Hint: use the match() function\n  # Hint: use the gsub() function\n  # Hint:\
    \ use the split() function\n  # Hint: use the substr() function\n  # Hint: use\
    \ the length() function\n  # Hint: use the tolower() function\n  # Hint: use the\
    \ toupper() function\n  # Hint: use the exit() function\n  # Hint: use the system()\
    \ function\n  # Hint: use the print() function\n  # Hint: use the match() function\n\
    \  # Hint: use the gsub() function\n  # Hint: use the split() function\n  # Hint:\
    \ use the substr() function\n  # Hint: use the length() function\n  # Hint: use\
    \ the tolower() function\n  # Hint: use the toupper() function\n  # Hint: use\
    \ the exit() function\n  # Hint: use the system() function\n  # Hint: use the\
    \ print() function\n  # Hint: use the match() function\n  # Hint: use the gsub()\
    \ function\n  # Hint: use the split() function\n  # Hint: use the substr() function\n\
    \  # Hint: use the length() function\n  # Hint: use the tolower() function\n \
    \ # Hint: use the toupper() function\n  # Hint: use the exit() function\n  # Hint:\
    \ use the system() function\n  # Hint: use the print() function\n  # Hint: use\
    \ the match() function\n  # Hint: use the gsub() function\n  # Hint: use the split()\
    \ function\n  # Hint: use the substr() function\n  # Hint: use the length() function\n\
    \  # Hint: use the tolower() function\n  # Hint: use the toupper() function\n\
    \  # H", "    # TODO: Implement this function\n    # Hint: You may want to use\
    \ the following functions:\n    #   - $(is_upper_case $str)\n    #   - $(is_lower_case\
    \ $str)\n    #   - $(is_empty $str)\n    #   - $(get_column $csv $col)\n    #\
    \   - $(get_num_columns $csv)\n    #   - $(get_num_rows $csv)\n    #   - $(get_row\
    \ $csv $row)\n    #   - $(get_row_index $csv $row)\n    #   - $(get_row_index_by_key\
    \ $csv $key)\n    #   - $(get_row_by_key $csv $key)\n    #   - $(get_row_by_index\
    \ $csv $index)\n    #   - $(get_key $csv $row)\n    #   - $(get_value $csv $row)\n\
    \    #   - $(get_value_by_key $csv $key)\n    #   - $(get_value_by_index $csv\
    \ $index)\n    #   - $(set_value $csv $row $value)\n    #   - $(set_value_by_key\
    \ $csv $key $value)\n    #   - $(set_value_by_index $csv $index $value)\n    #\
    \   - $(add_row $csv $row)\n    #   - $(add_row_by_key $csv $key $value)\n   \
    \ #   - $(add_row_by_index $csv $index $value)\n    #   - $(remove_row $csv $row)\n\
    \    #   - $(remove_row_by_key $csv $key)\n    #   - $(remove_row_by_index $csv\
    \ $index)\n    #   - $(remove_column $csv $col)\n    #   - $(remove_column_by_key\
    \ $csv $key)\n    #   - $(remove_column_by_index $csv $index)\n    #   - $(remove_empty_rows\
    \ $csv)\n    #   - $(remove_empty_columns $csv)\n    #   - $(remove_duplicate_rows\
    \ $csv)", "  # TODO: Implement this function\n  # Hint: You can use awk to split\
    \ the string by comma\n  # and then use bash's string manipulation functions\n\
    \  # to check if the key is in lower case or upper case.\n  # You can use the\
    \ following bash functions:\n  # ${var,,} to convert to lower case\n  # ${var^^}\
    \ to convert to upper case\n  # ${var:0:1} to get the first character of the string\n\
    \  # ${var:1} to get the rest of the string\n  # ${#var} to get the length of\
    \ the string\n  #\n  # You can use the following awk functions:\n  # split(string,\
    \ array, separator) to split the string\n  # into an array with the given separator\n\
    \  #\n  # You can use the following bash built-in commands:\n  # echo to print\
    \ the output\n  # test to check if a string is empty\n  #\n  # You can use the\
    \ following bash control flow statements:\n  # if, then, else, fi\n  #\n  # You\
    \ can use the following bash comparison operators:\n  # -eq, -ne, -lt, -le, -gt,\
    \ -ge\n  #\n  # You can use the following bash logical operators:\n  # &&, ||,\
    \ !\n  #\n  # You can use the following bash arithmetic operators:\n  # +, -,\
    \ *, /, %\n  #\n  # You can use the following bash string operators:\n  # =, ==,\
    \ !=\n  #\n  # You can use the following bash string comparison operators:\n \
    \ # <, >, <=, >=\n  #\n  # You can use the following bash string manipulation\
    \ operators:\n  # :, #, %\n  #\n  # You can use the following bash string manipulation\
    \ functions:\n  # tolower, toupper\n  #\n  # You can use the following bash built-in\
    \ variables:\n  # $0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $#, $@, $*, $$, $!,\
    \ $?, $-, $_\n  #\n  # You can use the following bash built-in variables for string\
    \ manipulation:\n  # ${", "  local csv=\"$1\"\n  local csv_len=$(echo \"$csv\"\
    \ | wc -l)\n  if [ \"$csv_len\" -eq 0 ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  local csv_keys=$(echo \"$csv\" | cut -d, -f1)\n  local csv_keys_len=$(echo\
    \ \"$csv_keys\" | wc -l)\n  if [ \"$csv_keys_len\" -eq 0 ]; then\n    echo \"\
    false\"\n    return\n  fi\n  local csv_keys_lower=$(echo \"$csv_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local csv_keys_upper=$(echo \"$csv_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [ \"$csv_keys\" == \"$csv_keys_lower\" ]; then\n    echo \"true\"\n  elif\
    \ [ \"$csv_keys\" == \"$csv_keys_upper\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  # TODO: implement this function\n  # Hint: use\
    \ the is_lower_case and is_upper_case functions\n  # Hint: use the is_empty function\n\
    \  # Hint: use the is_two_column_csv function\n  # Hint: use the is_key_string\
    \ function\n  # Hint: use the is_value_string function\n  # Hint: use the is_key_value_pair\
    \ function\n  # Hint: use the is_dict function\n  # Hint: use the is_dict_case\
    \ function\n  # Hint: use the is_dict_case_lower function\n  # Hint: use the is_dict_case_upper\
    \ function\n  # Hint: use the is_dict_case_mixed function\n  # Hint: use the is_dict_case_mixed_lower\
    \ function\n  # Hint: use the is_dict_case_mixed_upper function\n  # Hint: use\
    \ the is_dict_case_mixed_lower_upper function\n  # Hint: use the is_dict_case_mixed_upper_lower\
    \ function\n  # Hint: use the is_dict_case_mixed_lower_upper_lower function\n\
    \  # Hint: use the is_dict_case_mixed_lower_upper_upper function\n  # Hint: use\
    \ the is_dict_case_mixed_upper_lower_lower function\n  # Hint: use the is_dict_case_mixed_upper_lower_upper\
    \ function\n  # Hint: use the is_dict_case_mixed_upper_upper_lower function\n\
    \  # Hint: use the is_dict_case_mixed_upper_upper_upper function\n  # Hint: use\
    \ the is_dict_case_mixed_lower_lower_lower function\n  # Hint: use the is_dict_case_mixed_lower_lower_upper\
    \ function\n  # Hint: use the is_dict_case_mixed_lower_upper_lower_lower function\n\
    \  # Hint: use the is_dict_case_mixed_lower_upper_lower_upper function\n  # Hint:\
    \ use the is_dict_case_mixed_lower_upper_upper", "  if [ -z \"$1\" ]; then\n \
    \   echo \"false\"\n    return\n  fi\n  # check if all keys are lower case\n \
    \ if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]'\
    \ | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]' | wc -c)\"\
    \ ]; then\n    echo \"true\"\n    return\n  fi\n  # check if all keys are upper\
    \ case\n  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr\
    \ -d '[:digit:]' | wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]'\
    \ | wc -c)\" ]; then\n    echo \"true\"\n    return\n  fi\n  echo \"false\"",
  "    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n  \
    \  # Check if all keys are lower case\n    if [ \"$(echo \"$1\" | cut -d, -f1\
    \ | tr '[:upper:]' '[:lower:]' | tr -d '[:digit:]' | wc -c)\" -eq \"$(echo \"\
    $1\" | cut -d, -f1 | tr -d '[:digit:]' | wc -c)\" ]; then\n        echo \"true\"\
    \n        return\n    fi\n    # Check if all keys are upper case\n    if [ \"\
    $(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr -d '[:digit:]' |\
    \ wc -c)\" -eq \"$(echo \"$1\" | cut -d, -f1 | tr -d '[:digit:]' | wc -c)\" ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    echo \"false\"", " \
    \   # TODO: Implement this function\n    # Hint: Use the following bash functions:\n\
    \    #   - awk\n    #   - tr\n    #   - grep\n    #   - sed\n    #   - head\n\
    \    #   - tail\n    #   - wc\n    #   - cut\n    #   - sort\n    #   - uniq\n\
    \    #   - expr\n    #   - echo\n    #   - test\n    #   - [[ ]]\n    #   - [\
    \ ]\n    #   - [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]]\n    #   - [[ ]] && [[\
    \ ]] || [[ ]]\n    #   - [[ ]] && [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]] ||\
    \ [[ ]]\n    #   - [[ ]] || [[ ]] && [[ ]]\n    #   - [[ ]] && [[ ]] || [[ ]]\
    \ && [[ ]]\n    #   - [[ ]] || [[ ]] && [[ ]] || [[ ]]\n    #   - [[ ]] && [[\
    \ ]] && [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]] || [[ ]] || [[ ]]\n    #   -\
    \ [[ ]] || [[ ]] || [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]] && [[ ]] || [[ ]]\n\
    \    #   - [[ ]] && [[ ]] || [[ ]] || [[ ]]\n    #   - [[ ]] && [[ ]] && [[ ]]\
    \ || [[ ]]\n    #   - [[ ]] && [[ ]] || [[ ]] && [[ ]]\n    #   - [[ ]] || [[\
    \ ]] && [[ ]] && [[ ]]\n    #   - [[ ]] && [[ ]] && [[ ]] && [[ ]] || [[ ]]\n\
    \    #   - [[ ]] || [[ ]] || [[ ]] || [[ ]] || [[ ]]\n    #   - [[ ]] || [[ ]]\
    \ || [[ ]] || [[ ]] && [[ ]]\n    #   - [[ ]] || [[ ]] || [[ ]] && [[ ]] || [[\
    \ ]]\n    #   - [[ ]] || [[ ]", "    # TODO: Implement this function\n    # Hint:\
    \ Use the following command to check if a string is in lower case:\n    # [[ \"\
    $str\" =~ ^[a-z]+$ ]]\n    # Hint: Use the following command to check if a string\
    \ is in upper case:\n    # [[ \"$str\" =~ ^[A-Z]+$ ]]\n    # Hint: Use the following\
    \ command to check if a string is empty:\n    # [[ -z \"$str\" ]]\n    # Hint:\
    \ Use the following command to get the first column of a CSV:\n    # cut -d, -f1\n\
    \    # Hint: Use the following command to get the second column of a CSV:\n  \
    \  # cut -d, -f2\n    # Hint: Use the following command to get the number of columns\
    \ in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint: Use the following command\
    \ to get the number of rows in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint:\
    \ Use the following command to get the number of columns in a CSV:\n    # cut\
    \ -d, -f1 | wc -l\n    # Hint: Use the following command to get the number of\
    \ rows in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint: Use the following command\
    \ to get the number of columns in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint:\
    \ Use the following command to get the number of rows in a CSV:\n    # cut -d,\
    \ -f1 | wc -l\n    # Hint: Use the following command to get the number of columns\
    \ in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint: Use the following command\
    \ to get the number of rows in a CSV:\n    # cut -d, -f1 | wc -l\n    # Hint:\
    \ Use the following command to get the number of columns in a CSV:\n    # cut\
    \ -d, -f1 | wc -l\n    # Hint: Use the following command to get the number of\
    \ rows in a CSV:\n    # cut -", "  if [[ -z \"$1\" ]]; then\n    echo \"false\"\
    \n    return\n  fi\n  local csv=\"$1\"\n  local lower_keys=$(echo \"$csv\" | cut\
    \ -d, -f1 | tr '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo \"$csv\" |\
    \ cut -d, -f1 | tr '[:lower:]' '[:upper:]')\n  if [[ \"$csv\" == \"$lower_keys\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$csv\" == \"$upper_keys\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  # TODO: implement this\
    \ function\n  # Hint: use the following command to convert a string to lower case\n\
    \  # echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n  # Hint: use the following\
    \ command to convert a string to upper case\n  # echo \"hello\" | tr '[:lower:]'\
    \ '[:upper:]'\n  # Hint: use the following command to check if a string is all\
    \ upper case\n  # echo \"HELLO\" | grep -q '[^[:upper:]]' && echo \"false\" ||\
    \ echo \"true\"\n  # Hint: use the following command to check if a string is all\
    \ lower case\n  # echo \"hello\" | grep -q '[^[:lower:]]' && echo \"false\" ||\
    \ echo \"true\"\n  # Hint: use the following command to check if a string is all\
    \ digits\n  # echo \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo\
    \ \"true\"\n  # Hint: use the following command to check if a string is empty\n\
    \  # echo -n \"\" | grep -q '[^[:space:]]' && echo \"false\" || echo \"true\"\n\
    \  # Hint: use the following command to check if a string is not empty\n  # echo\
    \ -n \"hello\" | grep -q '[^[:space:]]' && echo \"true\" || echo \"false\"\n \
    \ # Hint: use the following command to check if a string is a number\n  # echo\
    \ \"12345\" | grep -q '[^[:digit:]]' && echo \"false\" || echo \"true\"\n  # Hint:\
    \ use the following command to check if a string is not a number\n  # echo \"\
    12345\" | grep -q '[^[:digit:]]' && echo \"true\" || echo \"false\"\n  # Hint:\
    \ use the following command to check if a string is a number\n  # echo \"12345\"\
    \ | grep -q '[^[:digit:]]' && echo \"false\" || echo \"true\"\n  # Hint: use the\
    \ following command to check if a string is not a number\n  # echo \"12345\" |\
    \ grep -q '[^[:digit:]]' && echo \"true", "    # TODO: implement this function\n\
    \    # HINT: use the following command to convert a string to lower case\n   \
    \ #       echo \"HELLO\" | tr '[:upper:]' '[:lower:]'\n    # HINT: use the following\
    \ command to convert a string to upper case\n    #       echo \"hello\" | tr '[:lower:]'\
    \ '[:upper:]'\n    # HINT: use the following command to check if a string is all\
    \ lower case\n    #       [[ \"hello\" =~ ^[a-z]+$ ]] && echo \"true\" || echo\
    \ \"false\"\n    # HINT: use the following command to check if a string is all\
    \ upper case\n    #       [[ \"HELLO\" =~ ^[A-Z]+$ ]] && echo \"true\" || echo\
    \ \"false\"\n    # HINT: use the following command to check if a string is all\
    \ digits\n    #       [[ \"12345\" =~ ^[0-9]+$ ]] && echo \"true\" || echo \"\
    false\"\n    # HINT: use the following command to check if a string is all letters\n\
    \    #       [[ \"abcde\" =~ ^[a-zA-Z]+$ ]] && echo \"true\" || echo \"false\"\
    \n    # HINT: use the following command to check if a string is all letters or\
    \ digits\n    #       [[ \"abcde\" =~ ^[a-zA-Z0-9]+$ ]] && echo \"true\" || echo\
    \ \"false\"\n    # HINT: use the following command to check if a string is all\
    \ letters or digits or underscores\n    #       [[ \"abcde\" =~ ^[a-zA-Z0-9_]+$\
    \ ]] && echo \"true\" || echo \"false\"\n    # HINT: use the following command\
    \ to check if a string is all letters or digits or underscores or dashes\n   \
    \ #       [[ \"abcde\" =~ ^[a-zA-Z0-9_-]+$ ]] && echo \"true\" || echo \"false\"\
    \n    # HINT: use the following command to check if a string is all letters or\
    \ digits or underscores or dashes or periods\n    #       [[ \"abcde\" =~ ^[a-zA-Z0-9_.-]+$",
  "    # TODO: implement this function\n    # Hint: use the following command to check\
    \ if a string is in upper case\n    # $ echo \"ABC\" | grep -q \"[[:upper:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: use the following command to\
    \ check if a string is in lower case\n    # $ echo \"abc\" | grep -q \"[[:lower:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: use the following command to\
    \ check if a string is empty\n    # $ echo \"\" | grep -q \"[[:lower:]]\" && echo\
    \ \"true\" || echo \"false\"\n    # Hint: use the following command to check if\
    \ a string is empty\n    # $ echo \"\" | grep -q \"[[:upper:]]\" && echo \"true\"\
    \ || echo \"false\"\n    # Hint: use the following command to check if a string\
    \ is empty\n    # $ echo \"\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo\
    \ \"false\"\n    # Hint: use the following command to check if a string is empty\n\
    \    # $ echo \"\" | grep -q \"[[:upper:]]\" && echo \"true\" || echo \"false\"\
    \n    # Hint: use the following command to check if a string is empty\n    # $\
    \ echo \"\" | grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\n   \
    \ # Hint: use the following command to check if a string is empty\n    # $ echo\
    \ \"\" | grep -q \"[[:upper:]]\" && echo \"true\" || echo \"false\"\n    # Hint:\
    \ use the following command to check if a string is empty\n    # $ echo \"\" |\
    \ grep -q \"[[:lower:]]\" && echo \"true\" || echo \"false\"\n    # Hint: use\
    \ the following command to check if a string is empty\n    # $ echo \"\" | grep\
    \ -q \"[[:upper:]]\" && echo \"true\" || echo \"false\"\n    # Hint: use the following\
    \ command to check if a string is empty\n    # $ echo \"\" | grep -q \"[[:lower:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: use the following command to",
  "  # TODO: your code here\n  # Hint: use awk\n  awk -F, '{\n    if (NR == 1) {\n\
    \      if ($1 ~ /^[a-z]+$/) {\n        lower = 1;\n      } else if ($1 ~ /^[A-Z]+$/)\
    \ {\n        upper = 1;\n      } else {\n        print \"false\";\n        exit;\n\
    \      }\n    } else {\n      if (lower && $1 !~ /^[a-z]+$/) {\n        print\
    \ \"false\";\n        exit;\n      } else if (upper && $1 !~ /^[A-Z]+$/) {\n \
    \       print \"false\";\n        exit;\n      }\n    }\n  }\n  END {\n    print\
    \ \"true\";\n  }' $1", "    # TODO: implement this function\n    # Hint: use awk\n\
    \    awk -F, '{\n        if (NR == 1) {\n            if ($1 ~ /^[a-z]+$/) {\n\
    \                lower = 1;\n            } else if ($1 ~ /^[A-Z]+$/) {\n     \
    \           upper = 1;\n            } else {\n                print \"false\"\
    ;\n                exit;\n            }\n        } else {\n            if (lower\
    \ && $1 !~ /^[a-z]+$/) {\n                print \"false\";\n                exit;\n\
    \            } else if (upper && $1 !~ /^[A-Z]+$/) {\n                print \"\
    false\";\n                exit;\n            }\n        }\n    }\n    END {\n\
    \        print \"true\";\n    }' $1", "  # TODO: Implement this function\n  #\
    \ Hint: Use the following command to convert a string to lower case:\n  # echo\
    \ \"string\" | tr '[:upper:]' '[:lower:]'\n  # Hint: Use the following command\
    \ to convert a string to upper case:\n  # echo \"string\" | tr '[:lower:]' '[:upper:]'\n\
    \  # Hint: Use the following command to check if a string is in lower case:\n\
    \  # [[ \"string\" =~ ^[a-z]+$ ]]\n  # Hint: Use the following command to check\
    \ if a string is in upper case:\n  # [[ \"string\" =~ ^[A-Z]+$ ]]\n  # Hint: Use\
    \ the following command to check if a string is empty:\n  # [[ -z \"string\" ]]\n\
    \  # Hint: Use the following command to check if a string is not empty:\n  # [[\
    \ -n \"string\" ]]\n  # Hint: Use the following command to check if a string contains\
    \ only digits:\n  # [[ \"string\" =~ ^[0-9]+$ ]]\n  # Hint: Use the following\
    \ command to check if a string contains only letters:\n  # [[ \"string\" =~ ^[a-zA-Z]+$\
    \ ]]\n  # Hint: Use the following command to check if a string contains only letters\
    \ or digits:\n  # [[ \"string\" =~ ^[a-zA-Z0-9]+$ ]]\n  # Hint: Use the following\
    \ command to check if a string contains only letters, digits, or underscores:\n\
    \  # [[ \"string\" =~ ^[a-zA-Z0-9_]+$ ]]\n  # Hint: Use the following command\
    \ to check if a string contains only letters, digits, underscores, or dashes:\n\
    \  # [[ \"string\" =~ ^[a-zA-Z0-9_-]+$ ]]\n  # Hint: Use the following command\
    \ to check if a string contains only letters, digits, underscores, dashes, or\
    \ periods:\n  # [[ \"string\" =~ ^[a-zA-Z0-9_.-]+$ ]]\n  # Hint: Use the following\
    \ command to check if a string contains", "  # TODO: Implement this function\n\
    \  # Hint: Use the following commands to get the first key and value\n  # key=$(echo\
    \ \"$1\" | cut -d, -f1)\n  # value=$(echo \"$1\" | cut -d, -f2)\n  #\n  # Hint:\
    \ Use the following command to check if a string is in upper case\n  # [[ \"$key\"\
    \ == \"${key^^}\" ]]\n  #\n  # Hint: Use the following command to check if a string\
    \ is in lower case\n  # [[ \"$key\" == \"${key,,}\" ]]\n  #\n  # Hint: Use the\
    \ following command to check if a string is empty\n  # [[ -z \"$key\" ]]\n  #\n\
    \  # Hint: Use the following command to check if a string is a number\n  # [[\
    \ \"$key\" =~ ^[0-9]+$ ]]\n  #\n  # Hint: Use the following command to check if\
    \ a string is a letter\n  # [[ \"$key\" =~ ^[a-zA-Z]+$ ]]\n  #\n  # Hint: Use\
    \ the following command to check if a string is a letter or number\n  # [[ \"\
    $key\" =~ ^[a-zA-Z0-9]+$ ]]\n  #\n  # Hint: Use the following command to check\
    \ if a string is a letter or number\n  # [[ \"$key\" =~ ^[a-zA-Z0-9]+$ ]]\n  #\n\
    \  # Hint: Use the following command to check if a string is a letter or number\n\
    \  # [[ \"$key\" =~ ^[a-zA-Z0-9]+$ ]]\n  #\n  # Hint: Use the following command\
    \ to check if a string is a letter or number\n  # [[ \"$key\" =~ ^[a-zA-Z0-9]+$\
    \ ]]\n  #\n  # Hint: Use the following command to check if a string is a letter\
    \ or number\n  # [[ \"$key\" =~ ^[a-zA-Z0-9]+$ ]]\n  #\n  # Hint: Use the following\
    \ command to check if a string is a letter or number\n  # [[", "  # Write your\
    \ code here\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\
    \  local lower_case_keys=0\n  local upper_case_keys=0\n  while IFS=, read -r key\
    \ value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys+1))\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys+1))\n\
    \    else\n      echo \"false\"\n      return\n    fi\n  done <<< \"$1\"\n  if\
    \ [ \"$lower_case_keys\" -gt 0 ] && [ \"$upper_case_keys\" -gt 0 ]; then\n   \
    \ echo \"false\"\n  else\n    echo \"true\"\n  fi", "  if [ -z \"$1\" ]; then\n\
    \    echo \"false\"\n    return\n  fi\n  # Get the first key\n  first_key=$(echo\
    \ \"$1\" | head -n 1 | cut -d, -f1)\n  # Get the first key in lower case\n  first_key_lower=$(echo\
    \ \"$first_key\" | tr '[:upper:]' '[:lower:]')\n  # Get the first key in upper\
    \ case\n  first_key_upper=$(echo \"$first_key\" | tr '[:lower:]' '[:upper:]')\n\
    \  # If the first key is the same as the first key in lower case\n  # then all\
    \ keys should be in lower case\n  if [ \"$first_key\" == \"$first_key_lower\"\
    \ ]; then\n    # Check if all keys are in lower case\n    if [ \"$(echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]')\" == \"$1\" ]; then\n      echo \"true\"\n   \
    \ else\n      echo \"false\"\n    fi\n  # If the first key is the same as the\
    \ first key in upper case\n  # then all keys should be in upper case\n  elif [\
    \ \"$first_key\" == \"$first_key_upper\" ]; then\n    # Check if all keys are\
    \ in upper case\n    if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"\
    $1\" ]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", "  # TODO: Implement this function\n  # Hint: Use\
    \ the following commands to check if a string is in lower case:\n  # [[ \"$string\"\
    \ == *[[:lower:]]* ]]\n  # Hint: Use the following commands to check if a string\
    \ is in upper case:\n  # [[ \"$string\" == *[[:upper:]]* ]]\n  # Hint: Use the\
    \ following command to split a string into an array:\n  # IFS=',' read -r -a array\
    \ <<< \"$string\"\n  # Hint: Use the following command to get the length of an\
    \ array:\n  # ${#array[@]}\n  # Hint: Use the following command to get the first\
    \ element of an array:\n  # ${array[0]}\n  # Hint: Use the following command to\
    \ get the second element of an array:\n  # ${array[1]}\n  # Hint: Use the following\
    \ command to get the last element of an array:\n  # ${array[-1]}\n  # Hint: Use\
    \ the following command to get the second last element of an array:\n  # ${array[-2]}\n\
    \  # Hint: Use the following command to get the third last element of an array:\n\
    \  # ${array[-3]}\n  # Hint: Use the following command to get the fourth last\
    \ element of an array:\n  # ${array[-4]}\n  # Hint: Use the following command\
    \ to get the fifth last element of an array:\n  # ${array[-5]}\n  # Hint: Use\
    \ the following command to get the sixth last element of an array:\n  # ${array[-6]}\n\
    \  # Hint: Use the following command to get the seventh last element of an array:\n\
    \  # ${array[-7]}\n  # Hint: Use the following command to get the eighth last\
    \ element of an array:\n  # ${array[-8]}\n  # Hint: Use the following command\
    \ to get the ninth last element of an array:\n  # ${array[-9]}\n  # Hint: Use\
    \ the following command to get the tenth last element of an array:\n  # ${array[-10]}\n\
    \  # Hint: Use the following command to get the eleventh last element of an array:\n\
    \ ", "    # TODO: Implement this function\n    # Hint: Use the following command\
    \ to convert a string to lower case:\n    # echo \"ABC\" | tr '[:upper:]' '[:lower:]'\n\
    \    # Hint: Use the following command to convert a string to upper case:\n  \
    \  # echo \"abc\" | tr '[:lower:]' '[:upper:]'\n    # Hint: Use the following\
    \ command to check if a string is all lower case:\n    # echo \"abc\" | grep -q\
    \ '[^[:lower:]]' && echo \"false\" || echo \"true\"\n    # Hint: Use the following\
    \ command to check if a string is all upper case:\n    # echo \"ABC\" | grep -q\
    \ '[^[:upper:]]' && echo \"false\" || echo \"true\"\n    # Hint: Use the following\
    \ command to check if a string is all digits:\n    # echo \"123\" | grep -q '[^[:digit:]]'\
    \ && echo \"false\" || echo \"true\"\n    # Hint: Use the following command to\
    \ check if a string is empty:\n    # echo \"123\" | grep -q '^$' && echo \"false\"\
    \ || echo \"true\"\n    # Hint: Use the following command to check if a string\
    \ is not empty:\n    # echo \"123\" | grep -q '^$' && echo \"true\" || echo \"\
    false\"\n    # Hint: Use the following command to check if a string is a valid\
    \ CSV:\n    # echo \"a,b,c\" | grep -q '^[^,]\\+,\\+[^,]\\+$' && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a string\
    \ is a valid CSV:\n    # echo \"a,b,c\" | grep -q '^[^,]\\+,\\+[^,]\\+$' && echo\
    \ \"true\" || echo \"false\"\n    # Hint: Use the following command to check if\
    \ a string is a valid CSV:\n    # echo \"a,b,c\" | grep -q '^[^,]\\+,\\+[^,]\\\
    +$' && echo \"true\" || echo \"false\"\n    # Hint: Use", "  # TODO: Implement\
    \ this function\n  # Hint: You can use the following bash functions:\n  #   -\
    \ awk\n  #   - tr\n  #   - grep\n  #   - wc\n  #   - test\n  #   - expr\n  # \
    \  - cut\n  #   - sort\n  #   - uniq\n  #   - head\n  #   - tail\n  #   - echo\n\
    \  #   - return\n  #\n  # Hint: You can use the following bash operators:\n  #\
    \   - -eq\n  #   - -z\n  #   - -n\n  #   - -gt\n  #   - -lt\n  #   - -ge\n  #\
    \   - -le\n  #   - -ne\n  #   - -o\n  #   - -a\n  #   - -f\n  #   - -d\n  #  \
    \ - -e\n  #   - -r\n  #   - -w\n  #   - -x\n  #   - -s\n  #   - -t\n  #   - -p\n\
    \  #   - -c\n  #   - -b\n  #   - -u\n  #   - -g\n  #   - -k\n  #   - -O\n  # \
    \  - -G\n  #   - -L\n  #   - -S\n  #   - -nt\n  #   - -ot\n  #   - -ef\n  #  \
    \ - -o\n  #   - -a\n  #   - -b\n  #   - -c\n  #   - -d\n  #   - -e\n  #   - -f\n\
    \  #   - -g\n  #   - -h\n  #   - -k\n  #   - -p\n  #   - -r\n  #   - -s\n  # \
    \  - -t\n  #   - -u\n  #   - -w\n  #   - -x\n  #   - -O\n  #   - -G\n  #   - -L\n\
    \  #   - -S\n  #   - -nt\n  #   - -ot\n  #   - -ef\n  #   - -", "    # TODO: Implement\
    \ this function\n    echo \"false\"", "    # TODO: Implement this function\n \
    \   return 1", "  # TODO: Implement this function\n  # Hint: You can use the following\
    \ bash functions:\n  # - tr: https://linux.die.net/man/1/tr\n  # - grep: https://linux.die.net/man/1/grep\n\
    \  # - wc: https://linux.die.net/man/1/wc\n  # - cut: https://linux.die.net/man/1/cut\n\
    \  # - head: https://linux.die.net/man/1/head\n  # - tail: https://linux.die.net/man/1/tail\n\
    \  # - sort: https://linux.die.net/man/1/sort\n  # - uniq: https://linux.die.net/man/1/uniq\n\
    \  # - sed: https://linux.die.net/man/1/sed\n  # - awk: https://linux.die.net/man/1/awk\n\
    \  # - expr: https://linux.die.net/man/1/expr\n  # - bc: https://linux.die.net/man/1/bc\n\
    \  # - echo: https://linux.die.net/man/1/echo\n  # - printf: https://linux.die.net/man/1/printf\n\
    \  # - test: https://linux.die.net/man/1/test\n  # - [: https://linux.die.net/man/1/test\n\
    \  # - [[: https://linux.die.net/man/1/test\n  # - declare: https://linux.die.net/man/1/bash\n\
    \  # - local: https://linux.die.net/man/1/bash\n  # - read: https://linux.die.net/man/1/bash\n\
    \  # - readonly: https://linux.die.net/man/1/bash\n  # - return: https://linux.die.net/man/1/bash\n\
    \  # - set: https://linux.die.net/man/1/bash\n  # - shift: https://linux.die.net/man/1/bash\n\
    \  # - unset: https://linux.die.net/man/1/bash\n  # - typeset", "    local csv=\"\
    $1\"\n    local keys=$(echo \"$csv\" | cut -d, -f1)\n    local upper_keys=$(echo\
    \ \"$keys\" | tr '[:lower:]' '[:upper:]')\n    local lower_keys=$(echo \"$keys\"\
    \ | tr '[:upper:]' '[:lower:]')\n    if [ \"$keys\" == \"$upper_keys\" ] || [\
    \ \"$keys\" == \"$lower_keys\" ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "    # Check if the CSV is empty\n    if [ -z \"\
    $1\" ]; then\n        echo \"false\"\n        return\n    fi\n\n    # Check if\
    \ all keys are in lower case\n    if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr -d '\\n')\" = \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr -d '\\n')\" ]; then\n        echo \"true\"\n        return\n\
    \    fi\n\n    # Check if all keys are in upper case\n    if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr\
    \ -d '\\n')\" = \"$(echo \"$1\" | cut -d, -f1 | tr -d '\\n')\" ]; then\n     \
    \   echo \"true\"\n        return\n    fi\n\n    # If neither of the above conditions\
    \ are met, return false\n    echo \"false\"", "    local csv=\"$1\"\n    local\
    \ keys=$(echo \"$csv\" | cut -d, -f1)\n    local lower_keys=$(echo \"$keys\" |\
    \ tr '[:upper:]' '[:lower:]')\n    local upper_keys=$(echo \"$keys\" | tr '[:lower:]'\
    \ '[:upper:]')\n    if [ \"$keys\" == \"$lower_keys\" ] || [ \"$keys\" == \"$upper_keys\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", " \
    \   # TODO: Implement this function\n    # Hint: Use the following command to\
    \ get the first column of a CSV\n    # echo \"a,apple\\nb,banana\" | cut -d, -f1\n\
    \    # Hint: Use the following command to get the second column of a CSV\n   \
    \ # echo \"a,apple\\nb,banana\" | cut -d, -f2\n    # Hint: Use the following command\
    \ to check if a string is upper case\n    # echo \"ABC\" | grep -q \"[[:upper:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: Use the following command to\
    \ check if a string is lower case\n    # echo \"abc\" | grep -q \"[[:lower:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: Use the following command to\
    \ check if a string is a number\n    # echo \"123\" | grep -q \"[[:digit:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: Use the following command to\
    \ check if a string is a number\n    # echo \"123\" | grep -q \"[[:digit:]]\"\
    \ && echo \"true\" || echo \"false\"\n    # Hint: Use the following command to\
    \ check if a string is empty\n    # echo \"\" | grep -q \"^$\" && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a string\
    \ is empty\n    # echo \"\" | grep -q \"^$\" && echo \"true\" || echo \"false\"\
    \n    # Hint: Use the following command to check if a string is empty\n    # echo\
    \ \"\" | grep -q \"^$\" && echo \"true\" || echo \"false\"\n    # Hint: Use the\
    \ following command to check if a string is empty\n    # echo \"\" | grep -q \"\
    ^$\" && echo \"true\" || echo \"false\"\n    # Hint: Use the following command\
    \ to check if a string is empty\n    # echo \"\" | grep -q \"^$\" && echo \"true\"\
    \ || echo \"false\"\n    # Hint: Use the following command to check if a string\
    \ is empty\n    # echo \"\" | grep -q \"^$\" && echo \"true\" || echo \"false",
  "    # Check if the CSV is empty\n    if [ -z \"$1\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n\n    # Check if the first key is lower case\n    if\
    \ [[ \"$(echo \"$1\" | cut -d, -f1 | head -n1)\" =~ ^[a-z]+$ ]]; then\n      \
    \  # Check if all keys are lower case\n        if [[ \"$(echo \"$1\" | cut -d,\
    \ -f1)\" =~ ^[a-z,]+$ ]]; then\n            echo \"true\"\n            return\n\
    \        fi\n    # Check if the first key is upper case\n    elif [[ \"$(echo\
    \ \"$1\" | cut -d, -f1 | head -n1)\" =~ ^[A-Z]+$ ]]; then\n        # Check if\
    \ all keys are upper case\n        if [[ \"$(echo \"$1\" | cut -d, -f1)\" =~ ^[A-Z,]+$\
    \ ]]; then\n            echo \"true\"\n            return\n        fi\n    fi\n\
    \n    # If we get here, the CSV is not empty and all keys are not in the same\
    \ case\n    echo \"false\"", "    # TODO: implement this function\n    # Hint:\
    \ use awk\n    # Hint: use the bash builtin [[ ]] to test for regular expressions\n\
    \    # Hint: use the bash builtin [[ ]] to test for empty string\n    # Hint:\
    \ use the bash builtin [[ ]] to test for empty string\n    # Hint: use the bash\
    \ builtin [[ ]] to test for empty string\n    # Hint: use the bash builtin [[\
    \ ]] to test for empty string\n    # Hint: use the bash builtin [[ ]] to test\
    \ for empty string\n    # Hint: use the bash builtin [[ ]] to test for empty string\n\
    \    # Hint: use the bash builtin [[ ]] to test for empty string\n    # Hint:\
    \ use the bash builtin [[ ]] to test for empty string\n    # Hint: use the bash\
    \ builtin [[ ]] to test for empty string\n    # Hint: use the bash builtin [[\
    \ ]] to test for empty string\n    # Hint: use the bash builtin [[ ]] to test\
    \ for empty string\n    # Hint: use the bash builtin [[ ]] to test for empty string\n\
    \    # Hint: use the bash builtin [[ ]] to test for empty string\n    # Hint:\
    \ use the bash builtin [[ ]] to test for empty string\n    # Hint: use the bash\
    \ builtin [[ ]] to test for empty string\n    # Hint: use the bash builtin [[\
    \ ]] to test for empty string\n    # Hint: use the bash builtin [[ ]] to test\
    \ for empty string\n    # Hint: use the bash builtin [[ ]] to test for empty string\n\
    \    # Hint: use the bash builtin [[ ]] to test for empty string\n    # Hint:\
    \ use the bash builtin [[ ]] to test for empty string\n    # Hint: use the bash\
    \ builtin [[ ]] to test for empty string\n    # Hint: use the bash builtin [[\
    \ ]] to test for empty string\n    # Hint: use the bash builtin [[ ]] to test\
    \ for empty string\n    # Hint: use the bash builtin [[ ]] to test for empty string\n\
    \    # Hint: use the bash builtin [[ ]] to test for empty string", "  if [ -z\
    \ \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local csv=\"$1\"\n \
    \ local keys=$(echo \"$csv\" | cut -d, -f1)\n  local lower=$(echo \"$keys\" |\
    \ grep -v '[A-Z]')\n  local upper=$(echo \"$keys\" | grep -v '[a-z]')\n  if [\
    \ -z \"$lower\" ] && [ -z \"$upper\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  # Check if the CSV is empty\n  if [ -z \"$1\" ]; then\n\
    \    echo \"false\"\n    return\n  fi\n\n  # Check if the first key is lower case\n\
    \  if [[ $(echo \"$1\" | cut -d, -f1 | head -n1) =~ ^[a-z]+$ ]]; then\n    # Check\
    \ if all keys are lower case\n    if [[ $(echo \"$1\" | cut -d, -f1) =~ ^[a-z]+$\
    \ ]]; then\n      echo \"true\"\n      return\n    fi\n  fi\n\n  # Check if the\
    \ first key is upper case\n  if [[ $(echo \"$1\" | cut -d, -f1 | head -n1) =~\
    \ ^[A-Z]+$ ]]; then\n    # Check if all keys are upper case\n    if [[ $(echo\
    \ \"$1\" | cut -d, -f1) =~ ^[A-Z]+$ ]]; then\n      echo \"true\"\n      return\n\
    \    fi\n  fi\n\n  # If we get here, the CSV is not empty and the keys are not\
    \ all lower or upper case\n  echo \"false\""]
stop_tokens:
- "\n}"
