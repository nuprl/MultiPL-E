name: HumanEval_159_eat
language: sh
prompt: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
  \ meals.\n# you should return an array of [ total number of eaten carrots after\
  \ your meals,\n# the number of carrots left after your meals ]\n# if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n\
  # >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\"\
  \ \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"\
  0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have\
  \ eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining\
  \ : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n\
  # * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have\
  \ fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
tests: "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
  12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
  \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9\
  \ 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
completions: ["    # your code here\n    if [ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2\
    \ -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]\n    then\n  \
    \      if [ $3 -ge $2 ]\n        then\n            echo \"[\\\"$(($1 + $2))\\\"\
    , \\\"$(($3 - $2))\\\"]\"\n        else\n            echo \"[\\\"$(($1 + $3))\\\
    \", \\\"0\\\"]\"\n        fi\n    else\n        echo \"Error: Constrain\"\n  \
    \  fi", "  # your code here\n  if [ $2 -le $3 ]\n  then\n    echo \"[\\\"$(($1\
    \ + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n  else\n    echo \"[\\\"$(($1 + $3))\\\"\
    , \\\"0\\\"]\"\n  fi", "  # Write your code here\n  # $1 is an integer\n  # $2\
    \ is an integer\n  # $3 is an integer\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "    # your\
    \ code here\n    if [ $2 -le $3 ]; then\n        echo \"[\\\"$(($1 + $2))\\\"\
    , \\\"$(($3 - $2))\\\"]\"\n    else\n        echo \"[\\\"$(($1 + $3))\\\", \\\"\
    0\\\"]\"\n    fi", "  # your code here\n  number=$1\n  need=$2\n  remaining=$3\n\
    \  total=$(($number+$need))\n  if [ $total -gt $remaining ]; then\n    echo \"\
    [\\\"$remaining\\\", \\\"0\\\"]\"\n  else\n    echo \"[\\\"$total\\\", \\\"$(($remaining-$total))\\\
    \"]\"\n  fi", "  # your code here\n  if [ \"$1\" -ge 0 ] && [ \"$1\" -le 1000\
    \ ] && [ \"$2\" -ge 0 ] && [ \"$2\" -le 1000 ] && [ \"$3\" -ge 0 ] && [ \"$3\"\
    \ -le 1000 ]; then\n    if [ \"$2\" -le \"$3\" ]; then\n      echo \"[\\\"$(($1\
    \ + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n    else\n      echo \"[\\\"$(($1 + $3))\\\
    \", \\\"0\\\"]\"\n    fi\n  fi", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    echo \"Hello world\"", "  if [ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge\
    \ 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]; then\n    if [ $3\
    \ -ge $2 ]; then\n      echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n\
    \    else\n      echo \"[\\\"$(($1 + $3))\\\", \\\"0\\\"]\"\n    fi\n  else\n\
    \    echo \"Error\"\n  fi", "  # your code here\n  if [ $1 -ge 0 ] && [ $1 -le\
    \ 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]\n\
    \  then\n    if [ $1 -le $3 ]\n    then\n      if [ $2 -le $3 ]\n      then\n\
    \        if [ $1 -le $2 ]\n        then\n          echo \"[\\\"$(($1+$2))\\\"\
    , \\\"$(($3-$2))\\\"]\"\n        else\n          echo \"[\\\"$(($1+$2))\\\", \\\
    \"$(($3-$1))\\\"]\"\n        fi\n      else\n        echo \"[\\\"$(($1+$3))\\\"\
    , \\\"0\\\"]\"\n      fi\n    else\n      echo \"[\\\"$(($2+$3))\\\", \\\"0\\\"\
    ]\"\n    fi\n  else\n    echo \"[\\\"0\\\", \\\"0\\\"]\"\n  fi", "  # Write your\
    \ code here\n  # You can use the echo command to return a string\n  # Example:\n\
    \  # echo \"Hello World!\"\n  # echo \"Hello $1\"\n  # echo \"Hello ${1}\"\n \
    \ # echo \"Hello $2\"\n  # echo \"Hello ${2}\"\n  # echo \"Hello $3\"\n  # echo\
    \ \"Hello ${3}\"\n  # echo \"Hello $4\"\n  # echo \"Hello ${4}\"\n  # echo \"\
    Hello $5\"\n  # echo \"Hello ${5}\"\n  # echo \"Hello $6\"\n  # echo \"Hello ${6}\"\
    \n  # echo \"Hello $7\"\n  # echo \"Hello ${7}\"\n  # echo \"Hello $8\"\n  # echo\
    \ \"Hello ${8}\"\n  # echo \"Hello $9\"\n  # echo \"Hello ${9}\"\n  # echo \"\
    Hello ${10}\"\n  # echo \"Hello ${11}\"\n  # echo \"Hello ${12}\"\n  # echo \"\
    Hello ${13}\"\n  # echo \"Hello ${14}\"\n  # echo \"Hello ${15}\"\n  # echo \"\
    Hello ${16}\"\n  # echo \"Hello ${17}\"\n  # echo \"Hello ${18}\"\n  # echo \"\
    Hello ${19}\"\n  # echo \"Hello ${20}\"\n  # echo \"Hello ${21}\"\n  # echo \"\
    Hello ${22}\"\n  # echo \"Hello ${23}\"\n  # echo \"Hello ${24}\"\n  # echo \"\
    Hello ${25}\"\n  # echo \"Hello ${26}\"\n  # echo \"Hello ${27}\"\n  # echo \"\
    Hello ${28}\"\n  # echo \"Hello ${29}\"\n  # echo \"Hello ${30}\"\n  # echo \"\
    Hello ${31}\"\n  # echo \"Hello ${32}\"\n  # echo \"Hello ${33}\"\n  # echo \"\
    Hello ${34}\"\n  # echo \"Hello ${35}\"\n  # echo \"Hello ${36}\"\n  # echo \"\
    Hello ${37}\"\n  # echo \"Hello ${38}\"\n  # echo \"Hello ${39}\"\n  # echo \"\
    Hello ${40}\"\n  # echo \"Hello ${41}\"\n  # echo \"Hello ${42}\"\n  # echo \"\
    Hello ${43}\"\n  # echo \"Hello ${44}\"\n ", "  if [ $1 -ge 0 ] && [ $1 -le 1000\
    \ ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]; then\n\
    \    if [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -eq 0 ]; then\n      echo \"[\\\"\
    0\\\", \\\"0\\\"]\"\n    elif [ $1 -eq 0 ] && [ $2 -eq 0 ] && [ $3 -ne 0 ]; then\n\
    \      echo \"[\\\"0\\\", \\\"$3\\\"]\"\n    elif [ $1 -eq 0 ] && [ $2 -ne 0 ]\
    \ && [ $3 -eq 0 ]; then\n      echo \"[\\\"0\\\", \\\"0\\\"]\"\n    elif [ $1\
    \ -eq 0 ] && [ $2 -ne 0 ] && [ $3 -ne 0 ]; then\n      if [ $2 -le $3 ]; then\n\
    \        echo \"[\\\"$2\\\", \\\"$(($3 - $2))\\\"]\"\n      else\n        echo\
    \ \"[\\\"$3\\\", \\\"0\\\"]\"\n      fi\n    elif [ $1 -ne 0 ] && [ $2 -eq 0 ]\
    \ && [ $3 -eq 0 ]; then\n      echo \"[\\\"$1\\\", \\\"0\\\"]\"\n    elif [ $1\
    \ -ne 0 ] && [ $2 -eq 0 ] && [ $3 -ne 0 ]; then\n      echo \"[\\\"$1\\\", \\\"\
    $3\\\"]\"\n    elif [ $1 -ne 0 ] && [ $2 -ne 0 ] && [ $3 -eq 0 ]; then\n     \
    \ echo \"[\\\"$1\\\", \\\"0\\\"]\"\n    elif [ $1 -ne 0 ] && [ $2 -ne 0 ] && [\
    \ $3 -ne 0 ]; then\n      if [ $2 -le $3 ]; then\n        echo \"[\\\"$(($1 +\
    \ $2))\\\", \\\"$(($3 - $2))\\\"]\"\n      else\n        echo \"[\\\"$(($1 + $3))\\\
    \", \\\"0\\\"]\"\n      fi\n    fi\n  else\n    echo \"Error\"\n  fi", "  local\
    \ number=$1\n  local need=$2\n  local remaining=$3\n  local total=$((number +\
    \ need))\n  local left=$((remaining - need))\n  if [ $left -lt 0 ]; then\n   \
    \ left=0\n  fi\n  echo \"[\\\"$total\\\", \\\"$left\\\"]\"", "  if [ $1 -lt 0\
    \ ] || [ $1 -gt 1000 ] || [ $2 -lt 0 ] || [ $2 -gt 1000 ] || [ $3 -lt 0 ] || [\
    \ $3 -gt 1000 ]; then\n    echo \"Error: invalid input\"\n    return 1\n  fi\n\
    \  if [ $2 -gt $3 ]; then\n    echo \"[\\\"$3\\\", \\\"0\\\"]\"\n    return 0\n\
    \  fi\n  echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n  return 0", " \
    \ number=$1\n  need=$2\n  remaining=$3\n  if [ $remaining -lt $need ]; then\n\
    \    echo \"[\\\"$((number + remaining))\\\", \\\"0\\\"]\"\n  else\n    echo \"\
    [\\\"$((number + need))\\\", \\\"$((remaining - need))\\\"]\"\n  fi", "  if [\
    \ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge\
    \ 0 ] && [ $3 -le 1000 ]; then\n    if [ $3 -ge $2 ]; then\n      echo \"[\\\"\
    $(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n    else\n      echo \"[\\\"$(($1 +\
    \ $3))\\\", \\\"0\\\"]\"\n    fi\n  else\n    echo \"Error: invalid input\"\n\
    \  fi", "  if [ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000\
    \ ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]; then\n    if [ $2 -le $3 ]; then\n   \
    \   echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"\n    else\n      echo\
    \ \"[\\\"$(($1 + $3))\\\", \\\"0\\\"]\"\n    fi\n  else\n    echo \"Error: invalid\
    \ input\"\n  fi", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local total=$((number + need))\n  local left=$((remaining - need))\n  if [\
    \ $left -lt 0 ]; then\n    left=0\n  fi\n  echo \"[\\\"$total\\\", \\\"$left\\\
    \"]\"", "  if [ $2 -le $3 ]; then\n    echo \"[\\\"$(( $1 + $2 ))\\\", \\\"$((\
    \ $3 - $2 ))\\\"]\"\n  else\n    echo \"[\\\"$(( $1 + $3 ))\\\", \\\"0\\\"]\"\n\
    \  fi", "  number=$1\n  need=$2\n  remaining=$3\n  if [ $need -gt $remaining ];\
    \ then\n    echo \"[\\\"$(($number + $remaining))\\\", \\\"0\\\"]\"\n  else\n\
    \    echo \"[\\\"$(($number + $need))\\\", \\\"$(($remaining - $need))\\\"]\"\n\
    \  fi", "  number=$1\n  need=$2\n  remaining=$3\n  if [ $remaining -lt $need ];\
    \ then\n    echo \"[\\\"$(($number + $remaining))\\\", \\\"0\\\"]\"\n  else\n\
    \    echo \"[\\\"$(($number + $need))\\\", \\\"$(($remaining - $need))\\\"]\"\n\
    \  fi"]
stop_tokens:
- "\n}"
