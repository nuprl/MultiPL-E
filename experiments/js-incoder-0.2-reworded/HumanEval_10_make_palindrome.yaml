name: HumanEval_10_make_palindrome
language: js
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"\
  xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\n\
  test();"
completions: ["    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length\
    \ = 0,\n        prefix_reversed = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_length\
    \ = i;\n        }\n    }\n\n    for(var i = 0; i < string.length; i++){\n    \
    \    if(string[i] === string[string.length -1 -i]){\n            prefix_reversed\
    \ = string.substr(0, i);\n            prefix_length = i;\n        }\n    }\n\n\
    \    for(var i = 0; i < suffix_length; i++){\n        palindrome += string[suffix_length\
    \ - 1 - i];\n    }\n\n    palindrome += prefix_reversed;\n\n    return palindrome;\n\
    }\n", "    var reversed_string = string.replace(/^.*/,\"\").split(\"\").reverse().join(\"\
    \");\n    return string + reversed_string;\n}\n", "    var palindrome = \"\";\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_reverse\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix = \"\";\n  \
    \  var suffix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var post", "    var reversed_string = string\n\
    \    var palindrome = \"\"\n    var prefix_length = 0\n    var suffix_length =\
    \ 0\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == string[string.length\
    \ - 1 - i]){\n            prefix_length++\n        }else{\n            suffix_length++\n\
    \        }\n    }\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == string[string.length - 1 - i]){\n            reversed_string = reversed_string.substring(0,\
    \ reversed_string.length - 1) + reversed_string.substring(i, i + 1)\n        \
    \    palindrome = palindrome + string[i]\n        }\n    }\n    return palindrome\
    \ + reversed_string\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work. Try `make_palindrome(\"aba\")`\n<|/ c |>\n<| c |>\n\
    It works fine for me. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `make_palindrome(\"aba\")`\n<|/ c |>\n\
    <| c |>\nIt works for me on that link. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| a tags=javascript,algorithm,string |>\n<code>", "    var palindrome\
    \ = \"\",\n        postfix = \"\";\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        postfix += string[i];\n    }\n    \n    postfix = reverse(postfix);\n\
    \    \n    for(var i = 0; i < string.length; i++){\n        palindrome += string[i];\n\
    \    }\n    \n    palindrome += postfix;\n    \n    return palindrome;\n}\n",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    var prefix_postfix_length = 0\n    var suffix_postfix_length\
    \ = 0\n    \n    while(suffix_length < string.length){\n        suffix_length\
    \ = suffix_length + 1 \n        suffix_postfix_length = suffix_length - 1\n  \
    \      \n        while(suffix_postfix_length >= 0){\n            reversed_string\
    \ = reversed_string + string.substring(suffix_postfix_length, suffix_length)\n\
    \            suffix_postfix_length = suffix_postfix_length - 1\n        }\n  \
    \      \n        prefix_length = prefix_length + 1 \n        prefix_postfix_length\
    \ = prefix_length - 1\n        \n        while(prefix_postfix_length >= 0){\n\
    \            reversed_string = reversed_string + string.substring(prefix_postfix_length,\
    \ prefix_length)\n            prefix_postfix_length = prefix_postfix_length -\
    \ 1\n        }\n        \n        if(reversed_string == string){\n           \
    \ palindrome = reversed_string\n            break\n        }\n    }\n    \n  \
    \  return palindrome\n}\n", "    string = string.toLowerCase();\n    var reversed_string\
    \ = \"\";\n    var palindrome = \"\";\n    var prefix_length = 0;\n    var postfix_length\
    \ = 0;\n    var palindrome_index = 0;\n    var prefix_index = 0;\n    var postfix_index\
    \ = 0;\n    var palindrome_length = string.length;\n    for(var i = 0; i < palindrome_length;\
    \ i++){\n        if(string[i] === string[palindrome_index]){\n            palindrome_index++;\n\
    \        }\n        else{\n            postfix_length++;\n            postfix_index++;\n\
    \        }\n    }\n    for(var i = 0; i < palindrome_length; i++){\n        if(string[i]\
    \ === string[palindrome_index]){\n            palindrome_index++;\n        }\n\
    \        else{\n            prefix_length++;\n            prefix_index++;\n  \
    \      }\n    }\n    for(var i = 0; i < palindrome_length; i++){\n        if(string[i]\
    \ === string[palindrome_index]){\n            palindrome_index++;\n        }\n\
    \        else{\n            reversed_string += string[i];\n        }\n    }\n\
    \    for(var i = 0; i < postfix_length; i++){\n        reversed_string += string[postfix_index];\n\
    \        postfix_index++;\n    }\n    for(var i = 0; i < prefix_length; i++){\n\
    \        reversed_string += string[prefix_index];\n        prefix_index++;\n \
    \   }\n    return reversed_string;\n}\n", "    var reversed_string = string\n\
    \    var prefix_length = 0\n    var suffix_length = 0\n    var palindrome = \"\
    \"\n    \n    while(prefix_length < string.length){\n        suffix_length = string.length\
    \ - prefix_length\n        \n        if(suffix_length == 0){\n            palindrome\
    \ = string.substr(prefix_length, string.length)\n            break\n        }\n\
    \        \n        var reverse_suffix_string = string.substr(suffix_length, suffix_length)\n\
    \        \n        if(reverse_suffix_string == string){\n            palindrome\
    \ = string.substr(prefix_length, string.length)\n            \n            reversed_string\
    \ = reversed_string.substr(0, reversed_string.length-1)\n            \n      \
    \      prefix_length += suffix_length\n            suffix_length = 0\n       \
    \     \n            break\n        }\n        \n        prefix_length += suffix_length\n\
    \        suffix_length = 0\n    }\n    \n    return palindrome + reversed_string\n\
    }\n", "    var reversed_string = string.replace(/./g,function(c){\n        return\
    \ c.toUpperCase();\n    }).split(\"\").reverse().join(\"\");\n    return string\
    \ + reversed_string;\n}\n", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        prefix_postfix = \"\",\n        suffix_postfix\
    \ = \"\";\n\n    prefix_length = string.length;\n    suffix_length = string.length;\n\
    \n    prefix_postfix = string.substr(0, prefix_length);\n    suffix_postfix =\
    \ string.substr(prefix_length, string.length);\n\n    while(suffix_length >= prefix_length){\n\
    \        suffix_postfix = string.substr(prefix_length, suffix_length);\n     \
    \   suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, ", "  var palindrome = \"\"\
    ;\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_postfix =\
    \ \"\";\n  var suffix_postfix = \"\";\n  var prefix_reverse = \"\";\n  var suffix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse = \"\";\n  var suffix_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix = \"\";\n  var suffix_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse = \"\";\n  var suffix_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\"\
    ;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n  var\
    \ prefix_postfix_reverse_postfix_reverse_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix =\
    \ \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_",
  "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix = \"\";\n    var prefix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_", " \
    \ var reversed_string = \"\";\n  var longest_postfix_string = \"\";\n  var longest_postfix_string_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix = 0;\n  var longest_postfix_string_length_with_prefix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix = 0;\n\
    \  var longest_postfix_string_length_with_prefix_length_with_suffix_length = 0;\n\
    \  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    \n    while(true){\n        prefix_length\
    \ = string.indexOf(string[prefix_length])\n        suffix_length = string.indexOf(string[suffix_length])\n\
    \        \n        if(prefix_length == -1 || suffix_length == -1){\n         \
    \   break\n        }\n        \n        reversed_string = reversed_string+string[prefix_length]\n\
    \        reversed_string = reversed_string+string[suffix_length]\n        \n \
    \       if(prefix_length < suffix_length){\n            palindrome = palindrome+string[prefix_length]\n\
    \            string = string.substring(0,prefix_length-1)+string[suffix_length]\n\
    \        }\n        else{\n            palindrome = palindrome+string[suffix_length]\n\
    \            string = string.substring(0,suffix_length-1)+string[prefix_length]\n\
    \        }\n    }\n    \n    return palindrome+reversed_string\n}\n", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var prefix_length =\
    \ 0\n    var postfix_length = 0\n    while(postfix_length < string.length){\n\
    \        postfix_length = string.length - postfix_length\n        prefix_length\
    \ = string.length - postfix_length - 1\n        var postfix = string.substr(postfix_length)\n\
    \        var prefix = string.substr(0, prefix_length)\n        if(postfix ===\
    \ reverse(prefix)){\n            palindrome = postfix + palindrome\n        }\n\
    \    }\n    return palindrome\n}\n", "    string = string.toLowerCase();\n   \
    \ var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_index\
    \ = 0;\n    var suffix_postfix_reverse_index = 0;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_post",
  "    var reversed_string = string.replace(/^./g,\"\").split(\"\").reverse().join(\"\
    \");\n    var postfix_length = string.length - reversed_string.length;\n    var\
    \ palindrome = string.substr(0,postfix_length) + reversed_string;\n    return\
    \ palindrome;\n}\n", "  var palindrome = \"\";\n  var prefix_length = 0;\n  var\
    \ suffix_length = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix = \"\"\
    ;\n  var prefix_palindrome = \"\";\n  var suffix_palindrome = \"\";\n  var prefix_reverse\
    \ = \"\";\n  var suffix_reverse = \"\";\n  var prefix_postfix_reverse = \"\";\n\
    \  var suffix_postfix_reverse = \"\";\n  var prefix_palindrome_reverse = \"\"\
    ;\n  var suffix_palindrome_reverse = \"\";\n  var prefix_reverse_postfix = \"\"\
    ;\n  var suffix_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n", "    var reversed_string = string.reverse ? string.reverse() : \"\
    \";\n    var prefix_length = string.length + reversed_string.length;\n    var\
    \ palindrome = string.substr(0, prefix_length);\n    var postfix_length = string.length\
    \ - reversed_string.length;\n    var postfix = string.substr(postfix_length);\n\
    \    return palindrome + postfix.reverse();\n}\n", "  var palindrome = \"\",\n\
    \      postfix = \"\";\n  \n  if(string.length <= 1){\n    return string;\n  }\n\
    \  \n  postfix = string.substr(0, string.length - 1);\n  \n  if(string.substr(0,\
    \ string.length - 1).split(\"\").reverse().join(\"\") === string){\n    palindrome\
    \ = string.substr(0, string.length - 1);\n  }\n  \n  return palindrome + postfix;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
