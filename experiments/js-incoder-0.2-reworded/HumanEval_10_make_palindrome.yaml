name: HumanEval_10_make_palindrome
language: js
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = make_palindrome;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
  x\"),\"x\");\n  assert.deepEqual(candidate(\"xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"\
  xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"jerry\"),\"jerryrrej\");\n}\n\n\
  test();"
completions: ["    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length\
    \ = 0,\n        prefix_reversed = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_length\
    \ = i;\n        }\n    }\n\n    for(var i = 0; i < string.length; i++){\n    \
    \    if(string[i] === string[string.length -1 -i]){\n            prefix_reversed\
    \ = string.substr(0, i);\n            prefix_length = i;\n        }\n    }\n\n\
    \    for(var i = 0; i < suffix_length; i++){\n        palindrome += string[suffix_length\
    \ - 1 - i];\n    }\n\n    palindrome += prefix_reversed;\n\n    return palindrome;\n\
    }\n", "    var reversed_string = string.replace(/^.*/,\"\").split(\"\").reverse().join(\"\
    \");\n    return string + reversed_string;\n}\n", "    var palindrome = \"\";\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_reverse\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix = \"\";\n  \
    \  var suffix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix\
    \ = \"\";\n    var postfix_length = 0;\n    var postfix_reverse = \"\";\n    var\
    \ postfix_postfix = \"\";\n    var postfix_length = 0;\n    var postfix_reverse\
    \ = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length = 0;\n    var\
    \ postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n    var postfix_length\
    \ = 0;\n    var postfix_reverse = \"\";\n    var postfix_postfix = \"\";\n   \
    \ var postfix_length = 0;\n    var post", "    var reversed_string = string\n\
    \    var palindrome = \"\"\n    var prefix_length = 0\n    var suffix_length =\
    \ 0\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == string[string.length\
    \ - 1 - i]){\n            prefix_length++\n        }else{\n            suffix_length++\n\
    \        }\n    }\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == string[string.length - 1 - i]){\n            reversed_string = reversed_string.substring(0,\
    \ reversed_string.length - 1) + reversed_string.substring(i, i + 1)\n        \
    \    palindrome = palindrome + string[i]\n        }\n    }\n    return palindrome\
    \ + reversed_string\n}\n</code>\n<|/ a tags=javascript,algorithm,string |>\n<|\
    \ c |>\nThis doesn't work. Try `make_palindrome(\"aba\")`\n<|/ c |>\n<| c |>\n\
    It works fine for me. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `make_palindrome(\"aba\")`\n<|/ c |>\n\
    <| c |>\nIt works for me on that link. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| c |>\nIt works for me too. Try it out yourself here: https://jsfiddle.net/6g7hq3uy/\n\
    <|/ c |>\n<| a tags=javascript,algorithm,string |>\n<code>", "    var palindrome\
    \ = \"\",\n        postfix = \"\";\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        postfix += string[i];\n    }\n    \n    postfix = reverse(postfix);\n\
    \    \n    for(var i = 0; i < string.length; i++){\n        palindrome += string[i];\n\
    \    }\n    \n    palindrome += postfix;\n    \n    return palindrome;\n}\n",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    var prefix_postfix_length = 0\n    var suffix_postfix_length\
    \ = 0\n    \n    while(suffix_length < string.length){\n        suffix_length\
    \ = suffix_length + 1 \n        suffix_postfix_length = suffix_length - 1\n  \
    \      \n        while(suffix_postfix_length >= 0){\n            reversed_string\
    \ = reversed_string + string.substring(suffix_postfix_length, suffix_length)\n\
    \            suffix_postfix_length = suffix_postfix_length - 1\n        }\n  \
    \      \n        prefix_length = prefix_length + 1 \n        prefix_postfix_length\
    \ = prefix_length - 1\n        \n        while(prefix_postfix_length >= 0){\n\
    \            reversed_string = reversed_string + string.substring(prefix_postfix_length,\
    \ prefix_length)\n            prefix_postfix_length = prefix_postfix_length -\
    \ 1\n        }\n        \n        if(reversed_string == string){\n           \
    \ palindrome = reversed_string\n            break\n        }\n    }\n    \n  \
    \  return palindrome\n}\n", "    string = string.toLowerCase();\n    var reversed_string\
    \ = \"\";\n    var palindrome = \"\";\n    var prefix_length = 0;\n    var postfix_length\
    \ = 0;\n    var palindrome_index = 0;\n    var prefix_index = 0;\n    var postfix_index\
    \ = 0;\n    var palindrome_length = string.length;\n    for(var i = 0; i < palindrome_length;\
    \ i++){\n        if(string[i] === string[palindrome_index]){\n            palindrome_index++;\n\
    \        }\n        else{\n            postfix_length++;\n            postfix_index++;\n\
    \        }\n    }\n    for(var i = 0; i < palindrome_length; i++){\n        if(string[i]\
    \ === string[palindrome_index]){\n            palindrome_index++;\n        }\n\
    \        else{\n            prefix_length++;\n            prefix_index++;\n  \
    \      }\n    }\n    for(var i = 0; i < palindrome_length; i++){\n        if(string[i]\
    \ === string[palindrome_index]){\n            palindrome_index++;\n        }\n\
    \        else{\n            reversed_string += string[i];\n        }\n    }\n\
    \    for(var i = 0; i < postfix_length; i++){\n        reversed_string += string[postfix_index];\n\
    \        postfix_index++;\n    }\n    for(var i = 0; i < prefix_length; i++){\n\
    \        reversed_string += string[prefix_index];\n        prefix_index++;\n \
    \   }\n    return reversed_string;\n}\n", "    var reversed_string = string\n\
    \    var prefix_length = 0\n    var suffix_length = 0\n    var palindrome = \"\
    \"\n    \n    while(prefix_length < string.length){\n        suffix_length = string.length\
    \ - prefix_length\n        \n        if(suffix_length == 0){\n            palindrome\
    \ = string.substr(prefix_length, string.length)\n            break\n        }\n\
    \        \n        var reverse_suffix_string = string.substr(suffix_length, suffix_length)\n\
    \        \n        if(reverse_suffix_string == string){\n            palindrome\
    \ = string.substr(prefix_length, string.length)\n            \n            reversed_string\
    \ = reversed_string.substr(0, reversed_string.length-1)\n            \n      \
    \      prefix_length += suffix_length\n            suffix_length = 0\n       \
    \     \n            break\n        }\n        \n        prefix_length += suffix_length\n\
    \        suffix_length = 0\n    }\n    \n    return palindrome + reversed_string\n\
    }\n", "    var reversed_string = string.replace(/./g,function(c){\n        return\
    \ c.toUpperCase();\n    }).split(\"\").reverse().join(\"\");\n    return string\
    \ + reversed_string;\n}\n", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        prefix_postfix = \"\",\n        suffix_postfix\
    \ = \"\";\n\n    prefix_length = string.length;\n    suffix_length = string.length;\n\
    \n    prefix_postfix = string.substr(0, prefix_length);\n    suffix_postfix =\
    \ string.substr(prefix_length, string.length);\n\n    while(suffix_length >= prefix_length){\n\
    \        suffix_postfix = string.substr(prefix_length, suffix_length);\n     \
    \   suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, prefix_length);\n        suffix_postfix\
    \ = suffix_postfix.substr(0, suffix_length);\n    }\n\n    while(suffix_length\
    \ >= prefix_length){\n        suffix_postfix = string.substr(prefix_length, suffix_length);\n\
    \        suffix_length = suffix_postfix.length;\n        prefix_length = prefix_postfix.length;\n\
    \        prefix_postfix = prefix_postfix.substr(0, ", "  var palindrome = \"\"\
    ;\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_postfix =\
    \ \"\";\n  var suffix_postfix = \"\";\n  var prefix_reverse = \"\";\n  var suffix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse = \"\";\n  var suffix_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix = \"\";\n  var suffix_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse = \"\";\n  var suffix_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\"\
    ;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n  var\
    \ prefix_postfix_reverse_postfix_reverse_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix =\
    \ \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_",
  "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix = \"\";\n    var prefix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_", " \
    \ var reversed_string = \"\";\n  var longest_postfix_string = \"\";\n  var longest_postfix_string_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix = 0;\n  var longest_postfix_string_length_with_prefix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix = 0;\n\
    \  var longest_postfix_string_length_with_prefix_length_with_suffix_length = 0;\n\
    \  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix\
    \ = 0;\n  var longest_postfix_string_length_with_prefix_length_with_suffix_length_with_suffix_length_with_suffix_length_with_suffix_length_",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    \n    while(true){\n        prefix_length\
    \ = string.indexOf(string[prefix_length])\n        suffix_length = string.indexOf(string[suffix_length])\n\
    \        \n        if(prefix_length == -1 || suffix_length == -1){\n         \
    \   break\n        }\n        \n        reversed_string = reversed_string+string[prefix_length]\n\
    \        reversed_string = reversed_string+string[suffix_length]\n        \n \
    \       if(prefix_length < suffix_length){\n            palindrome = palindrome+string[prefix_length]\n\
    \            string = string.substring(0,prefix_length-1)+string[suffix_length]\n\
    \        }\n        else{\n            palindrome = palindrome+string[suffix_length]\n\
    \            string = string.substring(0,suffix_length-1)+string[prefix_length]\n\
    \        }\n    }\n    \n    return palindrome+reversed_string\n}\n", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var prefix_length =\
    \ 0\n    var postfix_length = 0\n    while(postfix_length < string.length){\n\
    \        postfix_length = string.length - postfix_length\n        prefix_length\
    \ = string.length - postfix_length - 1\n        var postfix = string.substr(postfix_length)\n\
    \        var prefix = string.substr(0, prefix_length)\n        if(postfix ===\
    \ reverse(prefix)){\n            palindrome = postfix + palindrome\n        }\n\
    \    }\n    return palindrome\n}\n", "    string = string.toLowerCase();\n   \
    \ var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length =\
    \ 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_index\
    \ = 0;\n    var suffix_postfix_reverse_index = 0;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_postfix_reverse_length\
    \ = string.length;\n    var prefix_postfix_reverse_length = string.length;\n \
    \   var suffix_postfix_reverse_length = string.length;\n    var prefix_postfix_reverse_length\
    \ = string.length;\n    var suffix_postfix_reverse_length = string.length;\n \
    \   var prefix_postfix_reverse_length = string.length;\n    var suffix_post",
  "    var reversed_string = string.replace(/^./g,\"\").split(\"\").reverse().join(\"\
    \");\n    var postfix_length = string.length - reversed_string.length;\n    var\
    \ palindrome = string.substr(0,postfix_length) + reversed_string;\n    return\
    \ palindrome;\n}\n", "  var palindrome = \"\";\n  var prefix_length = 0;\n  var\
    \ suffix_length = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix = \"\"\
    ;\n  var prefix_palindrome = \"\";\n  var suffix_palindrome = \"\";\n  var prefix_reverse\
    \ = \"\";\n  var suffix_reverse = \"\";\n  var prefix_postfix_reverse = \"\";\n\
    \  var suffix_postfix_reverse = \"\";\n  var prefix_palindrome_reverse = \"\"\
    ;\n  var suffix_palindrome_reverse = \"\";\n  var prefix_reverse_postfix = \"\"\
    ;\n  var suffix_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n  var suffix_reverse_postfix_reverse = \"\";\n  var prefix_postfix_reverse_postfix\
    \ = \"\";\n  var suffix_postfix_reverse_postfix = \"\";\n  var prefix_palindrome_reverse_postfix\
    \ = \"\";\n  var suffix_palindrome_reverse_postfix = \"\";\n  var prefix_reverse_postfix_reverse\
    \ = \"\";\n", "    var reversed_string = string.reverse ? string.reverse() : \"\
    \";\n    var prefix_length = string.length + reversed_string.length;\n    var\
    \ palindrome = string.substr(0, prefix_length);\n    var postfix_length = string.length\
    \ - reversed_string.length;\n    var postfix = string.substr(postfix_length);\n\
    \    return palindrome + postfix.reverse();\n}\n", "  var palindrome = \"\",\n\
    \      postfix = \"\";\n  \n  if(string.length <= 1){\n    return string;\n  }\n\
    \  \n  postfix = string.substr(0, string.length - 1);\n  \n  if(string.substr(0,\
    \ string.length - 1).split(\"\").reverse().join(\"\") === string){\n    palindrome\
    \ = string.substr(0, string.length - 1);\n  }\n  \n  return palindrome + postfix;\n\
    }\n", "    string = string.toLowerCase();\n    var longestPalindrome = find_longest_palindrome(string);\n\
    \    var reversedString = reverseString(string, longestPalindrome);\n    return\
    \ reversedString + longestPalindrome;\n}\n", "    var reversed_string = string\n\
    \    var prefix_length = 0\n    var postfix_length = 0\n    var palindrome = \"\
    \"\n    while(prefix_length < string.length){\n        postfix_length = 0\n  \
    \      while(postfix_length < string.length){\n            reversed_string = reversed_string+string.charAt(postfix_length)\n\
    \            postfix_length++\n        }\n        prefix_length++\n        while(postfix_length\
    \ < string.length){\n            reversed_string = reversed_string+string.charAt(postfix_length)\n\
    \            postfix_length++\n        }\n        palindrome = palindrome+reversed_string\n\
    \        reversed_string = \"\"\n    }\n    return palindrome\n}\n", "  var palindrome\
    \ = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_postfix\
    \ = \"\";\n  var suffix_postfix = \"\";\n  var prefix_postfix_length = 0;\n  var\
    \ suffix_postfix_length = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var\
    \ string_palindrome = \"\";\n  var string_palindrome_length = 0;\n  var string_length\
    \ = string.length;\n  var string_length_length = string_length.length;\n  var\
    \ string_length_length_length = string_length_length.length;\n  var string_length_length_length_length\
    \ = string_length_length_length.length;\n  var string_length_length_length_length_length\
    \ = string_length_length_length_length.length;\n  var string_length_length_length_length_length_length\
    \ = string_length_length_length_length_length.length;\n  var string_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length.length;\n  var string_length_length_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length_length_length_length.length;\n\
    \  var string_length_length_length_length_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length_length_length_length_length_length.length;\n\
    \  var string_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length_length_length_length_length_length_length_length.length;\n\
    \  var string_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.length;\n\
    \  var string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.length;\n\
    \  var string_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_",
  "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == string[string.length - 1 - i]){\n            prefix_length++\n\
    \        }\n        else{\n            suffix_length++\n        }\n    }\n   \
    \ if(prefix_length >= suffix_length){\n        for(var i = 0; i < suffix_length;\
    \ i++){\n            reversed_string = reversed_string + string[prefix_length\
    \ - 1 - i]\n        }\n        palindrome = reversed_string\n    }\n    else{\n\
    \        for(var i = 0; i < prefix_length; i++){\n            reversed_string\
    \ = reversed_string + string[i]\n        }\n        palindrome = reversed_string\
    \ + string[prefix_length - 1 - suffix_length]\n    }\n    return palindrome\n\
    }\n", "    var reversed_string = \"\";\n    var longest_postfix_string = \"\"\
    ;\n    var longest_postfix_length = 0;\n    var longest_postfix_index = 0;\n \
    \   var longest_postfix_length_index = 0;\n    var longest_postfix_string_index\
    \ = 0;\n    \n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length - 1 - i]){\n            reversed_string += string[i];\n\
    \            longest_postfix_length++;\n            longest_postfix_index++;\n\
    \        }\n        else{\n            if(longest_postfix_length > longest_postfix_length_index){\n\
    \                longest_postfix_length = longest_postfix_length_index;\n    \
    \            longest_postfix_string = longest_postfix_string_index;\n        \
    \    }\n            reversed_string += string[i];\n            longest_postfix_length_index++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < longest_postfix_length; i++){\n\
    \        longest_postfix_string_index = reversed_string.indexOf(longest_postfix_string);\n\
    \        longest_postfix_string += string[longest_postfix_string_index];\n   \
    \ }\n    \n    return longest_postfix_string;\n}\n", "    var reversed = \"\"\
    ;\n    var longest = \"\";\n    for(var i = 0; i < string.length; i++){\n    \
    \    var character = string[i];\n        var reversed_character = string[string.length\
    \ - 1 - i];\n        if(character == reversed_character){\n            longest\
    \ = longest.substring(0, longest.length - 1) + character;\n        }\n       \
    \ else{\n            longest = longest + character;\n        }\n    }\n    longest\
    \ = longest + reversed;\n    return longest;\n}\n", "    var reversed_string =\
    \ string.replace(/[^a-zA-Z0-9]/g, \"\").split(\"\").reverse().join(\"\");\n  \
    \  var palindrome = string + reversed_string;\n    return palindrome;\n}\n", " \
    \ var palindrome = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n\
    \  var prefix_string = \"\";\n  var suffix_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n  var palindrome_prefix_string = \"\";\n  var palindrome_suffix_string =\
    \ \"\";\n  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length =\
    \ 0;\n", "    var palindrome = string;\n    var palindrome_length = string.length;\n\
    \    var palindrome_postfix = \"\";\n    var palindrome_prefix_length = string.length\
    \ - 1;\n    var palindrome_prefix_postfix = \"\";\n    var palindrome_prefix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix = \"\";\n  \
    \  var palindrome_prefix_postfix_postfix_length = string.length - 1;\n    var\
    \ palindrome_prefix_postfix_postfix_postfix = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_length =\
    \ string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_post", "   \
    \ var postfix = string.substring(0,string.length-1);\n    var reverse = postfix.split(\"\
    \").reverse().join(\"\");\n    return string + reverse + postfix;\n}\n", "  var\
    \ postfix = string.split(\"\").reverse().join(\"\");\n  var palindrome = string.split(\"\
    \").reverse().join(\"\") + postfix;\n  return palindrome;\n}\n", "  if(string\
    \ == \"\") return \"\";\n  var palindrome = string;\n  var postfix = \"\";\n \
    \ var reverse = \"\";\n  var longest = 0;\n  for(var i = 0; i < string.length;\
    \ i++){\n    if(string[i] == string[string.length -1 -i]){\n      postfix += string[i];\n\
    \      reverse = reverse + string[string.length -1 -i];\n      if(postfix.length\
    \ > longest){\n        longest = postfix.length;\n        palindrome = postfix.substr(0,\
    \ longest);\n      }\n    }\n  }\n  return palindrome + reverse;\n}\n", "  var\
    \ palindrome = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var\
    \ prefix_postfix = \"\";\n  var suffix_postfix = \"\";\n  var suffix_reverse =\
    \ \"\";\n  var prefix_reverse = \"\";\n  var suffix_reverse_length = string.length\
    \ - suffix_length;\n  var prefix_reverse_length = string.length - prefix_length;\n\
    \  var prefix_postfix_length = string.length - prefix_length - suffix_length;\n\
    \  var suffix_postfix_length = string.length - suffix_length - prefix_length;\n\
    \  var prefix_postfix_postfix = \"\";\n  var suffix_postfix_postfix = \"\";\n\
    \  var suffix_postfix_reverse = \"\";\n  var prefix_postfix_reverse = \"\";\n\
    \  var suffix_postfix_reverse_length = string.length - suffix_length - prefix_length;\n\
    \  var prefix_postfix_reverse_length = string.length - prefix_length - suffix_length;\n\
    \  var prefix_postfix_postfix_length = string.length - prefix_length - suffix_length\
    \ - prefix_postfix_length;\n  var suffix_postfix_postfix_length = string.length\
    \ - suffix_length - prefix_length - suffix_postfix_length;\n  var prefix_postfix_postfix_postfix\
    \ = \"\";\n  var suffix_postfix_postfix_postfix = \"\";\n  var suffix_postfix_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_postfix_reverse = \"\";\n  var suffix_postfix_postfix_reverse_length\
    \ = string.length - suffix_length - prefix_length - suffix_postfix_length;\n \
    \ var prefix_postfix_postfix_reverse_length = string.length - prefix_length -\
    \ suffix_length - prefix_postfix_length;\n  var prefix_postfix_postfix_postfix_length\
    \ = string.length - prefix_length - suffix_length - prefix_postfix_length - suffix_postfix_length;\n\
    \  var suffix_postfix_postfix_postfix_length = string.length - suffix_length -\
    \ prefix_length - suffix_postfix_length - prefix_postfix_postfix_length;\n  var\
    \ prefix_postfix_postfix_postfix_postfix = \"\";\n  var suffix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var suffix_postfix_postfix_postfix_reverse = \"\";\n  var prefix_postfix_postfix_postfix_reverse\
    \ = \"\";\n  var suffix_postfix_postfix_postfix_reverse_length = string.length\
    \ - suffix_length - prefix_length - suffix_postfix_length - prefix_postfix_postfix_length;\n\
    \  var prefix_postfix_postfix_postfix_reverse_length = string.length - prefix_length\
    \ - suffix_length - prefix_postfix_length - suffix_postfix_postfix_length;\n \
    \ var prefix_postfix_postfix_postfix_postfix_length = string.length - prefix_length\
    \ - suffix_length - prefix_postfix_length - suffix_postfix_postfix_length - prefix_postfix_postfix_postfix_length;\n\
    \  var suffix_postfix_postfix_postfix_postfix_length = string.length - suffix_length\
    \ - prefix_length - suffix_postfix_length - prefix_postfix_postfix_length - suffix_",
  "    var palindrome = string;\n    var palindrome_length = string.length;\n    var\
    \ reverse_string = \"\";\n    var reverse_string_length = 0;\n    var prefix_length\
    \ = 0;\n    var prefix_string = \"\";\n    var prefix_string_length = 0;\n   \
    \ \n    while(palindrome_length >= 0){\n        prefix_length = palindrome_length\
    \ + 1;\n        prefix_string = palindrome.substr(0,prefix_length);\n        prefix_string_length\
    \ = prefix_string.length;\n        reverse_string_length = prefix_string_length\
    \ - 1;\n        reverse_string = palindrome.substr(prefix_string_length-1,reverse_string_length);\n\
    \        palindrome = palindrome.substr(prefix_length);\n        palindrome_length\
    \ = palindrome.length;\n    }\n    \n    return palindrome + reverse_string;\n\
    }\n", "    let longestPalindrome = longestPalindromeFrom(string);\n    let reversedString\
    \ = reverseString(longestPalindrome);\n    return string + reversedString;\n}\n",
  "    let reverse = string.reverse ? string.reverse() : \"\";\n    let prefix = string.substr(0,\
    \ string.length - reverse.length);\n    let postfix = string.substr(string.length\
    \ - reverse.length);\n    return prefix + reverse + postfix;\n}\n", "    string\
    \ = string.toLowerCase();\n    var palindrome = \"\";\n    var prefix_length =\
    \ 0;\n    var suffix_length = 0;\n    var prefix_reverse = \"\";\n    var suffix_reverse\
    \ = \"\";\n    var palindrome_reverse = \"\";\n    var palindrome_length = string.length;\n\
    \    var palindrome_length_half = palindrome_length / 2;\n    var palindrome_length_half_string\
    \ = palindrome_length_half.toString();\n    var palindrome_length_half_string_length\
    \ = palindrome_length_half_string.length;\n    var palindrome_length_half_string_length_half\
    \ = palindrome_length_half_string_length / 2;\n    var palindrome_length_half_string_length_half_string\
    \ = palindrome_length_half_string_length_half.toString();\n    var palindrome_length_half_string_length_half_string_length\
    \ = palindrome_length_half_string_length_half_string.length;\n    var palindrome_length_half_string_length_half_string_length_half\
    \ = palindrome_length_half_string_length_half_string_length / 2;\n    var palindrome_length_half_string_length_half_string_length_half_string\
    \ = palindrome_length_half_string_length_half_string_length_half.toString();\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length\
    \ = palindrome_length_half_string_length_half_string_length_half.toString();\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half\
    \ = palindrome_length_half_string_length_half_string_length_half_string.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string\
    \ = palindrome_length_half_string_length_half_string_length_half_string.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length\
    \ = palindrome_length_half_string_length_half_string_length_half_string.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length_half\
    \ = palindrome_length_half_string_length_half_string_length_half_string_length_half.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length_half\
    \ = palindrome_length_half_string_length_half_string_length_half_string_length_half.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length_half_string_length\
    \ = palindrome_length_half_string_length_half_string_length_half_string_length_half_string.length;\n\
    \    var palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length_half_string_length_half\
    \ = palindrome_length_half_string_length_half_string_length_half_string_length_half_string_length_half.length;\n\
    \    var palindro", "  var postfix = string.substr(0, string.length-1);\n  var\
    \ reverse = postfix.split(\"\").reverse().join(\"\");\n  return string + reverse\
    \ + postfix;\n}\n", "    var palindrome = string;\n    var reversed_palindrome\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    \n    while(true){\n\
    \        var postfix_length = palindrome.length;\n        var reversed_postfix_length\
    \ = postfix_length;\n        \n        while(true){\n            reversed_postfix_length\
    \ = reversed_postfix_length * 10;\n            reversed_postfix_length = reversed_postfix_length\
    \ + palindrome.charAt(postfix_length-1);\n            postfix_length--;\n    \
    \        \n            if(postfix_length == 0){\n                break;\n    \
    \        }\n        }\n        \n        if(reversed_postfix_length == postfix_length){\n\
    \            break;\n        }\n        \n        var reversed_palindrome_prefix\
    \ = palindrome.substr(0, reversed_postfix_length);\n        var reversed_palindrome_suffix\
    \ = palindrome.substr(reversed_postfix_length);\n        \n        palindrome\
    \ = reversed_palindrome_prefix + reversed_palindrome_suffix;\n        prefix_length\
    \ = reversed_postfix_length;\n        suffix_length = postfix_length;\n    }\n\
    \    \n    return palindrome;\n}\n", "    var postfix = string.substr(0, string.length-1);\n\
    \    var reverse = postfix.split('').reverse().join('');\n    return string +\
    \ reverse + postfix;\n}\n", "    var palindrome = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_suffix = \"\";\n    var palindrome_prefix = \"\";\n\
    \    var palindrome_prefix_length = 0;\n    var palindrome_prefix_suffix = \"\"\
    ;\n    var palindrome_prefix_suffix_length = 0;\n    var palindrome_prefix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_length = 0;\n    var palindrome_prefix_suffix_reverse_index\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string = \"\";\n    var palindrome_prefix_suffix_reverse_string_length\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_index = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_length = 0;\n\
    \    var palindrome_prefix_suffix_reverse_string_prefix_suffix = \"\";\n    var\
    \ palindrome_prefix_suffix_reverse_string_prefix_suffix_length = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_index\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_length\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_index\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_length\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_length\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_index\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_string\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_string_length\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_string_index\
    \ = 0;\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix\
    \ = \"\";\n    var palindrome_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_suffix_reverse_string_prefix_length\
    \ = 0;\n    var ", "    var palindrome = \"\",\n        prefix_length = string.length,\n\
    \        suffix_length = string.length - prefix_length,\n        prefix_postfix\
    \ = string.substr(0, prefix_length),\n        suffix_postfix = string.substr(prefix_length,\
    \ suffix_length);\n\n    for(var i = 0; i < suffix_length; i++){\n        var\
    \ character = string.substr(i, 1);\n        if(character !== suffix_postfix[i]){\n\
    \            palindrome += character;\n        }\n    }\n\n    for(var i = 0;\
    \ i < prefix_length; i++){\n        var character = string.substr(i, 1);\n   \
    \     if(character !== prefix_postfix[i]){\n            palindrome += character;\n\
    \        }\n    }\n\n    return palindrome;\n}\n", "    var postfix = string.substr(0,\
    \ string.length-1);\n    var reversed_postfix = reverse(postfix);\n    return\
    \ string + reversed_postfix;\n}\n", "  var palindrome = string;\n  var postfix\
    \ = \"\";\n  var reverse = \"\";\n  var i = 0;\n  var j = 0;\n  var len = string.length;\n\
    \  while(i < len){\n    postfix = string.substr(i,1);\n    reverse = reverse+postfix;\n\
    \    i++;\n  }\n  while(j<len){\n    postfix = string.substr(j,1);\n    if(postfix\
    \ == reverse){\n      palindrome = palindrome+postfix;\n      j++;\n    }\n  \
    \  else{\n      j++;\n    }\n  }\n  return palindrome;\n}\n", "    var reversed_string\
    \ = string\n    var palindrome = \"\"\n    var longest_postfix_length = 0\n  \
    \  var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ - 1 - i]){\n            longest_postfix_string = string.slice(0, i) + string.slice(i\
    \ + 1)\n            longest_postfix_length = i\n            longest_postfix_index\
    \ = i\n        }\n    }\n    for(var i = 0; i < longest_postfix_length; i++){\n\
    \        reversed_string = reversed_string.replace(longest_postfix_string[i],\
    \ longest_postfix_string[longest_postfix_length - 1 - i])\n    }\n    palindrome\
    \ = reversed_string\n    return palindrome\n}\n", "    var reversed_string = string.reverse\
    \ ();\n    var prefix_string = string.slice (0, reversed_string.lastIndexOf (string));\n\
    \    var postfix_string = string.slice (reversed_string.lastIndexOf (string) +\
    \ 1);\n    return prefix_string + postfix_string;\n}\n", "    let longestPalindrome\
    \ = longestPalindromeFrom(string);\n    let reversedString = reverseString(longestPalindrome);\n\
    \    return string + reversedString;\n}\n", "    var palindrome = \"\",\n    \
    \    prefix_length = 0,\n        suffix_length = 0,\n        prefix_postfix =\
    \ \"\",\n        suffix_postfix = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        var char = string.charAt(i);\n        if(char === string.charAt(string.length\
    \ - 1 - i)){\n            suffix_length++;\n            suffix_postfix += char;\n\
    \        }else{\n            prefix_length++;\n            prefix_postfix += char;\n\
    \        }\n    }\n\n    prefix_length = prefix_length - suffix_length;\n    suffix_length\
    \ = suffix_length - prefix_length;\n\n    for(var i = 0; i < prefix_length; i++){\n\
    \        palindrome += string.charAt(i);\n    }\n\n    palindrome += string.charAt(string.length\
    \ - 1 - suffix_length);\n\n    for(var i = 0; i < suffix_length; i++){\n     \
    \   palindrome += string.charAt(string.length - 1 - i);\n    }\n\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ reversed_string = \"\";\n    var palindromic_postfix = \"\";\n    var palindromic_prefix_length\
    \ = 0;\n    var palindromic_suffix_length = 0;\n    var palindromic_prefix_postfix\
    \ = \"\";\n    var palindromic_suffix_postfix = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindromic_suffix_reversed_string = \"\";\n    var palindromic_prefix_reversed_string\
    \ = \"\";\n    var palindro", "  var palindrome = string;\n  var palindrome_length\
    \ = string.length;\n  var palindrome_postfix = \"\";\n  var palindrome_prefix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix = \"\";\n  var palindrome_prefix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_length = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_length = string.length - 1;\n\
    \  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix = \"\";\n  var\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    var reversed_string = string\n    var postfix_length = string.length\n    var\
    \ prefix_length = string.length - postfix_length\n    var prefix_postfix = string.substr(0,\
    \ prefix_length)\n    var postfix_postfix = string.substr(postfix_length, string.length)\n\
    \    var palindrome = prefix_postfix.concat(postfix_postfix).reverse()\n    var\
    \ palindrome_reversed = palindrome.reverse()\n    var palindrome_length = palindrome.length\n\
    \    var palindrome_postfix = palindrome.substr(0, palindrome_length)\n    var\
    \ palindrome_reversed_length = palindrome_reversed.length\n    var palindrome_reversed_postfix\
    \ = palindrome_reversed.substr(0, palindrome_reversed_length)\n    var palindrome_postfix_reversed\
    \ = palindrome_postfix.concat(palindrome_reversed_postfix)\n    var palindrome_reversed_postfix_reversed\
    \ = palindrome_reversed_postfix.reverse()\n    var palindrome_postfix_reversed_length\
    \ = palindrome_postfix_reversed.length\n    var palindrome_postfix_reversed_postfix\
    \ = palindrome_postfix_reversed.substr(0, palindrome_postfix_reversed_length)\n\
    \    var palindrome_postfix_reversed_reversed = palindrome_postfix_reversed_postfix.concat(palindrome_reversed_postfix_reversed)\n\
    \    var palindrome_postfix_reversed_reversed_length = palindrome_postfix_reversed_reversed.length\n\
    \    var palindrome_postfix_reversed_reversed_postfix = palindrome_postfix_reversed_reversed.substr(0,\
    \ palindrome_postfix_reversed_reversed_length)\n    var palindrome_postfix_reversed_reversed_reversed_postfix\
    \ = palindrome_postfix_reversed_reversed_postfix.reverse()\n    var palindrome_postfix_reversed_reversed_reversed_postfix_length\
    \ = palindrome_postfix_reversed_reversed_postfix.length\n    var palindrome_postfix_reversed_reversed_reversed_postfix_postfix\
    \ = palindrome_postfix_reversed_reversed_postfix.substr(0, palindrome_postfix_reversed_reversed_postfix_length)\n\
    \    var palindrome_postfix_reversed_reversed_reversed_postfix_reversed = palindrome_postfix_reversed_reversed_postfix_postfix.concat(palindrome_reversed_postfix_",
  "    var palindrome = \"\";\n    var palindrome_length = string.length + 2;\n  \
    \  var palindrome_prefix = \"\";\n    var palindrome_suffix = \"\";\n    var palindrome_prefix_length\
    \ = string.length - 1;\n    var palindrome_suffix_length = string.length - 1;\n\
    \    var palindrome_prefix_postfix = \"\";\n    var palindrome_suffix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_length = string.length - 1;\n   \
    \ var palindrome_suffix_postfix_length = string.length - 1;\n    var palindrome_prefix_postfix_postfix\
    \ = \"\";\n    var palindrome_suffix_postfix_postfix = \"\";\n    var palindrome_prefix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_suffix_postfix_postfix_length = string.length\
    \ - 1;\n    var palindrome_prefix_postfix_postfix_postfix = \"\";\n    var palindrome_suffix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n    var palindrome_suffix_postfix_postfix_postfix_length = string.length\
    \ - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n  \
    \  var palindrome_suffix_postfix_postfix_postfix_postfix = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_suffix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_suffix_postfix_postfix_postfix_postfix_postfix =\
    \ \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_suffix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_suffix_postfix_postfix_postfix_postfix_postfix =\
    \ \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_suffix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_suffix_postfix_postfix_postfix_postfix_postfix =\
    \ \"\";\n    var palindrome_prefix_", "  var reversed_string = string\n  for(var\
    \ i = string.length - 1; i >= 0; i--){\n    reversed_string = reversed_string+string[i]\n\
    \  }\n  return reversed_string\n}\n", "  var reversed = \"\";\n  var longest =\
    \ \"\";\n  var longestLength = 0;\n  for(var i = 0; i < string.length; i++){\n\
    \    var char = string.charAt(i);\n    if(char === \" \"){\n      reversed = reversed.slice(0,\
    \ reversed.length - 1) + reversed.slice(reversed.length - 1);\n      longest =\
    \ longest.slice(0, longest.length - 1) + longest.slice(longest.length - 1);\n\
    \      longestLength++;\n    }\n    else{\n      if(char === reversed.charAt(reversed.length\
    \ - 1)){\n        reversed = reversed.slice(0, reversed.length - 1) + reversed.slice(reversed.length\
    \ - 1);\n        longest = longest.slice(0, longest.length - 1) + longest.slice(longest.length\
    \ - 1);\n        longestLength++;\n      }\n      else{\n        reversed = reversed.slice(0,\
    \ reversed.length - 1) + char + reversed.slice(reversed.length - 1);\n       \
    \ longest = longest.slice(0, longest.length - 1) + char + longest.slice(longest.length\
    \ - 1);\n        longestLength++;\n      }\n    }\n  }\n  if(longestLength > longest.length){\n\
    \    longest = longest.slice(0, longest.length - longestLength) + reversed;\n\
    \  }\n  return longest;\n}\n", "  var reversed_string = string\n  for(var i =\
    \ 0; i<string.length; i++){\n    reversed_string = reversed_string+string.slice(i,i+1)\n\
    \  }\n  reversed_string = reversed_string+string\n  if(string.length==0){\n  \
    \  return \"\"\n  }\n  if(string.length==1){\n    return string\n  }\n  var palindrome\
    \ = reversed_string\n  for(var i = 0; i<string.length; i++){\n    var index =\
    \ string.indexOf(string[i])\n    if(index<0){\n      break\n    }\n    palindrome\
    \ = palindrome.slice(0,index+1)+string[i]+palindrome.slice(index+1)\n  }\n  return\
    \ palindrome\n}\n", "    var palindrome = \"\",\n        postfix = \"\";\n   \
    \ \n    for(var i = 0; i < string.length; i++){\n        postfix += string[i];\n\
    \    }\n    \n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === postfix[postfix.length - 1 - i]){\n            palindrome += string[i];\n\
    \        }\n    }\n    \n    return palindrome;\n}\n", "  let reverse = string\n\
    \  let longest = string\n  let longestLength = 0\n  for(let i = 0; i < string.length;\
    \ i++){\n    if(string[i] === string[string.length - 1 - i]){\n      longest =\
    \ string.slice(0, i) + string.reverse().slice(i, string.length) + string.slice(i,\
    \ string.length)\n      longestLength = i\n    }\n  }\n  if(longestLength > longest.length){\n\
    \    longest = string.slice(0, longestLength) + string.reverse().slice(longestLength,\
    \ string.length) + string.slice(longestLength, string.length)\n  }\n  return longest\n\
    }\n", "    var reversed_string = \"\";\n    var longest_postfix_string = \"\"\
    ;\n    var longest_postfix_string_length = 0;\n    var longest_postfix_string_length_with_prefix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_length = 0;\n   \
    \ var longest_postfix_string_length_with_prefix_and_suffix = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = \"\";\n    var longest_postfix_string_length_with_prefix_and_suffix_and_suffix_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_", "  var\
    \ longest = find_longest_palindrome(string);\n  var reversed = reverse(string,longest);\n\
    \  return string + reversed;\n}\n", "    var palindrome = \"\";\n    var suffix;\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    for(var i = 0; i\
    \ < string.length; i++){\n        suffix = string.substr(i, string.length);\n\
    \        prefix_length = string.length - suffix.length;\n        suffix_length\
    \ = suffix.length;\n        if(suffix_length == 0){\n            palindrome +=\
    \ string.substr(i, string.length);\n        }\n        else if(suffix_length ==\
    \ 1){\n            palindrome += string.substr(i, string.length - suffix_length);\n\
    \        }\n        else if(suffix_length == string.length){\n            palindrome\
    \ += string.substr(i, string.length - suffix_length) + string.substr(i, string.length\
    \ - suffix_length - 1);\n        }\n        else if(suffix_length < string.length){\n\
    \            palindrome += string.substr(i, string.length - suffix_length) + string.substr(i,\
    \ string.length - suffix_length - 1);\n        }\n    }\n    return palindrome;\n\
    }\n", "  var postfix = string.substr(0, string.length-1);\n  var reverse = string.substr(0,\
    \ string.length-1);\n  var palindrome = postfix + reverse;\n  return palindrome;\n\
    }\n", "  var palindrome = \"\";\n  var prefix_length = 0;\n  var suffix_length\
    \ = 0;\n  var palindrome_length = 0;\n  var prefix_string = \"\";\n  var suffix_string\
    \ = \"\";\n  var palindrome_prefix = \"\";\n  var palindrome_suffix = \"\";\n\
    \  var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palindrome_prefix_length = 0;\n  var palindrome_suffix_length = 0;\n  var\
    \ palindrome_prefix_string = \"\";\n  var palindrome_suffix_string = \"\";\n \
    \ var palin", "  var reversed_string = string\n  var palindrome = \"\"\n  var\
    \ prefix_length = 0\n  var suffix_length = 0\n  \n  while(prefix_length < string.length\
    \ && suffix_length < string.length){\n    var postfix_length = string.length -\
    \ suffix_length\n    var postfix_substring = string.substr(suffix_length, postfix_length)\n\
    \    var postfix_reversed_substring = reversed_string.substr(0, postfix_length)\n\
    \    \n    if(postfix_substring == postfix_reversed_substring){\n      palindrome\
    \ += postfix_substring\n      suffix_length += postfix_length\n    }\n    else\
    \ if(postfix_substring > postfix_reversed_substring){\n      prefix_length +=\
    \ postfix_length\n    }\n    else{\n      reversed_string = string.substr(0, suffix_length)\n\
    \      suffix_length = 0\n    }\n  }\n  \n  return palindrome\n}\n", "    var\
    \ palindrome = \"\",\n        postfix = \"\";\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        postfix = string.substr(0, i) + string.substr(i, string.length);\n\
    \        palindrome = palindrome + postfix;\n    }\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse\
    \ = \"\";\n    var palindromic_suffix = \"\";\n    var palindromic_prefix = \"\
    \";\n    var palindromic_postfix = \"\";\n    var palindromic_prefix_length =\
    \ 0;\n    var palindromic_suffix_length = 0;\n    var palindromic_postfix_length\
    \ = 0;\n    var palindromic_postfix_string = \"\";\n    var palindromic_prefix_string\
    \ = \"\";\n    var palindromic_suffix_string = \"\";\n    var palindromic_postfix_string_reverse\
    \ = \"\";\n    var palindromic_prefix_string_reverse = \"\";\n    var palindromic_suffix_string_reverse\
    \ = \"\";\n    var palindromic_postfix_string_reverse_length = 0;\n    var palindromic_prefix_string_reverse_length\
    \ = 0;\n    var palindromic_suffix_string_reverse_length = 0;\n    var palindromic_postfix_string_reverse_string\
    \ = \"\";\n    var palindromic_prefix_string_reverse_string = \"\";\n    var palindromic_suffix_string_reverse_string\
    \ = \"\";\n    var palindromic_postfix_string_reverse_string_reverse = \"\";\n\
    \    var palindromic_prefix_string_reverse_string_reverse = \"\";\n    var palindromic_suffix_string_reverse_string_reverse\
    \ = \"\";\n    var palindromic_postfix_string_reverse_string_reverse_length =\
    \ 0;\n    var palindromic_prefix_string_reverse_string_reverse_length = 0;\n \
    \   var palindromic_suffix_string_reverse_string_reverse_length = 0;\n    var\
    \ palindromic_postfix_string_reverse_string_reverse_string = \"\";\n    var palindromic_prefix_string_reverse_string_reverse_string\
    \ = \"\";\n    var palindromic_suffix_string_reverse_string_reverse_string = \"\
    \";\n    var palindromic_postfix_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var palindromic_prefix_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var palindromic_suffix_string_reverse_string_reverse_string_reverse\
    \ = \"\";\n    var palindromic_postfix_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var palindromic_prefix_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var palindromic_suffix_string_reverse_string_reverse_string_reverse_length\
    \ = 0;\n    var palin", "  if(string == \"\") return \"\";\n  var reverse = string.reverse();\n\
    \  var prefix = string.substr(0, string.length - reverse.length);\n  var postfix\
    \ = string.substr(string.length - reverse.length);\n  return prefix + reverse\
    \ + postfix;\n}\n", "  if(string === \"\"){\n    return \"\";\n  }\n  var postfix\
    \ = string.substr(0, string.length - 1);\n  var reverse = string.substr(0, string.length\
    \ - 1);\n  var palindrome = string.substr(0, string.length - 1);\n  for(var i\
    \ = string.length - 1; i >= 0; i--){\n    if(string[i] === string[string.length\
    \ - 1 - i]){\n      palindrome += string[i];\n    }\n  }\n  reverse = palindrome\
    \ + reverse;\n  return postfix + reverse;\n}\n", "    var reversed_string = \"\
    \";\n    var postfix_length = string.length;\n    var palindrome = \"\";\n   \
    \ var prefix_length = string.length + postfix_length;\n    for(var i = 0; i <\
    \ prefix_length; i++){\n        reversed_string += string.charAt(i);\n    }\n\
    \    for(var i = 0; i < postfix_length; i++){\n        reversed_string += string.charAt(postfix_length\
    \ - i - 1);\n    }\n    for(var i = 0; i < prefix_length; i++){\n        palindrome\
    \ += string.charAt(i);\n    }\n    for(var i = 0; i < postfix_length; i++){\n\
    \        palindrome += string.charAt(postfix_length - i - 1);\n    }\n    return\
    \ palindrome + reversed_string;\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix\
    \ = \"\";\n    var reverse_prefix_postfix = \"\";\n    var reverse_suffix_postfix\
    \ = \"\";\n    var reverse_prefix_length = 0;\n    var reverse_suffix_length =\
    \ 0;\n    var reverse_prefix_string = \"\";\n    var reverse_suffix_string = \"\
    \";\n    var reverse_prefix_string_index = 0;\n    var reverse_suffix_string_index\
    \ = 0;\n    var reverse_prefix_string_index2 = 0;\n    var reverse_suffix_string_index2\
    \ = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ prefix_string_index = 0;\n    var suffix_string_index = 0;\n    var prefix_string_index2\
    \ = 0;\n    var suffix_string_index2 = 0;\n    var prefix_postfix_string = \"\"\
    ;\n    var suffix_postfix_string = \"\";\n    var prefix_postfix_string_index\
    \ = 0;\n    var suffix_postfix_string_index = 0;\n    var prefix_postfix_string_index2\
    \ = 0;\n    var suffix_postfix_string_index2 = 0;\n    var prefix_length_string\
    \ = \"\";\n    var suffix_length_string = \"\";\n    var prefix_length_string_index\
    \ = 0;\n    var suffix_length_string_index = 0;\n    var prefix_length_string_index2\
    \ = 0;\n    var suffix_length_string_index2 = 0;\n    var prefix_postfix_string_index\
    \ = 0;\n    var suffix_postfix_string_index = 0;\n    var prefix_postfix_string_index2\
    \ = 0;\n    var suffix_postfix_string_index2 = 0;\n    var prefix_length_string_length\
    \ = string.length;\n    var suffix_length_string_length = string.length;\n   \
    \ var prefix_postfix_string_length = string.length;\n    var suffix_postfix_string_length\
    \ = string.length;\n    var prefix_length_string_length2 = string.length;\n  \
    \  var suffix_length_string_length2 = string.length;\n    var prefix_postfix_string_length2\
    \ = string.length;\n    var suffix_postfix_string_length2 = string.length;\n \
    \   var prefix_length_string_length3 = string.length;\n    var suffix_length_string_length3\
    \ = string.length;\n    var prefix_postfix_string_length3 = string.length;\n \
    \   var suffix_postfix_string_length3 = string.length;\n    var prefix_length_string_length4\
    \ = string.length;\n    var suffix_length_string_length4 = string.length;\n  \
    \  var prefix_postfix_string_length4 = string.length;\n    var suffix_postfix_string_length4\
    \ = string.length;\n    var prefix_length_string_length5 = string.length;\n  \
    \  var suffix_length_string_length5 = string.length;\n    var prefix_postfix_string_length5\
    \ = string.length;\n    var suffix_postfix_string_length5 = string.length;\n \
    \   var prefix_length_string_length6 = string.length;\n    var suffix_length_string_length6\
    \ = string.length;\n    var prefix_postfix_string_length6 = string.length;\n \
    \   var suffix_postfix_string_length6 = string.length;\n    var prefix_length_string_length7\
    \ = string", "    var reversed_string = string.replace(/^./g,\"\").split(\"\"\
    ).reverse().join(\"\");\n    return string + reversed_string;\n}\n", "  var palindrome\
    \ = string;\n  var suffix;\n  var prefix;\n  var suffixLength;\n  var prefixLength;\n\
    \  var reversedString;\n  var reversedStringLength;\n  var i;\n  var j;\n  var\
    \ k;\n  var l;\n  var longestPalindrome;\n  var longestPalindromeLength;\n  var\
    \ longestPalindromeIndex;\n  var longestPalindromeLengthIndex;\n  var longestPalindromeLengthIndex2;\n\
    \  var longestPalindromeLengthIndex3;\n  var longestPalindromeLengthIndex4;\n\
    \  var longestPalindromeLengthIndex5;\n  var longestPalindromeLengthIndex6;\n\
    \  var longestPalindromeLengthIndex7;\n  var longestPalindromeLengthIndex8;\n\
    \  var longestPalindromeLengthIndex9;\n  var longestPalindromeLengthIndex10;\n\
    \  var longestPalindromeLengthIndex11;\n  var longestPalindromeLengthIndex12;\n\
    \  var longestPalindromeLengthIndex13;\n  var longestPalindromeLengthIndex14;\n\
    \  var longestPalindromeLengthIndex15;\n  var longestPalindromeLengthIndex16;\n\
    \  var longestPalindromeLengthIndex17;\n  var longestPalindromeLengthIndex18;\n\
    \  var longestPalindromeLengthIndex19;\n  var longestPalindromeLengthIndex20;\n\
    \  var longestPalindromeLengthIndex21;\n  var longestPalindromeLengthIndex22;\n\
    \  var longestPalindromeLengthIndex23;\n  var longestPalindromeLengthIndex24;\n\
    \  var longestPalindromeLengthIndex25;\n  var longestPalindromeLengthIndex26;\n\
    \  var longestPalindromeLengthIndex27;\n  var longestPalindromeLengthIndex28;\n\
    \  var longestPalindromeLengthIndex29;\n  var longestPalindromeLengthIndex30;\n\
    \  var longestPalindromeLengthIndex31;\n  var longestPalindromeLengthIndex32;\n\
    \  var longestPalindromeLengthIndex33;\n  var longestPalindromeLengthIndex34;\n\
    \  var longestPalindromeLengthIndex35;\n  var longestPalindromeLengthIndex36;\n\
    \  var longestPalindromeLengthIndex37;\n  var longestPalindromeLengthIndex38;\n\
    \  var longestPalindromeLengthIndex39;\n  var longestPalindromeLengthIndex40;\n\
    \  var longestPalindromeLengthIndex41;\n  var longestPalindro", "  var palindrome\
    \ = \"\";\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_postfix\
    \ = \"\";\n  var suffix_postfix = \"\";\n  var reverse_prefix_postfix = \"\";\n\
    \  var reverse_suffix_postfix = \"\";\n  var prefix_postfix_reverse = \"\";\n\
    \  var suffix_postfix_reverse = \"\";\n  var reverse_prefix_postfix_reverse =\
    \ \"\";\n  var reverse_suffix_postfix_reverse = \"\";\n  var prefix_postfix_reverse_length\
    \ = 0;\n  var suffix_postfix_reverse_length = 0;\n  var reverse_prefix_postfix_reverse_length\
    \ = 0;\n  var reverse_suffix_postfix_reverse_length = 0;\n  var prefix_postfix_reverse_length_length\
    \ = 0;\n  var suffix_postfix_reverse_length_length = 0;\n  var reverse_prefix_postfix_reverse_length_length\
    \ = 0;\n  var reverse_suffix_postfix_reverse_length_length = 0;\n  var prefix_postfix_reverse_length_length_length\
    \ = 0;\n  var suffix_postfix_reverse_length_length_length = 0;\n  var reverse_prefix_postfix_reverse_length_length_length\
    \ = 0;\n  var reverse_suffix_postfix_reverse_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;\n  var reverse_prefix_postfix_reverse_length_length_length_length = 0;\n\
    \  var reverse_suffix_postfix_reverse_length_length_length_length = 0;\n  var\
    \ prefix_postfix_reverse_length_length_length_length = 0;\n  var suffix_postfix_reverse_length_length_length_length\
    \ = 0;", "    var reversed_string = string\n    var palindrome = \"\"\n    var\
    \ postfix_length = 0\n    var prefix_length = 0\n    while(postfix_length < string.length){\n\
    \        postfix_length = string.length - postfix_length\n        prefix_length\
    \ = string.length - postfix_length\n        while(prefix_length >= 0){\n     \
    \       reversed_string = reversed_string[prefix_length] + reversed_string\n \
    \           prefix_length--\n        }\n        while(postfix_length >= 0){\n\
    \            reversed_string = reversed_string[postfix_length] + reversed_string\n\
    \            postfix_length--\n        }\n        if(reversed_string == string){\n\
    \            palindrome = reversed_string\n            break\n        }\n    }\n\
    \    return palindrome\n}\n", "    var palindrome = string;\n    var reversed_string\
    \ = reverse(string);\n    var prefix_length = string.length - reversed_string.length;\n\
    \    var postfix_length = string.length - prefix_length;\n    var postfix_index\
    \ = string.indexOf(postfix_string);\n    var prefix_index = string.indexOf(prefix_string);\n\
    \    while(postfix_index >= 0){\n        palindrome = string.substring(0, postfix_index)\
    \ + palindrome + string.substring(postfix_index, string.length);\n        reversed_string\
    \ = reverse(string);\n        prefix_length = string.length - reversed_string.length;\n\
    \        postfix_length = string.length - prefix_length;\n        postfix_index\
    \ = string.indexOf(postfix_string);\n        prefix_index = string.indexOf(prefix_string);\n\
    \    }\n    return palindrome;\n}\n", "  var postfix = string.match(/([a-z])/g);\n\
    \  var reverse = string.match(/(.)\\1*/g);\n  var palindrome = string.match(/(.)\\\
    1*/g);\n  var result = \"\";\n  \n  if(postfix){\n    for(var i = 0; i < postfix.length;\
    \ i++){\n      result += postfix[i] + reverse[i];\n    }\n  }\n  \n  if(palindrome){\n\
    \    result += palindrome[0];\n  }\n  \n  return result;\n}\n", "  var reversed_string\
    \ = string\n  for(var i = string.length - 1; i >= 0; i--){\n    reversed_string\
    \ = reversed_string + string.charAt(i)\n  }\n  return reversed_string\n}\n", " \
    \   var reversed_string = string.replace(/^./g,\"\").split(\"\").reverse().join(\"\
    \");\n    return string + reversed_string;\n}\n", "    var palindrome = \"\";\n\
    \    var suffix;\n    var prefix_length;\n    var suffix_length;\n    var suffix_index;\n\
    \    var prefix_index;\n    var suffix_char;\n    var prefix_char;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;\n    var suffix_char_length;\n    var prefix_char_length;\n\
    \    var suffix_char_length;\n    var prefix_char_length;\n    var suffix_char_length;\n\
    \    var prefix_char_length;", "  var palindrome = \"\",\n      reversed_string\
    \ = string.replace(/^./g,\"\").replace(/.$/g,\"\");\n  \n  for(var i = string.length\
    \ - 1; i >= 0; i--){\n    if(string[i] !== reversed_string[i]){\n      palindrome\
    \ += string[i];\n      break;\n    }\n  }\n  return palindrome;\n}\n", "    var\
    \ reversed_string = string\n    var palindrome = \"\"\n    var palindrome_length\
    \ = string.length\n    var longest_palindrome = \"\"\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_postfix_length = 0\n    for(var i = 0; i <=\
    \ string.length; i++){\n        var postfix_length = string.length - i\n     \
    \   if(postfix_length >= longest_palindrome_length){\n            longest_palindrome_length\
    \ = postfix_length\n            longest_palindrome_postfix_length = i\n      \
    \  }\n    }\n    for(var i = 0; i <= string.length; i++){\n        var postfix_length\
    \ = string.length - i\n        if(postfix_length >= longest_palindrome_length){\n\
    \            longest_palindrome = string.substring(0, longest_palindrome_postfix_length)\n\
    \            reversed_string = string.substring(longest_palindrome_postfix_length,\
    \ postfix_length)\n            if(palindrome == \"\"){\n                palindrome\
    \ = reversed_string\n            }else{\n                palindrome = palindrome\
    \ + reversed_string\n            }\n        }\n    }\n    return palindrome\n\
    }\n", "  let palindrome = string\n  let longestPalindrome = string\n  let longestPalindromeLength\
    \ = 0\n  let longestPalindromePrefix = \"\"\n  let longestPalindromeSuffix = \"\
    \"\n  for(let i = 0; i < string.length; i++){\n    let currentChar = string[i]\n\
    \    let currentPalindrome = string\n    let currentPalindromeLength = 0\n   \
    \ let currentPalindromePrefix = \"\"\n    let currentPalindromeSuffix = \"\"\n\
    \    for(let j = 0; j < string.length; j++){\n      if(j > i){\n        let currentChar\
    \ = string[j]\n        let currentPalindrome = string\n        let currentPalindromeLength\
    \ = 0\n        let currentPalindromePrefix = \"\"\n        let currentPalindromeSuffix\
    \ = \"\"\n        if(currentChar == string[i]){\n          currentPalindromeLength++\n\
    \          currentPalindrome = currentPalindrome.slice(0, i) + currentPalindrome.slice(i\
    \ + 1)\n          currentPalindromePrefix = currentPalindrome.slice(0, i)\n  \
    \        currentPalindromeSuffix = currentPalindrome.slice(i)\n        }\n   \
    \   }\n    }\n    if(currentPalindromeLength > longestPalindromeLength){\n   \
    \   longestPalindrome = currentPalindrome\n      longestPalindromeLength = currentPalindromeLength\n\
    \      longestPalindromePrefix = currentPalindromePrefix\n      longestPalindromeSuffix\
    \ = currentPalindromeSuffix\n    }\n  }\n  longestPalindrome = longestPalindrome.slice(0,\
    \ longestPalindromeLength) + longestPalindrome.slice(longestPalindromeLength)\n\
    \  longestPalindrome = longestPalindromePrefix + longestPalindrome + longestPalindromeSuffix\n\
    \  return longestPalindrome\n}\n", "    var reversed_string = string\n    var\
    \ palindrome = \"\"\n    var postfix_length = 0\n    var prefix_length = 0\n \
    \   while(postfix_length < string.length){\n        postfix_length = string.length\
    \ - postfix_length\n        prefix_length = string.length - postfix_length - 1\n\
    \        var postfix = string.substr(postfix_length, string.length - postfix_length)\n\
    \        var prefix = string.substr(0, prefix_length)\n        if(postfix ===\
    \ reverse(prefix)){\n            palindrome = prefix + reversed_string\n     \
    \   }\n    }\n    return palindrome\n}\n", "    var palindrome = \"\",\n     \
    \   postfix = \"\";\n    \n    for(var i = 0; i < string.length; i++){\n     \
    \   postfix += string[i];\n    }\n    \n    postfix = postfix.split(\"\").reverse().join(\"\
    \");\n    \n    for(var i = 0; i < string.length; i++){\n        palindrome +=\
    \ string[i];\n    }\n    \n    palindrome += postfix;\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ prefix_reverse = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_length\
    \ = prefix_postfix_reverse.length;\n    var suffix_postfix_reverse_length = suffix_postfix_reverse.length;\n\
    \    var prefix_length = string.length;\n    var suffix_length = string.length;\n\
    \    var prefix_postfix = string.substr(prefix_length);\n    var suffix_postfix\
    \ = string.substr(0, suffix_length);\n    var prefix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_reverse = suffix_postfix.split(\"\"\
    ).reverse().join(\"\");\n    var prefix_postfix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_postfix_reverse = suffix_postfix.split(\"\
    \").reverse().join(\"\");\n    var prefix_postfix_reverse_length = prefix_postfix_reverse.length;\n\
    \    var suffix_postfix_reverse_length = suffix_postfix_reverse.length;\n    var\
    \ prefix_length = string.length;\n    var suffix_length = string.length;\n   \
    \ var prefix_postfix = string.substr(prefix_length);\n    var suffix_postfix =\
    \ string.substr(0, suffix_length);\n    var prefix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_reverse = suffix_postfix.split(\"\"\
    ).reverse().join(\"\");\n    var prefix_postfix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_postfix_reverse = suffix_postfix.split(\"\
    \").reverse().join(\"\");\n    var prefix_postfix_reverse_length = prefix_postfix_reverse.length;\n\
    \    var suffix_postfix_reverse_length = suffix_postfix_reverse.length;\n    var\
    \ prefix_length = string.length;\n    var suffix_length = string.length;\n   \
    \ var prefix_postfix = string.substr(prefix_length);\n    var suffix_postfix =\
    \ string.substr(0, suffix_length);\n    var prefix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_reverse = suffix_postfix.split(\"\"\
    ).reverse().join(\"\");\n    var prefix_postfix_reverse = prefix_postfix.split(\"\
    \").reverse().join(\"\");\n    var suffix_postfix_reverse = suffix_postfix.split(\"\
    \").reverse().join(\"\");\n    var prefix_postfix_reverse_length = prefix_postfix_reverse.length;\n\
    \    var suffix_postfix_reverse_length = suffix_postfix_reverse.length;\n    var\
    \ prefix_length = string.length;\n    var suffix_length = string.length;\n   \
    \ var prefix_postfix = string.substr(prefix_length);\n    var suffi", "    let\
    \ reverse = string.reduce((reverse, char) => {\n        return reverse + char;\n\
    \    }, '');\n    let prefix = string.slice(0, reverse.length);\n    let postfix\
    \ = string.slice(reverse.length);\n    return prefix + reverse + postfix;\n}\n",
  "    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length =\
    \ 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0,\n       \
    \ prefix_start_index = 0;\n    \n    prefix_length = string.length;\n    suffix_length\
    \ = string.length - prefix_length;\n    \n    suffix_start_index = prefix_length;\n\
    \    suffix_end_index = suffix_start_index + suffix_length;\n    \n    prefix_start_index\
    \ = suffix_start_index;\n    \n    while(suffix_start_index >= 0){\n        if(string.charAt(suffix_start_index)\
    \ == string.charAt(suffix_end_index)){\n            palindrome += string.charAt(prefix_start_index);\n\
    \            \n            prefix_start_index--;\n            suffix_start_index--;\n\
    \            \n            suffix_end_index--;\n        }else{\n            palindrome\
    \ += string.charAt(suffix_start_index);\n            \n            suffix_start_index--;\n\
    \        }\n    }\n    \n    return palindrome;\n}\n", "    var postfix = string.substr(0,\
    \ string.length-1);\n    var reverse = postfix.split(\"\").reverse().join(\"\"\
    );\n    return string + reverse + postfix;\n}\n", "    let reversed_string = string\n\
    \    let longest_postfix_of_string = string.length\n    let longest_postfix_of_string_with_prefix\
    \ = \"\"\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ string[string.length - 1 - i]){\n            longest_postfix_of_string = i\n\
    \            longest_postfix_of_string_with_prefix = string\n        }\n    }\n\
    \    let palindrome = longest_postfix_of_string_with_prefix + reversed_string\n\
    \    return palindrome\n}\n", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        prefix_reversed = \"\",\n        suffix_reversed\
    \ = \"\";\n    \n    prefix_length = string.length;\n    suffix_length = string.length\
    \ - prefix_length;\n    \n    prefix_reversed = string.repeat(suffix_length).split(\"\
    \").reverse().join(\"\");\n    suffix_reversed = string.split(\"\").reverse().join(\"\
    \");\n    \n    for(var i = 0; i < prefix_length; i++){\n        palindrome +=\
    \ string.charAt(i);\n    }\n    \n    palindrome += prefix_reversed;\n    palindrome\
    \ += suffix_reversed;\n    \n    return palindrome;\n}\n", "    var palindrome\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_postfix\
    \ = \"\";\n    var suffix_postfix = \"\";\n    var suffix_reverse = \"\";\n  \
    \  var suffix_reverse_length = 0;\n    var prefix_reverse = \"\";\n    var prefix_reverse_length\
    \ = 0;\n    \n    for(var i = 0; i < string.length; i++){\n        prefix_length\
    \ = prefix_length + 1;\n        suffix_length = suffix_length + 1;\n        prefix_postfix\
    \ = prefix_postfix + string.charAt(i);\n        suffix_postfix = suffix_postfix\
    \ + string.charAt(string.length - i - 1);\n        suffix_reverse = suffix_reverse\
    \ + string.charAt(string.length - i - 1);\n        suffix_reverse_length = suffix_reverse_length\
    \ + 1;\n        prefix_reverse = prefix_reverse + string.charAt(i);\n        prefix_reverse_length\
    \ = prefix_reverse_length + 1;\n    }\n    \n    for(var i = 0; i < suffix_length;\
    \ i++){\n        if(suffix_reverse == suffix_postfix.substring(0,i)){\n      \
    \      palindrome = palindrome + string.substring(0,i) + string.substring(i +\
    \ 1,string.length);\n        }\n    }\n    \n    for(var i = 0; i < prefix_length;\
    \ i++){\n        if(prefix_reverse == prefix_postfix.substring(0,i)){\n      \
    \      palindrome = palindrome + string.substring(0,i) + string.substring(i +\
    \ 1,string.length);\n        }\n    }\n    \n    return palindrome;\n}\n", " \
    \ var palindrome = string;\n  var palindrome_length = string.length;\n  var palindrome_postfix\
    \ = \"\";\n  var palindrome_prefix_length = string.length - 1;\n  var palindrome_prefix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_length = string.length - 1;\n  var\
    \ palindrome_prefix_postfix_postfix = \"\";\n  var palindrome_prefix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix = \"\"\
    ;\n  var palindrome_prefix_postfix_postfix_postfix_length = string.length - 1;\n\
    \  var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string.length - 1;\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_suffix = \"\";\n\
    \    var palindrome_prefix = \"\";\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        prefix_length++;\n        prefix_string += string[i];\n    }\n\
    \    \n    for(var i = 0; i < string.length; i++){\n        suffix_length++;\n\
    \        suffix_string += string[i];\n    }\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        palindrome_length++;\n        palindrome_suffix += string[i];\n\
    \    }\n    \n    for(var i = 0; i < string.length; i++){\n        palindrome_length++;\n\
    \        palindrome_prefix += string[i];\n    }\n    \n    for(var i = 0; i <\
    \ string.length; i++){\n        if(palindrome_length == prefix_length){\n    \
    \        palindrome += palindrome_prefix;\n            palindrome_prefix = \"\"\
    ;\n            palindrome_length--;\n        }\n        \n        if(palindrome_length\
    \ == suffix_length){\n            palindrome += palindrome_suffix;\n         \
    \   palindrome_suffix = \"\";\n            palindrome_length--;\n        }\n \
    \       \n        if(palindrome_length == palindrome_suffix){\n            palindrome\
    \ += palindrome_suffix;\n            palindrome_suffix = \"\";\n            palindrome_length--;\n\
    \        }\n        \n        if(palindrome_length == palindrome_prefix){\n  \
    \          palindrome += palindrome_prefix;\n            palindrome_prefix = \"\
    \";\n            palindrome_length--;\n        }\n    }\n    \n    return palindrome;\n\
    }\n", "  var longest = find_longest_palindrome(string);\n  var reverse = find_reverse_palindrome(string,\
    \ longest);\n  return string + reverse;\n}\n", "    var palindrome = \"\";\n \
    \   var longestPalindrome = \"\";\n    var longestPalindromeLength = 0;\n    var\
    \ longestPalindromeIndex = 0;\n    var longestPalindromePrefixIndex = 0;\n   \
    \ var longestPalindromeSuffixIndex = 0;\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex = 0;\n    var longestPalindromeSuffixEndIndex\
    \ = 0;\n    var longestPalindromeSuffixStartIndex", "    var palindrome = \"\"\
    ;\n    var stringLength = string.length;\n    var stringPrefix = \"\";\n    var\
    \ stringSuffix = \"\";\n    var longestPalindrome = 0;\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromePrefix = \"\";\n    var longestPalindromeSuffix\
    \ = \"\";\n    var longestPalindromePrefixLength = 0;\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromePrefixReverse = \"\";\n    var longestPalindromeSuffixReverse\
    \ = \"\";\n    var longestPalindromePrefixReverseLength = 0;\n    var longestPalindromeSuffixReverseLength\
    \ = 0;\n    var longestPalindromePrefixReverseReverse = \"\";\n    var longestPalindromeSuffixReverseReverse\
    \ = \"\";\n    var longestPalindromePrefixReverseReverseLength = 0;\n    var longestPalindromeSuffixReverseReverseLength\
    \ = 0;\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[stringLength - i - 1]){\n            stringSuffix += string[i];\n\
    \            longestPalindromeSuffixLength++;\n        }\n        else{\n    \
    \        stringPrefix += string[i];\n            longestPalindromePrefixLength++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[stringLength - i - 1]){\n            stringSuffix += string[i];\n\
    \            longestPalindromeSuffixLength++;\n        }\n        else{\n    \
    \        stringPrefix += string[i];\n            longestPalindromePrefixLength++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[stringLength - i - 1]){\n            stringSuffix += string[i];\n\
    \            longestPalindromeSuffixLength++;\n        }\n        else{\n    \
    \        stringPrefix += string[i];\n            longestPalindromePrefixLength++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[stringLength - i - 1]){\n            stringSuffix += string[i];\n\
    \            longestPalindromeSuffixLength++;\n        }\n        else{\n    \
    \        stringPrefix += string[i];\n            longestPalindromePrefixLength++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[stringLength - i - 1]){\n            stringSuffix += string[i];\n\
    \            longestPalindromeSuffixLength++;\n        }\n        else{\n    \
    \        stringPrefix += string[i];\n            longestPalindromePrefixLength++;\n\
    \        }\n    }\n    \n    for(var i = 0; i < stringLength; i++){\n        if(string[i]\
    \ === string[string", "    string = string.toLowerCase();\n    var palindrome\
    \ = \"\";\n    var palindrome_index = 0;\n    var palindrome_length = string.length;\n\
    \    var palindrome_prefix = \"\";\n    var palindrome_suffix = \"\";\n    var\
    \ palindrome_prefix_length = palindrome_length;\n    var palindrome_suffix_length\
    \ = palindrome_length;\n    var palindrome_prefix_index = 0;\n    var palindrome_suffix_index\
    \ = 0;\n    var palindrome_prefix_length_index = 0;\n    var palindrome_suffix_length_index\
    \ = 0;\n    var palindrome_prefix_index_length = palindrome_length;\n    var palindrome_suffix_index_length\
    \ = palindrome_length;\n    var palindrome_prefix_index_length_index = 0;\n  \
    \  var palindrome_suffix_index_length_index = 0;\n    var palindrome_prefix_length_index_length\
    \ = palindrome_length;\n    var palindrome_suffix_length_index_length = palindrome_length;\n\
    \    var palindrome_prefix_index_length_index_length = 0;\n    var palindrome_suffix_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_length_index_length_index_length = 0;\n    var\
    \ palindrome_suffix_length_index_length_index_length = 0;\n    var palindrome_prefix_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_suffix_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;\n    var palindrome_prefix_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\
    \ = 0;", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ palindrome_string = \"\";\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;\n    var l = 0;\n    var prefix_length = string.length;\n    var suffix_length\
    \ = string.length;\n    var prefix_string = string;\n    var suffix_string = string;\n\
    \    var palindrome_string = string;\n    var i = 0;\n    var j = 0;\n    var\
    \ k = 0;", "    var palindrome = \"\";\n    var postfix = \"\";\n    var reverse\
    \ = \"\";\n    \n    while(string != \"\"){\n        postfix = string.substr(0,1);\n\
    \        reverse = reverse.substr(0,1) + postfix;\n        string = string.substr(1);\n\
    \    }\n    \n    while(postfix != reverse){\n        palindrome = palindrome\
    \ + postfix;\n        postfix = string.substr(0,1);\n        reverse = reverse.substr(0,1)\
    \ + postfix;\n        string = string.substr(1);\n    }\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var stringLength = string.length;\n   \
    \ var stringPrefix = \"\";\n    var stringSuffix = \"\";\n    var stringReverse\
    \ = \"\";\n    var longestPalindrome = 0;\n    var longestPalindromeLength = 0;\n\
    \    var longestPalindromePrefix = \"\";\n    var longestPalindromeSuffix = \"\
    \";\n    var longestPalindromeReverse = \"\";\n    var longestPalindromeReverseLength\
    \ = 0;\n    var longestPalindromePrefixReverse = \"\";\n    var longestPalindromeSuffixReverse\
    \ = \"\";\n    var longestPalindromePrefixReverseLength = 0;\n    var longestPalindromeSuffixReverseLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n    var longestPalindromeSuffixReverseString\
    \ = \"\";\n    var longestPalindromeReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeReverseStringLength\
    \ = 0;\n    var longestPalindromePrefixReverseString = \"\";\n", "  var reversed_string\
    \ = string\n  var palindrome = \"\"\n  var prefix_length = 0\n  var postfix_length\
    \ = 0\n  while(postfix_length < string.length){\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    postfix_length = string.length - postfix_length\n\
    \    postfix_length = string.length - postfix_length\n    postfix_length = string.length\
    \ - postfix_length\n    postfix_length = string.length - postfix_length\n    postfix_length\
    \ = string.length - postfix_length\n    post", "  var reversed_string = string\n\
    \  for(var i = string.length - 1; i >= 0; i--){\n    reversed_string = reversed_string\
    \ + string.charAt(i)\n  }\n  return reversed_string\n}\n", "    var reversed_string\
    \ = \"\";\n    var postfix_length = 0;\n    var prefix_length = 0;\n    var palindrome\
    \ = \"\";\n    \n    while(postfix_length < string.length){\n        var postfix\
    \ = string.substr(postfix_length);\n        var postfix_reversed = string.reverse();\n\
    \        var postfix_reversed_length = postfix_reversed.length;\n        \n  \
    \      if(postfix_length + postfix_reversed_length >= string.length){\n      \
    \      postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(postfix_length + postfix_reversed_length >= string.length){\n    \
    \        postfix_length += postfix_reversed_length;\n        }\n        else{\n\
    \            postfix_length += postfix_reversed_length;\n            postfix_reversed\
    \ = postfix_reversed.substr(0, postfix_reversed_length);\n        }\n        \n\
    \        if(post", "    var palindrome = \"\";\n    var suffix;\n    var prefix;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefixStart;\n\
    \    var suffixEnd;\n    var prefixEnd;\n    var suffixLength;\n    var prefixLength;\n\
    \    var suffixStart;\n    var prefixStart;\n    var suffixEnd;\n    var prefixEnd;\n\
    \    var suffixLength;\n    var prefixLength;\n    var suffixStart;\n    var prefix",
  "    var palindrome = \"\";\n    var longestPalindrome = \"\";\n    var longestPalindromeLength\
    \ = 0;\n    var longestPalindromeIndex = 0;\n    var longestPalindromePrefixIndex\
    \ = 0;\n    var longestPalindromeSuffixIndex = 0;\n    var longestPalindromeSuffixLength\
    \ = 0;\n    var longestPalindromeSuffixIndexReverse = 0;\n    var longestPalindromePrefixIndexReverse\
    \ = 0;\n    var longestPalindromePrefixLength = 0;\n    var longestPalindromePrefixReverse\
    \ = \"\";\n    var longestPalindromeSuffixReverse = \"\";\n    var longestPalindromeSuffixReverseLength\
    \ = 0;\n    var longestPalindromeSuffixReverseIndex = 0;\n    var longestPalindromePrefixReverseIndex\
    \ = 0;\n    var longestPalindromePrefixReverseLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromePrefixReverseStringIndex\
    \ = 0;\n    var longestPalindromePrefixReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromePrefixReverseStringIndex\
    \ = 0;\n    var longestPalindromePrefixReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromePrefixReverseStringIndex\
    \ = 0;\n    var longestPalindromePrefixReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromePrefixReverseStringIndex\
    \ = 0;\n    var longestPalindromePrefixReverseStringLength = 0;\n    var longestPalindromePrefixReverseString\
    \ = \"\";\n    var longestPalindromeSuffixReverseString = \"\";\n    var longestPalindromeSuffixReverseStringLength\
    \ = 0;\n    var longestPalindromeSuffixReverseStringIndex = 0;\n    var longestPalindromePrefixReverseStringIndex\
    \ = 0;\n    var longestPalindromePrefixReverseStringLength = 0;\n    var longestP",
  "  var palindrome = string;\n  var prefix_length = 0;\n  var suffix_length = 0;\n\
    \  var prefix_postfix = \"\";\n  var suffix_postfix = \"\";\n  var reverse_prefix_postfix\
    \ = \"\";\n  var reverse_suffix_postfix = \"\";\n  var reverse_prefix_length =\
    \ 0;\n  var reverse_suffix_length = 0;\n  var reverse_prefix_postfix_length =\
    \ 0;\n  var reverse_suffix_postfix_length = 0;\n  var prefix_postfix_length =\
    \ 0;\n  var suffix_postfix_length = 0;\n  var prefix_postfix_postfix = \"\";\n\
    \  var suffix_postfix_postfix = \"\";\n  var prefix_length_string = \"\";\n  var\
    \ suffix_length_string = \"\";\n  var reverse_prefix_length_string = \"\";\n \
    \ var reverse_suffix_length_string = \"\";\n  var reverse_prefix_postfix_length_string\
    \ = \"\";\n  var reverse_suffix_postfix_length_string = \"\";\n  var prefix_postfix_length_string\
    \ = \"\";\n  var suffix_postfix_length_string = \"\";\n  var prefix_postfix_postfix_string\
    \ = \"\";\n  var suffix_postfix_postfix_string = \"\";\n  var prefix_length_string_length\
    \ = \"\";\n  var suffix_length_string_length = \"\";\n  var reverse_prefix_length_string_length\
    \ = \"\";\n  var reverse_suffix_length_string_length = \"\";\n  var reverse_prefix_postfix_length_string_length\
    \ = \"\";\n  var reverse_suffix_postfix_length_string_length = \"\";\n  var prefix_postfix_length_string_length\
    \ = \"\";\n  var suffix_postfix_length_string_length = \"\";\n  var prefix_postfix_postfix_string_length\
    \ = \"\";\n  var suffix_postfix_postfix_string_length = \"\";\n  var prefix_length_length_length\
    \ = \"\";\n  var suffix_length_length_length = \"\";\n  var reverse_prefix_length_length_length\
    \ = \"\";\n  var reverse_suffix_length_length_length = \"\";\n  var reverse_prefix_postfix_length_length_length\
    \ = \"\";\n  var reverse_suffix_postfix_length_length_length = \"\";\n  var prefix_postfix_length_length_length\
    \ = \"\";\n  var suffix_postfix_length_length_length = \"\";\n  var prefix_postfix_postfix_length_length_length\
    \ = \"\";\n  var suffix_postfix_postfix_length_length_length = \"\";\n  var prefix_length_length_length_length\
    \ = \"\";\n  var suffix_length_length_length_length = \"\";\n  var reverse_prefix_length_length_length_length\
    \ = \"\";\n  var reverse_suffix_length_length_length_length = \"\";\n  var reverse_prefix_postfix_length_length_length_length\
    \ = \"\";\n  var reverse_suffix_postfix_length_length_length_length = \"\";\n\
    \  var prefix_postfix_length_length_length_length = \"\";\n  var suffix_postfix_length_length_length_length\
    \ = \"\";\n  var prefix_postfix_postfix_length_length_length = \"\";\n  var suffix_postfix_postfix_length_length_length\
    \ = \"\";\n  var prefix_length_length_length_length_length = \"\";\n  var suffix_length_length_length_length_length\
    \ = \"\";\n  var reverse_prefix_length_", "    var reversed_string = string.replace(/[^a-zA-Z0-9]/g,\
    \ \"\").split(\"\").reverse().join(\"\");\n    var prefix_string = string.substr(0,\
    \ string.length - reversed_string.length);\n    var palindrome = prefix_string\
    \ + reversed_string;\n    return palindrome;\n}\n", "  var reversed = \"\";\n\
    \  var longest = 0;\n  for(var i = 0; i < string.length; i++){\n    var postfix\
    \ = string.substr(0, i);\n    var palindrome = string.substr(0, i) + string.reverse(string.substr(0,\
    \ i));\n    if(postfix.length >= palindrome.length){\n      longest = i;\n   \
    \   reversed = postfix;\n    }\n  }\n  return reversed + string.substr(0, longest);\n\
    }\n", "    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length\
    \ = 0,\n        suffix_start = 0,\n        suffix_end = 0,\n        suffix_reversed\
    \ = \"\";\n    \n    string = string.toLowerCase();\n    \n    // Find the longest\
    \ postfix of supplied string that is a palindrome.\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_length\
    \ = i;\n            break;\n        }\n    }\n    \n    // Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    for(var i = 0; i < suffix_length; i++){\n        suffix_reversed = suffix_reversed\
    \ + string[suffix_start - i];\n    }\n    \n    // Add the palindromic suffix.\n\
    \    palindrome = string + suffix_reversed;\n    \n    return palindrome;\n}\n",
  "    var reversed_string = string\n    var longest_postfix_palindrome = string\n\
    \    var longest_postfix_palindrome_length = string.length\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var longest_postfix_palindrome_length_counter\
    \ = 0\n    var longest_postfix_palindrome_length_counter = 0\n    var ", "  if(string\
    \ == \"\"){\n    return \"\";\n  }\n  if(string.length <= 1){\n    return string;\n\
    \  }\n  var palindrome = string;\n  var palindrome_reverse = \"\";\n  var palindrome_prefix\
    \ = \"\";\n  var palindrome_suffix = \"\";\n  var palindrome_prefix_reverse =\
    \ \"\";\n  var palindrome_suffix_reverse = \"\";\n  var palindrome_prefix_reverse_index\
    \ = 0;\n  var palindrome_suffix_reverse_index = 0;\n  var palindrome_prefix_reverse_index2\
    \ = 0;\n  var palindrome_suffix_reverse_index2 = 0;\n  var palindrome_prefix_reverse_index3\
    \ = 0;\n  var palindrome_suffix_reverse_index3 = 0;\n  var palindrome_prefix_reverse_index4\
    \ = 0;\n  var palindrome_suffix_reverse_index4 = 0;\n  var palindrome_prefix_reverse_index5\
    \ = 0;\n  var palindrome_suffix_reverse_index5 = 0;\n  var palindrome_prefix_reverse_index6\
    \ = 0;\n  var palindrome_suffix_reverse_index6 = 0;\n  var palindrome_prefix_reverse_index7\
    \ = 0;\n  var palindrome_suffix_reverse_index7 = 0;\n  var palindrome_prefix_reverse_index8\
    \ = 0;\n  var palindrome_suffix_reverse_index8 = 0;\n  var palindrome_prefix_reverse_index9\
    \ = 0;\n  var palindrome_suffix_reverse_index9 = 0;\n  var palindrome_prefix_reverse_index10\
    \ = 0;\n  var palindrome_suffix_reverse_index10 = 0;\n  var palindrome_prefix_reverse_index11\
    \ = 0;\n  var palindrome_suffix_reverse_index11 = 0;\n  var palindrome_prefix_reverse_index12\
    \ = 0;\n  var palindrome_suffix_reverse_index12 = 0;\n  var palindrome_prefix_reverse_index13\
    \ = 0;\n  var palindrome_suffix_reverse_index13 = 0;\n  var palindrome_prefix_reverse_index14\
    \ = 0;\n  var palindrome_suffix_reverse_index14 = 0;\n  var palindrome_prefix_reverse_index15\
    \ = 0;\n  var palindrome_suffix_reverse_index15 = 0;\n  var palindrome_prefix_reverse_index16\
    \ = 0;\n  var palindrome_suffix_reverse_index16 = 0;\n  var palindrome_prefix_reverse_index17\
    \ = 0;\n  var palindrome_suffix_reverse_index17 = 0;\n  var palindrome_prefix_reverse_index18\
    \ = 0;\n  var palindrome_suffix_reverse_index18 = 0;\n  var palindrome_prefix_reverse_index19\
    \ = 0;\n  var palindrome_suffix_reverse_index19 = 0;\n  var palindrome_prefix_reverse_index",
  "    var reversed_string = string.replace(/^(.)(.*)/, \"$2\");\n    var palindrome\
    \ = string + reversed_string;\n    return palindrome;\n}\n", "    var reversed_string\
    \ = string.reverse ();\n    var postfix_length = string.length ();\n    var palindrome\
    \ = string.slice (0, postfix_length);\n    var prefix_length = postfix_length\
    \ - 1;\n    var prefix_string = string.slice (prefix_length, postfix_length);\n\
    \    var prefix_reversed_string = prefix_string.reverse ();\n    var prefix_postfix_length\
    \ = prefix_string.length ();\n    var prefix_palindrome = prefix_string.slice\
    \ (0, prefix_postfix_length);\n    var prefix_prefix_length = prefix_postfix_length\
    \ - 1;\n    var prefix_prefix_string = prefix_string.slice (prefix_prefix_length,\
    \ prefix_postfix_length);\n    var prefix_prefix_reversed_string = prefix_prefix_string.reverse\
    \ ();\n    var prefix_prefix_postfix_length = prefix_prefix_string.length ();\n\
    \    var prefix_prefix_palindrome = prefix_prefix_string.slice (0, prefix_prefix_postfix_length);\n\
    \    var prefix_prefix_prefix_length = prefix_prefix_postfix_length - 1;\n   \
    \ var prefix_prefix_prefix_string = prefix_prefix_string.slice (prefix_prefix_prefix_length,\
    \ prefix_prefix_postfix_length);\n    var prefix_prefix_prefix_reversed_string\
    \ = prefix_prefix_prefix_string.reverse ();\n    var prefix_prefix_prefix_postfix_length\
    \ = prefix_prefix_prefix_string.length ();\n    var prefix_prefix_prefix_palindrome\
    \ = prefix_prefix_prefix_string.slice (0, prefix_prefix_prefix_postfix_length);\n\
    \    var prefix_prefix_prefix_prefix_length = prefix_prefix_prefix_postfix_length\
    \ - 1;\n    var prefix_prefix_prefix_prefix_string = prefix_prefix_prefix_string.slice\
    \ (prefix_prefix_prefix_prefix_length, prefix_prefix_prefix_postfix_length);\n\
    \    var prefix_prefix_prefix_prefix_reversed_string = prefix_prefix_prefix_prefix_string.reverse\
    \ ();\n    var prefix_prefix_prefix_prefix_postfix_length = prefix_prefix_prefix_prefix_string.length\
    \ ();\n    var prefix_prefix_prefix_prefix_palindrome = prefix_prefix_prefix_prefix_string.slice\
    \ (0, prefix_prefix_prefix_prefix_postfix_length);\n    var prefix_prefix_prefix_prefix_prefix_length\
    \ = prefix_prefix_prefix_prefix_prefix_postfix_length - 1;\n    var prefix_prefix_prefix_prefix_prefix_prefix_string\
    \ = prefix_prefix_prefix_prefix_prefix_string.slice (prefix_prefix_prefix_prefix_prefix_length,\
    \ prefix_prefix_prefix_prefix_prefix_postfix_length);\n    var prefix_prefix_prefix_prefix_prefix_reversed_string\
    \ = prefix_prefix_prefix_prefix_prefix_prefix_string.reverse ();\n    var prefix_prefix_prefix_prefix_prefix_prefix_postfix_length\
    \ = prefix_prefix_prefix_prefix_prefix_prefix_string.length ();\n    var prefix_prefix_prefix_prefix_prefix_prefix_palindrome\
    \ = prefix_prefix_prefix_prefix_prefix_prefix_prefix_string.slice (0, prefix_prefix_prefix_prefix_prefix_prefix_postfix_length);\n\
    \    var prefix_prefix_prefix_prefix_prefix_prefix_prefix_length = prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix_length\
    \ - 1;\n    var prefix_prefix_prefix_prefix_prefix_prefix_prefix_string = prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_string.slice\
    \ (prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_length, ", "    var\
    \ palindrome = \"\",\n        prefix_length = 0,\n        suffix_length = 0,\n\
    \        prefix_reversed = \"\",\n        suffix_reversed = \"\";\n    \n    prefix_length\
    \ = string.length;\n    suffix_length = string.length - prefix_length;\n    \n\
    \    prefix_reversed = string.reverse ();\n    suffix_reversed = string.slice\
    \ (prefix_length);\n    \n    prefix_reversed = prefix_reversed.slice (0, prefix_length\
    \ - suffix_length);\n    suffix_reversed = suffix_reversed.slice (0, suffix_length);\n\
    \    \n    palindrome = prefix_reversed + suffix_reversed;\n    \n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix = \"\";\n    var reverse\
    \ = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = string.length;\n\
    \    var m = string.length;\n    var n = string.length;\n    var o = 0;\n    var\
    \ p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n   \
    \ var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = string.length;\n    var m = string.length;\n\
    \    var n = string.length;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n\
    \    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n\
    \    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = string.length;\n    var m = string.length;\n    var n = string.length;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = string.length;\n\
    \    var m = string.length;\n    var n = string.length;\n    var o = 0;\n    var\
    \ p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n   \
    \ var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = string.length;\n    var m = string.length;\n\
    \    var n = string.length;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x", "    var reversed_string = string\n    var palindrome\
    \ = \"\"\n    var longest_postfix_length = 0\n    for(var i = 0; i < string.length;\
    \ i++){\n        var postfix_length = string.length - i\n        if(postfix_length\
    \ >= longest_postfix_length){\n            longest_postfix_length = postfix_length\n\
    \        }\n    }\n    for(var i = 0; i < longest_postfix_length; i++){\n    \
    \    var postfix_length = string.length - i\n        var postfix_string = string.substr(0,\
    \ postfix_length)\n        var reversed_postfix_string = postfix_string.reverse()\n\
    \        if(postfix_string == reversed_postfix_string){\n            palindrome\
    \ += string.substr(0, postfix_length)\n        }\n    }\n    return palindrome\n\
    }\n", "    var reversed_string = string\n    var prefix_length = 0\n    var longest_postfix_length\
    \ = 0\n    var longest_postfix_string = \"\"\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            prefix_length++\n\
    \        }\n        else{\n            longest_postfix_length++\n            longest_postfix_string\
    \ = string\n        }\n    }\n    if(longest_postfix_length < prefix_length){\n\
    \        longest_postfix_string = string\n        prefix_length = longest_postfix_length\n\
    \    }\n    for(var i = 0; i < prefix_length; i++){\n        reversed_string =\
    \ reversed_string.replace(string[i], string[string.length -1 -i])\n    }\n   \
    \ return reversed_string\n}\n", "  var palindrome = \"\",\n      reversed_string\
    \ = \"\";\n  \n  if(string == \"\"){\n    return \"\";\n  }\n  \n  for(var i =\
    \ 0; i < string.length; i++){\n    if(string[i] != string[string.length - 1 -\
    \ i]){\n      reversed_string += string[i];\n    }\n  }\n  \n  for(var i = 0;\
    \ i < string.length; i++){\n    if(string[i] != string[string.length - 1 - i]){\n\
    \      palindrome += string[i];\n    }\n  }\n  \n  return palindrome + reversed_string;\n\
    }\n", "    var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    while(true){\n        prefix_length = string.indexOf(reversed_string,\
    \ prefix_length + 1)\n        suffix_length = string.indexOf(reversed_string,\
    \ suffix_length + 1)\n        if(prefix_length == -1 || suffix_length == -1){\n\
    \            break\n        }\n        palindrome = reversed_string + palindrome\n\
    \        reversed_string = string.substring(suffix_length, reversed_string.length)\n\
    \    }\n    return palindrome\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var suffix_reverse_length = 0;\n\
    \    var prefix_reverse = \"\";\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string\
    \ = \"\";\n    var suffix_reverse_string = \"\";\n    var suffix_reverse_length\
    \ = 0;\n    var prefix_reverse_string = \"\";\n    var prefix_reverse_length =\
    \ 0;\n    var suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n\
    \    var prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n \
    \   var suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n  \
    \  var prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n   \
    \ var suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n    var\
    \ prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string\
    \ = \"\";\n    var suffix_reverse_length = 0;\n    var prefix_reverse_string =\
    \ \"\";\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\
    \";\n    var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\"\
    ;\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n\
    \    var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n \
    \   var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n  \
    \  var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n   \
    \ var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n    var\
    \ suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n    var prefix_reverse_length\
    \ = 0;\n    var suffix_reverse_string = \"\";\n    var suffix_reverse_length =\
    \ 0;\n    var prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n\
    \    var suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n \
    \   var prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n  \
    \  var suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n   \
    \ var prefix_reverse_string = \"\";\n    var prefix_reverse_length = 0;\n    var\
    \ suffix_reverse_string = \"\";\n    var suffix_reverse_length = 0;\n    var prefix_reverse_string\
    \ = \"\";\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string =\
    \ \"\";\n    var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\
    \";\n    var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\"\
    ;\n    var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n\
    \    var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n \
    \   var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n  \
    \  var prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n   \
    \ var suffix_reverse_length = 0;\n    var prefix_reverse_string = \"\";\n    var\
    \ prefix_reverse_length = 0;\n    var suffix_reverse_string = \"\";\n    var suffix_",
  "  if(string === \"\"){\n    return \"\";\n  }\n  var postfix = \"\";\n  var longest\
    \ = 0;\n  var longestPostfix = \"\";\n  var longestPostfixIndex = 0;\n  var longestPostfixLength\
    \ = 0;\n  var longestPostfixString = \"\";\n  var longestPostfixStringIndex =\
    \ 0;\n  var longestPostfixStringLength = 0;\n  var longestPostfixStringReverse\
    \ = \"\";\n  var longestPostfixStringReverseIndex = 0;\n  var longestPostfixStringReverseLength\
    \ = 0;\n  var longestPostfixStringReverseString = \"\";\n  var longestPostfixStringReverseStringIndex\
    \ = 0;\n  var longestPostfixStringReverseStringLength = 0;\n  var longestPostfixStringReverseStringReverse\
    \ = \"\";\n  var longestPostfixStringReverseStringReverseIndex = 0;\n  var longestPostfixStringReverseStringReverseLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseString = \"\";\n  var longestPostfixStringReverseStringReverseStringIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringLength = 0;\n  var\
    \ longestPostfixStringReverseStringReverseStringReverse = \"\";\n  var longestPostfixStringReverseStringReverseStringReverseIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseLength = 0;\n\
    \  var longestPostfixStringReverseStringReverseStringReverseString = \"\";\n \
    \ var longestPostfixStringReverseStringReverseStringReverseStringIndex = 0;\n\
    \  var longestPostfixStringReverseStringReverseStringReverseStringLength = 0;\n\
    \  var longestPostfixStringReverseStringReverseStringReverseStringReverse = \"\
    \";\n  var longestPostfixStringReverseStringReverseStringReverseStringIndex =\
    \ 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseString\
    \ = \"\";\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringReverse\
    \ = \"\";\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringReverseIndex\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringReverseLength\
    \ = 0;\n  var longestPostfixStringReverseStringReverseStringReverseStringReverseStringReverse",
  "    var reversed_string = string\n    var longest_postfix_length = 0\n    var longest_postfix_index\
    \ = 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index =\
    \ 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n\
    \    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n  \
    \  var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var\
    \ longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string\
    \ = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string =\
    \ \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\
    \"\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n\
    \    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n  \
    \  var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    var\
    \ longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index\
    \ = 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index =\
    \ 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n\
    \    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n  \
    \  var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var\
    \ longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string\
    \ = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string =\
    \ \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\
    \"\n    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n\
    \    var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n  \
    \  var longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    var\
    \ longest_postfix_index = 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index\
    \ = 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index =\
    \ 0\n    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n\
    \    var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n  \
    \  var longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var\
    \ longest_postfix_string = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string\
    \ = \"\"\n    var longest_postfix_index = 0\n    var longest_postfix_string =\
    \ \"\"\n    var lon", "  var palindrome = \"\";\n  var suffix;\n  var prefix;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefixStart;\n\
    \  var suffixEnd;\n  var prefixEnd;\n  var suffixLength;\n  var prefixLength;\n\
    \  var suffixStart;\n  var prefixStart;\n  var suffixEnd;\n  var prefixEnd;\n\
    \  var suffixLength;\n  var prefixLength;\n  var suffixStart;\n  var prefix",
  "    var palindrome = string;\n    var reverse = \"\";\n    var prefix;\n    var\
    \ suffix;\n    var i;\n    for(i = string.length - 1; i >= 0; i--){\n        prefix\
    \ = string.substring(0, i);\n        suffix = string.substring(i);\n        reverse\
    \ = reverse + prefix + suffix;\n    }\n    palindrome = palindrome + reverse;\n\
    \    return palindrome;\n}\n", "    var reversed_string = string\n    var palindrome\
    \ = \"\"\n    var prefix_length = 0\n    var postfix_length = 0\n    for(var i\
    \ = 0; i<string.length; i++){\n        if(string[i] == string[string.length-1-i]){\n\
    \            postfix_length++\n        }\n        else{\n            prefix_length++\n\
    \        }\n    }\n    while(postfix_length >= prefix_length){\n        reversed_string\
    \ = reversed_string+string[prefix_length-1]+string[string.length-1-postfix_length]\n\
    \        postfix_length--\n        prefix_length--\n    }\n    return reversed_string\n\
    }\n</code>\n<|/ a |>\n<| a tags=javascript,algorithm |>\n<code>", "    var reversed\
    \ = \"\";\n    var longest = 0;\n    var longestIndex = 0;\n    for(var i = 0;\
    \ i < string.length; i++){\n        var letter = string[i];\n        var index\
    \ = string.indexOf(letter);\n        if(index > -1){\n            var reversedLetter\
    \ = string.slice(index).split(\"\").reverse().join(\"\");\n            if(reversedLetter\
    \ === letter){\n                longest = letter;\n                longestIndex\
    \ = index;\n            }\n        }\n    }\n    var palindrome = string.slice(0,\
    \ longestIndex) + string.slice(longestIndex + longest).split(\"\").reverse().join(\"\
    \");\n    return palindrome;\n}\n", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        suffix_start_index = 0,\n        suffix_end_index\
    \ = 0,\n        suffix_string = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_start_index\
    \ = i;\n            suffix_end_index = string.length - 1;\n        }\n    }\n\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            suffix_string = string.substr(suffix_start_index, suffix_end_index\
    \ + 1);\n            palindrome += string.substr(0, suffix_start_index) + suffix_string\
    \ + string.substr(suffix_end_index + 1);\n            prefix_length = suffix_start_index;\n\
    \            suffix_length = suffix_end_index;\n        }\n    }\n\n    return\
    \ palindrome;\n}\n", "    var reversed_string = string.replace(/^./g,\"\").split(\"\
    \").reverse().join(\"\");\n    var palindrome = string.split(\"\").reverse().join(\"\
    \") + reversed_string;\n    return palindrome;\n}\n", "    var reversed_string\
    \ = string\n    var prefix_length = 0\n    var postfix_length = 0\n    var palindrome\
    \ = \"\"\n    while(true){\n        postfix_length = string.length\n        reversed_string\
    \ = reversed_string.reverse()\n        prefix_length = string.length\n       \
    \ while(true){\n            if(string.substr(0,postfix_length) == reversed_string){\n\
    \                palindrome = string.substr(0,prefix_length) + palindrome\n  \
    \              break\n            }\n            postfix_length--\n        }\n\
    \        if(postfix_length == 0){\n            break\n        }\n        string\
    \ = string.substr(postfix_length)\n    }\n    return palindrome\n}\n", "    var\
    \ reversed_string = \"\";\n    var prefix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix = \"\";\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length =\
    \ 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length =\
    \ 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length =\
    \ 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length =\
    \ 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length =\
    \ 0;\n    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n\
    \    var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n  \
    \  var longest_postfix_length = 0;\n    var longest_postfix_length = 0;\n    var\
    \ longest_postfix_", "    let reversed_string = string.reverse ();\n    let prefix_string\
    \ = string.slice (0, reversed_string.lastIndexOf (string));\n    return prefix_string\
    \ + reversed_string;\n}\n", "    var palindrome = \"\";\n    var palindrome_length\
    \ = 0;\n    var prefix_length = 0;\n    var prefix_string = \"\";\n    var suffix_length\
    \ = 0;\n    var suffix_string = \"\";\n    var reverse_string = \"\";\n    var\
    \ reverse_length = 0;\n    var reverse_string = \"\";\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_string = \"\";\n    var palindrome_length = 0;\n    var palindrome_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_string = \"\";\n\
    \    var palindrome_length = 0;\n    var palindrome_string = \"\";\n    var palindrome_length\
    \ = 0;\n    var palindrome_string = \"\";\n    var palindro", "    var palindrome\
    \ = string;\n    var postfix = \"\";\n    var suffix;\n    var reverse;\n    var\
    \ i;\n    for(i = string.length - 1; i >= 0; i--){\n        postfix = postfix\
    \ + string[i];\n    }\n    postfix = postfix.split(\"\").reverse().join(\"\");\n\
    \    for(i = string.length - 1; i >= 0; i--){\n        suffix = string.substr(0,\
    \ i);\n        reverse = suffix + postfix;\n        if(reverse == palindrome){\n\
    \            palindrome = reverse;\n        }\n    }\n    return palindrome;\n\
    }\n", "    var reversed_string = \"\";\n    var prefix_length = 0;\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_index = 0;\n    var longest_postfix_string = \"\
    \";\n    \n    for(var i = 0; i < string.length; i++){\n        var char = string[i];\n\
    \        var postfix_length = string.length - i;\n        \n        if(postfix_length\
    \ >= longest_postfix_length){\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = i;\n            longest_postfix_string =\
    \ string.substr(i, postfix_length);\n        }\n        \n        if(char == string[postfix_length]){\n\
    \            reversed_string += char;\n        }\n    }\n    \n    string += reversed_string;\n\
    \    \n    for(var i = 0; i < string.length; i++){\n        var char = string[i];\n\
    \        var postfix_length = string.length - i;\n        \n        if(postfix_length\
    \ >= longest_postfix_length){\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = i;\n            longest_postfix_string =\
    \ string.substr(i, postfix_length);\n        }\n        \n        if(char == string[postfix_length]){\n\
    \            string += char;\n        }\n    }\n    \n    return string;\n}\n",
  "    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length =\
    \ 0,\n        prefix_string = \"\";\n\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] === string[string.length -1 -i]){\n            suffix_length++;\n\
    \        }else{\n            prefix_length++;\n        }\n    }\n\n    prefix_string\
    \ = string.substr(0, prefix_length);\n    suffix_string = string.substr(string.length\
    \ - suffix_length);\n\n    for(var i = 0; i < suffix_length; i++){\n        palindrome\
    \ += string[string.length - suffix_length -i];\n    }\n\n    palindrome += prefix_string;\n\
    \n    return palindrome;\n}\n", "  var reversed_string = string\n  var palindrome\
    \ = \"\"\n  var prefix_length = 0\n  var suffix_length = 0\n  var prefix_postfix\
    \ = \"\"\n  var suffix_postfix = \"\"\n  \n  while(prefix_length < string.length){\n\
    \    prefix_postfix = string.substr(prefix_length, string.length)\n    suffix_length\
    \ = string.length - prefix_length\n    suffix_postfix = string.substr(0, suffix_length)\n\
    \    \n    if(prefix_postfix.toLowerCase() === suffix_postfix.toLowerCase()){\n\
    \      palindrome += prefix_postfix\n      reversed_string = reversed_string.substr(0,\
    \ reversed_string.length - suffix_length) + reversed_string.substr(reversed_string.length\
    \ - suffix_length, string.length)\n      prefix_length += suffix_length\n    \
    \  suffix_length = 0\n    }else{\n      prefix_length += suffix_length\n    }\n\
    \  }\n  \n  return palindrome\n}\n", "    var reversed = \"\";\n    var longest\
    \ = 0;\n    var longestLength = 0;\n    var longestPalindrome = \"\";\n    for(var\
    \ i = 0; i < string.length; i++){\n        var currentChar = string[i];\n    \
    \    var currentLength = string.length;\n        var currentPalindrome = \"\"\
    ;\n        while(currentLength > 0){\n            var currentChar = string[currentLength\
    \ - 1];\n            var currentLength = currentLength - 1;\n            currentPalindrome\
    \ += currentChar;\n        }\n        if(currentPalindrome == currentPalindrome.toLowerCase()){\n\
    \            currentPalindrome = currentPalindrome.toUpperCase();\n        }\n\
    \        if(currentPalindrome == currentPalindrome.toUpperCase()){\n         \
    \   currentPalindrome = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome\
    \ = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome\
    \ = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome\
    \ = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome\
    \ = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome\
    \ = currentPalindrome.toLowerCase();\n        }\n        if(currentPalindrome\
    \ == currentPalindrome){\n            currentPalindrome = currentPalindrome.toUpperCase();\n\
    \        }\n        if(currentPalindrome == currentPalindrome){\n            currentPalindrome",
  "    var postfix = string.split(\"\").reverse().join(\"\");\n    var palindrome\
    \ = string.split(\"\").reverse().join(\"\") + postfix;\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ palindrome_length = 0;\n    var palindrome_postfix = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_postfix\
    \ = \"\";\n    var palindrome_suffix_postfix = \"\";\n    \n    for(var i = 0;\
    \ i < string.length; i++){\n        prefix_length = i;\n        suffix_length\
    \ = string.length - i;\n        prefix_postfix = string.substr(i, prefix_length);\n\
    \        suffix_postfix = string.substr(string.length - suffix_length, string.length\
    \ - suffix_length);\n        \n        palindrome_length = prefix_postfix.length;\n\
    \        palindrome_postfix = suffix_postfix.substr(0, palindrome_length);\n \
    \       palindrome_prefix_length = prefix_postfix.length;\n        palindrome_suffix_length\
    \ = suffix_postfix.length;\n        palindrome_prefix_postfix = prefix_postfix.substr(0,\
    \ palindrome_prefix_length);\n        palindrome_suffix_postfix = suffix_postfix.substr(0,\
    \ palindrome_suffix_length);\n        \n        if(palindrome_postfix === palindrome_prefix_postfix.reverse().toString()){\n\
    \            palindrome = string.substr(0, i) + palindrome_postfix.reverse().toString()\
    \ + string.substr(string.length - suffix_length);\n            break;\n      \
    \  }\n    }\n    \n    return palindrome;\n}\n", "    var palindrome = \"\";\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_reverse\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var palindrome_length = 0;\n  \
    \  var palindrome_prefix_length = 0;\n    var palindrome_suffix_length = 0;\n\
    \    var palindrome_prefix_reverse = \"\";\n    var palindrome_suffix_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse = 0;\n    var palindrome_suffix_length_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n    var palindrome_suffix_length_reverse_reverse\
    \ = 0;\n    var palindrome_prefix_reverse_reverse_reverse = \"\";\n    var palindrome_suffix_reverse_reverse_reverse\
    \ = \"\";\n    var palindrome_prefix_length_reverse_reverse = 0;\n", "    var\
    \ palindrome = string;\n    var prefix_length = 0;\n    var suffix_length = 0;\n\
    \    var palindrome_length = 0;\n    var reversed_string = \"\";\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var palindrome_suffix = \"\";\n\
    \    var palindrome_prefix = \"\";\n    var palindrome_suffix2 = \"\";\n    var\
    \ palindrome_prefix2 = \"\";\n    var palindrome_suffix3 = \"\";\n    var palindrome_prefix3\
    \ = \"\";\n    var palindrome_suffix4 = \"\";\n    var palindrome_prefix4 = \"\
    \";\n    var palindrome_suffix5 = \"\";\n    var palindrome_prefix5 = \"\";\n\
    \    var palindrome_suffix6 = \"\";\n    var palindrome_prefix6 = \"\";\n    var\
    \ palindrome_suffix7 = \"\";\n    var palindrome_prefix7 = \"\";\n    var palindrome_suffix8\
    \ = \"\";\n    var palindrome_prefix8 = \"\";\n    var palindrome_suffix9 = \"\
    \";\n    var palindrome_prefix9 = \"\";\n    var palindrome_suffix10 = \"\";\n\
    \    var palindrome_prefix10 = \"\";\n    var palindrome_suffix11 = \"\";\n  \
    \  var palindrome_prefix11 = \"\";\n    var palindrome_suffix12 = \"\";\n    var\
    \ palindrome_prefix12 = \"\";\n    var palindrome_suffix13 = \"\";\n    var palindrome_prefix13\
    \ = \"\";\n    var palindrome_suffix14 = \"\";\n    var palindrome_prefix14 =\
    \ \"\";\n    var palindrome_suffix15 = \"\";\n    var palindrome_prefix15 = \"\
    \";\n    var palindrome_suffix16 = \"\";\n    var palindrome_prefix16 = \"\";\n\
    \    var palindrome_suffix17 = \"\";\n    var palindrome_prefix17 = \"\";\n  \
    \  var palindrome_suffix18 = \"\";\n    var palindrome_prefix18 = \"\";\n    var\
    \ palindrome_suffix19 = \"\";\n    var palindrome_prefix19 = \"\";\n    var palindrome_suffix20\
    \ = \"\";\n    var palindrome_prefix20 = \"\";\n    var palindrome_suffix21 =\
    \ \"\";\n    var palindrome_prefix21 = \"\";\n    var palindrome_suffix22 = \"\
    \";\n    var palindrome_prefix22 = \"\";\n    var palindrome_suffix23 = \"\";\n\
    \    var palindrome_prefix23 = \"\";\n    var palindrome_suffix24 = \"\";\n  \
    \  var palindrome_prefix24 = \"\";\n    var palindrome_suffix25 = \"\";\n    var\
    \ palindrome_prefix25 = \"\";\n    var palindrome_suffix26 = \"\";\n    var palindrome_prefix26\
    \ = \"\";\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var\
    \ suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string = \"\
    \";\n    var palindrome_length = 0;\n    var palindrome_prefix = \"\";\n    var\
    \ palindrome_suffix = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_suffix_length\
    \ = 0;\n    var palindrome_prefix_string = \"\";\n    var palindrome_suffix_string\
    \ = \"\";\n    \n    prefix_length = string.length;\n    suffix_length = string.length\
    \ - 1;\n    \n    prefix_string = string.substr(0,prefix_length);\n    suffix_string\
    \ = string.substr(suffix_length);\n    \n    palindrome_length = prefix_string.length\
    \ + suffix_string.length;\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    var palindrome = \"\";\n  \
    \  var palindrome_index = 0;\n    var palindrome_length = string.length;\n   \
    \ var palindrome_prefix = \"\";\n    var palindrome_suffix = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_reverse\
    \ = \"\";\n    var palindrome_suffix_reverse = \"\";\n    var palindrome_prefix_reverse_index\
    \ = 0;\n    var palindrome_suffix_reverse_index = 0;\n    var palindrome_prefix_reverse_index2\
    \ = 0;\n    var palindrome_suffix_reverse_index2 = 0;\n    var palindrome_prefix_reverse_index3\
    \ = 0;\n    var palindrome_suffix_reverse_index3 = 0;\n    var palindrome_prefix_reverse_index4\
    \ = 0;\n    var palindrome_suffix_reverse_index4 = 0;\n    var palindrome_prefix_reverse_index5\
    \ = 0;\n    var palindrome_suffix_reverse_index5 = 0;\n    var palindrome_prefix_reverse_index6\
    \ = 0;\n    var palindrome_suffix_reverse_index6 = 0;\n    var palindrome_prefix_reverse_index7\
    \ = 0;\n    var palindrome_suffix_reverse_index7 = 0;\n    var palindrome_prefix_reverse_index8\
    \ = 0;\n    var palindrome_suffix_reverse_index8 = 0;\n    var palindrome_prefix_reverse_index9\
    \ = 0;\n    var palindrome_suffix_reverse_index9 = 0;\n    var palindrome_prefix_reverse_index10\
    \ = 0;\n    var palindrome_suffix_reverse_index10 = 0;\n    var palindrome_prefix_reverse_index11\
    \ = 0;\n    var palindrome_suffix_reverse_index11 = 0;\n    var palindrome_prefix_reverse_index12\
    \ = 0;\n    var palindrome_suffix_reverse_index12 = 0;\n    var palindrome_prefix_reverse_index13\
    \ = 0;\n    var palindrome_suffix_reverse_index13 = 0;\n    var palindrome_prefix_reverse_index14\
    \ = 0;\n    var palindrome_suffix_reverse_index14 = 0;\n    var palindrome_prefix_reverse_index15\
    \ = 0;\n    var palindrome_suffix_reverse_index15 = 0;\n    var palindrome_prefix_reverse_index16\
    \ = 0;\n    var palindrome_suffix_reverse_index16 = 0;\n    var palindrome_prefix_reverse_index17\
    \ = 0;\n    var palindrome_suffix_reverse_index17 = 0;\n    var palindrome_prefix_reverse_index18\
    \ = 0;\n    var palindrome_suffix_reverse_index18 = 0;\n    var palindrome_prefix_reverse_index19\
    \ = 0;\n    var palindrome_suffix_reverse_index19 = 0;\n    var palindrome_prefix_reverse",
  "    var reversed_string = \"\";\n    var longest_postfix = \"\";\n    var longest_postfix_length\
    \ = 0;\n    var longest_postfix_index = 0;\n    var longest_postfix_index_length\
    \ = 0;\n    var longest_postfix_index_count = 0;\n    \n    for(var i = 0; i <\
    \ string.length; i++){\n        var current_char = string.charAt(i);\n       \
    \ var current_char_length = string.length;\n        var current_char_index = i;\n\
    \        \n        while(current_char_index >= 0){\n            var current_char_length--;\n\
    \            var current_char_index--;\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char_index += current_char_length;\n        \
    \        current_char_length = 0;\n            }\n            \n            if(current_char_index\
    \ < 0){\n                current_char", "  var palindrome = string;\n  var prefix_length\
    \ = 0;\n  var suffix_length = 0;\n  var prefix_postfix = \"\";\n  var suffix_postfix\
    \ = \"\";\n  var prefix_postfix_reverse = \"\";\n  var suffix_postfix_reverse\
    \ = \"\";\n  var prefix_postfix_reverse_length = 0;\n  var suffix_postfix_reverse_length\
    \ = 0;\n  var prefix_postfix_reverse_string = \"\";\n  var suffix_postfix_reverse_string\
    \ = \"\";\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffix_postfix_reverse_string_length\
    \ = 0;\n  var prefix_postfix_reverse_string_length = 0;\n  var suffi", "  var\
    \ palindrome = \"\";\n  var postfix = \"\";\n  var prefix_length = 0;\n  var suffix_length\
    \ = 0;\n  var palindrome_length = 0;\n  var palindrome_start = 0;\n  var palindrome_end\
    \ = 0;\n  var palindrome_suffix = 0;\n  var palindrome_prefix_length = 0;\n  var\
    \ palindrome_suffix_length = 0;\n  var palindrome_prefix_start = 0;\n  var palindrome_suffix_start\
    \ = 0;\n  var palindrome_prefix_end = 0;\n  var palindrome_suffix_end = 0;\n \
    \ var palindrome_prefix_suffix = 0;\n  var palindrome_suffix_suffix = 0;\n  var\
    \ palindrome_prefix_suffix_length = 0;\n  var palindrome_suffix_suffix_length\
    \ = 0;\n  var palindrome_prefix_suffix_start = 0;\n  var palindrome_suffix_suffix_start\
    \ = 0;\n  var palindrome_prefix_suffix_end = 0;\n  var palindrome_suffix_suffix_end\
    \ = 0;\n  var palindrome_prefix_suffix_suffix = 0;\n  var palindrome_suffix_suffix_suffix\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_length = 0;\n  var palindrome_suffix_suffix_suffix_length\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_start = 0;\n  var palindrome_suffix_suffix_suffix_start\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_end = 0;\n  var palindrome_suffix_suffix_suffix_end\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix = 0;\n  var palindrome_suffix_suffix_suffix_suffix\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix_length = 0;\n  var palindrome_suffix_suffix_suffix_suffix_length\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix_start = 0;\n  var palindrome_suffix_suffix_suffix_suffix_start\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix_end = 0;\n  var palindrome_suffix_suffix_suffix_end\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix_suffix = 0;\n  var palindrome_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n  var palindrome_prefix_suffix_suffix_suffix_suffix_length = 0;\n  var\
    \ palindrome_suffix_suffix_suffix_suffix_suffix_length = 0;\n  var palindrome_prefix_suffix_suffix_suffix_suffix_start\
    \ = 0;\n  var palindrome_suffi", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        prefix_reversed = \"\",\n        suffix_reversed\
    \ = \"\";\n\n    string = string.toLowerCase();\n\n    prefix_length = string.length\
    \ - 1;\n    suffix_length = string.length - 1;\n\n    prefix_reversed = string[prefix_length];\n\
    \    suffix_reversed = string[suffix_length];\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === prefix_reversed){\n            prefix_length--;\n\
    \            prefix_reversed = string[prefix_length];\n        }\n        else\
    \ if(string[i] === suffix_reversed){\n            suffix_length--;\n         \
    \   suffix_reversed = string[suffix_length];\n        }\n        else{\n     \
    \       palindrome += string[i];\n        }\n    }\n\n    return palindrome +\
    \ prefix_reversed + suffix_reversed;\n}\n", "  if(string === \"\"){\n    return\
    \ \"\";\n  }\n  var longestPalindrome = \"\";\n  var longestPalindromeLength =\
    \ 0;\n  var longestPalindromePrefix = \"\";\n  var longestPalindromeSuffix = \"\
    \";\n  var longestPalindromePostfix = \"\";\n  var longestPalindromePostfixLength\
    \ = 0;\n  var longestPalindromePostfixPrefix = \"\";\n  var longestPalindromePostfixSuffix\
    \ = \"\";\n  var longestPalindromePostfixPostfix = \"\";\n  var longestPalindromePostfixPostfixLength\
    \ = 0;\n  var longestPalindromePostfixPostfixPrefix = \"\";\n  var longestPalindromePostfixPostfixSuffix\
    \ = \"\";\n  var longestPalindromePostfixPostfixPostfix = \"\";\n  var longestPalindromePostfixPostfixPostfixLength\
    \ = 0;\n  var longestPalindromePostfixPostfixPostfixPrefix = \"\";\n  var longestPalindromePostfixPostfixPostfixSuffix\
    \ = \"\";\n  var longestPalindromePostfixPostfixPostfixPostfix = \"\";\n  var\
    \ longestPalindromePostfixPostfixPostfixPostfixLength = 0;\n  var longestPalindromePostfixPostfixPostfixPostfixPrefix\
    \ = \"\";\n  var longestPalindromePostfixPostfixPostfixPostfixSuffix = \"\";\n\
    \  var longestPalindromePostfixPostfixPostfixPostfixPostfix = \"\";\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixPrefix = \"\"\
    ;\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixSuffix = \"\";\n\
    \  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfix = \"\";\n \
    \ var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixLength = 0;\n\
    \  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPrefix = \"\"\
    ;\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixSuffix = \"\
    \";\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfix\
    \ = \"\";\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixLength\
    \ = 0;\n  var longestPalindromePostfixPostfixPostfixPostfixPostfixPostfixPostfixPrefi",
  "    var postfix = string.split('').reverse().join('');\n    return string.substr(0,\
    \ string.length - postfix.length) + postfix + string.substr(string.length - postfix.length);\n\
    }\n", "    var palindrome = string;\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var reverse_string = \"\";\n    var reverse_prefix_length = 0;\n \
    \   var reverse_suffix_length = 0;\n    var reverse_string_index = 0;\n    var\
    \ reverse_suffix_index = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var prefix_string_index = 0;\n    var suffix_string_index = 0;\n\
    \    \n    while(true){\n        prefix_length = palindrome.length-prefix_string_index;\n\
    \        suffix_length = palindrome.length-suffix_string_index;\n        \n  \
    \      if(prefix_length < suffix_length){\n            prefix_string_index++;\n\
    \            prefix_string = string.substr(0,prefix_string_index);\n        }\n\
    \        else{\n            suffix_string_index++;\n            suffix_string\
    \ = string.substr(0,suffix_string_index);\n        }\n        \n        if(prefix_string.length\
    \ == suffix_string.length){\n            \n            if(prefix_string.length\
    \ == 0){\n                reverse_prefix_length++;\n                reverse_string\
    \ = string.substr(0,reverse_prefix_length);\n            }\n            else{\n\
    \                reverse_suffix_length++;\n                reverse_string = string.substr(reverse_prefix_length,reverse_suffix_length);\n\
    \            }\n            \n            if(reverse_string == palindrome){\n\
    \                \n                reverse_string_index++;\n                \n\
    \                if(palindrome.length == reverse_string_index){\n            \
    \        palindrome = string.substr(reverse_prefix_length,reverse_string_index);\n\
    \                    break;\n                }\n                else{\n      \
    \              palindrome = string.substr(reverse_prefix_length,reverse_string_index);\n\
    \                }\n            }\n            else{\n                \n     \
    \           reverse_string_index++;\n                \n                if(palindrome.length\
    \ == reverse_string_index){\n                    palindrome = string.substr(reverse_prefix_length,reverse_string_index);\n\
    \                    break;\n                }\n                else{\n      \
    \              palindrome = string.substr(reverse_prefix_length,reverse_string_index);\n\
    \                }\n            }\n        }\n        else{\n            \n  \
    \          prefix_string_index++;\n            prefix_string = string.substr(0,prefix_string_index);\n\
    \            \n            suffix_string_index++;\n            suffix_string =\
    \ string.substr(0,suffix_string_index);\n            \n            if(prefix_string.length\
    \ == suffix_string.length){\n                \n                if(prefix_string.length\
    \ == 0){\n                    reverse_prefix_length++;\n                    reverse_string\
    \ = string.substr(0,reverse_prefix_length);\n                }\n             \
    \   else{\n                    reverse_suffix_length++;\n                    reverse_string\
    \ = string.substr(reverse_prefix_length,reverse_suffix_length);\n            \
    \    }\n                \n                if(reverse_string == palindrome){\n\
    \                    \n                    reverse_string_index++;\n         \
    \           ", "    var reversed_string = string\n    var palindrome = \"\"\n\
    \    var prefix_length = 0\n    var suffix_length = 0\n    var palindromic_suffix\
    \ = \"\"\n    var palindromic_prefix = \"\"\n    var palindromic_prefix_length\
    \ = 0\n    var palindromic_suffix_length = 0\n    var palindromic_suffix_reversed_string\
    \ = \"\"\n    var palindromic_prefix_reversed_string = \"\"\n    var palindromic_prefix_reversed_string_length\
    \ = 0\n    var palindromic_suffix_reversed_string_length = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_suffix_reversed_string_index = 0\n    var palindromic_prefix_reversed_string_index\
    \ = 0\n    var palindromic_", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var palindrome_length = 0;\n    var palindrome_prefix = \"\";\n\
    \    var palindrome_suffix = \"\";\n    var palindrome_prefix_length = 0;\n  \
    \  var palindrome_suffix_length = 0;\n    var palindrome_prefix_string = \"\"\
    ;\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palindrome_prefix_length\
    \ = 0;\n    var palindrome_suffix_length = 0;\n    var palindrome_prefix_string\
    \ = \"\";\n    var palindrome_suffix_string = \"\";\n    var palin", "    var\
    \ palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n\
    \    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var prefix_reverse\
    \ = \"\";\n    var suffix_reverse = \"\";\n    var prefix_postfix_reverse = \"\
    \";\n    var suffix_postfix_reverse = \"\";\n    var prefix_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix = \"\";\n    var prefix_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_length = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix = \"\";\n  \
    \  var prefix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var\
    \ suffix_postfix_reverse_postfix_reverse_postfix_reverse = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_length\
    \ = 0;\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var suffix_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse_postfix_reverse\
    \ = \"\";\n    var prefix_postfix_reverse_postfix_reverse_postfix_reverse_", " \
    \   var reversed_string = string\n    var palindrome = \"\"\n    var prefix_length\
    \ = 0\n    var suffix_length = 0\n    while(true){\n        prefix_length = string.lastIndexOf(\"\
    c\", prefix_length + 1)\n        suffix_length = string.lastIndexOf(\"a\", suffix_length\
    \ + 1)\n        if(prefix_length == -1 || suffix_length == -1){\n            break\n\
    \        }\n        palindrome += string.substring(prefix_length, suffix_length)\n\
    \        reversed_string += string.substring(suffix_length, prefix_length)\n \
    \   }\n    return palindrome + reversed_string\n}\n", "    var reversed_string\
    \ = string\n    var prefix_length = 0\n    var postfix_length = 0\n    var palindrome\
    \ = \"\"\n    while(postfix_length < string.length){\n        postfix_length =\
    \ string.indexOf(string[postfix_length], postfix_length + 1)\n        if(postfix_length\
    \ == -1){\n            break\n        }\n        prefix_length = string.indexOf(string[prefix_length],\
    \ prefix_length + 1)\n        if(prefix_length == -1){\n            break\n  \
    \      }\n        palindrome = string.substr(0, prefix_length) + string[prefix_length]\
    \ + string.substr(postfix_length, reversed_string.length)\n        reversed_string\
    \ = reversed_string.substr(0, postfix_length) + reversed_string[postfix_length]\n\
    \    }\n    return palindrome\n}\n", "    var palindrome = \"\";\n    var suffix;\n\
    \    var prefix;\n    var suffixLength;\n    var prefixLength;\n    var suffixIndex;\n\
    \    var prefixIndex;\n    var suffixChar;\n    var prefixChar;\n    var i;\n\
    \    var j;\n    var k;\n    var l;\n    var m;\n    var n;\n    var isPalindrome;\n\
    \    \n    string = string.toLowerCase();\n    \n    suffixLength = string.length;\n\
    \    prefixLength = string.length - 1;\n    \n    for(i = 0; i < suffixLength;\
    \ i++){\n        suffix = string.substring(i, i + 1);\n        \n        for(j\
    \ = i; j < string.length; j++){\n            prefixChar = string.charAt(j);\n\
    \            \n            for(k = j; k < string.length; k++){\n             \
    \   prefixChar = string.charAt(k);\n                \n                isPalindrome\
    \ = true;\n                \n                for(l = k; l < string.length; l++){\n\
    \                    suffixChar = string.charAt(l);\n                    \n  \
    \                  if(suffixChar !== prefixChar){\n                        isPalindrome\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                \n                if(isPalindrome){\n              \
    \      if(prefix === \"\"){\n                        prefix = prefixChar;\n  \
    \                  }\n                    \n                    if(suffix ===\
    \ \"\"){\n                        suffix = suffixChar;\n                    }\n\
    \                    \n                    if(prefix === suffix){\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n        \n        if(prefix === \"\"){\n            prefix = suffix;\n\
    \        }\n        \n        if(suffix === \"\"){\n            suffix = prefix;\n\
    \        }\n        \n        palindrome += prefix;\n        \n        if(suffix\
    \ !== prefix){\n            palindrome += suffix;\n        }\n    }\n    \n  \
    \  return palindrome;\n}\n", "    var palindrome = \"\",\n        prefix_length\
    \ = 0,\n        suffix_length = 0,\n        prefix_reversed = \"\",\n        suffix_reversed\
    \ = \"\";\n\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length -1 -i]){\n            palindrome += string[i];\n  \
    \          prefix_length++;\n        }\n        else{\n            suffix_length++;\n\
    \        }\n    }\n\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length -1 -i]){\n            suffix_reversed += string[i];\n\
    \        }\n        else{\n            prefix_reversed += string[i];\n       \
    \ }\n    }\n\n    prefix_reversed = prefix_reversed.split(\"\").reverse().join(\"\
    \");\n    suffix_reversed = suffix_reversed.split(\"\").reverse().join(\"\");\n\
    \n    for(var i = 0; i < suffix_length; i++){\n        palindrome += prefix_reversed\
    \ + suffix_reversed;\n    }\n\n    return palindrome;\n}\n", "    var postfix\
    \ = string.substr(0, string.length - 1);\n    var reversed_postfix = reverse(postfix);\n\
    \    return string + reversed_postfix;\n}\n", "    var palindrome = \"\",\n  \
    \      prefix_length = 0,\n        suffix_length = 0,\n        prefix_postfix\
    \ = \"\",\n        suffix_postfix = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            palindrome\
    \ += string[i];\n        }\n    }\n\n    prefix_length = string.length - palindrome.length;\n\
    \    suffix_length = palindrome.length;\n\n    for(var i = 0; i < prefix_length;\
    \ i++){\n        prefix_postfix += string[i];\n    }\n\n    for(var i = 0; i <\
    \ suffix_length; i++){\n        suffix_postfix += string[string.length - 1 - i];\n\
    \    }\n\n    return prefix_postfix + suffix_postfix + palindrome;\n}\n", "  var\
    \ longest = find_longest_palindrome(string);\n  var reversed = string+reverse(string,longest);\n\
    \  return reversed;\n}\n", "    var palindrome = string;\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var reversed_string = \"\";\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            suffix_length++;\n        }\n        else{\n         \
    \   prefix_length++;\n        }\n    }\n    for(var i = 0; i < suffix_length;\
    \ i++){\n        reversed_string += string[string.length -1 -i];\n    }\n    for(var\
    \ i = 0; i < prefix_length; i++){\n        reversed_string += string[string.length\
    \ -1 -i];\n    }\n    palindrome += reversed_string;\n    return palindrome;\n\
    }\n", "    var palindrome = \"\",\n        prefix_length = 0,\n        suffix_length\
    \ = 0,\n        suffix_start_index = 0,\n        suffix_end_index = 0;\n\n   \
    \ for(var i = 0; i < string.length; i++){\n        var character = string[i];\n\
    \        if(character == string[string.length - 1 - i]){\n            suffix_start_index\
    \ = i;\n            suffix_end_index = string.length - 1 - i;\n            suffix_length\
    \ = suffix_end_index - suffix_start_index;\n        }\n    }\n\n    prefix_length\
    \ = suffix_start_index - suffix_length;\n    prefix_length = prefix_length < 0\
    \ ? 0 : prefix_length;\n\n    for(var i = 0; i < string.length; i++){\n      \
    \  var character = string[i];\n        if(character == string[string.length -\
    \ 1 - i]){\n            suffix_start_index = i;\n            suffix_end_index\
    \ = string.length - 1 - i;\n            suffix_length = suffix_end_index - suffix_start_index;\n\
    \        }\n    }\n\n    for(var i = 0; i < prefix_length; i++){\n        palindrome\
    \ += string[i];\n    }\n\n    for(var i = 0; i < suffix_length; i++){\n      \
    \  palindrome += string[suffix_start_index + i];\n    }\n\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var prefix_postfix = \"\";\n    var suffix_postfix = \"\";\n    var\
    \ postfix_length = 0;\n    var postfix_postfix = \"\";\n    var postfix_reverse\
    \ = \"\";\n    var postfix_reverse_length = 0;\n    var postfix_reverse_postfix\
    \ = \"\";\n    var postfix_reverse_postfix_length = 0;\n    var postfix_reverse_postfix_postfix\
    \ = \"\";\n    var postfix_reverse_postfix_postfix_length = 0;\n    var postfix_reverse_postfix_postfix_postfix\
    \ = \"\";\n    var postfix_reverse_postfix_postfix_postfix_length = 0;\n    var\
    \ postfix_reverse_postfix_postfix_postfix_postfix = \"\";\n    var postfix_reverse_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix = \"\"\
    ;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_length = 0;\n\
    \    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var postfix_reverse_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    var reversed_string = string\n    var prefix_length = 0\n    var postfix_length\
    \ = 0\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            postfix_length++\n        }\n        else{\n         \
    \   prefix_length++\n        }\n    }\n    var palindrome = string.substr(0, prefix_length)\
    \ + string[string.length -1 -i]+ string.substr(string.length -1 -i)\n    return\
    \ palindrome\n}\n", "    string = string.toLowerCase();\n    string = string.replace(/\\\
    W/g,'');\n    var palindrome = string;\n    var reversed_string = '';\n    var\
    \ prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string = '';\n\
    \    var suffix_string = '';\n    var i = 0;\n    var j = 0;\n    for(i = 0; i\
    \ < string.length; i++){\n        if(string[i] === string[string.length -1 -i]){\n\
    \            suffix_length++;\n            suffix_string += string[i];\n     \
    \   }else{\n            prefix_length++;\n            prefix_string += string[i];\n\
    \        }\n    }\n    for(i = 0; i < string.length; i++){\n        if(string[i]\
    \ === string[string.length -1 -i]){\n            reversed_string += string[i];\n\
    \        }else{\n            reversed_string += string[string.length -1 -i];\n\
    \        }\n    }\n    if(prefix_length > suffix_length){\n        prefix_string\
    \ = prefix_string.substr(0,prefix_length-1);\n    }\n    if(suffix_length > prefix_length){\n\
    \        suffix_string = suffix_string.substr(0,suffix_length-1);\n    }\n   \
    \ for(i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            palindrome += string[i];\n        }else{\n           \
    \ palindrome += string[string.length -1 -i];\n        }\n    }\n    palindrome\
    \ = palindrome+reversed_string;\n    return palindrome;\n}\n", "    var palindrome\
    \ = \"\",\n        prefix_length = 0,\n        suffix_length = 0,\n        prefix_postfix\
    \ = \"\",\n        suffix_postfix = \"\";\n\n    for(var i = 0; i < string.length;\
    \ i++){\n        prefix_length += string[i];\n        suffix_length += string[string.length\
    \ - 1 - i];\n        prefix_postfix += string[i];\n        suffix_postfix += string[string.length\
    \ - 1 - i];\n    }\n\n    var palindrome_length = prefix_length + suffix_length;\n\
    \n    for(var i = 0; i < palindrome_length; i++){\n        var char = string[i];\n\
    \        var reversed_char = string[string.length - 1 - i];\n        if(char ===\
    \ reversed_char){\n            palindrome += char;\n        }\n    }\n\n    return\
    \ palindrome + prefix_postfix + suffix_postfix;\n}\n", "  var palindrome = \"\"\
    ;\n  var prefix_length = 0;\n  var suffix_length = 0;\n  var prefix_string = \"\
    \";\n  var suffix_string = \"\";\n  var postfix_string = \"\";\n  var postfix_length\
    \ = 0;\n  var postfix_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var palindrome_length = 0;\n  var palindrome_string = \"\";\n  var\
    \ palindrome_length = 0;\n  var palindrome_string = \"\";\n  var palindrome_length\
    \ = 0;\n  var palindrome_string = \"\";\n  var palindrome_length = 0;\n  var palindrome_string\
    \ = \"\";\n  var ", "    var reversed_string = \"\";\n    var prefix_length =\
    \ 0;\n    var postfix_length = 0;\n    var palindrome = \"\";\n    \n    while(prefix_length\
    \ < string.length){\n        postfix_length = string.length - prefix_length;\n\
    \        palindrome = string.substr(prefix_length, postfix_length);\n        reversed_string\
    \ = reversed_string + palindrome;\n        prefix_length = postfix_length;\n \
    \   }\n    \n    return reversed_string;\n}\n", "    var palindrome = \"\";\n\
    \    var prefix_length = 0;\n    var suffix_length = 0;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    \n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_length++;\n\
    \        }\n        else{\n            suffix_length = 0;\n        }\n       \
    \ if(string[i] === string[string.length -1 -i]){\n            prefix_length++;\n\
    \        }\n        else{\n            prefix_length = 0;\n        }\n       \
    \ if(prefix_length < suffix_length){\n            prefix_string += string[i];\n\
    \        }\n        else{\n            suffix_string += string[i];\n        }\n\
    \    }\n    \n    prefix_string = prefix_string.reverse();\n    suffix_string\
    \ = suffix_string.reverse();\n    \n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] === string[string.length -1 -i]){\n            palindrome\
    \ += string[i];\n        }\n        else{\n            palindrome += string[i];\n\
    \        }\n    }\n    \n    palindrome += prefix_string + suffix_string;\n  \
    \  \n    return palindrome;\n}\n", "    var palindrome = \"\";\n    var prefix_length\
    \ = 0;\n    var suffix_length = 0;\n    var prefix_string = \"\";\n    var suffix_string\
    \ = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = string.length;\n\
    \    var m = string.length - 1;\n    var n = string.length - 2;\n    var prefix_length\
    \ = string.length - 1;\n    var suffix_length = string.length - 1;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n   \
    \ var k = 0;\n    var l = string.length;\n    var m = string.length - 1;\n   \
    \ var n = string.length - 2;\n    var prefix_length = string.length - 1;\n   \
    \ var suffix_length = string.length - 1;\n    var prefix_string = \"\";\n    var\
    \ suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ l = string.length;\n    var m = string.length - 1;\n    var n = string.length\
    \ - 2;\n    var prefix_length = string.length - 1;\n    var suffix_length = string.length\
    \ - 1;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ i = 0;\n    var j = 0;\n    var k = 0;\n    var l = string.length;\n    var\
    \ m = string.length - 1;\n    var n = string.length - 2;\n    var prefix_length\
    \ = string.length - 1;\n    var suffix_length = string.length - 1;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n   \
    \ var k = 0;\n    var l = string.length;\n    var m = string.length - 1;\n   \
    \ var n = string.length - 2;\n    var prefix_length = string.length - 1;\n   \
    \ var suffix_length = string.length - 1;\n    var prefix_string = \"\";\n    var\
    \ suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ l = string.length;\n    var m = string.length - 1;\n    var n = string.length\
    \ - 2;\n    var prefix_length = string.length - 1;\n    var suffix_length = string.length\
    \ - 1;\n    var prefix_string = \"\";\n    var suffix_string = \"\";\n    var\
    \ i = 0;\n    var j = 0;\n    var k = 0;\n    var l = string.length;\n    var\
    \ m = string.length - 1;\n    var n = string.length - 2;\n    var prefix_length\
    \ = string.length - 1;\n    var suffix_length = string.length - 1;\n    var prefix_string\
    \ = \"\";\n    var suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n   \
    \ var k = 0;\n    var l = string.length;\n    var m = string.length - 1;\n   \
    \ var n = string.length - 2;\n    var prefix_length = string.length - 1;\n   \
    \ var suffix_length = string.length - 1;\n    var prefix_string = \"\";\n    var\
    \ suffix_string = \"\";\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var\
    \ l = string.length;\n    var m = string.length - 1;\n    var n = string.length\
    \ - 2;\n    var prefix_length = string.length - 1;\n    var suffix_length = string.length\
    \ - 1;\n    var prefix_string = \"\";\n    var suffix_", "    var reversed = \"\
    \";\n    var longest = 0;\n    for(var i = 0; i < string.length; i++){\n     \
    \   var char = string.charAt(i);\n        var reversedChar = reverseString(char);\n\
    \        if(reversedChar == char){\n            longest = i;\n        }\n    \
    \    if(reversedChar.length > longest){\n            longest = reversedChar.length;\n\
    \        }\n    }\n    for(var i = 0; i < longest; i++){\n        reversed +=\
    \ string.charAt(i);\n    }\n    return reversed;\n}\n", "    var palindrome =\
    \ string;\n    var palindrome_length = string.length;\n    var palindrome_postfix\
    \ = \"\";\n    var palindrome_prefix_length = 0;\n    var palindrome_prefix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_length = 0;\n    var palindrome_prefix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_length = 0;\n    var palindrome_prefix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_length = 0;\n   \
    \ var palindrome_prefix_postfix_postfix_postfix_postfix = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix = \"\
    \";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_length = 0;\n \
    \   var palindrome_prefix_postfix_postfix_postfix_postfix_postfix = \"\";\n  \
    \  var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = 0;\n\
    \    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = \"\
    \";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    var palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    var palindrome_prefix_postfix_postfix_post", "    let reversed_string\
    \ = string\n    let prefix_length = 0\n    let suffix_length = 0\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ - 1 - i]){\n            suffix_length++\n        }\n        if(string[i] ===\
    \ string[string.length - 1 - i] && suffix_length >= prefix_length){\n        \
    \    reversed_string = reversed_string.slice(0, reversed_string.length - suffix_length)\
    \ + string[i] + reversed_string.slice(reversed_string.length - suffix_length)\n\
    \            suffix_length = 0\n            prefix_length++\n        }\n    }\n\
    \    return reversed_string\n}\n", "    var palindrome = string;\n    var reversed_string\
    \ = reverse(string);\n    var prefix_length = string.length - reversed_string.length;\n\
    \    var prefix_string = string.substr(0, prefix_length);\n    var postfix_string\
    \ = string.substr(prefix_length);\n    var postfix_length = postfix_string.length\
    \ - reversed_string.length;\n    var postfix_palindrome = postfix_string.substr(0,\
    \ postfix_length);\n    var postfix_reversed_string = reverse(postfix_palindrome);\n\
    \    var palindrome = prefix_string + postfix_reversed_string;\n    return palindrome;\n\
    }\n", "    var reversed_string = string\n    var palindrome = \"\"\n    var longest_postfix_index\
    \ = 0\n    var longest_postfix_length = 0\n    var longest_postfix_string = \"\
    \"\n    var longest_postfix_string_length = 0\n    var longest_postfix_string_start\
    \ = 0\n    var longest_postfix_string_end = 0\n    var longest_postfix_string_middle\
    \ = 0\n    var longest_postfix_string_middle_index = 0\n    var longest_postfix_string_middle_length\
    \ = 0\n    var longest_postfix_string_middle_start = 0\n    var longest_postfix_string_middle_end\
    \ = 0\n    var longest_postfix_string_middle_reversed = 0\n    var longest_postfix_string_middle_reversed_index\
    \ = 0\n    var longest_postfix_string_middle_reversed_length = 0\n    var longest_postfix_string_middle_reversed_start\
    \ = 0\n    var longest_postfix_string_middle_reversed_end = 0\n    var longest_postfix_string_middle_reversed_reversed\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_index = 0\n   \
    \ var longest_postfix_string_middle_reversed_reversed_length = 0\n    var longest_postfix_string_middle_reversed_reversed_start\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_end = 0\n    var\
    \ longest_postfix_string_middle_reversed_reversed_reversed = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_length\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_start\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_end =\
    \ 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_length\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_start\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_end\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_reversed_length\
    \ = 0\n    var longest_postfix_string_middle_reversed_reversed_reversed_reversed_reversed_start\
    \ = 0\n", "    var reversed_string = string\n    var palindrome = \"\"\n    var\
    \ prefix_length = 0\n    var suffix_length = 0\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] === string[string.length -1 -i]){\n            suffix_length++\n\
    \        }\n        else{\n            prefix_length++\n        }\n    }\n   \
    \ for(var i = 0; i < suffix_length; i++){\n        reversed_string = reversed_string\
    \ + string[prefix_length -1 -i] + string[string.length -1 -i]\n    }\n    palindrome\
    \ = reversed_string\n    return palindrome\n}\n", "    var palindrome = \"\",\n\
    \        postfix = \"\";\n    \n    while(string != \"\"){\n        postfix =\
    \ string.substr(0,string.length-1);\n        palindrome += postfix;\n        string\
    \ = string.substr(1);\n    }\n    \n    return palindrome;\n}\n", "    string\
    \ = string.toLowerCase();\n    var postfix = \"\";\n    var palindrome = \"\"\
    ;\n    var suffix;\n    var suffixLength;\n    var prefix;\n    var prefixLength;\n\
    \    var i;\n    var j;\n    var k;\n    var l;\n    var m;\n    var n;\n    var\
    \ longestPalindrome;\n    var longestPalindromeLength;\n    var longestPalindromeIndex;\n\
    \    var longestPalindromeLengthIndex;\n    var longestPalindromeLengthIndex2;\n\
    \    var longestPalindromeLengthIndex3;\n    var longestPalindromeLengthIndex4;\n\
    \    var longestPalindromeLengthIndex5;\n    var longestPalindromeLengthIndex6;\n\
    \    var longestPalindromeLengthIndex7;\n    var longestPalindromeLengthIndex8;\n\
    \    var longestPalindromeLengthIndex9;\n    var longestPalindromeLengthIndex10;\n\
    \    var longestPalindromeLengthIndex11;\n    var longestPalindromeLengthIndex12;\n\
    \    var longestPalindromeLengthIndex13;\n    var longestPalindromeLengthIndex14;\n\
    \    var longestPalindromeLengthIndex15;\n    var longestPalindromeLengthIndex16;\n\
    \    var longestPalindromeLengthIndex17;\n    var longestPalindromeLengthIndex18;\n\
    \    var longestPalindromeLengthIndex19;\n    var longestPalindromeLengthIndex20;\n\
    \    var longestPalindromeLengthIndex21;\n    var longestPalindromeLengthIndex22;\n\
    \    var longestPalindromeLengthIndex23;\n    var longestPalindromeLengthIndex24;\n\
    \    var longestPalindromeLengthIndex25;\n    var longestPalindromeLengthIndex26;\n\
    \    var longestPalindromeLengthIndex27;\n    var longestPalindromeLengthIndex28;\n\
    \    var longestPalindromeLengthIndex29;\n    var longestPalindromeLengthIndex30;\n\
    \    var longestPalindromeLengthIndex31;\n    var longestPalindromeLengthIndex32;\n\
    \    var longestPalindromeLengthIndex33;\n    var longestPalindromeLengthIndex34;\n\
    \    var longestPalindromeLengthIndex35;\n    var longestPalindromeLengthIndex36;\n\
    \    var longestPalindromeLengthIndex37;\n    var longestPalindromeLengthIndex38;\n\
    \    var longestPalindromeLengthIndex39;\n    var longestPalindromeLengthIndex40;\n\
    \    var longestPalindromeLengthIndex41;\n    var ", "  var reversed = string.replace(/[^a-zA-Z0-9]/g,\
    \ \"\").split(\"\").reverse().join(\"\");\n  return string + reversed + reversed;\n\
    }\n", "    var palindrome = \"\";\n    var longest = 0;\n    var prefix;\n   \
    \ var suffix;\n    var reverse;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var\
    \ f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var\
    \ f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var\
    \ f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var\
    \ f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;\n    var e;\n    var\
    \ f;\n    var g;\n    var h;\n    var i;\n    var j;\n    var k;\n    var l;\n\
    \    var m;\n    var n;\n    var o;\n    var p;\n    var q;\n    var r;\n    var\
    \ s;\n    var t;\n    var u;\n    var v;\n    var w;\n    var x;\n    var y;\n\
    \    var z;\n    var a;\n    var b;\n    var c;\n    var d;", "    var palindrome\
    \ = \"\";\n    var prefix_length = 0;\n    var suffix_length = 0;\n    var postfix_length\
    \ = 0;\n    var postfix = \"\";\n    var postfix_reverse = \"\";\n    var palindrome_reverse\
    \ = \"\";\n    var palindrome_reverse_length = 0;\n    var palindrome_length =\
    \ 0;\n    var palindrome_length_reverse = 0;\n    var palindrome_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_reverse = \"\";\n    var palindrome_length_postfix_reverse_length\
    \ = 0;\n    var palindrome_length_postfix_length = 0;\n    var palindrome_length_postfix_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_reverse = \"\";\n\
    \    var palindrome_length_postfix_length_postfix_reverse_length = 0;\n    var\
    \ palindrome_length_postfix_length_postfix_length = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_reverse\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_reverse_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_reverse\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_reverse_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_reverse\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_reverse_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_reverse\
    \ = \"\";\n    var palindrome_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_length_postfix_reverse_length\
    \ = 0;\n    var palindrome_length_postfix_length_postfix_length_postfix_length_",
  "    var reversed_string = string\n    var postfix_length = 0\n    var prefix_length\
    \ = 0\n    while(postfix_length < string.length){\n        var postfix = string.substr(postfix_length)\n\
    \        var reversed_postfix = reversed_string.substr(reversed_string.length\
    \ - postfix_length)\n        if(postfix == reversed_postfix){\n            postfix_length\
    \ = postfix_length + 1\n        }else{\n            postfix_length = postfix_length\
    \ + 1\n            prefix_length = prefix_length + 1\n        }\n    }\n    return\
    \ string.substr(0, prefix_length) + reversed_string\n}\n", "    var postfix =\
    \ string.split(\"\").reverse().join(\"\");\n    var palindrome = string.split(\"\
    \").reverse().join(\"\") + postfix;\n    return palindrome;\n}\n", "    var postfix\
    \ = string.substr(0, string.length - 1);\n    var reversed_postfix = reverse(postfix);\n\
    \    return string + reversed_postfix;\n}\n", "    var reversed_string = \"\"\
    ;\n    var longest_postfix_string = \"\";\n    var longest_postfix_string_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix = 0;\n    var longest_postfix_string_length_without_prefix\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_length = 0;\n    var\
    \ longest_postfix_string_length_without_prefix_length = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix = 0;\n\
    \    var longest_postfix_string_length_with_prefix_and_suffix_length = 0;\n  \
    \  var longest_postfix_string_length_without_prefix_and_suffix_length = 0;\n \
    \   var longest_postfix_string_length_with_prefix_and_suffix_and_prefix = 0;\n\
    \    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix =\
    \ 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_and_prefix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_length\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = 0;\n    var longest_postfix_string_length_without_prefix_and_suffix_and_prefix_and_suffix_and_prefix_and_suffix_and_prefix\
    \ = 0;\n    var longest_postfix_string_length_with_prefix_and_suffi", "    var\
    \ reversed_string = string.replace(/[^a-zA-Z0-9]/g, \"\").split(\"\").reverse().join(\"\
    \");\n    var postfix_length = string.length - reversed_string.length;\n    var\
    \ postfix = string.substr(0, postfix_length);\n    var palindrome = postfix +\
    \ reversed_string;\n    return palindrome;\n}\n", "    var palindrome = \"\",\n\
    \        length = string.length,\n        i;\n    for(i = 0; i < length; i++){\n\
    \        palindrome += string.charAt(i);\n    }\n    for(i = length - 1; i >=\
    \ 0; i--){\n        palindrome += string.charAt(i);\n    }\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var longestPalindrome = \"\";\n    var\
    \ longestPalindromeLength = 0;\n    var longestPalindromeIndex = 0;\n    var longestPalindromeSuffixIndex\
    \ = 0;\n    var longestPalindromeSuffixLength = 0;\n    var longestPalindromeSuffixStart\
    \ = 0;\n    var longestPalindromeSuffixEnd = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;\n    var longestPalindromeSuffixStartIndex\
    \ = 0;\n    var longestPalindromeSuffixEndIndex = 0;", "    var reversed_string\
    \ = \"\";\n    var prefix_length = 0;\n    var longest_postfix_length = 0;\n \
    \   var longest_postfix_index = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] === string[string.length -1 -i]){\n            reversed_string\
    \ += string[i];\n            prefix_length++;\n            if(prefix_length >\
    \ longest_postfix_length){\n                longest_postfix_length = prefix_length;\n\
    \                longest_postfix_index = i;\n            }\n        }\n    }\n\
    \    return reversed_string + string.substring(longest_postfix_index, string.length\
    \ -1 -i);\n}\n", "    var reversed_string = string.reverse ();\n    var palindrome\
    \ = string.slice (0, string.length / 2) + reversed_string;\n    return palindrome;\n\
    }\n", "    var palindrome = \"\";\n    var prefix_length = 0;\n    var suffix_length\
    \ = 0;\n    var postfix_length = 0;\n    var postfix_string = \"\";\n    var postfix_string_reverse\
    \ = \"\";\n    var postfix_string_prefix = \"\";\n    var postfix_string_suffix\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var postfix_string_prefix_reverse = \"\";\n    var postfix_string_suffix_reverse\
    \ = \"\";\n    var ", "    var reversed = \"\";\n    var longest = 0;\n    var\
    \ longestPostfix = 0;\n    var longestPrefix = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        var postfix = string.substr(i, string.length - i);\n        if(postfix\
    \ === postfix.toLowerCase()){\n            longestPostfix = Math.max(longestPostfix,\
    \ i);\n        }\n        if(postfix === postfix.toUpperCase()){\n           \
    \ longestPostfix = Math.max(longestPostfix, i);\n        }\n        if(postfix.substr(0,\
    \ 1) === postfix.substr(0, 1).toLowerCase()){\n            longestPrefix = Math.max(longestPrefix,\
    \ i);\n        }\n        if(postfix.substr(0, 1) === postfix.substr(0, 1).toUpperCase()){\n\
    \            longestPrefix = Math.max(longestPrefix, i);\n        }\n    }\n \
    \   for(var i = 0; i < string.length; i++){\n        var postfix = string.substr(i,\
    \ string.length - i);\n        if(postfix === postfix.toLowerCase()){\n      \
    \      longestPostfix = Math.max(longestPostfix, i);\n        }\n        if(postfix\
    \ === postfix.toUpperCase()){\n            longestPostfix = Math.max(longestPostfix,\
    \ i);\n        }\n        if(postfix.substr(0, 1) === postfix.substr(0, 1).toLowerCase()){\n\
    \            longestPrefix = Math.max(longestPrefix, i);\n        }\n        if(postfix.substr(0,\
    \ 1) === postfix.substr(0, 1).toUpperCase()){\n            longestPrefix = Math.max(longestPrefix,\
    \ i);\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n       \
    \ var postfix = string.substr(i, string.length - i);\n        if(postfix === postfix.toLowerCase()){\n\
    \            longestPostfix = Math.max(longestPostfix, i);\n        }\n      \
    \  if(postfix === postfix.toUpperCase()){\n            longestPostfix = Math.max(longestPostfix,\
    \ i);\n        }\n        if(postfix.substr(0, 1) === postfix.substr(0, 1).toLowerCase()){\n\
    \            longestPrefix = Math.max(longestPrefix, i);\n        }\n        if(postfix.substr(0,\
    \ 1) === postfix.substr(0, 1).toUpperCase()){\n            longestPrefix = Math.max(longestPrefix,\
    \ i);\n        }\n    }\n    for(var i = 0; i < string.length; i++){\n       \
    \ var postfix = string.substr(i, string.length - i);\n        if(postfix === postfix.toLowerCase()){\n\
    \            longestPostfix = Math.max(longestPostfix, i);\n        }\n      \
    \  if(postfix === postfix.toUpperCase()){\n            longestPostfix = Math.max(longestPostfix,\
    \ i);\n        }\n        if(postfix.substr(0, 1) === post", "    var reversed_string\
    \ = \"\";\n    var prefix_length = 0;\n    var postfix_length = 0;\n    var palindrome\
    \ = \"\";\n    \n    while(prefix_length < string.length){\n        postfix_length\
    \ = string.length - prefix_length;\n        reversed_string = string[postfix_length];\n\
    \        \n        while(postfix_length >= 0){\n            reversed_string +=\
    \ string[postfix_length--];\n        }\n        \n        if(reversed_string ==\
    \ string){\n            palindrome = string.slice(0, prefix_length) + reversed_string;\n\
    \            break;\n        }\n        \n        prefix_length++;\n    }\n  \
    \  \n    return palindrome;\n}\n", "    var reversed_string = string.replace(/[^a-zA-Z]/g,\
    \ \"\").split(\"\").reverse().join(\"\");\n    var prefix_string = string.substr(0,\
    \ string.length - reversed_string.length);\n    return prefix_string + reversed_string;\n\
    }\n", "  var reversed = string\n    .replace(/^./g,\"\")\n    .replace(/.$/g,\"\
    \")\n    .replace(/^(.)/g,function($1,$2){\n      return $2.split(\"\").reverse().join(\"\
    \");\n    });\n  return string + reversed;\n}\n", "    var reversed_string = string.reverse\
    \ ();\n    var prefix_length = string.length ();\n    var palindrome = string.slice\
    \ (0, prefix_length) + reversed_string;\n    return palindrome;\n}\n", "    var\
    \ reversed = string\n    var prefix = ''\n    var suffix = ''\n    var longest\
    \ = 0\n    for(var i = 0; i < string.length; i++){\n        if(string[i] === string[string.length\
    \ -1 -i]){\n            longest = i\n        }\n    }\n    for(var i = 0; i <\
    \ string.length; i++){\n        if(string[i] === string[string.length -1 -i]){\n\
    \            reversed = reversed + string[i]\n            prefix = prefix + string[string.length\
    \ -1 -i]\n            suffix = string[string.length -1 -i]\n        }\n    }\n\
    \    return reversed + prefix + suffix\n}\n", "    var reversed_string = string\n\
    \    var longest_postfix_length = 0\n    for(var i = 0; i < string.length; i++){\n\
    \        var postfix_length = string.length - i\n        if(postfix_length > longest_postfix_length){\n\
    \            longest_postfix_length = postfix_length\n        }\n    }\n    for(var\
    \ i = 0; i < longest_postfix_length; i++){\n        var postfix_length = string.length\
    \ - i\n        if(postfix_length < longest_postfix_length){\n            reversed_string\
    \ = reversed_string + string.substr(0, postfix_length)\n        }\n    }\n   \
    \ return reversed_string\n}\n", "  var palindrome = \"\";\n  var prefix_length\
    \ = 0;\n  var suffix_length = 0;\n  var suffix_start = 0;\n  var suffix_end =\
    \ 0;\n  var suffix_palindrome = \"\";\n  var prefix_palindrome = \"\";\n  var\
    \ prefix_palindrome_length = 0;\n  var suffix_palindrome_length = 0;\n  var suffix_palindrome_start\
    \ = 0;\n  var suffix_palindrome_end = 0;\n  var suffix_palindrome_suffix;\n  var\
    \ prefix_palindrome_suffix;\n  var prefix_palindrome_suffix_length;\n  var suffix_palindrome_suffix_length;\n\
    \  var suffix_palindrome_suffix_start;\n  var suffix_palindrome_suffix_end;\n\
    \  var suffix_palindrome_suffix_suffix;\n  var prefix_palindrome_suffix_suffix;\n\
    \  var prefix_palindrome_suffix_suffix_length;\n  var suffix_palindrome_suffix_suffix_length;\n\
    \  var suffix_palindrome_suffix_suffix_start;\n  var suffix_palindrome_suffix_suffix_end;\n\
    \  var suffix_palindrome_suffix_suffix_suffix;\n  var prefix_palindrome_suffix_suffix_suffix;\n\
    \  var prefix_palindrome_suffix_suffix_suffix_length;\n  var suffix_palindrome_suffix_suffix_suffix_length;\n\
    \  var suffix_palindrome_suffix_suffix_suffix_start;\n  var suffix_palindrome_suffix_suffix_suffix_end;\n\
    \  var suffix_palindrome_suffix_suffix_suffix_suffix;\n  var prefix_palindrome_suffix_suffix_suffix_suffix;\n\
    \  var prefix_palindrome_suffix_suffix_suffix_suffix_length;\n  var suffix_palindrome_suffix_suffix_suffix_suffix_length;\n\
    \  var suffix_palindrome_suffix_suffix_suffix_suffix_start;\n  var suffix_palindrome_suffix_suffix_suffix_suffix_end;\n\
    \  var suffix_palindrome_suffix_suffix_suffix_suffix_suffix;\n  var prefix_palindrome_suffix_suffix_suffix_suffix_suffix;\n\
    \  var prefix_palindrome_suffix_suffix_suffix_suffix_suffix_length;\n  var suffix_palindrome_suffix_suffix_suffix_suffix_suffix_length;\n\
    \  var suffix_palindrome_suffix_suffix_suffix_suffix_suffix_start;\n  var suffix_palindrome_suffix_suffix_suffix_suffix_",
  "    string = string.toLowerCase();\n    var palindrome = \"\";\n    var longest\
    \ = 0;\n    var longestPostfix = 0;\n    var longestPrefix = 0;\n    var longestSuffix\
    \ = 0;\n    var longestPostfixIndex = 0;\n    var longestPrefixIndex = 0;\n  \
    \  var longestSuffixIndex = 0;\n    var longestPostfixIndex2 = 0;\n    var longestPrefixIndex2\
    \ = 0;\n    var longestSuffixIndex2 = 0;\n    var longestPostfixIndex3 = 0;\n\
    \    var longestPrefixIndex3 = 0;\n    var longestSuffixIndex3 = 0;\n    var longestPostfixIndex4\
    \ = 0;\n    var longestPrefixIndex4 = 0;\n    var longestSuffixIndex4 = 0;\n \
    \   var longestPostfixIndex5 = 0;\n    var longestPrefixIndex5 = 0;\n    var longestSuffixIndex5\
    \ = 0;\n    var longestPostfixIndex6 = 0;\n    var longestPrefixIndex6 = 0;\n\
    \    var longestSuffixIndex6 = 0;\n    var longestPostfixIndex7 = 0;\n    var\
    \ longestPrefixIndex7 = 0;\n    var longestSuffixIndex7 = 0;\n    var longestPostfixIndex8\
    \ = 0;\n    var longestPrefixIndex8 = 0;\n    var longestSuffixIndex8 = 0;\n \
    \   var longestPostfixIndex9 = 0;\n    var longestPrefixIndex9 = 0;\n    var longestSuffixIndex9\
    \ = 0;\n    var longestPostfixIndex10 = 0;\n    var longestPrefixIndex10 = 0;\n\
    \    var longestSuffixIndex10 = 0;\n    var longestPostfixIndex11 = 0;\n    var\
    \ longestPrefixIndex11 = 0;\n    var longestSuffixIndex11 = 0;\n    var longestPostfixIndex12\
    \ = 0;\n    var longestPrefixIndex12 = 0;\n    var longestSuffixIndex12 = 0;\n\
    \    var longestPostfixIndex13 = 0;\n    var longestPrefixIndex13 = 0;\n    var\
    \ longestSuffixIndex13 = 0;\n    var longestPostfixIndex14 = 0;\n    var longestPrefixIndex14\
    \ = 0;\n    var longestSuffixIndex14 = 0;\n    var longestPostfixIndex15 = 0;\n\
    \    var longestPrefixIndex15 = 0;\n    var longestSuffixIndex15 = 0;\n    var\
    \ longestPostfixIndex16 = 0;\n    var longestPrefixIndex16 = 0;\n    var longestSuffixIndex16\
    \ = 0;\n    var longestPostfixIndex17 = 0;\n    var longestPrefixIndex17 = 0;\n\
    \    var longestSuffixIndex17 = 0;\n    var longestPostfixIndex18 = 0;\n    var\
    \ longestPrefixIndex18 = 0;\n    var longestSuffixIndex18 = 0;\n    var longestPostfixIndex19\
    \ = 0;\n    var longestPrefixIndex19 = 0;\n    var longestSuffixIndex19 = 0;\n\
    \    var longestPostfixIndex20 = 0;\n    var longestPrefixIndex20 = 0;\n    var\
    \ longestSuffixIndex20 = 0;\n    var longestPostfixIndex21 = 0;\n    var longestPrefixIndex21\
    \ = 0;\n    var longestSuffixIndex21 = 0;\n    var longestPostfixIndex22 = 0;\n\
    \    var longestPrefixIndex22 = 0;\n    var longestSuffixIndex22 = 0;\n    var\
    \ longestPostfixIndex23 = 0;\n    var longestPrefix", "    var reversed_string\
    \ = string\n    var prefix_length = 0\n    var postfix_length = 0\n    var palindrome\
    \ = \"\"\n    \n    while(postfix_length != string.length){\n        postfix_length\
    \ = string.length\n        prefix_length = string.length\n        \n        for(var\
    \ i = string.length - 1; i >= 0; i--){\n            reversed_string = reversed_string\
    \ + string[i]\n            \n            if(string[i] == string[string.length\
    \ - 1 - i]){\n                postfix_length = postfix_length - 1\n          \
    \      prefix_length = prefix_length - 1\n            }\n        }\n        \n\
    \        palindrome = palindrome + reversed_string\n    }\n    \n    return palindrome\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
