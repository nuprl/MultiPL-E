name: HumanEval_62_derivative
language: js
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n\
  \  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["  var derivatives = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n;\
    \ i>0; --i) out[i] = xs[i-1]*(i==1 ? -1 : 1);\n  for (i=1; i<n; ++i) out[i] =\
    \ out[i-1] + xs[i]*(i==n ? 1 : -1);\n  return out;\n}\n", "  var derivatives =\
    \ [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m = xs[0].length,\n      f = 0;\n  for(var i\
    \ = 0; i != n; i++){\n    out[i] = new Array(m);\n    for(var j = 0; j != m; j++){\n\
    \      out[i][j] = (j > 0) ? xs[i][j] * (j - 1) : xs[i][j];\n    }\n  }\n  for(var\
    \ i = 0; i != n; i++){\n    for(var j = 0; j != m; j++){\n      if(j > 0){\n \
    \       out[i][j] = out[i][j] - xs[i][j] * out[i][j + 1];\n      } else {\n  \
    \      out[i][j] = out[i][j] - xs[i][j];\n      }\n    }\n  }\n  return out;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i\
    \ = 0; i < n; ++i) {\n    out[i] = xs[i] - ((i && 1 || 0) * (xs[i] - (xs[i] %\
    \ 1)) / i);\n  }\n\n  for (i = 1; i < n; ++i) {\n    m = xs[i] - (xs[i - 1] ||\
    \ 0);\n    out[i] = m / i;\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i+1];\n\
    \    }\n    return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        out\
    \ = [],\n        pows = [],\n        pow;\n\n    while(n--){\n        pow = xs[n]\
    \ * xs[n];\n        pows.push(pow);\n    }\n\n    for(var i = pows.length; i--;\
    \ ){\n        pow = pows[i];\n        out.push(pows[i + 1] / pow);\n    }\n\n\
    \    return out;\n}\n", "  var n = xs.length;\n  var dxs = [];\n  for(var i =\
    \ 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i = 0; i\
    \ < n; ++i) {\n    out[i] = xs[i+1];\n  }\n\n  for (i = 0; i+1 < n; ++i) {\n \
    \   m = xs[i] / xs[i+1];\n    out[i+1] = out[i] * m;\n  }\n\n  return out;\n}\n",
  "  var n = xs.length;\n  var dxs = [];\n  for(var i = 0; i <n; i++){\n    dxs[i]\
    \ = xs[i+1] - xs[i];\n  }\n  return dxs;\n}\n", "    var n = xs.length;\n    var\
    \ dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i -\
    \ 1]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = n - 2; i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = ((xs[m] *\
    \ xs[i]) - (xs[m + 1] * xs[m])) / xs[m];\n  }\n\n  return out;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var deriv = [];\n    for(var i = 0; i< n; i++){\n        deriv[i] = xs[i+1];\n\
    \    }\n    return deriv;\n}\n", "  var derivatives = [];\n  var pows = [];\n\
    \  for(var x = 0; x < xs.length; x++){\n    pows.push(Math.pow(xs[x], 2));\n \
    \ }\n  for(var x = 0; x < xs.length; x++){\n    derivatives.push(pows[x]);\n \
    \ }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n \
    \ for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        out\
    \ = [],\n        pow = [];\n    for(var i=0; i<n; i++){\n        pow[i] = 1;\n\
    \    }\n    for(var i=0; i<n; i++){\n        for(var j=0; j<n; j++){\n       \
    \     if(i == j){\n                pow[i] += xs[i] * xs[j];\n            }\n \
    \       }\n    }\n    for(var i=0; i<n; i++){\n        out.push(pow[i] / xs[i]);\n\
    \    }\n    return out;\n}\n", "    var n = xs.length;\n    var deriv = [];\n\
    \    for(var i = 0; i < n; i++){\n        deriv[i] = xs[i + 1];\n    }\n    return\
    \ deriv;\n}\n", "    var n = xs.length,\n        ds = [],\n        d;\n    while(n){\n\
    \        if(n%2){\n            ds[ds.length] = xs[--n];\n        }else{\n    \
    \        ds[ds.length] = (d=xs[--n])/(xs[n-1] || 1);\n        }\n    }\n    return\
    \ ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m = xs[0].length,\n\
    \      f = [];\n  for(var i = 0; i != n; i++){\n    f[i] = new Array(m);\n   \
    \ for(var j = 0; j != m; j++){\n      f[i][j] = xs[i][j]; // evaluate polynomial\n\
    \    }\n  }\n  for(var i = 0; i != n; i++){\n    for(var j = 0; j != m; j++){\n\
    \      out[i][j] = f[i][j+1] - f[i][j]; // differentiate polynomial\n    }\n \
    \ }\n  return out;\n}\n", "    var n = xs.length;\n    var deriv = [];\n    for(var\
    \ i = 1; i < n; i++){\n        deriv[i] = xs[i] - xs[i - 1];\n    }\n    return\
    \ deriv;\n}\n", "    var n = xs.length,\n        out = new Array(n),\n       \
    \ pows = new Array(n),\n        pow;\n    for(var i = 0; i < n; i++){\n      \
    \  pows[i] = 1;\n    }\n    for(var i = 0; i < n; i++){\n        pow = pows[i];\n\
    \        for(var j = 0; j < n; j++){\n            if(i == j){\n              \
    \  pow *= xs[j];\n            }else{\n                pow *= xs[j] / pow;\n  \
    \          }\n        }\n        out[i] = pow;\n    }\n    return out;\n}\n",
  "    var n = xs.length,\n        ds = [];\n    for(var i=0; i<n; i++){\n       \
    \ ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length,\n        ds = [];\n    for(var\
    \ i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0;\
    \ i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m += xs[i--];\n    out[i] = m;\n\
    \  }\n  return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i=n; i-- > 0;) {\n    out[i] = xs[i+1];\n  }\n\n  for (i=1;\
    \ i< n; i++) {\n    m = n - i;\n    out[i] = (m % 2 ? 1 : -1) *\n      (xs[i]\
    \ * Derivative(xs, m, i));\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out\
    \ = new Array(n),\n      m, i;\n  \n  for(i=0; i<n; i++){\n    out[i] = xs[i+1];\n\
    \  }\n  \n  for(i=1; i<n; i++){\n    m = n-i;\n    out[i] = (out[i-1]*xs[i+m])/(xs[m]*xs[i]);\n\
    \  }\n  \n  return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var xlen = xs.length;\n\
    \  if(xlen == 0){\n    return derivatives;\n  }\n  for(var i = 1; i < xlen; i++){\n\
    \    derivatives.push(xs[i] - xs[i - 1]);\n  }\n  return derivatives;\n}\n", " \
    \   var n = xs.length,\n        ds = [],\n        d;\n    while(n){\n        if(n%2){\n\
    \            ds[ds.length] = xs[--n];\n        }else{\n            ds[ds.length]\
    \ = (d=xs[--n])/2;\n        }\n    }\n    return ds;\n}\n", "  var derivatives\
    \ = [];\n  var x = 0;\n  for(var i = 1; i < xs.length; i++){\n    x += xs[i];\n\
    \    derivatives.push(x);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        out = new Array(n),\n        pows = new Array(n),\n        pow;\n\n \
    \   for(var i=0; i<n; i++){\n        pows[i] = 1;\n    }\n\n    for(var i=2; i<n;\
    \ i++){\n        pow = pows[i-1];\n        for(var j=0; j<i; j++){\n         \
    \   pow *= xs[j];\n        }\n        pows[i] = pow;\n    }\n\n    for(i=1; i<n;\
    \ i++){\n        pow = pows[i-1];\n        pow *= i;\n        pows[i] -= pow;\n\
    \    }\n\n    return out;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var\
    \ i;\n  for(i = 0; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var f = [];\n\
    \    for(var i = 1; i < n; i++){\n        f.push(xs[i] - xs[i-1]);\n    }\n  \
    \  return f;\n}\n", "    var n = xs.length;\n    var dxs = [];\n    for(var i\
    \ = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n    return dxs;\n\
    }\n", "    var n = xs.length,\n        out = new Array(n),\n        m, i;\n  \
    \  for(i=0; i<n; i++){\n        m = xs[i];\n        // m is now x - 1, or xs[i-1]\n\
    \        // m remains unchanged when multiplied by x - 1\n        out[i] = m;\n\
    \        out[i] *= (m - 1);\n    }\n    return out;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        ds = [],\n\
    \        d;\n    while(n){\n        if(n%2) d = xs[n-1]; else d = xs[--n];\n \
    \       ds.push(d)\n    }\n    if(ds.length == 1) return ds[0];\n    return ds;\n\
    }\n", "    var n = xs.length,\n        ds = [];\n    for(var i=0; i< n; i++){\n\
    \        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) out[i] =\
    \ 0;\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n    for (m = 2; m\
    \ < n; ++m) out[i] += xs[i + m] * m;\n  }\n  return out;\n}\n", "    var n = xs.length,\n\
    \        out = new Array(n),\n        pows = new Array(n),\n        pow;\n   \
    \ for(var i=0; i<n; i++){\n        pows[i] = 1;\n    }\n    for(var i=0; i<n;\
    \ i++){\n        pow = pows[i];\n        for(var j=0; j<n; j++){\n           \
    \ if(i+j === n){\n                pow *= xs[j];\n            }else{\n        \
    \        pow *= xs[j];\n                pows[i] += pow;\n            }\n     \
    \   }\n    }\n    return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var deriv = [];\n\
    \    for(var i = 1; i < n; i++){\n        deriv.push(xs[i] - xs[i - 1]);\n   \
    \ }\n    return deriv;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n  \n  for(i=0; i<n; i++){\n    xs[i] -= xs[i-1];\n    if(xs[i] <\
    \ 0) xs[i] += n;\n  }\n  \n  for(i=n-1; i>=0; i--){\n    m = n - i;\n    out[i]\
    \ = xs[i] * deriv(m, xs, i);\n  }\n  \n  return out;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n; i++){\n    out[i]\
    \ = xs[i+1];\n  }\n  \n  for(i=1; i<n; i++){\n    m = n-i;\n    out[i] = (out[i-1]*xs[i+m])/(xs[m]*xs);\n\
    \  }\n  \n  return out;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for (var\
    \ i = 0; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n  }\n\
    \  return derivatives;\n}\n", "    var n = xs.length;\n    var deriv = [];\n \
    \   for(var i=0; i< n; i++){\n        deriv[i] = xs[i+1];\n    }\n    return deriv;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i\
    \ = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n  for (i = n - 2; i >= 0;\
    \ --i) {\n    m = n - i - 1;\n    out[i] = (m % 2 ? 1 : -1) *\n      (xs[i + 1]\
    \ * xs[m]) /\n      ((m % 2) ? xs[m - 1] : 2 * xs[m]);\n  }\n\n  return out;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length;\n    var deriv = [];\n    for(var i = 1; i < n;\
    \ i++){\n        deriv[i] = xs[i] - xs[i-1];\n    }\n    return deriv;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i = 0; i\
    \ < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n  for (i = 1; i < n; ++i) {\n \
    \   m = xs[i] / i;\n    out[i] = out[i - 1] * m;\n  }\n\n  return out;\n}\n",
  "    var n = xs.length,\n        ds = [],\n        d;\n    while(n--){\n       \
    \ d = xs[n];\n        ds.push(d);\n    }\n    return ds;\n}\n", "    var n = xs.length;\n\
    \    var deriv = [];\n    for(var i = 1; i < n; i++){\n        deriv[i] = xs[i]\
    \ - xs[i - 1];\n    }\n    return deriv;\n}\n", "    var n = xs.length,\n    \
    \    out = new Array(n),\n        m, i;\n    for(i = 0; i < n; i++){\n       \
    \ m = xs[i];\n        if(m !== 0){\n            out[i] = m;\n        }else{\n\
    \            out[i] = xs[--n];\n        }\n    }\n    return out;\n}\n", "   \
    \ var n = xs.length;\n    var dxs = [];\n    for(var i = 1; i < n; i++){\n   \
    \     dxs.push(xs[i] - xs[i - 1]);\n    }\n    return dxs;\n}\n", "    var n =\
    \ xs.length;\n    var out = new Array(n);\n    var m = 0;\n    for(var i = 1;\
    \ i < n; i++){\n        m += xs[i-1];\n        out[i] = xs[i] - m * xs[i-1];\n\
    \    }\n    return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var deriv = [];\n\
    \    for(var i = 1; i < n; i++){\n        deriv.push(xs[i] - xs[i-1]);\n    }\n\
    \    return deriv;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var dxs = [];\n\
    \    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length;\n    var arr = [];\n    for(var\
    \ i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return arr;\n\
    }\n", "    var n = xs.length,\n        out = new Array(n),\n        m, i;\n\n\
    \    for (i = 0; i < n; i++){\n        m = xs[i];\n        out[i] = m;\n    }\n\
    \n    for (i = 1; i < n; i++){\n        m = out[i-1];\n        out[i] = out[i]\
    \ + (m * xs[i]);\n    }\n\n    return out;\n}\n", "  var derivatives = [];\n \
    \ var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var arr = [];\n    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n\
    \    }\n    return arr;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = n - 2; i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = (m > 0) ?\
    \ (xs[i] * Derivative(xs, m, i)) : (Derivative(xs, m, i));\n  }\n\n  return out;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0;\
    \ i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n\
    \  \n  return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n \
    \     m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m +=\
    \ xs[i--];\n    out[i] = m;\n  }\n  return out;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length,\n        dxs = new Array(n),\n\
    \        x = 1,\n        i;\n    for(i = 1; i < n; i++){\n        dxs[i] = xs[i]\
    \ - x;\n        x *= xs[i];\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n\
    \    while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n  \n  return out;\n}\n", " \
    \ var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var n = xs.length;\n  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv[i]\
    \ = xs[i] - xs[i - 1];\n  }\n  return deriv;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length;\n\
    \  var dxs = [];\n  for(var i = 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n\
    \  }\n  return dxs;\n}\n", "    var n = xs.length,\n        ds = [],\n       \
    \ d;\n    while(n){\n        if(n%2) ds.unshift(xs.shift());\n        n = Math.floor(n/2);\n\
    \    }\n    if(ds.length){\n        d = new Array(n);\n        while(n--) d[n]\
    \ = ds.pop();\n    }\n    return d;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = n - 2; i >= 0; --i) {\n    m = (i + 1) * Math.pow(out[i], 2);\n  \
    \  out[i] = out[i] + m / out[i + 1];\n  }\n\n  return out;\n}\n", "    var n =\
    \ xs.length,\n        ds = [],\n        d;\n    while(n){\n        if(n%2){\n\
    \            ds[ds.length] = xs[--n];\n        }else{\n            ds[ds.length]\
    \ = (d=xs[--n])/(xs[n-1] || 1);\n        }\n    }\n    return ds;\n}\n", "  var\
    \ derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n \
    \   derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n}\n",
  "  var n = xs.length;\n  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv.push(xs[i]\
    \ - xs[i-1]);\n  }\n  return deriv;\n}\n", "    var n = xs.length,\n        dxs\
    \ = new Array(n);\n    for(var i = 0; i < n; i++){\n        dxs[i] = xs[i + 1];\n\
    \    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m = xs[0].length,\n      f = [];\n  for(var i=0; i<n; i++){\n    f[i] =\
    \ new Array(m);\n    for(var j=0; j<m; j++){\n      f[i][j] = xs[i][j]; // evaluate\
    \ polynomial\n    }\n  }\n  for(var i=0; i<n; i++){\n    out[i] = [];\n    for(var\
    \ j=0; j<m; j++){\n      out[i][j] = f[i][j+1] - f[i][j]; // differentiate\n \
    \   }\n  }\n  return out;\n}\n", "    var n = xs.length;\n    var deriv = [];\n\
    \    for(var i = 1; i < n; i++){\n        deriv[i] = xs[i] - xs[i - 1];\n    }\n\
    \    return deriv;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var y = 0;\n\
    \  for (var i = 0; i < xs.length; i++){\n    x += xs[i];\n    y += xs[i] * x;\n\
    \    derivatives.push(y);\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "    var n = xs.length,\n       \
    \ dxs = new Array(n),\n        x = 1,\n        i;\n    for(i = 1; i < n; i++){\n\
    \        dxs[i] = xs[i] - x;\n        x *= xs[i];\n    }\n    return dxs;\n}\n",
  "  var n = xs.length;\n  var deriv = [];\n  for (var i = 0; i < n; i++) {\n    deriv[i]\
    \ = xs[i + 1];\n  }\n  return deriv;\n}\n", "  var n = xs.length,\n      out =\
    \ new Array(n),\n      m, i;\n\n  for (i=n; i--; ) out[i] = xs[i+1] * xs[i];\n\
    \n  m = xs.length;\n  for (i=m; --i; ) out[i] = derivative(out.slice(i));\n\n\
    \  return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n     \
    \ m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m += xs[i--];\n\
    \    out[i] = m;\n  }\n  return out;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n \
    \   pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n \
    \     out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i]\
    \ = xs[i] - xs[i - 1];\n  }\n\n  m = xs.length;\n  for (i = n - 2; i >= 0; --i)\
    \ {\n    out[i] = (m * xs[i] + xs[i + 1]) / 2;\n  }\n\n  return out;\n}\n", " \
    \ var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n-1;\
    \ i>=0; i--){\n    m = xs[i] / i;\n    out[i] = m;\n  }\n  return out;\n}\n",
  "    var n = xs.length,\n        dxs = new Array(n);\n    for(var i=0; i< n; i++){\n\
    \        dxs[i] = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\n", "    var n =\
    \ xs.length,\n        ds = [];\n    while(n--){\n        ds[n] = xs[n+1] - xs[n];\n\
    \    }\n    return ds;\n}\n", "  var derivatives = [];\n  var xlen = xs.length;\n\
    \  if(xlen == 0){\n    return derivatives;\n  }\n  for(var i = 0; i <= xlen -\
    \ 1; i++){\n    derivatives.push(2 * xs[i]);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length;\n    var dxs = [];\n    for(var i = 0; i !== n; i++){\n\
    \        dxs.push(xs[i+1] - xs[i]);\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i]\
    \ = xs[i + 1];\n  }\n\n  for (i = 1; i < n; ++i) {\n    m = xs[i] / i;\n    out[i]\
    \ = out[i - 1] * m;\n  }\n\n  return out;\n}\n", "    var n = xs.length,\n   \
    \     out = new Array(n),\n        m, i;\n\n    for (i = 0; i < n; ++i){\n   \
    \     m = xs[i];\n        out[i] = m;\n    }\n\n    for (i = 0; i < n; ++i){\n\
    \        m = out[i] / xs[i];\n        for (++i; i < n; ++i){\n            out[i]\
    \ = out[i] - m * xs[i];\n        }\n    }\n\n    return out;\n}\n", "  var n =\
    \ xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; i++)\
    \ {\n    out[i] = xs[i+1];\n  }\n\n  for (i = 0; i+1 < n; i++) {\n    m = xs[i]\
    \ / out[i - 1];\n    out[i] = out[i] / m;\n    out[i+1] = out[i+1] / m;\n  }\n\
    \n  return out;\n}\n", "    var n = xs.length;\n    var deriv = [];\n    for(var\
    \ i = 1; i < n; i++){\n        deriv[i] = xs[i] - xs[i-1];\n    }\n    return\
    \ deriv;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for(var i = 0; i<\
    \ n; i++){\n    deriv[i] = xs[i+1];\n  }\n  return deriv;\n}\n", "    var n =\
    \ xs.length,\n        dxs = new Array(n);\n    for(var i=0; i< n; i++){\n    \
    \    dxs[i] = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\n", "    var n = xs.length;\n\
    \    var f = new Array(n);\n    var i;\n    for(i=0;i<n;i++){\n        f[i] =\
    \ xs[i+1];\n    }\n    f[n-1] = 1;\n    return f;\n}\n", "  var derivatives =\
    \ [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(xs[i]);\n\
    \    x += xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n\
    \  var x = 0;\n  var y = 0;\n  for (var i = 0; i < xs.length; i++){\n    x +=\
    \ xs[i];\n    y += xs[i] * x;\n    derivatives.push(y);\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length,\n        out = new Array(n),\n        m, i;\n  \
    \  for(i = 0; i < n; i++){\n        m = xs[i];\n        switch(m){\n         \
    \   case 0: out[i] = 1; break;\n            case 1: out[i] = 0; break;\n     \
    \       case 2: out[i] = 1; break;\n            case 3: out[i] = 0; break;\n \
    \           case 4: out[i] = 1; break;\n            case 5: out[i] = 0; break;\n\
    \            case 6: out[i] = 1; break;\n            case 7: out[i] = 0; break;\n\
    \            case 8: out[i] = 1; break;\n            case 9: out[i] = 0; break;\n\
    \            case 10: out[i] = 1; break;\n            case 11: out[i] = 0; break;\n\
    \            case 12: out[i] = 1; break;\n            case 13: out[i] = 0; break;\n\
    \            case 14: out[i] = 1; break;\n            case 15: out[i] = 0; break;\n\
    \            case 16: out[i] = 1; break;\n            case 17: out[i] = 0; break;\n\
    \            case 18: out[i] = 1; break;\n            case 19: out[i] = 0; break;\n\
    \            case 20: out[i] = 1; break;\n            case 21: out[i] = 0; break;\n\
    \            case 22: out[i] = 1; break;\n            case 23: out[i] = 0; break;\n\
    \            case 24: out[i] = 1; break;\n            case 25: out[i] = 0; break;\n\
    \            case 26: out[i] = 1; break;\n            case 27: out[i] = 0; break;\n\
    \            case 28: out[i] = 1; break;\n            case 29: out[i] = 0; break;\n\
    \            case 30: out[i] = 1; break;\n            case 31: out[i] = 0; break;\n\
    \            case 32: out[i] = 1; break;\n            case 33: out[i] = 0; break;\n\
    \            case 34: out[i] = 1; break;\n            case 35: out[i] = 0; break;\n\
    \            case 36: out[i] = 1; break;\n            case 37: out[i] = 0; break;\n\
    \            case 38: out[i] = 1; break;\n            case 39: out[i] = 0; break;\n\
    \            case 40: out[i] = 1; break;\n            case 41: out[i] = 0; break;\n\
    \            case 42: out[i] = 1; break;\n            case 43: out[i] = 0; break;\n\
    \            case 44: out[i] = 1; break;\n            case 45: out[i] = 0; break;\n\
    \            case 46: out[i] = 1; break;\n            case 47: out[i] = 0; break;\n\
    \            case 48: out[i] = 1; break;\n            case 49: out[i] = 0; break;\n\
    \            case 50: out[i] = 1; break;\n            case 51: out[i] = 0; break;\n\
    \            case 52: out[i] = 1; break;\n            case 53: out[i] = 0; break;\n\
    \            case 54: out[i] = 1; break;\n            case 55: out[i] = 0; break;\n\
    \            case 56: out[i] = 1; break;\n            case 57: out[i] = 0; break;\n\
    \            case 58: out[i] = 1; break;\n            case 59: out[i] = 0; break;\n\
    \            case 60: out[i] = 1; ", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n  }\n\
    \  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for (var\
    \ i = 0; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n  }\n\
    \  return derivatives;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for(var\
    \ i=0; i< n; i++){\n    deriv[i] = xs[i+1];\n  }\n  return deriv;\n}\n", "  var\
    \ derivatives = [];\n  var x = 0;\n  for(var i=0;i<xs.length;i++){\n    x += xs[i];\n\
    \    derivatives.push(x);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for\
    \ (var i = 0; i < n; i++){\n    deriv[i] = xs[i + 1];\n  }\n  return deriv;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length;\n  var dxs = [];\n  for(var i = 1; i < n; i++){\n\
    \    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i=n; i>0; --i) {\n    out[i-1]\
    \ = xs[i-1];\n  }\n\n  for (i=1; i<n; ++i) {\n    m = n - i;\n    out[i] = (m\
    \ === 0) ? 1 : xs[i] / m;\n  }\n\n  return out;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length;\n\
    \  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv.push(xs[i] - xs[i\
    \ - 1]);\n  }\n  return deriv;\n}\n", "    var n = xs.length;\n    var dxs = [];\n\
    \    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length;\n    var deriv = [];\n    for(var\
    \ i = 0; i< n; i++){\n        deriv[i] = xs[i+1];\n    }\n    return deriv;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length,\n        ds = [],\n        d;\n    while(n){\n \
    \       if(n%2){\n            ds[ds.length] = xs[--n];\n        }else{\n     \
    \       ds[ds.length] = (d=xs[--n])/2;\n        }\n    }\n    return ds;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m = xs[0].length,\n    \
    \  f = [];\n  for(var i=0; i<n; i++){\n    f[i] = new Array(m);\n    for(var j=0;\
    \ j<m; j++){\n      f[i][j] = xs[i][j];\n    }\n  }\n  for(var i=0; i<n; i++){\n\
    \    for(var j=0; j<m; j++){\n      out[i][j] = f[i][j+1];\n    }\n  }\n  return\
    \ out;\n}\n", "    var n = xs.length;\n    var deriv = [];\n    for(var i = 1;\
    \ i < n; i++){\n        deriv[i] = xs[i] - xs[i-1];\n    }\n    return deriv;\n\
    }\n", "  var derivatives = [];\n  var pows = [];\n  var diff = [];\n  for(var\
    \ i = 0; i < xs.length; i++){\n    pows[i] = xs[i] * xs[i];\n  }\n  for(var i\
    \ = 0; i < xs.length; i++){\n    diff[i] = pows[i] - xs[i];\n  }\n  for(var i\
    \ = 0; i < xs.length; i++){\n    derivatives.push(diff[i]);\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m = xs[0].length,\n\
    \      f = [];\n  for(var i=0; i<n; i++){\n    f[i] = new Array(m);\n    for(var\
    \ j=0; j<m; j++){\n      f[i][j] = xs[i][j];\n    }\n  }\n  for(var i=0; i<n;\
    \ i++){\n    out[i] = [];\n    for(var j=0; j<m; j++){\n      var sum = 0;\n \
    \     for(var k=0; k<m; k++){\n        sum += f[i][k] * out[k][j];\n      }\n\
    \      out[i][j] = sum;\n    }\n  }\n  return out;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length;\n    var deriv = [];\n \
    \   for(var i = 1; i < n; i++){\n        deriv.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return deriv;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n \
    \     m, i;\n\n  for (i = 0; i != n; ++i) {\n    out[i] = xs[i] - xs[i - 1];\n\
    \  }\n\n  for (i = 0; i != n; ++i) {\n    m = xs[i] / out[i];\n    out[i] -= m\
    \ * out[i - 1];\n  }\n\n  return out;\n}\n", "  var n = xs.length,\n      out\
    \ = new Array(n),\n      m = xs[0].length,\n      f = [];\n  for(var i=0; i<n;\
    \ i++){\n    f[i] = new Array(m);\n    for(var j=0; j<m; j++){\n      f[i][j]\
    \ = xs[i][j]; // evaluate polynomial\n    }\n  }\n  for(var i=0; i<n; i++){\n\
    \    for(var j=0; j<m; j++){\n      out[i][j] = f[i][j+1] - f[i][j]; // differentiate\
    \ polynomial\n    }\n  }\n  return out;\n}\n", "    var n = xs.length;\n    var\
    \ deriv = [];\n    for(var i = 0; i < n; i++){\n        deriv[i] = xs[i+1];\n\
    \    }\n    return deriv;\n}\n", "    var n = xs.length;\n    var dxs = [];\n\
    \    for(var i = 0; i !== n; i++){\n        dxs.push(xs[i+1] - xs[i]);\n    }\n\
    \    return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n   \
    \   m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i] - ((m = i % 2) ?\
    \ xs[i - 1] : 0);\n  }\n\n  return out;\n}\n", "  var n = xs.length;\n  var dxs\
    \ = [];\n  for(var i = 1; i < n; i++){\n    dxs[i - 1] = xs[i] - xs[i - 1];\n\
    \  }\n  return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for (var\
    \ i = 0; i < xs.length; i++){\n    derivatives.push(Math.pow(xs[i], pow));\n \
    \   pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "    var n = xs.length;\n    var\
    \ f = [];\n    for(var i = 1; i < n; i++){\n        f.push(xs[i] - xs[i - 1]);\n\
    \    }\n    return f;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m = xs[0].length,\n      f = [];\n  for(var i=0; i<n; i++){\n    f[i] =\
    \ new Array(m);\n    for(var j=0; j<m; j++){\n      f[i][j] = xs[i][j]; // evaluate\
    \ polynomial\n    }\n  }\n  for(var i=0; i<n; i++){\n    for(var j=0; j<m; j++){\n\
    \      out[i][j] = f[i][j+1] - f[i][j];\n    }\n  }\n  return out;\n}\n", "  \
    \  var n = xs.length,\n        ds = [];\n    for(var i=0; i< n; i++){\n      \
    \  ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "  var n = xs.length;\n\
    \  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv.push(xs[i] - xs[i\
    \ - 1]);\n  }\n  return deriv;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i] - ((m = i % 2)\
    \ ? xs[i - 1] : 0);\n  }\n\n  return out;\n}\n", "  var derivatives = [];\n  var\
    \ x = 0;\n  var y = 0;\n  for (var i = 0; i < xs.length; i++) {\n    x += xs[i];\n\
    \    y += xs[i] * x;\n    derivatives.push(y);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length;\n    var dxs = [];\n    for(var i = 1; i < n; i++){\n  \
    \      dxs.push(xs[i] - xs[i - 1]);\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    while(n--){\n        ds[n] = xs[n+1] - xs[n];\n    }\n\
    \    return ds;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for (var i =\
    \ 0; i < xs.length; i++){\n    derivatives.push(xs[i]);\n    x += xs[i];\n  }\n\
    \  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m = xs[0].length,\n      f = [];\n  for(var i=0; i<n; i++){\n    f[i] =\
    \ new Array(m);\n    for(var j=0; j<m; j++){\n      f[i][j] = xs[i][j]; // evaluate\
    \ polynomial\n    }\n  }\n  for(var i=0; i<n; i++){\n    for(var j=0; j<m; j++){\n\
    \      out[i][j] = f[i][j+1] - f[i][j]; // differentiate polynomial\n    }\n \
    \ }\n  return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var dxs = [];\n\
    \    for(var i=0; i< n; i++){\n        dxs.push(xs[i+1] - xs[i]);\n    }\n   \
    \ return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n      m,\
    \ i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i] - ((i && 1 || 0) * (xs[i]\
    \ - (xs[i] % 1)) / i);\n  }\n\n  m = xs.length;\n  for (i = n - 1; i >= 0; --i)\
    \ {\n    out[i] = ((i + 1) * out[i]) / m;\n  }\n\n  return out;\n}\n", "    var\
    \ n = xs.length,\n        dxs = new Array(n),\n        x = void 0,\n        dx\
    \ = void 0,\n        i = void 0,\n        j = void 0,\n        k = void 0,\n \
    \       diff = new Array(n);\n    for(i = 0; i < n; i++){\n        x = xs[i];\n\
    \        dx = 0;\n        for(j = 0; j < n; j++){\n            if(i == j) continue;\n\
    \            dx = dx + (x - xs[j])*(xs[j] - x);\n        }\n        dxs[i] = dx;\n\
    \    }\n    for(i = n - 1; i >= 0; i--){\n        x = xs[i];\n        dx = dxs[i];\n\
    \        for(j = n - 1; j > i; j--){\n            if(i == j) continue;\n     \
    \       k = j + 1;\n            diff = dx[k] - dx[j];\n            diff = (diff\
    \ > 0 ? 1 : -1);\n            dx[k] = dx[j] - diff;\n            dx[j] = dx[j]\
    \ + diff;\n        }\n        dxs[i] = dx[i];\n    }\n    return dxs;\n}\n", " \
    \   var n = xs.length,\n        ds = [];\n    for(var i=0; i<n; i++){\n      \
    \  ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "  var n = xs.length;\n\
    \  var dxs = [];\n  for(var i = 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n\
    \  }\n  return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var\
    \ i;\n  for(i = 0; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n  }\n\
    \  return derivatives;\n}\n", "    var n = xs.length;\n    var arr = [];\n   \
    \ for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ arr;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for(var i=0; i< n; i++){\n\
    \    deriv[i] = xs[i+1];\n  }\n  return deriv;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n  \
    \  derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(xs[i]\
    \ - x);\n    x = xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i-1]);\n    }\n    return dxs;\n}\n", "    var n = xs.length;\n    var arr\
    \ = [];\n    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n   \
    \ }\n    return arr;\n}\n", "    var n = xs.length;\n    var dxs = [];\n    for(var\
    \ i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n    return\
    \ dxs;\n}\n", "  var derivatives = [];\n  var xlen = xs.length;\n  if(xlen ==\
    \ 0){\n    return derivatives;\n  }\n  for(var i = 0; i <= xlen - 1; i++){\n \
    \   derivatives.push(xs[i] - xs[i-1]);\n  }\n  return derivatives;\n}\n", "  var\
    \ n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n;\
    \ i++){\n    m = 0;\n    while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n  return\
    \ out;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var j = 0;\n  for (var\
    \ i = 0; i < xs.length; i++) {\n    x += xs[i];\n    derivatives[j++] = x;\n \
    \ }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n \
    \ for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length;\n  var deriv = [];\n\
    \  for (var i = 0; i < n; i++){\n    deriv[i] = xs[i + 1];\n  }\n  return deriv;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length,\n        ds = [];\n    for(var i=0; i< n; i++){\n\
    \        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i != n; ++i) {\n    out[i]\
    \ = xs[i + 1];\n    m = xs[i] / i;\n    for (i++; i != n; ++i) {\n      out[i]\
    \ = (out[i] + (xs[i] - m * out[i - 1])) / i;\n    }\n  }\n  return out;\n}\n",
  "    var n = xs.length;\n    var dxs = [];\n    for(var i = 0; i< n; i++){\n   \
    \     dxs.push(xs[i+1] - xs[i]);\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [],\n        d;\n    for(var i=0; i< n; i++){\n        d = xs[i+1]\
    \ - xs[i];\n        ds.push(d);\n    }\n    return ds;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length;\n    var dxs = [];\n   \
    \ for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n \
    \   return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i =\
    \ 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n\
    \  return derivatives;\n}\n", "    var n = xs.length;\n    var dxs = [];\n   \
    \ for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n \
    \   return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i =\
    \ 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n\
    \  return derivatives;\n}\n", "    var n = xs.length;\n    var arr = [];\n   \
    \ for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ arr;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n\
    \  for (i = 0; i < n; ++i) {\n    out[i] = xs[i] - xs[i - 1];\n  }\n\n  for (i\
    \ = n - 2; i >= 0; --i) {\n    m = out[i];\n    out[i] = m / out[i + 1];\n   \
    \ out[i + 1] = 0;\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n    var\
    \ dxs = [];\n    dxs[1] = 1;\n    for (var i = 2; i < n; ++i){\n        dxs[i]\
    \ = dxs[i-1] * xs[i-1];\n    }\n    return dxs;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs[i] = xs[i] -\
    \ xs[i - 1];\n    }\n    return dxs;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
