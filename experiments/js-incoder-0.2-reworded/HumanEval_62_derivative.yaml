name: HumanEval_62_derivative
language: js
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n\
  \  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["  var derivatives = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n;\
    \ i>0; --i) out[i] = xs[i-1]*(i==1 ? -1 : 1);\n  for (i=1; i<n; ++i) out[i] =\
    \ out[i-1] + xs[i]*(i==n ? 1 : -1);\n  return out;\n}\n", "  var derivatives =\
    \ [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m = xs[0].length,\n      f = 0;\n  for(var i\
    \ = 0; i != n; i++){\n    out[i] = new Array(m);\n    for(var j = 0; j != m; j++){\n\
    \      out[i][j] = (j > 0) ? xs[i][j] * (j - 1) : xs[i][j];\n    }\n  }\n  for(var\
    \ i = 0; i != n; i++){\n    for(var j = 0; j != m; j++){\n      if(j > 0){\n \
    \       out[i][j] = out[i][j] - xs[i][j] * out[i][j + 1];\n      } else {\n  \
    \      out[i][j] = out[i][j] - xs[i][j];\n      }\n    }\n  }\n  return out;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i\
    \ = 0; i < n; ++i) {\n    out[i] = xs[i] - ((i && 1 || 0) * (xs[i] - (xs[i] %\
    \ 1)) / i);\n  }\n\n  for (i = 1; i < n; ++i) {\n    m = xs[i] - (xs[i - 1] ||\
    \ 0);\n    out[i] = m / i;\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i+1];\n\
    \    }\n    return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        out\
    \ = [],\n        pows = [],\n        pow;\n\n    while(n--){\n        pow = xs[n]\
    \ * xs[n];\n        pows.push(pow);\n    }\n\n    for(var i = pows.length; i--;\
    \ ){\n        pow = pows[i];\n        out.push(pows[i + 1] / pow);\n    }\n\n\
    \    return out;\n}\n", "  var n = xs.length;\n  var dxs = [];\n  for(var i =\
    \ 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i = 0; i\
    \ < n; ++i) {\n    out[i] = xs[i+1];\n  }\n\n  for (i = 0; i+1 < n; ++i) {\n \
    \   m = xs[i] / xs[i+1];\n    out[i+1] = out[i] * m;\n  }\n\n  return out;\n}\n",
  "  var n = xs.length;\n  var dxs = [];\n  for(var i = 0; i <n; i++){\n    dxs[i]\
    \ = xs[i+1] - xs[i];\n  }\n  return dxs;\n}\n", "    var n = xs.length;\n    var\
    \ dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i -\
    \ 1]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = n - 2; i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = ((xs[m] *\
    \ xs[i]) - (xs[m + 1] * xs[m])) / xs[m];\n  }\n\n  return out;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var deriv = [];\n    for(var i = 0; i< n; i++){\n        deriv[i] = xs[i+1];\n\
    \    }\n    return deriv;\n}\n", "  var derivatives = [];\n  var pows = [];\n\
    \  for(var x = 0; x < xs.length; x++){\n    pows.push(Math.pow(xs[x], 2));\n \
    \ }\n  for(var x = 0; x < xs.length; x++){\n    derivatives.push(pows[x]);\n \
    \ }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n \
    \ for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        out\
    \ = [],\n        pow = [];\n    for(var i=0; i<n; i++){\n        pow[i] = 1;\n\
    \    }\n    for(var i=0; i<n; i++){\n        for(var j=0; j<n; j++){\n       \
    \     if(i == j){\n                pow[i] += xs[i] * xs[j];\n            }\n \
    \       }\n    }\n    for(var i=0; i<n; i++){\n        out.push(pow[i] / xs[i]);\n\
    \    }\n    return out;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
