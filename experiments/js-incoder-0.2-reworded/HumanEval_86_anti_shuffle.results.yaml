name: HumanEval_86_anti_shuffle
language: js
results:
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i=0;i<words.length;i++){\n\
    \        var letter = words[i].charCodeAt(0);\n        if(letter>64 && letter<91){\n\
    \            letter = letter - 32;\n        }\n        new_s += letter;\n    }\n\
    \    return new_s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'40'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmpphama2gz.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpphama2gz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '40',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var words\
    \ = s.split(\" \");\n  var new_word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    var ascii = words[i].charCodeAt(0);\n    new_word += String.fromCharCode(ascii);\n\
    \  }\n  return new_word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmpsquv717t.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsquv717t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var new_s_arr = [];\n    var new_s_arr_temp = [];\n    var new_s_arr_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp = [];\n    var new_s_arr_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp = [];\n   \
    \ var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n    var new_s_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n \
    \ assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp50vqydvn.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var new_s\
    \ = \"\";\n  var words = s.split(\" \");\n  for(var i=0;i<words.length;i++){\n\
    \    var letter = words[i].charCodeAt(0);\n    new_s += String.fromCharCode(letter);\n\
    \  }\n  return new_s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmpeg98vq97.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeg98vq97.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var letter = words[i].charCodeAt(0);\n        new_s += String.fromCharCode(letter);\n\
    \    }\n    return new_s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmp5vkcvgvv.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5vkcvgvv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var new_s_len = s.length;\n    var new_s_len2 = new_s_len*2;\n\
    \    var new_s_len3 = new_s_len2*2;\n    var new_s_len4 = new_s_len3*2;\n    var\
    \ new_s_len5 = new_s_len4*2;\n    var new_s_len6 = new_s_len5*2;\n    var new_s_len7\
    \ = new_s_len6*2;\n    var new_s_len8 = new_s_len7*2;\n    var new_s_len9 = new_s_len8*2;\n\
    \    var new_s_len10 = new_s_len9*2;\n    var new_s_len11 = new_s_len10*2;\n \
    \   var new_s_len12 = new_s_len11*2;\n    var new_s_len13 = new_s_len12*2;\n \
    \   var new_s_len14 = new_s_len13*2;\n    var new_s_len15 = new_s_len14*2;\n \
    \   var new_s_len16 = new_s_len15*2;\n    var new_s_len17 = new_s_len16*2;\n \
    \   var new_s_len18 = new_s_len17*2;\n    var new_s_len19 = new_s_len18*2;\n \
    \   var new_s_len20 = new_s_len19*2;\n    var new_s_len21 = new_s_len20*2;\n \
    \   var new_s_len22 = new_s_len21*2;\n    var new_s_len23 = new_s_len22*2;\n \
    \   var new_s_len24 = new_s_len23*2;\n    var new_s_len25 = new_s_len24*2;\n \
    \   var new_s_len26 = new_s_len25*2;\n    var new_s_len27 = new_s_len26*2;\n \
    \   var new_s_len28 = new_s_len27*2;\n    var new_s_len29 = new_s_len28*2;\n \
    \   var new_s_len30 = new_s_len29*2;\n    var new_s_len31 = new_s_len30*2;\n \
    \   var new_s_len32 = new_s_len31*2;\n    var new_s_len33 = new_s_len32*2;\n \
    \   var new_s_len34 = new_s_len33*2;\n    var new_s_len35 = new_s_len34*2;\n \
    \   var new_s_len36 = new_s_len35*2;\n    var new_s_len37 = new_s_len36*2;\n \
    \   var new_s_len38 = new_s_len37*2;\n    var new_s_len39 = new_s_len38*2;\n \
    \   var new_s_len40 = new_s_len39*2;\n    var new_s_len41 = new_s_len40*2;\n \
    \   var new_s_len42 = new_s_len41*2;\n    var new_s_len43 = new_s_len42*\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy8iqpn5_.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var new_s_len = s.length;\n    var new_s_len2 = new_s_len * 2;\n\
    \    var new_s_len3 = new_s_len2 * 2;\n    var new_s_len4 = new_s_len3 * 2;\n\
    \    var new_s_len5 = new_s_len4 * 2;\n    var new_s_len6 = new_s_len5 * 2;\n\
    \    var new_s_len7 = new_s_len6 * 2;\n    var new_s_len8 = new_s_len7 * 2;\n\
    \    var new_s_len9 = new_s_len8 * 2;\n    var new_s_len10 = new_s_len9 * 2;\n\
    \    var new_s_len11 = new_s_len10 * 2;\n    var new_s_len12 = new_s_len11 * 2;\n\
    \    var new_s_len13 = new_s_len12 * 2;\n    var new_s_len14 = new_s_len13 * 2;\n\
    \    var new_s_len15 = new_s_len14 * 2;\n    var new_s_len16 = new_s_len15 * 2;\n\
    \    var new_s_len17 = new_s_len16 * 2;\n    var new_s_len18 = new_s_len17 * 2;\n\
    \    var new_s_len19 = new_s_len18 * 2;\n    var new_s_len20 = new_s_len19 * 2;\n\
    \    var new_s_len21 = new_s_len20 * 2;\n    var new_s_len22 = new_s_len21 * 2;\n\
    \    var new_s_len23 = new_s_len22 * 2;\n    var new_s_len24 = new_s_len23 * 2;\n\
    \    var new_s_len25 = new_s_len24 * 2;\n    var new_s_len26 = new_s_len25 * 2;\n\
    \    var new_s_len27 = new_s_len26 * 2;\n    var new_s_len28 = new_s_len27 * 2;\n\
    \    var new_s_len29 = new_s_len28 * 2;\n    var new_s_len30 = new_s_len29 * 2;\n\
    \    var new_s_len31 = new_s_len30 * 2;\n    var new_s_len32 = new_s_len31 * 2;\n\
    \    var new_s_len33 = new_s_len32 * 2;\n    var new_s_len34 = new_s_len33 * 2;\n\
    \    var new_s_len35 = new_s_len34 * 2;\n    var new_s_len36 = new_s_len35 * 2;\n\
    \    var new_s_len37 = new_s_len36 * 2;\n    var new_s_len38 = new_s_len37 * 2;\n\
    \    var new_s_len39 = new_s_len38 * 2;\n    var new_s_len40 = new_s_len39 * 2;\n\
    \    var new_s_len41 = new_s_len40 * 2;\n    var new_s_len42 = new_s_len41 * 2;\n\
    \    var new_s_len43 = new_s_len42 * 2;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_qe0cm9d.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var newString\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var letter = words[i].charCodeAt(0);\n        newString += String.fromCharCode(letter);\n\
    \    }\n    return newString;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmp3c5o2lmq.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3c5o2lmq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var newString\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var letter = words[i].charCodeAt(0);\n        newString += String.fromCharCode(letter\
    \ - 65);\n    }\n    return newString;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x07'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmphprsfjjm.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphprsfjjm.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x07',\n\
    \  expected: 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i=0;i<words.length;i++){\n\
    \        var char = words[i].charCodeAt(0);\n        if(char<97 || char>122){\n\
    \            new_s += words[i];\n        }else{\n            new_s += String.fromCharCode(char-32);\n\
    \        }\n    }\n    return new_s;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmp12uh931a.js:33:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp12uh931a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var new_word = words[i];\n        var new_word_ascii = new_word.charCodeAt(0);\n\
    \        for(var j = 0; j < words.length; j++){\n            var other_word =\
    \ words[j];\n            var other_word_ascii = other_word.charCodeAt(0);\n  \
    \          if(other_word_ascii < new_word_ascii){\n                new_word +=\
    \ other_word;\n                words.splice(j, 1);\n                j--;\n   \
    \         }\n        }\n        new_s += new_word;\n    }\n    return new_s;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmp1anrc70u.js:39:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1anrc70u.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n\
    \  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var new_s\
    \ = \"\";\n  var words = s.split(\" \");\n  for(var i = 0; i < words.length; i++){\n\
    \    var new_word = words[i];\n    for(var j = 0; j < new_word.length; j++){\n\
    \      if(new_word.charCodeAt(j) > 96){\n        new_word += String.fromCharCode(new_word.charCodeAt(j)\
    \ - 96);\n      }\n    }\n    new_s += new_word + \" \";\n  }\n  return new_s.trim();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello\\b\\x05\\\
    f\\f\\x0F'\n\nshould loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmpos1u1xhg.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpos1u1xhg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello\\b\\\
    x05\\f\\f\\x0F',\n  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var letter = words[i].charCodeAt(0);\n        if(letter > 96\
    \ && letter < 123){\n            new_s += words[i];\n        }else{\n        \
    \    new_s += letter;\n        }\n    }\n    return new_s;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'72'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmpj190v9ao.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj190v9ao.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '72',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var new_s\
    \ = \"\";\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var new_word = words[i];\n        var new_word_ascii = new_word.charCodeAt(0);\n\
    \        for(var j = 0; j < words.length; j++){\n            var word_ascii =\
    \ words[j].charCodeAt(0);\n            if(word_ascii < new_word_ascii){\n    \
    \            new_word += words[j+1];\n                words[j+1] = \"\";\n   \
    \             break;\n            }\n        }\n        new_s += new_word;\n \
    \   }\n    return new_s;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmp8a3ilm2d.js:38:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8a3ilm2d.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n\
    \  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var words=s.split(\"\
    \ \");\n  var new_words=[];\n  for(var i=0;i<words.length;i++){\n    var new_word=words[i];\n\
    \    for(var j=i;j<words.length;j++){\n      if(words[j].charCodeAt(0)>words[i].charCodeAt(0)){\n\
    \        new_word+=words[j];\n        words.splice(j,1);\n      }\n    }\n   \
    \ new_words.push(new_word);\n  }\n  return new_words.join(\" \");\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmpgfq4z2u3.js:34:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpgfq4z2u3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n\
    \  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var words\
    \ = s.split(\" \");\n    var new_word = \"\";\n    for(var i = 0; i < words.length;\
    \ i++){\n        var char = words[i].charCodeAt(0);\n        new_word += String.fromCharCode(char);\n\
    \    }\n    return new_word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'H'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmp4ze_uc2s.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ze_uc2s.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'H',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var new_s\
    \ = \"\";\n  for(var i=0; i<s.length; i++){\n    var c = s.charAt(i);\n    var\
    \ n = s.charCodeAt(i);\n    if(n>96 && n<123) new_s += String.fromCharCode(n-32);\n\
    \    else new_s += c;\n  }\n  return new_s;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'HI'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmp7u23uy4z.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7u23uy4z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'HI',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var res\
    \ = [];\n    var words = s.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var word = words[i];\n        var index = word.length;\n    \
    \    while(index--){\n            var ascii = word.charCodeAt(index);\n      \
    \      var newChar = String.fromCharCode(ascii + 1);\n            word = word.slice(0,\
    \ index) + newChar + word.slice(index + 1);\n        }\n        res.push(word);\n\
    \    }\n    return res.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Ij'\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmp_2f_8702.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_2f_8702.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Ij',\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var new_s\
    \ = \"\";\n  var new_s_len = s.length;\n  var new_s_len2 = new_s_len*2;\n  var\
    \ new_s_len3 = new_s_len2*2;\n  var new_s_len4 = new_s_len3*2;\n  var new_s_len5\
    \ = new_s_len4*2;\n  var new_s_len6 = new_s_len5*2;\n  var new_s_len7 = new_s_len6*2;\n\
    \  var new_s_len8 = new_s_len7*2;\n  var new_s_len9 = new_s_len8*2;\n  var new_s_len10\
    \ = new_s_len9*2;\n  var new_s_len11 = new_s_len10*2;\n  var new_s_len12 = new_s_len11*2;\n\
    \  var new_s_len13 = new_s_len12*2;\n  var new_s_len14 = new_s_len13*2;\n  var\
    \ new_s_len15 = new_s_len14*2;\n  var new_s_len16 = new_s_len15*2;\n  var new_s_len17\
    \ = new_s_len16*2;\n  var new_s_len18 = new_s_len17*2;\n  var new_s_len19 = new_s_len18*2;\n\
    \  var new_s_len20 = new_s_len19*2;\n  var new_s_len21 = new_s_len20*2;\n  var\
    \ new_s_len22 = new_s_len21*2;\n  var new_s_len23 = new_s_len22*2;\n  var new_s_len24\
    \ = new_s_len23*2;\n  var new_s_len25 = new_s_len24*2;\n  var new_s_len26 = new_s_len25*2;\n\
    \  var new_s_len27 = new_s_len26*2;\n  var new_s_len28 = new_s_len27*2;\n  var\
    \ new_s_len29 = new_s_len28*2;\n  var new_s_len30 = new_s_len29*2;\n  var new_s_len31\
    \ = new_s_len30*2;\n  var new_s_len32 = new_s_len31*2;\n  var new_s_len33 = new_s_len32*2;\n\
    \  var new_s_len34 = new_s_len33*2;\n  var new_s_len35 = new_s_len34*2;\n  var\
    \ new_s_len36 = new_s_len35*2;\n  var new_s_len37 = new_s_len36*2;\n  var new_s_len38\
    \ = new_s_len37*2;\n  var new_s_len39 = new_s_len38*2;\n  var new_s_len40 = new_s_len39*2;\n\
    \  var new_s_len41 = new_s_len40*2;\n  var new_s_len42 = new_s_len41*2;\n  var\
    \ new_s_len43 = new_s_len42*\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9nbq_t13.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"\
    Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"\
    Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var new_s\
    \ = \"\";\n  var words = s.split(\" \");\n  for(var i=0;i<words.length;i++){\n\
    \    var new_word = words[i];\n    for(var j=i+1;j<words.length;j++){\n      if(words[j].charCodeAt(0)>words[i].charCodeAt(0)){\n\
    \        new_word += words[j];\n        words.splice(j,1);\n      }\n    }\n \
    \   new_s += new_word;\n  }\n  return new_s;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmp6ka0ox3j.js:35:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp6ka0ox3j.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n\
    \  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
