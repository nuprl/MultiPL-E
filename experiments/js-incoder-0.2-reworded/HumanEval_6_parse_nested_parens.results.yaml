language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string_reversed = \"\";\n    var paren_level_counter_reversed\
    \ = 0;\n    var paren_level_counter_reversed_string = \"\";\n    var paren_level_counter_reversed_string_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed = \"\"\
    ;\n    var paren_level_counter_reversed_string_reversed_reversed_reversed = \"\
    \";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7yfrz59f.js:44\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index2 = 0;\n  var paren_level_stack_pointer_max_index3\
    \ = 0;\n  var paren_level_stack_pointer_max_index4 = 0;\n  var paren_level_stack_pointer_max_index5\
    \ = 0;\n  var paren_level_stack_pointer_max_index6 = 0;\n  var paren_level_stack_pointer_max_index7\
    \ = 0;\n  var paren_level_stack_pointer_max_index8 = 0;\n  var paren_level_stack_pointer_max_index9\
    \ = 0;\n  var paren_level_stack_pointer_max_index10 = 0;\n  var paren_level_stack_pointer_max_index11\
    \ = 0;\n  var paren_level_stack_pointer_max_index12 = 0;\n  var paren_level_stack_pointer_max_index13\
    \ = 0;\n  var paren_level_stack_pointer_max_index14 = 0;\n  var paren_level_stack_pointer_max_index15\
    \ = 0;\n  var paren_level_stack_pointer_max_index16 = 0;\n  var paren_level_stack_pointer_max_index17\
    \ = 0;\n  var paren_level_stack_pointer_max_index18 = 0;\n  var paren_level_stack_pointer_max_index19\
    \ = 0;\n  var paren_level_stack_pointer_max_index20 = 0;\n  var paren_level_stack_pointer_max_index21\
    \ = 0;\n  var paren_level_stack_pointer_max_index22 = 0;\n  var paren_level_stack_pointer_max_index23\
    \ = 0;\n  var paren_level_stack_pointer_max_index24 = 0;\n  var paren_level_stack_pointer_max_index25\
    \ = 0;\n  var paren_level_stack_pointer_max_index26 = 0;\n  var paren_level_stack_pointer_max_index27\
    \ = 0;\n  var paren_level_stack_pointer_max_index28 = 0;\n  var paren_level_stack_pointer_max_index29\
    \ = 0;\n  var paren_level_stack_pointer_max_index30 = 0;\n  var paren_level_stack_pointer_max_index31\
    \ = 0;\n  var paren_level_stack_pointer_max_index32 = 0;\n  var paren_level_stack_pointer_max_index33\
    \ = 0;\n  var paren_level_stack_pointer_max_index34 = 0;\n  var paren_level_stack_pointer_max_index35\
    \ = 0;\n  var paren_level_stack_pointer_max_index36 = 0;\n  var paren_level_stack_pointer_max_index37\
    \ = 0;\n  var paren_level_stack_pointer_max_index38 = 0;\n  var paren_level_stack_pointer_max_index39\
    \ = 0;\n  var paren_level_stack_pointer_max_index40 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx6q5888u.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_level_counter = 0;\n    var paren_level_counter_max =\
    \ 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_string = \"\"\
    ;\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpymcxtfaf.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if(char === '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }else if(char === ')'){\n      paren_level = paren_stack.pop();\n\
    \    }\n    nested_parens.push(paren_level);\n  }\n  return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_29rf9bd.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_29rf9bd.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var paren_stack = [];\n    var paren_level = 0;\n    var paren_stack_string\
    \ = \"\";\n    var paren_level_string = \"\";\n    var paren_level_counter = 0;\n\
    \    var paren_level_counter_string = \"\";\n    var paren_level_counter_max =\
    \ 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_string = \"\";\n    var paren_level_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_string = \"\";\n \
    \   var paren_level_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_string = \"\"\
    ;\n    var paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_max_string =\
    \ \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpiq7y2pec.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tvar c = paren_string[i];\n\
    \t\tif(c == '('){\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t}else if(c == ')'){\n\t\t\tparen_level--;\n\t\t\tparen_nesting = paren_stack.pop();\n\
    \t\t}\n\t\tparen_levels.push(paren_nesting);\n\t}\n\treturn paren_levels;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n  0,\n  0,\n  2,\n  1,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  2,\n  1,\n  1,\n  1,\n  1,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpoee_o_kq.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoee_o_kq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 1, 1, 1, 0, 0, 0,\n    0, 0, 2, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 2, 1, 1,\
    \ 1,\n    1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == \"(\"){\n            paren_stack.push(paren_level);\n       \
    \     paren_level++;\n        }else if(char == \")\"){\n            paren_level\
    \ = paren_stack.pop();\n        }\n        if(paren_level > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  1,\n  2,\n  3,\n  2,\n  1,\n  1,\n  1,\n  2,\n  3,\n  2,\n\
    \  1,\n  2,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpvy0mgnuz.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvy0mgnuz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 1, 2,\n    3, 2, 1, 1, 1, 2, 3,\n    2, 1, 2, 1, 2, 1\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_char;\n    var paren_level_char_length;\n    var\
    \ paren_level_char_i;\n    var paren_level_char_j;\n    var paren_level_char_k;\n\
    \    var paren_level_char_l;\n    var paren_level_char_m;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplbuaoomv.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_stack.length\
    \ == 0){\n                nested_parens.push(paren_level);\n            }\n  \
    \      }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfbrsz4kh.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfbrsz4kh.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            nested_parens.push(paren_stack);\n            paren_stack.push(c);\n\
    \        }else if(c == ')'){\n            nested_parens.pop();\n            var\
    \ last_nested_level = nested_parens[nested_parens.length-1];\n            if(last_nested_level.length\
    \ == 0){\n                nested_level--;\n            }else{\n              \
    \  nested_level++;\n            }\n        }\n    }\n    return nested_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmplalybwyq.js:18\n            if(last_nested_level.length == 0){\n\
    \                                 ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'length')\n    at parse_nested_parens (/tmp/tmplalybwyq.js:18:34)\n\
    \    at test (/tmp/tmplalybwyq.js:33:20)\n    at Object.<anonymous> (/tmp/tmplalybwyq.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nestings = [];\n    var paren_levels_string = \"\";\n \
    \   var paren_nestings_string = \"\";\n    var paren_levels_string_reverse = \"\
    \";\n    var paren_nestings_string_reverse = \"\";\n    var paren_levels_string_reverse_count\
    \ = 0;\n    var paren_nestings_string_reverse_count = 0;\n    var paren_levels_string_reverse_count_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max = 0;\n    var paren_levels_string_reverse_count_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max = 0;\n    var paren_levels_string_reverse_count_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max = 0;\n    var\
    \ paren_levels_string_reverse_count_max_max_max_max = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max = 0;\n \
    \   var paren_nestings_string_reverse_count_max_max_max_max_max = 0;\n    var\
    \ paren_levels_string_reverse_count_max_max_max_max_max_max = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb_1ivkjg.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_level = [];\n\
    \    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_index2 = 0;\n    var paren_level_stack_index3 = 0;\n    var\
    \ paren_level_stack_index4 = 0;\n    var paren_level_stack_index5 = 0;\n    var\
    \ paren_level_stack_index6 = 0;\n    var paren_level_stack_index7 = 0;\n    var\
    \ paren_level_stack_index8 = 0;\n    var paren_level_stack_index9 = 0;\n    var\
    \ paren_level_stack_index10 = 0;\n    var paren_level_stack_index11 = 0;\n   \
    \ var paren_level_stack_index12 = 0;\n    var paren_level_stack_index13 = 0;\n\
    \    var paren_level_stack_index14 = 0;\n    var paren_level_stack_index15 = 0;\n\
    \    var paren_level_stack_index16 = 0;\n    var paren_level_stack_index17 = 0;\n\
    \    var paren_level_stack_index18 = 0;\n    var paren_level_stack_index19 = 0;\n\
    \    var paren_level_stack_index20 = 0;\n    var paren_level_stack_index21 = 0;\n\
    \    var paren_level_stack_index22 = 0;\n    var paren_level_stack_index23 = 0;\n\
    \    var paren_level_stack_index24 = 0;\n    var paren_level_stack_index25 = 0;\n\
    \    var paren_level_stack_index26 = 0;\n    var paren_level_stack_index27 = 0;\n\
    \    var paren_level_stack_index28 = 0;\n    var paren_level_stack_index29 = 0;\n\
    \    var paren_level_stack_index30 = 0;\n    var paren_level_stack_index31 = 0;\n\
    \    var paren_level_stack_index32 = 0;\n    var paren_level_stack_index33 = 0;\n\
    \    var paren_level_stack_index34 = 0;\n    var paren_level_stack_index35 = 0;\n\
    \    var paren_level_stack_index36 = 0;\n    var paren_level_stack_index37 = 0;\n\
    \    var paren_level_stack_index38 = 0;\n    var paren_level_stack_index39 = 0;\n\
    \    var paren_level_stack_index40 = 0;\n    var paren_level_stack_index41 = 1;\n\
    \    var paren_level_stack_index42 = 1;\n    var paren_level_stack_index43 = 1;\n\
    \    var paren_level_stack_index44 = 1;\n    var paren_level_stack_index45 = 1;\n\
    \    var paren_level_stack_index46 = 1;\n    var paren_level_stack_index47 = 1;\n\
    \    var paren_level_stack_index48 = 1;\n    var paren_level_stack_index49 = 1;\n\
    \    var paren_level_stack_index50 = 1;\n    var paren_level_stack_index51 = 1;\n\
    \    var paren_level_stack_index52 = 1;\n    var paren_level_stack_index53 = 1;\n\
    \    var paren_level_stack_index54 = 1;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp300cqa7i.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  var paren_levels_stack = [];\n  var paren_levels_stacks\
    \ = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack =\
    \ [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn1_lsvuu.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp03udm81u.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_level_counters_index = 0;\n    var\
    \ paren_level_counters_indexs = [];\n    var paren_level_counters_index = 0;\n\
    \    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9fp2_es2.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_groups = [];\n\
    \    var paren_groups = paren_string.split(\" \");\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        if(paren_group ===\
    \ \"(\"){\n            nested_paren_stack.push(nested_paren_level);\n        \
    \    nested_paren_level++;\n        }else if(paren_group === \")\"){\n       \
    \     var current_nested_paren_level = nested_paren_stack.pop();\n           \
    \ if(current_nested_paren_level > nested_paren_level){\n                nested_paren_level\
    \ = current_nested_paren_level;\n            }\n        }\n        nested_paren_groups.push(nested_paren_level);\n\
    \    }\n    return nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpqsur46v6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqsur46v6.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    var paren_stack_max = 0;\n    var paren_stack_max_index = 0;\n   \
    \ var paren_stack_max_level = 0;\n    var paren_stack_max_level_length = 0;\n\
    \    var paren_stack_max_level_length_index = 0;\n    var paren_stack_max_level_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_index = 0;\n    var paren_stack_max_level_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_index = 0;\n    var\
    \ paren_stack_max_level_length_value_length_value = 0;\n    var paren_stack_max_level_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length = 0;\n\
    \    var paren_stack_max_level_length_value_length_value_length_index = 0;\n \
    \   var paren_stack_max_level_length_value_length_value_length_value = 0;\n  \
    \  var paren_stack_max_level_length_value_length_value_length_value_index = 0;\n\
    \    var paren_stack_max_level_length_value_length_value_length_value_length =\
    \ 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4e1v2l0j.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_groups = [];\n\tvar paren_group_levels\
    \ = [];\n\tvar paren_group_counts = [];\n\tvar paren_group_counts_index = 0;\n\
    \tvar paren_group_counts_max = 0;\n\tvar paren_group_counts_max_index = 0;\n\t\
    var paren_group_counts_max_index2 = 0;\n\tvar paren_group_counts_max_index3 =\
    \ 0;\n\tvar paren_group_counts_max_index4 = 0;\n\tvar paren_group_counts_max_index5\
    \ = 0;\n\tvar paren_group_counts_max_index6 = 0;\n\tvar paren_group_counts_max_index7\
    \ = 0;\n\tvar paren_group_counts_max_index8 = 0;\n\tvar paren_group_counts_max_index9\
    \ = 0;\n\tvar paren_group_counts_max_index10 = 0;\n\tvar paren_group_counts_max_index11\
    \ = 0;\n\tvar paren_group_counts_max_index12 = 0;\n\tvar paren_group_counts_max_index13\
    \ = 0;\n\tvar paren_group_counts_max_index14 = 0;\n\tvar paren_group_counts_max_index15\
    \ = 0;\n\tvar paren_group_counts_max_index16 = 0;\n\tvar paren_group_counts_max_index17\
    \ = 0;\n\tvar paren_group_counts_max_index18 = 0;\n\tvar paren_group_counts_max_index19\
    \ = 0;\n\tvar paren_group_counts_max_index20 = 0;\n\tvar paren_group_counts_max_index21\
    \ = 0;\n\tvar paren_group_counts_max_index22 = 0;\n\tvar paren_group_counts_max_index23\
    \ = 0;\n\tvar paren_group_counts_max_index24 = 0;\n\tvar paren_group_counts_max_index25\
    \ = 0;\n\tvar paren_group_counts_max_index26 = 0;\n\tvar paren_group_counts_max_index27\
    \ = 0;\n\tvar paren_group_counts_max_index28 = 0;\n\tvar paren_group_counts_max_index29\
    \ = 0;\n\tvar paren_group_counts_max_index30 = 0;\n\tvar paren_group_counts_max_index31\
    \ = 0;\n\tvar paren_group_counts_max_index32 = 0;\n\tvar paren_group_counts_max_index33\
    \ = 0;\n\tvar paren_group_counts_max_index34 = 0;\n\tvar paren_group_counts_max_index35\
    \ = 0;\n\tvar paren_group_counts_max_index36 = 0;\n\tvar paren_group_counts_max_index37\
    \ = 0;\n\tvar paren_group_counts_max_index38 = 0;\n\tvar paren_group_counts_max_index39\
    \ = 0;\n\tvar paren_group_counts_max_index40 = 0;\n\tvar paren_group_counts_max_index41\
    \ = 0;\n\tvar paren_group_counts_max_index42 = 0;\n\tvar paren_group_count\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwtrcn4r5.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_index\
    \ = [];\n\tvar paren_levels_index[0] = 0;\n\tvar paren_levels_index[1] = 0;\n\t\
    var paren_levels_index[2] = 0;\n\tvar paren_levels_index[3] = 0;\n\tvar paren_levels_index[4]\
    \ = 0;\n\tvar paren_levels_index[5] = 0;\n\tvar paren_levels_index[6] = 0;\n\t\
    var paren_levels_index[7] = 0;\n\tvar paren_levels_index[8] = 0;\n\tvar paren_levels_index[9]\
    \ = 0;\n\tvar paren_levels_index[10] = 0;\n\tvar paren_levels_index[11] = 0;\n\
    \tvar paren_levels_index[12] = 0;\n\tvar paren_levels_index[13] = 0;\n\tvar paren_levels_index[14]\
    \ = 0;\n\tvar paren_levels_index[15] = 0;\n\tvar paren_levels_index[16] = 0;\n\
    \tvar paren_levels_index[17] = 0;\n\tvar paren_levels_index[18] = 0;\n\tvar paren_levels_index[19]\
    \ = 0;\n\tvar paren_levels_index[20] = 0;\n\tvar paren_levels_index[21] = 0;\n\
    \tvar paren_levels_index[22] = 0;\n\tvar paren_levels_index[23] = 0;\n\tvar paren_levels_index[24]\
    \ = 0;\n\tvar paren_levels_index[25] = 0;\n\tvar paren_levels_index[26] = 0;\n\
    \tvar paren_levels_index[27] = 0;\n\tvar paren_levels_index[28] = 0;\n\tvar paren_levels_index[29]\
    \ = 0;\n\tvar paren_levels_index[30] = 0;\n\tvar paren_levels_index[31] = 0;\n\
    \tvar paren_levels_index[32] = 0;\n\tvar paren_levels_index[33] = 0;\n\tvar paren_levels_index[34]\
    \ = 0;\n\tvar paren_levels_index[35] = 0;\n\tvar paren_levels_index[36] = 0;\n\
    \tvar paren_levels_index[37] = 0;\n\tvar paren_levels_index[38] = 0;\n\tvar paren_levels_index[39]\
    \ = 0;\n\tvar paren_levels_index[40] = 0;\n\tvar paren_levels_index[41] = 0;\n\
    \tvar paren_levels_index[42] = 0;\n\tvar paren_levels_index[43] = 0;\n\tvar paren_levels_index[44]\
    \ = 0;\n\tvar paren_levels_index[45] = 0;\n\tvar paren_levels_index[46] = 0;\n\
    \tvar paren_levels_index[47] = 0;\n\tvar paren_levels_index[48] = 0;\n\tvar paren_levels_index[49]\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps0p_p14c.js:11\n\tvar paren_levels_index[0] = 0;\n\t          \
    \            ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char == \"(\"){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }\n        else if(char == \")\"){\n    \
    \        paren_count = paren_stack.pop();\n        }\n        else if(char ==\
    \ \" \"){\n            if(paren_count > 0){\n                nested_parens.push(paren_level);\n\
    \            }\n            paren_count = 0;\n            paren_level++;\n   \
    \     }\n    }\n    if(paren_count > 0){\n        nested_parens.push(paren_level);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps6i6x6sc.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmps6i6x6sc.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\
    \tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i]==\"(\"){\n\
    \t\t\tparen_stack.push(paren_count);\n\t\t\tparen_count++;\n\t\t}\n\t\telse if(paren_string[i]==\"\
    )\"){\n\t\t\tparen_count = paren_stack.pop();\n\t\t}\n\t\telse if(paren_string[i]==\"\
    \ \"){\n\t\t\tif(paren_stack.length==0){\n\t\t\t\tnested_parens.push(paren_level);\n\
    \t\t\t}\n\t\t\tparen_level++;\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpdm_t9d7e.js:34:10)\n    at Object.<anonymous> (/tmp/tmpdm_t9d7e.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string.charAt(i);\n\
    \        if(c == '('){\n            paren_stack.push(c);\n            paren_count++;\n\
    \        }\n        else if(c == ')'){\n            paren_count--;\n         \
    \   if(paren_count === 0){\n                nested_parens.push(paren_stack.pop());\n\
    \                nested_level++;\n            }\n        }\n    }\n    return\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(',\n  '(',\n\
    \  '(',\n  '('\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n\
    \    at test (/tmp/tmp2i_h3o0o.js:33:10)\n    at Object.<anonymous> (/tmp/tmp2i_h3o0o.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(', '(',\
    \ '(', '(' ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level);\n    \
    \        paren_level++;\n        }\n        else if(char == \")\"){\n        \
    \    paren_level_count = paren_stack.pop();\n            paren_level--;\n    \
    \    }\n        else if(char == \" \"){\n            if(paren_level_count == 0){\n\
    \                nested_parens.push(paren_level);\n            }\n        }\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp9d9eo_nm.js:35:10)\n    at Object.<anonymous> (/tmp/tmp9d9eo_nm.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_stack_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpahaagx85.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_level_stack[paren_level_stack_index]\
    \ = paren_level;\n            paren_level_stack_index++;\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level = paren_level_stack[paren_level_stack_index-1];\n\
    \            paren_level_stack_index--;\n        }\n        else if(char == \"\
    \ \"){\n            if(paren_level_stack_index > 0){\n                paren_level_stack[paren_level_stack_index]\
    \ = paren_level;\n                paren_level_stack_index++;\n            }\n\
    \        }\n        else{\n            paren_level--;\n        }\n    }\n    return\
    \ paren_level_stack;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpgskgnarv.js:40:10)\n    at Object.<anonymous> (/tmp/tmpgskgnarv.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_count\
    \ = 0;\n  var paren_level_max_count = 1;\n  var paren_level_max_count_index =\
    \ 0;\n  var paren_level_max_count_index2 = 0;\n  var paren_level_max_count_index3\
    \ = 0;\n  var paren_level_max_count_index4 = 0;\n  var paren_level_max_count_index5\
    \ = 0;\n  var paren_level_max_count_index6 = 0;\n  var paren_level_max_count_index7\
    \ = 0;\n  var paren_level_max_count_index8 = 0;\n  var paren_level_max_count_index9\
    \ = 0;\n  var paren_level_max_count_index10 = 0;\n  var paren_level_max_count_index11\
    \ = 0;\n  var paren_level_max_count_index12 = 0;\n  var paren_level_max_count_index13\
    \ = 0;\n  var paren_level_max_count_index14 = 0;\n  var paren_level_max_count_index15\
    \ = 0;\n  var paren_level_max_count_index16 = 0;\n  var paren_level_max_count_index17\
    \ = 0;\n  var paren_level_max_count_index18 = 0;\n  var paren_level_max_count_index19\
    \ = 0;\n  var paren_level_max_count_index20 = 0;\n  var paren_level_max_count_index21\
    \ = 0;\n  var paren_level_max_count_index22 = 0;\n  var paren_level_max_count_index23\
    \ = 0;\n  var paren_level_max_count_index24 = 0;\n  var paren_level_max_count_index25\
    \ = 0;\n  var paren_level_max_count_index26 = 0;\n  var paren_level_max_count_index27\
    \ = 0;\n  var paren_level_max_count_index28 = 0;\n  var paren_level_max_count_index29\
    \ = 0;\n  var paren_level_max_count_index30 = 0;\n  var paren_level_max_count_index31\
    \ = 0;\n  var paren_level_max_count_index32 = 0;\n  var paren_level_max_count_index33\
    \ = 0;\n  var paren_level_max_count_index34 = 0;\n  var paren_level_max_count_index35\
    \ = 0;\n  var paren_level_max_count_index36 = 0;\n  var paren_level_max_count_index37\
    \ = 0;\n  var paren_level_max_count_index38 = 0;\n  var paren_level_max_count_index39\
    \ = 0;\n  var paren_level_max_count_index40 = 0;\n  var paren_level_max_count_index41\
    \ = 0;\n  var paren_level_max_count_index42 = 0;\n  var paren_level_max_count_index43\
    \ = 0;\n  var paren_level_max_count_index44 = 0;\n  var paren_level_max_count_index45\
    \ = 0;\n  var paren_level_max_count_index46 = 0;\n  var paren_level_max_count_index47\
    \ = 0;\n  var paren_level_max_count_index48 = 0;\n  var paren_level_max_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp6hso617.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_count\
    \ = 0;\n  var paren_level_max = 0;\n  var paren_level_max_count = 0;\n  var paren_level_max_max\
    \ = 0;\n  var paren_level_max_max_count = 0;\n  var paren_level_max_max_max =\
    \ 0;\n  var paren_level_max_max_max_count = 0;\n  var paren_level_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_count = 0;\n  var\
    \ paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n \
    \ var paren_level_max_max_max_max_max_max_max_max_max_max_count = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max_count =\
    \ 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_count =\
    \ 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n  var paren_level_max_max_max_max_max_max_max_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf6yedw37.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        var c = paren_string[i];\n        if(c ==\
    \ '('){\n            paren_stack.push(level);\n            level++;\n        }\n\
    \        else if(c == ')'){\n            level = paren_stack.pop();\n        }\n\
    \        else if(c != ' '){\n            level--;\n        }\n        if(level\
    \ > max_level){\n            max_level = level;\n        }\n    }\n    return\
    \ max_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0z1o_euw.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0z1o_euw.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_stack\
    \ = [];\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max_count = 0;\n    var paren_level_max_count_index\
    \ = 0;\n    var paren_level_max_count_index2 = 0;\n    var paren_level_max_count_index3\
    \ = 0;\n    var paren_level_max_count_index4 = 0;\n    var paren_level_max_count_index5\
    \ = 0;\n    var paren_level_max_count_index6 = 0;\n    var paren_level_max_count_index7\
    \ = 0;\n    var paren_level_max_count_index8 = 0;\n    var paren_level_max_count_index9\
    \ = 0;\n    var paren_level_max_count_index10 = 0;\n    var paren_level_max_count_index11\
    \ = 0;\n    var paren_level_max_count_index12 = 0;\n    var paren_level_max_count_index13\
    \ = 0;\n    var paren_level_max_count_index14 = 0;\n    var paren_level_max_count_index15\
    \ = 0;\n    var paren_level_max_count_index16 = 0;\n    var paren_level_max_count_index17\
    \ = 0;\n    var paren_level_max_count_index18 = 0;\n    var paren_level_max_count_index19\
    \ = 0;\n    var paren_level_max_count_index20 = 0;\n    var paren_level_max_count_index21\
    \ = 0;\n    var paren_level_max_count_index22 = 0;\n    var paren_level_max_count_index23\
    \ = 0;\n    var paren_level_max_count_index24 = 0;\n    var paren_level_max_count_index25\
    \ = 0;\n    var paren_level_max_count_index26 = 0;\n    var paren_level_max_count_index27\
    \ = 0;\n    var paren_level_max_count_index28 = 0;\n    var paren_level_max_count_index29\
    \ = 0;\n    var paren_level_max_count_index30 = 0;\n    var paren_level_max_count_index31\
    \ = 0;\n    var paren_level_max_count_index32 = 0;\n    var paren_level_max_count_index33\
    \ = 0;\n    var paren_level_max_count_index34 = 0;\n    var paren_level_max_count_index35\
    \ = 0;\n    var paren_level_max_count_index36 = 0;\n    var paren_level_max_count_index37\
    \ = 0;\n    var paren_level_max_count_index38 = 0;\n    var paren_level_max_count_index39\
    \ = 0;\n    var paren_level_max_count_index40 = 0;\n    var paren_level_max_count_index41\
    \ = 0;\n    var paren_level_max_count_index42 = 0;\n    var paren_level_max_count_index43\
    \ = 0;\n    var paren_level_max_count_index44 = 0;\n    var paren_level_max_count_index45\
    \ = 0;\n    var paren_level_max_count_index46 = 0;\n    var paren_level_max_count_index47\
    \ = 0;\n    var paren_level_max_count_index48 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp787lukzz.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_stack_string = \"\";\n\tvar paren_level_string = \"\";\n\t\
    var paren_level_counter = 0;\n\tvar paren_level_counter_string = \"\";\n\tvar\
    \ paren_level_counter_max = 0;\n\tvar paren_level_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_max = 0;\n\tvar paren_level_counter_max_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min = 0;\n\tvar paren_level_counter_max_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_max = 0;\n\tvar paren_level_counter_max_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min = 0;\n\tvar paren_level_counter_max_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_min_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min_max = 0;\n\tvar paren_level_counter_max_min_min_min_min_min_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min_min = 0;\n\tvar paren_level_counter_max_min_min_min_min_min_min_string\
    \ = \"\";\n\tvar paren_level_counter_max_min_min_min_min_min_min_max = 0;\n\t\
    var paren_level_counter_max_min_min_min_min_min_min_max_string = \"\";\n\tvar\
    \ paren_level_counter_max_min_min_min_min_min_min_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj5lyatyu.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_length = 0;\n    var paren_stack_pointer = 0;\n \
    \   var paren_stack_pointer_length = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_length = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_index2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_index4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_index6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_index8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_index10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_index12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_index14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_index16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_index18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_index20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = 0;\n    var paren_stack_pointer_max_index22 = 0;\n    var paren_stack_pointer_max_index23\
    \ = 0;\n    var paren_stack_pointer_max_index24 = 0;\n    var paren_stack_pointer_max_index25\
    \ = 0;\n    var paren_stack_pointer_max_index26 = 0;\n    var paren_stack_pointer_max_index27\
    \ = 0;\n    var paren_stack_pointer_max_index28 = 0;\n    var paren_stack_pointer_max_index29\
    \ = 0;\n    var paren_stack_pointer_max_index30 = 0;\n    var paren_stack_pointer_max_index31\
    \ = 0;\n    var paren_stack_pointer_max_index32 = 0;\n    var paren_stack_pointer_max_index33\
    \ = 0;\n    var paren_stack_pointer_max_index34 = 0;\n    var paren_stack_pointer_max_index35\
    \ = 0;\n    var paren_stack_pointer_max_index36 = 0;\n    var paren_stack_pointer_max_index37\
    \ = 0;\n    var paren_stack_pointer_max_index38 = 0;\n    var paren_stack_pointer_max_index39\
    \ = 0;\n    var paren_stack_pointer_max_index40 = 0;\n    var paren_stack_pointer_max_index41\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwcobgoct.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(level);\n            level++;\n        }\n        else if(char\
    \ == \")\"){\n            level--;\n        }\n    }\n    return paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7r6wj135.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7r6wj135.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_stack.length\
    \ == 0){\n                nested_parens.push(paren_level);\n            }\n  \
    \      }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfbrsz4kh.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfbrsz4kh.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level.length);\n\
    \t\t\tparen_level.push(level);\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\
    \t\t\tvar level_diff = paren_level.pop() - paren_stack.pop();\n\t\t\tif(level_diff\
    \ > level){\n\t\t\t\tlevel = level_diff;\n\t\t\t}\n\t\t}\n\t}\n\treturn paren_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpxxjg8a_v.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxxjg8a_v.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var max_level = 0;\n    var paren_stack = [];\n    var paren_level\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_index2 = 0;\n    var paren_level_stack_index3 = 0;\n\
    \    var paren_level_stack_index4 = 0;\n    var paren_level_stack_index5 = 0;\n\
    \    var paren_level_stack_index6 = 0;\n    var paren_level_stack_index7 = 0;\n\
    \    var paren_level_stack_index8 = 0;\n    var paren_level_stack_index9 = 0;\n\
    \    var paren_level_stack_index10 = 0;\n    var paren_level_stack_index11 = 0;\n\
    \    var paren_level_stack_index12 = 0;\n    var paren_level_stack_index13 = 0;\n\
    \    var paren_level_stack_index14 = 0;\n    var paren_level_stack_index15 = 0;\n\
    \    var paren_level_stack_index16 = 0;\n    var paren_level_stack_index17 = 0;\n\
    \    var paren_level_stack_index18 = 0;\n    var paren_level_stack_index19 = 0;\n\
    \    var paren_level_stack_index20 = 0;\n    var paren_level_stack_index21 = 0;\n\
    \    var paren_level_stack_index22 = 0;\n    var paren_level_stack_index23 = 0;\n\
    \    var paren_level_stack_index24 = 0;\n    var paren_level_stack_index25 = 0;\n\
    \    var paren_level_stack_index26 = 0;\n    var paren_level_stack_index27 = 0;\n\
    \    var paren_level_stack_index28 = 0;\n    var paren_level_stack_index29 = 0;\n\
    \    var paren_level_stack_index30 = 0;\n    var paren_level_stack_index31 = 0;\n\
    \    var paren_level_stack_index32 = 0;\n    var paren_level_stack_index33 = 0;\n\
    \    var paren_level_stack_index34 = 0;\n    var paren_level_stack_index35 = 0;\n\
    \    var paren_level_stack_index36 = 0;\n    var paren_level_stack_index37 = 0;\n\
    \    var paren_level_stack_index38 = 0;\n    var paren_level_stack_index39 = 0;\n\
    \    var paren_level_stack_index40 = 0;\n    var paren_level_stack_index41 = 1;\n\
    \    var paren_level_stack_index42 = 1;\n    var paren_level_stack_index43 = 1;\n\
    \    var paren_level_stack_index44 = 1;\n    var paren_level_stack_index45 = 1;\n\
    \    var paren_level_stack_index46 = 1;\n    var paren_level_stack_index47 = 1;\n\
    \    var paren_level_stack_index48 = 1;\n    var paren_level_stack_index49 = 1;\n\
    \    var paren_level_stack_index50 = 1;\n    var paren_level_stack_index51 = 1;\n\
    \    var paren_level_stack_index52 = 1;\n    var paren_level_stack_index53 = 1;\n\
    \    var paren_level_stack_index54 = 1;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy2z96h2z.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}else if(paren_string[i] == \")\"){\n\t\t\tparen_level--;\n\
    \t\t\tif(paren_level == 0){\n\t\t\t\tparen_nesting++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return paren_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4pm7bgua.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4pm7bgua.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_stacks = [];\n    var paren_levels_stack = [];\n    var\
    \ paren_levels_stacks = [];\n    var paren_levels_stacks_stack = [];\n    var\
    \ paren_levels_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stack =\
    \ [];\n    var paren_levels_stacks_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stack = [];\n    var\
    \ paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack =\
    \ [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n    var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp09g47lcl.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_string = \"\";\n    var paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack = [];\n    var paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_string = \"\";\n    var\
    \ paren_level_stack_last_paren_level_stack_last_index = 0;\n    var paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level =\
    \ 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string.charAt(i);\n\
    \        if(c == '('){\n            paren_level_stack_string = paren_level_stack_string.concat(c);\n\
    \            paren_level_stack_last_string = paren_level_stack_last_string.concat(c);\n\
    \            paren_level_stack_last_paren_level_stack_string = paren_level_stack_last_paren_level_stack_string.concat(c);\n\
    \            paren_level_stack_last_paren_level_stack_last_string = paren_level_stack_last_paren_level_stack_last_string.concat(c);\n\
    \            paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = paren_level_stack_last_paren_level_stack_last_paren_level_stack_string.concat(c);\n\
    \            paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string.concat(c);\n\
    \            paren_level_stack_last_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplgszrqd9.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(char);\n            paren_level++;\n        }else if(char\
    \ == \")\"){\n            paren_level--;\n            if(paren_level == 0){\n\
    \                paren_stack.pop();\n                nested_paren_stack.push(paren_stack.length);\n\
    \            }\n        }else if(char == \" \"){\n            if(paren_stack.length\
    \ > 0){\n                paren_stack_string = paren_stack_string.concat(paren_stack);\n\
    \                paren_stack = [];\n                nested_paren_stack.push(paren_stack.length);\n\
    \            }\n        }\n    }\n    if(paren_stack.length > 0){\n        paren_stack_string\
    \ = paren_stack_string.concat(paren_stack);\n        paren_stack = [];\n     \
    \   nested_paren_stack.push(paren_stack.length);\n    }\n    return nested_paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0,\n\
    \  2,\n  0,\n  0,\n  4,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp8bngwg1s.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8bngwg1s.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 0, 2, 0,\n    0, 4, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_char;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length_limit;\n  \
    \  var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var paren_level_char_length_limit_index;\n    var paren_level_char_length_limit_index;\n\
    \    var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo20kn6dh.js:66\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_levels = [];\n\tvar paren_level_stack\
    \ = [];\n\tvar paren_level_stack_pointer = 0;\n\tvar paren_level_stack_pointer_max\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index = 0;\n\tvar paren_level_stack_pointer_max_index2\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index3 = 0;\n\tvar paren_level_stack_pointer_max_index4\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index5 = 0;\n\tvar paren_level_stack_pointer_max_index6\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index7 = 0;\n\tvar paren_level_stack_pointer_max_index8\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index9 = 0;\n\tvar paren_level_stack_pointer_max_index10\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index11 = 0;\n\tvar paren_level_stack_pointer_max_index12\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index13 = 0;\n\tvar paren_level_stack_pointer_max_index14\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index15 = 0;\n\tvar paren_level_stack_pointer_max_index16\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index17 = 0;\n\tvar paren_level_stack_pointer_max_index18\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index19 = 0;\n\tvar paren_level_stack_pointer_max_index20\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index21 = 0;\n\tvar paren_level_stack_pointer_max_index22\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index23 = 0;\n\tvar paren_level_stack_pointer_max_index24\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index25 = 0;\n\tvar paren_level_stack_pointer_max_index26\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index27 = 0;\n\tvar paren_level_stack_pointer_max_index28\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index29 = 0;\n\tvar paren_level_stack_pointer_max_index30\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index31 = 0;\n\tvar paren_level_stack_pointer_max_index32\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index33 = 0;\n\tvar paren_level_stack_pointer_max_index34\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index35 = 0;\n\tvar paren_level_stack_pointer_max_index36\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index37 = 0;\n\tvar paren_level_stack_pointer_max_index38\
    \ = 0;\n\tvar paren_level_stack_pointer_max_index39 = 0;\n\tvar paren_level_stack_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl6d8hi8y.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxluz42fw.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max = 0;\n    var\
    \ paren_stack_pointer_max = 0;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqpivrwv5.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_string_reversed = \"\";\n    var paren_levels_string_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed = \"\";\n  \
    \  var paren_levels_string_reversed_reversed_reversed_reversed = \"\";\n    var\
    \ paren_levels_string_reversed_reversed_reversed_reversed_reversed = \"\";\n \
    \   var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxwholrro.js:40\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_level = 0;\n    var paren_stack_max = 0;\n    var\
    \ paren_stack_curr = 0;\n    var paren_stack_curr_depth = 0;\n    var paren_stack_curr_max\
    \ = 0;\n    var paren_stack_curr_curr = 0;\n    var paren_stack_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_depth = 0;\n    var paren_stack_curr_curr_curr_max\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_depth = 0;\n    var paren_stack_curr_curr_curr_curr_curr_max\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr = 0;\n    var paren_stack_curr_curr_curr_curr_curr_depth\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_depth = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_depth = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_depth = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_depth = 0;\n    var\
    \ paren_stack_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr_depth = 0;\n  \
    \  var paren_stack_curr_curr_curr_curr_curr_curr_curr_max = 0;\n    var paren_stack_curr_curr_curr_curr_curr_curr_curr\
    \ = 0;\n    var paren_stack_curr_curr_curr_curr_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6kfj0dj7.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  var paren_levels_stack = [];\n  var paren_levels_stacks\
    \ = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks = [];\n\
    \  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack = [];\n  var\
    \ paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0cx8c508.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            nested_parens.push(nested_level);\n            paren_stack.push(nested_level);\n\
    \            nested_level++;\n        }\n        else if(char == \")\"){\n   \
    \         nested_level = paren_stack.pop();\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_7m9gvec.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_7m9gvec.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_level_counter_stack = [];\n    var paren_level_counter_max\
    \ = 0;\n    var paren_level_counter_max_stack = [];\n    var paren_level_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_stack = [];\n    var paren_level_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_stack = [];\n    var paren_level_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_stack = [];\n    var\
    \ paren_level_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_stack = [];\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n  \
    \  var paren_level_counter_max_counter_max_counter_max_counter_max_stack = [];\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_max_counter =\
    \ 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_stack\
    \ = [];\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpju8gpjeu.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = [];\n    var paren_levels_index[0] = 0;\n\
    \    var paren_levels_index[1] = 0;\n    var paren_levels_index[2] = 0;\n    var\
    \ paren_levels_index[3] = 0;\n    var paren_levels_index[4] = 0;\n    var paren_levels_index[5]\
    \ = 0;\n    var paren_levels_index[6] = 0;\n    var paren_levels_index[7] = 0;\n\
    \    var paren_levels_index[8] = 0;\n    var paren_levels_index[9] = 0;\n    var\
    \ paren_levels_index[10] = 0;\n    var paren_levels_index[11] = 0;\n    var paren_levels_index[12]\
    \ = 0;\n    var paren_levels_index[13] = 0;\n    var paren_levels_index[14] =\
    \ 0;\n    var paren_levels_index[15] = 0;\n    var paren_levels_index[16] = 0;\n\
    \    var paren_levels_index[17] = 0;\n    var paren_levels_index[18] = 0;\n  \
    \  var paren_levels_index[19] = 0;\n    var paren_levels_index[20] = 0;\n    var\
    \ paren_levels_index[21] = 0;\n    var paren_levels_index[22] = 0;\n    var paren_levels_index[23]\
    \ = 0;\n    var paren_levels_index[24] = 0;\n    var paren_levels_index[25] =\
    \ 0;\n    var paren_levels_index[26] = 0;\n    var paren_levels_index[27] = 0;\n\
    \    var paren_levels_index[28] = 0;\n    var paren_levels_index[29] = 0;\n  \
    \  var paren_levels_index[30] = 0;\n    var paren_levels_index[31] = 0;\n    var\
    \ paren_levels_index[32] = 0;\n    var paren_levels_index[33] = 0;\n    var paren_levels_index[34]\
    \ = 0;\n    var paren_levels_index[35] = 0;\n    var paren_levels_index[36] =\
    \ 0;\n    var paren_levels_index[37] = 0;\n    var paren_levels_index[38] = 0;\n\
    \    var paren_levels_index[39] = 0;\n    var paren_levels_index[40] = 0;\n  \
    \  var paren_levels_index[41] = 0;\n    var paren_levels_index[42] = 0;\n    var\
    \ paren_levels_index[43] = 0;\n    var paren_levels_index[44] = 0;\n    var paren_levels_index[45]\
    \ = 0;\n    var paren_levels_index[46] = 0;\n    var paren_levels_index[47] =\
    \ 0;\n    var paren_levels_index[48] = 0;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnjetg9y2.js:12\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_stacks = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(paren_level);\n            paren_level++;\n            paren_levels.push(paren_stack);\n\
    \            paren_stack = [];\n        }else if(char == \")\"){\n           \
    \ paren_level = paren_stack.pop();\n            paren_levels.push(paren_stack);\n\
    \        }\n    }\n    for(var i=0; i<paren_levels.length; i++){\n        var\
    \ level = paren_levels[i];\n        for(var j=0; j<level.length; j++){\n     \
    \       if(level[j] > 0){\n                nested_parens.push(level[j]);\n   \
    \         }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpbmgxzoaw.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbmgxzoaw.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_char_found = false;\n    var paren_char_found2\
    \ = false;\n    var paren_char_found3 = false;\n    var paren_char_found4 = false;\n\
    \    var paren_char_found5 = false;\n    var paren_char_found6 = false;\n    var\
    \ paren_char_found7 = false;\n    var paren_char_found8 = false;\n    var paren_char_found9\
    \ = false;\n    var paren_char_found10 = false;\n    var paren_char_found11 =\
    \ false;\n    var paren_char_found12 = false;\n    var paren_char_found13 = false;\n\
    \    var paren_char_found14 = false;\n    var paren_char_found15 = false;\n  \
    \  var paren_char_found16 = false;\n    var paren_char_found17 = false;\n    var\
    \ paren_char_found18 = false;\n    var paren_char_found19 = false;\n    var paren_char_found20\
    \ = false;\n    var paren_char_found21 = false;\n    var paren_char_found22 =\
    \ false;\n    var paren_char_found23 = false;\n    var paren_char_found24 = false;\n\
    \    var paren_char_found25 = false;\n    var paren_char_found26 = false;\n  \
    \  var paren_char_found27 = false;\n    var paren_char_found28 = false;\n    var\
    \ paren_char_found29 = false;\n    var paren_char_found30 = false;\n    var paren_char_found31\
    \ = false;\n    var paren_char_found32 = false;\n    var paren_char_found33 =\
    \ false;\n    var paren_char_found34 = false;\n    var paren_char_found35 = false;\n\
    \    var paren_char_found36 = false;\n    var paren_char_found37 = false;\n  \
    \  var paren_char_found38 = false;\n    var paren_char_found39 = false;\n    var\
    \ paren_char_found40 = false;\n    var paren_char_found41 = false;\n    var paren_char_found42\
    \ = false;\n    var paren_char_found43 = false;\n    var paren_char_found44 =\
    \ false;\n    var paren_char_found45 = false;\n    var paren_char_found46 = false;\n\
    \    var paren_char_found47 = false;\n    var paren_char_found48 = false;\n  \
    \  var paren_char_found49 = false;\n    var paren_char_found50 = false;\n    var\
    \ paren_char_found51 = false;\n    var paren_char_found52 = false;\n    var paren_char_found53\
    \ = false;\n    var paren_char_found54 = false;\n    var paren_char_found55 =\
    \ false;\n    var paren_char_found56 = false;\n    var paren_char_found57 = false;\n\
    \    var paren_char_found58 = false;\n    var paren_char_found59 = false;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxkmnulq3.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == \"(\"){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(char == \")\"){\n      paren_count = paren_stack.pop();\n\
    \    }\n    else if(char == \" \"){\n      if(paren_count > 0){\n        nested_parens[paren_level]\
    \ = paren_count;\n      }\n      paren_count = 0;\n      paren_level++;\n    }\n\
    \  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp5ar2k16i.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ar2k16i.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var c = paren_string[i];\n \
    \   if(c == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(c == ')'){\n      paren_count = paren_stack.pop();\n    }\n\
    \    else if(paren_count > 0){\n      paren_level++;\n    }\n    else if(paren_count\
    \ < 0){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy3ebltrl.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy3ebltrl.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar max_level = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tvar c = paren_string[i];\n\t\tif(c == '('){\n\t\t\tparen_stack.push(level);\n\
    \t\t\tlevel++;\n\t\t}\n\t\telse if(c == ')'){\n\t\t\tlevel = paren_stack.pop();\n\
    \t\t}\n\t\telse if(c == ' '){\n\t\t\tif(level > max_level){\n\t\t\t\tmax_level\
    \ = level;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgx_b8gdk.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgx_b8gdk.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_level =\
    \ 0;\n  var paren_char;\n  var paren_char_found = false;\n  var paren_char_found2\
    \ = false;\n  var paren_char_found3 = false;\n  var paren_char_found4 = false;\n\
    \  var paren_char_found5 = false;\n  var paren_char_found6 = false;\n  var paren_char_found7\
    \ = false;\n  var paren_char_found8 = false;\n  var paren_char_found9 = false;\n\
    \  var paren_char_found10 = false;\n  var paren_char_found11 = false;\n  var paren_char_found12\
    \ = false;\n  var paren_char_found13 = false;\n  var paren_char_found14 = false;\n\
    \  var paren_char_found15 = false;\n  var paren_char_found16 = false;\n  var paren_char_found17\
    \ = false;\n  var paren_char_found18 = false;\n  var paren_char_found19 = false;\n\
    \  var paren_char_found20 = false;\n  var paren_char_found21 = false;\n  var paren_char_found22\
    \ = false;\n  var paren_char_found23 = false;\n  var paren_char_found24 = false;\n\
    \  var paren_char_found25 = false;\n  var paren_char_found26 = false;\n  var paren_char_found27\
    \ = false;\n  var paren_char_found28 = false;\n  var paren_char_found29 = false;\n\
    \  var paren_char_found30 = false;\n  var paren_char_found31 = false;\n  var paren_char_found32\
    \ = false;\n  var paren_char_found33 = false;\n  var paren_char_found34 = false;\n\
    \  var paren_char_found35 = false;\n  var paren_char_found36 = false;\n  var paren_char_found37\
    \ = false;\n  var paren_char_found38 = false;\n  var paren_char_found39 = false;\n\
    \  var paren_char_found40 = false;\n  var paren_char_found41 = false;\n  var paren_char_found42\
    \ = false;\n  var paren_char_found43 = false;\n  var paren_char_found44 = false;\n\
    \  var paren_char_found45 = false;\n  var paren_char_found46 = false;\n  var paren_char_found47\
    \ = false;\n  var paren_char_found48 = false;\n  var paren_char_found49 = false;\n\
    \  var paren_char_found50 = false;\n  var paren_char_found51 = false;\n  var paren_char_found52\
    \ = false;\n  var paren_char_found53 = false;\n  var paren_char_found54 = false;\n\
    \  var paren_char_found55 = false;\n  var paren_char_found56 = false;\n  var paren_char_found57\
    \ = false;\n  var paren_char_found58 = false;\n  var paren_char_found59 = false;\n\
    \  var paren_\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjad_0ppw.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}else if(paren_string[i] == \")\"){\n\t\t\tparen_level--;\n\
    \t\t\tif(paren_level == 0){\n\t\t\t\tparen_nesting++;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return paren_nesting;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp4pm7bgua.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4pm7bgua.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var paren_stack = [];\n    var paren_level = 0;\n    var paren_stack_string\
    \ = \"\";\n    var paren_level_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack = [];\n    var paren_level_stack_string =\
    \ \"\";\n    var paren_level_stack_array = [];\n    var paren_level_stack_array_string\
    \ = \"\";\n    var paren_level_stack_array_index = 0;\n    var paren_level_stack_array_length\
    \ = 0;\n    var paren_level_stack_array_count = 0;\n    var paren_level_stack_array_element\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var paren_level_stack_array_element_count = 0;\n    var paren_level_stack_array_element_string\
    \ = \"\";\n    var paren_level_stack_array_element_index = 0;\n    var paren_level_stack_array_element_length\
    \ = 0;\n    var \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpckuvzh1t.js:64\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tvar char = paren_string[i];\n\t\tif(char == \"(\"){\n\t\t\tparen_stack.push(paren_levels.length);\n\
    \t\t\tparen_levels.push(nested_level);\n\t\t}\n\t\telse if(char == \")\"){\n\t\
    \t\tvar current_level = paren_stack.pop();\n\t\t\tparen_levels[current_level]\
    \ = paren_levels[current_level] - 1;\n\t\t\tif(paren_levels[current_level] ==\
    \ 0){\n\t\t\t\tnested_level = current_level;\n\t\t\t}\n\t\t}\n\t}\n\treturn paren_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1,\n  -1,\n\
    \  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpijnpvoqw.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpijnpvoqw.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -1,\
    \ -1, -1, -1, -1,\n    -1, -1, -1, -1, -1,\n    -1, -1\n  ],\n  expected: [ 2,\
    \ 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char === '('){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }else if(char === ')'){\n            paren_count--;\n\
    \            if(paren_count === 0){\n                paren_levels.push(paren_level);\n\
    \            }\n        }\n    }\n    return paren_levels;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpr7potlos.js:31:10)\n    at Object.<anonymous> (/tmp/tmpr7potlos.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_stack_string =\
    \ \"\";\n    var paren_level_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var\
    \ paren_level_stack_string = \"\";\n    var paren_level_stack_string = \"\";\n\
    \    var paren_level_stack_string = \"\";\n    var paren_level_stack_string =\
    \ \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdownz2g3.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppl_m07cc.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\
    \tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(level);\n\t\t\tlevel++;\n\
    \t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tlevel = paren_stack.pop();\n\
    \t\t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpeq_ob9iq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeq_ob9iq.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_nesting++;\n    }else if(paren_string[i]\
    \ == ')'){\n      paren_nesting--;\n    }\n    if(paren_nesting == 0){\n     \
    \ nested_parens.push(paren_level);\n    }\n    if(paren_nesting > 0){\n      paren_level++;\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  5,\n\
    \  10,\n  10,\n  11,\n  11,\n  20\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpj7g8jtio.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj7g8jtio.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  5, 10, 10,\n    11, 11, 20\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo48p6u2k.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_groups\
    \ = [];\n    var paren_group_level = 0;\n    var paren_group_nesting = 0;\n  \
    \  var paren_group_groups = [];\n    var paren_group_group_level = 0;\n    var\
    \ paren_group_group_nesting = 0;\n    var paren_group_group_groups = [];\n   \
    \ var paren_group_group_group_level = 0;\n    var paren_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpem27unza.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_levels = [];\n    var paren_level_char;\n\
    \    var paren_level_chars = [];\n    var paren_level_char_index = 0;\n    var\
    \ paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var paren_level_char_length;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length;\n    var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxbzvuqpi.js:82\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tvar char = paren_string[i];\n\
    \t\t\n\t\tif(char == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t\tparen_nesting++;\n\t\t}\n\t\telse if(char == \")\"){\n\t\t\tparen_level--;\n\
    \t\t\tparen_nesting--;\n\t\t}\n\t\telse if(char == \" \"){\n\t\t\tif(paren_nesting\
    \ == 0){\n\t\t\t\tparen_levels.push(paren_level);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\
    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpptiy1acr.js:39:10)\n    at Object.<anonymous> (/tmp/tmpptiy1acr.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(paren_count);\n            paren_count++;\n        }\n    \
    \    else if(char == \")\"){\n            paren_count = paren_stack.pop();\n \
    \       }\n        else if(char == \" \"){\n            if(paren_count > 0){\n\
    \                paren_levels[paren_level] = paren_count;\n            }\n   \
    \         paren_count = 0;\n            paren_level++;\n        }\n    }\n   \
    \ if(paren_count > 0){\n        paren_levels[paren_level] = paren_count;\n   \
    \ }\n    for(var i=0; i<paren_levels.length; i++){\n        nested_parens.push(paren_levels[i]);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmi1g6zlg.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmi1g6zlg.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_max = 0;\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter = 0;\n    var paren_level_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7swsofyt.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_string = \"\";\n    var paren_stack_level = 0;\n\
    \    var paren_stack_paren_level = 0;\n    var paren_stack_paren_level_max = 0;\n\
    \    var paren_stack_paren_level_max_index = 0;\n    var paren_stack_paren_level_max_string\
    \ = \"\";\n    var paren_stack_paren_level_max_string_index = 0;\n    var paren_stack_paren_level_max_string_index2\
    \ = 0;\n    var paren_stack_paren_level_max_string_index3 = 0;\n    var paren_stack_paren_level_max_string_index4\
    \ = 0;\n    var paren_stack_paren_level_max_string_index5 = 0;\n    var paren_stack_paren_level_max_string_index6\
    \ = 0;\n    var paren_stack_paren_level_max_string_index7 = 0;\n    var paren_stack_paren_level_max_string_index8\
    \ = 0;\n    var paren_stack_paren_level_max_string_index9 = 0;\n    var paren_stack_paren_level_max_string_index10\
    \ = 0;\n    var paren_stack_paren_level_max_string_index11 = 0;\n    var paren_stack_paren_level_max_string_index12\
    \ = 0;\n    var paren_stack_paren_level_max_string_index13 = 0;\n    var paren_stack_paren_level_max_string_index14\
    \ = 0;\n    var paren_stack_paren_level_max_string_index15 = 0;\n    var paren_stack_paren_level_max_string_index16\
    \ = 0;\n    var paren_stack_paren_level_max_string_index17 = 0;\n    var paren_stack_paren_level_max_string_index18\
    \ = 0;\n    var paren_stack_paren_level_max_string_index19 = 0;\n    var paren_stack_paren_level_max_string_index20\
    \ = 0;\n    var paren_stack_paren_level_max_string_index21 = 0;\n    var paren_stack_paren_level_max_string_index22\
    \ = 0;\n    var paren_stack_paren_level_max_string_index23 = 0;\n    var paren_stack_paren_level_max_string_index24\
    \ = 0;\n    var paren_stack_paren_level_max_string_index25 = 0;\n    var paren_stack_paren_level_max_string_index26\
    \ = 0;\n    var paren_stack_paren_level_max_string_index27 = 0;\n    var paren_stack_paren_level_max_string_index28\
    \ = 0;\n    var paren_stack_paren_level_max_string_index29 = 0;\n    var paren_stack_paren_level_max_string_index30\
    \ = 0;\n    var paren_stack_paren_level_max_string_index31 = 0;\n    var paren_stack_paren_level_max_string_index32\
    \ = 0;\n    var paren_stack_paren_level_max_string_index33 = 0;\n    var paren_stack_paren_level_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpie85itak.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_levels = [];\n\
    \    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n\
    \    var paren_levels_string = \"\";\n    var paren_levels_strings = [];\n   \
    \ var paren_levels_strings_string = \"\";\n    var paren_levels_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_string = \"\";\n    var paren_levels_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_string = \"\";\n    var\
    \ paren_levels_strings_strings_strings_strings_string = \"\";\n    var paren_levels_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_string =\
    \ \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n    var paren_levels_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv9zl57l2.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        var c = paren_string[i];\n        if(c ==\
    \ '('){\n            paren_stack.push(level);\n            level++;\n        }\n\
    \        else if(c == ')'){\n            level = paren_stack.pop();\n        }\n\
    \        else if(c != ' ' && c != '\\t' && c != '\\n'){\n            level--;\n\
    \        }\n        if(level > max_level){\n            max_level = level;\n \
    \       }\n    }\n    return max_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzsfi6qdv.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzsfi6qdv.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_stack_string = \"\";\n  var paren_level_string = \"\";\n \
    \ var paren_level_counter = 0;\n  var paren_level_counter_string = \"\";\n  var\
    \ paren_level_counter_string2 = \"0\";\n  var paren_level_counter_string3 = \"\
    0\";\n  var paren_level_counter_string4 = \"0\";\n  var paren_level_counter_string5\
    \ = \"0\";\n  var paren_level_counter_string6 = \"0\";\n  var paren_level_counter_string7\
    \ = \"0\";\n  var paren_level_counter_string8 = \"0\";\n  var paren_level_counter_string9\
    \ = \"0\";\n  var paren_level_counter_string10 = \"0\";\n  var paren_level_counter_string11\
    \ = \"0\";\n  var paren_level_counter_string12 = \"0\";\n  var paren_level_counter_string13\
    \ = \"0\";\n  var paren_level_counter_string14 = \"0\";\n  var paren_level_counter_string15\
    \ = \"0\";\n  var paren_level_counter_string16 = \"0\";\n  var paren_level_counter_string17\
    \ = \"0\";\n  var paren_level_counter_string18 = \"0\";\n  var paren_level_counter_string19\
    \ = \"0\";\n  var paren_level_counter_string20 = \"0\";\n  var paren_level_counter_string21\
    \ = \"0\";\n  var paren_level_counter_string22 = \"0\";\n  var paren_level_counter_string23\
    \ = \"0\";\n  var paren_level_counter_string24 = \"0\";\n  var paren_level_counter_string25\
    \ = \"0\";\n  var paren_level_counter_string26 = \"0\";\n  var paren_level_counter_string27\
    \ = \"0\";\n  var paren_level_counter_string28 = \"0\";\n  var paren_level_counter_string29\
    \ = \"0\";\n  var paren_level_counter_string30 = \"0\";\n  var paren_level_counter_string31\
    \ = \"0\";\n  var paren_level_counter_string32 = \"0\";\n  var paren_level_counter_string33\
    \ = \"0\";\n  var paren_level_counter_string34 = \"0\";\n  var paren_level_counter_string35\
    \ = \"0\";\n  var paren_level_counter_string36 = \"0\";\n  var paren_level_counter_string37\
    \ = \"0\";\n  var paren_level_counter_string38 = \"0\";\n  var paren_level_counter_string39\
    \ = \"0\";\n  var paren_level_counter_string40 = \"0\";\n  var paren_level_counter_string41\
    \ = \"0\";\n  var paren_level_counter_string42 = \"0\";\n  var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxwgy_41o.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_count\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_last_char\
    \ = \"\";\n    var paren_level_stack_last_char_pos = 0;\n    var paren_level_stack_last_char_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code = 0;\n    var paren_level_stack_last_char_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_length = 0;\n    var paren_level_stack_last_char_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_pos = 0;\n   \
    \ var paren_level_stack_last_char_char_code_char_code_length = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code_char_code_pos\
    \ = 0;\n    var paren_level_stack_last_char_char_code_char_code_char_code_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8suqnmw8.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748332
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level);\n    \
    \        paren_level++;\n        }else if(char == \")\"){\n            paren_level--;\n\
    \            paren_nesting++;\n        }else if(char == \" \"){\n            if(paren_nesting\
    \ > paren_stack[paren_stack.length-1]){\n                paren_levels.push(paren_level);\n\
    \            }\n            paren_nesting = 0;\n        }\n    }\n    return paren_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp818cu2l1.js:34:10)\n    at Object.<anonymous> (/tmp/tmp818cu2l1.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_string\
    \ = \"\";\n\tvar paren_levels_index = 0;\n\tvar paren_levels_string_index = 0;\n\
    \tvar paren_levels_string_index2 = 0;\n\tvar paren_levels_string_index3 = 0;\n\
    \tvar paren_levels_string_index4 = 0;\n\tvar paren_levels_string_index5 = 0;\n\
    \tvar paren_levels_string_index6 = 0;\n\tvar paren_levels_string_index7 = 0;\n\
    \tvar paren_levels_string_index8 = 0;\n\tvar paren_levels_string_index9 = 0;\n\
    \tvar paren_levels_string_index10 = 0;\n\tvar paren_levels_string_index11 = 0;\n\
    \tvar paren_levels_string_index12 = 0;\n\tvar paren_levels_string_index13 = 0;\n\
    \tvar paren_levels_string_index14 = 0;\n\tvar paren_levels_string_index15 = 0;\n\
    \tvar paren_levels_string_index16 = 0;\n\tvar paren_levels_string_index17 = 0;\n\
    \tvar paren_levels_string_index18 = 0;\n\tvar paren_levels_string_index19 = 0;\n\
    \tvar paren_levels_string_index20 = 0;\n\tvar paren_levels_string_index21 = 0;\n\
    \tvar paren_levels_string_index22 = 0;\n\tvar paren_levels_string_index23 = 0;\n\
    \tvar paren_levels_string_index24 = 0;\n\tvar paren_levels_string_index25 = 0;\n\
    \tvar paren_levels_string_index26 = 0;\n\tvar paren_levels_string_index27 = 0;\n\
    \tvar paren_levels_string_index28 = 0;\n\tvar paren_levels_string_index29 = 0;\n\
    \tvar paren_levels_string_index30 = 0;\n\tvar paren_levels_string_index31 = 0;\n\
    \tvar paren_levels_string_index32 = 0;\n\tvar paren_levels_string_index33 = 0;\n\
    \tvar paren_levels_string_index34 = 0;\n\tvar paren_levels_string_index35 = 0;\n\
    \tvar paren_levels_string_index36 = 0;\n\tvar paren_levels_string_index37 = 0;\n\
    \tvar paren_levels_string_index38 = 0;\n\tvar paren_levels_string_index39 = 0;\n\
    \tvar paren_levels_string_index40 = 0;\n\tvar paren_levels_string_index41 = 0;\n\
    \tvar paren_levels_string_index42 = 0;\n\tvar paren_levels_string_index43 = 0;\n\
    \tvar paren_levels_string_index44 = 0;\n\tvar paren_levels_string_index45 = 0;\n\
    \tvar paren_levels_string_index46 = 0;\n\tvar paren_levels_string_index47 = 0;\n\
    \tvar paren_levels_string_index48 = 0;\n\tvar paren\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcbm7g5f5.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_string = \"\";\n    var paren_levels_string_index\
    \ = 0;\n    var paren_levels_string_length = 0;\n    var paren_levels_string_temp\
    \ = \"\";\n    var paren_levels_string_temp_length = 0;\n    var paren_levels_string_temp_count\
    \ = 0;\n    var paren_levels_string_temp_count_index = 0;\n    var paren_levels_string_temp_count_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp = \"\";\n    var paren_levels_string_temp_count_temp_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count = 0;\n    var paren_levels_string_temp_count_temp_count_index\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_length = 0;\n    var\
    \ paren_levels_string_temp_count_temp_count_temp = \"\";\n    var paren_levels_string_temp_count_temp_count_temp_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count = 0;\n  \
    \  var paren_levels_string_temp_count_temp_count_temp_count_index = 0;\n    var\
    \ paren_levels_string_temp_count_temp_count_temp_count_length = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp\
    \ = \"\";\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_index\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp\
    \ = \"\";\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_index\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_temp\
    \ = \"\";\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_temp_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_temp_count\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_temp_count_index\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_count_temp_count_temp_count_temp_count_length\
    \ = 0;\n    var paren_levels_string_temp_count_temp_count_temp_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8rtlycsg.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(char == ')'){\n      paren_count = paren_stack.pop();\n  \
    \  }\n    else if(char == ' ' && paren_count > 0){\n      nested_parens.push(paren_level);\n\
    \      paren_level = 0;\n    }\n    else if(char == ' ' && paren_count <= 0){\n\
    \      paren_level++;\n    }\n  }\n  return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpheo2l0zx.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpheo2l0zx.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_counter = 0;\n  var paren_level_counter_stack = [];\n\
    \  var paren_level_counter_reset = 0;\n  var paren_level_counter_reset_stack =\
    \ [];\n  var paren_level_counter_reset_counter = 0;\n  var paren_level_counter_reset_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter = 0;\n  var paren_level_counter_reset_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter = 0;\n  var paren_level_counter_reset_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter = 0;\n\
    \  var paren_level_counter_reset_counter_counter_counter_counter_stack = [];\n\
    \  var paren_level_counter_reset_counter_counter_counter_counter_counter = 0;\n\
    \  var paren_level_counter_reset_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n  var paren_level_counter_reset_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq8x1se2s.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar paren_stack = [];\n\tvar paren_stack_pointer\
    \ = 0;\n\tvar paren_stack_pointer_max = 0;\n\tvar paren_stack_pointer_max_index\
    \ = 0;\n\tvar paren_stack_pointer_max_index2 = 0;\n\tvar paren_stack_pointer_max_index3\
    \ = 0;\n\tvar paren_stack_pointer_max_index4 = 0;\n\tvar paren_stack_pointer_max_index5\
    \ = 0;\n\tvar paren_stack_pointer_max_index6 = 0;\n\tvar paren_stack_pointer_max_index7\
    \ = 0;\n\tvar paren_stack_pointer_max_index8 = 0;\n\tvar paren_stack_pointer_max_index9\
    \ = 0;\n\tvar paren_stack_pointer_max_index10 = 0;\n\tvar paren_stack_pointer_max_index11\
    \ = 0;\n\tvar paren_stack_pointer_max_index12 = 0;\n\tvar paren_stack_pointer_max_index13\
    \ = 0;\n\tvar paren_stack_pointer_max_index14 = 0;\n\tvar paren_stack_pointer_max_index15\
    \ = 0;\n\tvar paren_stack_pointer_max_index16 = 0;\n\tvar paren_stack_pointer_max_index17\
    \ = 0;\n\tvar paren_stack_pointer_max_index18 = 0;\n\tvar paren_stack_pointer_max_index19\
    \ = 0;\n\tvar paren_stack_pointer_max_index20 = 0;\n\tvar paren_stack_pointer_max_index21\
    \ = 0;\n\tvar paren_stack_pointer_max_index22 = 0;\n\tvar paren_stack_pointer_max_index23\
    \ = 0;\n\tvar paren_stack_pointer_max_index24 = 0;\n\tvar paren_stack_pointer_max_index25\
    \ = 0;\n\tvar paren_stack_pointer_max_index26 = 0;\n\tvar paren_stack_pointer_max_index27\
    \ = 0;\n\tvar paren_stack_pointer_max_index28 = 0;\n\tvar paren_stack_pointer_max_index29\
    \ = 0;\n\tvar paren_stack_pointer_max_index30 = 0;\n\tvar paren_stack_pointer_max_index31\
    \ = 0;\n\tvar paren_stack_pointer_max_index32 = 0;\n\tvar paren_stack_pointer_max_index33\
    \ = 0;\n\tvar paren_stack_pointer_max_index34 = 0;\n\tvar paren_stack_pointer_max_index35\
    \ = 0;\n\tvar paren_stack_pointer_max_index36 = 0;\n\tvar paren_stack_pointer_max_index37\
    \ = 0;\n\tvar paren_stack_pointer_max_index38 = 0;\n\tvar paren_stack_pointer_max_index39\
    \ = 0;\n\tvar paren_stack_pointer_max_index40 = 0;\n\tvar paren_stack_pointer_max_index41\
    \ = 0;\n\tvar paren_stack_pointer_max_index42 = 0;\n\tvar paren_stack_pointer_max_index43\
    \ = 0;\n\tvar paren_stack_pointer_max_index44\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppdv152gz.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack = [];\n\
    \    var paren_level_stack_array = [];\n    var paren_level_stack_array_string\
    \ = \"\";\n    var paren_level_stack_array_string_reversed = \"\";\n    var paren_level_stack_array_string_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed =\
    \ \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_stack_array_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2j504i19.js:44\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group === \"()\"){\n            nested_paren_level++;\n\
    \        }\n        else if(paren_group === \")\"){\n            nested_paren_level--;\n\
    \        }\n        else if(paren_group === \"()\"){\n            nested_paren_stack.push(nested_paren_level);\n\
    \        }\n        else if(paren_group === \")\"){\n            var current_level\
    \ = nested_paren_stack.pop();\n            if(current_level < nested_paren_level){\n\
    \                nested_paren_level = current_level;\n            }\n        }\n\
    \    }\n    return nested_paren_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd049yvhf.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd049yvhf.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i]==\"(\"){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }else if(paren_string[i]==\")\"){\n      paren_level--;\n\
    \      if(paren_stack.length>0){\n        nested_parens.push(paren_stack.pop());\n\
    \      }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  0,\n  2,\n  1,\n  0,\n  0,\n  2,\n  1,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpapoqdh50.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapoqdh50.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 0, 2, 1,\n    0, 0, 2, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_stack = [];\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tparen_level\
    \ = paren_stack.pop();\n\t\t}\n\t\telse{\n\t\t\tnested_parens.push(paren_level);\n\
    \t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp4otwdo_0.js:30:10)\n    at Object.<anonymous> (/tmp/tmp4otwdo_0.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_stack\
    \ = [];\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  var paren_levels = [];\n  var paren_level_lengths = [];\n  var paren_level_lengths_index\
    \ = 0;\n  var paren_level_lengths_max = 0;\n  var paren_level_lengths_max_index\
    \ = 0;\n  var paren_level_lengths_max_index2 = 0;\n  var paren_level_lengths_max_index3\
    \ = 0;\n  var paren_level_lengths_max_index4 = 0;\n  var paren_level_lengths_max_index5\
    \ = 0;\n  var paren_level_lengths_max_index6 = 0;\n  var paren_level_lengths_max_index7\
    \ = 0;\n  var paren_level_lengths_max_index8 = 0;\n  var paren_level_lengths_max_index9\
    \ = 0;\n  var paren_level_lengths_max_index10 = 0;\n  var paren_level_lengths_max_index11\
    \ = 0;\n  var paren_level_lengths_max_index12 = 0;\n  var paren_level_lengths_max_index13\
    \ = 0;\n  var paren_level_lengths_max_index14 = 0;\n  var paren_level_lengths_max_index15\
    \ = 0;\n  var paren_level_lengths_max_index16 = 0;\n  var paren_level_lengths_max_index17\
    \ = 0;\n  var paren_level_lengths_max_index18 = 0;\n  var paren_level_lengths_max_index19\
    \ = 0;\n  var paren_level_lengths_max_index20 = 0;\n  var paren_level_lengths_max_index21\
    \ = 0;\n  var paren_level_lengths_max_index22 = 0;\n  var paren_level_lengths_max_index23\
    \ = 0;\n  var paren_level_lengths_max_index24 = 0;\n  var paren_level_lengths_max_index25\
    \ = 0;\n  var paren_level_lengths_max_index26 = 0;\n  var paren_level_lengths_max_index27\
    \ = 0;\n  var paren_level_lengths_max_index28 = 0;\n  var paren_level_lengths_max_index29\
    \ = 0;\n  var paren_level_lengths_max_index30 = 0;\n  var paren_level_lengths_max_index31\
    \ = 0;\n  var paren_level_lengths_max_index32 = 0;\n  var paren_level_lengths_max_index33\
    \ = 0;\n  var paren_level_lengths_max_index34 = 0;\n  var paren_level_lengths_max_index35\
    \ = 0;\n  var paren_level_lengths_max_index36 = 0;\n  var paren_level_lengths_max_index37\
    \ = 0;\n  var paren_level_lengths_max_index38 = 0;\n  var paren_level_lengths_max_index39\
    \ = 0;\n  var paren_level_lengths_max_index40 = 0;\n  var paren_level_lengths_max_index41\
    \ = 1;\n  var paren_level_lengths_max_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxrqpapos.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\
    \tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(level);\n\t\t\tlevel++;\n\
    \t\t}else if(paren_string[i] == \")\"){\n\t\t\tlevel = paren_stack.pop();\n\t\t\
    }\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkwzs1zh2.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkwzs1zh2.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tnested_paren_stack.push(nested_paren_level);\n\
    \t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tnested_paren_level = nested_paren_stack.pop();\n\
    \t\t}\n\t}\n\treturn nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpu8e_deu3.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu8e_deu3.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var nested_paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_stack = [];\n  var paren_stack_pointer = 0;\n  var paren_stack_pointer_max\
    \ = 0;\n  var paren_stack_pointer_max_index = 0;\n  var paren_stack_pointer_max_value\
    \ = 0;\n  var paren_stack_pointer_max_value_length = 0;\n  var paren_stack_pointer_max_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_index = 0;\n  var paren_stack_pointer_max_value_count_value\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_length = 0;\n  var paren_stack_pointer_max_value_count_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_index = 0;\n  var\
    \ paren_stack_pointer_max_value_count_value_count_value = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_length\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count = 0;\n\
    \  var paren_stack_pointer_max_value_count_value_count_value_count_index = 0;\n\
    \  var paren_stack_pointer_max_value_count_value_count_value_count_value = 0;\n\
    \  var paren_stack_pointer_max_value_count_value_count_value_count_value_length\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_index\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_length\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_index\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_length\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_count_index\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_count_value\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_count_value_length\
    \ = 0;\n  var paren_stack_pointer_max_value_count_value_count_value_count_value_count_value_count_value_count_value_count\
    \ = 0;\n  var paren_stack_pointer_max_value_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp51po5uif.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s/g, \"\");\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(paren_level);\n            paren_level++;\n       \
    \ }\n        else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(char == \" \" && paren_stack.length > 0){\n      \
    \      nested_parens.push(paren_stack.pop());\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpachchpok.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpachchpok.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = 0;\n    var paren_level_counter = 0;\n    var paren_level_counter_index =\
    \ 0;\n    var paren_level_counter_value = 0;\n    var paren_level_counter_value_index\
    \ = 0;\n    var paren_level_counter_value_value = 0;\n    var paren_level_counter_value_value_index\
    \ = 0;\n    var paren_level_counter_value_value_value = 0;\n    var paren_level_counter_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_index = 0;\n    var paren_level_counter_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var paren_level_counter_value_value_value_value_value\
    \ = 0;\n    var paren_level_counter_value_value_value_value_value = 0;\n    var\
    \ paren_level_counter_value_value_value_value_value = 0;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprzpqvx2z.js:55\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_string = \"\";\n    var paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_string = \"\";\n    var paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_string = \"\";\n    var paren_level_stack_last_paren_level_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_string = \"\";\n    var\
    \ paren_level_stack_last_paren_level_last_paren_level = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_last_paren_level_last_paren_level_last_paren_level_last_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_hon51xa.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n   \
    \         paren_count++;\n            paren_level++;\n        }else if(paren_string[i]\
    \ === \")\"){\n            paren_count--;\n            paren_level--;\n      \
    \  }\n        if(paren_count === 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpckkb6gg1.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpckkb6gg1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_levels =\
    \ [];\n  var paren_level_stack = [];\n  var paren_level_stack_index = 0;\n  var\
    \ paren_level_stack_string = \"\";\n  var paren_level_stack_parens = [];\n  var\
    \ paren_level_stack_parens_index = 0;\n  var paren_level_stack_parens_string =\
    \ \"\";\n  var paren_level_stack_parens_string_index = 0;\n  var paren_level_stack_parens_string_index2\
    \ = 0;\n  var paren_level_stack_parens_string_index3 = 0;\n  var paren_level_stack_parens_string_index4\
    \ = 0;\n  var paren_level_stack_parens_string_index5 = 0;\n  var paren_level_stack_parens_string_index6\
    \ = 0;\n  var paren_level_stack_parens_string_index7 = 0;\n  var paren_level_stack_parens_string_index8\
    \ = 0;\n  var paren_level_stack_parens_string_index9 = 0;\n  var paren_level_stack_parens_string_index10\
    \ = 0;\n  var paren_level_stack_parens_string_index11 = 0;\n  var paren_level_stack_parens_string_index12\
    \ = 0;\n  var paren_level_stack_parens_string_index13 = 0;\n  var paren_level_stack_parens_string_index14\
    \ = 0;\n  var paren_level_stack_parens_string_index15 = 0;\n  var paren_level_stack_parens_string_index16\
    \ = 0;\n  var paren_level_stack_parens_string_index17 = 0;\n  var paren_level_stack_parens_string_index18\
    \ = 0;\n  var paren_level_stack_parens_string_index19 = 0;\n  var paren_level_stack_parens_string_index20\
    \ = 0;\n  var paren_level_stack_parens_string_index21 = 0;\n  var paren_level_stack_parens_string_index22\
    \ = 0;\n  var paren_level_stack_parens_string_index23 = 0;\n  var paren_level_stack_parens_string_index24\
    \ = 0;\n  var paren_level_stack_parens_string_index25 = 0;\n  var paren_level_stack_parens_string_index26\
    \ = 0;\n  var paren_level_stack_parens_string_index27 = 0;\n  var paren_level_stack_parens_string_index28\
    \ = 0;\n  var paren_level_stack_parens_string_index29 = 0;\n  var paren_level_stack_parens_string_index30\
    \ = 0;\n  var paren_level_stack_parens_string_index31 = 0;\n  var paren_level_stack_parens_string_index32\
    \ = 0;\n  var paren_level_stack_parens_string_index33 = 0;\n  var paren_level_stack_parens_string_index34\
    \ = 0;\n  var paren_level_stack_parens_string_index35 = 0;\n  var paren_level_stack_parens_string_index36\
    \ = 0;\n  var paren_level_stack_parens_string_index37 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjvkcuq5g.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_max_level = 0;\n    var paren_max_level_stack\
    \ = [];\n    var paren_max_level_stack_index = 0;\n    var paren_level_index =\
    \ 0;\n    var paren_level_stack_index = 0;\n    var paren_level_stack = [];\n\
    \    var paren_level_stack_pointer = 0;\n    var paren_level_stack_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn4h151r8.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i]==\"\
    (\"){\n            paren_stack.push(paren_count);\n            paren_count++;\n\
    \        }else if(paren_string[i]==\")\"){\n            paren_count = paren_stack.pop();\n\
    \        }\n        if(paren_stack.length==0){\n            nested_parens.push(paren_count);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpyot347xx.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyot347xx.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    var paren_stack_max = 0;\n    var paren_stack_max_index = 0;\n   \
    \ var paren_stack_max_index2 = 0;\n    var paren_stack_max_index3 = 0;\n    var\
    \ paren_stack_max_index4 = 0;\n    var paren_stack_max_index5 = 0;\n    var paren_stack_max_index6\
    \ = 0;\n    var paren_stack_max_index7 = 0;\n    var paren_stack_max_index8 =\
    \ 0;\n    var paren_stack_max_index9 = 0;\n    var paren_stack_max_index10 = 0;\n\
    \    var paren_stack_max_index11 = 0;\n    var paren_stack_max_index12 = 0;\n\
    \    var paren_stack_max_index13 = 0;\n    var paren_stack_max_index14 = 0;\n\
    \    var paren_stack_max_index15 = 0;\n    var paren_stack_max_index16 = 0;\n\
    \    var paren_stack_max_index17 = 0;\n    var paren_stack_max_index18 = 0;\n\
    \    var paren_stack_max_index19 = 0;\n    var paren_stack_max_index20 = 0;\n\
    \    var paren_stack_max_index21 = 0;\n    var paren_stack_max_index22 = 0;\n\
    \    var paren_stack_max_index23 = 0;\n    var paren_stack_max_index24 = 0;\n\
    \    var paren_stack_max_index25 = 0;\n    var paren_stack_max_index26 = 0;\n\
    \    var paren_stack_max_index27 = 0;\n    var paren_stack_max_index28 = 0;\n\
    \    var paren_stack_max_index29 = 0;\n    var paren_stack_max_index30 = 0;\n\
    \    var paren_stack_max_index31 = 0;\n    var paren_stack_max_index32 = 0;\n\
    \    var paren_stack_max_index33 = 0;\n    var paren_stack_max_index34 = 0;\n\
    \    var paren_stack_max_index35 = 0;\n    var paren_stack_max_index36 = 0;\n\
    \    var paren_stack_max_index37 = 0;\n    var paren_stack_max_index38 = 0;\n\
    \    var paren_stack_max_index39 = 0;\n    var paren_stack_max_index40 = 0;\n\
    \    var paren_stack_max_index41 = 0;\n    var paren_stack_max_index42 = 0;\n\
    \    var paren_stack_max_index43 = 0;\n    var paren_stack_max_index44 = 0;\n\
    \    var paren_stack_max_index45 = 0;\n    var paren_stack_max_index46 = 0;\n\
    \    var paren_stack_max_index47 = 0;\n    var paren_stack_max_index48 = 0;\n\
    \    var paren_stack_max_index49 = 0;\n    var paren_stack_max_index50 = 0;\n\
    \    var paren_stack_max_index51 = 0;\n    var paren_stack_max_index52 = 0;\n\
    \    var paren_stack_max_index53 = 0;\n    var paren_stack_max_index54 = 0;\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0gh0onfm.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_level = 0;\n    var paren_stack_max = 0;\n    for(var\
    \ i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_stack_level++;\n            paren_count++;\n        }else if(char ==\
    \ ')'){\n            paren_stack_level--;\n            if(paren_stack_level ==\
    \ 0){\n                paren_stack.push(paren_level);\n                paren_stack_max\
    \ = Math.max(paren_stack_max, paren_stack[paren_stack.length-1]);\n          \
    \      paren_count--;\n            }\n        }else if(char == ' '){\n       \
    \     if(paren_stack_level == 0){\n                paren_stack.push(paren_level);\n\
    \                paren_stack_max = Math.max(paren_stack_max, paren_stack[paren_stack.length-1]);\n\
    \            }\n        }\n        else if(char == ','){\n            if(paren_stack_level\
    \ == 0){\n                paren_stack.push(paren_level);\n                paren_stack_max\
    \ = Math.max(paren_stack_max, paren_stack[paren_stack.length-1]);\n          \
    \  }\n        }\n        else if(char == '(' || char == ')' || char == ',' ||\
    \ char == ' '){\n            if(paren_stack_level == 0){\n                paren_stack.push(paren_level);\n\
    \                paren_stack_max = Math.max(paren_stack_max, paren_stack[paren_stack.length-1]);\n\
    \            }\n        }\n        else if(paren_stack_level > 0){\n         \
    \   paren_level++;\n        }\n        else if(paren_stack_level < 0){\n     \
    \       paren_level--;\n        }\n    }\n    return paren_count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpj1tr37vh.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj1tr37vh.js:64:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == \"(\"){\n      paren_level++;\n    }\n    else if(paren_string[i]\
    \ == \")\"){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_string[i]);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')',\n  '\
    \ ',\n  ')',\n  ' ',\n  ')',\n  ' ',\n  ')'\n]\n\nshould loosely deep-equal\n\n\
    [\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdgcg2as3.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdgcg2as3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    ')',\
    \ ' ', ')',\n    ' ', ')', ' ',\n    ')'\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp04r2pya6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_stack = [];\n    paren_string = paren_string.replace(/\\\
    s+/g, ' ');\n    paren_string = paren_string.replace(/\\s+$/g, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+/, '');\n    paren\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkylf3eih.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(nested_level);\n            nested_level++;\n        }\n  \
    \      else if(char == \")\"){\n            nested_level = paren_stack.pop();\n\
    \        }\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmj21bq4v.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmj21bq4v.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var group =\
    \ paren_groups[i];\n        if(group.length == 0){\n            continue;\n  \
    \      }\n        var group_paren_level = 0;\n        var group_paren_stack =\
    \ [];\n        for(var j = 0; j < group.length; j++){\n            var char =\
    \ group[j];\n            if(char == \"(\"){\n                group_paren_stack.push(char);\n\
    \            }else if(char == \")\"){\n                group_paren_level = group_paren_stack.pop();\n\
    \            }\n        }\n        nested_paren_level = Math.max(nested_paren_level,\
    \ group_paren_level);\n    }\n    return nested_paren_level;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpmv26u7mx.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmv26u7mx.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2zi4lmlz.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var paren_stack = [];\n  var paren_level = [];\n  var paren_level_count\
    \ = [];\n  var paren_level_stack = [];\n  var paren_level_stack_count = [];\n\
    \  var paren_level_stack_string = [];\n  var paren_level_stack_string_count =\
    \ [];\n  var paren_level_stack_string_string = [];\n  var paren_level_stack_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string = [];\n  var paren_level_stack_string_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_count\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string = [];\n  var paren_level_stack_string_string_string_string_string\
    \ = [];\n  var paren_level_stack_string_string_string_string_string = [];\n  var\
    \ paren_level_stack_string_string_string_string_string\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa5mp0rix.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  var paren_levels = [];\n  var paren_nesting_levels = [];\n  var paren_levels_string\
    \ = \"\";\n  var paren_nesting_levels_string = \"\";\n  var paren_levels_string_reversed\
    \ = \"\";\n  var paren_nesting_levels_string_reversed = \"\";\n  var paren_levels_string_reversed_reversed\
    \ = \"\";\n  var paren_nesting_levels_string_reversed_reversed = \"\";\n  var\
    \ paren_levels_string_reversed_reversed_reversed = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1u_sc5nw.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string = \"\";\n    var paren_level_counter_max\
    \ = 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter = 0;\n    var paren_level_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_string = \"\";\n    var\
    \ paren_level_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_string = \"\"\
    ;\n    var paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_max_string =\
    \ \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6pt1k316.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_count\
    \ = 0;\n    var paren_level_stack_max_count = 0;\n    var paren_level_stack_max_count_index\
    \ = 0;\n    var paren_level_stack_max_count_index2 = 0;\n    var paren_level_stack_max_count_index3\
    \ = 0;\n    var paren_level_stack_max_count_index4 = 0;\n    var paren_level_stack_max_count_index5\
    \ = 0;\n    var paren_level_stack_max_count_index6 = 0;\n    var paren_level_stack_max_count_index7\
    \ = 0;\n    var paren_level_stack_max_count_index8 = 0;\n    var paren_level_stack_max_count_index9\
    \ = 0;\n    var paren_level_stack_max_count_index10 = 0;\n    var paren_level_stack_max_count_index11\
    \ = 0;\n    var paren_level_stack_max_count_index12 = 0;\n    var paren_level_stack_max_count_index13\
    \ = 0;\n    var paren_level_stack_max_count_index14 = 0;\n    var paren_level_stack_max_count_index15\
    \ = 0;\n    var paren_level_stack_max_count_index16 = 0;\n    var paren_level_stack_max_count_index17\
    \ = 0;\n    var paren_level_stack_max_count_index18 = 0;\n    var paren_level_stack_max_count_index19\
    \ = 0;\n    var paren_level_stack_max_count_index20 = 0;\n    var paren_level_stack_max_count_index21\
    \ = 0;\n    var paren_level_stack_max_count_index22 = 0;\n    var paren_level_stack_max_count_index23\
    \ = 0;\n    var paren_level_stack_max_count_index24 = 0;\n    var paren_level_stack_max_count_index25\
    \ = 0;\n    var paren_level_stack_max_count_index26 = 0;\n    var paren_level_stack_max_count_index27\
    \ = 0;\n    var paren_level_stack_max_count_index28 = 0;\n    var paren_level_stack_max_count_index29\
    \ = 0;\n    var paren_level_stack_max_count_index30 = 0;\n    var paren_level_stack_max_count_index31\
    \ = 0;\n    var paren_level_stack_max_count_index32 = 0;\n    var paren_level_stack_max_count_index33\
    \ = 0;\n    var paren_level_stack_max_count_index34 = 0;\n    var paren_level_stack_max_count_index35\
    \ = 0;\n    var paren_level_stack_max_count_index36 = 0;\n    var paren_level_stack_max_count_index37\
    \ = 0;\n    var paren_level_stack_max_count_index38 = 0;\n    var paren_level_stack_max_count_index39\
    \ = 0;\n    var paren_level_stack_max_count_index40 = 0;\n    var paren_level_stack_max_count_index41\
    \ = 0;\n    var paren_level_stack_max_count_index42 = 0;\n    var paren_level_stack_max_count_index43\
    \ = 0;\n    var paren_level_stack_max_count_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpiw83dgq5.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        var char = paren_string[i];\n      \
    \  if(char == \"(\"){\n            paren_level++;\n        }else if(char == \"\
    )\"){\n            paren_level--;\n        }else if(char == \" \" && paren_level\
    \ == 0){\n            nested_parens.push(paren_count);\n        }\n        paren_count++;\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  13,\n\
    \  16\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpq0hw0nli.js:29:10)\n    at Object.<anonymous> (/tmp/tmpq0hw0nli.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 13, 16\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  var paren_stack =\
    \ [];\n  var paren_levels = [];\n  var paren_nestings = [];\n  var paren_stacks\
    \ = [];\n  var paren_levels_stack = [];\n  var paren_nestings_stack = [];\n  var\
    \ paren_levels_stacks = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack = [];\n \
    \ var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks =\
    \ [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks\
    \ = [];\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7a4xj5u3.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_count = [];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm1ulo86j.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tvar paren_levels =\
    \ [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tvar char = paren_string[i];\n\
    \t\tif(char == \"(\"){\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t}else if(char == \")\"){\n\t\t\tparen_level = paren_stack.pop();\n\t\t}\n\t\
    \tparen_levels.push(paren_level);\n\t}\n\tfor(var i=0; i<paren_levels.length;\
    \ i++){\n\t\tif(paren_levels[i] > nested_parens.length){\n\t\t\tnested_parens\
    \ = paren_levels;\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp10hh7hhc.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp10hh7hhc.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  var paren_stack_pointer = 0;\n  var paren_stack_pointer_max = 0;\n  var paren_stack_pointer_max_index\
    \ = 0;\n  var paren_stack_pointer_max_index2 = 0;\n  var paren_stack_pointer_max_index3\
    \ = 0;\n  var paren_stack_pointer_max_index4 = 0;\n  var paren_stack_pointer_max_index5\
    \ = 0;\n  var paren_stack_pointer_max_index6 = 0;\n  var paren_stack_pointer_max_index7\
    \ = 0;\n  var paren_stack_pointer_max_index8 = 0;\n  var paren_stack_pointer_max_index9\
    \ = 0;\n  var paren_stack_pointer_max_index10 = 0;\n  var paren_stack_pointer_max_index11\
    \ = 0;\n  var paren_stack_pointer_max_index12 = 0;\n  var paren_stack_pointer_max_index13\
    \ = 0;\n  var paren_stack_pointer_max_index14 = 0;\n  var paren_stack_pointer_max_index15\
    \ = 0;\n  var paren_stack_pointer_max_index16 = 0;\n  var paren_stack_pointer_max_index17\
    \ = 0;\n  var paren_stack_pointer_max_index18 = 0;\n  var paren_stack_pointer_max_index19\
    \ = 0;\n  var paren_stack_pointer_max_index20 = 0;\n  var paren_stack_pointer_max_index21\
    \ = 0;\n  var paren_stack_pointer_max_index22 = 0;\n  var paren_stack_pointer_max_index23\
    \ = 0;\n  var paren_stack_pointer_max_index24 = 0;\n  var paren_stack_pointer_max_index25\
    \ = 0;\n  var paren_stack_pointer_max_index26 = 0;\n  var paren_stack_pointer_max_index27\
    \ = 0;\n  var paren_stack_pointer_max_index28 = 0;\n  var paren_stack_pointer_max_index29\
    \ = 0;\n  var paren_stack_pointer_max_index30 = 0;\n  var paren_stack_pointer_max_index31\
    \ = 0;\n  var paren_stack_pointer_max_index32 = 0;\n  var paren_stack_pointer_max_index33\
    \ = 0;\n  var paren_stack_pointer_max_index34 = 0;\n  var paren_stack_pointer_max_index35\
    \ = 0;\n  var paren_stack_pointer_max_index36 = 0;\n  var paren_stack_pointer_max_index37\
    \ = 0;\n  var paren_stack_pointer_max_index38 = 0;\n  var paren_stack_pointer_max_index39\
    \ = 0;\n  var paren_stack_pointer_max_index40 = 0;\n  var paren_stack_pointer_max_index41\
    \ = 0;\n  var paren_stack_pointer_max_index42 = 0;\n  var paren_stack_pointer_max_index43\
    \ = 0;\n  var paren_stack_pointer_\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplkwygsj4.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_string\
    \ = \"\";\n\tvar paren_level_counter = 0;\n\tvar paren_level_counter_max = 0;\n\
    \tvar paren_level_counter_max_string = \"\";\n\tvar paren_level_counter_max_string_length\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_string = \"\";\n\tvar paren_level_counter_max_string_length_counter\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_string = \"\";\n\t\
    var paren_level_counter_max_string_length_counter_max = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_string_length\
    \ = \"\";\n\tvar paren_level_counter_max_string_length_counter_max_string_length_counter_max_string_length_counter_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq4wjfdrb.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_groups\
    \ = [];\n    var paren_group = \"\";\n    var paren_group_level = 0;\n    var\
    \ paren_group_count = 0;\n    var paren_group_string = \"\";\n    var paren_group_char\
    \ = \"\";\n    var paren_group_char_length = 0;\n    var paren_group_char_counter\
    \ = 0;\n    var paren_group_char_array = [];\n    var paren_group_char_array_index\
    \ = 0;\n    var paren_group_char_array_length = paren_group_char_counter;\n  \
    \  var paren_group_char_array_counter = 0;\n    var paren_group_char_array_string\
    \ = \"\";\n    var paren_group_char_array_char = \"\";\n    var paren_group_char_array_char_length\
    \ = 0;\n    var paren_group_char_array_char_counter = 0;\n    var paren_group_char_array_char_array\
    \ = [];\n    var paren_group_char_array_char_array_index = 0;\n    var paren_group_char_array_char_array_length\
    \ = paren_group_char_array_char_counter;\n    var paren_group_char_array_char_array_counter\
    \ = 0;\n    var paren_group_char_array_char_array_string = \"\";\n    var paren_group_char_array_char_array_char\
    \ = \"\";\n    var paren_group_char_array_char_array_char_length = 0;\n    var\
    \ paren_group_char_array_char_array_char_counter = 0;\n    var paren_group_char_array_char_array_char_array\
    \ = [];\n    var paren_group_char_array_char_array_char_array_index = 0;\n   \
    \ var paren_group_char_array_char_array_char_array_length = paren_group_char_array_char_array_char_counter;\n\
    \    var paren_group_char_array_char_array_char_array_counter = 0;\n    var paren_group_char_array_char_array_char_array_string\
    \ = \"\";\n    var paren_group_char_array_char_array_char_array_char = \"\";\n\
    \    var paren_group_char_array_char_array_char_array_char_length = 0;\n    var\
    \ paren_group_char_array_char_array_char_array_char_counter = 0;\n    var paren_group_char_array_char_array_char_array_char_array\
    \ = [];\n    var paren_group_char_array_char_array_char_array_char_array_index\
    \ = 0;\n    var paren_group_char_array_char_array_char_array_char_array_length\
    \ = paren_group_char_array_char_array_char_array_char_counter;\n    var paren_group_char_array_char_array_char_array_char_array_counter\
    \ = 0;\n    var paren_group_char_array_char_array_char_array_char_array_string\
    \ = \"\";\n    var paren_group_char_array_char_array_char_array_char_array_char\
    \ = \"\";\n    var paren_group_char_array_char_array_char_array_char_array_char_length\
    \ = 0;\n    var paren_group_char_array_char_array_char_array_char_array_char_counter\
    \ = 0;\n    var paren_group_char_array_char_array_char_array_char_array_char_array\
    \ = [];\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptplzuc36.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  var paren_stack_pointer = 0;\n  var paren_stack_pointer_max = 0;\n\
    \  var paren_stack_pointer_max_index = 0;\n  var paren_stack_pointer_max_index2\
    \ = 0;\n  var paren_stack_pointer_max_index3 = 0;\n  var paren_stack_pointer_max_index4\
    \ = 0;\n  var paren_stack_pointer_max_index5 = 0;\n  var paren_stack_pointer_max_index6\
    \ = 0;\n  var paren_stack_pointer_max_index7 = 0;\n  var paren_stack_pointer_max_index8\
    \ = 0;\n  var paren_stack_pointer_max_index9 = 0;\n  var paren_stack_pointer_max_index10\
    \ = 0;\n  var paren_stack_pointer_max_index11 = 0;\n  var paren_stack_pointer_max_index12\
    \ = 0;\n  var paren_stack_pointer_max_index13 = 0;\n  var paren_stack_pointer_max_index14\
    \ = 0;\n  var paren_stack_pointer_max_index15 = 0;\n  var paren_stack_pointer_max_index16\
    \ = 0;\n  var paren_stack_pointer_max_index17 = 0;\n  var paren_stack_pointer_max_index18\
    \ = 0;\n  var paren_stack_pointer_max_index19 = 0;\n  var paren_stack_pointer_max_index20\
    \ = 0;\n  var paren_stack_pointer_max_index21 = 0;\n  var paren_stack_pointer_max_index22\
    \ = 0;\n  var paren_stack_pointer_max_index23 = 0;\n  var paren_stack_pointer_max_index24\
    \ = 0;\n  var paren_stack_pointer_max_index25 = 0;\n  var paren_stack_pointer_max_index26\
    \ = 0;\n  var paren_stack_pointer_max_index27 = 0;\n  var paren_stack_pointer_max_index28\
    \ = 0;\n  var paren_stack_pointer_max_index29 = 0;\n  var paren_stack_pointer_max_index30\
    \ = 0;\n  var paren_stack_pointer_max_index31 = 0;\n  var paren_stack_pointer_max_index32\
    \ = 0;\n  var paren_stack_pointer_max_index33 = 0;\n  var paren_stack_pointer_max_index34\
    \ = 0;\n  var paren_stack_pointer_max_index35 = 0;\n  var paren_stack_pointer_max_index36\
    \ = 0;\n  var paren_stack_pointer_max_index37 = 0;\n  var paren_stack_pointer_max_index38\
    \ = 0;\n  var paren_stack_pointer_max_index39 = 0;\n  var paren_stack_pointer_max_index40\
    \ = 0;\n  var paren_stack_pointer_max_index41 = 0;\n  var paren_stack_pointer_max_index42\
    \ = 0;\n  var paren_stack_pointer_max_index43 = 0;\n  var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1pbyodwe.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var opening_paren_level = 0;\n  var current_paren_level\
    \ = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if(char == \"(\"){\n      paren_stack.push(paren_count);\n\
    \      paren_count++;\n      opening_paren_level++;\n      current_paren_level\
    \ = paren_level;\n    }else if(char == \")\"){\n      paren_count = paren_stack.pop();\n\
    \      opening_paren_level = paren_stack[paren_stack.length-1];\n      current_paren_level\
    \ = paren_level;\n    }else if(char == \" \"){\n      if(paren_count > 0){\n \
    \       nested_parens.push(paren_count);\n      }\n      paren_count = 0;\n  \
    \    opening_paren_level = 0;\n      current_paren_level = paren_level;\n    }else\
    \ if(char == \"(\"){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \      opening_paren_level++;\n      current_paren_level = paren_level;\n    }else\
    \ if(char == \")\"){\n      paren_count = paren_stack.pop();\n      opening_paren_level\
    \ = paren_stack[paren_stack.length-1];\n      current_paren_level = paren_level;\n\
    \    }\n    paren_level++;\n  }\n  if(paren_count > 0){\n    nested_parens.push(paren_count);\n\
    \  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa6tqd78c.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa6tqd78c.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tparen_string\
    \ = paren_string.trim();\n\tparen_string = paren_string.replace(/\\s+/g, \" \"\
    );\n\tparen_string = paren_string.replace(/\\s+$/g, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\s+\\)$/g, \"\");\n\t\
    paren_string = paren_string.replace(/\\s+\\)\\s+\\)/g, \")\");\n\tparen_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)$/g, \"\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g,\
    \ \")\");\n\tparen_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)/g, \")\");\n\tparen_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp68lxuu9g.js:28\n\tparen_string = paren_string.replace(/\\s+\\)\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\n\t                                    ^\n\nSyntaxError:\
    \ Invalid regular expression: missing /\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else{\n            nested_parens.push(paren_level);\n    \
    \    }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmptihq41eg.js:31:10)\n    at Object.<anonymous> (/tmp/tmptihq41eg.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == \"(\"){\n            paren_level++;\n        }else if(c == \")\"){\n    \
    \        paren_level--;\n        }\n        if(paren_level == 0){\n          \
    \  nested_parens.push(paren_count);\n        }\n        paren_count++;\n    }\n\
    \    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  6,\n\
    \  12,\n  13,\n  15,\n  16,\n  26\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpumkd7g9p.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpumkd7g9p.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\\
    (|\\)/g, \" \");\n    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n\
    \    paren_string = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\
    \ = paren_string.replace(/\\(|\\)/g, \" \");\n    paren_string\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbt966xo6.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_levels = [];\n    var paren_levels_string = \"\";\n    for(var\
    \ i = 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_level);\n    \
    \        paren_level++;\n        }\n        else if(char == \")\"){\n        \
    \    paren_level--;\n            paren_levels.push(paren_level);\n        }\n\
    \        else if(char == \" \"){\n            if(paren_level == 0){\n        \
    \        nested_parens.push(paren_levels);\n                paren_levels = [];\n\
    \                paren_level = 0;\n            }\n            else{\n        \
    \        paren_levels.push(paren_level);\n            }\n        }\n        else\
    \ if(char == \"(\"){\n            paren_stack.push(paren_level);\n           \
    \ paren_level++;\n        }\n        else if(char == \")\"){\n            paren_level--;\n\
    \            paren_levels.push(paren_level);\n        }\n        else if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level--;\n    \
    \        paren_levels.push(paren_level);\n        }\n        else if(char == \"\
    [\"){\n            paren_levels.push(paren_level);\n        }\n        else if(char\
    \ == \"]\"){\n            paren_levels.pop();\n        }\n        else if(char\
    \ == \"{\"){\n            paren_levels.push(paren_level);\n        }\n       \
    \ else if(char == \"}\"){\n            paren_levels.pop();\n        }\n      \
    \  else if(char == \"<\"){\n            paren_levels.push(paren_level);\n    \
    \    }\n        else if(char == \">\"){\n            paren_levels.pop();\n   \
    \     }\n        else if(char == \"{\"){\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == \"}\"){\n            paren_levels.pop();\n\
    \        }\n        else if(char == \"{\"){\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == \"}\"){\n            paren_levels.pop();\n\
    \        }\n        else if(char == \"[\"){\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == \"]\"){\n            paren_levels.pop();\n\
    \        }\n        else if(char == \"[\"){\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == \"]\"){\n            paren_levels.pop();\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy76814rg.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  for(var i=0; i<paren_string.length; i++){\n    var c = paren_string[i];\n\
    \    if(c == '('){\n      paren_stack.push(paren_nesting);\n      paren_nesting++;\n\
    \    }else if(c == ')'){\n      paren_nesting = paren_stack.pop();\n    }else\
    \ if(c == ' ' && paren_stack.length){\n      nested_parens.push(paren_nesting);\n\
    \      paren_nesting = 0;\n    }\n  }\n  return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpr8xc7agu.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr8xc7agu.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_level_stack = [];\n    var paren_level_counter = 0;\n  \
    \  var paren_level_counter_reset = 0;\n    var paren_level_counter_reset_value\
    \ = 0;\n    var paren_level_counter_reset_index = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_index_value\
    \ = 0;\n    var paren_level_counter_reset_index_value = 0;\n    var paren_level_counter_reset_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1ss9_khd.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_count);\n         \
    \   paren_count++;\n        }\n        else if(c == ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }\n        else if(paren_stack.length > 0){\n\
    \            paren_count = paren_stack[paren_stack.length-1];\n        }\n   \
    \     nested_parens.push(paren_count);\n    }\n    return nested_parens;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmprlfouvn8.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmprlfouvn8.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_char_count = 0;\n    var paren_char_count_in_paren_stack\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level = 0;\n    var\
    \ paren_char_count_in_paren_stack_for_paren_level_for_paren_level = 0;\n    var\
    \ paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level\
    \ = 0;\n    var paren_char_count_in_paren_stack_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_paren_level_for_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdau0chzy.js:37\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var level =\
    \ 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length; i++){\n \
    \   var char = paren_string[i];\n    if(char == \"(\"){\n      paren_stack.push(level);\n\
    \      level++;\n    } else if(char == \")\"){\n      level--;\n      if(paren_stack.length\
    \ == 0){\n        return level;\n      }\n    }\n  }\n  return -1;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp0rfgl6zk.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0rfgl6zk.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_levels = [];\n\tvar paren_level_max\
    \ = 0;\n\tvar paren_level_max_index = 0;\n\tvar paren_level_max_indexs = [];\n\
    \tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs =\
    \ [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar paren_level_max_indexs_indexs\
    \ = [];\n\tvar paren_level_max_indexs_index = 0;\n\tvar \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0ddfzkr9.js:61\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_len_count = 0;\n    var paren_level_stack_len_count2\
    \ = 0;\n    var paren_level_stack_len_count3 = 0;\n    var paren_level_stack_len_count4\
    \ = 0;\n    var paren_level_stack_len_count5 = 0;\n    var paren_level_stack_len_count6\
    \ = 0;\n    var paren_level_stack_len_count7 = 0;\n    var paren_level_stack_len_count8\
    \ = 0;\n    var paren_level_stack_len_count9 = 0;\n    var paren_level_stack_len_count10\
    \ = 0;\n    var paren_level_stack_len_count11 = 0;\n    var paren_level_stack_len_count12\
    \ = 0;\n    var paren_level_stack_len_count13 = 0;\n    var paren_level_stack_len_count14\
    \ = 0;\n    var paren_level_stack_len_count15 = 0;\n    var paren_level_stack_len_count16\
    \ = 0;\n    var paren_level_stack_len_count17 = 0;\n    var paren_level_stack_len_count18\
    \ = 0;\n    var paren_level_stack_len_count19 = 0;\n    var paren_level_stack_len_count20\
    \ = 0;\n    var paren_level_stack_len_count21 = 0;\n    var paren_level_stack_len_count22\
    \ = 0;\n    var paren_level_stack_len_count23 = 0;\n    var paren_level_stack_len_count24\
    \ = 0;\n    var paren_level_stack_len_count25 = 0;\n    var paren_level_stack_len_count26\
    \ = 0;\n    var paren_level_stack_len_count27 = 0;\n    var paren_level_stack_len_count28\
    \ = 0;\n    var paren_level_stack_len_count29 = 0;\n    var paren_level_stack_len_count30\
    \ = 0;\n    var paren_level_stack_len_count31 = 0;\n    var paren_level_stack_len_count32\
    \ = 0;\n    var paren_level_stack_len_count33 = 0;\n    var paren_level_stack_len_count34\
    \ = 0;\n    var paren_level_stack_len_count35 = 0;\n    var paren_level_stack_len_count36\
    \ = 0;\n    var paren_level_stack_len_count37 = 0;\n    var paren_level_stack_len_count38\
    \ = 0;\n    var paren_level_stack_len_count39 = 0;\n    var paren_level_stack_len_count40\
    \ = 0;\n    var paren_level_stack_len_count41 = 0;\n    var paren_level_stack_len_count42\
    \ = 0;\n    var paren_level_stack_len_count43 = 0;\n    var paren_level_stack_len_count44\
    \ = 0;\n    var paren_level_stack_len_count45 = 0;\n    var paren_level_stack_len_count46\
    \ = 0;\n    var paren_level_stack_len_count47 = 0;\n    var paren_level_stack_len_count48\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkih913bs.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == \"(\"){\n            paren_stack.push(paren_count);\n    \
    \        paren_count++;\n        }\n        else if(char == \")\"){\n        \
    \    paren_count = paren_stack.pop();\n        }\n        else if(char == \" \"\
    ){\n            if(paren_stack.length == 0){\n                nested_parens.push(paren_level);\n\
    \            }\n            paren_level++;\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0qdcr6cn.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0qdcr6cn.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_pointer\
    \ = 0;\n  var paren_stack_top = 0;\n  var paren_stack_top_count = 0;\n  var paren_stack_top_string\
    \ = \"\";\n  var paren_stack_top_string_index = 0;\n  var paren_stack_top_string_index2\
    \ = 0;\n  var paren_stack_top_string_index3 = 0;\n  var paren_stack_top_string_index4\
    \ = 0;\n  var paren_stack_top_string_index5 = 0;\n  var paren_stack_top_string_index6\
    \ = 0;\n  var paren_stack_top_string_index7 = 0;\n  var paren_stack_top_string_index8\
    \ = 0;\n  var paren_stack_top_string_index9 = 0;\n  var paren_stack_top_string_index10\
    \ = 0;\n  var paren_stack_top_string_index11 = 0;\n  var paren_stack_top_string_index12\
    \ = 0;\n  var paren_stack_top_string_index13 = 0;\n  var paren_stack_top_string_index14\
    \ = 0;\n  var paren_stack_top_string_index15 = 0;\n  var paren_stack_top_string_index16\
    \ = 0;\n  var paren_stack_top_string_index17 = 0;\n  var paren_stack_top_string_index18\
    \ = 0;\n  var paren_stack_top_string_index19 = 0;\n  var paren_stack_top_string_index20\
    \ = 0;\n  var paren_stack_top_string_index21 = 0;\n  var paren_stack_top_string_index22\
    \ = 0;\n  var paren_stack_top_string_index23 = 0;\n  var paren_stack_top_string_index24\
    \ = 0;\n  var paren_stack_top_string_index25 = 0;\n  var paren_stack_top_string_index26\
    \ = 0;\n  var paren_stack_top_string_index27 = 0;\n  var paren_stack_top_string_index28\
    \ = 0;\n  var paren_stack_top_string_index29 = 0;\n  var paren_stack_top_string_index30\
    \ = 0;\n  var paren_stack_top_string_index31 = 0;\n  var paren_stack_top_string_index32\
    \ = 0;\n  var paren_stack_top_string_index33 = 0;\n  var paren_stack_top_string_index34\
    \ = 0;\n  var paren_stack_top_string_index35 = 0;\n  var paren_stack_top_string_index36\
    \ = 0;\n  var paren_stack_top_string_index37 = 0;\n  var paren_stack_top_string_index38\
    \ = 0;\n  var paren_stack_top_string_index39 = 0;\n  var paren_stack_top_string_index40\
    \ = 0;\n  var paren_stack_top_string_index41 = 0;\n  var paren_stack_top_string_index42\
    \ = 0;\n  var paren_stack_top_string_index43 = 0;\n  var paren_stack_top_string_index44\
    \ = 0;\n  var paren_stack_top_string_index45 = 0;\n  var paren_stack_top_string_index46\
    \ = 0;\n  var paren_stack_top_string_index47 = 0;\n  var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmg62lrgy.js:62\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_stack = [];\n\tvar paren_level\
    \ = 0;\n\tvar paren_stack_string = \"\";\n\tvar paren_level_string = \"\";\n\t\
    var paren_level_counter = 0;\n\tvar paren_level_counter_string = \"\";\n\tvar\
    \ paren_level_counter_max = 0;\n\tvar paren_level_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter = 0;\n\tvar paren_level_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\tvar\
    \ paren_level_counter_max_counter_max_counter_max_counter_max_string = \"\";\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter = 0;\n\
    \tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n\tvar paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n\tvar paren_level_counter_max_counter_max_counter_max_counter_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvnmg_gxa.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_count++;\n\t\t}\n\t\t\
    else if(paren_string[i] == \")\"){\n\t\t\tparen_count--;\n\t\t}\n\t\telse if(paren_count\
    \ == 0){\n\t\t\tnested_parens.push(paren_level);\n\t\t\tparen_count = 0;\n\t\t\
    \tparen_level++;\n\t\t}\n\t}\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmprzlhb3ki.js:31:10)\n    at Object.<anonymous> (/tmp/tmprzlhb3ki.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var max_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = [];\n    var paren_levels_index[0] = 0;\n\
    \    var paren_levels_index[1] = 0;\n    var paren_levels_index[2] = 0;\n    var\
    \ paren_levels_index[3] = 0;\n    var paren_levels_index[4] = 0;\n    var paren_levels_index[5]\
    \ = 0;\n    var paren_levels_index[6] = 0;\n    var paren_levels_index[7] = 0;\n\
    \    var paren_levels_index[8] = 0;\n    var paren_levels_index[9] = 0;\n    var\
    \ paren_levels_index[10] = 0;\n    var paren_levels_index[11] = 0;\n    var paren_levels_index[12]\
    \ = 0;\n    var paren_levels_index[13] = 0;\n    var paren_levels_index[14] =\
    \ 0;\n    var paren_levels_index[15] = 0;\n    var paren_levels_index[16] = 0;\n\
    \    var paren_levels_index[17] = 0;\n    var paren_levels_index[18] = 0;\n  \
    \  var paren_levels_index[19] = 0;\n    var paren_levels_index[20] = 0;\n    var\
    \ paren_levels_index[21] = 0;\n    var paren_levels_index[22] = 0;\n    var paren_levels_index[23]\
    \ = 0;\n    var paren_levels_index[24] = 0;\n    var paren_levels_index[25] =\
    \ 0;\n    var paren_levels_index[26] = 0;\n    var paren_levels_index[27] = 0;\n\
    \    var paren_levels_index[28] = 0;\n    var paren_levels_index[29] = 0;\n  \
    \  var paren_levels_index[30] = 0;\n    var paren_levels_index[31] = 0;\n    var\
    \ paren_levels_index[32] = 0;\n    var paren_levels_index[33] = 0;\n    var paren_levels_index[34]\
    \ = 0;\n    var paren_levels_index[35] = 0;\n    var paren_levels_index[36] =\
    \ 0;\n    var paren_levels_index[37] = 0;\n    var paren_levels_index[38] = 0;\n\
    \    var paren_levels_index[39] = 0;\n    var paren_levels_index[40] = 0;\n  \
    \  var paren_levels_index[41] = 0;\n    var paren_levels_index[42] = 0;\n    var\
    \ paren_levels_index[43] = 0;\n    var paren_levels_index[44] = 0;\n    var paren_levels_index[45]\
    \ = 0;\n    var paren_levels_index[46] = 0;\n    var paren_levels_index[47] =\
    \ 0;\n    var paren_levels_index[48] = 0;\n    var paren_levels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgq9pnwmh.js:12\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_string = \"\";\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == \"(\"){\n   \
    \         paren_stack.push(paren_level);\n            paren_level++;\n       \
    \ }else if(char == \")\"){\n            paren_level--;\n            paren_levels.push(paren_level);\n\
    \        }\n        if(paren_stack.length == 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    for(var i=0; i<paren_levels.length; i++){\n        paren_levels_string\
    \ += paren_levels[i];\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp47u7d8jn.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp47u7d8jn.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_pointer = 0;\n    var paren_level_stack_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_string\
    \ = \"\";\n    var paren_level_stack_pointer_max_pointer = 0;\n    var paren_level_stack_pointer_max_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_index = 0;\n    var\
    \ paren_level_stack_pointer_max_pointer_max_string = \"\";\n    var paren_level_stack_pointer_max_pointer_max_pointer\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max = 0;\n \
    \   var paren_level_stack_pointer_max_pointer_max_pointer_max_index = 0;\n   \
    \ var paren_level_stack_pointer_max_pointer_max_pointer_max_string = \"\";\n \
    \   var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer = 0;\n \
    \   var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max = 0;\n\
    \    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_string\
    \ = \"\";\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_string\
    \ = \"\";\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_string\
    \ = \"\";\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_pointer_max_index\
    \ = 0;\n    var paren_level_stack_pointer_max_pointer_max_pointer_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv0bmkpc7.js:49\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = []\n  var paren_level = 0\n  var paren_level_count = 0\n  var paren_level_char\
    \ = ''\n  var paren_level_char_length = 0\n  var paren_level_char_array = []\n\
    \  var paren_level_char_array_length = 0\n  var paren_level_char_array_index =\
    \ 0\n  var paren_level_char_array_string = ''\n  var paren_level_char_array_string_length\
    \ = 0\n  var paren_level_char_array_string_start = 0\n  var paren_level_char_array_string_end\
    \ = 0\n  var paren_level_char_array_string_char = ''\n  var paren_level_char_array_string_char_length\
    \ = 0\n  var paren_level_char_array_string_char_start = 0\n  var paren_level_char_array_string_char_end\
    \ = 0\n  var paren_level_char_array_string_char_char_length = 0\n  var paren_level_char_array_string_char_char_start\
    \ = 0\n  var paren_level_char_array_string_char_char_end = 0\n  var paren_level_char_array_string_char_char_char_length\
    \ = 0\n  var paren_level_char_array_string_char_char_char_start = 0\n  var paren_level_char_array_string_char_char_char_end\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_length = 0\n  var\
    \ paren_level_char_array_string_char_char_char_char_start = 0\n  var paren_level_char_array_string_char_char_char_char_end\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_length = 0\n\
    \  var paren_level_char_array_string_char_char_char_char_char_start = 0\n  var\
    \ paren_level_char_array_string_char_char_char_char_char_end = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_length\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_start\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_end =\
    \ 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_length\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_start\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_end\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_length\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_start\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_char_end\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_char_start\
    \ = 0\n  var paren_level_char_array_string_char_char_char_char_char_char_char_char_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxv26n5ne.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_level = [];\n\
    \    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_index2 = 0;\n    var paren_level_stack_index3 = 0;\n    var\
    \ paren_level_stack_index4 = 0;\n    var paren_level_stack_index5 = 0;\n    var\
    \ paren_level_stack_index6 = 0;\n    var paren_level_stack_index7 = 0;\n    var\
    \ paren_level_stack_index8 = 0;\n    var paren_level_stack_index9 = 0;\n    var\
    \ paren_level_stack_index10 = 0;\n    var paren_level_stack_index11 = 0;\n   \
    \ var paren_level_stack_index12 = 0;\n    var paren_level_stack_index13 = 0;\n\
    \    var paren_level_stack_index14 = 0;\n    var paren_level_stack_index15 = 0;\n\
    \    var paren_level_stack_index16 = 0;\n    var paren_level_stack_index17 = 0;\n\
    \    var paren_level_stack_index18 = 0;\n    var paren_level_stack_index19 = 0;\n\
    \    var paren_level_stack_index20 = 0;\n    var paren_level_stack_index21 = 0;\n\
    \    var paren_level_stack_index22 = 0;\n    var paren_level_stack_index23 = 0;\n\
    \    var paren_level_stack_index24 = 0;\n    var paren_level_stack_index25 = 0;\n\
    \    var paren_level_stack_index26 = 0;\n    var paren_level_stack_index27 = 0;\n\
    \    var paren_level_stack_index28 = 0;\n    var paren_level_stack_index29 = 0;\n\
    \    var paren_level_stack_index30 = 0;\n    var paren_level_stack_index31 = 0;\n\
    \    var paren_level_stack_index32 = 0;\n    var paren_level_stack_index33 = 0;\n\
    \    var paren_level_stack_index34 = 0;\n    var paren_level_stack_index35 = 0;\n\
    \    var paren_level_stack_index36 = 0;\n    var paren_level_stack_index37 = 0;\n\
    \    var paren_level_stack_index38 = 0;\n    var paren_level_stack_index39 = 0;\n\
    \    var paren_level_stack_index40 = 0;\n    var paren_level_stack_index41 = 1;\n\
    \    var paren_level_stack_index42 = 1;\n    var paren_level_stack_index43 = 1;\n\
    \    var paren_level_stack_index44 = 1;\n    var paren_level_stack_index45 = 1;\n\
    \    var paren_level_stack_index46 = 1;\n    var paren_level_stack_index47 = 1;\n\
    \    var paren_level_stack_index48 = 1;\n    var paren_level_stack_index49 = 1;\n\
    \    var paren_level_stack_index50 = 1;\n    var paren_level_stack_index51 = 1;\n\
    \    var paren_level_stack_index52 = 1;\n    var paren_level_stack_index53 = 1;\n\
    \    var paren_level_stack_index54 = 1;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp300cqa7i.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_level = [];\n\tvar paren_level_stack\
    \ = [];\n\tvar paren_level_stack_index = 0;\n\tvar paren_level_stack_string =\
    \ \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string\
    \ = \"\";\n\tvar paren_level_stack_string_index = 0;\n\tvar paren_level_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8w4ndpnm.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_groups\
    \ = [];\n    var paren_group_levels = [];\n    var paren_group_nestings = [];\n\
    \    var paren_group_groups = [];\n    var paren_group_group_levels = [];\n  \
    \  var paren_group_group_nestings = [];\n    var paren_group_group_groups = [];\n\
    \    var paren_group_group_group_levels = [];\n    var paren_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\n    var paren_group_group_group_group_nestings\
    \ = [];\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_levels\
    \ = [];\n    var paren_group_group_group_group_nestings = [];\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_levels = [];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpedluc_lz.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char == \"(\"){\n            paren_stack.push(paren_count);\n\
    \            paren_count++;\n        }else if(char == \")\"){\n            paren_count\
    \ = paren_stack.pop();\n        }\n        if(paren_count > nested_level){\n \
    \           nested_level = paren_count;\n        }\n    }\n    return nested_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6ag_ihsm.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ag_ihsm.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  var paren_levels_stack = [];\n  var paren_levels_stacks\
    \ = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack =\
    \ [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn1_lsvuu.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_level\
    \ = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var c = paren_string[i];\n        if(c == '('){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }\n        else if(c == ')'){\n         \
    \   paren_level--;\n        }\n    }\n    return paren_stack;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp2nf9pydz.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2nf9pydz.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_level++;\n        }\n        else if(c == ')'){\n            paren_level\
    \ = paren_stack.pop();\n        }\n        else if(paren_stack.length){\n    \
    \        paren_level = paren_stack[paren_stack.length-1];\n        }\n       \
    \ nested_parens.push(paren_level);\n    }\n    return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpgi47mcqw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgi47mcqw.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_groups = [];\n    var paren_group_index\
    \ = 0;\n    var paren_group_level = 0;\n    var paren_group_count = 0;\n    var\
    \ paren_group_string = \"\";\n    var paren_group_paren_level = 0;\n    var paren_group_paren_groups\
    \ = [];\n    var paren_group_paren_group_index = 0;\n    var paren_group_paren_group_level\
    \ = 0;\n    var paren_group_paren_group_count = 0;\n    var paren_group_paren_group_string\
    \ = \"\";\n    var paren_group_paren_group_paren_level = 0;\n    var paren_group_paren_group_paren_groups\
    \ = [];\n    var paren_group_paren_group_paren_group_index = 0;\n    var paren_group_paren_group_paren_group_level\
    \ = 0;\n    var paren_group_paren_group_paren_group_count = 0;\n    var paren_group_paren_group_paren_group_string\
    \ = \"\";\n    var paren_group_paren_group_paren_group_paren_level = 0;\n    var\
    \ paren_group_paren_group_paren_group_paren_groups = [];\n    var paren_group_paren_group_paren_group_paren_group_index\
    \ = 0;\n    var paren_group_paren_group_paren_group_paren_group_level = 0;\n \
    \   var paren_group_paren_group_paren_group_paren_group_count = 0;\n    var paren_group_paren_group_paren_group_paren_group_string\
    \ = \"\";\n    var paren_group_paren_group_paren_group_paren_group_paren_level\
    \ = 0;\n    var paren_group_paren_group_paren_group_paren_group_paren_groups =\
    \ [];\n    var paren_group_paren_group_paren_group_paren_group_paren_group_index\
    \ = 0;\n    var paren_group_paren_group_paren_group_paren_group_paren_group_level\
    \ = 0;\n    var paren_group_paren_group_paren_group_paren_group_paren_group_count\
    \ = 0;\n    var paren_group_paren_group_paren_group_paren_group_paren_group_string\
    \ = \"\";\n    \n    for(var i = 0; i < paren_string.length; i++){\n        var\
    \ char = paren_string[i];\n        \n        if(char == \"(\"){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n            paren_groups.push(paren_group_index);\n\
    \            paren_group_index++;\n            paren_group_level++;\n        \
    \    paren_group_count++;\n            paren_group_string += char;\n         \
    \   paren_group_paren_level++;\n            paren_group_paren_groups.push(paren_group_paren_group_index);\n\
    \            paren_group_paren_group_index++;\n            paren_group_paren_group_level++;\n\
    \            paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplndu7aw4.js:65\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_level = 0;\n    var paren_char;\n \
    \   var paren_level_count = 0;\n    var paren_level_char;\n    var paren_level_char_length;\n\
    \    for(var i = 0; i < paren_string.length; i++){\n        paren_char = paren_string[i];\n\
    \        paren_level_char = paren_char;\n        paren_level_char_length = paren_char.length;\n\
    \        while(paren_level_char_length){\n            paren_level_char += paren_char.charAt(paren_level_char_length\
    \ - 1);\n            paren_level_char_length--;\n        }\n        paren_level_count++;\n\
    \        if(paren_level_char === \")\"){\n            level--;\n        }\n  \
    \      else if(paren_level_char === \"(\"){\n            level++;\n        }\n\
    \        nested_parens.push(level);\n    }\n    return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6n7cxmsx.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6n7cxmsx.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0,\
    \ 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_level_count = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        paren_char = paren_string[i];\n      \
    \  if(paren_char === '('){\n            paren_stack.push(paren_char);\n      \
    \      paren_level_count++;\n        }else if(paren_char === ')'){\n         \
    \   paren_level_count--;\n            if(paren_level_count === 0){\n         \
    \       nested_parens.push(paren_stack);\n                paren_stack = [];\n\
    \                paren_level++;\n            }\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    '(',\n\
    \    '(',\n    '('\n  ],\n  [\n    '(',\n    '(',\n    '('\n  ],\n  [\n    '('\n\
    \  ],\n  [\n    '(',\n    '(',\n    '(',\n    '(',\n    '('\n  ]\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp05qfxt6e.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp05qfxt6e.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ '(',\
    \ '(', '(' ],\n    [ '(', '(', '(' ],\n    [ '(' ],\n    [ '(', '(', '(', '(',\
    \ '(' ]\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_stack = [];\n    var paren_level =\
    \ 0;\n    var paren_char;\n    var paren_level_string;\n    var paren_level_char;\n\
    \    var paren_level_char_length;\n    var paren_level_char_length_limit;\n  \
    \  var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_length_limit;\n    var paren_level_char_length_limit;\n\
    \    var paren_level_char_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj04tjfvk.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_char;\n  var paren_char_count = 0;\n  var paren_string_count\
    \ = 0;\n  var paren_string = paren_string.replace(/\\s+/g, \"\");\n  for (var\
    \ i = 0; i < paren_string.length; i++){\n    paren_char = paren_string[i];\n \
    \   paren_char_count++;\n    if (paren_char == \"(\"){\n      paren_stack.push(paren_char);\n\
    \      paren_level++;\n      nested_paren_stack.push(paren_level);\n    } else\
    \ if (paren_char == \")\"){\n      nested_paren_level = nested_paren_stack.pop();\n\
    \      paren_level = paren_stack.pop();\n      paren_char_count--;\n      if (paren_char_count\
    \ == 0){\n        paren_stack.push(paren_level);\n      }\n    }\n  }\n  return\
    \ nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp6opr5y_q.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6opr5y_q.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(char == ')'){\n      paren_count = paren_stack.pop();\n  \
    \  }\n    else if(char == ' ' && paren_count > 0){\n      paren_stack.push(paren_count);\n\
    \      paren_count++;\n    }\n    else if(char == ' ' && paren_count == 0){\n\
    \      nested_parens.push(paren_level);\n      paren_level--;\n    }\n  }\n  return\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  -1,\n\
    \  -2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpvc9iwjei.js:37:10)\n    at Object.<anonymous> (/tmp/tmpvc9iwjei.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, -1, -2\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for (var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if (char === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    } else if (char === ')'){\n      paren_count = paren_stack.pop();\n    }\
    \ else if (char === ' ' && paren_count > 0){\n      paren_level++;\n    } else\
    \ if (char === ' ' && paren_count === 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpv_bwid5v.js:32:10)\n    at Object.<anonymous> (/tmp/tmpv_bwid5v.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp04r2pya6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  for(var i = 0; i < paren_string.length; i++){\n\
    \    if(paren_string[i] == \"(\"){\n      paren_count++;\n    }\n    if(paren_string[i]\
    \ == \")\"){\n      paren_count--;\n    }\n    if(paren_count == 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpc9gqjd22.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc9gqjd22.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var c = paren_string[i];\n \
    \   if(c == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(c == ')'){\n      paren_count = paren_stack.pop();\n    }\n\
    \    else if(c == ' ' && paren_count > 0){\n      nested_parens.push(paren_level);\n\
    \      paren_level = 0;\n    }\n    else if(c == '('){\n      paren_level++;\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpy7oyjprx.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy7oyjprx.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_levels_string = \"\";\n    var paren_level_counter = 0;\n\
    \    var paren_level_counter_max = 0;\n    var paren_level_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyarehj71.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tvar paren_level_counter = 0;\n\tvar paren_level_max = 0;\n\tvar paren_level_max_counter\
    \ = 0;\n\tvar paren_level_max_counters = [];\n\tvar paren_level_max_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters = [];\n\tvar paren_level_max_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters = [];\n\tvar paren_level_max_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters = [];\n\tvar\
    \ paren_level_max_counters_counters_counters_counters_counter = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters = [];\n\
    \tvar paren_level_max_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters\
    \ = [];\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = 0;\n\tvar paren_level_max_counters_counters_counters_counters_counters_counters_counters\
    \ = [];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpij3x2ujd.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max = 0;\n    var paren_level_max_count = 0;\n   \
    \ var paren_level_max_max = 0;\n    var paren_level_max_max_count = 0;\n    var\
    \ paren_level_max_max_max = 0;\n    var paren_level_max_max_max_count = 0;\n \
    \   var paren_level_max_max_max_max = 0;\n    var paren_level_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_count = 0;\n    var paren_level_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_count = 0;\n    var paren_level_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_count = 0;\n    var\
    \ paren_level_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_count = 0;\n \
    \   var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_level_max_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max =\
    \ 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_count = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0;\n    var paren_level_max_\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkliv26se.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char == \"(\"){\n           \
    \ paren_stack.push(level);\n            level++;\n        }else if(char == \"\
    )\"){\n            level--;\n        }\n        if(level < 0){\n            break;\n\
    \        }\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp8j4xprs2.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8j4xprs2.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n \
    \   var paren_nesting_level = 0;\n    var paren_nesting_level = 0;\n    var paren\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr7_o53hs.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tvar paren_nesting_levels = [];\n\tvar paren_levels_string = \"\";\n\
    \tvar paren_nesting_levels_string = \"\";\n\t\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tswitch(paren_string[i]){\n\t\t\tcase \"(\":\n\t\t\t\tparen_stack.push(paren_level);\n\
    \t\t\t\tparen_level++;\n\t\t\t\tparen_nesting++;\n\t\t\t\tparen_levels.push(paren_level);\n\
    \t\t\t\tparen_nesting_levels.push(paren_nesting);\n\t\t\t\tparen_levels_string\
    \ += paren_level;\n\t\t\t\tparen_nesting_levels_string += paren_nesting;\n\t\t\
    \t\tbreak;\n\t\t\tcase \")\":\n\t\t\t\tparen_level--;\n\t\t\t\tparen_nesting--;\n\
    \t\t\t\tparen_levels.pop();\n\t\t\t\tparen_nesting_levels.pop();\n\t\t\t\tparen_levels_string\
    \ += paren_level;\n\t\t\t\tparen_nesting_levels_string += paren_nesting;\n\t\t\
    \t\tbreak;\n\t\t\tcase \" \":\n\t\t\t\tif(paren_stack.length > 0){\n\t\t\t\t\t\
    paren_levels_string += paren_stack.pop();\n\t\t\t\t\tparen_nesting_levels_string\
    \ += paren_nesting_levels.pop();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn paren_levels_string;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'121210112321021001232121210'\n\
    \nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpzxtg5wz4.js:53:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzxtg5wz4.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '121210112321021001232121210',\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_max_level = 0;\n\tvar paren_max_level_stack\
    \ = [];\n\tvar paren_max_level_stack_index = 0;\n\tvar paren_max_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level = 0;\n\tvar paren_max_level_stack_paren_level_stack\
    \ = [];\n\tvar paren_max_level_stack_paren_level_stack_index = 0;\n\tvar paren_max_level_stack_paren_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level_stack_paren_level = 0;\n\t\
    var paren_max_level_stack_paren_level_stack_paren_level_stack = [];\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_index\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack\
    \ = [];\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_index\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack\
    \ = [];\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_index\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack\
    \ = [];\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_index\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_string\
    \ = \"\";\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level\
    \ = 0;\n\tvar paren_max_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack_paren_level_stack\
    \ = [];\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvfdhstgt.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level--;\n        }\n\
    \        else if(paren_stack.length > 0){\n            paren_levels[paren_stack.pop()]\
    \ = paren_level;\n        }\n    }\n    return paren_levels;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpjguwp_8c.js:31:10)\n    at Object.<anonymous> (/tmp/tmpjguwp_8c.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var max_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_index = [];\n    var paren_levels_index[0] = 0;\n\
    \    var paren_levels_index[1] = 0;\n    var paren_levels_index[2] = 0;\n    var\
    \ paren_levels_index[3] = 0;\n    var paren_levels_index[4] = 0;\n    var paren_levels_index[5]\
    \ = 0;\n    var paren_levels_index[6] = 0;\n    var paren_levels_index[7] = 0;\n\
    \    var paren_levels_index[8] = 0;\n    var paren_levels_index[9] = 0;\n    var\
    \ paren_levels_index[10] = 0;\n    var paren_levels_index[11] = 0;\n    var paren_levels_index[12]\
    \ = 0;\n    var paren_levels_index[13] = 0;\n    var paren_levels_index[14] =\
    \ 0;\n    var paren_levels_index[15] = 0;\n    var paren_levels_index[16] = 0;\n\
    \    var paren_levels_index[17] = 0;\n    var paren_levels_index[18] = 0;\n  \
    \  var paren_levels_index[19] = 0;\n    var paren_levels_index[20] = 0;\n    var\
    \ paren_levels_index[21] = 0;\n    var paren_levels_index[22] = 0;\n    var paren_levels_index[23]\
    \ = 0;\n    var paren_levels_index[24] = 0;\n    var paren_levels_index[25] =\
    \ 0;\n    var paren_levels_index[26] = 0;\n    var paren_levels_index[27] = 0;\n\
    \    var paren_levels_index[28] = 0;\n    var paren_levels_index[29] = 0;\n  \
    \  var paren_levels_index[30] = 0;\n    var paren_levels_index[31] = 0;\n    var\
    \ paren_levels_index[32] = 0;\n    var paren_levels_index[33] = 0;\n    var paren_levels_index[34]\
    \ = 0;\n    var paren_levels_index[35] = 0;\n    var paren_levels_index[36] =\
    \ 0;\n    var paren_levels_index[37] = 0;\n    var paren_levels_index[38] = 0;\n\
    \    var paren_levels_index[39] = 0;\n    var paren_levels_index[40] = 0;\n  \
    \  var paren_levels_index[41] = 0;\n    var paren_levels_index[42] = 0;\n    var\
    \ paren_levels_index[43] = 0;\n    var paren_levels_index[44] = 0;\n    var paren_levels_index[45]\
    \ = 0;\n    var paren_levels_index[46] = 0;\n    var paren_levels_index[47] =\
    \ 0;\n    var paren_levels_index[48] = 0;\n    var paren_levels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgq9pnwmh.js:12\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == \"(\"){\n      paren_level++;\n    }else if(paren_string[i]\
    \ == \")\"){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp5iokhiyc.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5iokhiyc.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp04r2pya6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_lengths = [];\n    var paren_level_lengths_max =\
    \ 0;\n    var paren_level_lengths_max_index = 0;\n    var paren_level_lengths_max_index2\
    \ = 0;\n    var paren_level_lengths_max_index3 = 0;\n    var paren_level_lengths_max_index4\
    \ = 0;\n    var paren_level_lengths_max_index5 = 0;\n    var paren_level_lengths_max_index6\
    \ = 0;\n    var paren_level_lengths_max_index7 = 0;\n    var paren_level_lengths_max_index8\
    \ = 0;\n    var paren_level_lengths_max_index9 = 0;\n    var paren_level_lengths_max_index10\
    \ = 0;\n    var paren_level_lengths_max_index11 = 0;\n    var paren_level_lengths_max_index12\
    \ = 0;\n    var paren_level_lengths_max_index13 = 0;\n    var paren_level_lengths_max_index14\
    \ = 0;\n    var paren_level_lengths_max_index15 = 0;\n    var paren_level_lengths_max_index16\
    \ = 0;\n    var paren_level_lengths_max_index17 = 0;\n    var paren_level_lengths_max_index18\
    \ = 0;\n    var paren_level_lengths_max_index19 = 0;\n    var paren_level_lengths_max_index20\
    \ = 0;\n    var paren_level_lengths_max_index21 = 0;\n    var paren_level_lengths_max_index22\
    \ = 0;\n    var paren_level_lengths_max_index23 = 0;\n    var paren_level_lengths_max_index24\
    \ = 0;\n    var paren_level_lengths_max_index25 = 0;\n    var paren_level_lengths_max_index26\
    \ = 0;\n    var paren_level_lengths_max_index27 = 0;\n    var paren_level_lengths_max_index28\
    \ = 0;\n    var paren_level_lengths_max_index29 = 0;\n    var paren_level_lengths_max_index30\
    \ = 0;\n    var paren_level_lengths_max_index31 = 0;\n    var paren_level_lengths_max_index32\
    \ = 0;\n    var paren_level_lengths_max_index33 = 0;\n    var paren_level_lengths_max_index34\
    \ = 0;\n    var paren_level_lengths_max_index35 = 0;\n    var paren_level_lengths_max_index36\
    \ = 0;\n    var paren_level_lengths_max_index37 = 0;\n    var paren_level_lengths_max_index38\
    \ = 0;\n    var paren_level_lengths_max_index39 = 0;\n    var paren_level_lengths_max_index40\
    \ = 0;\n    var paren_level_lengths_max_index41 = 0;\n    var paren_level_lengths_max_index42\
    \ = 0;\n    var paren_level_lengths_max_index43 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp413m0g0o.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+$/g, \"\");\n    paren_string = paren_string.replace(/^\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+$/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/g, \"\");\n    paren_string = paren_string.replace(/\\s+/g, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \"\");\n    \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpe6b3dfms.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_levels = [];\n    var paren_levels_index = 0;\n    var paren_levels_string\
    \ = \"\";\n    var paren_levels_string_length = 0;\n    var paren_levels_string_length_index\
    \ = 0;\n    var paren_levels_string_length_max = 0;\n    var paren_levels_string_length_max_index\
    \ = 0;\n    var paren_levels_string_length_max_string = \"\";\n    var paren_levels_string_length_max_string_length\
    \ = 0;\n    var paren_levels_string_length_max_string_length_index = 0;\n    var\
    \ paren_levels_string_length_max_string_length_max = 0;\n    var paren_levels_string_length_max_string_length_max_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string = \"\"\
    ;\n    var paren_levels_string_length_max_string_length_max_string_length = 0;\n\
    \    var paren_levels_string_length_max_string_length_max_string_length_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max_string\
    \ = \"\";\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max_string_length\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max_string_length_index\
    \ = 0;\n    var paren_levels_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max_string_length_max\
    \ = 0;\n    var paren_level\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6h98tm5z.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_count);\n         \
    \   paren_count++;\n        }\n        else if(c == ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }\n        else if(paren_stack.length > 0){\n\
    \            paren_count = paren_stack[paren_stack.length-1];\n        }\n   \
    \     else{\n            nested_parens.push(paren_count);\n            paren_count\
    \ = 0;\n        }\n        paren_level++;\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpqa4z_kw2.js:37:10)\n    at Object.<anonymous> (/tmp/tmpqa4z_kw2.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  var paren_stack_pointer = 0;\n  var paren_stack_top = 0;\n  var paren_stack_top_count\
    \ = 0;\n  var paren_stack_top_count_max = 2;\n  var paren_stack_top_count_min\
    \ = 3;\n  var paren_stack_top_count_step = 2;\n  var paren_stack_top_count_max2\
    \ = 2;\n  var paren_stack_top_count_min2 = 2;\n  var paren_stack_top_count_step2\
    \ = 2;\n  var paren_stack_top_count_max3 = 1;\n  var paren_stack_top_count_min3\
    \ = 1;\n  var paren_stack_top_count_step3 = 1;\n  var paren_stack_top_count_max4\
    \ = 1;\n  var paren_stack_top_count_min4 = 1;\n  var paren_stack_top_count_step4\
    \ = 1;\n  var paren_stack_top_count_max5 = 1;\n  var paren_stack_top_count_min5\
    \ = 1;\n  var paren_stack_top_count_step5 = 1;\n  var paren_stack_top_count_max6\
    \ = 1;\n  var paren_stack_top_count_min6 = 1;\n  var paren_stack_top_count_step6\
    \ = 1;\n  var paren_stack_top_count_max7 = 1;\n  var paren_stack_top_count_min7\
    \ = 1;\n  var paren_stack_top_count_step7 = 1;\n  var paren_stack_top_count_max8\
    \ = 1;\n  var paren_stack_top_count_min8 = 1;\n  var paren_stack_top_count_step8\
    \ = 1;\n  var paren_stack_top_count_max9 = 1;\n  var paren_stack_top_count_min9\
    \ = 1;\n  var paren_stack_top_count_step9 = 1;\n  var paren_stack_top_count_max10\
    \ = 1;\n  var paren_stack_top_count_min10 = 1;\n  var paren_stack_top_count_step10\
    \ = 1;\n  var paren_stack_top_count_max11 = 1;\n  var paren_stack_top_count_min11\
    \ = 1;\n  var paren_stack_top_count_step11 = 1;\n  var paren_stack_top_count_max12\
    \ = 1;\n  var paren_stack_top_count_min12 = 1;\n  var paren_stack_top_count_step12\
    \ = 1;\n  var paren_stack_top_count_max13 = 1;\n  var paren_stack_top_count_min13\
    \ = 1;\n  var paren_stack_top_count_step13 = 1;\n  var paren_stack_top_count_max14\
    \ = 1;\n  var paren_stack_top_count_min14 = 1;\n  var paren_stack_top_count_step14\
    \ = 1;\n  var paren_stack_top_count_max15 = 1;\n  var paren_stack_top_count_min15\
    \ = 1;\n  var paren_stack_top_count_step15 = 1;\n  var paren_stack_top_count_max16\
    \ = 1;\n  var paren_stack_top_count_min16 = 1;\n  var paren_stack_top_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpydjnsxqx.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nestings = [];\n    var paren_levels_string = \"\";\n \
    \   var paren_nestings_string = \"\";\n    var paren_levels_string_reversed =\
    \ \"\";\n    var paren_nestings_string_reversed = \"\";\n    var paren_levels_string_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed = \"\";\n    var paren_levels_string_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed = \"\";\n\
    \    var paren_levels_string_reversed_reversed_reversed_reversed = \"\";\n   \
    \ var paren_nestings_string_reversed_reversed_reversed_reversed = \"\";\n    var\
    \ paren_levels_string_reversed_reversed_reversed_reversed_reversed = \"\";\n \
    \   var paren_nestings_string_reversed_reversed_reversed_reversed_reversed = \"\
    \";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_levels_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_nestings_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdm4bjwqf.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        if(paren_level > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  1,\n  2,\n  3,\n  2,\n  1,\n  1,\n  1,\n  2,\n  3,\n  2,\n\
    \  1,\n  2,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmp0dlstj0w.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0dlstj0w.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 1, 2,\n    3, 2, 1, 1, 1, 2, 3,\n    2, 1, 2, 1, 2, 1\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_levels = [];\n\tvar paren_level_counter\
    \ = 0;\n\tvar paren_level_counters = [];\n\tvar paren_level_counters_index = 0;\n\
    \t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] == \"\
    (\"){\n\t\t\tparen_level++;\n\t\t\tparen_levels[paren_levels.length] = paren_level;\n\
    \t\t\tparen_level_counters[paren_level_counters.length] = paren_level_counter;\n\
    \t\t\tparen_level_counters_index++;\n\t\t}\n\t\telse if(paren_string[i] == \"\
    )\"){\n\t\t\tparen_level--;\n\t\t\tparen_level_counters[paren_level_counters_index]\
    \ = paren_levels[paren_level];\n\t\t\tparen_level_counter++;\n\t\t}\n\t}\n\t\n\
    \tfor(var i=0; i<paren_levels.length; i++){\n\t\tif(paren_level_counters[i] >\
    \ 0){\n\t\t\tnested_parens[nested_parens.length] = paren_levels[i];\n\t\t}\n\t\
    }\n\t\n\treturn nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  2,\n  3,\n  1,\n  1,\n  2,\n  3,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpkbj_79dx.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkbj_79dx.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 2, 3, 1,\n    1, 2, 3, 2, 2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i]==\"(\"){\n      paren_level++;\n    }\n    if(paren_string[i]==\"\
    )\"){\n      paren_level--;\n    }\n    if(paren_level<0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuxnlxi0v.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuxnlxi0v.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_groups = [];\n\tvar paren_groups = paren_string.split(\"\
    \ \");\n\tfor(var i=0; i<paren_groups.length; i++){\n\t\tvar paren_group = paren_groups[i];\n\
    \t\tif(paren_group.length == 0){\n\t\t\tcontinue;\n\t\t}\n\t\tvar paren_group_level\
    \ = 0;\n\t\tvar paren_group_groups = paren_group.split(\"(\");\n\t\tfor(var j=0;\
    \ j<paren_group_groups.length; j++){\n\t\t\tvar paren_group_group = paren_group_groups[j];\n\
    \t\t\tif(paren_group_group.length == 0){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar\
    \ paren_group_group_level = 0;\n\t\t\tvar paren_group_group_groups = paren_group_group.split(\"\
    )\");\n\t\t\tfor(var k=0; k<paren_group_group_groups.length; k++){\n\t\t\t\tvar\
    \ paren_group_group_group = paren_group_group_groups[k];\n\t\t\t\tif(paren_group_group_group.length\
    \ == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar paren_group_group_group_level\
    \ = 0;\n\t\t\t\tvar paren_group_group_group_groups = paren_group_group_group.split(\"\
    )\");\n\t\t\t\tfor(var l=0; l<paren_group_group_group_groups.length; l++){\n\t\
    \t\t\t\tvar paren_group_group_group_group = paren_group_group_group_groups[l];\n\
    \t\t\t\t\tif(paren_group_group_group_group.length == 0){\n\t\t\t\t\t\tcontinue;\n\
    \t\t\t\t\t}\n\t\t\t\t\tvar paren_group_group_group_group_level = 0;\n\t\t\t\t\t\
    var paren_group_group_group_group_groups = paren_group_group_group_group.split(\"\
    )\");\n\t\t\t\t\tfor(var m=0; m<paren_group_group_group_group_groups.length; m++){\n\
    \t\t\t\t\t\tvar paren_group_group_group_group_group = paren_group_group_group_group_groups[m];\n\
    \t\t\t\t\t\tif(paren_group_group_group_group_group.length == 0){\n\t\t\t\t\t\t\
    \tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar paren_group_group_group_group_group_level\
    \ = 0;\n\t\t\t\t\t\tvar paren_group_group_group_group_group_groups = paren_group_group_group_group_group.split(\"\
    )\");\n\t\t\t\t\t\tfor(var n=0; n<paren_group_group_group_group_group_groups.length;\
    \ n++){\n\t\t\t\t\t\t\tvar paren_group_group_group_group_group_group = paren_group_group_group_group_group_groups[n];\n\
    \t\t\t\t\t\t\tif(paren_group_group_group_group_group_group.length == 0){\n\t\t\
    \t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar paren_group_group_group_group_group_level\
    \ = 0;\n\t\t\t\t\t\t\tvar paren_group_group_group_group_group_group_groups = paren_group_group_group_group_group_group.split(\"\
    )\");\n\t\t\t\t\t\t\tfor(var o=0; o<paren_group_group_group_group_group_groups.length;\
    \ o++){\n\t\t\t\t\t\t\t\tvar paren\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2159vn9o.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_levels =\
    \ [];\n    var paren_levels_index = [];\n    var paren_levels_index[0] = 0;\n\
    \    var paren_levels_index[1] = 0;\n    var paren_levels_index[2] = 0;\n    var\
    \ paren_levels_index[3] = 0;\n    var paren_levels_index[4] = 0;\n    var paren_levels_index[5]\
    \ = 0;\n    var paren_levels_index[6] = 0;\n    var paren_levels_index[7] = 0;\n\
    \    var paren_levels_index[8] = 0;\n    var paren_levels_index[9] = 0;\n    var\
    \ paren_levels_index[10] = 0;\n    var paren_levels_index[11] = 0;\n    var paren_levels_index[12]\
    \ = 0;\n    var paren_levels_index[13] = 0;\n    var paren_levels_index[14] =\
    \ 0;\n    var paren_levels_index[15] = 0;\n    var paren_levels_index[16] = 0;\n\
    \    var paren_levels_index[17] = 0;\n    var paren_levels_index[18] = 0;\n  \
    \  var paren_levels_index[19] = 0;\n    var paren_levels_index[20] = 0;\n    var\
    \ paren_levels_index[21] = 0;\n    var paren_levels_index[22] = 0;\n    var paren_levels_index[23]\
    \ = 0;\n    var paren_levels_index[24] = 0;\n    var paren_levels_index[25] =\
    \ 0;\n    var paren_levels_index[26] = 0;\n    var paren_levels_index[27] = 0;\n\
    \    var paren_levels_index[28] = 0;\n    var paren_levels_index[29] = 0;\n  \
    \  var paren_levels_index[30] = 0;\n    var paren_levels_index[31] = 0;\n    var\
    \ paren_levels_index[32] = 0;\n    var paren_levels_index[33] = 0;\n    var paren_levels_index[34]\
    \ = 0;\n    var paren_levels_index[35] = 0;\n    var paren_levels_index[36] =\
    \ 0;\n    var paren_levels_index[37] = 0;\n    var paren_levels_index[38] = 0;\n\
    \    var paren_levels_index[39] = 0;\n    var paren_levels_index[40] = 0;\n  \
    \  var paren_levels_index[41] = 0;\n    var paren_levels_index[42] = 0;\n    var\
    \ paren_levels_index[43] = 0;\n    var paren_levels_index[44] = 0;\n    var paren_levels_index[45]\
    \ = 0;\n    var paren_levels_index[46] = 0;\n    var paren_levels_index[47] =\
    \ 0;\n    var paren_levels_index[48] = 0;\n    var paren_levels_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmq4vzm17.js:12\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_count\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_string = [];\n    var paren_level_stack_string_count\
    \ = [];\n    var paren_level_stack_string_string = [];\n    var paren_level_stack_string_string_count\
    \ = [];\n    var paren_level_stack_string_string_string = [];\n    var paren_level_stack_string_string_string_count\
    \ = [];\n    var paren_level_stack_string_string_string_string = [];\n    var\
    \ paren_level_stack_string_string_string_string_count = [];\n    var paren_level_stack_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string = [];\n    var\
    \ paren_level_stack_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var paren_level_stack_string_string_string_string_string\
    \ = [];\n    var paren_level_stack_string_string_string_string_string = [];\n\
    \    var paren_level_stack_string_string_string_string_string = [];\n    var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf9map72y.js:55\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\
    \tvar c = paren_string[i];\n\t\tif(c == '('){\n\t\t\tparen_stack.push(level);\n\
    \t\t\tlevel++;\n\t\t}\n\t\telse if(c == ')'){\n\t\t\tlevel = paren_stack.pop();\n\
    \t\t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_jp24fjb.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_jp24fjb.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp04r2pya6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_count++;\n    }\n    else if(paren_string[i]\
    \ == ')'){\n      paren_count--;\n    }\n    if(paren_count == 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmppar_e2tp.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppar_e2tp.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max_count = 0;\n    var paren_level_max_count_index\
    \ = 0;\n    var paren_level_max_count_index2 = 0;\n    var paren_level_max_count_index3\
    \ = 0;\n    var paren_level_max_count_index4 = 0;\n    var paren_level_max_count_index5\
    \ = 0;\n    var paren_level_max_count_index6 = 0;\n    var paren_level_max_count_index7\
    \ = 0;\n    var paren_level_max_count_index8 = 0;\n    var paren_level_max_count_index9\
    \ = 0;\n    var paren_level_max_count_index10 = 0;\n    var paren_level_max_count_index11\
    \ = 0;\n    var paren_level_max_count_index12 = 0;\n    var paren_level_max_count_index13\
    \ = 0;\n    var paren_level_max_count_index14 = 0;\n    var paren_level_max_count_index15\
    \ = 0;\n    var paren_level_max_count_index16 = 0;\n    var paren_level_max_count_index17\
    \ = 0;\n    var paren_level_max_count_index18 = 0;\n    var paren_level_max_count_index19\
    \ = 0;\n    var paren_level_max_count_index20 = 0;\n    var paren_level_max_count_index21\
    \ = 0;\n    var paren_level_max_count_index22 = 0;\n    var paren_level_max_count_index23\
    \ = 0;\n    var paren_level_max_count_index24 = 0;\n    var paren_level_max_count_index25\
    \ = 0;\n    var paren_level_max_count_index26 = 0;\n    var paren_level_max_count_index27\
    \ = 0;\n    var paren_level_max_count_index28 = 0;\n    var paren_level_max_count_index29\
    \ = 0;\n    var paren_level_max_count_index30 = 0;\n    var paren_level_max_count_index31\
    \ = 0;\n    var paren_level_max_count_index32 = 0;\n    var paren_level_max_count_index33\
    \ = 0;\n    var paren_level_max_count_index34 = 0;\n    var paren_level_max_count_index35\
    \ = 0;\n    var paren_level_max_count_index36 = 0;\n    var paren_level_max_count_index37\
    \ = 0;\n    var paren_level_max_count_index38 = 0;\n    var paren_level_max_count_index39\
    \ = 0;\n    var paren_level_max_count_index40 = 0;\n    var paren_level_max_count_index41\
    \ = 0;\n    var paren_level_max_count_index42 = 0;\n    var paren_level_max_count_index43\
    \ = 0;\n    var paren_level_max_count_index44 = 0;\n    var paren_level_max_count_index45\
    \ = 0;\n    var paren_level_max_count_index46 = 0;\n    var paren_level_max_count_index47\
    \ = 0;\n    var paren_level_max_count_index48 = 0;\n    var paren_level_max_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5xrjbf43.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar nested_paren_levels = [];\n\tvar paren_level = 0;\n\tvar paren_paren_levels\
    \ = [];\n\tvar paren_paren_levels_string = \"\";\n\tvar paren_level_string = \"\
    \";\n\tvar paren_level_strings = [];\n\tvar paren_level_strings_string = \"\"\
    ;\n\tvar paren_level_array = [];\n\tvar paren_level_array_string = \"\";\n\tvar\
    \ paren_level_array_strings = [];\n\tvar paren_level_array_strings_string = \"\
    \";\n\tvar paren_level_array_strings_array = [];\n\tvar paren_level_array_strings_array_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings = [];\n\tvar paren_level_array_strings_array_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings = [];\n\tvar\
    \ paren_level_array_strings_array_strings_strings_string = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n\tvar paren_level_array_strings_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = [];\n\tvar paren_level_array_strings_array_strings_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptqnkkp7j.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar nested_parens = [];\n\tvar paren_count = 0;\n\tvar paren_stack =\
    \ [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] ==\
    \ \"(\"){\n\t\t\tparen_stack.push(paren_count);\n\t\t\tparen_count++;\n\t\t}else\
    \ if(paren_string[i] == \")\"){\n\t\t\tparen_count = paren_stack.pop();\n\t\t\
    }\n\t\tif(paren_count > nested_level){\n\t\t\tnested_level = paren_count;\n\t\t\
    }\n\t}\n\treturn nested_level;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpdg3yk3dj.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdg3yk3dj.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, \" \");\n    paren_string = paren_string.replace(/\\\
    s+$/g, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/, \"\");\n    paren_string = paren_string.replace(/^\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/^\\s+/, \"\");\n    paren_string = paren_string.replace(/\\\
    s+/, \"\");\n    paren_string = paren_string.replace(/^\\s+/, \"\");\n    paren_string\
    \ = paren_string.replace(/\\s+/\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm33jotij.js:49\n    paren_string = paren_string.replace(/\\s+/\n\
    \                                        ^^^^^\n\nSyntaxError: missing ) after\
    \ argument list\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level_counter\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char === '('){\n            paren_stack.push(level);\n           \
    \ paren_levels.push(paren_level_counter);\n            level++;\n        }\n \
    \       else if(char === ')'){\n            level--;\n            paren_level_counter\
    \ = paren_levels.pop();\n        }\n    }\n    return paren_stack;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  0,\n  1,\n  2,\n  0,\n  0,\n  1,\n  2,\n  1,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpuplr3mwy.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuplr3mwy.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting = 0;\n\tvar paren_nesting_nesting_level =\
    \ 0;\n\tvar paren_nesting_nesting_nesting = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar\
    \ paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar\
    \ paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar\
    \ paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar\
    \ paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level = 0;\n\tvar\
    \ \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h2io6jr.js:58\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max_count = 0;\n    var paren_level_max_count_index\
    \ = 0;\n    var paren_level_max_count_index2 = 0;\n    var paren_level_max_count_index3\
    \ = 0;\n    var paren_level_max_count_index4 = 0;\n    var paren_level_max_count_index5\
    \ = 0;\n    var paren_level_max_count_index6 = 0;\n    var paren_level_max_count_index7\
    \ = 0;\n    var paren_level_max_count_index8 = 0;\n    var paren_level_max_count_index9\
    \ = 0;\n    var paren_level_max_count_index10 = 0;\n    var paren_level_max_count_index11\
    \ = 0;\n    var paren_level_max_count_index12 = 0;\n    var paren_level_max_count_index13\
    \ = 0;\n    var paren_level_max_count_index14 = 0;\n    var paren_level_max_count_index15\
    \ = 0;\n    var paren_level_max_count_index16 = 0;\n    var paren_level_max_count_index17\
    \ = 0;\n    var paren_level_max_count_index18 = 0;\n    var paren_level_max_count_index19\
    \ = 0;\n    var paren_level_max_count_index20 = 0;\n    var paren_level_max_count_index21\
    \ = 0;\n    var paren_level_max_count_index22 = 0;\n    var paren_level_max_count_index23\
    \ = 0;\n    var paren_level_max_count_index24 = 0;\n    var paren_level_max_count_index25\
    \ = 0;\n    var paren_level_max_count_index26 = 0;\n    var paren_level_max_count_index27\
    \ = 0;\n    var paren_level_max_count_index28 = 0;\n    var paren_level_max_count_index29\
    \ = 0;\n    var paren_level_max_count_index30 = 0;\n    var paren_level_max_count_index31\
    \ = 0;\n    var paren_level_max_count_index32 = 0;\n    var paren_level_max_count_index33\
    \ = 0;\n    var paren_level_max_count_index34 = 0;\n    var paren_level_max_count_index35\
    \ = 0;\n    var paren_level_max_count_index36 = 0;\n    var paren_level_max_count_index37\
    \ = 0;\n    var paren_level_max_count_index38 = 0;\n    var paren_level_max_count_index39\
    \ = 0;\n    var paren_level_max_count_index40 = 0;\n    var paren_level_max_count_index41\
    \ = 0;\n    var paren_level_max_count_index42 = 0;\n    var paren_level_max_count_index43\
    \ = 0;\n    var paren_level_max_count_index44 = 0;\n    var paren_level_max_count_index45\
    \ = 0;\n    var paren_level_max_count_index46 = 0;\n    var paren_level_max_count_index47\
    \ = 0;\n    var paren_level_max_count_index48 = 0;\n    var paren_level_max_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5xrjbf43.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_max = 0;\n\tvar paren_stack_max_index = 0;\n\tvar paren_stack_max_level\
    \ = 0;\n\tvar paren_stack_max_level_char = \"\";\n\tvar paren_stack_max_level_char_index\
    \ = 0;\n\tvar paren_stack_max_level_char_length = 0;\n\tvar paren_stack_max_level_char_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_length = 0;\n\tvar paren_stack_max_level_char_char_code_char\
    \ = \"\";\n\tvar paren_stack_max_level_char_char_code_char_index = 0;\n\tvar paren_stack_max_level_char_char_code_char_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_char_code = 0;\n\tvar\
    \ paren_stack_max_level_char_char_code_char_code_length = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char\
    \ = \"\";\n\tvar paren_stack_max_level_char_char_code_char_code_char_index = 0;\n\
    \tvar paren_stack_max_level_char_char_code_char_code_char_length = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char =\
    \ \"\";\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_index\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char\
    \ = \"\";\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_index\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_code_char_code\
    \ = 0;\n\tvar paren_stack_max_level_char_char_code_char_code_char_code_char_code_char_code_char_code_length\
    \ = 0;\n\tvar paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0ug4ayhc.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_max_level = 0;\n    var paren_max_level_stack\
    \ = [];\n    var paren_max_level_stack_index = 0;\n    var paren_max_level_stack_length\
    \ = 0;\n    var paren_max_level_stack_pointer = 0;\n    var paren_max_level_stack_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_max_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkt2ia6_9.js:35\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_level = 0;\n\
    \tvar paren_level_count = 0;\n\tvar paren_level_max = 0;\n\tvar paren_level_max_count\
    \ = 0;\n\tvar paren_level_max_string = \"\";\n\tvar paren_level_max_string_index\
    \ = 0;\n\tvar paren_level_max_string_index2 = 0;\n\tvar paren_level_max_string_index3\
    \ = 0;\n\tvar paren_level_max_string_index4 = 0;\n\tvar paren_level_max_string_index5\
    \ = 0;\n\tvar paren_level_max_string_index6 = 0;\n\tvar paren_level_max_string_index7\
    \ = 0;\n\tvar paren_level_max_string_index8 = 0;\n\tvar paren_level_max_string_index9\
    \ = 0;\n\tvar paren_level_max_string_index10 = 0;\n\tvar paren_level_max_string_index11\
    \ = 0;\n\tvar paren_level_max_string_index12 = 0;\n\tvar paren_level_max_string_index13\
    \ = 0;\n\tvar paren_level_max_string_index14 = 0;\n\tvar paren_level_max_string_index15\
    \ = 0;\n\tvar paren_level_max_string_index16 = 0;\n\tvar paren_level_max_string_index17\
    \ = 0;\n\tvar paren_level_max_string_index18 = 0;\n\tvar paren_level_max_string_index19\
    \ = 0;\n\tvar paren_level_max_string_index20 = 0;\n\tvar paren_level_max_string_index21\
    \ = 0;\n\tvar paren_level_max_string_index22 = 0;\n\tvar paren_level_max_string_index23\
    \ = 0;\n\tvar paren_level_max_string_index24 = 0;\n\tvar paren_level_max_string_index25\
    \ = 0;\n\tvar paren_level_max_string_index26 = 0;\n\tvar paren_level_max_string_index27\
    \ = 0;\n\tvar paren_level_max_string_index28 = 0;\n\tvar paren_level_max_string_index29\
    \ = 0;\n\tvar paren_level_max_string_index30 = 0;\n\tvar paren_level_max_string_index31\
    \ = 0;\n\tvar paren_level_max_string_index32 = 0;\n\tvar paren_level_max_string_index33\
    \ = 0;\n\tvar paren_level_max_string_index34 = 0;\n\tvar paren_level_max_string_index35\
    \ = 0;\n\tvar paren_level_max_string_index36 = 0;\n\tvar paren_level_max_string_index37\
    \ = 0;\n\tvar paren_level_max_string_index38 = 0;\n\tvar paren_level_max_string_index39\
    \ = 0;\n\tvar paren_level_max_string_index40 = 0;\n\tvar paren_level_max_string_index41\
    \ = 0;\n\tvar paren_level_max_string_index42 = 0;\n\tvar paren_level_max_string_index43\
    \ = 0;\n\tvar paren_level_max_string_index44 = 0;\n\tvar paren_level_max_string_index45\
    \ = 0;\n\tvar paren_level_max_string_index46 = 0;\n\tvar paren_level_max_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgp06i_4m.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748334
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tparen_stack.push(paren_count);\n\
    \t\t\tparen_count++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tparen_count\
    \ = paren_stack.pop();\n\t\t}\n\t\telse if(paren_string[i] == \" \"){\n\t\t\t\
    paren_level++;\n\t\t}\n\t\telse if(paren_string[i] == \")\"){\n\t\t\tparen_level--;\n\
    \t\t}\n\t}\n\treturn paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpd2ls6v1h.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd2ls6v1h.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i]==\"(\"){\n      paren_count++;\n      if(paren_level==0){\n\
    \        nested_parens.push(paren_count);\n      }\n      if(paren_level==0){\n\
    \        paren_level = paren_count;\n      }\n    }\n    else if(paren_string[i]==\"\
    )\"){\n      paren_count--;\n      if(paren_count==0){\n        nested_parens.push(paren_count);\n\
    \      }\n      if(paren_count==0){\n        paren_level = paren_count;\n    \
    \  }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0,\n\
    \  1,\n  0,\n  1,\n  0,\n  1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n\
    \  3,\n  1,\n  3\n]\n    at test (/tmp/tmpb542uq9p.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb542uq9p.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 0, 1, 0,\n    1, 0, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748334
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbdo5xkj6.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_level_stack = [];\n\tvar paren_level_stack_index\
    \ = 0;\n\tvar paren_level_stack_string = \"\";\n\tvar paren_level_stack_last_index\
    \ = 0;\n\tvar paren_level_stack_last_string = \"\";\n\tvar paren_level_stack_last_string_index\
    \ = 0;\n\tvar paren_level_stack_last_string_index2 = 0;\n\tvar paren_level_stack_last_string_index3\
    \ = 0;\n\tvar paren_level_stack_last_string_index4 = 0;\n\tvar paren_level_stack_last_string_index5\
    \ = 0;\n\tvar paren_level_stack_last_string_index6 = 0;\n\tvar paren_level_stack_last_string_index7\
    \ = 0;\n\tvar paren_level_stack_last_string_index8 = 0;\n\tvar paren_level_stack_last_string_index9\
    \ = 0;\n\tvar paren_level_stack_last_string_index10 = 0;\n\tvar paren_level_stack_last_string_index11\
    \ = 0;\n\tvar paren_level_stack_last_string_index12 = 0;\n\tvar paren_level_stack_last_string_index13\
    \ = 0;\n\tvar paren_level_stack_last_string_index14 = 0;\n\tvar paren_level_stack_last_string_index15\
    \ = 0;\n\tvar paren_level_stack_last_string_index16 = 0;\n\tvar paren_level_stack_last_string_index17\
    \ = 0;\n\tvar paren_level_stack_last_string_index18 = 0;\n\tvar paren_level_stack_last_string_index19\
    \ = 0;\n\tvar paren_level_stack_last_string_index20 = 0;\n\tvar paren_level_stack_last_string_index21\
    \ = 0;\n\tvar paren_level_stack_last_string_index22 = 0;\n\tvar paren_level_stack_last_string_index23\
    \ = 0;\n\tvar paren_level_stack_last_string_index24 = 0;\n\tvar paren_level_stack_last_string_index25\
    \ = 0;\n\tvar paren_level_stack_last_string_index26 = 0;\n\tvar paren_level_stack_last_string_index27\
    \ = 0;\n\tvar paren_level_stack_last_string_index28 = 0;\n\tvar paren_level_stack_last_string_index29\
    \ = 0;\n\tvar paren_level_stack_last_string_index30 = 0;\n\tvar paren_level_stack_last_string_index31\
    \ = 0;\n\tvar paren_level_stack_last_string_index32 = 0;\n\tvar paren_level_stack_last_string_index33\
    \ = 0;\n\tvar paren_level_stack_last_string_index34 = 0;\n\tvar paren_level_stack_last_string_index35\
    \ = 0;\n\tvar paren_level_stack_last_string_index36 = 0;\n\tvar paren_level_stack_last_string_index37\
    \ = 0;\n\tvar paren_level_stack_last_string_index38 = 0;\n\tvar paren_level_stack_last_string_index39\
    \ = 0;\n\tvar paren_level_stack_last_string_index40 = 0;\n\tvar paren_level_stack_last_string_index41\
    \ = 0;\n\tvar paren_level_stack_last_string_index42 = 0;\n\tvar paren\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6meocnd0.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748334
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_stack\
    \ = [];\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_last_index = 0;\n    var paren_level_stack_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level = 0;\n    var paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_string = \"\";\n    var paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_string = \"\";\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack = [];\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack_index = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = \"\";\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqhkfyd08.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  var paren_stack_pointer = 0;\n  var paren_stack_pointer_max = 0;\n\
    \  var paren_stack_pointer_max_index = 0;\n  var paren_stack_pointer_max_index2\
    \ = 0;\n  var paren_stack_pointer_max_index3 = 0;\n  var paren_stack_pointer_max_index4\
    \ = 0;\n  var paren_stack_pointer_max_index5 = 0;\n  var paren_stack_pointer_max_index6\
    \ = 0;\n  var paren_stack_pointer_max_index7 = 0;\n  var paren_stack_pointer_max_index8\
    \ = 0;\n  var paren_stack_pointer_max_index9 = 0;\n  var paren_stack_pointer_max_index10\
    \ = 0;\n  var paren_stack_pointer_max_index11 = 0;\n  var paren_stack_pointer_max_index12\
    \ = 0;\n  var paren_stack_pointer_max_index13 = 0;\n  var paren_stack_pointer_max_index14\
    \ = 0;\n  var paren_stack_pointer_max_index15 = 0;\n  var paren_stack_pointer_max_index16\
    \ = 0;\n  var paren_stack_pointer_max_index17 = 0;\n  var paren_stack_pointer_max_index18\
    \ = 0;\n  var paren_stack_pointer_max_index19 = 0;\n  var paren_stack_pointer_max_index20\
    \ = 0;\n  var paren_stack_pointer_max_index21 = 0;\n  var paren_stack_pointer_max_index22\
    \ = 0;\n  var paren_stack_pointer_max_index23 = 0;\n  var paren_stack_pointer_max_index24\
    \ = 0;\n  var paren_stack_pointer_max_index25 = 0;\n  var paren_stack_pointer_max_index26\
    \ = 0;\n  var paren_stack_pointer_max_index27 = 0;\n  var paren_stack_pointer_max_index28\
    \ = 0;\n  var paren_stack_pointer_max_index29 = 0;\n  var paren_stack_pointer_max_index30\
    \ = 0;\n  var paren_stack_pointer_max_index31 = 0;\n  var paren_stack_pointer_max_index32\
    \ = 0;\n  var paren_stack_pointer_max_index33 = 0;\n  var paren_stack_pointer_max_index34\
    \ = 0;\n  var paren_stack_pointer_max_index35 = 0;\n  var paren_stack_pointer_max_index36\
    \ = 0;\n  var paren_stack_pointer_max_index37 = 0;\n  var paren_stack_pointer_max_index38\
    \ = 0;\n  var paren_stack_pointer_max_index39 = 0;\n  var paren_stack_pointer_max_index40\
    \ = 0;\n  var paren_stack_pointer_max_index41 = 0;\n  var paren_stack_pointer_max_index42\
    \ = 0;\n  var paren_stack_pointer_max_index43 = 0;\n  var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1pbyodwe.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748333
