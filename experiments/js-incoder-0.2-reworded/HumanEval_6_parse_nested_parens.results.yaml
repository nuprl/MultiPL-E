name: HumanEval_6_parse_nested_parens
language: js
results:
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string_reversed = \"\";\n    var paren_level_counter_reversed\
    \ = 0;\n    var paren_level_counter_reversed_string = \"\";\n    var paren_level_counter_reversed_string_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed = \"\"\
    ;\n    var paren_level_counter_reversed_string_reversed_reversed_reversed = \"\
    \";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = \"\";\n    var paren_level_counter_reversed_string\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7yfrz59f.js:44\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index2 = 0;\n  var paren_level_stack_pointer_max_index3\
    \ = 0;\n  var paren_level_stack_pointer_max_index4 = 0;\n  var paren_level_stack_pointer_max_index5\
    \ = 0;\n  var paren_level_stack_pointer_max_index6 = 0;\n  var paren_level_stack_pointer_max_index7\
    \ = 0;\n  var paren_level_stack_pointer_max_index8 = 0;\n  var paren_level_stack_pointer_max_index9\
    \ = 0;\n  var paren_level_stack_pointer_max_index10 = 0;\n  var paren_level_stack_pointer_max_index11\
    \ = 0;\n  var paren_level_stack_pointer_max_index12 = 0;\n  var paren_level_stack_pointer_max_index13\
    \ = 0;\n  var paren_level_stack_pointer_max_index14 = 0;\n  var paren_level_stack_pointer_max_index15\
    \ = 0;\n  var paren_level_stack_pointer_max_index16 = 0;\n  var paren_level_stack_pointer_max_index17\
    \ = 0;\n  var paren_level_stack_pointer_max_index18 = 0;\n  var paren_level_stack_pointer_max_index19\
    \ = 0;\n  var paren_level_stack_pointer_max_index20 = 0;\n  var paren_level_stack_pointer_max_index21\
    \ = 0;\n  var paren_level_stack_pointer_max_index22 = 0;\n  var paren_level_stack_pointer_max_index23\
    \ = 0;\n  var paren_level_stack_pointer_max_index24 = 0;\n  var paren_level_stack_pointer_max_index25\
    \ = 0;\n  var paren_level_stack_pointer_max_index26 = 0;\n  var paren_level_stack_pointer_max_index27\
    \ = 0;\n  var paren_level_stack_pointer_max_index28 = 0;\n  var paren_level_stack_pointer_max_index29\
    \ = 0;\n  var paren_level_stack_pointer_max_index30 = 0;\n  var paren_level_stack_pointer_max_index31\
    \ = 0;\n  var paren_level_stack_pointer_max_index32 = 0;\n  var paren_level_stack_pointer_max_index33\
    \ = 0;\n  var paren_level_stack_pointer_max_index34 = 0;\n  var paren_level_stack_pointer_max_index35\
    \ = 0;\n  var paren_level_stack_pointer_max_index36 = 0;\n  var paren_level_stack_pointer_max_index37\
    \ = 0;\n  var paren_level_stack_pointer_max_index38 = 0;\n  var paren_level_stack_pointer_max_index39\
    \ = 0;\n  var paren_level_stack_pointer_max_index40 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx6q5888u.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = \"\";\n    var paren_level_counter = 0;\n    var paren_level_counter_max =\
    \ 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_string = \"\"\
    ;\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpymcxtfaf.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if(char === '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }else if(char === ')'){\n      paren_level = paren_stack.pop();\n\
    \    }\n    nested_parens.push(paren_level);\n  }\n  return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp_29rf9bd.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_29rf9bd.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var paren_stack = [];\n    var paren_level = 0;\n    var paren_stack_string\
    \ = \"\";\n    var paren_level_string = \"\";\n    var paren_level_counter = 0;\n\
    \    var paren_level_counter_string = \"\";\n    var paren_level_counter_max =\
    \ 0;\n    var paren_level_counter_max_string = \"\";\n    var paren_level_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_string = \"\";\n    var paren_level_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_string = \"\";\n    var paren_level_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_string = \"\";\n \
    \   var paren_level_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_string = \"\"\
    ;\n    var paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n\
    \    var paren_level_counter_max_counter_max_counter_max_counter_max_string =\
    \ \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = \"\";\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpiq7y2pec.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tvar c = paren_string[i];\n\
    \t\tif(c == '('){\n\t\t\tparen_stack.push(paren_level);\n\t\t\tparen_level++;\n\
    \t\t}else if(c == ')'){\n\t\t\tparen_level--;\n\t\t\tparen_nesting = paren_stack.pop();\n\
    \t\t}\n\t\tparen_levels.push(paren_nesting);\n\t}\n\treturn paren_levels;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n  0,\n  0,\n  2,\n  1,\n  0,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  0,\n  0,\n  2,\n  1,\n  1,\n  1,\n  1,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpoee_o_kq.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoee_o_kq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 1, 1, 1, 0, 0, 0,\n    0, 0, 2, 1, 0, 0, 0, 0,\n    0, 0, 0, 0, 2, 1, 1,\
    \ 1,\n    1, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char == \"(\"){\n            paren_stack.push(paren_level);\n       \
    \     paren_level++;\n        }else if(char == \")\"){\n            paren_level\
    \ = paren_stack.pop();\n        }\n        if(paren_level > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  1,\n  2,\n  3,\n  2,\n  1,\n  1,\n  1,\n  2,\n  3,\n  2,\n\
    \  1,\n  2,\n  1,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmpvy0mgnuz.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvy0mgnuz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 1, 2,\n    3, 2, 1, 1, 1, 2, 3,\n    2, 1, 2, 1, 2, 1\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_char;\n    var paren_level_char_length;\n    var\
    \ paren_level_char_i;\n    var paren_level_char_j;\n    var paren_level_char_k;\n\
    \    var paren_level_char_l;\n    var paren_level_char_m;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char_n;\n\
    \    var paren_level_char_n;\n    var paren_level_char_n;\n    var paren_level_char\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplbuaoomv.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1,\n  2,\n  1,\n  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  0,\n  0,\n  1,\n\
    \  0,\n  0,\n  1,\n  2,\n  3,\n  2,\n  1,\n  2,\n  1,\n  2,\n  1,\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpcqyaijlt.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcqyaijlt.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2, 1, 0, 0, 1,\n    2, 3, 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2,\
    \ 1,\n    2, 1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == \"(\"){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char == \")\"){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(char == \" \"){\n            if(paren_stack.length\
    \ == 0){\n                nested_parens.push(paren_level);\n            }\n  \
    \      }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpfbrsz4kh.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfbrsz4kh.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            nested_parens.push(paren_stack);\n            paren_stack.push(c);\n\
    \        }else if(c == ')'){\n            nested_parens.pop();\n            var\
    \ last_nested_level = nested_parens[nested_parens.length-1];\n            if(last_nested_level.length\
    \ == 0){\n                nested_level--;\n            }else{\n              \
    \  nested_level++;\n            }\n        }\n    }\n    return nested_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplalybwyq.js:18\n            if(last_nested_level.length == 0){\n\
    \                                 ^\n\nTypeError: Cannot read properties of undefined\
    \ (reading 'length')\n    at parse_nested_parens (/tmp/tmplalybwyq.js:18:34)\n\
    \    at test (/tmp/tmplalybwyq.js:33:20)\n    at Object.<anonymous> (/tmp/tmplalybwyq.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nestings = [];\n    var paren_levels_string = \"\";\n \
    \   var paren_nestings_string = \"\";\n    var paren_levels_string_reverse = \"\
    \";\n    var paren_nestings_string_reverse = \"\";\n    var paren_levels_string_reverse_count\
    \ = 0;\n    var paren_nestings_string_reverse_count = 0;\n    var paren_levels_string_reverse_count_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max = 0;\n    var paren_levels_string_reverse_count_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max = 0;\n    var paren_levels_string_reverse_count_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max = 0;\n    var\
    \ paren_levels_string_reverse_count_max_max_max_max = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max = 0;\n \
    \   var paren_nestings_string_reverse_count_max_max_max_max_max = 0;\n    var\
    \ paren_levels_string_reverse_count_max_max_max_max_max_max = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_levels_string_reverse_count_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_nestings_string_reverse_count_max_max_max_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb_1ivkjg.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_level\
    \ = 0;\n    var level = 0;\n    var paren_stack = [];\n    var paren_level = [];\n\
    \    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_index2 = 0;\n    var paren_level_stack_index3 = 0;\n    var\
    \ paren_level_stack_index4 = 0;\n    var paren_level_stack_index5 = 0;\n    var\
    \ paren_level_stack_index6 = 0;\n    var paren_level_stack_index7 = 0;\n    var\
    \ paren_level_stack_index8 = 0;\n    var paren_level_stack_index9 = 0;\n    var\
    \ paren_level_stack_index10 = 0;\n    var paren_level_stack_index11 = 0;\n   \
    \ var paren_level_stack_index12 = 0;\n    var paren_level_stack_index13 = 0;\n\
    \    var paren_level_stack_index14 = 0;\n    var paren_level_stack_index15 = 0;\n\
    \    var paren_level_stack_index16 = 0;\n    var paren_level_stack_index17 = 0;\n\
    \    var paren_level_stack_index18 = 0;\n    var paren_level_stack_index19 = 0;\n\
    \    var paren_level_stack_index20 = 0;\n    var paren_level_stack_index21 = 0;\n\
    \    var paren_level_stack_index22 = 0;\n    var paren_level_stack_index23 = 0;\n\
    \    var paren_level_stack_index24 = 0;\n    var paren_level_stack_index25 = 0;\n\
    \    var paren_level_stack_index26 = 0;\n    var paren_level_stack_index27 = 0;\n\
    \    var paren_level_stack_index28 = 0;\n    var paren_level_stack_index29 = 0;\n\
    \    var paren_level_stack_index30 = 0;\n    var paren_level_stack_index31 = 0;\n\
    \    var paren_level_stack_index32 = 0;\n    var paren_level_stack_index33 = 0;\n\
    \    var paren_level_stack_index34 = 0;\n    var paren_level_stack_index35 = 0;\n\
    \    var paren_level_stack_index36 = 0;\n    var paren_level_stack_index37 = 0;\n\
    \    var paren_level_stack_index38 = 0;\n    var paren_level_stack_index39 = 0;\n\
    \    var paren_level_stack_index40 = 0;\n    var paren_level_stack_index41 = 1;\n\
    \    var paren_level_stack_index42 = 1;\n    var paren_level_stack_index43 = 1;\n\
    \    var paren_level_stack_index44 = 1;\n    var paren_level_stack_index45 = 1;\n\
    \    var paren_level_stack_index46 = 1;\n    var paren_level_stack_index47 = 1;\n\
    \    var paren_level_stack_index48 = 1;\n    var paren_level_stack_index49 = 1;\n\
    \    var paren_level_stack_index50 = 1;\n    var paren_level_stack_index51 = 1;\n\
    \    var paren_level_stack_index52 = 1;\n    var paren_level_stack_index53 = 1;\n\
    \    var paren_level_stack_index54 = 1;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp300cqa7i.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  var paren_levels_stack = [];\n  var paren_levels_stacks\
    \ = [];\n  var paren_levels_stacks_stack = [];\n  var paren_levels_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stack = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stack =\
    \ [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stacks_stack\
    \ = [];\n  var paren_levels_stacks_stacks_stacks_stacks_stacks_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn1_lsvuu.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp03udm81u.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_level_counters_index = 0;\n    var\
    \ paren_level_counters_indexs = [];\n    var paren_level_counters_index = 0;\n\
    \    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9fp2_es2.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_groups = [];\n\
    \    var paren_groups = paren_string.split(\" \");\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        if(paren_group ===\
    \ \"(\"){\n            nested_paren_stack.push(nested_paren_level);\n        \
    \    nested_paren_level++;\n        }else if(paren_group === \")\"){\n       \
    \     var current_nested_paren_level = nested_paren_stack.pop();\n           \
    \ if(current_nested_paren_level > nested_paren_level){\n                nested_paren_level\
    \ = current_nested_paren_level;\n            }\n        }\n        nested_paren_groups.push(nested_paren_level);\n\
    \    }\n    return nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpqsur46v6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqsur46v6.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    var paren_stack_max = 0;\n    var paren_stack_max_index = 0;\n   \
    \ var paren_stack_max_level = 0;\n    var paren_stack_max_level_length = 0;\n\
    \    var paren_stack_max_level_length_index = 0;\n    var paren_stack_max_level_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_index = 0;\n    var paren_stack_max_level_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_index = 0;\n    var\
    \ paren_stack_max_level_length_value_length_value = 0;\n    var paren_stack_max_level_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length = 0;\n\
    \    var paren_stack_max_level_length_value_length_value_length_index = 0;\n \
    \   var paren_stack_max_level_length_value_length_value_length_value = 0;\n  \
    \  var paren_stack_max_level_length_value_length_value_length_value_index = 0;\n\
    \    var paren_stack_max_level_length_value_length_value_length_value_length =\
    \ 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length_value_length_value_index\
    \ = 0;\n    var paren_stack_max_level_length_value_length_value_length_value_length_value_length_value_length\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4e1v2l0j.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_groups = [];\n\tvar paren_group_levels\
    \ = [];\n\tvar paren_group_counts = [];\n\tvar paren_group_counts_index = 0;\n\
    \tvar paren_group_counts_max = 0;\n\tvar paren_group_counts_max_index = 0;\n\t\
    var paren_group_counts_max_index2 = 0;\n\tvar paren_group_counts_max_index3 =\
    \ 0;\n\tvar paren_group_counts_max_index4 = 0;\n\tvar paren_group_counts_max_index5\
    \ = 0;\n\tvar paren_group_counts_max_index6 = 0;\n\tvar paren_group_counts_max_index7\
    \ = 0;\n\tvar paren_group_counts_max_index8 = 0;\n\tvar paren_group_counts_max_index9\
    \ = 0;\n\tvar paren_group_counts_max_index10 = 0;\n\tvar paren_group_counts_max_index11\
    \ = 0;\n\tvar paren_group_counts_max_index12 = 0;\n\tvar paren_group_counts_max_index13\
    \ = 0;\n\tvar paren_group_counts_max_index14 = 0;\n\tvar paren_group_counts_max_index15\
    \ = 0;\n\tvar paren_group_counts_max_index16 = 0;\n\tvar paren_group_counts_max_index17\
    \ = 0;\n\tvar paren_group_counts_max_index18 = 0;\n\tvar paren_group_counts_max_index19\
    \ = 0;\n\tvar paren_group_counts_max_index20 = 0;\n\tvar paren_group_counts_max_index21\
    \ = 0;\n\tvar paren_group_counts_max_index22 = 0;\n\tvar paren_group_counts_max_index23\
    \ = 0;\n\tvar paren_group_counts_max_index24 = 0;\n\tvar paren_group_counts_max_index25\
    \ = 0;\n\tvar paren_group_counts_max_index26 = 0;\n\tvar paren_group_counts_max_index27\
    \ = 0;\n\tvar paren_group_counts_max_index28 = 0;\n\tvar paren_group_counts_max_index29\
    \ = 0;\n\tvar paren_group_counts_max_index30 = 0;\n\tvar paren_group_counts_max_index31\
    \ = 0;\n\tvar paren_group_counts_max_index32 = 0;\n\tvar paren_group_counts_max_index33\
    \ = 0;\n\tvar paren_group_counts_max_index34 = 0;\n\tvar paren_group_counts_max_index35\
    \ = 0;\n\tvar paren_group_counts_max_index36 = 0;\n\tvar paren_group_counts_max_index37\
    \ = 0;\n\tvar paren_group_counts_max_index38 = 0;\n\tvar paren_group_counts_max_index39\
    \ = 0;\n\tvar paren_group_counts_max_index40 = 0;\n\tvar paren_group_counts_max_index41\
    \ = 0;\n\tvar paren_group_counts_max_index42 = 0;\n\tvar paren_group_count\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwtrcn4r5.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level =\
    \ 0;\n\tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_index\
    \ = [];\n\tvar paren_levels_index[0] = 0;\n\tvar paren_levels_index[1] = 0;\n\t\
    var paren_levels_index[2] = 0;\n\tvar paren_levels_index[3] = 0;\n\tvar paren_levels_index[4]\
    \ = 0;\n\tvar paren_levels_index[5] = 0;\n\tvar paren_levels_index[6] = 0;\n\t\
    var paren_levels_index[7] = 0;\n\tvar paren_levels_index[8] = 0;\n\tvar paren_levels_index[9]\
    \ = 0;\n\tvar paren_levels_index[10] = 0;\n\tvar paren_levels_index[11] = 0;\n\
    \tvar paren_levels_index[12] = 0;\n\tvar paren_levels_index[13] = 0;\n\tvar paren_levels_index[14]\
    \ = 0;\n\tvar paren_levels_index[15] = 0;\n\tvar paren_levels_index[16] = 0;\n\
    \tvar paren_levels_index[17] = 0;\n\tvar paren_levels_index[18] = 0;\n\tvar paren_levels_index[19]\
    \ = 0;\n\tvar paren_levels_index[20] = 0;\n\tvar paren_levels_index[21] = 0;\n\
    \tvar paren_levels_index[22] = 0;\n\tvar paren_levels_index[23] = 0;\n\tvar paren_levels_index[24]\
    \ = 0;\n\tvar paren_levels_index[25] = 0;\n\tvar paren_levels_index[26] = 0;\n\
    \tvar paren_levels_index[27] = 0;\n\tvar paren_levels_index[28] = 0;\n\tvar paren_levels_index[29]\
    \ = 0;\n\tvar paren_levels_index[30] = 0;\n\tvar paren_levels_index[31] = 0;\n\
    \tvar paren_levels_index[32] = 0;\n\tvar paren_levels_index[33] = 0;\n\tvar paren_levels_index[34]\
    \ = 0;\n\tvar paren_levels_index[35] = 0;\n\tvar paren_levels_index[36] = 0;\n\
    \tvar paren_levels_index[37] = 0;\n\tvar paren_levels_index[38] = 0;\n\tvar paren_levels_index[39]\
    \ = 0;\n\tvar paren_levels_index[40] = 0;\n\tvar paren_levels_index[41] = 0;\n\
    \tvar paren_levels_index[42] = 0;\n\tvar paren_levels_index[43] = 0;\n\tvar paren_levels_index[44]\
    \ = 0;\n\tvar paren_levels_index[45] = 0;\n\tvar paren_levels_index[46] = 0;\n\
    \tvar paren_levels_index[47] = 0;\n\tvar paren_levels_index[48] = 0;\n\tvar paren_levels_index[49]\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps0p_p14c.js:11\n\tvar paren_levels_index[0] = 0;\n\t          \
    \            ^\n\nSyntaxError: Unexpected token '['\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
