name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["\tvar res = \"\";\n\twhile(x != 0){\n\t\tres = base_table[base] + res;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn res;\n}\n", "    var r = \"\";\n\
    \    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString().split('');\n\tdigits\
    \ = digits.map(function(d){\n\t\treturn parseInt(d, base);\n\t});\n\tdigits.reverse();\n\
    \treturn digits.join('');\n}\n", "    var r = \"\";\n    var sign = 1;\n    var\
    \ m = 1;\n    var digits = 1;\n    var i = base;\n    while(digits > 0){\n   \
    \     digits = digits / base;\n        i++;\n    }\n    while(x > 0){\n      \
    \  r = base_digits[x % base] + r;\n        x = x / base;\n    }\n    if(sign ==\
    \ -1){\n        r = base_digits[x % base] + r;\n    }\n    return r;\n}\n", "\t\
    var r = \"\";\n\tvar num = Math.abs(x);\n\tvar bnum = Math.abs(base);\n\tvar rem;\n\
    \n\twhile(num > 0){\n\t\trem = num % base;\n\t\tnum = Math.floor(num / base);\n\
    \t\tr = bnum > 10 ? r.concat(rem.toString()) : r.concat(rem.toString() + bnum.toString());\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if (x <\
    \ 0){\n        sign = \"-\";\n        x = -x;\n    }\n    if (x === 0) return\
    \ \"0\";\n    while (x !== 0){\n        r = base_digits[x % base] + r;\n     \
    \   x = Math.floor(x / base);\n    }\n    return sign + r;\n}\n", "\tvar r = \"\
    \";\n\tvar n = x;\n\twhile (n > 0){\n\t\tr = base_digits[n%base] + r;\n\t\tn =\
    \ Math.floor(n/base);\n\t}\n\treturn r;\n}\n", "\tvar y = \"\";\n\tvar bases =\
    \ [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\tvar bases_length\
    \ = bases.length;\n\tvar bases_index = bases_length - 1;\n\tvar bases_value =\
    \ bases[bases_index];\n\twhile(x >= bases_value){\n\t\ty += bases_value;\n\t\t\
    x -= bases_value;\n\t\tbases_index--;\n\t\tbases_value = bases[bases_index];\n\
    \t}\n\ty += bases[x];\n\treturn y;\n}\n", "\tvar res = \"\";\n\twhile(x > 0){\n\
    \t\tres = base_digits[x % base] + res;\n\t\tx = Math.floor(x / base);\n\t}\n\t\
    return reverseString(res);\n}\n", "\tvar str = x.toString(base);\n\tvar res =\
    \ \"\";\n\twhile(str.length < base){\n\t\tstr = \"0\" + str;\n\t}\n\twhile(str.length\
    \ > base){\n\t\tstr = str.substring(1);\n\t}\n\treturn str;\n}\n", "\tvar r =\
    \ \"\";\n\twhile(x>0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var num = Math.abs(x);\n\
    \    var bnum = Math.abs(base);\n    var sign = num < 0 ? \"-\" : \"\";\n    var\
    \ basesign = base<0 ? \"-\" : \"\";\n    var digits = Math.ceil(Math.log(bnum)/Math.log(10));\n\
    \    var rem = bnum%Math.pow(10,digits);\n    var div = Math.pow(10,digits);\n\
    \    var rem = rem < 0 ? 0 : rem;\n    var rnum = Math.floor(num/div);\n    var\
    \ rbase = Math.floor(bnum/div);\n    var rsign = rem < 0 ? \"-\" : \"\";\n   \
    \ while(rnum<10){\n        rnum = \"0\" + rnum;\n    }\n    while(rbase<10){\n\
    \        rbase = \"0\" + rbase;\n    }\n    rnum = rsign + rnum;\n    rbase =\
    \ rsign + rbase;\n    while(rnum.length < digits){\n        rnum = \"0\" + rnum;\n\
    \    }\n    while(rbase.length < digits){\n        rbase = \"0\" + rbase;\n  \
    \  }\n    r = rnum + rbase;\n    return sign + r;\n}\n", "    var r = \"\";\n\
    \    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x;\n    }\n    else {\n        var tmp\
    \ = base;\n        base = x;\n        x = tmp;\n    }\n    while (x > 0) {\n \
    \       var remainder = x % base;\n        x = x / base;\n        r = remainder\
    \ + r;\n    }\n    return sign + r;\n}\n", "\tvar y = \"\";\n\twhile(x != 0){\n\
    \t\tvar m = x % base;\n\t\ty = base * y + m;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn y;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var negative = x < 0;\n    if (negative){\n        x = -x;\n    }\n   \
    \ while (x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    if (negative){\n        r = base_digits[base] + r;\n  \
    \  }\n    return r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m =\
    \ 1;\n    var sign = 1;\n    var m = Math.abs(x);\n    var base = Math.abs(base);\n\
    \    while(m >= base){\n        m /= base;\n        s += '0';\n    }\n    while(m\
    \ > 0){\n        m /= base;\n        s += '0';\n    }\n    while(s.length < base){\n\
    \        s = '0' + s;\n    }\n    while(s.length < base){\n        s = '0' + s;\n\
    \    }\n    return sign * s;\n}\n", "    var r = \"\";\n    var s = \"\";\n  \
    \  var m = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n    var b = 0;\n \
    \   var i = 0;\n    while(m >= base){\n        s = Math.floor(m/base);\n     \
    \   r = m%base;\n        m = Math.floor((m-s)*base);\n        i++;\n    }\n  \
    \  while(m > 0){\n        s = Math.floor(m/base);\n        r = m%base;\n     \
    \   m = Math.floor((m-s)*base);\n        b++;\n    }\n    switch(i){\n       \
    \ case 0:\n            sign = -1;\n            break;\n        case 1:\n     \
    \       sign = 1;\n            break;\n    }\n    switch(b){\n        case 0:\n\
    \            sign = -1;\n            break;\n        case 1:\n            sign\
    \ = 1;\n            break;\n    }\n    r = sign*r;\n    return r;\n}\n", "   \
    \ var r = \"\";\n    var s = x.toString();\n    var l = s.length;\n    for(var\
    \ i = 0; i < l; i++){\n        var c = s.charAt(i);\n        var n = parseInt(c,\
    \ base);\n        if(n){\n            r = r + numerals[n];\n        }\n    }\n\
    \    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "\tvar r = \"\";\n\tvar num\
    \ = Math.abs(x);\n\tvar bnum = Math.abs(base);\n\tvar rem;\n\n\twhile(num > 0){\n\
    \t\trem = num % base;\n\t\tnum = Math.floor(num / base);\n\t\tr = bnum + r + base_map[rem];\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0) sign\
    \ = -1;\n    while(x >= base){\n        r = base_digits[x%base] + r;\n       \
    \ x = Math.floor(x/base);\n    }\n    r = base_digits[x%base] + r + base_digits[base];\n\
    \    return sign*r;\n}\n", "\tvar digits = x.toString().split('');\n\tdigits =\
    \ digits.map(function(d){\n\t\treturn parseInt(d,base);\n\t});\n\treturn digits.reverse().join('');\n\
    }\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x % base]\
    \ + r;\n        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m > 0){\n\
    \        r = m%base + r;\n        m = Math.floor(m/base);\n    }\n    if(x < 0){\n\
    \        r = Math.abs(r) + 1;\n    }\n    return sign*r;\n}\n", "    var r = \"\
    \";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n\
    \    var base = Math.abs(base);\n    while(m >= base){\n        s = Math.floor(m/base);\n\
    \        r = m%base;\n        m = s;\n    }\n    while(m > 0){\n        s = Math.floor(m/base);\n\
    \        r = m%base;\n        m = s;\n    }\n    if(sign == -1){\n        r =\
    \ Math.abs(r);\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\tvar bases = [\"\
    \",\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\tvar base = 0;\n\t\n\t\
    while(base < bases.length){\n\t\tr = bases[base] + r;\n\t\tbase++;\n\t}\n\t\n\t\
    while(x > 0){\n\t\tr = bases[x % base] + r;\n\t\tx = Math.floor(x / base);\n\t\
    \tbase++;\n\t}\n\t\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\"\
    ;\n    if(x<0) sign = \"-\";\n    else sign = \"\";\n    for(var i=0;i<base;i++){\n\
    \        if(x%base==0){\n            r += sign + i;\n            x /= base;\n\
    \        }\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\"), base = base;\n\
    \tfor(var i = 0; i < digits.length; i++){\n\t\tdigits[i] = parseInt(digits[i],\
    \ base);\n\t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n \
    \   }\n    while (x >= base){\n        r = base_digits[(x % base)];\n        x\
    \ = Math.floor(x / base);\n    }\n    r = base_digits[(x % base)];\n    return\
    \ sign * r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar r\
    \ = \"\";\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar remainder;\n\t\n\tfor(i = base;\
    \ i >= 1; i--){\n\t\tremainder = 0;\n\t\tfor(j = x; j >= 0; j--){\n\t\t\tremainder\
    \ *= base;\n\t\t\tremainder += j;\n\t\t}\n\t\tr = base_string[remainder] + r;\n\
    \t}\n\t\n\tfor(k = 0; k < base; k++){\n\t\tremainder = 0;\n\t\tfor(j = x; j >=\
    \ 0; j--){\n\t\t\tremainder *= base;\n\t\t\tremainder += j;\n\t\t}\n\t\tr = base_string[k]\
    \ + r; \n\t}\n\t\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n \
    \   if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    if (base<2 ||\
    \ base>36){\n        console.log(\"Base must be between 2 and 36\");\n       \
    \ return \"\";\n    }\n    if (base==2){\n        r = x.toString(2);\n    }\n\
    \    else{\n        while(base>2){\n            r = x.toString(base) + r;\n  \
    \          base = base/10;\n        }\n        r = x.toString(base) + r;\n   \
    \ }\n    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar r = \"\";\n\
    \twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn r;\n}\n", "\tvar r = \"\";\n\twhile(x > 0){\n\t\tvar mod = x % base;\n\
    \t\tr = digits[mod] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    r = m%10 + r + String(m%10);\n    return sign*(r+\"\");\n}\n", " \
    \   var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    while(x != 0){\n\
    \        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n \
    \   }\n    return sign + r;\n}\n", "\tvar num = x.toString(base);\n\tvar res =\
    \ num.split(\"\").reverse();\n\twhile (res[0].length < base){\n\t\tres.unshift(\"\
    0\");\n\t}\n\treturn res.reverse().join(\"\");\n}\n", "    var r = \"\";\n   \
    \ var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n\
    \    if (base < 2 || base > 36){\n        console.log(\"Base must be between 2\
    \ and 36\");\n        return;\n    }\n    if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);\n    }\n    else if (base == 2){\n        r = x.toString(2);\n\
    \    }\n    else if (base == 8){\n        r = x.toString(8);\n    }\n    else\
    \ if (base == 10){\n        r = x.toString(10);\n    }\n    else if (base == 16){\n\
    \        r = x.toString(16);", "    var r = \"\";\n    while(x != 0){\n      \
    \  r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[x\
    \ % base] + r;\n        x = Math.floor(x / base);\n    }\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var n = x;\n    while (n >= base){\n        r =\
    \ base_digits[n%base] + r;\n        n = Math.floor(n/base);\n    }\n    return\
    \ base_digits[n] + r;\n}\n", "\tvar baseNum = base;\n\tvar baseStr = \"\";\n\t\
    \n\twhile(baseNum > 0){\n\t\tbaseStr += (baseNum % 10) + \"\";\n\t\tbaseNum =\
    \ Math.floor(baseNum / 10);\n\t}\n\t\n\twhile(baseStr.length < x){\n\t\tbaseStr\
    \ = \"0\" + baseStr;\n\t}\n\t\n\treturn baseStr;\n}\n", "    var r = \"\";\n \
    \   var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n\
    \    while (x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var negative = false;\n\
    \    if (x < 0){\n        negative = true;\n        x = -x;\n    }\n    while\
    \ (x >= base){\n        r = base_digits[base] + r;\n        x -= base;\n    }\n\
    \    if (x != 0){\n        r = base_digits[base] + r;\n    }\n    if (negative){\n\
    \        r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ s = \"\";\n    var m = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n   \
    \ var bm = Math.abs(base);\n    var bs = Math.abs(base);\n    var i = 1;\n   \
    \ var j = 1;\n    var k = 1;\n    var z = 1;\n    var m = Math.abs(m);\n    var\
    \ bm = Math.abs(bm);\n    var bs = Math.abs(bs);\n    while(true){\n        if(bm\
    \ >= bs){\n            if(bm == bs){\n                if(bm == 0){\n         \
    \           r += s;\n                    break;\n                }\n         \
    \       else{\n                    r += s;\n                    r += m;\n    \
    \                break;\n                }\n            }\n            else{\n\
    \                r += s;\n                r += m;\n                break;\n  \
    \          }\n        }\n        else{\n            if(bm == bs){\n          \
    \      if(bm == 0){\n                    r += s;\n                    break;\n\
    \                }\n                else{\n                    r += s;\n     \
    \               r += m;\n                    break;\n                }\n     \
    \       }\n            else{\n                r += s;\n                r += m;\n\
    \                break;\n            }\n        }\n        i++;\n        j = i;\n\
    \        k += 1;\n        z = k;\n        while(true){\n            if(bm >= bs){\n\
    \                if(bm == bs){\n                    r += s;\n                \
    \    break;\n                }\n                else{\n                    r +=\
    \ s;\n                    r += m;\n                    break;\n              \
    \  }\n            }\n            else{\n                r += s;\n            \
    \    r += m;\n                break;\n            }\n            i++;\n      \
    \      j = i;\n            k += 1;\n            z = k;\n        }\n        m /=\
    \ base;\n        bm /= base;\n        bs /= base;\n    }\n    return r;\n}\n",
  "    var r = \"\";\n    var digits = \"\";\n    var sign = \"\";\n    var basedigit\
    \ = \"\";\n    var basesign = \"\";\n    var i;\n    for(i = 0; i < base; i++){\n\
    \        basedigit = base_to_digit(base);\n        basesign = base_to_sign(base);\n\
    \        digits = digits_of(basedigit);\n        sign = sign_of(basesign);\n \
    \       r += digits;\n    }\n    for(i = 0; i < x; i++){\n        digits = digits_of(x);\n\
    \        sign = sign_of(sign);\n        r += digits;\n    }\n    return r;\n}\n",
  "\tvar r = \"\";\n\tvar negative = false;\n\tvar i = 0;\n\twhile(i < x.length){\n\
    \t\tvar c = x.charAt(i);\n\t\tif(c == \"-\"){\n\t\t\tnegative = true;\n\t\t}else\
    \ if(c == \".\"){\n\t\t\tbreak;\n\t\t}else if(c == \"0\" || c == \"1\" || c ==\
    \ \"2\" || c == \"3\" || c == \"4\" || c == \"5\" || c == \"6\" || c == \"7\"\
    \ || c == \"8\" || c == \"9\"){\n\t\t\tr = r + c;\n\t\t}else{\n\t\t\tr = r + c\
    \ + base;\n\t\t}\n\t\ti++;\n\t}\n\tif(negative){\n\t\tr = r + \"-\";\n\t}\n\t\
    return r;\n}\n", "\tvar y = \"\";\n\twhile(x != 0){\n\t\tvar m = x % base;\n\t\
    \ty = base * y + m;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn y;\n}\n", "\t\
    var str = x.toString();\n\tvar res = \"\";\n\twhile (str.length < base){\n\t\t\
    str = \"0\" + str;\n\t}\n\twhile (str.length > base){\n\t\tstr = str.substring(str.length\
    \ - base);\n\t\tres = \"1\" + res;\n\t}\n\treturn res + str;\n}\n", "\tvar bases\
    \ = [1,2,3,4,5,6,7,8,9];\n\tvar bases_length = bases.length;\n\tvar digits = Math.log(x)\
    \ / Math.log(base);\n\tvar digit = digits % bases_length;\n\tvar output = \"\"\
    ;\n\twhile(digit){\n\t\toutput = bases[digit] + output;\n\t\tdigit = digits -\
    \ bases_length + digit;\n\t}\n\treturn output;\n}\n", "\tvar r = \"\";\n\twhile(x\
    \ != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x\
    \ % base] + r;\n        x = Math.floor(x / base);\n    }\n    return r;\n}\n",
  "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx =\
    \ Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\
    \tvar bases_length = bases.length;\n\tvar result = '';\n\tvar remainder = 0;\n\
    \tvar quotient = 0;\n\tvar quotient_length = bases.length;\n\t\n\twhile(quotient_length){\n\
    \t\tquotient = parseInt(x / bases[quotient_length-1], base);\n\t\tremainder =\
    \ x % bases[quotient_length-1];\n\t\tx = quotient;\n\t\tquotient_length--;\n\t\
    \t\n\t\tif(quotient_length){\n\t\t\tresult += bases[quotient_length-1];\n\t\t\
    }\n\t\t\n\t\tif(remainder > 0){\n\t\t\tresult += remainder;\n\t\t}\n\t}\n\t\n\t\
    return result;\n}\n", "\tvar res = \"\";\n\twhile(x>0){\n\t\tres = base_digits[x%base]\
    \ + res;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn reverseString(res);\n}\n",
  "\tvar digits = x.toString(base).split(\"\").reverse();\n\twhile(digits.length <\
    \ base){\n\t\tdigits = digits.concat(new Array(base - digits.length + 1).join(\"\
    0\"));\n\t}\n\treturn digits.join(\"\");\n}\n", "    var r = \"\";\n    var s\
    \ = \"\";\n    var m = 1;\n    var sign = 1;\n    while(x >= base){\n        s\
    \ = base_digits[x%base];\n        x = Math.floor(x/base);\n        r += s;\n \
    \   }\n    while(x < base){\n        s = base_digits[x%base];\n        x = Math.floor(x/base);\n\
    \        r += s;\n    }\n    if(x < base){\n        r += base_digits[base];\n\
    \    }\n    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    while(m > 0){\n  \
    \      r = m%base + r;\n        m = Math.floor(m/base);\n    }\n    if(x < 0){\n\
    \        sign = \"-\";\n        x = -x;\n    }\n    return sign + r;\n}\n", " \
    \   var r = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar y = \"\"\
    ;\n\twhile(x != 0){\n\t\tvar m = x % base;\n\t\ty = base * y + m;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn y;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    var m = 1;\n    var b = 0;\n    var i = 0;\n    while(i < x.length){\n  \
    \      b = x.charCodeAt(i) - 48;\n        r = r + String.fromCharCode(b);\n  \
    \      i++;\n    }\n    while(b >= base){\n        b -= base;\n        sign =\
    \ \"-\";\n    }\n    while(m > 0){\n        b = x.charCodeAt(i) - 48;\n      \
    \  r = r + String.fromCharCode(b);\n        m--;\n        i++;\n    }\n    return\
    \ sign + r;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    while(x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\"\
    ;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 + r +\
    \ String(m%10);\n        m = Math.floor(m/10);\n    }\n    if(m != 0){\n     \
    \   r = m%10 + r + String(m%10);\n    }\n    if(r == \"\"){\n        r = \"0\"\
    ;\n    }\n    if(x == 0){\n        sign = \"-\";\n    }\n    return sign + r;\n\
    }\n", "    var r = \"\";\n    var negative = false;\n    if(x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    while(x >= base){\n        r = base_digits[base]\
    \ + r;\n        x -= base;\n    }\n    if(x < base){\n        r = base_digits[base]\
    \ + r;\n    }\n    if(negative){\n        r = \"-\" + r;\n    }\n    return r;\n\
    }\n", "\tvar baseNum = base;\n\tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\t\
    var baseNumLen = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\tvar\
    \ baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n\tvar baseNum = 0;\n\tvar baseNumStr\
    \ = \"\";\n\tvar baseNumStrLen = 0;\n\tvar baseStr = \"\";\n\tvar baseStrLen =\
    \ 0;\n\tvar baseNum = 0;\n\tvar baseNumStr = \"\";\n\tvar baseNumStrLen = 0;\n\
    \tvar baseStr = \"\";\n\tvar baseStrLen = 0;\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    if (x_len > base){\n   \
    \     base = x_len;\n    }\n    while (base){\n        var m = x_len % base;\n\
    \        if (m == 0){\n            r = x_str.substring(0, x_len - m) + r;\n  \
    \          break;\n        }\n        r = x_str.substring(0, x_len - m) + r +\
    \ x_str.substring(x_len - m, x_len);\n        x_str = x_str.substring(x_len -\
    \ m, x_len);\n        base--;\n    }\n    return sign * r;\n}\n", "    var r =\
    \ \"\";\n    var sign = 1;\n    var m = 1;\n    var digit;\n    var i;\n    var\
    \ j;\n    for(i = x.length - 1; i >= 0; i--){\n        digit = x.charAt(i);\n\
    \        j = i;\n        while(j >= base){\n            r += digit;\n        \
    \    digit = x.charAt(--j);\n        }\n        r += digit;\n    }\n    if(sign){\n\
    \        r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ sign = 1;\n    var m = 1;\n    var b = 0;\n    while(m <= base){\n        b++;\n\
    \        m *= base;\n    }\n    while(x >= b){\n        x -= b;\n        r +=\
    \ String.fromCharCode(x % base);\n    }\n    if(x < 0){\n        r = \"-\" + r;\n\
    \    }\n    return r + sign;\n}\n", "    var r = \"\";\n    var sign = 1;\n  \
    \  if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n\
    \        r = base_digits[(x % base)];\n        x = Math.floor(x / base);\n   \
    \ }\n    r = base_digits[(x % base)];\n    return sign*r;\n}\n", "\tvar r = \"\
    \";\n\twhile(x>0){\n\t\tr = base_digits[x/base] + r;\n\t\tx = x % base;\n\t}\n\
    \treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n  \
    \      sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n   \
    \ var x_len = x_str.length;\n    var base = base;\n    var base_str = base.toString();\n\
    \    var base_len = base_str.length;\n    if (base_len > x_len){\n        base\
    \ = base_str.substring(0, base_len - x_len);\n    }\n    while (base_len > x_len){\n\
    \        r += base_str.substring(0, base_len - x_len);\n        base_str = base_str.substring(base_len\
    \ - x_len);\n        base_len--;\n    }\n    while (base_len < x_len){\n     \
    \   base_str += \"0\";\n        base_len++;\n    }\n    r += base_str;\n    while\
    \ (base_len < x_len){\n        r += base_str;\n        base_len++;\n    }\n  \
    \  r += x_str;\n    while (base_len < x_len){\n        r += base_str;\n      \
    \  base_len++;\n    }\n    r += base_str.substring(0, x_len);\n    return sign\
    \ * r;\n}\n", "\tvar y = \"\";\n\tvar bases = [\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\"];\n\tvar bases_length = bases.length;\n\t\n\tfor(var i = 0; i < bases_length;\
    \ i++){\n\t\ty += bases[bases_length - i - 1] * Math.pow(base, bases_length -\
    \ i - 1);\n\t}\n\t\n\ty += x;\n\treturn y;\n}\n", "\tvar y = \"\";\n\twhile(x\
    \ != 0){\n\t\tvar m = x % base;\n\t\ty = base * y + m;\n\t\tx = Math.floor(x /\
    \ base);\n\t}\n\treturn y;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0)\
    \ sign = -1;\n    x = Math.abs(x);\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "  \
    \  var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n    \
    \    x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\t\
    while(x >= base){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\tr = base_digits[x] + r;\n\treturn r;\n}\n", "    var r = \"\";\n    var\
    \ sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n   \
    \ if (base > Math.pow(10, base)){\n        base = Math.pow(10, base);\n    }\n\
    \    while(x != 0){\n        r = base_digit[Math.floor(x / base)] +\n        \
    \    base_digit[x % base] + r;\n        x = Math.floor(x / base);\n    }\n   \
    \ return sign * r;\n}\n", "\tvar r = \"\";\n\tvar bases = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\"];\n\tvar bases_length = bases.length;\n\t\n\tif(x == 0){\n\t\t\
    return \"0\";\n\t}\n\t\n\tif(x == 1){\n\t\treturn \"1\";\n\t}\n\t\n\tif(x == 2){\n\
    \t\treturn \"10\";\n\t}\n\t\n\tif(x == 3){\n\t\treturn \"11\";\n\t}\n\t\n\tif(x\
    \ == 4){\n\t\treturn \"100\";\n\t}\n\t\n\tif(x == 5){\n\t\treturn \"101\";\n\t\
    }\n\t\n\tif(x == 6){\n\t\treturn \"110\";\n\t}\n\t\n\tif(x == 7){\n\t\treturn\
    \ \"111\";\n\t}\n\t\n\tif(x == 8){\n\t\treturn \"1000\";\n\t}\n\t\n\tif(x == 9){\n\
    \t\treturn \"1001\";\n\t}\n\t\n\tif(x == 10){\n\t\treturn \"1010\";\n\t}\n\t\n\
    \tif(x == 11){\n\t\treturn \"1011\";\n\t}\n\t\n\tif(x == 12){\n\t\treturn \"1100\"\
    ;\n\t}\n\t\n\tif(x == 13){\n\t\treturn \"1101\";\n\t}\n\t\n\tif(x == 14){\n\t\t\
    return \"1110\";\n\t}\n\t\n\tif(x == 15){\n\t\treturn \"1111\";\n\t}\n\t\n\tif(x\
    \ == 16){\n\t\treturn \"10000\";\n\t}\n\t\n\tif(x == 17){\n\t\treturn \"10001\"\
    ;\n\t}\n\t\n\tif(x == 18){\n\t\treturn \"10010\";\n\t}\n\t\n\tif(x == 19){\n\t\
    \treturn \"10011\";\n\t}\n\t\n\tif(x == 20){\n\t\treturn \"10100\";\n\t}\n\t\n\
    \tif(x == 21){\n\t\treturn \"10101\";\n\t}\n\t\n\tif(x == 22){\n\t\treturn \"\
    10110\";\n\t}\n\t\n\tif(x == 23){\n\t\treturn \"10111\";\n\t}\n\t\n\tif(x == 24){\n\
    \t\treturn \"11000\";\n\t}\n\t\n\tif(x == 25){\n\t\treturn \"11001\";\n\t}\n\t\
    \n\tif(x == 26){\n\t\treturn \"11010\";\n\t}\n\t\n\tif(x == 27){\n\t\treturn \"\
    11011\";\n\t}\n\t\n\tif(x == 28){\n\t\treturn \"11100\";\n\t}\n\t", "    var r\
    \ = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n    var i = 0;\n\
    \    while(i < x.length){\n        s += m * x.charAt(i);\n        i++;\n     \
    \   m *= base;\n    }\n    while(m > 1){\n        r = s.substr(0, s.length - 1);\n\
    \        s = s.substr(s.length - 1);\n        sign = sign * -1;\n        m = m\
    \ / base;\n    }\n    return sign * s;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n  \
    \  var x_str = x.toString();\n    var x_len = x_str.length;\n    var base = base_table[base];\n\
    \    var max_len = base.length;\n    var digit;\n    for(var i = 0; i < x_len;\
    \ i++){\n        digit = x_str.charAt(i);\n        r += digit;\n        if (digit\
    \ >= base){\n            r += base_table[base];\n        }\n    }\n    return\
    \ sign + r;\n}\n", "\tvar r = \"\";\n\t\n\twhile(x != 0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\t\n\treturn r;\n}\n", "\tvar digits\
    \ = x.toString(base).split(\"\"), base = base;\n\tfor(var i = 0; i < digits.length;\
    \ i++){\n\t\tdigits[i] = parseInt(digits[i], base);\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "\tvar r = \"\";\n\tvar bases = [\"0\",\"1\",\"2\",\"3\",\"4\",\"\
    5\",\"6\",\"7\",\"8\",\"9\"];\n\tfor(var i=0;i<bases.length;i++){\n\t\tif(x>=bases[i]){\n\
    \t\t\tr = bases[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn r;\n}\n", "\tvar r = \"\
    \";\n\twhile(x>0){\n\t\tr = base_digits[x/base] + r;\n\t\tx = x % base;\n\t}\n\
    \treturn r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n\
    \    var m = Math.pow(base,x);\n    while(m > 0){\n        r = m%base + r;\n \
    \       m = Math.floor(m/base);\n    }\n    return sign + r;\n}\n", "    var r\
    \ = \"\";\n    var sign = \"\";\n    if(x == 0){\n        r = \"0\";\n    }\n\
    \    else if(x == -1){\n        r = \"-1\";\n    }\n    else if(x == 1){\n   \
    \     r = \"1\";\n    }\n    else if(x == 2){\n        r = \"2\";\n    }\n   \
    \ else if(x == 3){\n        r = \"3\";\n    }\n    else if(x == 4){\n        r\
    \ = \"4\";\n    }\n    else if(x == 5){\n        r = \"5\";\n    }\n    else if(x\
    \ == 6){\n        r = \"6\";\n    }\n    else if(x == 7){\n        r = \"7\";\n\
    \    }\n    else if(x == 8){\n        r = \"8\";\n    }\n    else if(x == 9){\n\
    \        r = \"9\";\n    }\n    else if(x == 10){\n        r = \"A\";\n    }\n\
    \    else if(x == 11){\n        r = \"B\";\n    }\n    else if(x == 12){\n   \
    \     r = \"C\";\n    }\n    else if(x == 13){\n        r = \"D\";\n    }\n  \
    \  else if(x == 14){\n        r = \"E\";\n    }\n    else if(x == 15){\n     \
    \   r = \"F\";\n    }\n    else if(x == 16){\n        r = \"10\";\n    }\n   \
    \ else if(x == 17){\n        r = \"11\";\n    }\n    else if(x == 18){\n     \
    \   r = \"12\";\n    }\n    else if(x == 19){\n        r = \"13\";\n    }\n  \
    \  else if(x == 20){\n        r = \"14\";\n    }\n    else if(x == 21){\n    \
    \    r = \"15\";\n    }\n    else if(x == 22){\n        r = \"16\";\n    }\n \
    \   else if(x == 23){\n        r = \"17\";\n    }\n    else if(x == 24){\n   \
    \     r = \"18\";\n    }\n    else if(x == 25){\n        r = \"19\";\n    }\n\
    \    else if(x == 26){\n        r = \"20\";\n    }\n    else if(x == 27){\n  \
    \      r = \"21\";\n    }\n    else if(x == 28){\n        r = \"22\";\n    }\n\
    \    else if(x == 29){\n        r = \"23\";\n    }\n    else if(x == 30){\n  \
    \      r = \"24\";\n    }\n    else if(x == 31){\n        r = \"25\";\n    }\n\
    \    else if(x == 32){\n        r = \"26\";\n    }\n    else if(x", "\tvar r =\
    \ \"\";\n\twhile(x>0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "\tvar digits = x.toString(base).split(\"\"\
    ).reverse();\n\twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base\
    \ - digits.length).fill(0));\n\t}\n\treturn digits.reverse().join(\"\");\n}\n",
  "\tvar baseNum = base;\n\tvar baseStr = \"\";\n\twhile (baseNum > 0){\n\t\tbaseStr\
    \ = base_map[baseNum % base] + baseStr;\n\t\tbaseNum = Math.floor(baseNum / base);\n\
    \t}\n\treturn baseStr + x;\n}\n", "\tvar y = \"\";\n\tvar bases = [\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\"];\n\tvar bases_length = bases.length;\n\t\n\tfor(var i =\
    \ 0; i < bases_length; i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\
    \t}\n\t\n\treturn y;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m =\
    \ 1;\n    var sign = 1;\n    while(x >= base){\n        s = base_digits[base]\
    \ + s;\n        x -= base;\n        sign *= -1;\n    }\n    while(x < base){\n\
    \        s = base_digits[base] + s;\n        x += base;\n        sign *= -1;\n\
    \    }\n    while(x > 0){\n        s = base_digits[base] + s;\n        x -= base;\n\
    \        sign *= -1;\n    }\n    r = base_digits[base] + s;\n    return sign *\
    \ r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\
    \t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var\
    \ sign = x < 0 ? \"-\" : \"\";\n    var m = Math.pow(base,x);\n    while(m > 0){\n\
    \        r = m + r;\n        m /= base;\n    }\n    return sign + r;\n}\n", " \
    \   var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n  \
    \      x = -x;\n    }\n    while (x >= base){\n        r = base_digits[x % base]\
    \ + r;\n        x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n",
  "    var r = \"\";\n    while(x>0){\n        r = base_digits[x % base] + r;\n  \
    \      x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar res = \"\"\
    ;\n\twhile(x != 0){\n\t\tres = base_digits[x%base] + res;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn reverseString(res);\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n\
    \    if (x > 9){\n        sign = \"+\";\n        x = x - 10;\n    }\n    while\
    \ (x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    if (x < base){\n\
    \        r = x;\n    }\n    else{\n        var y = Math.pow(base, x);\n      \
    \  r = y%base;\n    }\n    return sign + r;\n}\n", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\");\n\t\
    for(var i = 0; i < digits.length; i++){\n\t\tdigits[i] = parseInt(digits[i], base);\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "\tvar r = \"\";\n\twhile(x\
    \ != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m != 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n\
    \    }\n    if(x < 0){\n        sign = \"-\";\n        x = Math.abs(x);\n    }\n\
    \    if(x > 9){\n        r = r + \"0\";\n    }\n    return sign + r;\n}\n", "\t\
    var r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if(x<0)\
    \ sign = \"-\";\n    for(var i=0;i<base;i++){\n        if(x%base==0){\n      \
    \      r += sign+i;\n            x /= base;\n        }\n    }\n    return r;\n\
    }\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\
    \tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar res = \"\";\n\twhile(x\
    \ >= base){\n\t\tres = base_digits[x%base] + res;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn base_digits[x] + res;\n}\n", "    var r = \"\";\n    var s = \"\"\
    ;\n    while(x>0){\n        r = ((x % base) + base).toString(base);\n        s\
    \ = s.concat(r);\n        x = Math.floor(x/base);\n    }\n    return s;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    while (x >= base){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "  \
    \  var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n    if(x\
    \ < 0){\n        sign = \"-\";\n        x = Math.abs(x);\n    }\n    while(x !=\
    \ 0){\n        r = m%base + r;\n        x = Math.floor(x/base);\n        m = Math.floor(m/base);\n\
    \    }\n    return sign + r;\n}\n", "    var r = \"\";\n    while(x != 0){\n \
    \       r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n  \
    \  }\n    return r;\n}\n", "\tvar r = \"\";\n\tvar n = x;\n\twhile(n > 0){\n\t\
    \tr = base_digits[n%base] + r;\n\t\tn = Math.floor(n / base);\n\t}\n\treturn r;\n\
    }\n", "    var r = \"\";\n    var m = Math.pow(base,x);\n    for(var i = 0; i\
    \ < x; i++){\n        r += String.fromCharCode(m%base);\n        m = Math.floor(m/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r\
    \ = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n   \
    \ return r;\n}\n", "\tvar r = \"\";\n\tvar i;\n\tfor(i = base; (x/base) != 0;\
    \ i--){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t}\n\t\
    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x\
    \ % base] + r;\n        x = Math.floor(x / base);\n    }\n    return r;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    if (base > Math.pow(10, base)){\n        base = Math.pow(10,\
    \ base);\n    }\n    while (x != 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n", "    var\
    \ r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + m%10*sign;\n        m = Math.floor(m/10);\n\
    \    }\n    return m%10 + r + m%10*sign;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    var digits = \"\";\n    var basedigits = base;\n    var xdigits\
    \ = x;\n    var xdigits_length = xdigits.length;\n    var basedigits_length =\
    \ basedigits.length;\n    var i;\n    for(i = 0; i < basedigits_length; i++){\n\
    \        digits = basedigits[i] + digits;\n    }\n    for(i = 0; i < xdigits_length;\
    \ i++){\n        digits = digits + xdigits[i] + basedigits[i];\n    }\n    for(i\
    \ = 0; i < basedigits_length; i++){\n        sign = sign + basedigits[i];\n  \
    \  }\n    for(i = 0; i < xdigits_length; i++){\n        sign = sign + xdigits[i];\n\
    \    }\n    for(i = 0; i < basedigits_length; i++){\n        r = r + sign;\n \
    \   }\n    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10\
    \ + r + String(m%10);\n        m = Math.floor(m*base/10);\n    }\n    if(m > 0){\n\
    \        r = m%10 + r + String(m%10);\n    }\n    return sign*(r+\"\");\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    if (x_len < base){\n        r = x_str;\n    }else{\n        var x_div = x_len\
    \ / base;\n        var x_mod = x_len % base;\n        var i = 0;\n        while\
    \ (i < x_div){\n            r = r + x_str.charAt(base * i);\n            i++;\n\
    \        }\n        r = r + x_str.charAt(base * i);\n        r = r + x_str.charAt(x_mod);\n\
    \    }\n    return sign * r;\n}\n", "    var r = \"\";\n    while(x != 0){\n \
    \       r = base_digits[x%base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n\
    \    var sign = 1;\n    var m = Math.abs(x);\n    var base = Math.abs(base);\n\
    \    while (m >= base){\n        m /= base;\n        s += \"0\";\n    }\n    while(m\
    \ > 0){\n        m /= base;\n        s += \"1\";\n    }\n    while(s.length <\
    \ base){\n        s += \"0\";\n    }\n    r = s.substr(0, base);\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var sign = \"\";\n    var digits = \"\";\n    var\
    \ basedigits = \"\";\n    var base2 = \"\";\n    var base3 = \"\";\n    var base4\
    \ = \"\";\n    var base5 = \"\";\n    var base6 = \"\";\n    var base7 = \"\"\
    ;\n    var base8 = \"\";\n    var base9 = \"\";\n    var base10 = \"\";\n    var\
    \ base11 = \"\";\n    var base12 = \"\";\n    var base13 = \"\";\n    var base14\
    \ = \"\";\n    var base15 = \"\";\n    var base16 = \"\";\n    var base17 = \"\
    \";\n    var base18 = \"\";\n    var base19 = \"\";\n    var base20 = \"\";\n\
    \    var base21 = \"\";\n    var base22 = \"\";\n    var base23 = \"\";\n    var\
    \ base24 = \"\";\n    var base25 = \"\";\n    var base26 = \"\";\n    var base27\
    \ = \"\";\n    var base28 = \"\";\n    var base29 = \"\";\n    var base30 = \"\
    \";\n    var base31 = \"\";\n    var base32 = \"\";\n    var base33 = \"\";\n\
    \    var base34 = \"\";\n    var base35 = \"\";\n    var base36 = \"\";\n    var\
    \ base37 = \"\";\n    var base38 = \"\";\n    var base39 = \"\";\n    var base40\
    \ = \"\";\n    var base41 = \"\";\n    var base42 = \"\";\n    var base43 = \"\
    \";\n    var base44 = \"\";\n    var base45 = \"\";\n    var base46 = \"\";\n\
    \    var base47 = \"\";\n    var base48 = \"\";\n    var base49 = \"\";\n    var\
    \ base50 = \"\";\n    var base51 = \"\";\n    var base52 = \"\";\n    var base53\
    \ = \"\";\n    var base54 = \"\";\n    var base55 = \"\";\n    var base56 = \"\
    \";\n    var base57 = \"\";\n    var base58 = \"\";\n    var base59 = \"\";\n\
    \    var base60 = \"\";\n    var base61 = \"\";\n    var base62 = \"\";\n    var\
    \ base63 = \"\";\n    var base64 = \"\";\n    var base65 = \"\";\n    var base66\
    \ = \"\";\n    var base67 = \"\";\n    var base68 = \"\";\n    var base69 = \"\
    \";\n    var base70 = \"\";\n    var base71 = \"\";\n    var base72 = \"\";\n\
    \    var base73 = \"\";\n    var base74 = \"\";\n    var base75 = \"\";\n    var\
    \ base76 = \"\";\n    var base77 = \"\";\n    var base78 = \"\";\n    var base79\
    \ = \"\";\n    var base80 = \"\";\n    var base81 = \"\";\n    var base82 = \"\
    \";\n    var base83 = \"\";\n    var base84 = \"\";\n    var base85 = \"\";\n\
    \    var base86 = \"\";\n    var base87 = \"\";\n    var base88 = \"\";\n    var\
    \ base89 = \"\";\n    var base90 = \"\";\n    var base91 = \"\";\n    var base92\
    \ = \"\";\n    var base93 = \"\";\n    var base94 = \"\";\n    var base95 = \"\
    \";", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n \
    \   while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m*base/10);\n\
    \    }\n    if(m){\n        r = m%10 + r + String(m%10);\n    }\n    if(x < 0){\n\
    \        sign = -1;\n    }\n    return sign*parseInt(r,base);\n}\n", "\tvar digits\
    \ = x.toString(base).split(\"\").reverse();\n\twhile(digits.length < base){\n\t\
    \tdigits = digits.concat(new Array(base - digits.length).join(\"0\"));\n\t}\n\t\
    return digits.join(\"\");\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile (digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    while(x != 0){\n    \
    \    r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n  \
    \  return sign*r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    while (x != 0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ sign*r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n    \
    \    sign = -1;\n        x = -x;\n    }\n    while (x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "\t\
    var digits = x.toString(base).split(\"\").reverse();\n\twhile(digits.length <\
    \ base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "\tvar digits = x.toString(base).split(\"\
    \").reverse();\n\twhile(digits.length < base){\n\t\tdigits = digits.concat(new\
    \ Array(base - digits.length).fill(0));\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n    var b =\
    \ 0;\n    var i = 0;\n    var l = x.length;\n    var digit;\n    for(i = 0; i\
    \ < l; i++){\n        digit = String(x[i]).charAt(0);\n        switch(digit){\n\
    \            case '-':\n                sign = -1;\n                break;\n \
    \           case '+':\n                sign = 1;\n                break;\n   \
    \         case '.':\n                m *= 10;\n                break;\n      \
    \      case '0':\n                m *= b;\n                break;\n          \
    \  case '1':\n                m *= b;\n                break;\n            case\
    \ '2':\n                m *= b;\n                break;\n            case '3':\n\
    \                m *= b;\n                break;\n            case '4':\n    \
    \            m *= b;\n                break;\n            case '5':\n        \
    \        m *= b;\n                break;\n            case '6':\n            \
    \    m *= b;\n                break;\n            case '7':\n                m\
    \ *= b;\n                break;\n            case '8':\n                m *= b;\n\
    \                break;\n            case '9':\n                m *= b;\n    \
    \            break;\n            case 'a':\n                b = 2;\n         \
    \       break;\n            case 'b':\n                b = 3;\n              \
    \  break;\n            case 'c':\n                b = 4;\n                break;\n\
    \            case 'd':\n                b = 5;\n                break;\n     \
    \       case 'e':\n                b = 6;\n                break;\n          \
    \  case 'f':\n                b = 7;\n                break;\n            case\
    \ 'g':\n                b = 8;\n                break;\n            case 'h':\n\
    \                b = 9;\n                break;\n            case 'i':\n     \
    \           b = 10;\n                break;\n            case 'j':\n         \
    \       b = 11;\n                break;\n            case 'k':\n             \
    \   b = 12;\n                break;\n            case 'l':\n                b\
    \ = 13;\n                break;\n            case 'm':\n                b = 14;\n\
    \                break;\n            case 'n':\n                b = 15;\n    \
    \            break;\n            case 'o':\n                b = 16;\n        \
    \        break;\n            case 'p':\n                b = 17;\n            \
    \    break;\n            case 'q':\n                b = 18;\n                break;\n\
    \            case 'r':\n                b = 19;\n                break;\n    \
    \        case 's':\n                b = 20;\n                break;\n        \
    \    case 't':\n                b = 21;\n                break;\n            case\
    \ 'u':\n                b = 22;\n                break;\n            case 'v':\n\
    \                b = 23;\n                break;\n            case 'w':\n    \
    \            b = 24;\n                break;\n            case 'x':\n        \
    \        b = 25;\n                break;\n            case 'y':\n            \
    \    b = 26;\n                break;\n            case 'z':\n                b\
    \ = 27;\n                break;\n            case 'A':\n                b = 26;\n\
    \                break;\n            case 'B':\n                b = 27;\n    \
    \            break;\n            case 'C':\n                b = 28;\n        \
    \        break;\n            case 'D':\n                b = 29;\n            \
    \    break;\n            case 'E':\n                b = 30;\n                break;\n\
    \            case 'F':\n                b = 31;\n                break;\n    \
    \        case 'G':\n                b = 32;\n                break;\n        \
    \    case '", "\tvar res = \"\";\n\twhile(x != 0){\n\t\tres = base_digits[x %\
    \ base] + res;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn reverseString(res);\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n \
    \   while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m != 0){\n        r = m%10 + r;\n    }\n    if(r.length == 1){\n\
    \        r = \"0\" + r;\n    }\n    return sign*(r+\"\");\n}\n", "    var r =\
    \ \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n\
    \    }\n    while (x >= base){\n        r = base_digits[(x % base)];\n       \
    \ x = Math.floor(x / base);\n    }\n    r = base_digits[(x % base)];\n    while(x\
    \ < base){\n        r = base_digits[(x % base)] + (r != 0 ? r : \"\");\n     \
    \   x = Math.floor(x / base);\n    }\n    return sign * r;\n}\n", "\tvar r = \"\
    \";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if (x <\
    \ 0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    var base = base_table[base];\n    var max_len\
    \ = base.length;\n    var i;\n    for (i = 0; i < x_len; i++){\n        var c\
    \ = x_str.charAt(i);\n        var digit = base_table[c];\n        if (digit >\
    \ max_len)\n            digit = base_table[digit];\n        r += digit;\n    }\n\
    \    return sign + r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x;\n    }\n    else{\n        while (x\
    \ /= base){\n            r += String.fromCharCode(x % base);\n        }\n    }\n\
    \    return sign + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m\
    \ = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m =\
    \ 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n\
    \    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n  \
    \  var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var\
    \ digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits\
    \ = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits =\
    \ 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n\
    \    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n  \
    \  var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var\
    \ m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m\
    \ = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m =\
    \ 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n\
    \    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n  \
    \  var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var\
    \ digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits\
    \ = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits =\
    \ 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n\
    \    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n  \
    \  var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var\
    \ m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m\
    \ = 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m =\
    \ 1;\n    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n\
    \    var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n  \
    \  var digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var\
    \ digits = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits\
    \ = 1;\n    var m = 1;\n    var digits = 1;\n    var m = 1;\n    var digits =\
    \ 1;\n    var m = 1;\n    var digits = 1;\n", "\tvar y = \"\";\n\tvar bases =\
    \ [1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\tfor(var i=0; i<bases.length;\
    \ i++){\n\t\tvar b = bases[i];\n\t\tif(b == base){\n\t\t\ty += x;\n\t\t}else{\n\
    \t\t\ty += b * Math.pow(base,bases.length-i-1);\n\t\t}\n\t}\n\treturn y;\n}\n",
  "\tvar digits = x.toString().split('')\n\tvar new_digits = []\n\tfor(var i = 0;\
    \ i < digits.length; i++){\n\t\tnew_digits.push(digits[i] * base)\n\t}\n\treturn\
    \ new_digits.join('')\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar res = \"\"\
    ;\n\twhile(x != 0){\n\t\tres = base_table[base] + res;\n\t\tx = Math.floor(x /\
    \ base);\n\t}\n\treturn res;\n}\n", "    var r = \"\";\n    var sign = 1;\n  \
    \  if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    var base = base_table[base];\n    var digits\
    \ = 1;\n    while (digits < x_len){\n        digits = x_len-digits;\n        base\
    \ = base_table[base];\n    }\n    while (digits > 0){\n        r = x_str.charAt(digits)\
    \ + r;\n        digits--;\n    }\n    return sign*r;\n}\n", "\tvar res = \"\"\
    ;\n\twhile(x != 0){\n\t\tres = base_map[base] + res;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn res;\n}\n", "\tvar digits = x.toString().split('');\n\tvar new_digits\
    \ = [];\n\tfor(var i = 0; i < digits.length; i++){\n\t\tnew_digits.push(digits[i]\
    \ * Math.pow(base,digits.length-i-1));\n\t}\n\treturn new_digits.join('');\n}\n",
  "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m > 0){\n        r = m%10 + r + String(m%10);\n    }\n    if(base\
    \ == 2){\n        r = r + r + r + r + r;\n    }\n    r = r + r + r + r + r;\n\
    \    sign = (x < 0) ? -1 : 1;\n    if(r.length == 1){\n        r = \"0\" + r;\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var digits = \"\";\n\
    \    var sign = \"\";\n    var i;\n    var j;\n    \n    if(base < 2 || base >\
    \ 36){\n        console.log(\"Invalid base\");\n        return \"\";\n    }\n\
    \    \n    for(i = base; i >= 2; i--){\n        digits = digits+i;\n    }\n  \
    \  \n    for(i = digits.length - 1; i >= 0; i--){\n        j = parseInt(digits[i]);\n\
    \        \n        if(j >= x){\n            sign = \"-\";\n            j = j -\
    \ x;\n        }\n        \n        if(j > 0){\n            j = j + x;\n      \
    \  }\n        \n        if(j > 9){\n            j = j - 10;\n        }\n     \
    \   \n        r = r + j.toString() + sign;\n    }\n    \n    return r;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "    var r\
    \ = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x =\
    \ -x;\n    }\n    while (x >= base){\n        r = base_digits[x%base] + r;\n \
    \       x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "    var r =\
    \ \"\";\n    while(x != 0){\n        r = base_digits[x%base] + r;\n        x =\
    \ Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\
    \tvar bases_length = bases.length;\n\tvar new_base;\n\tvar i;\n\t\n\tfor(i = 0;\
    \ i < bases_length; i++){\n\t\tif(bases[i] == base){\n\t\t\tnew_base = bases[i+1];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(!new_base){\n\t\tnew_base = bases[0];\n\t}\n\
    \t\n\tx = Math.abs(x);\n\t\n\tif(x < Math.pow(10, base)){\n\t\treturn x;\n\t}\n\
    \t\n\tx = x / Math.pow(10, base);\n\t\n\treturn Math.round(x * new_base) / new_base;\n\
    }\n", "    var r = \"\";\n    var n = x;\n    var baseNum = base;\n    while(n\
    \ > 0){\n        r = base_digits[n%baseNum] + r;\n        n = Math.floor(n/baseNum);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var\
    \ digits = \"\";\n    var length = base.length;\n    var i;\n    for(i = 0; i\
    \ < length; i++){\n        digits = digits + x.charAt(i).toString(base);\n   \
    \ }\n    for(i = 0; i < length - 1; i++){\n        sign = sign + x.charAt(i).toString(base);\n\
    \    }\n    digits = digits + x.charAt(length - 1).toString(base);\n    for(i\
    \ = 0; i < digits.length; i++){\n        r = r + digits[i];\n    }\n    return\
    \ sign + r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if(x<0){\n  \
    \      sign = \"-\";\n        x = -x;\n    }\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign + r;\n}\n", "\t\
    var r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    if(x<0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str =\
    \ x.toString();\n    var x_len = x_str.length;\n    while(base>x_len){\n     \
    \   base -= x_len;\n        r += x_str.charAt(x_len) + sign;\n    }\n    while(base<x_len){\n\
    \        base += x_len;\n        r += sign + x_str.charAt(base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x != 0){\n        r = base_digits[x%base] + r;\n      \
    \  x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n \
    \   var negative = false;\n    if (x < 0){\n        negative = true;\n       \
    \ x = -x;\n    }\n    while (x > 0){\n        r = base_digits[x % base] + r;\n\
    \        x = Math.floor(x / base);\n    }\n    if (negative){\n        r = \"\
    -\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n  \
    \      r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    while (x != 0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ sign*r;\n}\n", "    var r = \"\";\n    var digits = \"\";\n    var sign = \"\
    \";\n    var i;\n    var j;\n    \n    for(i = base; i >= 0; i--){\n        digits\
    \ = digits+x;\n    }\n    \n    for(i = digits.length-1; i >= 0; i--){\n     \
    \   j = parseInt(digits[i]);\n        \n        if(j >= base){\n            digits[i]\
    \ = j-base;\n        }\n        else{\n            digits[i] = j;\n        }\n\
    \    }\n    \n    for(i = digits.length-1; i >= 0; i--){\n        j = parseInt(digits[i]);\n\
    \        \n        if(j < base){\n            sign = \"-\";\n        }\n     \
    \   else{\n            sign = \"\";\n        }\n        \n        r = r+sign+j;\n\
    \    }\n    \n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    var m = 1;\n    var digits = 1;\n    var i = 0;\n  \
    \  while(digits < base){\n        digits = digits * base;\n        i++;\n    }\n\
    \    while(digits > 0){\n        r = r.concat(String.fromCharCode(x % base));\n\
    \        x = Math.floor(x / base);\n        digits--;\n    }\n    if(sign == -1){\n\
    \        r = r.concat(\"1\");\n    }\n    return r;\n}\n", "    var r = \"\";\n\
    \    var sign = \"\";\n    var digits = \"\";\n    var basedigits = \"\";\n  \
    \  var base2 = base;\n    var base10 = 1;\n    var basepower = 0;\n    var digit;\n\
    \    var i;\n    for(i = 0; i < x.length; i++){\n        digit = x.charAt(i);\n\
    \        if(digit == \"-\"){\n            sign = \"-\";\n            digit = x.charAt(++i);\n\
    \        }\n        if(digit == \".\"){\n            digit = x.charAt(++i);\n\
    \            if(!digit){\n                throw(\"Bad number\");\n           \
    \ }\n            base10 *= base;\n            basepower += digit;\n        }\n\
    \        digits += digit;\n    }\n    for(i = 0; i < base; i++){\n        basedigits\
    \ += base;\n    }\n    for(i = 0; i < base2; i++){\n        basedigits += base2;\n\
    \    }\n    for(i = 0; i < base10; i++){\n        digit = basedigits.charAt(i);\n\
    \        if(digit == \"0\"){\n            r += digit;\n        }else{\n      \
    \      r += digit;\n        }\n    }\n    return sign + r;\n}\n", "    var r =\
    \ \"\";\n    var n = x;\n    while (n >= base){\n        r = base_digits[n%base]\
    \ + r;\n        n = Math.floor(n/base);\n    }\n    return base_digits[n] + r;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    while (x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "\t\
    var y = \"\";\n\twhile(x > 0){\n\t\ty = base_digits[x % base] + y;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn y;\n}\n", "    var r = \"\";\n    var sign = 1;\n  \
    \  if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    if (base < 2 ||\
    \ base > 36){\n        console.log(\"Base must be between 2 and 36\");\n     \
    \   return \"\";\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x = x % base;\n        base = base * 10;\n    }\n    r = base_digits[base]\
    \ + r;\n    x = x + sign;\n    return r;\n}\n", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x / base);\n\
    \    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar digits = x.toString(base).split(\"\
    \"), \n\t\tbase = base.toString();\n\t\n\tfor(var i = 0; i < digits.length; i++){\n\
    \t\tif(digits[i] === \"0\"){\n\t\t\tdigits[i] = \"1\";\n\t\t}\n\t\telse{\n\t\t\
    \tdigits[i] = \"0\";\n\t\t}\n\t}\n\t\n\treturn digits.join(\"\");\n}\n", "   \
    \ var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n    \
    \    x = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    var baseStr = base.toString();\n    var baseStr_len = baseStr.length;\n \
    \   if (x_len < baseStr_len){\n        r = x_str.substr(x_len - baseStr_len) +\
    \ baseStr;\n    }\n    else{\n        r = x_str.substr(x_len - baseStr_len) +\
    \ baseStr.substr(0, baseStr_len);\n    }\n    return sign*parseInt(r, base);\n\
    }\n", "    var r = \"\";\n    var s = x.toString();\n    var m = s.length;\n \
    \   var n = base;\n    var k = 0;\n    while(k<m){\n        var m = s.charAt(k);\n\
    \        var digit = parseInt(m);\n        if(digit>=base){\n            digit\
    \ = digit-base;\n        }\n        r += digit;\n        k++;\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var m = 1;\n    var\
    \ i = 0;\n    while(i < x.length){\n        if(x.charAt(i) == \"-\"){\n      \
    \      sign = \"-\";\n            i++;\n        }\n        else if(x.charAt(i)\
    \ == \"0\"){\n            i++;\n        }\n        else{\n            while(x.charAt(i)\
    \ < \"0\" || x.charAt(i) > \"9\"){\n                i++;\n            }\n    \
    \        m = Math.pow(base,i);\n            r = r + sign + m.toString(base);\n\
    \            sign = \"+\";\n            i++;\n        }\n    }\n    return r;\n\
    }\n", "\tvar bases = [2,7,10,16];\n\tvar base;\n\tfor(var i=0; i<bases.length;\
    \ i++){\n\t\tbase = bases[i];\n\t\tif(base*base <= x){\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn bases[bases.indexOf(base)+1];\n}\n", "\tvar r = \"\";\n\tvar baseNum\
    \ = base;\n\tvar baseStr = \"\";\n\tvar i;\n\tfor(i = baseNum; i >= 0; i--){\n\
    \t\tbaseStr = baseNum % base;\n\t\tr = r + baseStr;\n\t\tbaseNum = baseNum / base;\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var num = Math.abs(x);\n    var\
    \ digits = Math.log(num) / Math.log(base);\n    var rem = num % base;\n    var\
    \ div;\n    while(digits >= 0){\n        div = Math.pow(base,digits);\n      \
    \  r += div.toString(base);\n        digits -= div.length;\n    }\n    if(rem)\n\
    \        r += rem.toString(base);\n    return r;\n}\n", "    var r = \"\";\n \
    \   var sign = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n      \
    \  r = m%10 + r + String(m%10);\n        m = Math.floor(m*10/10);\n    }\n   \
    \ if(m){\n        r = m%10 + r + String(m%10);\n    }\n    if(r.length == 1){\n\
    \        r = \"0\" + r;\n    }\n    return sign*(r+\"\");\n}\n", "\tvar digits\
    \ = x.toString(base).split(\"\");\n\tfor(var i = 0; i < digits.length; i++){\n\
    \t\tdigits[i] = parseInt(digits[i], base);\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "\tvar res = \"\";\n\twhile(x>0){\n\t\tres = base_digits[x%base] +\
    \ res;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn reverseString(res);\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m != 0){\n        r = m%10 + r + String(m%10);\n    }\n    if(r.length\
    \ == 1){\n        r = \"0\" + r;\n    }\n    return sign*(r+\"\");\n}\n", "  \
    \  var r = \"\";\n    var sign = \"\";\n    var digits = \"\";\n    var i = 0;\n\
    \    while(i < x.length){\n        var c = x.charAt(i);\n        if(c >= \"0\"\
    \ && c <= \"9\"){\n            digits = digits + c;\n        }\n        else if(c\
    \ >= \"a\" && c <= \"z\"){\n            digits = digits + c.toLowerCase();\n \
    \       }\n        else if(c >= \"A\" && c <= \"Z\"){\n            digits = digits\
    \ + c.toUpperCase();\n        }\n        else{\n            sign = sign + c;\n\
    \        }\n        i++;\n    }\n    digits = digits.split(\"\");\n    base =\
    \ base.split(\"\");\n    for(i = 0; i < digits.length; i++){\n        base = base.reduce(function(p,\
    \ c){\n            return p * base[c];\n        }, 1);\n    }\n    for(i = 0;\
    \ i < base.length; i++){\n        r = r + digits[i] * base[i];\n    }\n    return\
    \ sign + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m > 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n\
    \    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n    }\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    while(x >= base){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return base_digits[x] + r;\n\
    }\n", "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n\
    \    var m = Math.abs(x);\n    var b = Math.abs(base);\n    var y = Math.pow(10,\
    \ b);\n    var x = Math.pow(10, m);\n    var d = Math.round(x);\n    var e = Math.round(b);\n\
    \    var f = Math.round(x);\n    var g = Math.round(x);\n    var h = 0;\n    var\
    \ i = 1;\n    while(i < e){\n        g = g * 10;\n        h++;\n        i++;\n\
    \    }\n    while(i < e){\n        f = f * 10;\n        h++;\n        i++;\n \
    \   }\n    while(i < e){\n        d = d * 10;\n        h++;\n        i++;\n  \
    \  }\n    while(i < e){\n        g = g / 10;\n        h++;\n        i++;\n   \
    \ }\n    while(i < e){\n        f = f / 10;\n        h++;\n        i++;\n    }\n\
    \    while(i < e){\n        d = d / 10;\n        h++;\n        i++;\n    }\n \
    \   while(i < e){\n        g = g + x;\n        h++;\n        i++;\n    }\n   \
    \ while(i < e){\n        f = f + x;\n        h++;\n        i++;\n    }\n    while(i\
    \ < e){\n        d = d + x;\n        h++;\n        i++;\n    }\n    while(i <\
    \ e){\n        g = g + base;\n        h++;\n        i++;\n    }\n    while(i <\
    \ e){\n        f = f + base;\n        h++;\n        i++;\n    }\n    while(i <\
    \ e){\n        d = d + base;\n        h++;\n        i++;\n    }\n    while(i <\
    \ e){\n        g = g + y;\n        h++;\n        i++;\n    }\n    while(i < e){\n\
    \        f = f + y;\n        h++;\n        i++;\n    }\n    while(i < e){\n  \
    \      d = d + y;\n        h++;\n        i++;\n    }\n    while(i < e){\n    \
    \    g = g + m;\n        h++;\n        i++;\n    }\n    while(i < e){\n      \
    \  f = f + m;\n        h++;\n        i++;\n    }\n    while(i < e){\n        d\
    \ = d + m;\n        h++;\n        i++;\n    }\n    while(i < e){\n        g =\
    \ g + sign;\n        h++;\n        i++;\n    }\n    while(i < e){\n        f =\
    \ f + sign;\n        h++;\n        i++;\n    }\n    while(i < e){\n        d =\
    \ d + sign;\n        h++;\n        i++;\n    }\n    while(i < e){\n        g =\
    \ g + h;", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len\
    \ = x_str.length;\n    if (x_len < base){\n        r = x_str;\n    }\n    else{\n\
    \        var x_div = Math.pow(base, x_len);\n        var x_rem = x_div % base;\n\
    \        var x_quo = x_div / base;\n        var x_rem_str = x_rem.toString();\n\
    \        var x_rem_len = x_rem_str.length;\n        if (x_len > base){\n     \
    \       r = x_quo + x_rem_str.substring(x_rem_len - base) + x_str;\n        }\n\
    \        else{\n            r = x_quo + x_str;\n        }\n    }\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    if (x_len < base){\n        r = x_str;\n    }else{\n        var x_str = x_str.split(\"\
    \");\n        var x_len = x_str.length;\n        var base_size = base;\n     \
    \   var base_str = base.toString();\n        var base_len = base_str.length;\n\
    \        if (x_len > base){\n            base_len = base;\n        }\n       \
    \ var i = x_len - base_len;\n        while (i--){\n            var c = parseInt(x_str[i]);\n\
    \            var n = parseInt(base_str[i]);\n            var d = c + n;\n    \
    \        if (d > base){\n                var s = 1;\n                while (d\
    \ > base){\n                    d = Math.floor(d / base);\n                  \
    \  s = s * base;\n                }\n                d = d;\n                c\
    \ = c + s;\n            }\n            r = r + d.toString();\n        }\n    }\n\
    \    r = sign * r;\n    return r;\n}\n", "    var r = \"\";\n    var sign = \"\
    \";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign + r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n\
    \    var m = Math.pow(base,x);\n    if(x < 0){\n        sign = \"-\";\n      \
    \  x = Math.abs(x);\n    }\n    while(x > 0){\n        r = m%base + r;\n     \
    \   x = Math.floor(x/base);\n        m = Math.floor(m/base);\n    }\n    return\
    \ sign + r;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
