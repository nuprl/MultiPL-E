name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["\tvar res = \"\";\n\twhile(x != 0){\n\t\tres = base_table[base] + res;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn res;\n}\n", "    var r = \"\";\n\
    \    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString().split('');\n\tdigits\
    \ = digits.map(function(d){\n\t\treturn parseInt(d, base);\n\t});\n\tdigits.reverse();\n\
    \treturn digits.join('');\n}\n", "    var r = \"\";\n    var sign = 1;\n    var\
    \ m = 1;\n    var digits = 1;\n    var i = base;\n    while(digits > 0){\n   \
    \     digits = digits / base;\n        i++;\n    }\n    while(x > 0){\n      \
    \  r = base_digits[x % base] + r;\n        x = x / base;\n    }\n    if(sign ==\
    \ -1){\n        r = base_digits[x % base] + r;\n    }\n    return r;\n}\n", "\t\
    var r = \"\";\n\tvar num = Math.abs(x);\n\tvar bnum = Math.abs(base);\n\tvar rem;\n\
    \n\twhile(num > 0){\n\t\trem = num % base;\n\t\tnum = Math.floor(num / base);\n\
    \t\tr = bnum > 10 ? r.concat(rem.toString()) : r.concat(rem.toString() + bnum.toString());\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    if (x <\
    \ 0){\n        sign = \"-\";\n        x = -x;\n    }\n    if (x === 0) return\
    \ \"0\";\n    while (x !== 0){\n        r = base_digits[x % base] + r;\n     \
    \   x = Math.floor(x / base);\n    }\n    return sign + r;\n}\n", "\tvar r = \"\
    \";\n\tvar n = x;\n\twhile (n > 0){\n\t\tr = base_digits[n%base] + r;\n\t\tn =\
    \ Math.floor(n/base);\n\t}\n\treturn r;\n}\n", "\tvar y = \"\";\n\tvar bases =\
    \ [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\tvar bases_length\
    \ = bases.length;\n\tvar bases_index = bases_length - 1;\n\tvar bases_value =\
    \ bases[bases_index];\n\twhile(x >= bases_value){\n\t\ty += bases_value;\n\t\t\
    x -= bases_value;\n\t\tbases_index--;\n\t\tbases_value = bases[bases_index];\n\
    \t}\n\ty += bases[x];\n\treturn y;\n}\n", "\tvar res = \"\";\n\twhile(x > 0){\n\
    \t\tres = base_digits[x % base] + res;\n\t\tx = Math.floor(x / base);\n\t}\n\t\
    return reverseString(res);\n}\n", "\tvar str = x.toString(base);\n\tvar res =\
    \ \"\";\n\twhile(str.length < base){\n\t\tstr = \"0\" + str;\n\t}\n\twhile(str.length\
    \ > base){\n\t\tstr = str.substring(1);\n\t}\n\treturn str;\n}\n", "\tvar r =\
    \ \"\";\n\twhile(x>0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var num = Math.abs(x);\n\
    \    var bnum = Math.abs(base);\n    var sign = num < 0 ? \"-\" : \"\";\n    var\
    \ basesign = base<0 ? \"-\" : \"\";\n    var digits = Math.ceil(Math.log(bnum)/Math.log(10));\n\
    \    var rem = bnum%Math.pow(10,digits);\n    var div = Math.pow(10,digits);\n\
    \    var rem = rem < 0 ? 0 : rem;\n    var rnum = Math.floor(num/div);\n    var\
    \ rbase = Math.floor(bnum/div);\n    var rsign = rem < 0 ? \"-\" : \"\";\n   \
    \ while(rnum<10){\n        rnum = \"0\" + rnum;\n    }\n    while(rbase<10){\n\
    \        rbase = \"0\" + rbase;\n    }\n    rnum = rsign + rnum;\n    rbase =\
    \ rsign + rbase;\n    while(rnum.length < digits){\n        rnum = \"0\" + rnum;\n\
    \    }\n    while(rbase.length < digits){\n        rbase = \"0\" + rbase;\n  \
    \  }\n    r = rnum + rbase;\n    return sign + r;\n}\n", "    var r = \"\";\n\
    \    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x;\n    }\n    else {\n        var tmp\
    \ = base;\n        base = x;\n        x = tmp;\n    }\n    while (x > 0) {\n \
    \       var remainder = x % base;\n        x = x / base;\n        r = remainder\
    \ + r;\n    }\n    return sign + r;\n}\n", "\tvar y = \"\";\n\twhile(x != 0){\n\
    \t\tvar m = x % base;\n\t\ty = base * y + m;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn y;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var negative = x < 0;\n    if (negative){\n        x = -x;\n    }\n   \
    \ while (x != 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x\
    \ / base);\n    }\n    if (negative){\n        r = base_digits[base] + r;\n  \
    \  }\n    return r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m =\
    \ 1;\n    var sign = 1;\n    var m = Math.abs(x);\n    var base = Math.abs(base);\n\
    \    while(m >= base){\n        m /= base;\n        s += '0';\n    }\n    while(m\
    \ > 0){\n        m /= base;\n        s += '0';\n    }\n    while(s.length < base){\n\
    \        s = '0' + s;\n    }\n    while(s.length < base){\n        s = '0' + s;\n\
    \    }\n    return sign * s;\n}\n", "    var r = \"\";\n    var s = \"\";\n  \
    \  var m = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n    var b = 0;\n \
    \   var i = 0;\n    while(m >= base){\n        s = Math.floor(m/base);\n     \
    \   r = m%base;\n        m = Math.floor((m-s)*base);\n        i++;\n    }\n  \
    \  while(m > 0){\n        s = Math.floor(m/base);\n        r = m%base;\n     \
    \   m = Math.floor((m-s)*base);\n        b++;\n    }\n    switch(i){\n       \
    \ case 0:\n            sign = -1;\n            break;\n        case 1:\n     \
    \       sign = 1;\n            break;\n    }\n    switch(b){\n        case 0:\n\
    \            sign = -1;\n            break;\n        case 1:\n            sign\
    \ = 1;\n            break;\n    }\n    r = sign*r;\n    return r;\n}\n", "   \
    \ var r = \"\";\n    var s = x.toString();\n    var l = s.length;\n    for(var\
    \ i = 0; i < l; i++){\n        var c = s.charAt(i);\n        var n = parseInt(c,\
    \ base);\n        if(n){\n            r = r + numerals[n];\n        }\n    }\n\
    \    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
