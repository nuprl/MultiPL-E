name: HumanEval_116_sort_array
language: js
results:
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var sorted = [];\n    var i, j, k;\n    for(i = 0; i < len; i++){\n        sorted[i]\
    \ = 0;\n    }\n    for(i = 0; i < len; i++){\n        for(j = i + 1; j < len;\
    \ j++){\n            if(arr[i] > arr[j]){\n                k = arr[i];\n     \
    \           arr[i] = arr[j];\n                arr[j] = k;\n            }\n   \
    \     }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpz_2ityls.js:35:10)\n    at Object.<anonymous> (/tmp/tmpz_2ityls.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var swapped;\n    var sorted;\n    var i;\n    var j;\n    var temp;\n    var\
    \ swap;\n    var swapped;\n    var temp;\n    var swap;\n    var temp;\n    var\
    \ swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n\
    \    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n \
    \   var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n  \
    \  var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n   \
    \ var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var\
    \ swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n\
    \    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n \
    \   var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n  \
    \  var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n   \
    \ var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var\
    \ swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n\
    \    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n \
    \   var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n  \
    \  var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n   \
    \ var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var\
    \ swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n\
    \    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n \
    \   var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n  \
    \  var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n   \
    \ var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var\
    \ swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n    var temp;\n\
    \    var swap;\n    var temp;\n    var swap;\n    var temp;\n    var swap;\n \
    \   var temp;\n    var swap\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwam48b2r.js:155\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var len = arr.length;\n  if(len\
    \ < 2){\n    return arr;\n  }\n  var ones = count_ones(arr);\n  var sorted_arr\
    \ = [];\n  var i = 0;\n  var j = 0;\n  while(i < len){\n    if(ones[i] > 0){\n\
    \      sorted_arr.push(arr[j]);\n      i++;\n      j++;\n    }else{\n      j++;\n\
    \    }\n  }\n  while(j < len){\n    sorted_arr.push(arr[j]);\n    j++;\n  }\n\
    \  return sorted_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpad7ye0pu.js:16\n  var ones = count_ones(arr);\n             ^\n\
    \nReferenceError: count_ones is not defined\n    at sort_array (/tmp/tmpad7ye0pu.js:16:14)\n\
    \    at test (/tmp/tmpad7ye0pu.js:41:20)\n    at Object.<anonymous> (/tmp/tmpad7ye0pu.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var max = 0;\n    var min = 0;\n    var mid = 0;\n    var temp = 0;\n    var\
    \ swap = 0;\n    var i = 0;\n    for(i = 0; i < len; i++){\n        max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n        mid = Math.floor((max\
    \ + min) / 2);\n        if(arr[i] > mid){\n            temp = arr[i];\n      \
    \      arr[i] = arr[mid];\n            arr[mid] = temp;\n            swap++;\n\
    \        }\n    }\n    for(i = 0; i < len; i++){\n        max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n        mid = Math.floor((max\
    \ + min) / 2);\n        if(arr[i] == arr[mid]){\n            temp = arr[i];\n\
    \            arr[i] = arr[mid];\n            arr[mid] = temp;\n            swap++;\n\
    \        }\n    }\n    for(i = 0; i < len; i++){\n        max = Math.max(max,\
    \ arr[i]);\n        min = Math.min(min, arr[i]);\n        mid = Math.floor((max\
    \ + min) / 2);\n        if(arr[i] > arr[mid]){\n            temp = arr[i];\n \
    \           arr[i] = arr[mid];\n            arr[mid] = temp;\n            swap++;\n\
    \        }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  5,\n  4,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpx0pol_c5.js:60:10)\n    at Object.<anonymous> (/tmp/tmpx0pol_c5.js:70:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 5,\
    \ 4, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ if(len < 1) return arr;\n    var max = 0;\n    var min = 0;\n    var mid = 0;\n\
    \    var tmp;\n    var swap;\n    var i;\n    for(i = 0; i < len; i++){\n    \
    \    tmp = arr[i];\n        max = tmp > max ? tmp : max;\n        min = tmp <\
    \ min ? tmp : min;\n        mid = tmp > min ? i : i+1;\n        swap = arr[mid];\n\
    \        arr[mid] = arr[max];\n        arr[max] = swap;\n    }\n    for(i = 0;\
    \ i < len; i++){\n        tmp = arr[i];\n        arr[max] = tmp > max ? tmp :\
    \ max;\n        arr[min] = tmp < min ? tmp : min;\n    }\n    return arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpepjrsq_o.js:42:10)\n    at Object.<anonymous> (/tmp/tmpepjrsq_o.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var max = 0;\n    var min = 0;\n    var mid = 0;\n    var swap;\n    var i;\n\
    \n    for(i = 0; i < len; i++){\n        max = Math.max(max, arr[i]);\n      \
    \  min = Math.min(min, arr[i]);\n    }\n\n    for(i = 0; i < len; i++){\n    \
    \    mid = max - ((max - min) / 2);\n        if(arr[mid] > arr[i]){\n        \
    \    swap = arr[mid];\n            arr[mid] = arr[i];\n            arr[i] = swap;\n\
    \        }\n    }\n\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpcljdpf7u.js:41:10)\n    at Object.<anonymous> (/tmp/tmpcljdpf7u.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var swapped;\n    var sorted;\n    var i;\n    var j;\n    \n    sorted = [];\n\
    \    \n    for(i = 0; i < len; i++){\n        swapped = false;\n        for(j\
    \ = 0; j < len; j++){\n            if(arr[j] > arr[j + 1]){\n                swap(arr,\
    \ j, j + 1);\n                swapped = true;\n            }\n        }\n    \
    \    if(!swapped){\n            sorted.push(arr[i]);\n        }\n    }\n    \n\
    \    return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpok9xorug.js:24\n                swap(arr, j, j + 1);\n        \
    \        ^\n\nReferenceError: swap is not defined\n    at sort_array (/tmp/tmpok9xorug.js:24:17)\n\
    \    at test (/tmp/tmpok9xorug.js:41:20)\n    at Object.<anonymous> (/tmp/tmpok9xorug.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ for(var i=0; i<len; i++){\n        var num = arr[i];\n        for(var j=0; j<len;\
    \ j++){\n            if(num == arr[j]){\n                arr.splice(j,1);\n  \
    \              len--;\n            }\n        }\n    }\n    arr.sort(function(a,b){\n\
    \        var aNum = parseInt(a, 2);\n        var bNum = parseInt(b, 2);\n    \
    \    if(aNum == bNum){\n            return 0;\n        }\n        if(aNum > bNum){\n\
    \            return 1;\n        }\n        return -1;\n    });\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test\
    \ (/tmp/tmp_apuq7v8.js:41:10)\n    at Object.<anonymous> (/tmp/tmp_apuq7v8.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5 ],\n\
    \  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var len = arr.length;\n  if(len\
    \ < 2){\n    return arr;\n  }\n  \n  var ones = count_ones(arr);\n  var len =\
    \ ones.length;\n  if(len === 0){\n    return arr;\n  }\n  \n  var maxOnes = Math.pow(2,len-1);\n\
    \  \n  var maxLen = Math.floor(maxOnes/ones);\n  \n  var result = [];\n  \n  for(var\
    \ i=0;i<len;i++){\n    var num = arr[i];\n    var index = num;\n    \n    while(index\
    \ > 0){\n      index = index & (index-1);\n      result.push(num);\n    }\n  }\n\
    \  \n  for(var i=0;i<maxLen;i++){\n    var index = i;\n    \n    while(index >\
    \ 0){\n      index = index & (index-1);\n      result.push(result[index]);\n \
    \   }\n  }\n  \n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp136epja9.js:17\n  var ones = count_ones(arr);\n             ^\n\
    \nReferenceError: count_ones is not defined\n    at sort_array (/tmp/tmp136epja9.js:17:14)\n\
    \    at test (/tmp/tmp136epja9.js:56:20)\n    at Object.<anonymous> (/tmp/tmp136epja9.js:66:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    arr.sort(function(a, b){\n\
    \        var c = a.toString(2);\n        var d = b.toString(2);\n        var e\
    \ = (d.length - c.length) / 2;\n        var f = parseInt(d.substr(0, e), 2);\n\
    \        var g = parseInt(c.substr(0, e), 2);\n        var h = (f + g) / 2;\n\
    \        var i = parseInt(d.substr(e), 2);\n        var j = parseInt(c.substr(e),\
    \ 2);\n        var k = parseInt(a.toString(2), 2);\n        var l = (k + j) /\
    \ 2;\n        var m = parseInt(b.toString(2), 2);\n        var n = (m + l) / 2;\n\
    \        var o = (k + n) / 2;\n        var p = parseInt(a.toString(2), 2);\n \
    \       var q = (p + o) / 2;\n        var r = (q + l) / 2;\n        var s = (k\
    \ + r) / 2;\n        var t = parseInt(b.toString(2), 2);\n        var u = (s +\
    \ t) / 2;\n        var v = (u + m) / 2;\n        var w = (v + n) / 2;\n      \
    \  var x = (w + o) / 2;\n        var y = (x + l) / 2;\n        var z = (y + r)\
    \ / 2;\n        var A = parseInt(a.toString(2), 2);\n        var B = parseInt(b.toString(2),\
    \ 2);\n        var C = (A + B) / 2;\n        var D = (C + D) / 2;\n        var\
    \ E = (A + D) / 2;\n        var F = (E + F) / 2;\n        var G = (A + F) / 2;\n\
    \        var H = (G + H) / 2;\n        var I = (H + I) / 2;\n        var J = (A\
    \ + I) / 2;\n        var K = (J + K) / 2;\n        var L = (K + L) / 2;\n    \
    \    var M = (L + M) / 2;\n        var N = (M + N) / 2;\n        var O = (N +\
    \ O) / 2;\n        var P = (O + P) / 2;\n        var Q = (P + Q) / 2;\n      \
    \  var R = (Q + R) / 2;\n        var S = (R + S) / 2;\n        var T = (S + T)\
    \ / 2;\n        var U = (T + U) / 2;\n        var V = (U + V) / 2;\n        var\
    \ W = (V + W) / 2;\n        var X = (W + X) / 2;\n        var Y = (X + Y) / 2;\n\
    \        var Z = (Y + Z) / 2;\n        var a = parseInt(a.toString(2), 2);\n \
    \       var b = parseInt(b.toString(2), 2);\n        var c = parseInt(c.toString(2),\
    \ 2);\n        var d = parseInt(d.toString(2), 2);\n        var e = parseInt(e.toString(2),\
    \ 2);\n        var f = parseInt(f.toString(2), 2);\n        var g = parseInt(g.toString(2),\
    \ 2);\n        var h = parseInt(h.toString(2), 2);\n        var i = parseInt(i.toString(2),\
    \ 2);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyxssvsx9.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ if(len < 2){\n        return arr;\n    }\n    var ones = count_ones(arr);\n\
    \    var len = ones.length;\n    var max = 0;\n    var min = 0;\n    for(var i\
    \ = 0; i < len; i++){\n        var cur = arr[i];\n        if(cur > max){\n   \
    \         max = cur;\n        }\n        if(cur < min){\n            min = cur;\n\
    \        }\n    }\n    var diff = max - min;\n    var result = [];\n    for(var\
    \ i = 0; i < len; i++){\n        var cur = arr[i];\n        var index = cur -\
    \ min;\n        var diff = cur - min;\n        if(diff > 0){\n            result.push(index);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a - b;\n  \
    \  });\n    for(var i = 0; i < len; i++){\n        var cur = arr[i];\n       \
    \ var index = cur - min;\n        var diff = cur - min;\n        if(diff > 0){\n\
    \            result.push(index);\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptec089mg.js:16\n    var ones = count_ones(arr);\n             \
    \  ^\n\nReferenceError: count_ones is not defined\n    at sort_array (/tmp/tmptec089mg.js:16:16)\n\
    \    at test (/tmp/tmptec089mg.js:58:20)\n    at Object.<anonymous> (/tmp/tmptec089mg.js:68:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ if(len < 2){\n        return arr;\n    }\n    var ones = count_ones(arr);\n\
    \    var len = ones.length;\n    var max = 0;\n    for(var i=0; i<len; i++){\n\
    \        if(ones[i] > max){\n            max = ones[i];\n        }\n    }\n  \
    \  for(var i=0; i<len; i++){\n        arr[i] = arr[i]/max;\n    }\n    arr.sort(function(a,\
    \ b){\n        return a-b;\n    });\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptd2b1ily.js:16\n    var ones = count_ones(arr);\n             \
    \  ^\n\nReferenceError: count_ones is not defined\n    at sort_array (/tmp/tmptd2b1ily.js:16:16)\n\
    \    at test (/tmp/tmptd2b1ily.js:38:20)\n    at Object.<anonymous> (/tmp/tmptd2b1ily.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var sorted = [];\n    var i, j, k;\n    for(i = 0; i < len; i++){\n        for(j\
    \ = i+1; j < len; j++){\n            k = arr[i]*arr[j];\n            if(k !==\
    \ 0){\n                sorted.push(k);\n            }\n        }\n    }\n    sorted.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    return sorted;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5,\n  6,\n  8,\n  10,\n  12,\n  15,\n  20\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp_m9qdidn.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_m9qdidn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \  3,  4,  5,  6,\n    8, 10, 12, 15, 20\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ for(var i=0; i<len; i++){\n        for(var j=0; j<len; j++){\n            if(arr[i]>arr[j]){\n\
    \                var temp = arr[i];\n                arr[i] = arr[j];\n      \
    \          arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpvvnit_7n.js:30:10)\n    at Object.<anonymous> (/tmp/tmpvvnit_7n.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  if(arr.length == 0) return arr;\n\
    \  var len = arr.length;\n  var sorted = new Array(len);\n  var cnt = 0;\n  for(var\
    \ i=0; i<len; i++){\n    cnt = 0;\n    for(var j=0; j<len; j++){\n      if((arr[j]\
    \ & 1) == 1){\n        cnt++;\n      }\n    }\n    sorted[i] = cnt;\n  }\n  cnt\
    \ = arr.length;\n  for(var i=0; i<len; i++){\n    cnt = 0;\n    for(var j=0; j<len;\
    \ j++){\n      if((arr[j] & 1) == 1){\n        cnt++;\n      }\n    }\n    sorted[i]\
    \ = cnt;\n  }\n  for(var i=0; i<len; i++){\n    sorted[i] = arr.length - sorted[i];\n\
    \  }\n  return sorted;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  2,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpqa9fooct.js:46:10)\n    at Object.<anonymous> (/tmp/tmpqa9fooct.js:56:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 2,\
    \ 2, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    arr.sort(function(a, b){\n\
    \        var c = a.toString(2).split('').reverse().join('');\n        var d =\
    \ b.toString(2).split('').reverse().join('');\n        var ones = c.split('').reduce(function(acc,\
    \ cur){\n            return acc + parseInt(cur);\n        }, 0);\n        var\
    \ tens = d.split('').reduce(function(acc, cur){\n            return acc + parseInt(cur);\n\
    \        }, 0);\n        return ones - tens;\n    });\n    return arr;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Your solution works perfectly for me.\
    \ I am just wondering why you used `reduce` instead of `forEach`?\n<|/ c |>\n\
    <| c |>\n`reduce` will return the accumulator value after each iteration. `forEach`\
    \ will return the accumulator value only after the whole array is iterated. `reduce`\
    \ will also return `undefined` if the array is empty.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation. I understand now.\n<|/ c |>\n<| a tags=arrays,sorting,javascript\
    \ |>\n<code>\nvar arr = [1, 5, 2, 3, 4];\nvar sorted = arr.sort(function(a, b)\
    \ {\n    return a.toString(2).split('').reduce(function(acc, cur) {\n        return\
    \ acc + parseInt(cur);\n    }, 0) - b.toString(2).split('').reduce(function(acc,\
    \ cur) {\n        return acc + parseInt(cur);\n    }, 0);\n});\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3f3kruw8.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ for(var i=0; i<len; i++){\n        for(var j=0; j<len; j++){\n            if(arr[j]\
    \ < arr[j+1]){\n                var temp = arr[j];\n                arr[j] = arr[j+1];\n\
    \                arr[j+1] = temp;\n            }\n        }\n    }\n    return\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpo6a9o56f.js:30:10)\n    at Object.<anonymous> (/tmp/tmpo6a9o56f.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var sorted = new Array(len);\n    var i, j, k;\n    for(i = 0; i < len; i++){\n\
    \        sorted[i] = arr[i];\n    }\n    for(i = len - 1; i >= 0; i--){\n    \
    \    for(j = i - 1; j >= 0; j--){\n            k = j + 1;\n            while(k\
    \ <= len && sorted[k - 1] > sorted[k]){\n                sorted[k] = sorted[k\
    \ - 1];\n                k++;\n            }\n            sorted[k] = arr[j];\n\
    \        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  5,\n  2,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmppe3psup8.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppe3psup8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 5,\
    \ 2, 5, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    var len = arr.length;\n   \
    \ var ret = [];\n    var i, j, k;\n    for(i = 0; i < len; i++){\n        for(j\
    \ = i + 1; j < len; j++){\n            k = j;\n            while(arr[k] && arr[k]\
    \ == arr[j]){\n                k++;\n            }\n            if(arr[k]){\n\
    \                ret.push(arr[i]);\n                ret.push(arr[j]);\n      \
    \          ret.push(arr[k]);\n            }\n        }\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  1,\n  2,\n  3,\n  1,\n  3,\n  4,\n  5,\n  2,\n  3,\n  5,\n  3,\n  4,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpvgjicny8.js:36:10)\n    at Object.<anonymous> (/tmp/tmpvgjicny8.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 5, 2, 1, 2, 3, 1,\n    3, 4, 5, 2, 3, 5, 3,\n    4, 2, 3, 4\n  ],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    arr.sort(function(a, b){\n\
    \        var a_bin = bin(a);\n        var b_bin = bin(b);\n        var a_ones\
    \ = a_bin.split('').filter(function(x){return x==='1';});\n        var b_ones\
    \ = b_bin.split('').filter(function(x){return x==='1';});\n        var a_ones_count\
    \ = a_ones.length;\n        var b_ones_count = b_ones.length;\n        if(a_ones_count\
    \ < b_ones_count){\n            return -1;\n        }else if(a_ones_count > b_ones_count){\n\
    \            return 1;\n        }else{\n            return a_ones_count - b_ones_count;\n\
    \        }\n    });\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph5ydeg95.js:13\n        var a_bin = bin(a);\n                 \
    \   ^\n\nReferenceError: bin is not defined\n    at /tmp/tmph5ydeg95.js:13:21\n\
    \    at Array.sort (<anonymous>)\n    at sort_array (/tmp/tmph5ydeg95.js:12:9)\n\
    \    at test (/tmp/tmph5ydeg95.js:34:20)\n    at Object.<anonymous> (/tmp/tmph5ydeg95.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
