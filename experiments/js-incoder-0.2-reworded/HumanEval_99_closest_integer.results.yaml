language: js
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvbvrn5_6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(value/Math.abs(value)) * Math.abs(value);\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp4wvahf_9.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4wvahf_9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp494ypqx5.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpximljogi.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw4wy8pj8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = Math.abs(parseInt(value));\n    for(var i\
    \ = 0; i<values.length; i++){\n        var distance = Math.abs(parseInt(values[i]));\n\
    \        if(closestDistance > distance){\n            closestDistance = distance;\n\
    \            closest = values[i];\n        }\n    }\n    return closest;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppmd1o94n.js:17\n    for(var i = 0; i<values.length; i++){\n   \
    \                  ^\n\nReferenceError: values is not defined\n    at closest_integer\
    \ (/tmp/tmppmd1o94n.js:17:22)\n    at test (/tmp/tmppmd1o94n.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmppmd1o94n.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy_kf_g1j.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpy_kf_g1j.js:15:20)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < 0.5){\n    return closest_integer;\n  } else {\n    return\
    \ closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp9cfnqutb.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9cfnqutb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxu0j0vyq.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpds9ifgni.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxIndex = null;\n  var diffAbsMaxAbs = null;\n  var diffAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbs = null;\n  var diffAbsMaxAbsIndexAbsMax\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n \
    \ var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppeugvrf6.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb27b4a6k.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptnh7lt5a.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptck5734p.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqdfuxqqf.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (Math.abs(value - closest) < 0.0000001) {\n    return\
    \ closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpou1e3yx9.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpou1e3yx9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprs5_cwkp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff < 0.5){\n\
    \    return closest;\n  }\n  else{\n    return closest - 1;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpnct9ez79.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnct9ez79.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  return difference < 0.0000000001\
    \ ? value : value - difference;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5bbkhc9d.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp5bbkhc9d.js:15:20)\n    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n\
    \    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n    at closest_integer (/tmp/tmp5bbkhc9d.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff > 0.5){\n\
    \    closest = Math.ceil(closest);\n  }else{\n    closest = Math.floor(closest);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpvgu83zep.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvgu83zep.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpy_kf_g1j.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpy_kf_g1j.js:15:20)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n    at closest_integer (/tmp/tmpy_kf_g1j.js:15:37)\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = Number(value);\n\
    \  var diff = Math.abs(num - Math.floor(num));\n  if (diff > 0.5) {\n    return\
    \ Math.floor(num);\n  }\n  return Math.ceil(num);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpgwk90toy.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgwk90toy.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphdpfvgg6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa1438_i9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (closest > 0 && closest < value){\n    return closest;\n\
    \  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpw4o55c41.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw4o55c41.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffAbsValueValueIndex;\n    var diffAbsValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValue\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvpljh217.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValueSumsIndex;\n \
    \ var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValues;\n  var\
    \ diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValueSumsIndex;\n \
    \ var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValues;\n  var\
    \ diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValueSumsIndex;\n \
    \ var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValueSums\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkpnnvygo.js:110\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbs\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg134f9yk.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa1438_i9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - Math.floor(value)) < Math.abs(value - Math.ceil(value))){\n\
    \    closest = Math.floor(value);\n  } else {\n    closest = Math.ceil(value);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpu2gt5v5w.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2gt5v5w.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpic4k8i0l.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < Math.abs(closest_integer\
    \ - value - 1)){\n    closest_integer = Math.round(value);\n  }\n  return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpobbi0l_d.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpobbi0l_d.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsSq;\n  var closestDiffAbsSqMinusOne;\n  var closestDiffAbsSqMinusTwo;\n\
    \  var closestDiffAbsSqMinusThree;\n  var closestDiffAbsSqMinusFour;\n  var closestDiffAbsSqMinusFive;\n\
    \  var closestDiffAbsSqMinusSix;\n  var closestDiffAbsSqMinusSeven;\n  var closestDiffAbsSqMinusEight;\n\
    \  var closestDiffAbsSqMinusNine;\n  var closestDiffAbsSqMinusTen;\n  var closestDiffAbsSqMinusEleven;\n\
    \  var closestDiffAbsSqMinusTwelve;\n  var closestDiffAbsSqMinusThirteen;\n  var\
    \ closestDiffAbsSqMinusFourteen;\n  var closestDiffAbsSqMinusFifteen;\n  var closestDiffAbsSqMinusSixteen;\n\
    \  var closestDiffAbsSqMinusSeventeen;\n  var closestDiffAbsSqMinusEighteen;\n\
    \  var closestDiffAbsSqMinusNineteen;\n  var closestDiffAbsSqMinusTwenty;\n  var\
    \ closestDiffAbsSqMinusTwentyOne;\n  var closestDiffAbsSqMinusTwentyTwo;\n  var\
    \ closestDiffAbsSqMinusTwentyThree;\n  var closestDiffAbsSqMinusTwentyFour;\n\
    \  var closestDiffAbsSqMinusTwentyFive;\n  var closestDiffAbsSqMinusTwentySix;\n\
    \  var closestDiffAbsSqMinusTwentySeven;\n  var closestDiffAbsSqMinusTwentyEight;\n\
    \  var closestDiffAbsSqMinusTwentyNine;\n  var closestDiffAbsSqMinusTwentyTen;\n\
    \  var closestDiffAbsSqMinusTwentyEleven;\n  var closestDiffAbsSqMinusTwentyTwelve;\n\
    \  var closestDiffAbsSqMinusTwentyThirteen;\n  var closestDiffAbsSqMinusTwentyFourteen;\n\
    \  var closestDiffAbsSqMinusTwentyFifteen;\n  var closestDiffAbsSqMinusTwentyS\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3p6buypb.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    var difference = Math.abs(value - closest_integer);\n\
    \    if (difference < 0.5){\n        return closest_integer;\n    }\n    return\
    \ closest_integer - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpl4ug8d49.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl4ug8d49.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex;\n  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n\
    \  var diffAbsMaxValAbsIndex4;\n  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n\
    \  var diffAbsMaxValAbsIndex7;\n  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n\
    \  var diffAbsMaxValAbsIndex10;\n  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n\
    \  var diffAbsMaxValAbsIndex13;\n  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n\
    \  var diffAbsMaxValAbsIndex16;\n  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n\
    \  var diffAbsMaxValAbsIndex19;\n  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n\
    \  var diffAbsMaxValAbsIndex22;\n  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n\
    \  var diffAbsMaxValAbsIndex25;\n  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n\
    \  var diffAbsMaxValAbsIndex28;\n  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n\
    \  var diffAbsMaxValAbsIndex31;\n  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n\
    \  var diffAbsMaxValAbsIndex34;\n  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n\
    \  var diffAbsMaxValAbsIndex37;\n  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n\
    \  var diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyjnj777o.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxVal;\n    var diffAbsMaxValIndex;\n    var diffAbsMaxValAbs;\n\
    \    var diffAbsMaxValAbsIndex;\n    var diffAbsMaxValAbsIndexIndex;\n    var\
    \ diffAbsMaxValAbsIndexIndexIndex;\n    var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndex;\n    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndex;\n    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n    var\
    \ diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex;\n\
    \    var diffAbsMaxValAbsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzqbku0s4.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestDiffAbsAbs;\n \
    \ var closestAbsDiffAbsAbs;\n  var closestDiffAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbs;\n  var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAb\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6x04lndh.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (Math.abs(value - closest) < 0.0000001){\n    return\
    \ closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpg4dsz8pv.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg4dsz8pv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq5_hk9l1.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  if(value === \"\" || value === null || value ===\
    \ undefined){\n    return value;\n  }\n  if(value === 0){\n    return 0;\n  }\n\
    \  if(value.indexOf(\".\") === -1){\n    return parseInt(value);\n  }\n  if(value.indexOf(\"\
    .\") === 0){\n    value = value.substring(1);\n  }\n  if(value.indexOf(\"e\")\
    \ === 0){\n    value = value.substring(1);\n  }\n  if(value.indexOf(\"e\") ===\
    \ -1){\n    return parseInt(value);\n  }\n  if(value.indexOf(\"-\") === 0){\n\
    \    value = value.substring(1);\n  }\n  if(value.indexOf(\"-\") === -1){\n  \
    \  return parseInt(value);\n  }\n  if(value.indexOf(\"+\") === 0){\n    value\
    \ = value.substring(1);\n  }\n  if(value.indexOf(\"+\") === -1){\n    return parseInt(value);\n\
    \  }\n  if(value.indexOf(\"0\") === 0){\n    value = value.substring(1);\n  }\n\
    \  if(value.indexOf(\"0\") === -1){\n    return parseInt(value);\n  }\n  if(value.indexOf(\"\
    -0\") === 0){\n    value = value.substring(2);\n  }\n  if(value.indexOf(\"-0\"\
    ) === -1){\n    return parseInt(value);\n  }\n  if(value.indexOf(\"-0\") === 0){\n\
    \    value = value.substring(2);\n  }\n  if(value.indexOf(\"-0\") === -1){\n \
    \   return parseInt(value);\n  }\n  if(value.indexOf(\"-0\") === 0){\n    value\
    \ = value.substring(2);\n  }\n  if(value.indexOf(\"-0\") === -1){\n    return\
    \ parseInt(value);\n  }\n  if(value.indexOf(\"-0\") === 0){\n    value = value.substring(2);\n\
    \  }\n  if(value.indexOf(\"-0\") === -1){\n    return parseInt(value);\n  }\n\
    \  if(value.indexOf(\"-0\") === 0){\n    value = value.substring(2);\n  }\n  if(value.indexOf(\"\
    -0\") === -1){\n    return parseInt(value);\n  }\n  if(value.indexOf(\"-0\") ===\
    \ 0){\n    value = value.substring(2);\n  }\n  if(value.indexOf(\"-0\") === -1){\n\
    \    return parseInt(value);\n  }\n  if(value.indexOf(\"-0\") === 0){\n    value\
    \ = value.substring(2);\n  }\n  if(value.indexOf(\"-0\") === -1){\n    return\
    \ parseInt(value);\n  }\n  if(value.indexOf(\"-0\") === 0){\n    value = value.substring(2);\n\
    \  }\n  if(value.indexOf(\"-0\") === -1){\n    return parseInt(value);\n  }\n\
    \  if(value.indexOf(\"-0\") === 0){\n    value = value.substring(2);\n  }\n  if(value.indexOf(\"\
    -0\") \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpr4g3t6m8.js:106\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpw3rt5sxq.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3rt5sxq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(value)));\n  return difference\
    \ < 0.5 ? Math.floor(value) : Math.ceil(value);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0x_qzu9.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(value)));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpq0x_qzu9.js:15:20)\n    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n\
    \    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n\
    \    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n\
    \    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n\
    \    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n    at closest_integer (/tmp/tmpq0x_qzu9.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  if(value === \"\"){\n    return value;\n  }\n  if(value\
    \ === null){\n    return value;\n  }\n  if(value === undefined){\n    return value;\n\
    \  }\n  if(value === true){\n    return value;\n  }\n  if(value === false){\n\
    \    return value;\n  }\n  if(value === 0){\n    return value;\n  }\n  if(value\
    \ === \"\"){\n    return value;\n  }\n  if(value === null){\n    return value;\n\
    \  }\n  if(value === undefined){\n    return value;\n  }\n  if(value === true){\n\
    \    return value;\n  }\n  if(value === false){\n    return value;\n  }\n  if(value\
    \ === 0){\n    return value;\n  }\n  if(value === \"\"){\n    return value;\n\
    \  }\n  if(value === null){\n    return value;\n  }\n  if(value === undefined){\n\
    \    return value;\n  }\n  if(value === true){\n    return value;\n  }\n  if(value\
    \ === false){\n    return value;\n  }\n  if(value === 0){\n    return value;\n\
    \  }\n  if(value === \"\"){\n    return value;\n  }\n  if(value === null){\n \
    \   return value;\n  }\n  if(value === undefined){\n    return value;\n  }\n \
    \ if(value === true){\n    return value;\n  }\n  if(value === false){\n    return\
    \ value;\n  }\n  if(value === 0){\n    return value;\n  }\n  if(value === \"\"\
    ){\n    return value;\n  }\n  if(value === null){\n    return value;\n  }\n  if(value\
    \ === undefined){\n    return value;\n  }\n  if(value === true){\n    return value;\n\
    \  }\n  if(value === false){\n    return value;\n  }\n  if(value === 0){\n   \
    \ return value;\n  }\n  if(value === \"\"){\n    return value;\n  }\n  if(value\
    \ === null){\n    return value;\n  }\n  if(value === undefined){\n    return value;\n\
    \  }\n  if(value === true){\n    return value;\n  }\n  if(value === false){\n\
    \    return value;\n  }\n  if(value === 0){\n    return value;\n  }\n  if(value\
    \ === \"\"){\n    return value;\n  }\n  if(value === null){\n    return value;\n\
    \  }\n  if(value === undefined){\n    return value;\n  }\n  if(value === true){\n\
    \    return value;\n  }\n  if(value === false){\n    return value;\n  }\n  if(value\
    \ === 0){\n    return value;\n  }\n  if(value === \"\"){\n    return value;\n\
    \  }\n  if(value === null){\n    return value;\n  }\n  if(value === undefined){\n\
    \    return value;\n  }\n  if(value === true){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwxce5_w2.js:166\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpofmcp4ix.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - closest_integer(value)) < .5){\n    closest = value;\n\
    \  }else{\n    closest = Math.ceil(value / closest_integer(value)) * closest_integer(value);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpswicu39w.js:16\n  if(Math.abs(value - closest_integer(value)) <\
    \ .5){\n  ^\n\nRangeError: Maximum call stack size exceeded\n    at closest_integer\
    \ (/tmp/tmpswicu39w.js:16:3)\n    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n\
    \    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n\
    \    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n\
    \    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n\
    \    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n    at closest_integer (/tmp/tmpswicu39w.js:16:23)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var closest;\n  if (difference\
    \ < 0.5){\n    closest = value;\n  } else if (difference < 1){\n    closest =\
    \ closest_integer(value-1);\n  } else {\n    closest = closest_integer(value+1);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2hlbpryz.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp2hlbpryz.js:15:20)\n    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n\
    \    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n\
    \    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n\
    \    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n\
    \    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n    at closest_integer (/tmp/tmp2hlbpryz.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplvho_7_8.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvd7usqm6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffAbsValueValueIndex;\n    var diffAbsValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValue\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2etvvn38.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - parseInt(value)) < Math.abs(value - parseInt(closest))){\n\
    \    closest = parseInt(value);\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n10\n    at test (/tmp/tmpeune1668.js:27:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpeune1668.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex2;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1eqqinr2.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n  var diffValueSumValue;\n\
    \  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpleckcgei.js:116\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var\
    \ n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n \
    \ var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var abs;\n  var absMax;\n\
    \  var absMaxIndex;\n  var absMaxValue;\n  var absMin;\n  var absMinIndex;\n \
    \ var absMinValue;\n  var absValue;\n  var absValueIndex;\n  var absValueValue;\n\
    \  var absValueValueIndex;\n  var absValueValueValue;\n  var absValueValueValueIndex;\n\
    \  var absValueValueValueValue;\n  var absValueValueValueValueIndex;\n  var absValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValueValueValue;\n\
    \  var absValueValueValueValueValueIndex;\n  var absValueValueValueValue\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpllvhrten.js:107\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(value === null || value === undefined){\n    return null;\n  }\n  if(value\
    \ === \"\"){\n    return null;\n  }\n  if(value === \".\"){\n    return null;\n\
    \  }\n  if(value.indexOf(\".\") === -1){\n    return parseInt(value);\n  }\n \
    \ var parts = value.split(\".\");\n  var integer = parseInt(parts[0]);\n  var\
    \ decimal = parseInt(parts[1]);\n  if(Math.abs(decimal - integer) < Math.abs(decimal\
    \ - closest)){\n    closest = integer;\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n15\n    at test (/tmp/tmpfiytg781.js:43:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpfiytg781.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) < Math.abs(value - closest)){\n    return closest;\n  }\n  return value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp2pie0bzq.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2pie0bzq.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxVal;\n    var diffAbsMaxValIndex;\n    var diffAbsMaxValAbs;\n\
    \    var diffAbsMaxValAbsIndex;\n    var diffAbsMaxValAbsIndex2;\n    var diffAbsMaxValAbsIndex3;\n\
    \    var diffAbsMaxValAbsIndex4;\n    var diffAbsMaxValAbsIndex5;\n    var diffAbsMaxValAbsIndex6;\n\
    \    var diffAbsMaxValAbsIndex7;\n    var diffAbsMaxValAbsIndex8;\n    var diffAbsMaxValAbsIndex9;\n\
    \    var diffAbsMaxValAbsIndex10;\n    var diffAbsMaxValAbsIndex11;\n    var diffAbsMaxValAbsIndex12;\n\
    \    var diffAbsMaxValAbsIndex13;\n    var diffAbsMaxValAbsIndex14;\n    var diffAbsMaxValAbsIndex15;\n\
    \    var diffAbsMaxValAbsIndex16;\n    var diffAbsMaxValAbsIndex17;\n    var diffAbsMaxValAbsIndex18;\n\
    \    var diffAbsMaxValAbsIndex19;\n    var diffAbsMaxValAbsIndex20;\n    var diffAbsMaxValAbsIndex21;\n\
    \    var diffAbsMaxValAbsIndex22;\n    var diffAbsMaxValAbsIndex23;\n    var diffAbsMaxValAbsIndex24;\n\
    \    var diffAbsMaxValAbsIndex25;\n    var diffAbsMaxValAbsIndex26;\n    var diffAbsMaxValAbsIndex27;\n\
    \    var diffAbsMaxValAbsIndex28;\n    var diffAbsMaxValAbsIndex29;\n    var diffAbsMaxValAbsIndex30;\n\
    \    var diffAbsMaxValAbsIndex31;\n    var diffAbsMaxValAbsIndex32;\n    var diffAbsMaxValAbsIndex33;\n\
    \    var diffAbsMaxValAbsIndex34;\n    var diffAbsMaxValAbsIndex35;\n    var diffAbsMaxValAbsIndex36;\n\
    \    var diffAbsMaxValAbsIndex37;\n    var diffAbsMaxValAbsIndex38;\n    var diffAbsMaxValAbsIndex39;\n\
    \    var diffAbsMaxValAbsIndex40;\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv6g8gx50.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n \
    \ var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAb\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfg7crkm1.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < 0.5){\n    return closest_integer;\n  } else {\n    return\
    \ closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp9cfnqutb.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9cfnqutb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var difference\
    \ = Math.abs(value - closest_integer(value));\n    if(difference <= 1){\n    \
    \    return value;\n    }\n    return value - difference;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpoe5cnnsa.js:15\n    var difference = Math.abs(value - closest_integer(value));\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpoe5cnnsa.js:15:22)\n    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n\
    \    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n\
    \    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n\
    \    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n\
    \    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n    at closest_integer (/tmp/tmpoe5cnnsa.js:15:39)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    var\
    \ difference = Math.abs(value - closest_integer(Math.floor(value)));\n    if(difference\
    \ < 2){\n      closest = Math.round(value);\n    }else{\n      closest = Math.round(value\
    \ - difference);\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpux76brvv.js:16\n  if(Math.abs(value) < 1){\n  ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at closest_integer (/tmp/tmpux76brvv.js:16:3)\n\
    \    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n\
    \    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n\
    \    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n\
    \    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n\
    \    at closest_integer (/tmp/tmpux76brvv.js:19:39)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (closest === 0){\n    return closest;\n  }\n  var diff\
    \ = Math.abs(value - closest);\n  if (diff < 0.5){\n    return closest;\n  }\n\
    \  return closest + 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpden_gptt.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpden_gptt.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpakpoc4qn.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiffAbs;\n  var\
    \ closestDiff;\n  var closestDiffAbsSq;\n  var closestAbsSq;\n  var closestAbsSqr;\n\
    \  var closestAbsSqrt;\n  var closestAbsSqrtd;\n  var closestAbsSqrtd2;\n  var\
    \ closestAbsSqrtd3;\n  var closestAbsSqrtd4;\n  var closestAbsSqrtd5;\n  var closestAbsSqrtd6;\n\
    \  var closestAbsSqrtd7;\n  var closestAbsSqrtd8;\n  var closestAbsSqrtd9;\n \
    \ var closestAbsSqrtd10;\n  var closestAbsSqrtd11;\n  var closestAbsSqrtd12;\n\
    \  var closestAbsSqrtd13;\n  var closestAbsSqrtd14;\n  var closestAbsSqrtd15;\n\
    \  var closestAbsSqrtd16;\n  var closestAbsSqrtd17;\n  var closestAbsSqrtd18;\n\
    \  var closestAbsSqrtd19;\n  var closestAbsSqrtd20;\n  var closestAbsSqrtd21;\n\
    \  var closestAbsSqrtd22;\n  var closestAbsSqrtd23;\n  var closestAbsSqrtd24;\n\
    \  var closestAbsSqrtd25;\n  var closestAbsSqrtd26;\n  var closestAbsSqrtd27;\n\
    \  var closestAbsSqrtd28;\n  var closestAbsSqrtd29;\n  var closestAbsSqrtd30;\n\
    \  var closestAbsSqrtd31;\n  var closestAbsSqrtd32;\n  var closestAbsSqrtd33;\n\
    \  var closestAbsSqrtd34;\n  var closestAbsSqrtd35;\n  var closestAbsSqrtd36;\n\
    \  var closestAbsSqrtd37;\n  var closestAbsSqrtd38;\n  var closestAbsSqrtd39;\n\
    \  var closestAbsSqrtd40;\n  var closestAbsSqrtd41;\n  var closestAbsSqrtd42;\n\
    \  var closestAbsSqrtd43;\n  var closestAbsSqrtd44;\n  var closestAbsSqrtd45;\n\
    \  var closestAbsSqrtd46;\n  var closestAbsSqrtd47;\n  var closestAbsSqrtd48;\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkudph91w.js:74\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpofmcp4ix.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = null;\n    for(var i = 0; i<values.length;\
    \ i++){\n        var value = values[i];\n        var distance = Math.abs(value\
    \ - closest);\n        if(closestDistance == null || distance < closestDistance){\n\
    \            closest = value;\n            closestDistance = distance;\n     \
    \   }\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3fa3tw8v.js:17\n    for(var i = 0; i<values.length; i++){\n   \
    \                  ^\n\nReferenceError: values is not defined\n    at closest_integer\
    \ (/tmp/tmp3fa3tw8v.js:17:22)\n    at test (/tmp/tmp3fa3tw8v.js:33:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3fa3tw8v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(value / 2);\n    if(Math.abs(closest - value) < Math.abs(closest\
    \ - value / 2)){\n      closest = Math.round(value / 2);\n    }\n  }\n  return\
    \ closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpn5lgxeju.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn5lgxeju.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestDiffAbsAbs;\n \
    \ var closestAbsDiffAbsAbs;\n  var closestDiffAbsAbsAbs;\n  var closestAbsDiffAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n\
    \  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n\
    \  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n\
    \  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n\
    \  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n\
    \  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n\
    \  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n\
    \  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n\
    \  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n\
    \  var closestAbsDiffAbsAbsAbsAbs\n  var closestDiffAbsAbsAbsAbsAbs\n  var closestAbsDiffAbsAbsAbsAbs\n\
    \  var closestDiffAbsAbsAbsAb\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3mwqs8l_.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < .5){\n    return closest_integer;\n  }\n  else {\n    return\
    \ closest_integer + 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpbvoqq32b.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbvoqq32b.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) === 0){\n    closest = 0;\n  }else{\n    closest = Math.round((Math.abs(value)\
    \ - Math.abs(Math.floor(value))) / Math.abs(Math.floor(value)));\n  }\n  return\
    \ closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmppuh5cxge.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppuh5cxge.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var closestDiff;\n    var diff;\n    var diffAbs;\n    var diffAbsMax;\n\
    \    var diffAbsMaxIndex;\n    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n\
    \    var diffAbsMaxValueValue;\n    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8hh3vkb0.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = null;\n    var closestDistanceSquare = null;\n\
    \    var closestSquareDistance = null;\n    var closestSquareDistanceSquare =\
    \ null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var closestSquareDistanceSquare\
    \ = null;\n    var closestSquareDistanceSquare = null;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppxnvpwqj.js:90\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestAbsDiff;\n    var closestAbsDiffAbs;\n\
    \    var closestDiffAbsAbs;\n    var closestAbsDiffAbsAbs;\n    var closestDiffAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbs;\n    var\
    \ closestDiffAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closest\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptouvn1r5.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp90k4mp7h.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc4ols1d_.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var closestDiff;\n    var closestDiffAbs;\n    var closestDiffAbs2;\n\
    \    var closestDiffAbs3;\n    var closestDiffAbs4;\n    var closestDiffAbs5;\n\
    \    var closestDiffAbs6;\n    var closestDiffAbs7;\n    var closestDiffAbs8;\n\
    \    var closestDiffAbs9;\n    var closestDiffAbs10;\n    var closestDiffAbs11;\n\
    \    var closestDiffAbs12;\n    var closestDiffAbs13;\n    var closestDiffAbs14;\n\
    \    var closestDiffAbs15;\n    var closestDiffAbs16;\n    var closestDiffAbs17;\n\
    \    var closestDiffAbs18;\n    var closestDiffAbs19;\n    var closestDiffAbs20;\n\
    \    var closestDiffAbs21;\n    var closestDiffAbs22;\n    var closestDiffAbs23;\n\
    \    var closestDiffAbs24;\n    var closestDiffAbs25;\n    var closestDiffAbs26;\n\
    \    var closestDiffAbs27;\n    var closestDiffAbs28;\n    var closestDiffAbs29;\n\
    \    var closestDiffAbs30;\n    var closestDiffAbs31;\n    var closestDiffAbs32;\n\
    \    var closestDiffAbs33;\n    var closestDiffAbs34;\n    var closestDiffAbs35;\n\
    \    var closestDiffAbs36;\n    var closestDiffAbs37;\n    var closestDiffAbs38;\n\
    \    var closestDiffAbs39;\n    var closestDiffAbs40;\n    var closestDiffAbs41;\n\
    \    var closestDiffAbs42;\n    var closestDiffAbs43;\n    var closestDiffAbs44;\n\
    \    var closestDiffAbs45;\n    var closestDiffAbs46;\n    var closestDiffAbs47;\n\
    \    var closestDiffAbs48;\n    var closestDiffAbs49;\n    var closestDiffAbs50;\n\
    \    var closestDiffAbs51;\n    var closestDiffAbs52;\n    var closestDiffAbs53;\n\
    \    var closestDiffAbs54;\n    var closestDiffAbs55;\n    var closestDiffAbs56;\n\
    \    var closestDiffAbs57;\n    var closestDiffAbs58;\n    var closestDiffAbs59;\n\
    \    var closestDiffAbs60;\n    var closestDiffAbs61;\n    var closestDiffAbs62;\n\
    \    var closestDiffAbs63;\n    var closestDiffAbs64;\n    var closestDiffAbs65;\n\
    \    var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp52rpdcx6.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwuyk72a2.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph0gv0q1g.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxAbs;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n    var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfz89ti6j.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  var int;\n  var sign;\n  if(value === null || value\
    \ === undefined){\n    return value;\n  }\n  if(typeof value === \"string\"){\n\
    \    value = parseFloat(value);\n  }\n  if(isNaN(value)){\n    return value;\n\
    \  }\n  if(Math.abs(value) < Number.EPSILON){\n    return value;\n  }\n  if(value\
    \ === 0){\n    return 0;\n  }\n  if(value === Number.POSITIVE_INFINITY){\n   \
    \ return value;\n  }\n  if(value === Number.NEGATIVE_INFINITY){\n    return value;\n\
    \  }\n  if(Math.abs(value) < Number.MIN_VALUE){\n    return value;\n  }\n  if(Math.abs(value)\
    \ > Number.MAX_VALUE){\n    return value;\n  }\n  if(value % 1 === 0){\n    return\
    \ value;\n  }\n  if(value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY){\n\
    \    return value;\n  }\n  if(value === Number.MAX_VALUE){\n    return value;\n\
    \  }\n  if(value === Number.MIN_VALUE){\n    return value;\n  }\n  if(value >=\
    \ 0){\n    sign = value < 0 ? -1 : 1;\n  }else{\n    sign = value < 0 ? 1 : -1;\n\
    \  }\n  abs = Math.abs(value);\n  if(abs <= Number.EPSILON){\n    return sign\
    \ * Math.round(value);\n  }\n  if(abs >= Number.MAX_SAFE_INTEGER){\n    return\
    \ sign * Math.round(value);\n  }\n  if(abs >= Number.MIN_SAFE_INTEGER){\n    return\
    \ sign * Math.round(value);\n  }\n  if(abs >= Number.EPSILON){\n    diff = abs\
    \ - Number.EPSILON;\n    int = sign * Math.floor(diff);\n    if(int !== diff){\n\
    \      return sign * Math.round(value);\n    }\n    return int;\n  }\n  if(abs\
    \ <= Number.EPSILON){\n    diff = abs + Number.EPSILON;\n    int = sign * Math.floor(diff);\n\
    \    if(int !== diff){\n      return sign * Math.round(value);\n    }\n    return\
    \ int;\n  }\n  if(abs >= Number.MAX_SAFE_INTEGER){\n    diff = abs - Number.MAX_SAFE_INTEGER;\n\
    \    int = sign * Math.floor(diff);\n    if(int !== diff){\n      return sign\
    \ * Math.round(value);\n    }\n    return int;\n  }\n  if(abs >= Number.MIN_SAFE_INTEGER){\n\
    \    diff = abs - Number.MIN_SAFE_INTEGER;\n    int = sign * Math.floor(diff);\n\
    \    if(int !== diff){\n      return sign * Math.round(value);\n    }\n    return\
    \ int;\n  }\n  if(abs >= Number.EPSILON){\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpebxs8mrb.js:120\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if (difference < .5){\n    return\
    \ value;\n  }\n  return value - difference;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmph4kzoibq.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmph4kzoibq.js:15:20)\n    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n\
    \    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n\
    \    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n\
    \    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n\
    \    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n    at closest_integer (/tmp/tmph4kzoibq.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValue;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n  var diffValueValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValueValueValueValueValueValueValueValueIndex;\n  var\
    \ diffValue\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc5xi2xlq.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer === value){\n    return value;\n\
    \  }\n  return closest_integer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp7u30lcs8.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7u30lcs8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var difference\
    \ = Math.abs(value - closest_integer(Math.abs(value)));\n    var closest;\n  \
    \  if (difference <= 1){\n        closest = value;\n    }\n    else {\n      \
    \  closest = Math.ceil(value / difference) * difference;\n    }\n    return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6xpsx1u8.js:15\n    var difference = Math.abs(value - closest_integer(Math.abs(value)));\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp6xpsx1u8.js:15:22)\n    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n\
    \    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n\
    \    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n\
    \    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n\
    \    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n    at closest_integer (/tmp/tmp6xpsx1u8.js:15:39)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestDiffAbsAbs;\n \
    \ var closestAbsDiffAbsAbs;\n  var closestDiffAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbs;\n  var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n  var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAb\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6x04lndh.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if(difference < 1){\n    return closest_integer;\n  }\n  else{\n    return\
    \ closest_integer + 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp40kaxvk1.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp40kaxvk1.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return value;\n  } else {\n    return closest_integer;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpw389gn1q.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw389gn1q.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  if (closest_integer < value){\n    return closest_integer;\n  }\n  return\
    \ closest_integer - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmph49r26ml.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph49r26ml.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqdfuxqqf.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsfh4j8hz.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < Math.abs(closest_integer\
    \ - value - 1)){\n    closest_integer = Math.round(value);\n  }\n  return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp_6_fvqu3.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_6_fvqu3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxVal;\n    var diffAbsMaxValIndex;\n    var diffAbsMaxValAbs;\n\
    \    var diffAbsMaxValAbsIndex;\n    var diffAbsMaxValAbsIndex2;\n    var diffAbsMaxValAbsIndex3;\n\
    \    var diffAbsMaxValAbsIndex4;\n    var diffAbsMaxValAbsIndex5;\n    var diffAbsMaxValAbsIndex6;\n\
    \    var diffAbsMaxValAbsIndex7;\n    var diffAbsMaxValAbsIndex8;\n    var diffAbsMaxValAbsIndex9;\n\
    \    var diffAbsMaxValAbsIndex10;\n    var diffAbsMaxValAbsIndex11;\n    var diffAbsMaxValAbsIndex12;\n\
    \    var diffAbsMaxValAbsIndex13;\n    var diffAbsMaxValAbsIndex14;\n    var diffAbsMaxValAbsIndex15;\n\
    \    var diffAbsMaxValAbsIndex16;\n    var diffAbsMaxValAbsIndex17;\n    var diffAbsMaxValAbsIndex18;\n\
    \    var diffAbsMaxValAbsIndex19;\n    var diffAbsMaxValAbsIndex20;\n    var diffAbsMaxValAbsIndex21;\n\
    \    var diffAbsMaxValAbsIndex22;\n    var diffAbsMaxValAbsIndex23;\n    var diffAbsMaxValAbsIndex24;\n\
    \    var diffAbsMaxValAbsIndex25;\n    var diffAbsMaxValAbsIndex26;\n    var diffAbsMaxValAbsIndex27;\n\
    \    var diffAbsMaxValAbsIndex28;\n    var diffAbsMaxValAbsIndex29;\n    var diffAbsMaxValAbsIndex30;\n\
    \    var diffAbsMaxValAbsIndex31;\n    var diffAbsMaxValAbsIndex32;\n    var diffAbsMaxValAbsIndex33;\n\
    \    var diffAbsMaxValAbsIndex34;\n    var diffAbsMaxValAbsIndex35;\n    var diffAbsMaxValAbsIndex36;\n\
    \    var diffAbsMaxValAbsIndex37;\n    var diffAbsMaxValAbsIndex38;\n    var diffAbsMaxValAbsIndex39;\n\
    \    var diffAbsMaxValAbsIndex40;\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv6g8gx50.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.1) {\n   \
    \ return closest_integer;\n  } else {\n    return value;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmptn_q2zk9.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptn_q2zk9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var closestDiff = Math.abs(value - closest_integer(value));\n    var closestDiffAbs\
    \ = Math.abs(closestDiff);\n    var closestAbs = Math.abs(value);\n    var closestAbsDiff\
    \ = Math.abs(closestAbs - closest);\n    var closestAbsDiffAbs = Math.abs(closestAbsDiff);\n\
    \    var closestAbsDiffAbsMinus1 = Math.abs(closestAbsDiffAbs - 1);\n    var closestAbsDiffAbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 1);\n    var closestAbsDiffAbsMinus1AbsMinus1\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 2);\n    var closestAbsDiffAbsMinus1AbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 3);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 4);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 5);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 6);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 7);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 8);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 9);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 10);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus1Abs\
    \ = Math.abs(closestAbsDiffAbsMinus1 - 11);\n    var closestAbsDiffAbsMinus1AbsMinus1AbsMinus1AbsMinus1AbsMinus\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph9jm88tk.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < 0.5){\n    return closest_integer;\n  }\n  else {\n    return\
    \ closest_integer + 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp4wl806e0.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4wl806e0.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff > 0.5){\n\
    \    return closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpxk5ax0h3.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxk5ax0h3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdbm1fxc8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if(closest_integer == value){\n        return value;\n\
    \    }\n    else if(closest_integer < value){\n        return closest_integer;\n\
    \    }\n    else{\n        return closest_integer - 1;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmph_edpswt.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph_edpswt.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if (Math.abs(closest_integer - value) < 0.00000001)\
    \ {\n        closest_integer = Math.round(value);\n    }\n    return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp39be7oh8.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp39be7oh8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Math.abs(parseInt(value));\n  for(var i = 1;\
    \ i < 100; i++){\n    var newDistance = Math.abs(parseInt(value) + i);\n    if(newDistance\
    \ < closestDistance){\n      closestDistance = newDistance;\n      closest = i;\n\
    \    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpatny27p4.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpatny27p4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValueValueIndex;\n  var diffValueValueValue;\n\
    \  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValue\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4_rs2f1w.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return value;\n  }\n  return closest_integer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpfnpvzdv0.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfnpvzdv0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (Math.abs(closest - value) < 0.0000001){\n    return\
    \ closest;\n  }\n  var difference = Math.abs(value - closest);\n  if (difference\
    \ < 0.0000001){\n    return closest;\n  }\n  return closest + 1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpwmuaz_e8.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwmuaz_e8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1o4s0e5h.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffAbsValueValueIndex;\n    var diffAbsValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValue\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9l5gxgt3.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxIndex = null;\n  var diffAbsMaxAbs = null;\n  var diffAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbs = null;\n  var diffAbsMaxAbsIndexAbsMax\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n \
    \ var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbs = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMax = null;\n\
    \  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndexAbsMaxAbsIndex\
    \ = null;\n  var diffAbsMaxAbsIndexAbsMaxAbsIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppeugvrf6.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Math.abs(parseInt(value));\n  var closestInteger\
    \ = parseInt(value);\n  for(var i = 1; i < 100; i++){\n    var currentDistance\
    \ = Math.abs(parseInt(value));\n    if(currentDistance < closestDistance){\n \
    \     closestDistance = currentDistance;\n      closest = i;\n      closestInteger\
    \ = i;\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmp3k25ydr9.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3k25ydr9.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq5_hk9l1.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValuesIndex;\n  var diffValuesValue;\n  var diffValuesMax;\n\
    \  var diffValuesMaxIndex;\n  var diffValuesMaxValue;\n  var diffValuesMin;\n\
    \  var diffValuesMinIndex;\n  var diffValuesMinValue;\n  var diffValuesValue;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxzbzzrzf.js:115\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp90k4mp7h.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa1438_i9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMin;\n  var closestDiffAbsMinIndex;\n  var closestDiffAbsMinValue;\n\
    \  var closestDiffAbsValue;\n  var closestDiffAbsValueIndex;\n  var closestDiffAbsValueValue;\n\
    \  var closestDiffAbsValueValueIndex;\n  var closestDiffAbsValueValueValue;\n\
    \  var closestDiffAbsValueValueValueIndex;\n  var closestDiffAbsValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \  var closestDiffAbsValueValueValueValueIndex;\n  var closestDiffAbsValueValueValueValueValue;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4x4ffipo.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.0000001) {\n\
    \    return closest_integer;\n  } else {\n    return value;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpwb2gtoq7.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwb2gtoq7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if (closest < 0){\n    closest *= -1;\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmpvbvix75_.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvbvix75_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestAbsDiff;\n    var closestAbsDiffAbs;\n\
    \    var closestAbsDiffAbs2;\n    var closestAbsDiffAbs3;\n    var closestAbsDiffAbs4;\n\
    \    var closestAbsDiffAbs5;\n    var closestAbsDiffAbs6;\n    var closestAbsDiffAbs7;\n\
    \    var closestAbsDiffAbs8;\n    var closestAbsDiffAbs9;\n    var closestAbsDiffAbs10;\n\
    \    var closestAbsDiffAbs11;\n    var closestAbsDiffAbs12;\n    var closestAbsDiffAbs13;\n\
    \    var closestAbsDiffAbs14;\n    var closestAbsDiffAbs15;\n    var closestAbsDiffAbs16;\n\
    \    var closestAbsDiffAbs17;\n    var closestAbsDiffAbs18;\n    var closestAbsDiffAbs19;\n\
    \    var closestAbsDiffAbs20;\n    var closestAbsDiffAbs21;\n    var closestAbsDiffAbs22;\n\
    \    var closestAbsDiffAbs23;\n    var closestAbsDiffAbs24;\n    var closestAbsDiffAbs25;\n\
    \    var closestAbsDiffAbs26;\n    var closestAbsDiffAbs27;\n    var closestAbsDiffAbs28;\n\
    \    var closestAbsDiffAbs29;\n    var closestAbsDiffAbs30;\n    var closestAbsDiffAbs31;\n\
    \    var closestAbsDiffAbs32;\n    var closestAbsDiffAbs33;\n    var closestAbsDiffAbs34;\n\
    \    var closestAbsDiffAbs35;\n    var closestAbsDiffAbs36;\n    var closestAbsDiffAbs37;\n\
    \    var closestAbsDiffAbs38;\n    var closestAbsDiffAbs39;\n    var closestAbsDiffAbs40;\n\
    \    var closestAbsDiffAbs41;\n    var closestAbsDiffAbs42;\n    var closestAbsDiffAbs43;\n\
    \    var closestAbsDiffAbs44;\n    var closestAbsDiffAbs45;\n    var closestAbsDiffAbs46;\n\
    \    var closestAbsDiffAbs47;\n    var closestAbsDiffAbs48;\n    var closestAbsDiffAbs49;\n\
    \    var closestAbsDiffAbs50;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp93xxrohk.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqdfuxqqf.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var roundTo = Math.floor(difference\
    \ / 2);\n  return roundTo === 0 ? value : value - roundTo;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0dr0pcmb.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp0dr0pcmb.js:15:20)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff > 0.5){\n\
    \    return closest;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpxk5ax0h3.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxk5ax0h3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference === 0){\n    return\
    \ value;\n  }\n  if(difference < 0.5){\n    return Math.ceil(value - 0.5);\n \
    \ }\n  return Math.floor(value + 0.5);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp6ad7iwnf.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp6ad7iwnf.js:15:20)\n    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n\
    \    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n\
    \    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n\
    \    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n\
    \    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n    at closest_integer (/tmp/tmp6ad7iwnf.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var closestAbs = null;\n\
    \  var closestDiff = null;\n  var closestDiffAbs = null;\n  var closestAbsDiff\
    \ = null;\n  var closestAbsDiffAbs = null;\n  var closestDiffAbsDiff = null;\n\
    \  var closestAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbs = null;\n  var\
    \ closestAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiff = null;\n\
    \  var closestAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var\
    \ closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var\
    \ closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n\
    \  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestDiffAbs\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8f9hwvpf.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa1438_i9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpic4k8i0l.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwuyk72a2.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  if(value === null || value === undefined){\n    return\
    \ null;\n  }\n  if(value === \"\"){\n    return null;\n  }\n  if(value.indexOf('.')\
    \ !== -1){\n    diff = value.split('.')[1] - value.split('.')[0];\n    sign =\
    \ value.split('.')[1] > value.split('.')[0] ? 1 : -1;\n  } else {\n    diff =\
    \ value - 0;\n    sign = 1;\n  }\n  if(Math.abs(diff) < .0000001){\n    closest\
    \ = value;\n  } else {\n    closest = parseInt(value) + sign * Math.floor(Math.abs(diff)\
    \ / .0000001);\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n100000010\n\n\
    should loosely deep-equal\n\n10\n    at test (/tmp/tmpc1ocb1gl.js:44:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpc1ocb1gl.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 100000010,\n\
    \  expected: 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var closestAbs = null;\n\
    \  var closestDiff = null;\n  var closestDiffAbs = null;\n  var closestAbsDiff\
    \ = null;\n  var closestAbsDiffAbs = null;\n  var closestDiffAbsDiff = null;\n\
    \  var closestAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbs = null;\n  var\
    \ closestAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiff = null;\n\
    \  var closestAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var\
    \ closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var\
    \ closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n\
    \  var closestDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var closestAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = null;\n  var closestDiffAbs\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8f9hwvpf.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  if(Math.abs(value) === 0){\n    return value;\n  }\n\
    \  abs = Math.abs(value);\n  diff = value - abs;\n  if(diff < 0){\n    closest\
    \ = abs;\n  }else{\n    closest = value - abs;\n  }\n  while(Math.abs(diff) >=\
    \ 1){\n    diff /= 10;\n    closest /= 10;\n  }\n  return closest;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp9doft9_p.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9doft9_p.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsfh4j8hz.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  return difference < 0.000000001\
    \ ? value : Math.round(value / difference) * difference;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppakvxgwp.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmppakvxgwp.js:15:20)\n    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n\
    \    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n\
    \    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n\
    \    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n\
    \    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n    at closest_integer (/tmp/tmppakvxgwp.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(value - closest_integer) < 0.1) {\n   \
    \ closest_integer = Math.round(value);\n  }\n  return closest_integer;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp1f8ohzfl.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1f8ohzfl.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.00000000001){\n\
    \    closest_integer = Math.round(value);\n  }\n  return closest_integer;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpz5dqpo_7.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz5dqpo_7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var intValue;\n  var intValues;\n  var i;\n  var\
    \ len;\n  var max;\n  var min;\n  var value;\n\n  if(value === undefined){\n \
    \   throw new Error('No value given to closest_integer');\n  }\n\n  if(typeof\
    \ value !== 'string'){\n    throw new Error('Value given to closest_integer is\
    \ not a string');\n  }\n\n  if(value.length !== 1){\n    throw new Error('Value\
    \ given to closest_integer is not a single character');\n  }\n\n  if(value.charAt(0)\
    \ === '-'){\n    sign = 1;\n    value = value.substring(1);\n  }else{\n    sign\
    \ = -1;\n  }\n\n  value = parseFloat(value);\n\n  if(isNaN(value)){\n    throw\
    \ new Error('Value given to closest_integer is not a number');\n  }\n\n  if(value\
    \ === 0){\n    return value;\n  }\n\n  if(value === Infinity){\n    return Infinity;\n\
    \  }\n\n  if(value === -Infinity){\n    return -Infinity;\n  }\n\n  if(value %\
    \ 1 !== 0){\n    throw new Error('Value given to closest_integer is not a whole\
    \ number');\n  }\n\n  diff = value - Math.floor(value);\n  if(diff > 0){\n   \
    \ return sign * Math.floor(Math.abs(diff));\n  }\n\n  if(diff < 0){\n    return\
    \ sign * Math.ceil(Math.abs(diff));\n  }\n\n  if(diff === 0){\n    return value;\n\
    \  }\n\n  intValue = Math.abs(Math.floor(value));\n  intValues = Math.abs(Math.ceil(value));\n\
    \n  if(intValue === intValues){\n    return intValue;\n  }\n\n  if(intValues %\
    \ intValue === 0){\n    return intValues;\n  }\n\n  if(intValue % intValues ===\
    \ 0){\n    return intValue;\n  }\n\n  if(intValues % intValue === intValue){\n\
    \    return intValues;\n  }\n\n  if(intValue % intValue === intValues){\n    return\
    \ intValue;\n  }\n\n  if(intValues % intValue === intValue){\n    return intValue;\n\
    \  }\n\n  if(intValues % intValue === intValues){\n    return intValue;\n  }\n\
    \n  if(intValues % intValue === intValue){\n    return intValue;\n  }\n\n  if(intValues\
    \ % intValue === intValues){\n    return intValue;\n  }\n\n  if(intValues % intValue\
    \ === intValue){\n    return intValue;\n  }\n\n  if(intValues % intValue === intValues){\n\
    \    return intValue;\n  }\n\n  if(intValues % intValue === intValue){\n    return\
    \ intValue;\n  }\n\n  if(intValues % intValue \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps5cfodyh.js:132\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if (Math.abs(closest_integer - value) <= 0.000000001){\n\
    \        closest_integer = Math.round(value);\n    }\n    return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp7onhien9.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7onhien9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var roundTo = Math.floor(difference\
    \ / 2);\n  return roundTo === 0 ? value : value - roundTo;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0dr0pcmb.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp0dr0pcmb.js:15:20)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n    at closest_integer (/tmp/tmp0dr0pcmb.js:15:37)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if (Math.abs(closest_integer - value) < 0.1) {\n \
    \       closest_integer = Math.ceil(value);\n    }\n    return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp0csy9nlp.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0csy9nlp.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'14.5'\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp66klysvv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp66klysvv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '14.5',\n\
    \  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = Math.round(value);\n    if(closest === value){\n        return closest;\n\
    \    }\n    var diff = Math.abs(value - closest);\n    if(diff < 1){\n       \
    \ return closest;\n    }\n    return closest + 1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpvi23m10q.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvi23m10q.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff === 0){\n\
    \    return closest;\n  }\n  if(diff > 0){\n    return closest;\n  }\n  return\
    \ closest - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmptpaoydfy.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptpaoydfy.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestAbsDiff;\n    var closestAbsDiffAbs;\n\
    \    var closestAbsDiffAbs2;\n    var closestAbsDiffAbs3;\n    var closestAbsDiffAbs4;\n\
    \    var closestAbsDiffAbs5;\n    var closestAbsDiffAbs6;\n    var closestAbsDiffAbs7;\n\
    \    var closestAbsDiffAbs8;\n    var closestAbsDiffAbs9;\n    var closestAbsDiffAbs10;\n\
    \    var closestAbsDiffAbs11;\n    var closestAbsDiffAbs12;\n    var closestAbsDiffAbs13;\n\
    \    var closestAbsDiffAbs14;\n    var closestAbsDiffAbs15;\n    var closestAbsDiffAbs16;\n\
    \    var closestAbsDiffAbs17;\n    var closestAbsDiffAbs18;\n    var closestAbsDiffAbs19;\n\
    \    var closestAbsDiffAbs20;\n    var closestAbsDiffAbs21;\n    var closestAbsDiffAbs22;\n\
    \    var closestAbsDiffAbs23;\n    var closestAbsDiffAbs24;\n    var closestAbsDiffAbs25;\n\
    \    var closestAbsDiffAbs26;\n    var closestAbsDiffAbs27;\n    var closestAbsDiffAbs28;\n\
    \    var closestAbsDiffAbs29;\n    var closestAbsDiffAbs30;\n    var closestAbsDiffAbs31;\n\
    \    var closestAbsDiffAbs32;\n    var closestAbsDiffAbs33;\n    var closestAbsDiffAbs34;\n\
    \    var closestAbsDiffAbs35;\n    var closestAbsDiffAbs36;\n    var closestAbsDiffAbs37;\n\
    \    var closestAbsDiffAbs38;\n    var closestAbsDiffAbs39;\n    var closestAbsDiffAbs40;\n\
    \    var closestAbsDiffAbs41;\n    var closestAbsDiffAbs42;\n    var closestAbsDiffAbs43;\n\
    \    var closestAbsDiffAbs44;\n    var closestAbsDiffAbs45;\n    var closestAbsDiffAbs46;\n\
    \    var closestAbsDiffAbs47;\n    var closestAbsDiffAbs48;\n    var closestAbsDiffAbs49;\n\
    \    var closestAbsDiffAbs50;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp93xxrohk.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq5_hk9l1.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if(difference < 0.5){\n    return closest_integer;\n  }\n  return closest_integer\
    \ - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpv8fvgfc5.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8fvgfc5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(value - closest_integer) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return closest_integer;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmptn0gl2t5.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptn0gl2t5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer;\n\
    \  var closest_integer_value;\n  var closest_integer_value_abs;\n  var closest_integer_value_abs_diff;\n\
    \  var closest_integer_value_diff;\n  var closest_integer_value_diff_abs;\n  var\
    \ closest_integer_value_diff_abs_diff;\n  var closest_integer_value_diff_diff;\n\
    \  var closest_integer_value_diff_diff_abs;\n  var closest_integer_value_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff_abs_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff_abs;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff_abs_diff;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff_diff;\n\
    \  var closest_integer_value_diff_diff_diff_diff_diff_diff_abs;\n  var closest_integer_value_diff_diff_diff_diff_diff_diff_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2uy7avgn.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return closest_integer;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpov371mut.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpov371mut.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest === value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) <= Math.abs(value - closest)){\n    return closest;\n  }\n  return\
    \ value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp14bv9y14.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp14bv9y14.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwuyk72a2.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestAbsDiff;\n    var closestAbsDiffAbs;\n\
    \    var closestDiffAbsAbs;\n    var closestAbsDiffAbsAbs;\n    var closestDiffAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n\
    \    var closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var\
    \ closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n\
    \    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n    var\
    \ closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n\
    \    var closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var\
    \ closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n\
    \    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n    var\
    \ closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n\
    \    var closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var\
    \ closestDiffAbsAbsAbsAbsAbs\n    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n\
    \    var closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAbsAbs\n    var\
    \ closestAbsDiffAbsAbsAbsAbs\n    var closestDiffAbsAbsAbsAb\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpgiwyonee.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8h4e7xj9.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqdfuxqqf.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpic4k8i0l.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValuesIndex;\n  var diffValuesValue;\n  var diffValuesMax;\n\
    \  var diffValuesMaxIndex;\n  var diffValuesMaxValue;\n  var diffValuesMin;\n\
    \  var diffValuesMinIndex;\n  var diffValuesMinValue;\n  var diffValuesValue;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n\
    \  var diffValueIndex;\n  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxzbzzrzf.js:115\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805202
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1agyv0jp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpq5_hk9l1.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659805201
